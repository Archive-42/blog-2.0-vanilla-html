{"componentChunkName":"component---src-templates-docs-js","path":"/docs/articles/","result":{"data":{"sitePage":{"id":"SitePage /docs/articles/"}},"pageContext":{"url":"/docs/articles/","relativePath":"docs/articles/index.md","relativeDir":"docs/articles","base":"index.md","name":"index","frontmatter":{"title":"Articles","weight":2,"excerpt":"resources","seo":{"title":"","description":"This section is similar to a blog but is more technical in nature and time invariant with regard to content.","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<div id=\"search\"></div>\n<div id=\"search\" />\n<p>|<div id=\"search\"></div></p>\n<div id=\"search\" />\n<div id=\"search\"></div>\n<div id=\"search\" />\n<p><span id=\"search\"></span></p>","pages":[{"url":"/blog/big-o-complexity/","relativePath":"blog/big-o-complexity.md","relativeDir":"blog","base":"big-o-complexity.md","name":"big-o-complexity","frontmatter":{"title":"Big O Computational Complexity","subtitle":"Explained using gif animations","date":"2021-09-11","thumb_image_alt":"neural network","excerpt":"Bubble sort, sorts an array of integers by bubbling the largest integer to the top.","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"post","thumb_image":"images/neural-c16cd3ca.PNG","image":"images/my-back-0b8b3eaf.png"},"html":"<h3>Sorting Algorithms<img src=\"https://cdn-images-1.medium.com/max/800/0*Ck9aeGY-d5tbz7dT\"><img src=\"https://cdn-images-1.medium.com/max/800/0*AByxtBjFrPVVYmyu\"><img src=\"https://cdn-images-1.medium.com/max/800/0*GeYNxlRcbt2cf0rY\"><img src=\"https://cdn-images-1.medium.com/max/800/0*gbNU6wrszGPrfAZG\"><img src=\"https://cdn-images-1.medium.com/max/800/0*GeU8YwwCoK8GiSTD\"><img src=\"https://cdn-images-1.medium.com/max/800/0*IxqGb72XDVDeeiMl\"><img src=\"https://cdn-images-1.medium.com/max/800/0*HMCR--9niDt5zY6M\"><img src=\"https://cdn-images-1.medium.com/max/800/0*WLl_HpdBGXYx284T\"><img src=\"https://cdn-images-1.medium.com/max/800/0*-LyHJXGPTYsWLDZf\"><img src=\"https://cdn-images-1.medium.com/max/800/0*-naVYGTXzE2Yoali\">\n\n</h3>\n<h3>Bubble Sort</h3>\n<p>Time Complexity: Quadratic O(n^2)</p>\n<ul>\n<li>The inner for-loop contributes to O(n), however in a worst case scenario the while loop will need to run n times before bringing all n elements to their final resting spot.</li>\n</ul>\n<p>Space Complexity: O(1)</p>\n<ul>\n<li>Bubble Sort will always use the same amount of memory regardless of n.</li>\n</ul>\n<p><a href=\"https://gist.github.com/eengineergz/e67e56bed7c5a20a54851867ba5efef6\">https://gist.github.com/eengineergz/e67e56bed7c5a20a54851867ba5efef6</a></p>\n<ul>\n<li>The first major sorting algorithm one learns in introductory programming courses.</li>\n<li>Gives an intro on how to convert unsorted data into sorted data.</li>\n</ul>\n<blockquote>\n<p>It’s almost never used in production code because:</p>\n</blockquote>\n<ul>\n<li><em>It’s not efficient</em></li>\n<li><em>It’s not commonly used</em></li>\n<li><em>There is stigma attached to it</em></li>\n<li><em>Bubbling Up : Term that infers that an item is in motion, moving in some direction, and has some final resting destination.</em></li>\n<li><em>Bubble sort, sorts an array of integers by bubbling the largest integer to the top.</em></li>\n</ul>\n<p><a href=\"https://gist.github.com/eengineergz/fd4acc0c89033bd219ebf9d3ec40b053\">https://gist.github.com/eengineergz/fd4acc0c89033bd219ebf9d3ec40b053</a><a href=\"https://gist.github.com/eengineergz/80934783c628c70ac2a5a48119a82d54\">https://gist.github.com/eengineergz/80934783c628c70ac2a5a48119a82d54</a></p>\n<ul>\n<li><em>Worst Case &#x26; Best Case are always the same because it makes nested loops.</em></li>\n<li><em>Double for loops are polynomial time complexity or more specifically in this case Quadratic (Big O) of: O(n²)</em></li>\n</ul>\n<h3>Selection Sort</h3>\n<p>Time Complexity: Quadratic O(n^2)</p>\n<ul>\n<li>Our outer loop will contribute O(n) while the inner loop will contribute O(n / 2) on average. Because our loops are nested we will get O(n²);</li>\n</ul>\n<p>Space Complexity: O(1)</p>\n<ul>\n<li>Selection Sort will always use the same amount of memory regardless of n.</li>\n</ul>\n<p><a href=\"https://gist.github.com/eengineergz/4abc0fe0bf01599b0c4104b0ba633402\">https://gist.github.com/eengineergz/4abc0fe0bf01599b0c4104b0ba633402</a></p>\n<ul>\n<li>Selection sort organizes the smallest elements to the start of the array.</li>\n</ul>\n<blockquote>\n<p>Summary of how Selection Sort should work:</p>\n</blockquote>\n<ol>\n<li><em>Set MIN to location 0</em></li>\n<li><em>Search the minimum element in the list.</em></li>\n<li><em>Swap with value at location Min</em></li>\n<li><em>Increment Min to point to next element.</em></li>\n<li><em>Repeat until list is sorted.</em></li>\n</ol>\n<p><a href=\"https://gist.github.com/eengineergz/61f130c8e0097572ed908fe2629bdee0\">https://gist.github.com/eengineergz/61f130c8e0097572ed908fe2629bdee0</a></p>\n<h3>Insertion Sort</h3>\n<p>Time Complexity: Quadratic O(n^2)</p>\n<ul>\n<li>Our outer loop will contribute O(n) while the inner loop will contribute O(n / 2) on average. Because our loops are nested we will get O(n²);</li>\n</ul>\n<p>Space Complexity: O(n)</p>\n<ul>\n<li>Because we are creating a subArray for each element in the original input, our Space Comlexity becomes linear.</li>\n</ul>\n<p><a href=\"https://gist.github.com/eengineergz/a9f4b8596c7546ac92746db659186d8c\">https://gist.github.com/eengineergz/a9f4b8596c7546ac92746db659186d8c</a></p>\n<h3>Merge Sort</h3>\n<p>Time Complexity: Log Linear O(nlog(n))</p>\n<ul>\n<li>Since our array gets split in half every single time we contribute O(log(n)). The while loop contained in our helper merge function contributes O(n) therefore our time complexity is O(nlog(n)); Space Complexity: O(n)</li>\n<li>We are linear O(n) time because we are creating subArrays.</li>\n</ul>\n<h3>Example of Merge Sort</h3>\n<p><a href=\"https://gist.github.com/eengineergz/18fbb7edc9f5c4820ccfcecacf3c5e48\">https://gist.github.com/eengineergz/18fbb7edc9f5c4820ccfcecacf3c5e48</a><a href=\"https://gist.github.com/eengineergz/cbb533137a7f957d3bc4077395c1ff64\">https://gist.github.com/eengineergz/cbb533137a7f957d3bc4077395c1ff64</a></p>\n<ul>\n<li><strong>Merge sort is O(nlog(n)) time.</strong></li>\n<li><em>We need a function for merging and a function for sorting.</em></li>\n</ul>\n<blockquote>\n<p>Steps:</p>\n</blockquote>\n<ol>\n<li><em>If there is only one element in the list, it is already sorted; return the array.</em></li>\n<li><em>Otherwise, divide the list recursively into two halves until it can no longer be divided.</em></li>\n<li><em>Merge the smallest lists into new list in a sorted order.</em></li>\n</ol>\n<h3>Quick Sort</h3>\n<p>Time Complexity: Quadratic O(n^2)</p>\n<ul>\n<li>Even though the average time complexity O(nLog(n)), the worst case scenario is always quadratic.</li>\n</ul>\n<p>Space Complexity: O(n)</p>\n<ul>\n<li>Our space complexity is linear O(n) because of the partition arrays we create.</li>\n<li>QS is another Divide and Conquer strategy.</li>\n<li>Some key ideas to keep in mind:</li>\n<li>It is easy to sort elements of an array relative to a particular target value.</li>\n<li>An array of 0 or 1 elements is already trivially sorted.</li>\n</ul>\n<p><a href=\"https://gist.github.com/eengineergz/24bcbc5248a8c4e1671945e9512da57e\">https://gist.github.com/eengineergz/24bcbc5248a8c4e1671945e9512da57e</a></p>\n<h3>Binary Search</h3>\n<p>Time Complexity: Log Time O(log(n))</p>\n<p>Space Complexity: O(1)</p>\n<blockquote>\n<p><em>Recursive Solution</em></p>\n</blockquote>\n<p><a href=\"https://gist.github.com/eengineergz/c82c00a4bcba4b69b7d326d6cad3ac8c\">https://gist.github.com/eengineergz/c82c00a4bcba4b69b7d326d6cad3ac8c</a></p>\n<blockquote>\n<p><em>Min Max Solution</em></p>\n</blockquote>\n<p><a href=\"https://gist.github.com/eengineergz/eb8d1e1684db15cc2c8af28e13f38751\">https://gist.github.com/eengineergz/eb8d1e1684db15cc2c8af28e13f38751</a><a href=\"https://gist.github.com/eengineergz/bc3f576b9795ccef12a108e36f9f820a\">https://gist.github.com/eengineergz/bc3f576b9795ccef12a108e36f9f820a</a></p>\n<ul>\n<li><em>Must be conducted on a sorted array.</em></li>\n<li><em>Binary search is logarithmic time, not exponential b/c n is cut down by two, not growing.</em></li>\n<li><em>Binary Search is part of Divide and Conquer.</em></li>\n</ul>\n<h3>Insertion Sort</h3>\n<ul>\n<li><strong>Works by building a larger and larger sorted region at the left-most end of the array.</strong></li>\n</ul>\n<blockquote>\n<p>Steps:</p>\n</blockquote>\n<ol>\n<li><em>If it is the first element, and it is already sorted; return 1.</em></li>\n<li><em>Pick next element.</em></li>\n<li><em>Compare with all elements in the sorted sub list</em></li>\n<li><em>Shift all the elements in the sorted sub list that is greater than the value to be sorted.</em></li>\n<li><em>Insert the value</em></li>\n<li><em>Repeat until list is sorted.</em></li>\n</ol>\n<p><a href=\"https://gist.github.com/eengineergz/ffead1de0836c4bcc6445780a604f617\">https://gist.github.com/eengineergz/ffead1de0836c4bcc6445780a604f617</a></p>"},{"url":"/showcase/","relativePath":"showcase.md","relativeDir":"","base":"showcase.md","name":"showcase","frontmatter":{"title":"Showcase","sections":[{"section_id":"hero","type":"section_hero","title":"Showcase","image":"images/charming-dolphin.gif","content":"Some of my more engaging projects!\n"},{"section_id":"showcase","type":"section_grid","col_number":"three","grid_items":[{"title":"Git HTML PREVIEW","title_url":"https://github.com/bgoonz/GIT-HTML-PREVIEW-TOOL","image":"images/futuristic-mars.gif","content":"Preview html files by pasting their url into the search bar\n\n**Access-Control-Allow-Origin Header When Site A tries to fetch content from Site B**\n","actions":[{"label":"Live Site","url":"/https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/","style":"icon","icon_class":"github","new_window":true,"no_follow":false,"type":"action"}],"image_alt":"git html preview"},{"title":"Guitar Effects Automation Using Subsequence Dynamic Time Warping","title_url":"https://github.com/bgoonz/Revamped-Automatic-Guitar-Effect-Triggering","image":"images/curious-europa.gif","content":"**Modified subsequence dynamic time warping feature detection using pure data implemented in python**\n","actions":[{"label":"Slide Show","url":"https://1drv.ms/p/s!AkGiZ9n9CRDSpY88x407JwfEKNrDxg?e=faHSx9","style":"link","icon_class":"dev","new_window":true,"no_follow":false,"type":"action"}]},{"title":"Data Structures Interactive Learning Hub","title_url":"https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/","image":"images/ds-algo.gif","content":"**Big O notation is the language we use for talking about how long an algorithm takes to run. It's how we compare the efficiency of different approaches to a problem.**\n","actions":[{"label":"Live Site","url":"https://github.com/bgoonz/DS-ALGO-OFFICIAL","style":"icon","icon_class":"github","new_window":true,"no_follow":false,"type":"action"}]},{"title":"Learning Redux","title_url":"https://learning-redux42.netlify.app/","image_alt":"lorem-ipsum","content":"***React Redux provides a pair of custom React hooks that allow your React components to interact with the Redux store.***\n","actions":[{"label":"Website","url":"https://learning-redux42.netlify.app/","style":"icon","icon_class":"dev","new_window":true,"no_follow":false,"type":"action"}],"type":"grid_item","image":"images/best-birch.gif"},{"title":"Mihir-Beg-Music.com","title_url":"https://panoramic-eggplant-452e4.netlify.app/","image":"images/7a8bc98e902a2f6dea90386cdfb154c2.png","content":"Artist Showcase & Podcasting Site\n","actions":[{"label":"Live Site","url":"https://panoramic-eggplant-452e4.netlify.app/","style":"link","icon_class":"dev","new_window":true,"no_follow":false,"type":"action"}]},{"title":"Aux Blog w NextJS","title_url":"https://bgoonz-blog-v3-0.netlify.app/","image_alt":"get in touch","content":"**Here lives my alternate/backup blog site!**\n","actions":[{"label":"git repo","url":"https://github.com/bgoonz/alternate-blog-theme","style":"icon","icon_class":"github","new_window":true,"no_follow":false,"type":"action"}],"type":"grid_item","image":"images/21ecc2f26e2641c8e9aae5479481bbe2 (5).png"},{"title":"Potluck Planner","title_url":"https://potluck-landing.netlify.app/","image_alt":"lorem-ipsum","content":"## Potluck Planner\n\nIf you have ever tried to organize a potluck through text messages, online to-do lists or spreadsheets, you'll understand why this app is essential.In the world of social gatherings and potlucks the \"Potluck Planner\" is king. This is your place for all things pot luck.\n\n","actions":[],"type":"grid_item","image":"images/potluck-planner.JPG"},{"title":"Zumzi Video Conferencing","title_url":"https://github.com/bgoonz/zumzi-chat-messenger","image_alt":"video chat","content":"**Features:   Live Streaming, Screen Sharing, Fine control over all video & audio parameters and user permissions, Supports video streaming at various resolutions: Standard, HD, FHD and 4K, Group Chat, One-to-One chat, Invite Participants**\n","actions":[{"label":"Live Site","url":"https://goofy-perlman-0f61df.netlify.app/","style":"link","icon_class":"dev","new_window":true,"no_follow":false,"type":"action"}],"type":"grid_item","image":"images/energetic-sunflower.png"},{"title":"Web Audio Workstation","title_url":"lorem-ipsum","image_alt":"lorem-ipsum","content":"Made using jQuery and Vanilla JS\n\n","actions":[{"label":"Go To Live Site","url":"https://mihirbegmusiclab.netlify.app/","style":"link","icon_class":"dev","new_window":true,"no_follow":false,"type":"action"},{"label":"Github Repo","url":"https://github.com/bgoonz/MihirBegMusicLab","style":"link","icon_class":"dev","new_window":true,"no_follow":false,"type":"action"}],"type":"grid_item","image":"images/royal-kangaroo.JPG"}]}],"seo":{"title":"Showcase","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Showcase","keyName":"property"},{"name":"og:description","value":"project showcase","keyName":"property"},{"name":"og:image","value":"images/My Post-4ecb169f.png","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Showcase"},{"name":"twitter:description","value":"This is the showcase page"},{"name":"twitter:image","value":"images/5.jpg","relativeUrl":true}],"description":"Git HTML PREVIEW, Guitar Effects, Data Structures, Redux, Podcast Blog, Contact Form, Potluck Planner, Video Conferencing, Web Audio Workstation"},"template":"advanced"},"html":""},{"url":"/","relativePath":"index.md","relativeDir":"","base":"index.md","name":"index","frontmatter":{"title":"Web Dev Hub Home","sections":[{"section_id":"Intro","type":"section_hero","title":"I am a musician, electrical engineer & web developer","image":"images/api-c99e353f761d318322c853c03ebcf21b.gif","content":"###### **A passionate student of web development from New Jersey U.S.A**\n\n**Please note that this website is in development and is often broken!**\n\n[](https://www.vagrantup.com/)[![](https://img.icons8.com/color/96/000000/gmail.png)](mailto:bryan.guner@gmail.com)[![](https://img.icons8.com/color/96/000000/youtube.png)](https://www.youtube.com/channel/UC9-rYyUMsnEBK8G8fCyrXXA/videos)[![](https://img.icons8.com/color/96/000000/instagram-new.png)](https://www.instagram.com/bgoonz/?hl=en) [![](https://img.icons8.com/color/96/000000/medium-logo.png)](https://bryanguner.medium.com/)\n\n[ ](https://webpack.js.org/)[ ](https://www.adobe.com/products/xd.html)\n\n[![Netlify Status](https://api.netlify.com/api/v1/badges/a1b7ee1a-11a7-4bd2-a341-2260656e216f/deploy-status)](https://app.netlify.com/sites/bgoonz-blog/deploys)\n\n[![Bryans github activity graph](https://activity-graph.herokuapp.com/graph?username=bgoonz\\&custom_title=This%20is%20Bryans%20Activity\\&hide_border=true\\&theme=chartreuse-dark)](https://github.com/bgoonz/github-readme-activity-graph)\n","actions":[{"label":"Contact","url":"https://sidebar-blog.netlify.app/contact/","style":"secondary","icon_class":"linkedin","new_window":true,"no_follow":false,"type":"action"}]},{"section_id":"features","type":"section_grid","col_number":"three","grid_items":[{"content":"Memoization, Tabulation, and Sorting Algorithms by Example\nWhy is looking at runtime not a reliable method of calculating time complexity?\n","actions":[{"label":"Get Started","url":"/docs","style":"link"}],"title":"A Quick Guide To Big O","image":"images/my-back.png","title_url":"https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522"},{"content":"*Python has a built in help function that let’s you see a description of the source code without having to navigate to it… “-SickNasty … Autor Unknown”  .*\n","actions":[{"label":"View Posts","url":"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb","style":"link"}],"image_alt":"python","title":"Python Guide","title_url":"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb","image":"images/smiling-maple.png"},{"content":"<div id=\"search\"></div> <div id=\"search\" />\n","actions":[{"label":"Learn More","url":"/docs/tools","style":"link"}],"title":"Guitar Effects Triggering w DTW","title_url":"https://github.com/bgoonz/Revamped-Automatic-Guitar-Effect-Triggering","image":"images/panoramic-owl.png"},{"title_url":"https://bryanguner.medium.com/introductory-react-part-2-cda01615a186","image_alt":"img of dtw","content":"As I learn to build web applications in React I will blog about it in this series in an attempt to capture the questions that a complete beginner might encounter that a more seasoned developer would take for granted!\n","actions":[],"type":"grid_item","title":"Beginner Guide React","image":"images/successful-panda.gif"},{"title_url":"https://dev.to/bgoonz/scope-and-context-in-javascript-5cma","image_alt":"img of react","content":"Scope & Context in JS\n\nThe **scope** of a program in JavaScript is the set of variables that are available for use within the program. \n","actions":[],"type":"grid_item","image":"images/pleasant-birch.png","title":"Scope & Closure"},{"image_alt":"Every idea needs a medium","content":"PostgreSQL Cheat Sheet, Everything You Need to Get Started With VSCode + Extensions & Resources, Super Simple Intro To HTML,  Understanding Git... etc....\n","actions":[],"type":"grid_item","title":"My Medium Blog","image":"images/curious-mustard.png","title_url":"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b"}]},{"title":"Current Interests","section_id":"interests","subtitle":"From github repositories to existential questions.","col_number":"three","grid_items":[{"title":"Angolia","title_url":"angolia","image_alt":"angolia","content":"## Full Text Search\n\n[Full Text Search](https://www.algolia.com/)\n\n## &#xA;\n","actions":[],"type":"grid_item","image":"images/spectacular-turmeric.png"},{"title":"Convolutional Neural Networks","title_url":"neural networks","image_alt":"neural networks","content":"Artificial neural networks, usually simply called neural networks, are computing systems vaguely inspired by the biological [neural networks](https://github.com/tensorflow/tensorflow)![](/\\_static/app-assets/neural.PNG)\n\n","actions":[],"type":"grid_item","image":"images/neural.PNG"},{"title":"Jamstack","title_url":"jamstack","image_alt":"jamstack","content":"## Why Jamstack\n\n*Jamstack is the new standard architecture for the web. Using Git workflows and modern build tools, pre-rendered content is served to a CDN and made dynamic through APIs and serverless functions. Technologies in the stack include JavaScript frameworks, Static Site Generators, Headless CMSs, and CDNs.*\n","actions":[],"type":"grid_item","image":"images/jamstack.png"},{"title":"Asynchronous JavaScript","title_url":"lorem-ipsum","image_alt":"lorem-ipsum","content":"The term **asynchronous** refers to two or more objects or events **not** existing or happening at the same time (or multiple related things happening without waiting for the previous one to complete). In computing, the word \"asynchronous\" is used in two major contexts.\n\n","actions":[],"type":"grid_item","image":"images/eventloop.gif"},{"title":"NJ Devils","image_alt":"nj-devils","content":"# New Jersey Devils Hockey Team\n\n### (Hockey in general)\n\n## Team identity\n\n[![](https://upload.wikimedia.org/wikipedia/en/thumb/d/da/OldDevils.png/300px-OldDevils.png)](https://en.wikipedia.org/wiki/File:OldDevils.png)\n\nThe old green style jerseys used from 1982 to 1992The jerseys used from 1992 to 2017[Sean Avery](https://en.wikipedia.org/wiki/Sean_Avery) of the [New York Rangers](https://en.wikipedia.org/wiki/New_York_Rangers) attempts to distract Brodeur during the [2008 Stanley Cup playoffs](https://en.wikipedia.org/wiki/2008\\_Stanley_Cup_playoffs). The playoff series was the fifth to feature the [Devils–Rangers rivalry](https://en.wikipedia.org/wiki/Devils%E2%80%93Rangers_rivalry).\n","actions":[{"label":"lorem-ipsum","url":"#","style":"link","icon_class":"dev","new_window":false,"no_follow":false}],"type":"grid_item","image":"images/njdevils.jpg","title_url":"https://www.allaboutthejersey.com/"},{"title":"ITER Fusion Reactor Experiment (Southern France)","title_url":"lorem-ipsum","image_alt":"lorem-ipsum","content":"# Break Even Nuclear Fusion Candidate\n\nIn December, researchers at the Joint European Torus (JET) started conducting fusion experiments with tritium — a rare and radioactive isotope of hydrogen. The facility is a one-tenth-volume mock-up of the US$22-billion ITER project and has the same doughnut-shaped ‘tokamak’ design — the world’s most developed approach to fusion energy. It is the first time since 1997 that researchers have done experiments in a tokamak with any significant amount of tritium.\n\n","actions":[],"type":"grid_item","image":"images/iter-zoomed.PNG"}],"type":"section_grid"},{"section_id":"features-two-col","type":"section_grid","title":"Resume & Portfolio","col_number":"two","grid_items":[{"title":"Resume","actions":[{"label":"Learn More","url":"https://1drv.ms/b/s!AkGiZ9n9CRDSpLsZsnPtiN7p77vq6A","style":"link"},{"label":"Download PDF","url":"#","style":"link","icon_class":"dev","new_window":false,"no_follow":false,"type":"action"}],"image":"images/resume.JPG","title_url":"https://github.com/bgoonz/resume-cv-portfolio-samples/raw/master/2021-resume/bryan-guner-resume-2021.pdf"},{"title":"Showcase","content":"![](/\\_static/app-assets/lambda-demo1.gif)My Projects!\n","actions":[{"label":"Learn More","url":"/showcase","style":"link"}],"image":"images/My Post.png"}]},{"title":"Blog-Archive-And-Mini-Projects","section_id":"lorem-ipsum","image_alt":"lorem-ipsum","image_position":"left","content":"<iframe class=\"block-content\" width=\"100%  width=\"1200px!important\" height=\"1000px!important\"\n  src=\"https://random-static-html-deploys.netlify.app/rotate.html\" title=\"YouTube video\n  player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n  encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","actions":[],"type":"section_content"},{"section_id":"Web Audio DAW","image_alt":"medium","image_position":"left","actions":[{"label":"Go To Web Audio Daw","url":"https://mihirbegmusiclab.netlify.app/","style":"primary","icon_class":"dev","new_window":true,"no_follow":false,"type":"action"}],"type":"section_content","image":"images/goals.jpg","title":"Web Audio DAW"},{"title":"Quick Links","section_id":"navigate from the home page","col_number":"two","type":"section_docs","subtitle":"quick links home"},{"title":"Contact","section_id":"contact","actions":[{"label":"Contact","url":"/docs/faq/contact","style":"primary","icon_class":"dev","new_window":false,"no_follow":false,"type":"action"},{"label":"email","url":"mailto:bryan.guner@gmail.com","style":"primary","icon_class":"dev","new_window":false,"no_follow":false},{"label":"Collaborate","url":"https://webdevhub.jetbrains.space/oauth/auth/invite/419dd305ba717a392a02aa5b4e41e09c","style":"primary","icon_class":"dev","new_window":false,"no_follow":false},{"label":"Subscribe (Youtube)","url":"https://www.youtube.com/channel/UC9-rYyUMsnEBK8G8fCyrXXA?sub_confirmation=1","style":"primary","icon_class":"dev","new_window":false,"no_follow":false}],"type":"section_cta","subtitle":"get in touch! +1 (551) - 254 - 5505"}],"seo":{"title":"Web-Dev-Hub","description":"bigO, Python, Javascript, Audio, Processing, Learning, Blog, React, PostgreSQL, Scope, Closure, Web Development, Embed, API, Website, Design, Music, Search","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Web-Dev-Hub","keyName":"property"},{"name":"og:description","value":"my resource sharing and blog site ... centered mostly on web development and just a bit of audio production / generally nerdy things I find interesting.","keyName":"property"},{"name":"og:image","value":"images/code.png","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Web-Dev-Hub"},{"name":"twitter:description","value":"Web-Dev-Hub"},{"name":"twitter:image","value":"images/4.jpg","relativeUrl":true}]},"template":"advanced"},"html":""},{"url":"/blog/flow-control-in-python/","relativePath":"blog/flow-control-in-python.md","relativeDir":"blog","base":"flow-control-in-python.md","name":"flow-control-in-python","frontmatter":{"title":"flow-control-in-python","subtitle":"flow-control-in-python","date":"2021-10-12","thumb_image_alt":"lorem-ipsum","excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"post"},"html":"<h2>Read It</h2>\n<ul>\n<li><a href=\"https://www.pythoncheatsheet.org\">Website</a></li>\n<li><a href=\"https://github.com/wilfredinni/python-cheatsheet\">Github</a></li>\n<li><a href=\"https://github.com/wilfredinni/Python-cheatsheet/raw/master/python_cheat_sheet.pdf\">PDF</a></li>\n<li><a href=\"https://mybinder.org/v2/gh/wilfredinni/python-cheatsheet/master?filepath=jupyter_notebooks\">Jupyter Notebook</a></li>\n</ul>\n<h2>Flow Control</h2>\n<h3>Comparison Operators</h3>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>==</code></td>\n<td>Equal to</td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td>Not equal to</td>\n</tr>\n<tr>\n<td><code>&#x3C;</code></td>\n<td>Less than</td>\n</tr>\n<tr>\n<td><code>></code></td>\n<td>Greater Than</td>\n</tr>\n<tr>\n<td><code>&#x3C;=</code></td>\n<td>Less than or Equal to</td>\n</tr>\n<tr>\n<td><code>>=</code></td>\n<td>Greater than or Equal to</td>\n</tr>\n</tbody>\n</table>\n<p>These operators evaluate to True or False depending on the values you give them.</p>\n<p>Examples:</p>\n<pre><code class=\"language-python\">42 == 42\n</code></pre>\n<pre><code class=\"language-python\">40 == 42\n</code></pre>\n<pre><code class=\"language-python\">'hello' == 'hello'\n</code></pre>\n<pre><code class=\"language-python\">'hello' == 'Hello'\n</code></pre>\n<pre><code class=\"language-python\">'dog' != 'cat'\n</code></pre>\n<pre><code class=\"language-python\">42 == 42.0\n</code></pre>\n<pre><code class=\"language-python\">42 == '42'\n</code></pre>\n<h3>Boolean evaluation</h3>\n<p>Never use <code>==</code> or <code>!=</code> operator to evaluate boolean operation. Use the <code>is</code> or <code>is not</code> operators,\nor use implicit boolean evaluation.</p>\n<p>NO (even if they are valid Python):</p>\n<pre><code class=\"language-python\">True == True\n</code></pre>\n<pre><code class=\"language-python\">True != False\n</code></pre>\n<p>YES (even if they are valid Python):</p>\n<pre><code class=\"language-python\">True is True\n</code></pre>\n<pre><code class=\"language-python\">True is not False\n</code></pre>\n<p>These statements are equivalent:</p>\n<pre><code class=\"language-Python\">if a is True:\n   pass\nif a is not False:\n   pass\nif a:\n   pass\n</code></pre>\n<p>And these as well:</p>\n<pre><code class=\"language-Python\">if a is False:\n   pass\nif a is not True:\n   pass\nif not a:\n   pass\n</code></pre>\n<h3>Boolean Operators</h3>\n<p>There are three Boolean operators: and, or, and not.</p>\n<p>The <em>and</em> Operator’s <em>Truth</em> Table:</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Evaluates to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>True and True</td>\n<td>True</td>\n</tr>\n<tr>\n<td>True and False</td>\n<td>False</td>\n</tr>\n<tr>\n<td>False and True</td>\n<td>False</td>\n</tr>\n<tr>\n<td>False and False</td>\n<td>False</td>\n</tr>\n</tbody>\n</table>\n<p>The <em>or</em> Operator’s <em>Truth</em> Table:</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Evaluates to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>True or True</td>\n<td>True</td>\n</tr>\n<tr>\n<td>True or False</td>\n<td>True</td>\n</tr>\n<tr>\n<td>False or True</td>\n<td>True</td>\n</tr>\n<tr>\n<td>False or False</td>\n<td>False</td>\n</tr>\n</tbody>\n</table>\n<p>The <em>not</em> Operator’s <em>Truth</em> Table:</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Evaluates to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>not True</td>\n<td>False</td>\n</tr>\n<tr>\n<td>not False</td>\n<td>True</td>\n</tr>\n</tbody>\n</table>\n<h3>Mixing Boolean and Comparison Operators</h3>\n<pre><code class=\"language-python\">(4 &#x3C; 5) and (5 &#x3C; 6)\n</code></pre>\n<pre><code class=\"language-python\">(4 &#x3C; 5) and (9 &#x3C; 6)\n</code></pre>\n<pre><code class=\"language-python\">(1 == 2) or (2 == 2)\n</code></pre>\n<p>You can also use multiple Boolean operators in an expression, along with the comparison operators:</p>\n<pre><code class=\"language-python\">2 + 2 == 4 and not 2 + 2 == 5 and 2 * 2 == 2 + 2\n</code></pre>\n<h3>if Statements</h3>\n<pre><code class=\"language-python\">if name == 'Alice':\n    print('Hi, Alice.')\n</code></pre>\n<h3>else Statements</h3>\n<pre><code class=\"language-python\">name = 'Bob'\n\nif name == 'Alice':\n    print('Hi, Alice.')\nelse:\n    print('Hello, stranger.')\n</code></pre>\n<h3>elif Statements</h3>\n<pre><code class=\"language-python\">name = 'Bob'\nage = 5\n\nif name == 'Alice':\n    print('Hi, Alice.')\nelif age &#x3C; 12:\n    print('You are not Alice, kiddo.')\n</code></pre>\n<pre><code class=\"language-python\">name = 'Bob'\nage = 30\n\nif name == 'Alice':\n    print('Hi, Alice.')\nelif age &#x3C; 12:\n    print('You are not Alice, kiddo.')\nelse:\n    print('You are neither Alice nor a little kid.')\n</code></pre>\n<h3>while Loop Statements</h3>\n<pre><code class=\"language-python\">spam = 0\n\nwhile spam &#x3C; 5:\n    print('Hello, world.')\n    spam = spam + 1\n</code></pre>\n<h3>break Statements</h3>\n<p>If the execution reaches a break statement, it immediately exits the while loop’s clause:</p>\n<pre><code class=\"language-python\">while True:\n    print('Please type your name.')\n    name = input()\n    if name == 'your name':\n        break\n\nprint('Thank you!')\n</code></pre>\n<h3>continue Statements</h3>\n<p>When the program execution reaches a continue statement, the program execution immediately jumps back to the start of the loop.</p>\n<pre><code class=\"language-python\">while True:\n    print('Who are you?')\n    name = input()\n    if name != 'Joe':\n        continue\n    print('Hello, Joe. What is the password? (It is a fish.)')\n    password = input()\n    if password == 'swordfish':\n        break\n\nprint('Access granted.')\n</code></pre>\n<h3>for Loops and the range() Function</h3>\n<pre><code class=\"language-python\">print('My name is')\nfor i in range(5):\n    print('Jimmy Five Times ({})'.format(str(i)))\n</code></pre>\n<p>The <em>range()</em> function can also be called with three arguments. The first two arguments will be the start and stop values, and the third will be the step argument. The step is the amount that the variable is increased by after each iteration.</p>\n<pre><code class=\"language-python\">for i in range(0, 10, 2):\n   print(i)\n</code></pre>\n<p>You can even use a negative number for the step argument to make the for loop count down instead of up.</p>\n<pre><code class=\"language-python\">for i in range(5, -1, -1):\n    print(i)\n</code></pre>\n<h3>For else statement</h3>\n<p>This allows you to specify a statement to execute after the full loop has been executed. Only\nuseful when a <code>break</code> condition can occur in the loop:</p>\n<pre><code class=\"language-python\">for i in [1, 2, 3, 4, 5]:\n   if i == 3:\n       break\nelse:\n   print(\"only executed when no item of the list is equal to 3\")\n</code></pre>\n<h3>Importing Modules</h3>\n<pre><code class=\"language-python\">import random\n\nfor i in range(5):\n    print(random.randint(1, 10))\n</code></pre>\n<pre><code class=\"language-python\">import random, sys, os, math\n</code></pre>\n<pre><code class=\"language-python\">from random import *\n</code></pre>\n<h3>Ending a Program with sys.exit</h3>\n<pre><code class=\"language-python\">import sys\n\nwhile True:\n    print('Type exit to exit.')\n    response = input()\n    if response == 'exit':\n        sys.exit()\n    print('You typed {}.'.format(response))\n</code></pre>"},{"url":"/review/","relativePath":"review.md","relativeDir":"","base":"review.md","name":"review","frontmatter":{"title":"review","sections":[],"seo":{"title":"review","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"advanced"},"html":"<div id=\"search\"></div>\n<h2>description: Review</h2>\n<h1>Review-Of-Previous-Concepts</h1>\n<h3>Review of Concepts</h3>\n<h3>Running JS Locally Concepts</h3>\n<ul>\n<li>\n<p>Match the commands <code>ls</code>, <code>cd</code>, <code>pwd</code> to their descriptions</p>\n<ul>\n<li><code>ls</code> lists contents of current directory</li>\n<li>\n<p><code>cd</code> changes current directory</p>\n<ul>\n<li><code>cd ..</code> takes you up one level</li>\n<li><code>cd</code> alone takes you back home</li>\n</ul>\n</li>\n<li><code>pwd</code> returns current directory</li>\n</ul>\n</li>\n<li>Given a folder structure diagram, a list of 'cd (path)' commands and target files, match the paths to the target files.</li>\n<li>Use VSCode to create a folder. Within the folder create a .js file containing <code>console.log('hello new world');</code> and save it.</li>\n<li>Use node to execute a JavaScript file in the terminal</li>\n</ul>\n<h3>Plain Old JS Object Lesson Concepts</h3>\n<ul>\n<li>\n<p>Label variables as either Primitive vs. Reference</p>\n<ul>\n<li>\n<p>primitives: strings, booleans, numbers, null and undefined</p>\n<ul>\n<li>primitives are immutable</li>\n</ul>\n</li>\n<li>\n<p>refereces: objects (including arrays)</p>\n<ul>\n<li>references are mutable</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Identify when to use <code>.</code> vs <code>[]</code> when accessing values of an object</p>\n<ul>\n<li>\n<p>dot syntax <code>object.key</code></p>\n<ul>\n<li>easier to read</li>\n<li>easier to write</li>\n<li>cannot use variables as keys</li>\n<li>keys cannot begin with a number</li>\n</ul>\n</li>\n<li>\n<p>bracket notation <code>object[\"key]</code></p>\n<ul>\n<li>allows variables as keys</li>\n<li>strings that start with numbers can be use as keys</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Write an object literal with a variable key using interpolation</p>\n<ul>\n<li>\n<p>put it in brackets to access the value of the variable, rather than just make the value that string</p>\n<pre><code class=\"language-javascript\">let a = 'b';\nlet obj = { a: 'letter_a', [a]: 'letter b' };\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Use the <code>obj[key] !== undefined</code> pattern to check if a given variable that contains a key exists in an object</p>\n<ul>\n<li>can also use <code>(key in object)</code> syntax interchangeably (returns a boolean)</li>\n</ul>\n</li>\n<li>\n<p>Utilize Object.keys and Object.values in a function</p>\n<ul>\n<li><code>Object.keys(obj)</code> returns an array of all the keys in <code>obj</code></li>\n<li><code>Object.values(obj)</code> returns an array of the values in <code>obj</code></li>\n</ul>\n</li>\n<li>\n<p>Iterate through an object using a <code>for in</code> loop</p>\n<pre><code class=\"language-javascript\">let printValues = function (obj) {\n    for (let key in obj) {\n        let value = obj[key];\n        console.log(value);\n    }\n};\n</code></pre>\n</li>\n<li>\n<p>Define a function that utilizes <code>...rest</code> syntax to accept an arbitrary number of arguments</p>\n<ul>\n<li><code>...rest</code> syntax will store all additional arguments in an array</li>\n<li>\n<p>array will be empty if there are no additional arguments</p>\n<pre><code class=\"language-javascript\">let myFunction = function (str, ...strs) {\n    console.log('The first string is ' + str);\n    console.log('The rest of the strings are:');\n    strs.forEach(function (str) {\n        console.log(str);\n    });\n};\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3></h3>\n<ul>\n<li>\n<p>Use <code>...spread</code> syntax for Object literals and Array literals</p>\n<pre><code class=\"language-javascript\">let arr1 = ['a', 'b', 'c'];\nlet longer = [...arr1, 'd', 'e']; // [\"a\", \"b\", \"c\", \"d\", \"e\"]\n// without spread syntax, this would give you a nested array\nlet withoutRest = [arr1, 'd', 'e']; // [[\"a\", \"b\", \"c\"], \"d\", \"e\"]\n</code></pre>\n</li>\n<li>\n<p>Destructure an array to reference specific elements</p>\n<p>```javascript</p>\n<p>let array = [35,9];</p>\n<p>let [firstEl, secondEl] = array;</p>\n<p>console.log(firstEl); // => 35</p>\n<p>console.log(secondEl); // => 9</p>\n</li>\n</ul>\n<p>// can also destructure using ... syntax let array = [35,9,14]; let [head, ...tail] = array; console.log(head); // => 35 console.log(tail); // => [9, 14]</p>\n<pre><code class=\"language-javascript\">- Destructure an object to reference specific values\n   - if you want to use variable names that don't match the keys, you can use aliasing\n      - `let { oldkeyname: newkeyname } = object`\n   - rule of thumb—only destructure values from objects that are two levels deep\n```javascript\nlet obj = {\n   name: \"Wilfred\",\n   appearance: [\"short\", \"mustache\"],\n   favorites: {\n      color: \"mauve\",\n      food: \"spaghetti squash\",\n      number: 3\n   }\n}\n// with variable names that match keys\nlet { name, appearance } = obj;\nconsole.log(name); // \"Wilfred\"\nconsole.log(appearance); // [\"short\", \"mustache\"]\n\n// with new variable names (aliasing)\nlet {name: myName, appearance: myAppearance} = obj;\n\nconsole.log(myName); // \"Wilfred\"\nconsole.log(myAppearance); // [\"short\", \"mustache\"]\n\n// in a function call\nlet sayHello = function({name}) {\nconsole.log(\"Hello, \" + name); // \"Hello Wilfred\"\n}\n\n// nested objects + aliasing\nlet { favorites: {color, food: vegetable} } = obj;\nconsole.log(color, vegetable); //=> mauve spaghetti squash\n</code></pre>\n<ul>\n<li>\n<p>Write a function that accepts a array as an argument and returns an object representing the count of each character in the array</p>\n<pre><code class=\"language-javascript\">//\nlet elementCounts = function (array) {\n    let obj = {};\n    array.forEach(function (el) {\n        if (el in obj) obj[el] += 1;\n        else obj[el] = 1;\n    });\n    return obj;\n};\nconsole.log(elementCounts(['e', 'f', 'g', 'f'])); // => Object {e: 1, f: 2, g: 1}\n</code></pre>\n</li>\n</ul>\n<h3>Callbacks Lesson Concepts</h3>\n<ul>\n<li>\n<p>Given multiple plausible reasons, identify why functions are called \"First Class Objects\" in JavaScript.</p>\n<ul>\n<li>they can be stored in variables, passed as arguments to other functions, and serve as return value for a function</li>\n<li>supports same basic operations as other types (strings, bools, numbers)</li>\n<li>higher-order functions take functions as arguments or return functions as values</li>\n</ul>\n</li>\n<li>\n<p>Given a code snippet containing an anonymous callback, a named callback, and multiple <code>console.log</code>s, predict what will be printed</p>\n<ul>\n<li>what is this referring to?</li>\n</ul>\n</li>\n<li>Write a function that takes in a value and two callbacks. The function should return the result of the callback that is greater.</li>\n</ul>\n<pre><code class=\"language-javascript\">let greaterCB = function (val, callback1, callback2) {\n    if (callback1(val) > callback2(val)) {\n        return callback1(val);\n    }\n    return callback2(val);\n};\n\nlet greaterCB = function (val, callback1, callback2) {\n    if (callback1(val) > callback2(val)) {\n        return callback1(val);\n    }\n    return callback2(val);\n};\n</code></pre>\n<p>// shorter version let greaterCB = function(val, callback1, callback2) { return Math.max(callback1(val), callback2(val)); } // even shorter, cause why not let greaterCB = (val, cb1, cb2) => Math.max(cb1(val), cb2(val));</p>\n<pre><code class=\"language-javascript\">- Write a function, myMap, that takes in an array and a callback as arguments. The function should mimic the behavior of `Array#map`.\n```javascript\nlet myMap = function(array, callback) {\n   let newArr = [];\n   for (let i = 0; i &#x3C; array.length; i ++) {\n      mapped = callback(array[i], i, array);\n      newArr.push(mapped);\n   }\n   return newArr;\n}\nconsole.log( myMap([16,25,36], Math.sqrt)); // => [4, 5, 6];\n\nlet myMapArrow = (array, callback) => {\n   let newArr = [];\n   array.forEach( (ele, ind, array) => {\n      newArr.push(callback(ele, ind, array));\n   })\n   return newArr;\n}\nconsole.log(myMapArrow([16,25,36], Math.sqrt)); // => [4, 5, 6];\n</code></pre>\n<ul>\n<li>\n<p>Write a function, myFilter, that takes in an array and a callback as arguments. The function should mimic the behavior of <code>Array#filter</code>.</p>\n<pre><code class=\"language-javascript\">let myFilter = function (array, callback) {\n    let filtered = [];\n    for (let i = 0; i &#x3C; array.length; i++) {\n        if (callback(array[i])) {\n            filtered.push(array[i], i, array);\n        }\n    }\n};\n</code></pre>\n</li>\n<li>\n<p>Write a function, myEvery, that takes in an array and a callback as arguments. The function should mimic the behavior of <code>Array#every</code>.</p>\n<pre><code class=\"language-javascript\">let myEvery = function (array, callback) {\n    for (let i = 0; i &#x3C; array.length; i++) {\n        if (!callback(array[i], i, array)) {\n            return false;\n        }\n    }\n    return true;\n};\n// with arrow function syntax\nlet myEvery = (array, callback) => {\n    for (let i = 0; i &#x3C; array.length; i++) {\n        if (!callback(array[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n</code></pre>\n</li>\n</ul>\n<h3>Scope Lesson Concepts</h3>\n<ul>\n<li>\n<p>Identify the difference between <code>const</code>, <code>let</code>, and <code>var</code> declarations</p>\n<ul>\n<li><code>const</code> - cannot reassign variable, scoped to block</li>\n<li><code>let</code> - can reassign variable, scoped to block</li>\n<li><code>var</code> - outdated, may or may not be reassigned, scoped to function. can be not just reassigned, but also redeclared!</li>\n<li>a variable will always evaluate to the value it contains regardless of how it was declared</li>\n</ul>\n</li>\n<li>\n<p>Explain the difference between <code>const</code>, <code>let</code>, and <code>var</code> declarations</p>\n<ul>\n<li>\n<p><code>var</code> is function scoped—so if you declare it anywhere in a function, the declaration (but not assignment) is \"hoisted\"</p>\n<ul>\n<li>so it will exist in memory as \"undefined\" which is bad and unpredictable</li>\n</ul>\n</li>\n<li><code>var</code> will also allow you to redeclare a variable, while <code>let</code> or <code>const</code> will raise a syntax error. you shouldn't be able to do that!</li>\n<li><code>const</code> won't let you reassign a variable, but if it points to a mutable object, you will still be able to change the value by mutating the object</li>\n<li>block-scoped variables allow new variables with the same name in new scopes</li>\n<li>block-scoped still performs hoisting of all variables within the block, but it doesn't initialize to the value of <code>undefined</code> like <code>var</code> does, so it throws a specific reference error if you try to access the value before it has been declared</li>\n<li>\n<p>if you do not use <code>var</code> or <code>let</code> or <code>const</code> when initializing, it will be declared as global—THIS IS BAD</p>\n<ul>\n<li>if you assign a value without a declaration, it exists in the global scope (so then it would be accessible by all outer scopes, so bad). however, there's no hoisting, so it doesn't exist in the scope until after the line is run</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Predict the evaluation of code that utilizes function scope, block scope, lexical scope, and scope chaining</p>\n<ul>\n<li>scope of a program means the set of variables that are available for use within the program</li>\n<li>\n<p>global scope is represented by the <code>window</code> object in the browser and the <code>global</code> object in Node.js</p>\n<ul>\n<li>global variables are available everywhere, and so increase the risk of name collisions</li>\n</ul>\n</li>\n<li>\n<p>local scope is the set of variables available for use within the function</p>\n<ul>\n<li>when we enter a function, we enter a new scope</li>\n<li>includes functions arguments, local variables declared inside function, and any variables that were already declared when the function is defined (hmm about that last one)</li>\n</ul>\n</li>\n<li>for blocks (denoted by curly braces <code>{}</code>, as in conditionals or <code>for</code> loops), variables can be block scoped</li>\n<li>\n<p>inner scope does not have access to variables in the outer scope</p>\n<ul>\n<li>scope chaining—if a given variable is not found in immediate scope, javascript will search all accessible outer scopes until variable is found</li>\n<li>so an inner scope can access outer scope variables</li>\n<li>but an outer scope can never access inner scope variables</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Define an arrow function</p>\n<p>```javascript</p>\n<p>let arrowFunction = (param1, param2) => {</p>\n<p>let sum = param1 + param2;</p>\n<p>return sum;</p>\n<p>}</p>\n</li>\n</ul>\n<p>// with 1 param you can remove parens around parameters let arrowFunction = param => { param += 1; return param; }</p>\n<p>// if your return statement is one line, you can use implied return let arrowFunction = param => param + 1;</p>\n<p>// you don't have to assign to variable, can be anonymous // if you never need to use it again param => param + 1;</p>\n<p>```</p>\n<ul>\n<li>\n<p>Given an arrow function, deduce the value of <code>this</code> without executing the code</p>\n<ul>\n<li>arrow functions are automatically bound to the context they were declared in</li>\n<li>unlike regular function which use the context they are invoked in (unless they have been bound using <code>Function#bind</code>)</li>\n<li>if you implement an arrow function as a method in an object the context it will be bound to is NOT the object itself, but the global context</li>\n<li>\n<p>so you can't use an arrow function to define a method directly</p>\n<p>```javascript</p>\n<p>let obj = {</p>\n<p>name: \"my object\",</p>\n<p>unboundFunc: function () {</p>\n<p>return this.name;</p>\n<p>// this function will be able to be called on different objects</p>\n<p>},</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3></h3>\n<p>boundToGlobal: () => { return this.name; // this function, no matter how you call it, will be called // on the global object, and it cannot be rebound // this is because it was defined using arrow syntax },</p>\n<pre><code class=\"language-javascript\">makeFuncBoundToObj: function () {\n    return () => {\n        return this.name;\n    }\n    // this function will return a function that will be bound\n    // to the object where we call the outer method\n    // because the arrow syntax is nested inside one of this\n    // function's methods, it cannot be rebound\n},\n\nmakeUnboundFunc: function () {\n    return function () {\n        return this.name;\n    }\n    //this function will return a function that will still be unbound\n},\n\nimmediatelyInvokedFunc: function () {\n    return this.name;\n}(), // this property will be set to the return value of this anonymous function,\n// which is invoked during the object definition;\n// basically, it's a way to check the context inside of an object, at this moment\n\ninnerObj: {\n    name: \"inner object\",\n    innerArrowFunc: () =>  {\n        return this.name;\n    } // the context inside a nested object is not the parent, it's still\n    // the global object. entering an object definition doesn't change the context\n},\n\n\nlet otherObj = { name: \"my other object\" }\n// call unboundFunc on obj, we get \"my object\" console.log(\"unboundFunc: \", obj.unboundFunc()); // => \"my object\" // assign unboundFunc to a variable and call it let newFunc = obj.unboundFunc; // this newFunc will default to being called on global object console.log(\"newFunc: \",newFunc()); // => undefined // but you could bind it directly to a different object if you wanted console.log(\"newFunc: \", newFunc.bind(otherObj)()); // \"my other object\"\n// meanwhile, obj.boundToGlobal will only ever be called on global object console.log(\"boundToGlobal: \", obj.boundToGlobal()); //=> undefined let newBoundFunc = obj.boundToGlobal; console.log(\"newBoundFunc: \", newBoundFunc()); // => undefined // even if you try to directly bind to another object, it won't work! console.log(\"newBoundFunc: \", newBoundFunc.bind(otherObj)()); // => undefined\n// let's make a new function that will always be bound to the context // where we call our function maker let boundFunc = obj.makeFuncBoundToObj();// note that we're invoking, not just assigning console.log(\"boundFunc: \", boundFunc()); // => \"my object\" // we can't rebind this function console.log(\"boundFunc: \", boundFunc.bind(otherObj)()) // =>\"my object\"\n// but if I call makeFuncBoundToObj on another context // the new bound function is stuck with that other context let boundToOther = obj.makeFuncBoundToObj.bind(otherObj)(); console.log(\"boundToOther: \", boundToOther()); // => \"my other object\" console.log(\"boundToOther: \", boundToOther.bind(obj)()) // \"my other object\"\n// the return value of my immediately invoked function // shows that the context inside of the object is the // global object, not the object itself // context only changes inside a function that is called // on an object console.log(\"immediatelyInvokedFunc: \", obj.immediatelyInvokedFunc); // => undefined\n// even though we're inside a nested object, the context is // still the same as it was outside the outer object // in this case, the global object console.log(\"innerArrowFunc: \", obj.innerObj.innerArrowFunc()); // => undefined\n</code></pre>\n<p>}</p>\n<pre><code class=\"language-javascript\">- Implement a closure and explain how the closure effects scope\n   - a closure is \"the combination of a function and the lexical environment within which that function was declared\"\n      - alternatively, \"when an inner function uses or changes variables in an outer function\"\n   - closures have access to any variables within their own scope + scope of outer functions + global scope — the set of all these available variables is \"lexical environemnt\"\n   - closure keeps reference to all variables **even if the outer function has returned**\n      - each function has a private mutable state that cannot be accessed externally\n      - the inner function will maintain a reference to the scope in which it was declared. so it has access to variables that were initialized in any outer scope—even if that scope\n      - if a variable exists in the scope of what could have been accessed by a function (e.g. global scope, outer function, etc), does that variable wind up in the closure even if it never got accessed?\n      - if you change the value of a variable (e.g. i++) you will change the value of that variable in the scope that it was declared in\n\n\n```javascript\nfunction createCounter() {\n   // this function starts a counter at 0, then returns a\n   // new function that can access and change that counter\n   //\n   // each new counter you create will have a single internal\n   // state, that can be changed only by calling the function.\n   // you can't access that state from outside of the function,\n   // even though the count variable in question is initialized\n   // by the outer function, and it remains accessible to the\n   // inner function after the outer function returns.\n   let count = 0;\n   return function() {\n      count ++;\n      return count;\n   }\n}\n\nlet counter = createCounter();\nconsole.log(counter()); //=> 1\nconsole.log(counter()); //=> 2\n// so the closure here comes into play because\n// an inner function is accessing and changing\n// a variable from an outer function\n\n// the closure is the combination of the counter\n// function and the all the variables that existed\n// in the scope that it was declared in. because\n// inner blocks/functions have access to outer\n// scopes, that includes the scope of the outer\n// function.\n\n// so counter variable is a closure, in that\n// it contains the inner count value that was\n// initialized by the outer createCounter() function\n// count has been captured or closed over\n\n// this state is private, so if i run createCounter again\n// i get a totally separate count that doesn't interact\n// with the previous one and each of the new functions\n// will have their own internal state based on the\n// initial declaration in the now-closed outer function\n\nlet counter2 = createCounter();\nconsole.log(counter2()); // => 1\n\n// if i set a new function equal to my existing counter\n// the internal state is shared with the new function\nlet counter3 = counter2;\nconsole.log(counter3());\n</code></pre>\n<ul>\n<li>\n<p>Define a method that references <code>this</code> on an object literal</p>\n<ul>\n<li>\n<p>when we use <code>this</code> in a method it refers to the object that the method is invoked on</p>\n<ul>\n<li>it will let you access other pieces of information from within that object, or even other methods</li>\n<li>method style invocation - <code>object.method(args)</code> (e.g. built in examples like <code>Array#push</code>, or <code>String#toUpperCase</code>)</li>\n</ul>\n</li>\n<li>context is set every time we invoke a function</li>\n<li>function style invocation sets the context to the global object no matter what</li>\n<li>being inside an object does not make the context that object! you still have to use method-style invocation</li>\n</ul>\n</li>\n<li>\n<p>Utilize the built in <code>Function#bind</code> on a callback to maintain the context of this</p>\n<ul>\n<li>when we call bind on a function, we get an exotic function back—so the context will always be the same for that new function</li>\n</ul>\n<pre><code class=\"language-text\">let cat = {\npurr: function () {\nconsole.log(\"meow\");\n},\npurrMore: function () {\nthis.purr();\n},\n};\nlet sayMeow = cat.purrMore; console.log(sayMeow()); // TypeError: this.purr is not a function\n\n\n// we can use the built in Function.bind to ensure our context, our this, // is the cat object let boundCat = sayMeow.bind(cat);\nboundCat(); // prints \"meow\"\n</code></pre>\n<p>``</p>\n</li>\n</ul>\n<h3></h3>\n<h3></h3>\n<pre><code class=\"language-javascript\">   - `bind` can also work with arguments, so you can have a version of a function with particular arguments and a particular context. the first arg will be the context aka the `this` you want it to use. the next arguments will be the functions arguments that you are binding\n      - if you just want to bind it to those arguments in particular, you can use `null` as the first argument, so the context won't be bound, just the arguments\n- Given a code snippet, identify what `this` refers to\n   - important to recognize the difference between scope and context\n      - scope works like a dictionary that has all the variables that are available within a given block, plus a pointer back the next outer scope (which itself has pointers to new scopes until you reach the global scope. so you can think about a whole given block's scope as a kind of linked list of dictionaries) (also, this is not to say that scope is actually implemented in this way, that is just the schema that i can use to understand it)\n      - context refers to the value of the `this` keyword\n   - the keyword `this` exists in every function and it evaluates to the object that is currently invoking that function\n   - so the context is fairly straightforward when we talk about methods being called on specific objects\n   - you could, however, call an object's method on something other than that object, and then this would refer to the context where/how it was called, e.g.\n```javascript\nlet dog = {\n   name: \"Bowser\",\n   changeName: function () {\n      this.name = \"Layla\";\n  },\n};\n\n// note this is **not invoked** - we are assigning the function itself\nlet change = dog.changeName;\nconsole.log(change()); // undefined\n\n// our dog still has the same name\nconsole.log(dog); // { name: 'Bowser', changeName: [Function: changeName] }\n\n// instead of changing the dog we changed the global name!!!\nconsole.log(this); // Object [global] {etc, etc, etc,  name: 'Layla'}\n</code></pre>\n<ul>\n<li>\n<p>CALLING SOMETHING IN THE WRONG CONTEXT CAN MESS YOU UP!</p>\n<ul>\n<li>could throw an error if it expects this to have some other method or whatever that doesn't exist</li>\n<li>you could also overwrite values or assign values to exist in a space where they should not exist</li>\n</ul>\n</li>\n<li>\n<p>if you call a function as a callback, it will set <code>this</code> to be the outer function itself, even if the function you were calling is a method that was called on a particular object</p>\n<pre><code class=\"language-text\">let cat = {\npurr: function () {\nconsole.log(\"meow\");\n},\npurrMore: function () {\nthis.purr();\n},\n};\nglobal.setTimeout(cat.purrMore, 5000); // 5 seconds later: TypeError: this.purr is not a function\n</code></pre>\n</li>\n</ul>\n<p>we can use strict mode with <code>\"use strict\";</code> this will prevent you from accessing the global object with <code>this</code> in functions, so if you try to call <code>this</code> in the global context and change a value, you will get a type error, and the things you try to access will be undefined</p>\n<h3></h3>\n<p>let sayMeow = cat.purrMore; console.log(sayMeow()); // TypeError: this.purr is not a function</p>\n<p>// we can use the built in Function.bind to ensure our context, our <code>this</code>, // is the cat object let boundCat = sayMeow.bind(cat);</p>\n<p>boundCat(); // prints \"meow\"</p>\n<pre><code class=\"language-text\">   - `bind` can also work with arguments, so you can have a version of a function with particular arguments and a particular context. the first arg will be the context aka the `this` you want it to use. the next arguments will be the functions arguments that you are binding\n      - if you just want to bind it to those arguments in particular, you can use `null` as the first argument, so the context won't be bound, just the arguments\n- Given a code snippet, identify what `this` refers to\n   - important to recognize the difference between scope and context\n      - scope works like a dictionary that has all the variables that are available within a given block, plus a pointer back the next outer scope (which itself has pointers to new scopes until you reach the global scope. so you can think about a whole given block's scope as a kind of linked list of dictionaries) (also, this is not to say that scope is actually implemented in this way, that is just the schema that i can use to understand it)\n      - context refers to the value of the `this` keyword\n   - the keyword `this` exists in every function and it evaluates to the object that is currently invoking that function\n   - so the context is fairly straightforward when we talk about methods being called on specific objects\n   - you could, however, call an object's method on something other than that object, and then this would refer to the context where/how it was called, e.g.\n```javascript\nlet dog = {\n   name: \"Bowser\",\n   changeName: function () {\n      this.name = \"Layla\";\n  },\n};\n\n// note this is **not invoked** - we are assigning the function itself\nlet change = dog.changeName;\nconsole.log(change()); // undefined\n\n// our dog still has the same name\nconsole.log(dog); // { name: 'Bowser', changeName: [Function: changeName] }\n\n// instead of changing the dog we changed the global name!!!\nconsole.log(this); // Object [global] {etc, etc, etc,  name: 'Layla'}\n</code></pre>\n<ul>\n<li>\n<p>CALLING SOMETHING IN THE WRONG CONTEXT CAN MESS YOU UP!</p>\n<ul>\n<li>could throw an error if it expects this to have some other method or whatever that doesn't exist</li>\n<li>you could also overwrite values or assign values to exist in a space where they should not exist</li>\n</ul>\n</li>\n<li>\n<p>if you call a function as a callback, it will set <code>this</code> to be the outer function itself, even if the function you were calling is a method that was called on a particular object</p>\n<p>```javascript</p>\n<p>let cat = {</p>\n<p>purr: function () {</p>\n<p>console.log(\"meow\");</p>\n<p>},</p>\n<p>purrMore: function () {</p>\n<p>this.purr();</p>\n<p>},</p>\n<p>};</p>\n</li>\n</ul>\n<p>global.setTimeout(cat.purrMore, 5000); // 5 seconds later: TypeError: this.purr is not a function</p>\n<p>```</p>\n<ul>\n<li>we can use strict mode with <code>\"use strict\";</code> this will prevent you from accessing the global object with <code>this</code> in functions, so if you try to call <code>this</code> in the global context and change a value, you will get a type error, and the things you try to access will be undefined</li>\n</ul>\n<h3>POJOs</h3>\n<h4>1. Label variables as either Primitive vs. Reference</h4>\n<p>Javascript considers most data types to be 'primitive', these data types are immutable, and are passed by value. The more complex data types: Array and Object are mutable, are considered 'reference' data types, and are passed by reference.</p>\n<ul>\n<li>Boolean - Primitive</li>\n<li>Null - Primitive</li>\n<li>Undefined - Primitive</li>\n<li>Number - Primitive</li>\n<li>String - Primitive</li>\n<li>Array - Reference</li>\n<li>Object - Reference</li>\n<li>Function - Reference</li>\n</ul>\n<h4>2. Identify when to use . vs [] when accessing values of an object</h4>\n<pre><code class=\"language-javascript\">let obj = { one: 1, two: 2 };\n\n// Choose the square brackets property accessor when the property name is determined at\n// runtime, or if the property name is not a valid identifier\nlet myKey = 'one';\nconsole.log(obj[myKey]);\n\n// Choose the dot property accessor when the property name is known ahead of time.\nconsole.log(obj.two);\n</code></pre>\n<h4>3. Write an object literal with a variable key using interpolation</h4>\n<pre><code class=\"language-javascript\">let keyName = 'two';\n\n// If the key is not known, you can use an alternative `[]` syntax for\n// object initialization only\nlet obj2 = { [keyName]: 2 };\nconsole.log(obj2);\n</code></pre>\n<h4>4. Use the obj[key] !== undefined pattern to check if a given variable that contains a key exists in an object</h4>\n<pre><code class=\"language-javascript\">function doesKeyExist(obj, key) {\n    // obj[key] !== undefined\n    // or:\n    return key in obj;\n}\n\nlet course = { bootcamp: 'Lambda', course: 'Bootcamp Prep' };\nconsole.log(doesKeyExist(course, 'course')); // => true\nconsole.log(doesKeyExist(course, 'name')); // => false\n</code></pre>\n<h4>5. Utilize Object.keys and Object.values in a function</h4>\n<pre><code class=\"language-javascript\">function printKeys(object) {\n    return Object.keys(object);\n}\n\nfunction printValues(object) {\n    return Object.values(object);\n}\n\nconsole.log(printKeys({ dog: 'Strelka', dog2: 'Belka' }));\nconsole.log(printValues({ dog: 'Strelka', dog2: 'Belka' }));\n</code></pre>\n<h4>6. Iterate through an object using a for in loop</h4>\n<pre><code class=\"language-javascript\">let player = { name: 'Sergey', skill: 'hockey' };\n\nfor (let key in player) {\n    console.log(key, player[key]);\n}\n\nconsole.log(Object.entries(player));\n</code></pre>\n<h4>7. Define a function that utilizes ...rest syntax to accept an arbitrary number of arguments</h4>\n<pre><code class=\"language-javascript\">function restSum(...otherNums) {\n    let sum = 0;\n    console.log(otherNums);\n    otherNums.forEach(function (num) {\n        sum += num;\n    });\n\n    return sum;\n}\n\nconsole.log(restSum(3, 5, 6)); // => 14\nconsole.log(restSum(1, 2, 3, 4, 5, 6, 7, 8, 9)); // => 45\nconsole.log(restSum(0)); // => 0\n</code></pre>\n<h4>8. Use ...spread syntax for Object literals and Array literals</h4>\n<pre><code class=\"language-javascript\">let numArray = [1, 2, 3];\nlet moreNums = [...numArray, 4, 5, 6];\n\nconsole.log(moreNums);\n\nlet shoe = { color: 'red', size: 10 };\nlet newShoe = { ...shoe, brand: 'Nike', size: 12 };\nconsole.log(newShoe);\nnewShoe.color = 'black';\nconsole.log(newShoe);\n\nconsole.log(shoe);\n</code></pre>\n<h4>9. Destructure an array to reference specific elements</h4>\n<pre><code class=\"language-javascript\">let arr = ['one', 'two', 'three'];\n\nlet [first] = arr;\nconsole.log(first);\n</code></pre>\n<h4>10. Destructure an object to reference specific values</h4>\n<pre><code class=\"language-javascript\">let me = {\n    name: 'Ian',\n    instruments: ['bass', 'synth', 'guitar'],\n    siblings: {\n        brothers: ['Alistair'],\n        sisters: ['Meghan']\n    }\n};\n\nlet {\n    name,\n    instruments: musical_instruments,\n    siblings: { sisters }\n} = me;\n\nconsole.log(name);\nconsole.log(musical_instruments);\nconsole.log(sisters);\n</code></pre>\n<h4>11. Write a function that accepts a string as an argument and returns an object representing the count of each character in the array</h4>\n<pre><code class=\"language-javascript\">function charCount(inputString) {\n    let res = inputString.split('').reduce(function (accum, el) {\n        if (el in accum) {\n            accum[el] = accum[el] + 1;\n        } else {\n            accum[el] = 1;\n        }\n        return accum;\n    }, {});\n    return res;\n}\n\nconsole.log(charCount('aaabbbeebbcdkjfalksdfjlkasdfasdfiiidkkdingds'));\n</code></pre>\n<h3></h3>\n<h3>Review of Concepts</h3>\n<h4>1. Identify the difference between const, let, and var declarations</h4>\n<h4>2. Explain the difference between const, let, and var declarations</h4>\n<pre><code class=\"language-javascript\">var a = 'a';\n</code></pre>\n<ul>\n<li><code>var</code> is the historical keyword used for variable declaration.</li>\n<li><code>var</code> declares variables in function scope, or global scope if not inside a function.</li>\n<li>We consider <code>var</code> to be <em>deprecated</em> and it is never used in this course.</li>\n</ul>\n<pre><code class=\"language-javascript\">let b = 'b';\n</code></pre>\n<ul>\n<li><code>let</code> is the keyword we use most often for variable declaration.</li>\n<li><code>let</code> declares variables in block scope.</li>\n<li>variables declared with <code>let</code> are re-assignable.</li>\n</ul>\n<pre><code class=\"language-javascript\">const c = 'c';\n</code></pre>\n<ul>\n<li><code>const</code> is a specialized form of <code>let</code> that can only be used to <strong>initialize</strong> a variable.</li>\n<li>Except when it is declared, you cannot assign to a <code>const</code> variable.</li>\n<li><code>const</code> scopes variables the same way that <code>let</code> does.</li>\n</ul>\n<h4>3. Predict the evaluation of code that utilizes function scope, block scope, lexical scope, and scope chaining</h4>\n<p>Consider this <code>run</code> function, inside which <code>foo</code> and <code>bar</code> have <code>function scope</code>. <code>i</code> and <code>baz</code> are scoped to the block expression.</p>\n<pre><code class=\"language-javascript\">// function and block scope in this example\nfunction run() {\n    var foo = 'Foo';\n    let bar = 'Bar';\n\n    console.log(foo, bar);\n\n    {\n        console.log(foo);\n        let baz = 'Bazz';\n        console.log(baz);\n    }\n\n    console.log(baz); // ReferenceError\n}\n\nrun();\n</code></pre>\n<p>Notice that referencing <code>baz</code> from outside it's block results in JavaScript throwing a ReferenceError.</p>\n<p>Consider this <code>run</code> function, inside of which <code>foo</code> has <code>function scope</code>.</p>\n<pre><code class=\"language-javascript\">function run() {\n    console.log(foo); // undefined\n    var foo = 'Foo';\n    console.log(foo); // Foo\n}\n\nrun();\n</code></pre>\n<p>Consider this <code>func1</code> function and it's nested scopes.</p>\n<pre><code class=\"language-javascript\">// global scope\nfunction func1(arg1) {\n    // func1 scope\n\n    return function func2(arg2) {\n        // func2 scope\n\n        return function func3(arg3) {\n            // func3 scope\n\n            console.log(arg1, arg2, arg3);\n        };\n    };\n}\n</code></pre>\n<h4>6. Implement a closure and explain how the closure effects scope</h4>\n<pre><code class=\"language-javascript\">const adder = (arg1) => {\n    return (arg2) => {\n        return arg1 + arg2;\n    };\n};\n\nconst func2 = adder(2);\nconst result = func2(2);\nconsole.log(result); // => 4;\n</code></pre>\n<h4>4. Define an arrow function</h4>\n<pre><code class=\"language-javascript\">const returnValue = (val) => val;\n</code></pre>\n<p>This simple construct will create a function that accepts <code>val</code> as a parameter, and returns <code>val</code> immediately. We do not need to type <code>return val</code>, because this is a single-line function.</p>\n<p>Identically, we could write</p>\n<pre><code class=\"language-javascript\">const returnValue = (val) => {\n    return val;\n};\n</code></pre>\n<h4>5. Given an arrow function, deduce the value of <code>this</code> without executing the code</h4>\n<pre><code class=\"language-javascript\">function fDAdder(arr) {\n    console.log(this);\n\n    return arr.reduce((acc, ele) => {\n        return acc + ele;\n    });\n}\n\nfDAdder([1, 2, 4, 6]);\n</code></pre>\n<p>If we use a <em>function declaration</em> style function, the <code>this</code> variable is set to the <code>global</code> object (i.e. <code>Object [global]</code> in Node.JS and <code>Window</code> in your browser).</p>\n<pre><code class=\"language-javascript\">const adder = (arr) => {\n    console.log(this);\n    arr.reduce((acc, ele) => (sum += ele));\n};\nadder([1, 2, 4, 6]);\n</code></pre>\n<p>In this example, we use a <em>fat arrow</em> style function. Note that when we declare a funciton like this <code>this</code> becomes</p>\n<h4>7. Define a method that references this on an object literal</h4>\n<pre><code class=\"language-javascript\">const pokemon = {\n    firstname: 'Pika',\n    lastname: 'Chu',\n    getPokeName: function () {\n        const fullname = `${this.firstname} ${this.lastname}`;\n        return fullname;\n    }\n};\n\nconsole.log(pokemon.getPokeName());\n</code></pre>\n<h4>8. Utilize the built in Function#bind on a callback to maintain the context of <code>this</code></h4>\n<pre><code class=\"language-javascript\">const pokemon = {\n    firstname: 'Pika',\n    lastname: 'Chu',\n    getPokeName: function () {\n        const fullname = `${this.firstname} ${this.lastname}`;\n        return fullname;\n    }\n};\n\nconst logPokemon = pokemon.getPokename.bind(pokemon);\n\nlogPokemon('sushi', 'algorithms'); // Pika Chu loves sushi and algorithms\n</code></pre>\n<h4>9. Given a code snippet, identify what <code>this</code> refers to</h4>\n<pre><code class=\"language-javascript\">function Person(name) {\n    // this.name = name;\n    // let that = this;\n\n    setTimeout(function () {\n        // console.log(this); // => Window\n        // console.log(that); // => [Function] => Person\n        // this.sayName(); // => no method error\n        that.sayName();\n    }, 1000);\n}\n\nPerson.prototype.sayName = function () {\n    console.log(this.name);\n};\n\nconst jane = new Person('Jane');\n</code></pre>"},{"url":"/blog/awesome-graphql/","relativePath":"blog/awesome-graphql.md","relativeDir":"blog","base":"awesome-graphql.md","name":"awesome-graphql","frontmatter":{"title":"Awesome GraphQL","subtitle":"The Death Of REST","date":"2021-09-30","thumb_image_alt":"lorem-ipsum","excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"post","thumb_image":"images/graphql.png","image":"images/graphql-f3b94d65.png"},"html":"<h2>Table of Contents\n\n</h2>\n<ul>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#spec\">Specification</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#community\">Community</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#meetups\">GraphQL Meetups</a></li>\n<li>\n<p><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib\">Libraries</a></p>\n<ul>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-js\">Javascript</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-ts\">Typescript</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-rb\">Ruby</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-php\">PHP</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-py\">Python</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-java\">Java</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-c\">C/C++</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-go\">Go</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-scala\">Scala</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-perl\">Perl</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-dotnet\">.NET</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-erlang\">Erlang</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-elixir\">Elixir</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-haskell\">Haskell</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-sql\">SQL</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-lua\">Lua</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-elm\">Elm</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-clojure\">Clojure</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-clojurescript\">ClojureScript</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-swift\">Swift</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-ocaml\">OCaml</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-rust\">Rust</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-r\">R</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-julia\">Julia</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-kotlin\">Kotlin</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-unity\">Unity</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-crystal\">Crystal</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#tools\">Tools</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#services\">Services</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#databases\">Databases</a></li>\n<li>\n<p><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example\">Examples</a></p>\n<ul>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example-js\">Javascript</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example-ts\">Typescript</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example-rb\">Ruby</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example-go\">Go</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example-scala\">Scala</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example-python\">Python</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example-elixir\">Elixir</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example-php\">PHP</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example-reasonml\">ReasonML</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#video\">Videos</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#blogs\">Blogs</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#post\">Posts</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#workshopper\">Workshoppers</a></li>\n</ul>\n<h2>Specification</h2>\n<ul>\n<li><a href=\"http://facebook.github.io/graphql/\">facebook/graphql</a> - Working Draft of the Specification for GraphQL created by Facebook.</li>\n</ul>\n<h2>Community</h2>\n<ul>\n<li><a href=\"https://graphql.slack.com/messages/general\">Slack</a> - Share and help people on the chat. Get your invite <a href=\"https://graphql-slack.herokuapp.com/\">here</a></li>\n<li><a href=\"https://webchat.freenode.net/?channels=#graphql\">#graphql on Freenode</a> - The official IRC channel for GraphQL</li>\n<li><a href=\"https://www.facebook.com/groups/795330550572866/\">Facebook</a> - Group for discussions, articles and knowledge sharing</li>\n<li><a href=\"https://twitter.com/search?q=%23GraphQL\">Twitter</a> - Use the hashtag <a href=\"https://twitter.com/search?q=%23GraphQL\">#graphql</a></li>\n<li><a href=\"https://stackoverflow.com/questions/tagged/graphql\">StackOverflow</a> - Questions and answers. Use the tag <a href=\"http://stackoverflow.com/questions/tagged/graphql\">graphql</a></li>\n<li><a href=\"https://github.com/APIs-guru/graphql-apis\">GraphQL APIs</a> - A collective list of public GraphQL APIs</li>\n<li><a href=\"https://graphql-world.com/\">GraphQL World</a> - The fastest growing community of GraphQL developers</li>\n</ul>\n<h2>GraphQL Meetups</h2>\n<ul>\n<li><a href=\"https://www.meetup.com/graphql-berlin/\">Berlin</a></li>\n<li><a href=\"https://www.meetup.com/es-ES/GraphQL-BA/\">Buenos Aires</a></li>\n<li><a href=\"https://www.meetup.com/DFW-GraphQL-Meetup/\">Dallas-Fort Worth</a></li>\n<li><a href=\"https://www.meetup.com/GraphQL-Istanbul/\">Istanbul</a></li>\n<li><a href=\"https://www.meetup.com/GraphQL-London/\">London</a></li>\n<li><a href=\"https://www.meetup.com/GraphQL-Melbourne/\">Melbourne</a></li>\n<li><a href=\"https://www.meetup.com/GraphQL-Munich/\">Munich</a></li>\n<li><a href=\"https://www.meetup.com/GraphQL-NYC/\">New York City</a></li>\n<li><a href=\"https://www.meetup.com/GraphQL-SF/\">San Francisco</a></li>\n<li><a href=\"https://www.meetup.com/GraphQL-Sydney/\">Sydney</a></li>\n<li><a href=\"https://www.meetup.com/GraphQL-TLV/\">Tel Aviv</a></li>\n<li><a href=\"https://www.meetup.com/GraphQL-Toronto/\">Toronto</a></li>\n</ul>\n<h2>Libraries</h2>\n<h3>JavaScript Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/graphql/graphql-js\">GraphQL.js</a> - A reference implementation of GraphQL for JavaScript.</li>\n<li><a href=\"https://github.com/graphql/express-graphql\">express-graphql</a> - GraphQL Express Middleware.</li>\n<li><a href=\"https://github.com/chentsulin/koa-graphql\">koa-graphql</a> - GraphQL Koa Middleware.</li>\n<li><a href=\"https://github.com/SimonDegraeve/hapi-graphql\">hapi-graphql</a> - Create a GraphQL HTTP server with Hapi.</li>\n<li><a href=\"https://github.com/graphql/codemirror-graphql\">codemirror-graphql</a> - GraphQL mode and helpers for CodeMirror.</li>\n<li><a href=\"https://github.com/devknoll/graphql-schema\">graphql-schema</a> - Create GraphQL schemas with a fluent/chainable interface.</li>\n<li><a href=\"https://github.com/mickhansen/graphql-sequelize\">graphql-sequelize</a> - Sequelize helpers for GraphQL.</li>\n<li><a href=\"https://github.com/Glavin001/graphql-sequelize-crud\">graphql-sequelize-crud</a> - Automatically generate queries and mutations from Sequelize models.</li>\n<li><a href=\"https://github.com/RisingStack/graffiti\">graffiti</a> - Node.js GraphQL ORM.</li>\n<li><a href=\"https://github.com/RisingStack/graffiti-mongoose\">graffiti-mongoose</a> - Mongoose (MongoDB) adapter for graffiti (Node.js GraphQL ORM).</li>\n<li><a href=\"https://github.com/ooflorent/babel-plugin-graphql\">babel-plugin-graphql</a> - Babel plugin that compile GraphQL tagged template strings.</li>\n<li><a href=\"https://github.com/gyzerok/adrenaline\">adrenaline</a> - React bindings for Redux with Relay in mind.</li>\n<li><a href=\"https://github.com/brysgo/graphql-bookshelf\">graphql-bookshelf</a> - Some help defining GraphQL schema around BookshelfJS models.</li>\n<li><a href=\"https://github.com/weyoss/graphql-bookshelfjs\">graphql-bookshelfjs</a> - A simple bridge between your graphql queries and your bookshelf models, perform batched and optimised queries.</li>\n<li><a href=\"https://github.com/matthewmueller/graph.ql\">graph.ql</a> - Faster and simpler technique for creating and querying GraphQL schemas.</li>\n<li><a href=\"https://github.com/kennetpostigo/react-reach\">react-reach</a> - A library to communicate with Graphql through Redux</li>\n<li><a href=\"https://github.com/kadirahq/lokka\">Lokka</a> - Simple JavaScript client for GraphQL, which you can use anywhere.</li>\n<li><a href=\"http://strapi.io/documentation/graphql\">Strapi</a> - Open-source Node.js framework that supports \"GraphQL\" out of the box.</li>\n<li><a href=\"https://github.com/larsbs/graysql\">GraysQL</a> - A GraphQL manager and loader.</li>\n<li><a href=\"https://github.com/larsbs/graysql-orm-loader\">graysql-orm-loader</a> - A GraysQL extension to load a GraphQL schema from an ORM.</li>\n<li><a href=\"https://github.com/almilo/annotated-graphql\">Annotated GraphQL</a> - Proof of Concept for annotations in GraphQL (i.e.: transform an existing REST api into a GraphQL endpoint).</li>\n<li><a href=\"https://github.com/apollographql/apollo-client\">Apollo Client</a> - A well-documented GraphQL client. Has React and Angular bindings.</li>\n<li><a href=\"https://github.com/apollographql/graphql-tools\">graphql-tools</a> - Tool library for building and maintaining GraphQL-JS servers.</li>\n<li><a href=\"https://github.com/apollographql/graphql-anywhere\">graphql-anywhere</a> - Run a GraphQL query anywhere, against any data, with no schema.</li>\n<li><a href=\"https://github.com/apollographql/graphql-tag\">graphql-tag</a> - A JavaScript template literal tag that parses GraphQL queries.</li>\n<li><a href=\"https://github.com/julienvincent/modelizr\">modelizr</a> - A library for simplifying the process of writing GraphQL queries, mocking them and normalizing their responses.</li>\n<li><a href=\"https://github.com/Akryum/vue-apollo\">vue-apollo</a> - Vue integration for apollo.</li>\n<li><a href=\"https://github.com/fenos/graphql-thinky\">graphql-thinky</a> - Build an optimized GraphQL schema from Thinky RethinkDB models.</li>\n<li><a href=\"https://github.com/MikeBild/graphql-pouch\">graphql-pouch</a> - A GraphQL-API runtime on top of PouchDB created by GraphQL shorthand notation as a self contained service with CouchDB synchronization.</li>\n<li><a href=\"https://github.com/almilo/gql-tools\">gql-tools</a> - Tool library with CLI for schema generation and manipulation.</li>\n<li><a href=\"https://github.com/excitement-engineer/graphql-iso-date\">graphql-iso-date</a> - A GraphQL date scalar type to be used with GraphQL.js. This scalar represents a date in the ISO 8601 format YYYY-MM-DD.</li>\n<li><a href=\"https://github.com/nodkz/graphql-compose\">graphql-compose</a> - Tool which allows you to construct flexible graphql schema from different data sources via plugins.</li>\n<li><a href=\"https://github.com/mwilliamson/node-graphjoiner\">node-graphjoiner</a> - Create GraphQL APIs using joins, SQL or otherwise.</li>\n<li><a href=\"https://github.com/gucheen/FetchQL\">FetchQL</a> - GraphQL query client with Fetch</li>\n<li><a href=\"https://github.com/stems/join-monster\">Join Monster</a> - A GraphQL-to-SQL query execution layer for batch data fetching.</li>\n<li><a href=\"https://github.com/graphql-community/create-graphql\">Create-GraphQL</a> - Command-line utility to build production-ready servers with GraphQL.</li>\n<li><a href=\"https://github.com/lucasbento/graphql-pokemon\">GraphQL-Pokémon</a> - Get information of a Pokémon with GraphQL!</li>\n<li><a href=\"https://github.com/graphql-factory\">graphql-factory</a> - Create GraphQL types from JSON definitions</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/chromeiql/fkkiamalmpiidkljmicmjfbieiclmeij\">ChromeiQL</a> - Chrome extension to use GraphiQL anywhere</li>\n<li><a href=\"https://github.com/ejoebstl/graphql-auto-mutation\">graphql-auto-mutation</a> - Automatically generates functions for mutations specified in a GraphQL schema.</li>\n<li><a href=\"https://github.com/graphitejs/graphitejs\">GraphiteJS</a> - Full stack GraphQL framework.</li>\n<li><a href=\"https://github.com/tallyb/loopback-graphql\">loopback-graphql</a> - GraphQL Server for Loopback.</li>\n<li><a href=\"https://github.com/octet-stream/parasprite\">parasprite</a> - Describe your GraphQL schema using chainable interface.</li>\n<li><a href=\"https://github.com/f/graphql.js\">GraphQL.js</a> - JavaScript GraphQL Client for Browser and Node.js Usage</li>\n<li><a href=\"https://github.com/arangodb/graphql-sync\">graphql-sync</a> - Promise-free wrapper to GraphQL.js for synchronous environments</li>\n<li><a href=\"https://github.com/apollographql/apollo-fetch\">apollo-fetch</a> - Lightweight GraphQL client that supports custom fetch functions, middleware, and afterware</li>\n<li><a href=\"https://github.com/spikenail/spikenail\">Spikenail</a> - Node.js framework for building GraphQL API almost without coding.</li>\n<li><a href=\"https://github.com/AEB-labs/graphql-weaver\">graphql-weaver</a> - A tool to combine, link and transform GraphQL schemas; combine multiple GraphQL servers into one API.</li>\n<li><a href=\"https://github.com/APIs-guru/graphql-lodash\">graphql-lodash</a> - Data manipulation for GraphQL queries with lodash syntax.</li>\n<li><a href=\"https://github.com/apollographql/apollo-angular\">apollo-angular</a> - Angular integration for Apollo.</li>\n<li><a href=\"https://github.com/lucasconstantino/graphql-resolvers\">graphql-resolvers</a> - Resolver composition library for GraphQL.</li>\n<li><a href=\"https://github.com/thebigredgeek/apollo-resolvers\">apollo-resolvers</a> - Expressive and composable resolvers for Apollo Server and graphql-tools.</li>\n<li><a href=\"https://github.com/thebigredgeek/apollo-errors\">apollo-errors</a> - Machine-readable custom errors for Apollo Server.</li>\n<li><a href=\"https://github.com/helfer/graphql-disable-introspection\">graphql-disable-introspection</a> - Graphql Disable Introspection</li>\n<li><a href=\"https://github.com/arackaf/mongo-graphql-starter\">mongo-graphql-starter</a> - Flexible and robust Mongo based resolvers for Node.</li>\n<li><a href=\"https://github.com/imolorhe/altair\">altair-express-middleware</a> - An express middleware for mounting an instance of Altair GraphQL client.</li>\n<li><a href=\"https://github.com/pa-bru/graphql-cost-analysis\">graphql-cost-analysis</a> - A Graphql query cost analyzer.</li>\n</ul>\n<h5>Relay Related</h5>\n<ul>\n<li><a href=\"https://github.com/facebook/relay\">relay</a> - Relay is a JavaScript framework for building data-driven React applications.</li>\n<li><a href=\"https://github.com/graphql/graphql-relay-js\">graphql-relay-js</a> - A library to help construct a graphql-js server supporting react-relay.</li>\n<li><a href=\"https://github.com/MattMcFarland/sequelize-relay\">sequelize-relay</a> - Serverside library that connects sequelize and graphql-relay-js together.</li>\n<li><a href=\"https://github.com/graphcool/babel-plugin-react-relay\">babel-plugin-react-relay</a> - Babel Plugin for Relay with support for JSON &#x26; graphql-js schemas and URL endpoints.</li>\n<li><a href=\"https://www.npmjs.com/package/babel-relay-plugin\">babel-relay-plugin</a> - Babel Relay Plugin for transpiling GraphQL queries for use with Relay.</li>\n<li><a href=\"https://github.com/relay-tools/react-router-relay\">react-router-relay</a> - Relay integration for React Router.</li>\n<li><a href=\"https://github.com/relay-tools/relay-local-schema\">relay-local-schema</a> - Use Relay without a GraphQL server.</li>\n<li><a href=\"https://github.com/acdlite/relay-sink\">relay-sink</a> - Use Relay to fetch and store data outside of a React component.</li>\n<li><a href=\"https://github.com/acdlite/recompose/tree/master/src/packages/recompose-relay\">recompose-relay</a> - Recompose helpers for Relay.</li>\n<li><a href=\"https://github.com/larsbs/graysql#Graylay\">Graylay</a> - A GraysQL extension to create a Relay compatible Schema.</li>\n<li><a href=\"https://github.com/apollographql/apollo-client\">Apollo Client</a> - A simple alternative to Relay, comes with React and Angular bindings.</li>\n<li><a href=\"https://github.com/nodkz/react-relay-network-layer\">react-relay-network-layer</a> - A network layer for Relay with query batching and middleware support (urlThunk, retryThunk, auth, defer and other).</li>\n<li><a href=\"https://github.com/edvinerikson/relay-subscriptions\">relay-subscriptions</a> - Subscription support for Relay.</li>\n<li><a href=\"https://github.com/alex-cory/portfolio\">Portfolio Relay Example</a> - An example website that fetches data from various apis and uses Relay and GraphQL to feed the data to React components!</li>\n<li><a href=\"https://github.com/lucasbento/react-relay-pokemon\">Relay Pokédex</a> - Project using GraphQL Pokémon to show how powerful Relay is.</li>\n<li><a href=\"https://github.com/ntkme/vue-relay\">vue-relay</a> - A framework for building GraphQL-driven Vue.js applications.</li>\n</ul>\n<h3>TypeScript Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/19majkel94/type-graphql\">TypeGraphQL</a> - Create GraphQL schema and resolvers with TypeScript, using classes and decorators!</li>\n<li><a href=\"http://vesper-framework.com/\">Vesper</a> - NodeJS framework that helps you to create scalable, maintainable, extensible, declarative and fast GraphQL-based server applications.</li>\n<li><a href=\"https://github.com/calebmer/graphql-strong\">graphql-strong</a> - Define your GraphQL schemas with confidence that your values are correct.</li>\n<li><a href=\"https://github.com/3VLINC/graphql-to-typescript\">graphql-to-typescript</a> - Compiles GraphQL files into an importable typescript module with type definitions</li>\n<li><a href=\"https://github.com/Quramy/graphql-decorator\">graphql-decorator</a> - Helps to build GraphQL schema with TypeScript.</li>\n<li><a href=\"https://github.com/indigotech/graphql-schema-decorator\">graphql-schema-decorator</a> - This package makes possible the use of decorators to define a GraphQL schema.</li>\n<li><a href=\"https://github.com/vichyssoise/graphql-typescript\">graphql-typescript</a> - Define and build GraphQL Schemas using typed classes</li>\n<li><a href=\"https://github.com/prismake/typegql\">typegql</a> - Create GraphQL schema with type-safe class decorators.</li>\n</ul>\n<h3>Ruby Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/rmosolgo/graphql-ruby\">graphql-ruby</a> - Ruby implementation of Facebook's GraphQL.</li>\n<li><a href=\"https://github.com/Shopify/graphql-parser\">graphql-parser</a> - A small ruby gem wrapping the libgraphqlparser C library for parsing GraphQL.</li>\n<li><a href=\"https://github.com/github/graphql-client\">graphql-client</a> - A Ruby library for declaring, composing and executing GraphQL queries.</li>\n<li><a href=\"https://github.com/Shopify/graphql-batch\">graphql-batch</a> - A query batching executor for the graphql gem.</li>\n<li><a href=\"https://github.com/exaspark/batch-loader\">batch-loader</a> – A powerful tool to avoid N+1 queries without extra dependencies or primitives.</li>\n<li><a href=\"https://github.com/exAspArk/graphql-guard\">graphql-guard</a> - A simple field-level authorization for the graphql gem.</li>\n</ul>\n<h3>PHP Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/webonyx/graphql-php\">graphql-php</a> - A PHP port of GraphQL reference implementation.</li>\n<li><a href=\"https://github.com/ivome/graphql-relay-php\">graphql-relay-php</a> - Relay helpers for GraphQL &#x26; PHP.</li>\n<li><a href=\"https://github.com/api-platform/api-platform\">API Platform</a> - API framework compatible with Symfony having native GraphQL support.</li>\n<li><a href=\"https://github.com/Folkloreatelier/laravel-graphql\">laravel-graphql</a> - Facebook GraphQL for Laravel 5.</li>\n<li><a href=\"https://github.com/nuwave/laravel-graphql-relay\">laravel-graphql-relay</a> - A Laravel library to help construct a server supporting react-relay.</li>\n<li><a href=\"https://github.com/4rthem/graphql-mapper\">graphql-mapper</a> - This library allows to build a GraphQL schema based on your model.</li>\n<li><a href=\"https://github.com/suribit/GraphQLBundle\">graphql-bundle</a> - GraphQL Bundle for Symfony 2.</li>\n<li><a href=\"https://github.com/overblog/GraphQLBundle\">overblog/graphql-bundle</a> - This bundle provides tools to build a complete GraphQL server in your Symfony App. Supports react-relay.</li>\n<li><a href=\"https://github.com/Youshido/GraphQL\">GraphQL</a> – Well documented PHP implementation with no dependencies.</li>\n<li><a href=\"https://github.com/Youshido/GraphQLBundle\">GraphQL Symfony Bundle</a> – GraphQL Bundle for the Symfony 3 (supports 2.6+).</li>\n<li><a href=\"https://github.com/wp-graphql/wp-graphql\">WPGraphQL</a> - WordPress plugin that exposes a Relay compliant GraphQL endpoint</li>\n<li><a href=\"https://github.com/tim-field/graphql-wp\">graphql-wp</a> – a WordPress plugin that exposes a GraphQL endpoint.</li>\n<li><a href=\"https://www.symfony.fi/entry/graphql-bundle-adds-protocol-support-to-ez-platform-symfony-cms\">eZ Platform GraphQL Bundle</a> - GraphQL Bundle for the eZ Platform Symfony CMS.</li>\n<li><a href=\"https://github.com/stefanorg/graphql-middleware\">GraphQL Middleware</a> - GraphQL Psr7 Middleware</li>\n<li><a href=\"https://github.com/stefanorg/zend-expressive-graphiql\">Zend Expressive GraphiQL Extension</a> - GraphiQL extension for zend expressive</li>\n<li><a href=\"https://github.com/digiaonline/graphql-php\">GraphQL for PHP7</a> - A batteries-included, standard-compliant and easy to work with implementation of the GraphQL specification in PHP7 (based on the reference implementation).</li>\n</ul>\n<h3>Python Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/tryolabs/graphql-parser\">graphql-parser</a> - GraphQL parser for Python.</li>\n<li><a href=\"https://github.com/graphql-python/graphql-core\">graphql-core</a> - GraphQL implementation for Python.</li>\n<li><a href=\"https://github.com/graphql-python/graphql-relay-py\">graphql-relay-py</a> - A library to help construct a graphql-py server supporting react-relay.</li>\n<li><a href=\"https://github.com/tallstreet/graphql-parser-python\">graphql-parser-python</a> - A python wrapper around libgraphqlparser.</li>\n<li><a href=\"https://github.com/graphql-python/graphene\">graphene</a> - A package for creating GraphQL schemas/types in a Pythonic easy way.</li>\n<li><a href=\"https://github.com/graphql-python/graphene-gae\">graphene-gae</a> - Adds GraphQL support to Google AppEngine (GAE).</li>\n<li><a href=\"https://github.com/graphql-python/flask-graphql\">flask-graphql</a> - Adds GraphQL support to your Flask application.</li>\n<li><a href=\"https://github.com/graphcool/python-graphql-client\">python-graphql-client</a> - Simple GraphQL client for Python 2.7+</li>\n<li><a href=\"https://github.com/healx/python-graphjoiner\">python-graphjoiner</a> - Create GraphQL APIs using joins, SQL or otherwise.</li>\n<li><a href=\"https://github.com/graphql-python/graphene-django\">graphene-django</a> - A Django integration for Graphene.</li>\n</ul>\n<h3>Java Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/graphql-java/graphql-java\">graphql-java</a> - GraphQL Java implementation.</li>\n<li><a href=\"https://github.com/graphql-java/graphql-java-type-generator\">graphql-java-type-generator</a> - Auto-generates types for use with GraphQL Java</li>\n<li><a href=\"https://github.com/bpatters/schemagen-graphql\">schemagen-graphql</a> - Schema generation and execution package that turns POJO's into a GraphQL Java queryable set of objects. Enables exposing any service as a GraphQL service using Annotations.</li>\n<li><a href=\"https://github.com/graphql-java/graphql-java-annotations\">graphql-java-annotations</a> - Provides annotations-based syntax for schema definition with GraphQL Java.</li>\n<li><a href=\"https://github.com/oembedler/spring-graphql-common\">spring-graphql-common</a> - Spring Framework GraphQL Library.</li>\n<li><a href=\"https://github.com/graphql-java/graphql-spring-boot\">graphql-spring-boot</a> - GraphQL and GraphiQL Spring Framework Boot Starters.</li>\n<li><a href=\"https://github.com/neo4j-graphql/neo4j-graphql\">neo4j-graphql</a> - GraphQL bindings for Neo4j, generates and runs Cypher.</li>\n<li><a href=\"https://github.com/engagingspaces/vertx-graphql-service-discovery\">vertx-graphql-service-discovery</a> - Asynchronous GraphQL service discovery and querying for your microservices.</li>\n<li><a href=\"https://github.com/engagingspaces/vertx-dataloader\">vertx-dataloader</a> - Port of Facebook DataLoader for efficient, asynchronous batching and caching in clustered GraphQL environments</li>\n<li><a href=\"https://github.com/Billy-Bichon/LiveGQL\">LiveGQL</a> - GraphQL subscription client in Java.</li>\n<li><a href=\"https://github.com/ebridges/rdbms-to-graphql\">rdbms-to-graphql</a> - A Java CLI program that generates a GraphQL schema from a JDBC data source.</li>\n<li><a href=\"https://github.com/google/rejoiner\">Rejoiner</a> - Generates a GraphQL schema based on one or more gRPC microservices, or any other Protobuf source.</li>\n<li><a href=\"https://github.com/leangen/graphql-spqr\">graphql-spqr</a> - GraphQL SPQR aims to make it dead simple to add a GraphQL API to any Java project. It works by dynamically generating a GraphQL schema from Java code.</li>\n</ul>\n<h3>C/C++ Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/graphql/libgraphqlparser\">libgraphqlparser</a> - A GraphQL query parser in C++ with C and C++ APIs.</li>\n</ul>\n<h3>Go Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/graphql-go/graphql\">graphql</a> - An implementation of GraphQL for Go follows graphql-js</li>\n<li><a href=\"https://github.com/machinebox/graphql\">machinebox/graphql</a> - Simple low-level GraphQL client for Go</li>\n<li><a href=\"https://github.com/graphql-go/relay\">graphql-relay-go</a> - A Go/Golang library to help construct a server supporting react-relay.</li>\n<li><a href=\"https://github.com/neelance/graphql-go\">graphql-go</a> - GraphQL server with a focus on ease of use.</li>\n<li><a href=\"https://github.com/tecbot/c-graphqlparser\">c-graphqlparser</a> - Go-gettable version of the libgraphqlparser C library for parsing GraphQL.</li>\n<li><a href=\"https://github.com/tallstreet/graphql\">tallstreet-graphql</a> - GraphQL parser and server for Go that leverages libgraphqlparser</li>\n<li><a href=\"https://github.com/playlyfe/go-graphql\">go-graphql</a> - A powerful GraphQL server implementation for Golang</li>\n<li><a href=\"https://github.com/nicksrandall/dataloader\">dataloader</a> - Implementation of Facebook's DataLoader in Golang</li>\n</ul>\n<h3>Scala Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/sangria-graphql/sangria\">sangria</a> - Scala GraphQL client and server library.</li>\n<li><a href=\"https://github.com/sangria-graphql/sangria-relay\">sangria-relay</a> - Sangria Relay Support.</li>\n<li><a href=\"https://github.com/hrosenhorn/graphql-scala\">graphql-scala</a> - An attempt to get GraphQL going with Scala.</li>\n</ul>\n<h3>Perl Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/CurtTilmes/Perl6-GraphQL\">Perl6-GraphQL</a> - GraphQL for Perl6.</li>\n<li><a href=\"https://github.com/graphql-perl/graphql-perl\">graphql-perl</a> - GraphQL for Perl5.</li>\n</ul>\n<h3>.NET Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/graphql-dotnet/graphql-dotnet\">graphql-dotnet</a> - GraphQL for .NET.</li>\n<li><a href=\"https://github.com/graphql-dotnet/conventions\">Conventions</a> - Reflection-based schema generation for .NET.</li>\n<li><a href=\"https://github.com/ckimes89/graphql-net\">graphql-net</a> - GraphQL to IQueryable for .NET</li>\n<li><a href=\"https://github.com/fsprojects/FSharp.Data.GraphQL\">FSharp.Data.GraphQL</a> - FSharp GraphQL.</li>\n<li><a href=\"https://github.com/graphql-dotnet/graphql-client\">GraphQL.Client</a> - GraphQL Client for .NET.</li>\n</ul>\n<h3>Erlang Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/shopgun/graphql-erlang\">graphql-erlang</a> - Pure Erlang implementation with IDL and pattern-matching.</li>\n</ul>\n<h3>Elixir Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/absinthe-graphql/absinthe\">absinthe-graphql</a> - Fully Featured Elixir GraphQL Library.</li>\n<li><a href=\"https://github.com/graphql-elixir/graphql\">graphql-elixir</a> - GraphQL Elixir.</li>\n<li><a href=\"https://github.com/graphql-elixir/plug_graphql\">plug_graphql</a> - Plug integration for GraphQL Elixir.</li>\n<li><a href=\"https://github.com/graphql-elixir/graphql_relay\">graphql_relay</a> - Relay helpers for GraphQL Elixir.</li>\n<li><a href=\"https://github.com/graphql-elixir/graphql_parser\">graphql_parser</a> - Elixir bindings for <a href=\"https://github.com/graphql/libgraphqlparser\">libgraphqlparser</a></li>\n<li><a href=\"https://github.com/asonge/graphql\">graphql</a> - Elixir GraphQL parser.</li>\n<li><a href=\"https://github.com/peburrows/plot\">plot</a> - GraphQL parser and resolver for Elixir.</li>\n</ul>\n<h3>Haskell Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/jdnavarro/graphql-haskell\">graphql-haskell</a> - GraphQL AST and parser for Haskell.</li>\n</ul>\n<h3>SQL Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/solidsnack/GraphpostgresQL\">GraphpostgresQL</a> - GraphQL for Postgres.</li>\n<li><a href=\"https://github.com/rexxars/sql-to-graphql\">sql-to-graphql</a> - Generate a GraphQL API based on your SQL database structure.</li>\n<li><a href=\"https://github.com/graphile/postgraphile\">PostGraphile</a> - A GraphQL API created by reflection over a PostgreSQL schema.</li>\n<li><a href=\"https://github.com/ebridges/rdbms-to-graphql\">rdbms-to-graphql</a> - A Java CLI program that generates a GraphQL schema from a JDBC data source.</li>\n<li><a href=\"https://github.com/graphcool/prisma\">Prisma</a> - Turn your database into a GraphQL API. Prisma lets you design your data model and have a production ready GraphQL API online in minutes.</li>\n<li><a href=\"https://github.com/bradleyboy/tuql\">tuql</a> - Automatically create a GraphQL server from any sqlite database.</li>\n</ul>\n<h3>Lua Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/bjornbytes/graphql-lua\">graphql-lua</a> - GraphQL for Lua.</li>\n</ul>\n<h3>Elm Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/jamesmacaulay/elm-graphql\">jamesmacaulay/elm-graphql</a> - Client library that lets you build GraphQL queries in Elm.</li>\n<li><a href=\"https://github.com/ghivert/elm-graphql\">ghivert/elm-graphql</a> - Client library that lets you build GraphQL queries in Elm with your own decoders.</li>\n<li><a href=\"https://github.com/jahewson/elm-graphql\">jahewson/elm-graphql</a> - Command-line tool that generates Elm code from queries in .graphql files.</li>\n</ul>\n<h3>Clojure Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/tendant/graphql-clj\">graphql-clj</a> - A Clojure library designed to provide GraphQL implementation.</li>\n<li><a href=\"https://github.com/walmartlabs/lacinia\">lacinia</a> - GraphQL implementation in pure Clojure.</li>\n<li><a href=\"https://github.com/alumbra/alumbra\">alumbra</a> - Simple &#x26; Elegant GraphQL for Clojure!</li>\n</ul>\n<h3>ClojureScript Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/johanatan/speako\">speako</a> - A ClojureScript/NPM compiler for GraphQL Schema Language.</li>\n<li><a href=\"https://github.com/Vincit/venia\">venia</a> - A Clojure(Script) GraphQL query generation</li>\n</ul>\n<h3>Swift Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/GraphQLSwift/GraphQL\">GraphQL</a> - Build GraphQL APIs with Swift.</li>\n<li><a href=\"https://github.com/GraphQLSwift/Graphiti\">Graphiti</a> - Build Swiftier GraphQL APIs with Swift.</li>\n<li><a href=\"https://github.com/dbart01/Gryphin\">Gryphin</a> - Type-safe GraphQL client for iOS and MacOS written in Swift.</li>\n<li><a href=\"https://github.com/apollographql/apollo-ios\">Apollo-iOS</a> - Strongly typed, code-generating, caching GraphQL client for Swift.</li>\n<li><a href=\"https://github.com/florianmari/LiveGQL\">LiveGQL</a> - GraphQL Subscription client in Swift.</li>\n</ul>\n<h3>OCaml Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/andreas/ocaml-graphql-server\">ocaml-graphql-server</a> - GraphQL servers in OCaml.</li>\n</ul>\n<h3>Rust Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/mhallin/juniper\">juniper</a> - GraphQL server library for Rust.</li>\n</ul>\n<h3>R Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/ropensci/graphql\">graphql</a> - Bindings to libgraphqlparser for R.</li>\n<li><a href=\"https://github.com/schloerke/gqlr\">gqlr</a> - GraphQL server package for R.</li>\n<li><a href=\"https://github.com/ropensci/ghql\">ghql</a> - GraphQL client package for R.</li>\n</ul>\n<h3>Julia Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/codeneomatrix/Diana.jl\">Diana.jl</a> - Julia client for GraphQL.</li>\n</ul>\n<h3>Kotlin Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/prestongarno/ktq\">ktq</a> - Kotlin gradle plugin SDL type generator &#x26; runtime client</li>\n</ul>\n<h3>Unity Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/Gazuntype/graphQL-client-unity\">graphQL-client-unity</a> - A Unity client for GraphQL.</li>\n</ul>\n<h3>Crystal Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/ziprandom/graphql-crystal\">graphql-crystal</a> - A graphql implementation for Crystal</li>\n</ul>\n<h2>Tools</h2>\n<ul>\n<li><a href=\"https://github.com/graphql/graphiql\">graphiql</a> - An in-browser IDE for exploring GraphQL.</li>\n<li><a href=\"https://github.com/graphcool/graphql-playground\">GraphQL Playground</a> - GraphQL IDE that supports multi-column schema docs, tabs, query history, configuration of HTTP headers and GraphQL Subscriptions.</li>\n<li><a href=\"https://github.com/skevy/graphiql-app\">GraphiQL.app</a> - A light, Electron-based wrapper around GraphiQL.</li>\n<li><a href=\"https://github.com/Macroz/GraphQLviz\">GraphQLviz</a> - GraphQLviz marries GraphQL (schemas) with Graphviz.</li>\n<li><a href=\"https://github.com/sheerun/graphqlviz\">graphqlviz</a> - GraphQL API visualizer in Node.js</li>\n<li><a href=\"http://facebook.github.io/relay/prototyping/playground.html\">Relay Playground</a></li>\n<li><a href=\"http://dferber90.github.io/graphql-ast-explorer/\">GraphQL AST Explorer</a> - Explore the AST of a GraphQL document interactively</li>\n<li><a href=\"https://www.graphqlhub.com/\">GraphQLHub</a> - Query public API's schemas (e.g. Reddit, Twitter, Github, etc) using GraphiQL</li>\n<li><a href=\"https://github.com/jimkyndemeyer/js-graphql-intellij-plugin/\">js-graphql-intellij-plugin</a> - GraphQL language support for IntelliJ IDEA and WebStorm, including Relay.QL tagged templates in JavaScript and TypeScript.</li>\n<li><a href=\"https://github.com/syrusakbary/gdom\">gdom</a> - DOM Traversing and Scraping using GraphQL.</li>\n<li><a href=\"https://github.com/almilo/annotated-graphql-server\">Annotated GraphQL Server</a> - Server for annotated GraphQL showing how to transform a REST api into a GraphQL endpoint with annotations.</li>\n<li><a href=\"http://nathanrandal.com/graphql-visualizer/\">Model Visualizer</a> - A small webapp that generates an ERD-like visualization of a GraphQL endpoint from an introspection query.</li>\n<li><a href=\"https://github.com/Ghirro/graphql-network\">GraphQL Network</a> - A chrome dev-tools extension for debugging GraphQL network requests.</li>\n<li><a href=\"https://github.com/apollographql/eslint-plugin-graphql\">eslint-plugin-graphql</a> - An ESLint plugin that checks your GraphQL strings against a schema.</li>\n<li><a href=\"https://astexplorer.net/\">AST Explorer</a> - Select \"GraphQL\" at the top, explore the GraphQL AST and highlight different parts by clicking in the query.</li>\n<li><a href=\"https://github.com/jparise/vim-graphql\">vim-graphql</a> - A Vim plugin that provides GraphQL file detection and syntax highlighting.</li>\n<li><a href=\"https://github.com/sarkistlt/graphql-auto-generating-cms\">GraphQL CMS</a> - Use your existing GraphQL schema to generate simple for use, fully functional CMS in a couple steps.</li>\n<li><a href=\"https://github.com/2fd/graphdoc\">graphdoc</a> - Static page generator for documenting GraphQL Schema.</li>\n<li><a href=\"https://github.com/orionsoft/atom-graphql-autocomplete\">graphql-autocomplete</a> - Autocomplete and lint from a GraphQL endpoint in Atom.</li>\n<li><a href=\"https://github.com/redound/graphql-ide\">GraphQL IDE</a> - An extensive IDE for exploring GraphQL API's.</li>\n<li><a href=\"https://github.com/yarax/swagger-to-graphql\">Swagger to GraphQL</a> - GraphQL types builder based on REST API described in Swagger. Allows to migrate to GraphQL from REST for 5 minutes</li>\n<li><a href=\"https://github.com/APIs-guru/graphql-voyager\">GraphQL Voyager</a> - Represent any GraphQL API as an interactive graph.</li>\n<li><a href=\"https://graphql-docs.com/\">GraphQL Docs</a> - Instantly create beautiful GraphQL API docs hosted online.</li>\n<li><a href=\"https://github.com/APIs-guru/graphql-faker\">GraphQL Faker</a> - 🎲 Mock or extend your GraphQL API with faked data. No coding required.</li>\n<li><a href=\"https://github.com/Quramy/ts-graphql-plugin\">ts-graphql-plugin</a> - A language service plugin complete and validate GraphQL query in TypeScript template strings.</li>\n<li><a href=\"https://launchpad.graphql.com/\">Apollo Launchpad</a> - Like JSFiddle for GraphQL server code, write and deploy a GraphQL API directly from your browser.</li>\n<li><a href=\"https://github.com/apollographql/apollo-tracing\">Apollo Tracing</a> - GraphQL extension that enables you to easily get resolver-level performance information as part of a GraphQL response.</li>\n<li><a href=\"https://github.com/imolorhe/altair\">Altair GraphQL Client</a> - A beautiful feature-rich GraphQL Client for all platforms.</li>\n<li><a href=\"https://github.com/abhiaiyer91/apollo-storybook-decorator\">Apollo Storybook Decorator</a> - Wrap your React Storybook stories with Apollo Client, provide mocks for isolated UI testing with GraphQL</li>\n<li><a href=\"https://github.com/Workpop/graphql-metrics\">GraphQL Metrics</a> - instrument GraphQL resolvers, logging response times and statuses (if there was an error or not) to the console as well as to InfluxDB.</li>\n<li><a href=\"https://github.com/Brbb/graphql-rover\">GraphQL Rover</a> - GraphQL schema interactive navigation, rearrange nodes, search and explore types and fields.</li>\n<li><a href=\"https://github.com/marmelab/json-graphql-server\">json-graphql-server</a> - Get a full fake GraphQL API with zero coding in less than 30 seconds, based on a JSON data file.</li>\n<li><a href=\"https://insomnia.rest/\">Insomnia</a> – An full-featured API client with first-party GraphQL query editor</li>\n<li><a href=\"https://github.com/sly777/ran\">RAN Toolkit</a> - Production-ready toolkit/boilerplate with support for GraphQL, SSR, Hot-reload, CSS-in-JS, caching, and more.</li>\n</ul>\n<h2>Databases</h2>\n<ul>\n<li><a href=\"https://www.arangodb.com/\">ArangoDB</a> - Multi-model database that supports GraphQL schemas in JavaScript inside the database.</li>\n<li><a href=\"https://dgraph.io/\">Dgraph</a> - Scalable, distributed, low latency, high throughput Graph database with a GraphQL like language (called <a href=\"https://docs.dgraph.io/query-language/\">GraphQL+</a>) as the query language. Dgrapqh can be queried with graphql by using <a href=\"https://github.com/dpeek/dgraphql\">dgraphql</a></li>\n</ul>\n<h2>Services</h2>\n<ul>\n<li><a href=\"https://graphcms.com/\">GraphCMS</a> - GraphQL based Headless Content Management System.</li>\n<li><a href=\"https://www.graph.cool/\">Graphcool</a> - Your own GraphQL backend in under 5 minutes. Works with every GraphQL client such as Relay and Apollo.</li>\n<li><a href=\"https://hasura.io/\">Hasura</a> - Create tables and get a GraphQL backend in under 60s. Works on top of Postgres that you can directly access. No initial knowledge of graphql required.</li>\n<li><a href=\"https://www.reindex.io/\">Reindex</a> - Instant GraphQL Backend for Your React Apps.</li>\n<li><a href=\"https://scaphold.io/\">Scaphold</a> - GraphQL as a service that includes API integrations such as Stripe and Mailgun.</li>\n<li><a href=\"https://tipe.io/\">Tipe</a> - Next Generation API-first CMS with a GraphQL or REST API. Stop letting your CMS decide how you build your apps.</li>\n<li><a href=\"https://aws.amazon.com/appsync/\">AWS AppSync</a> - Serverless GraphQL</li>\n</ul>\n<h2>Examples</h2>\n<h3>JavaScript Examples</h3>\n<ul>\n<li><a href=\"https://github.com/relayjs/relay-starter-kit\">relay-starter-kit</a> - Barebones starting point for a Relay application.</li>\n<li><a href=\"https://github.com/kriasoft/react-starter-kit\">react-starter-kit</a> - Isomorphic web app boilerplate (Node.js/Express, GraphQL, React)</li>\n<li><a href=\"https://github.com/kriasoft/nodejs-api-starter\">nodejs-api-starter</a> - Boilerplate and tooling for authoring data API backends with Node.js and GraphQL</li>\n<li><a href=\"https://github.com/graphql/swapi-graphql\">swapi-graphql</a> - A GraphQL schema and server wrapping <a href=\"http://swapi.co/\">swapi</a>.</li>\n<li><a href=\"https://github.com/RisingStack/graphql-server\">graphql-server</a> - GraphQL server with Mongoose (MongoDB) and Node.js.</li>\n<li><a href=\"https://github.com/clayallsopp/graphql-intro\">graphql-intro</a> - <a href=\"https://medium.com/the-graphqlhub/your-first-graphql-server-3c766ab4f0a2\">https://medium.com/the-graphqlhub/your-first-graphql-server-3c766ab4f0a2</a></li>\n<li><a href=\"https://github.com/jonsharratt/graphql-aws\">graphql-aws</a> - Amazon AWS GraphQL API Server.</li>\n<li><a href=\"https://github.com/RisingStack/graffiti-todo\">graffiti-todo</a> - Example Relay TodoMVC application using graffiti-mongoose.</li>\n<li><a href=\"https://gist.github.com/devknoll/8b274f1c5d05230bfade\">devknoll/gist:8b274f1c5d05230bfade</a></li>\n<li><a href=\"https://github.com/codefoundries/UniversalRelayBoilerplate\">UniversalRelayBoilerplate</a> Boilerplate + examples for React Native (iOS, Android), React (isomorphic, Material-UI), Relay, GraphQL, JWT, Node.js, Apache Cassandra.</li>\n<li><a href=\"https://github.com/vslinko/ripster/tree/master/src/graphql\">vslinko/ripster</a></li>\n<li><a href=\"https://github.com/fortruce/relay-skeleton\">relay-skeleton</a> - React, Relay, GraphQL project skeleton</li>\n<li><a href=\"https://github.com/mhart/simple-relay-starter\">simple-relay-starter</a> - A very simple starter for React Relay using Browserify.</li>\n<li><a href=\"https://github.com/transedward/relay-chat\">relay-chat</a> - an chat example showing Relay with routing and pagination.</li>\n<li><a href=\"https://github.com/taion/relay-todomvc\">relay-todomvc</a> - Relay TodoMVC with routing.</li>\n<li><a href=\"https://github.com/mrblueblue/graphql-express-sqlite\">graphql-express-sqlite</a> - GraphQL server with Sqlite and Express</li>\n<li><a href=\"https://github.com/chentsulin/koa-graphql-relay-example\">koa-graphql-relay-example</a> - Example of <a href=\"https://github.com/chentsulin/koa-graphql\">koa-graphql</a></li>\n<li><a href=\"https://github.com/lvarayut/relay-fullstack\">relay-fullstack</a> - Relay Starter Kit integrated with Relay, GraphQL, Express, ES6/ES7, JSX, Webpack, Babel, Material Design Lite, and PostCSS.</li>\n<li><a href=\"https://github.com/serverless/serverless-graphql-blog\">serverless-graphql-blog</a> - A Serverless Blog leveraging GraphQL to offer a REST API with only 1 endpoint</li>\n<li><a href=\"https://github.com/soonlive/relay-cart\">relay-cart</a> - A simple shopping cart example leveraging relay &#x26; GraphQL with routing and pagination.</li>\n<li><a href=\"https://github.com/applification/graphql-loader\">graphql-loader</a> - Example project to illustrate GraphQL, Express and Facebook DataLoader to connect to third party REST API</li>\n<li><a href=\"https://github.com/alvinthen/swapi-graphql-lambda\">swapi-graphql-lambda</a> - A GraphQL schema hosted in AWS Lambda wrapping <a href=\"http://swapi.co/\">http://swapi.co/</a></li>\n<li><a href=\"http://dev.apollodata.com/react/\">Apollo Client documentation</a> - Documentation and example for building GraphQL apps using apollo client</li>\n<li><a href=\"https://www.apollographql.com/docs/\">Apollo Server tools, products, and libraries documentation</a> - Documentation, tutorial and examples for building GraphQL server and connecting to SQL, MongoDB and REST endpoints.</li>\n<li><a href=\"https://www.apollographql.com/docs/link/\">Apollo Link</a> - The official guide for getting started with Apollo Link - a standard interface for modifying control flow of GraphQL requests and fetching GraphQL results.</li>\n<li><a href=\"https://github.com/nnance/f8app-apollo\">f8-apollo</a> - Refactored version of the official F8 app of 2016, powered by React Native and the Apollo Stack.</li>\n<li><a href=\"https://github.com/fbsamples/f8app\">f8app</a> - Source code of the official F8 app of 2016, powered by React Native and other Facebook open source projects. <a href=\"http://makeitopen.com/\">http://makeitopen.com</a></li>\n<li><a href=\"https://github.com/reindexio/reindex-examples\">Reindex Examples</a> - Example projects for Reindex with using React Native and React.js for web.</li>\n<li><a href=\"https://julienvincent.github.io/modelizr/\">Modelizr Documentation</a> - Documentation and Usage Examples for modelizr</li>\n<li><a href=\"https://github.com/Akryum/frontpage-vue-app\">Vue Apollo Example</a> - Apollo example project for Vue 2.0.</li>\n<li><a href=\"https://github.com/kamilkisiela/angular2-graphql-rest\">angular2-graphql-rest</a> - An example app with REST Api working side by side with GraphQL using Apollo Client with angular2-apollo. Includes step-by-step tutorial how to migrate from REST to GraphQL.</li>\n<li><a href=\"https://github.com/entria/graphql-dataloader-boilerplate\">GraphQL-DataLoader-Boilerplate</a> - Boilerplate to start your GraphQL with DataLoader server</li>\n<li><a href=\"https://github.com/sibelius/graphql-cep\">GraphQL-CEP</a> - Query address by CEP</li>\n<li><a href=\"https://github.com/katopz/react-apollo-graphql-github-example\">Apollo React example for Github GraphQL API</a> - Usage Examples Apollo React for Github GraphQL API with create-react-app</li>\n<li><a href=\"https://github.com/xpepermint/graphql-example\">Intuitive GraphQL Resolver Example</a> - GraphQL application example using <a href=\"https://github.com/xpepermint/rawmodeljs\">RawModel.js</a>.</li>\n<li><a href=\"https://reactql.org/\">ReactQL starter kit</a> - Universal React + Apollo + Redux + React Router 4, with SSR-enabled GraphQL, store (de/re)hydration and production code bundling.</li>\n<li><a href=\"https://github.com/stubailo/microhn\">microhn</a> - Simple Hacker News client built on top of GraphQLHub</li>\n<li><a href=\"https://github.com/sysgears/apollo-universal-starter-kit\">Apollo Web&#x26;Mobile Universal Starter Kit with Hot Code Reload</a> - Apollo, GraphQL, React, React Native, Expo, Redux, Express, SQL and Twitter Bootstrap. Hot Code Reload of back end &#x26; front end using Webpack and Hot Module Replacement.</li>\n<li><a href=\"https://malloc.fi/building-decoupled-sites-and-apps-with-graphql-and-next-js\">Building Decoupled Sites and Apps with GraphQL and Next.js</a></li>\n</ul>\n<h3>TypeScript Examples</h3>\n<ul>\n<li><a href=\"https://github.com/DxCx/webpack-graphql-server\">Basic Apollo Server</a> - Basic Starter for Apollo Server, Using typescript and Webpack.</li>\n<li><a href=\"https://github.com/FinalDes/apollo-express-ts-server-boilerplate\">Apollo Graphql Express Server</a> - Minimal Apollo Graphql Express Server</li>\n<li><a href=\"https://github.com/KATT/shop\">Prisma/Apollo/React Full-stack Example</a> - An e-commerce example project with Prisma, GraphQL API Gateway, React, Apollo, Next.js, SSR, CI, and E2E testing. All TypeScript.</li>\n</ul>\n<h3>Ruby Examples</h3>\n<ul>\n<li><a href=\"https://github.com/rmosolgo/graphql-ruby-demo\">graphql-ruby-demo</a> - Use graphql-ruby to expose a Rails app.</li>\n<li><a href=\"https://github.com/github/github-graphql-rails-example\">github-graphql-rails-example</a> - Example Rails app using GitHub's GraphQL API.</li>\n<li><a href=\"https://github.com/nethsix/relay-on-rails\">relay-on-rails</a> - Barebones starter kit for Relay application with Rails GraphQL server.</li>\n<li><a href=\"https://github.com/gauravtiwari/relay-rails-blog\">relay-rails-blog</a> - A graphql, relay and standard rails application powered demo weblog.</li>\n<li><a href=\"https://github.com/jcdavison/to_eat_app\">to<em>eat</em>app</a> - A sample graphql/rails/relay application with a related 3-part article series.</li>\n</ul>\n<h3>Go Examples</h3>\n<ul>\n<li><a href=\"https://github.com/sogko/golang-relay-starter-kit\">golang-relay-starter-kit</a> - Barebones starting point for a Relay application with Golang GraphQL server.</li>\n<li><a href=\"https://github.com/graphql-go/playground\">golang-graphql-playground</a> - An example Golang GraphQL server written with graphql-go and graphql-relay-go. Try live demo at: <a href=\"http://golanggraphqlplayground-sogko.rhcloud.com/\">http://golanggraphqlplayground-sogko.rhcloud.com</a></li>\n<li><a href=\"https://github.com/sogko/todomvc-relay-go\">todomvc-relay-go</a> - Port of the React/Relay TodoMVC app, driven by a Golang GraphQL backend.</li>\n</ul>\n<h3>Scala Examples</h3>\n<ul>\n<li><a href=\"https://github.com/sangria-graphql/sangria-akka-http-example\">sangria-akka-http-example</a> - An example GraphQL server written with akka-http and <a href=\"http://sangria-graphql.org/\">sangria</a></li>\n<li><a href=\"https://github.com/sangria-graphql/sangria-playground\">sangria-playground</a> - An example of GraphQL server written with Play and sangria.</li>\n</ul>\n<h3>Python Examples</h3>\n<ul>\n<li><a href=\"https://github.com/graphql-python/swapi-graphene\">swapi-graphene</a> - A GraphQL schema and server using <a href=\"http://graphene-python.org/\">Graphene</a> - <a href=\"http://swapi.graphene-python.org/\">View demo online</a>.</li>\n</ul>\n<h3>Elixir Examples</h3>\n<ul>\n<li><a href=\"https://github.com/absinthe-graphql/absinthe_example\">absinthe_example</a> - Example usage of Absinthe GraphQL</li>\n<li><a href=\"https://github.com/graphql-elixir/hello_graphql_phoenix\">hello<em>graphql</em>phoenix</a> - Examples of GraphQL Elixir Plug endpoints mounted in Phoenix - <a href=\"http://playground.graphql-elixir.org/\">View demo online</a>.</li>\n</ul>\n<h3>PHP Examples</h3>\n<ul>\n<li><a href=\"https://siler.leocavalcante.com/graphql/\">Siler's GraphQL guide</a> - A guide on how to build a PHP GraphQL endpoint.</li>\n<li><a href=\"https://github.com/ardani/laravel-graphql\">Laravel GraphQL</a> - A sample integrating GraphQL with Laravel</li>\n<li><a href=\"https://symfony.fi/entry/adding-a-graphql-api-to-your-symfony-flex-app\">Adding a GraphQL API to your Symfony Flex application</a></li>\n</ul>\n<h3>ReasonML Examples</h3>\n<ul>\n<li><a href=\"https://github.com/Gregoirevda/reason-ml-graphql-todo-list\">Todo list example</a> - A todo list integrating GraphQL.</li>\n</ul>\n<h2>Videos</h2>\n<ul>\n<li><a href=\"https://egghead.io/lessons/react-zero-config-apollo-graphql-with-apollo-boost\">Zero-config Apollo + GraphQL with Apollo Boost</a></li>\n<li><a href=\"https://www.youtube.com/embed/UBGzsb2UkeY\">Zero to GraphQL in 30 Minutes</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=9sc8Pyc51uU\">Data fetching for React applications at Facebook</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=X6YbAKiLCLU\">React Native &#x26; Relay: Bringing Modern Web Techniques to Mobile</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=WQLzZf34FJ8\">Exploring GraphQL</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=gY48GW87Feo\">Creating a GraphQL Server</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=S0s935RKKB4\">GraphQL at The Financial Times</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=IrgHurBjQbg\">Relay: An Application Framework For React</a></li>\n<li><a href=\"https://www.youtube.com/watch?t=643&#x26;v=Pxdgu2XIAAg\">Building and Deploying Relay with Facebook</a></li>\n<li><a href=\"https://vimeo.com/144817545\">Introduction to GraphQL</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=_9RgHXqH8J0\">Exploring GraphQL@Scale</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=IMUpYOc9z3c&#x26;feature=youtu.be\">What's Next for Phoenix by Chris McCord</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=Ed6oJXKt3-M\">GraphQL with Nick Schrock</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=DNPVqK_woRQ\">Build a GraphQL server for Node.js using PostgreSQL/MySQL</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=PHabPhgRUuU\">GraphQL server tutorial for Node.js with SQL, MongoDB and REST</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=ENqDNIp1Nd8\">JavaScript Air Episode 023: Transitioning from REST to GraphQL</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=ViXL0YQnioU\">GraphQL Future at react-europe 2016</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=etax3aEe2dA\">GraphQL at Facebook at react-europe 2016</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=z5rz3saDPJ8\">Building native mobile apps with GraphQL at react-europe 2016</a></li>\n</ul>\n<h2>Blogs</h2>\n<ul>\n<li><a href=\"http://graphql.org/blog/\">Official GraphQL blog</a></li>\n<li><a href=\"https://dev-blog.apollodata.com/\">Building Apollo</a></li>\n</ul>\n<h2>Posts</h2>\n<ul>\n<li><a href=\"http://gajus.com/blog/9/using-dataloader-to-batch-requests\">Using DataLoader to batch GraphQL requests</a></li>\n<li><a href=\"https://facebook.github.io/react/blog/2015/02/20/introducing-relay-and-graphql.html\">Introducing Relay and GraphQL</a></li>\n<li><a href=\"https://facebook.github.io/react/blog/2015/05/01/graphql-introduction.html\">GraphQL Introduction</a></li>\n<li><a href=\"https://gist.github.com/wincent/598fa75e22bdfa44cf47\">Unofficial Relay FAQ</a></li>\n<li><a href=\"https://medium.com/@clayallsopp/your-first-graphql-server-3c766ab4f0a2\">Your First GraphQL Server</a></li>\n<li><a href=\"https://blog.risingstack.com/graphql-overview-getting-started-with-graphql-and-nodejs/\">GraphQL Overview - Getting Started with GraphQL and Node.js</a></li>\n<li><a href=\"https://medium.freecodecamp.com/introduction-to-graphql-1d8011b80159\">4 Reasons you should try out GraphQL</a></li>\n<li><a href=\"https://medium.com/@frikille/moving-from-rest-to-graphql-e3650b6f5247\">Moving from REST to GraphQL</a></li>\n<li><a href=\"http://davidandsuzi.com/writing-a-basic-api-with-graphql/\">Writing a Basic API with GraphQL</a></li>\n<li><a href=\"https://blog.risingstack.com/start-using-graphql-with-graffiti/?utm_source=nodeweekly&#x26;utm_medium=email\">Start using GraphQL with Graffiti</a></li>\n<li><a href=\"https://www.reindex.io/blog/building-a-graphql-server-with-node-js-and-sql/\">Building a GraphQL Server with Node.js and SQL</a></li>\n<li><a href=\"https://www.slideshare.net/LondonReact/graph-ql\">GraphQL at The Financial Times</a></li>\n<li><a href=\"http://sgwilym.github.io/relay-visual-learners/\">Relay for visual learners</a></li>\n<li><a href=\"https://medium.com/@cpojer/relay-and-routing-36b5439bad9\">Relay and Routing</a></li>\n<li><a href=\"https://wehavefaces.net/learn-golang-graphql-relay-1-e59ea174a902\">Learn Golang + GraphQL + Relay, Part 1: Your first Golang GraphQL server</a></li>\n<li><a href=\"https://wehavefaces.net/learn-golang-graphql-relay-2-a56cbcc3e341\">Learn Golang + GraphQL + Relay, Part 2: Your first Relay application</a></li>\n<li><a href=\"https://0x2a.sh/from-rest-to-graphql-b4e95e94c26b\">From REST to GraphQL</a></li>\n<li><a href=\"http://graphql.org/blog/graphql-a-query-language/\">GraphQL: A data query language</a></li>\n<li><a href=\"http://graphql.org/blog/subscriptions-in-graphql-and-relay/\">Subscriptions in GraphQL and Relay</a></li>\n<li><a href=\"https://medium.com/@clayallsopp/relay-101-building-a-hacker-news-client-bb8b2bdc76e6\">Relay 101: Building A Hacker News Client</a></li>\n<li><a href=\"https://wehavefaces.net/graphql-shorthand-notation-cheatsheet-17cd715861b6\">GraphQL Shorthand Notation Cheatsheet</a></li>\n<li><a href=\"https://githubengineering.com/the-github-graphql-api/\">The GitHub GraphQL API</a></li>\n<li><a href=\"https://medium.com/@katopz/github-graphql-api-react-example-eace824d7b61\">Github GraphQL API React Example</a></li>\n<li><a href=\"https://medium.com/entria/testing-a-graphql-server-using-jest-4e00d0e4980e\">Testing a GraphQL Server using Jest</a></li>\n<li><a href=\"https://medium.com/entria/how-to-implement-viewercansee-in-graphql-78cc48de7464\">How to implement viewerCanSee in GraphQL</a></li>\n<li><a href=\"https://engineeringblog.yelp.com/2017/05/introducing-yelps-local-graph.html\">Introducing Yelp's Local Graph</a></li>\n<li><a href=\"https://labs.getninjas.com.br/sharing-data-in-a-microservices-architecture-using-graphql-97db59357602\">Sharing data in a Microservices Architecture using GraphQL</a></li>\n<li><a href=\"https://blog.codecentric.de/2017/09/graphql-mit-spotify-teil-1-server/\">Let's build a node.js GraphQL server for fetching Spotify REST API, in German</a> | <a href=\"https://blog.codecentric.de/en/2017/01/lets-build-spotify-graphql-server/\">in English</a></li>\n<li><a href=\"https://medium.com/@pierrecriulanscy/client-side-only-realtime-web-applications-with-firebase-graphql-and-apollo-client-2-0-9606160f7cf8\">“Client-side only” realtime web applications with Firebase, GraphQL and apollo-client 2.0</a></li>\n</ul>\n<h2>Tutorials</h2>\n<ul>\n<li><a href=\"https://www.howtographql.com/\">How to GraphQL</a> - Fullstack Tutorial Website with Tracks for all Major Frameworks &#x26; Languages including React, Apollo, Relay, JavaScript, Ruby, Java, Elixir and many more</li>\n<li><a href=\"https://github.com/mugli/learning-graphql\">learning-graphql</a> - An attempt to learn GraphQL.</li>\n<li><a href=\"https://www.learnrelay.org/\">Learn Relay</a> - A comprehensive introduction to Relay</li>\n<li><a href=\"https://www.learnapollo.com/\">Learn Apollo</a> - A hands-on tutorial for Apollo GraphQL Client</li>\n</ul>"},{"url":"/blog/blog-archive/","relativePath":"blog/blog-archive.md","relativeDir":"blog","base":"blog-archive.md","name":"blog-archive","frontmatter":{"title":"Blog Archive","subtitle":"Blog Archive","date":"2021-07-26","thumb_image_alt":"Blog page animation","excerpt":"Blog Archive","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"post","thumb_image":"images/3.jpg"},"html":"<h2>Blog Archive</h2>\n <iframe   width=\"400\" height=\"575\"\n            src=\"https://bgoonz.blogspot.com/\" title=\"YouTube video\n            player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n            encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"},{"url":"/blog/functions-in-python/","relativePath":"blog/functions-in-python.md","relativeDir":"blog","base":"functions-in-python.md","name":"functions-in-python","frontmatter":{"title":"Functions in Python","subtitle":"Functions in Python","date":"2021-10-12","thumb_image_alt":"lorem-ipsum","excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"post"},"html":"<h2>Functions</h2>\n<pre><code class=\"language-python\">def hello(name):\n    print('Hello {}'.format(name))\n</code></pre>\n<h3>Return Values and return Statements</h3>\n<p>When creating a function using the def statement, you can specify what the return value should be with a return statement. A return statement consists of the following:</p>\n<ul>\n<li>The return keyword.</li>\n<li>The value or expression that the function should return.</li>\n</ul>\n<pre><code class=\"language-python\">import random\ndef getAnswer(answerNumber):\n    if answerNumber == 1:\n        return 'It is certain'\n    elif answerNumber == 2:\n        return 'It is decidedly so'\n    elif answerNumber == 3:\n        return 'Yes'\n    elif answerNumber == 4:\n        return 'Reply hazy try again'\n    elif answerNumber == 5:\n        return 'Ask again later'\n    elif answerNumber == 6:\n        return 'Concentrate and ask again'\n    elif answerNumber == 7:\n        return 'My reply is no'\n    elif answerNumber == 8:\n        return 'Outlook not so good'\n    elif answerNumber == 9:\n        return 'Very doubtful'\n\nr = random.randint(1, 9)\nfortune = getAnswer(r)\nprint(fortune)\n</code></pre>\n<h3>The None Value</h3>\n<pre><code class=\"language-python\">spam = print('Hello!')\nspam is None\n</code></pre>\n<p>Note: never compare to <code>None</code> with the <code>==</code> operator. Always use <code>is</code>.</p>\n<h3>print Keyword Arguments</h3>\n<pre><code class=\"language-python\">print('Hello', end='')\nprint('World')\n</code></pre>\n<pre><code class=\"language-python\">print('cats', 'dogs', 'mice')\n</code></pre>\n<pre><code class=\"language-python\">print('cats', 'dogs', 'mice', sep=',')\n</code></pre>\n<h3>Local and Global Scope</h3>\n<ul>\n<li>Code in the global scope cannot use any local variables.</li>\n<li>However, a local scope can access global variables.</li>\n<li>Code in a function’s local scope cannot use variables in any other local scope.</li>\n<li>You can use the same name for different variables if they are in different scopes. That is, there can be a local variable named spam and a global variable also named spam.</li>\n</ul>\n<h3>The global Statement</h3>\n<p>If you need to modify a global variable from within a function, use the global statement:</p>\n<pre><code class=\"language-python\">def spam():\n    global eggs\n    eggs = 'spam'\n\neggs = 'global'\nspam()\nprint(eggs)\n</code></pre>\n<p>There are four rules to tell whether a variable is in a local scope or global scope:</p>\n<ol>\n<li>If a variable is being used in the global scope (that is, outside of all functions), then it is always a global variable.</li>\n<li>If there is a global statement for that variable in a function, it is a global variable.</li>\n<li>Otherwise, if the variable is used in an assignment statement in the function, it is a local variable.</li>\n<li>But if the variable is not used in an assignment statement, it is a global variable.</li>\n</ol>"},{"url":"/blog/blogwcomments/","relativePath":"blog/blogwcomments.md","relativeDir":"blog","base":"blogwcomments.md","name":"blogwcomments","frontmatter":{"title":"ExpressJS Apis","subtitle":"lorem-ipsum","date":"2021-07-26","thumb_image_alt":"node and express js","excerpt":"## **Overview**  A **database schema** is the shape of our database. It defines what tables we'll have, which columns should exist within the tables and any restrictions on each column.  A well-designed database schema keeps the data well organized and can help ensure high-quality data.  Note that while schema design is usually left to Database Administrators (DBAs), understanding schema helps when designing APIs and database logic. And in a smaller team, this step may fall on the developer.","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"post","thumb_image":"images/express.png"},"html":"<p><a href=\"https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where\">SQL Tryit Editor v1.6</a></p>\n<h2>A <strong>database is a collection of data organized for easy retrieval and manipulation</strong>.</h2>\n<p>We're concerned only with digital databases, those that run on computers or other electronic devices. Digital databases have been around since the 1960s. Relational databases, those which store \"related\" data, are the oldest and most common type of database in use today.</p>\n<h3><strong>Data Persistence</strong></h3>\n<p>A database is often necessary because our application or code requires data persistence. This term refers to data that is infrequently accessed and not likely to be modified. In less technical terms, the information will be safely stored and remain untouched unless intentionally modified.</p>\n<p>A familiar example of non-persistent data would be JavaScript objects and arrays, which reset each time the code runs.</p>\n<h3><strong>Relational Databases</strong></h3>\n<p>In relational databases, <strong>the data is stored in tabular format grouped into rows and columns</strong> (similar to spreadsheets). A collection of rows is called a table. Each row represents a single record in the table and is made up of one or more columns.</p>\n<p>These kinds of databases are relational because a <em>relation</em> is a mathematical idea equivalent to a table. So relational databases are databases that store their data in tables.</p>\n<h3><strong>Tables</strong></h3>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2e309a41-e107-46f3-81e7-154d732d3dcf/Untitled.png\"></p>\n<p><strong>Below are some basic facts about tables:</strong></p>\n<ul>\n<li>Tables organize data in rows and columns.</li>\n<li>Each row in a table represents one distinct record.</li>\n<li>Each column represents a field or attribute that is common to all the records.</li>\n<li>Fields should have a descriptive name and a data type appropriate for the attribute it represents.</li>\n<li>Tables usually have more rows than columns.</li>\n<li>Tables have primary keys that uniquely identify each row.</li>\n<li>Foreign keys represent the relationships with other tables.</li>\n</ul>\n<h2><strong>Overview</strong></h2>\n<h3>SQL:</h3>\n<p>SQL is a standard language, which means that it almost certainly will be supported, no matter how your database is managed. That said, be aware that the SQL language can vary depending on database management tools. This lesson focuses on a set of core commands that never change. Learning the standard commands is an excellent introduction since the knowledge transfers between database products.</p>\n<p>The syntax for SQL is English-like and requires fewer symbols than programming languages like C, Java, and JavaScript.</p>\n<p>It is declarative and concise, which means there is a lot less to learn to use it effectively.</p>\n<p>When learning SQL, it is helpful to understand that each command is designed for a different purpose. If we classify the commands by purpose, we'll end up with the following sub-categories of SQL:</p>\n<ul>\n<li><strong>Data Definition Language (DDL)</strong>: used to modify database objects. Some examples are: CREATE TABLE, ALTER TABLE, and DROP TABLE.</li>\n<li><strong>Data Manipulation Language (DML)</strong>: used to manipulate the data stored in the database. Some examples are: INSERT, UPDATE, and DELETE.</li>\n<li><strong>Data Query Language (DQL)</strong>: used to ask questions about the data stored in the database. The most commonly used SQL command is SELECT, and it falls in this category.</li>\n<li><strong>Data Control Language (DCL)</strong>: used to manage database security and user's access to data. These commands fall into the realm of Database Administrators. Some examples are GRANT and REVOKE.</li>\n<li><strong>Transaction Control Commands</strong>: used for managing groups of statements that must execute as a unit or not execute at all. Examples are COMMIT and ROLLBACK.</li>\n</ul>\n<p>As a developer, you'll need to get familiar with DDL and become proficient using DML and DQL. This lesson will cover only DML and DQL commands.</p>\n<h2><strong>Overview</strong></h2>\n<p>The four SQL operations covered in this section will allow a user to <strong>query</strong>, <strong>insert</strong>, and <strong>modify</strong> a database table.</p>\n<h3><strong>Query</strong></h3>\n<p>A <strong>query</strong> is a SQL statement used to retrieve data from a database. The command used to write queries is SELECT, and it is one of the most commonly used SQL commands.</p>\n<p>The basic syntax for a SELECT statement is this:</p>\n<p>To see all the fields on a table, we can use a * as the selection.</p>\n<p>The preceding statement would show all the records and all the columns for each record in the employees table.</p>\n<p>To pick the fields we want to see, we use a comma-separated list:</p>\n<p>The return of that statement would hold all records from the listed fields.</p>\n<p>We can extend the SELECT command's capabilities using clauses for things like filtering, sorting, pagination, and more.</p>\n<p>It is possible to query multiple tables in a single query. But, in this section, we only perform queries on a single table. We will cover performing queries on multiple tables in another section.</p>\n<h3><strong>Insert</strong></h3>\n<p>To <strong>insert</strong> new data into a table, we'll use the INSERT command. The basic syntax for an INSERT statement is this:</p>\n<p>Using this formula, we can specify which values will be inserted into which fields like so:</p>\n<h3><strong>Modify</strong></h3>\n<p><strong>Modifying</strong> a database consists of updating and removing records. For these operations, we'll use UPDATE and DELETE commands, respectively.</p>\n<p>The basic syntax for an UPDATE statement is:</p>\n<p>The basic syntax for a DELETE statement is:</p>\n<h2><strong>Follow Along</strong></h2>\n<h3><strong>Filtering results using WHERE clause</strong></h3>\n<p>When querying a database, the default result will be every entry in the given table. However, often, we are looking for a specific record or a set of records that meets certain criteria.</p>\n<p>A WHERE clause can help in both cases.</p>\n<p>Here's an example where we might only want to find customers living in Berlin.</p>\n<p>We can also chain together WHERE clauses using OR and AND to limit our results further.</p>\n<p>The following query includes only records that match both criteria.</p>\n<p>And this query includes records that match either criteria.</p>\n<p>These operators can be combined and grouped with parentheses to add complex selection logic. They behave similarly to what you're used to in programming languages.</p>\n<p>You can read more about SQLite operators from <a href=\"https://www.w3resource.com/sqlite/operators.php\">w3resource (Links to an external site.)</a>.</p>\n<p>To select a single record, we can use a WHERE statement with a uniquely identifying field, like an id:</p>\n<p>Other comparison operators also work in WHERE conditions, such as >, &#x3C;, &#x3C;=, and >=.</p>\n<h3><strong>Ordering results using the ORDER BY clause</strong></h3>\n<p>Query results are shown in the same order the data was inserted. To control how the data is sorted, we can use the ORDER BY clause. Let's see an example.</p>\n<p>We can pass a list of field names to order by and optionally choose asc or desc for the sort direction. The default is asc, so it doesn't need to be specified.</p>\n<p>Some SQL engines also support using field abbreviations when sorting.</p>\n<p>In this case, the results are sorted by the department in ascending order first and then by salary in descending order. The numbers refer to the fields' position in the <em>selection</em> portion of the query, so 1 would be <em>name</em>, 2 would be <em>salary</em>, and so on.</p>\n<p>Note that the WHERE clause should come after the FROM clause. The ORDER BY clause always goes last.</p>\n<h3><strong>Limiting results using the LIMIT clause</strong></h3>\n<p>When we wish to see only a limited number of records, we can use a LIMIT clause.</p>\n<p>The following returns the first ten records in the products table:</p>\n<p>LIMIT clauses are often used in conjunction with ORDER BY. The following shows us the five cheapest products:</p>\n<h3><strong>Inserting data using INSERT</strong></h3>\n<p>An insert statement adds a new record to the database. All non-null fields must be listed out in the same order as their values. Some fields, like ids and timestamps, may be auto-generated and do not need to be included in an INSERT statement.</p>\n<p>The values in an insert statement must not violate any restrictions and constraints that the database has in place, such as expected datatypes. We will learn more about constraints and schema design in a later section.</p>\n<h3><strong>Modifying recording using UPDATE</strong></h3>\n<p>When modifying a record, we identify a single record or a set of records to update using a WHERE clause. Then we can set the new value(s) in place.</p>\n<p>Technically the WHERE clause is not required, but leaving it off would result in every record within the table receiving the update.</p>\n<h3><strong>Removing records using DELETE</strong></h3>\n<p>When removing a record or set of records, we need only identify which record(s) to remove using a WHERE clause:</p>\n<p>Once again, the WHERE clause is not required, but leaving it off would remove every record in the table, so it's essential.</p>\n<h2><strong>Overview</strong></h2>\n<p>Raw SQL is a critical baseline skill. However, Node developers generally use an <strong>Object Relational Mapper (ORM)</strong> or <strong>query builder</strong> to write database commands in a backend codebase. Both <strong>ORMs</strong> and <strong>query builders</strong> are JavaScript libraries that allow us to interface with the database using a JavaScript version of the SQL language.</p>\n<p>For example, instead of a raw SQL SELECT:</p>\n<p>We could use a query builder to write the same logic in JavaScript:</p>\n<p><strong>Query builders</strong> are lightweight and easy to get off the ground, whereas <strong>ORMs</strong> use an object-oriented model and provide more heavy lifting within their rigid structure.</p>\n<p>We will use a <strong>query builder</strong> called <a href=\"https://knexjs.org/\">knex.js (Links to an external site.)</a>.</p>\n<h2><strong>Follow Along</strong></h2>\n<h3><strong>Knex Setup</strong></h3>\n<p>To use Knex in a repository, we'll need to add two libraries:</p>\n<p>knex is our query builder library, and sqlite3 allows us to interface with a sqlite database. We'll learn more about sqlite and other <strong>database management systems</strong> in the following module. For now, know that you need both libraries.</p>\n<p>Next, we use Knex to set up a config file:</p>\n<p>To use the query builder elsewhere in our code, we need to call knex and pass in a config object. We'll be discussing Knex configuration more in a future module. Still, we only need the client, connection, and useNullAsDefault keys as shown above. The filename should point towards the pre-existing database file, which can be recognized by the .db3 extension.</p>\n<p><strong>GOTCHA</strong>: The file path to the database should be with respect to the <strong>root</strong> of the repo, not the configuration file itself.</p>\n<p>Once Knex is configured, we can import the above config file anywhere in our codebase to access the database.</p>\n<p>The db object provides methods that allow us to begin building queries.</p>\n<h3><strong>SELECT using Knex</strong></h3>\n<p>In Knex, the equivalent of SELECT * FROM users is:</p>\n<p>There's a simpler way to write the same command:</p>\n<p>Using this, we could write a GET endpoint.</p>\n<p><strong>NOTE</strong>: All Knex queries return promises.</p>\n<p>Knex also allows for a where clause. In Knex, we could write SELECT * FROM users WHERE id=1 as</p>\n<p>This method will resolve to an array containing a single entry like so: [{ id: 1, name: 'bill' }].</p>\n<p>Using this, we might add a GET endpoint where a specific user:</p>\n<h3><strong>INSERT using Knex</strong></h3>\n<p>In Knex, the equivalent of INSERT INTO users (name, age) VALUES ('Eva', 32) is:</p>\n<p>The insert method in Knex will resolve to an array containing the newly created id for that user like so: [3].</p>\n<h3><strong>UPDATE using Knex</strong></h3>\n<p>In knex, the equivalent of UPDATE users SET name='Ava', age=33 WHERE id=3; is:</p>\n<p>Note that the where method comes before update, unlike in SQL.</p>\n<p>Update will resolve to a count of rows updated.</p>\n<h3><strong>DELETE using Knex</strong></h3>\n<p>In Knex, the equivalent of DELETE FROM users WHERE age=33; is:</p>\n<p>Once again, the where must come before the del. This method will resolve to a count of records removed.</p>\n<h1>Day #2:</h1>\n<h2><strong>Overview</strong></h2>\n<p>SQLlite Studio is an application that allows us to create, open, view, and modify SQLite databases. To fully understand what SQLite Studio is and how it works, we must also understand the concept of the Database Management Systems (DBMS).</p>\n<h2><strong>Follow Along</strong></h2>\n<h3><strong>What is a DBMS?</strong></h3>\n<p>To manage digital databases we use specialized software called <strong>D</strong>ata<strong>B</strong>ase <strong>M</strong>anagement <strong>S</strong>ystems (DBMS). These systems typically run on servers and are managed by <strong>D</strong>ata<strong>B</strong>ase <strong>A</strong>dministrators (DBAs).</p>\n<p>In less technical terms, we need a type of software that will allow us to create, access, and generally manage our databases. In the world of relational databases, we specifically use Relational Database Mangement Systems (RDBMs). Some examples are Postgres, SQLite, MySQL, and Oracle.</p>\n<p>Choosing a DBMS determines everything from how you set up your database, to where and how the data is stored, to what SQL commands you can use. Most systems share the core of the SQL language that you've already learned.</p>\n<p>In other words, you can expect SELECT, UPDATE, INSERT, WHERE , and the like to be the same across all DBMSs, but the subtleties of the language may vary.</p>\n<h3><strong>What is SQLite?</strong></h3>\n<p><strong>SQLite</strong> is the DBMS, as the name suggests, it is a more lightweight system and thus easier to get set up than some others.</p>\n<p>SQLite allows us to store databases as single files. SQLite projects have a .db3 extension. That is the database.</p>\n<p>SQLite is <em>not a database</em> (like relational, graph, or document are databases) but rather <em>a database management system</em>.</p>\n<h3><strong>Opening an existing database in SQLite Studio</strong></h3>\n<p>One useful visual interface we might use with a SQLite database is called <strong>SQLite Studio</strong>. <a href=\"https://sqlitestudio.pl/\">Install SQLITE Studio here. (Links to an external site.)</a></p>\n<p>Once installed, we can use SQLite Studio to open any .db3 file from a previous lesson. We may view the tables, view the data, and even make changes to the database.</p>\n<p>For a more detailed look at SQLite Studio, follow along in the video above.</p>\n<h2><strong>Overview</strong></h2>\n<p>A <strong>database schema</strong> is the shape of our database. It defines what tables we'll have, which columns should exist within the tables and any restrictions on each column.</p>\n<p>A well-designed database schema keeps the data well organized and can help ensure high-quality data.</p>\n<p>Note that while schema design is usually left to Database Administrators (DBAs), understanding schema helps when designing APIs and database logic. And in a smaller team, this step may fall on the developer.</p>\n<h2><strong>Follow Along</strong></h2>\n<p>For a look at schema design in SQLite Studio, follow along in the video above.</p>\n<p>When designing a single table, we need to ask three things:</p>\n<ul>\n<li>What fields (or columns) are present?</li>\n<li>What type of data do we expect for each field?</li>\n<li>Are there other restrictions needed for each column?</li>\n</ul>\n<p>Looking at the following schema diagram for an accounts table, we can the answer to each other those questions:</p>\n<p><a href=\"https://www.notion.so/9790405dda624818822293a383eec2d2\">Untitled</a></p>\n<h3><strong>Table Fields</strong></h3>\n<p>Choosing which fields to include in a table is relatively straight forward. What information needs to be tracked regarding this resource? In the real world, this is determined by the intended use of the product or app.</p>\n<p>However, this is one requirement every table should satisfy: a <strong>primary key</strong>. A primary key is a way to identify each entry in the database uniquely. It is most often represented as a auto-incrementing integer called id or [tablename]Id.</p>\n<h3><strong>Datatypes</strong></h3>\n<p>Each field must also have a specified datatype. The datatype available depends on our DBMS. Some supported datatype in SQLite include:</p>\n<ul>\n<li><strong>Null:</strong> Missing or unknown information.</li>\n<li><strong>Integer:</strong> Whole numbers.</li>\n<li><strong>Real:</strong> Any number, including decimals.</li>\n<li><strong>Text:</strong> Character data.</li>\n<li><strong>Blob:</strong> a large binary object that can be used to store miscellaneous data.</li>\n</ul>\n<p>Any data inserted into the table must match the datatypes determined in schema design.</p>\n<h3><strong>Constraints</strong></h3>\n<p>Beyond datatypes, we may add additional <strong>constraints</strong> on each field. Some examples include:</p>\n<ul>\n<li><strong>Not Null:</strong> The field cannot be left empty</li>\n<li><strong>Unique:</strong> No two records can have the same value in this field</li>\n<li><strong>Primary key:</strong> - Indicates this field is the primary key. Both the not null and unique constraints will be enforced.</li>\n<li><strong>Default:</strong> - Sets a default value if none is provided.</li>\n</ul>\n<p>As with data types, any data that does not satisfy the schema constraints will be rejected from the database.</p>\n<h3><strong>Multi-Table Design</strong></h3>\n<p>Another critical component of schema design is to understand how different tables relate to each other. This will be covered in later lesson.</p>\n<h2><strong>Overview</strong></h2>\n<p>Knex provides a <strong>schema builder</strong>, which allows us to write code to design our database schema. However, beyond thinking about columns and constraints, we must also consider updates.</p>\n<p>When a schema needs to be updated, a developer must feel confident that the changes go into effect everywhere. This means schema updates on the developer's local machine, on any testing or staging versions, on the production database, and then on any other developer's local machines. This is where <strong>migrations</strong> come into play.</p>\n<p>A database migration describes changes made to the structure of a database. Migrations include things like adding new objects, adding new tables, and modifying existing objects or tables.</p>\n<h2><strong>Follow Along</strong></h2>\n<h3><strong>Knex Cli</strong></h3>\n<p>To use migrations (and to make Knex setup easier), we need to use <strong>knex cli</strong>. Install knex globally with npm install -g knex.</p>\n<p>This allows you to use Knex commands within any repo that has knex as a local dependency. If you have any issues with this global install, you can use the npx knex command instead.</p>\n<h3><strong>Initializing Knex</strong></h3>\n<p>To start, add the knex and sqlite3 libraries to your repository.</p>\n<p>npm install knex sqlite3</p>\n<p>We've seen how to use manually create a config object to get started with Knex, but the best practice is to use the following command:</p>\n<p>Or, if Knex isn't globally installed:</p>\n<p>This command will generate a file in your root folder called knexfile.js. It will be auto populated with three config objects, based on different environments. We can delete all except for the development object.</p>\n<p>We'll need to update the location (or desired location) of the database as well as add the useNullAsDefault option. The latter option prevents crashes when working with sqlite3.</p>\n<p>Now, wherever we configure our database, we may use the following syntax instead of hardcoding in a config object.</p>\n<h3><strong>Knex Migrations</strong></h3>\n<p>Once our knexfile is set up, we can begin creating <strong>migrations</strong>. Though it's not required, we are going to add an addition option to the config object to specify a directory for the migration files.</p>\n<p>We can generate a new migration with the following command:</p>\n<p>knex migrate:make [migration-name]</p>\n<p>If we needed to create an accounts table, we might run:</p>\n<p>knex migrate:make create-accounts</p>\n<p>Note that inside data/migrations/ a new file has appeared. Migrations have a timestamp in their filenames automatically. Wither you like this or not, <strong>do not edit migration names.</strong></p>\n<p>The migration file should have both an up and a down function. Within the up function, we write the ended database changes. Within the down function, we write the code to undo the up functions. This allows us to undo any changes made to the schema if necessary.</p>\n<p>References for these methods are found in the <strong>schema builder</strong> section of the <a href=\"https://knexjs.org/\">Knex docs (Links to an external site.)</a>.</p>\n<p>At this point, the table is <strong>not</strong> yet created. To run this (and any other) migrations, use the command:</p>\n<p>knex migrate:latest</p>\n<p>Note if the database does not exist, this command will auto-generate one. We can use SQLite Studio to confirm that the accounts table has been created.</p>\n<h3><strong>Changes and Rollbacks</strong></h3>\n<p>If later down the road, we realize you need to update your schema, you shouldn't edit the migration file. Instead, you will want to create a new migration with the command:</p>\n<p>knex migrate:make accounts-schema-update</p>\n<p>Once we've written our updates into this file we save and close with:</p>\n<p>knex migrate:latest</p>\n<p>If we migrate our database and then quickly realize something isn't right, we can edit the migration file. However, first, we need to <strong>rolllback</strong> (or undo) our last migration with:</p>\n<p>knex migrate:rollback</p>\n<p>Finally, we are free to rerun that file with knex migrate latest.</p>\n<p><strong>NOTE</strong>: A rollback should not be used to edit an old migration file once that file has accepted into a main branch. However, an entire team may use a rollback to return to a previous version of a database.</p>\n<h2><strong>Overview</strong></h2>\n<p>Knex provides a <strong>schema builder</strong>, which allows us to write code to design our database schema. However, beyond thinking about columns and constraints, we must also consider updates.</p>\n<p>When a schema needs to be updated, a developer must feel confident that the changes go into effect everywhere. This means schema updates on the developer's local machine, on any testing or staging versions, on the production database, and then on any other developer's local machines. This is where <strong>migrations</strong> come into play.</p>\n<p>A database migration describes changes made to the structure of a database. Migrations include things like adding new objects, adding new tables, and modifying existing objects or tables.</p>\n<h2><strong>Follow Along</strong></h2>\n<h3><strong>Knex Cli</strong></h3>\n<p>To use migrations (and to make Knex setup easier), we need to use <strong>knex cli</strong>. Install knex globally with npm install -g knex.</p>\n<p>This allows you to use Knex commands within any repo that has knex as a local dependency. If you have any issues with this global install, you can use the npx knex command instead.</p>\n<h3><strong>Initializing Knex</strong></h3>\n<p>To start, add the knex and sqlite3 libraries to your repository.</p>\n<p>npm install knex sqlite3</p>\n<p>We've seen how to use manually create a config object to get started with Knex, but the best practice is to use the following command:</p>\n<p>Or, if Knex isn't globally installed:</p>\n<p>This command will generate a file in your root folder called knexfile.js. It will be auto populated with three config objects, based on different environments. We can delete all except for the development object.</p>\n<p>We'll need to update the location (or desired location) of the database as well as add the useNullAsDefault option. The latter option prevents crashes when working with sqlite3.</p>\n<p>Now, wherever we configure our database, we may use the following syntax instead of hardcoding in a config object.</p>\n<h3><strong>Knex Migrations</strong></h3>\n<p>Once our knexfile is set up, we can begin creating <strong>migrations</strong>. Though it's not required, we are going to add an addition option to the config object to specify a directory for the migration files.</p>\n<p>We can generate a new migration with the following command:</p>\n<p>knex migrate:make [migration-name]</p>\n<p>If we needed to create an accounts table, we might run:</p>\n<p>knex migrate:make create-accounts</p>\n<p>Note that inside data/migrations/ a new file has appeared. Migrations have a timestamp in their filenames automatically. Wither you like this or not, <strong>do not edit migration names.</strong></p>\n<p>The migration file should have both an up and a down function. Within the up function, we write the ended database changes. Within the down function, we write the code to undo the up functions. This allows us to undo any changes made to the schema if necessary.</p>\n<p>References for these methods are found in the <strong>schema builder</strong> section of the <a href=\"https://knexjs.org/\">Knex docs (Links to an external site.)</a>.</p>\n<p>At this point, the table is <strong>not</strong> yet created. To run this (and any other) migrations, use the command:</p>\n<p>knex migrate:latest</p>\n<p>Note if the database does not exist, this command will auto-generate one. We can use SQLite Studio to confirm that the accounts table has been created.</p>\n<h3><strong>Changes and Rollbacks</strong></h3>\n<p>If later down the road, we realize you need to update your schema, you shouldn't edit the migration file. Instead, you will want to create a new migration with the command:</p>\n<p>knex migrate:make accounts-schema-update</p>\n<p>Once we've written our updates into this file we save and close with:</p>\n<p>knex migrate:latest</p>\n<p>If we migrate our database and then quickly realize something isn't right, we can edit the migration file. However, first, we need to <strong>rolllback</strong> (or undo) our last migration with:</p>\n<p>knex migrate:rollback</p>\n<p>Finally, we are free to rerun that file with knex migrate latest.</p>\n<p><strong>NOTE</strong>: A rollback should not be used to edit an old migration file once that file has accepted into a main branch. However, an entire team may use a rollback to return to a previous version of a database.</p>\n<h2><strong>Overview</strong></h2>\n<p>Often we want to pre-populate our database with sample data for testing. <strong>Seeds</strong> allow us to add and reset sample data easily.</p>\n<h2><strong>Follow Along</strong></h2>\n<p>The Knex command-line tool offers a way to <strong>seed</strong> our database; in other words, pre-populate our tables.</p>\n<p>Similarly to migrations, we want to customize where our seed files are generated using our knexfile</p>\n<p>To create a seed run: knex seed:make 001-seedName</p>\n<p>Numbering is a good idea because Knex doesn't attach a timestamp to the name like migrate does. Adding numbers to the file name, we can control the order in which they run.</p>\n<p>We want to create seeds for our accounts table:</p>\n<p>knex seed:make 001-accounts</p>\n<p>A file will appear in the designated seed folder.</p>\n<p>Run the seed files by typing:</p>\n<p>knex seed:run</p>\n<p>You can now use SQLite Studio to confirm that the accounts table has two entries.</p>\n<h1>Day #3:</h1>\n<h2><strong>Overview</strong></h2>\n<p><strong>Foreign keys</strong> are a type of table field used for creating links between tables. Like <strong>primary keys</strong>, they are most often integers that identify (rather than store) data. However, whereas a primary key is used to id rows in a table, foreign keys are used to connect a record in one table to a record in a second table.</p>\n<h2><strong>Follow Along</strong></h2>\n<p>Consider the following farms and ranchers tables.</p>\n<p><a href=\"https://www.notion.so/5b20c5e233dd4a70a33d6ab2c2e1c8bb\">Untitled</a></p>\n<p><a href=\"https://www.notion.so/0b0a909c24a9474fb9df80938546f12a\">Untitled</a></p>\n<p>The farm<em>id in the ranchers table is an example of a foreign key. Each entry in the farm</em>id (foreign key) column corresponds to an id (primary key) in the farms table. This allows us to track which farm each rancher belongs to while keeping the tables normalized.</p>\n<p>If we could only see the ranchers table, we would know that John, Jane, and Jen all work together and that Jim and Jay also work together. However, to know where any of them work, we would need to look at the farms table.</p>\n<p>Now that we understand the basics of querying data from a single table, let's move on to selecting data from multiple tables using JOIN operations.</p>\n<h2><strong>Overview</strong></h2>\n<p>We can use a JOIN to combine query data from multiple tables using a single SELECT statement.</p>\n<p>There are different types of joins; some are listed below:</p>\n<ul>\n<li>inner joins.</li>\n<li>outer joins.</li>\n<li>left joins.</li>\n<li>right joins.</li>\n<li>cross joins.</li>\n<li>non-equality joins.</li>\n<li>self joins.</li>\n</ul>\n<p>Using joins requires that the two tables of interest contain at least one field with shared information. For example, if a <em>departments</em> table has an <em>id</em> field, and an employee table has a <em>department_id</em> field, and the values that exist in the <em>id</em> column of the <em>departments</em> table live in the <em>department_id</em> field of the employee table, we can use those fields to join both tables like so:</p>\n<p>This query will return the data from both tables for every instance where the ON condition is true. If there are employees with no value for department<em>id or where the value stored in the field does not correspond to an existing id in the</em> departments <em>table, then that record will NOT be returned. In a similar fashion, any records from the</em> departments <em>table that don't have an employee associated with them will also be omitted from the results. Basically, if the</em> id* does not show as the value of department_id for an employee, it won't be able to join.</p>\n<p>We can shorten the condition by giving the table names an alias. This is a common practice. Below is the same example using aliases, picking which fields to return and sorting the results:</p>\n<p>Notice that we can take advantage of white space and indentation to make queries more readable.</p>\n<p>There are several ways of writing joins, but the one shown here should work on all database management systems and avoid some pitfalls, so we recommend it.</p>\n<p>The syntax for performing a similar join using Knex is as follows:</p>\n<h2><strong>Follow Along</strong></h2>\n<p>A good explanation of how the different types of joins can be seen <a href=\"https://www.w3resource.com/sql/joins/sql-joins.php\">in this article from w3resource.com (Links to an external site.)</a>.</p>\n<h1>What is SQL Joins?</h1>\n<p>An SQL JOIN clause combines rows from two or more tables. It creates a set of rows in a temporary table.</p>\n<h1>How to Join two tables in SQL?</h1>\n<p>A JOIN works on two or more tables if they have at least one common field and have a relationship between them.</p>\n<p>JOIN keeps the base tables (structure and data) unchanged.</p>\n<h1>Join vs. Subquery</h1>\n<ul>\n<li>JOINs are faster than a subquery and it is very rare that the opposite.</li>\n<li>In JOINs the RDBMS calculates an execution plan, that can predict, what data should be loaded and how much it will take to processed and as a result this process save some times, unlike the subquery there is no pre-process calculation and run all the queries and load all their data to do the processing.</li>\n<li>A JOIN is checked conditions first and then put it into table and displays; where as a subquery take separate temp table internally and checking condition.</li>\n<li>When joins are using, there should be connection between two or more than two tables and each table has a relation with other while subquery means query inside another query, has no need to relation, it works on columns and conditions.</li>\n</ul>\n<h1>SQL JOINS: EQUI JOIN and NON EQUI JOIN</h1>\n<p>The are two types of SQL JOINS - EQUI JOIN and NON EQUI JOIN</p>\n<ol>\n<li>SQL EQUI JOIN :</li>\n</ol>\n<p>The SQL EQUI JOIN is a simple SQL join uses the equal sign(=) as the comparison operator for the condition. It has two types - SQL Outer join and SQL Inner join.</p>\n<ol>\n<li>SQL NON EQUI JOIN :</li>\n</ol>\n<p>The <strong>SQL NON EQUI JOIN</strong> is a join uses comparison operator other than the equal sign like >, &#x3C;, >=, &#x3C;= with the condition.</p>\n<p><strong>SQL EQUI JOIN : INNER JOIN and OUTER JOIN</strong></p>\n<p>The SQL EQUI JOIN can be classified into two types - INNER JOIN and OUTER JOIN</p>\n<ol>\n<li>SQL INNER JOIN</li>\n</ol>\n<p>This type of EQUI JOIN returns all rows from tables where the key record of one table is equal to the key records of another table.</p>\n<ol>\n<li>SQL OUTER JOIN</li>\n</ol>\n<p>This type of EQUI JOIN returns all rows from one table and only those rows from the secondary table where the joined condition is satisfying i.e. the columns are equal in both tables.</p>\n<p>In order to perform a JOIN query, the required information we need are:</p>\n<p><strong>a)</strong> The name of the tables<strong>b)</strong> Name of the columns of two or more tables, based on which a condition will perform.</p>\n<p><strong>Syntax:</strong></p>\n<p><strong>Parameters:</strong></p>\n<p><a href=\"https://www.notion.so/5522c3e6d5d0443eb870f7a34f60c7ff\">Untitled</a></p>\n<p><strong>Pictorial Presentation of SQL Joins:</strong></p>\n<p><img src=\"https://www.w3resource.com/w3r_images/sql-joins-all.gif\"></p>\n<p><strong>Example:</strong></p>\n<p><strong>Sample table: company</strong></p>\n<p><strong>Sample table: foods</strong></p>\n<p>To join two tables 'company' and 'foods', the following SQL statement can be used :</p>\n<p><strong>SQL Code:</strong></p>\n<p>Copy</p>\n<p>Output:</p>\n<h2><strong>Overview</strong></h2>\n<p>While we can write database code directly into our endpoints, best practices dictate that all database logic exists in separate, modular methods. These files containing database access helpers are often called <strong>models</strong></p>\n<h2><strong>Follow Along</strong></h2>\n<p>To handle CRUD operations for a single resource, we would want to create a <strong>model</strong> (or database access file) containing the following methods:</p>\n<p>Each of these functions would use Knex logic to perform the necessary database operation.</p>\n<p>For each method, we can choose what value to return. For example, we may prefer findById() to return a single user object rather than an array.</p>\n<p>We can also use existing methods like findById() to help add() return the new user (instead of just the id).</p>\n<p>Once all methods are written as desired, we can export them like so:</p>\n<p>…and use the helpers in our endpoints</p>\n<p>There should no be knex code in the endpoints themselves.</p>\n<h1>Day #4:</h1>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5ecaf43d-ee27-4da1-aa3c-aa1d9d96cc40/Untitled.png\"></p>\n<h2><strong>Overview</strong></h2>\n<p>Normalization is the process of designing or refactoring database tables for maximum consistency and minimum redundancy.</p>\n<p>With objects, we're used to <em>denormalized</em> data, stored with ease of use and speed in mind. Non-normalized tables are considered ineffective in relational databases.</p>\n<h2><strong>Follow Along</strong></h2>\n<p><strong>Data normalization</strong> is a deep topic in database design. To begin thinking about it, we'll explore a few basic guidelines and some data examples that violate these rules.</p>\n<h3><strong>Normalization Guidelines</strong></h3>\n<ul>\n<li>Each record has a primary key.</li>\n<li>No fields are repeated.</li>\n<li>All fields relate directly to the key data.</li>\n<li>Each field entry contains a single data point.</li>\n<li>There are no redundant entries.</li>\n</ul>\n<h3><strong>Denormalized Data</strong></h3>\n<p><a href=\"https://www.notion.so/19a01f68a659470fb85bbe6906fb4bad\">Untitled</a></p>\n<p>This table has two issues. There is no proper id field (as multiple farms may have the same name), and multiple fields are representing the same type of data: animals.</p>\n<p><a href=\"https://www.notion.so/075ad6dd99ac48698625d7b56ca67bef\">Untitled</a></p>\n<p>While we have now eliminated the first two issues, we now have multiple entries in one field, separated by commas. This isn't good either, as its another example of denormalization. There is no \"array\" data type in a relational database, so each field must contain only one data point.</p>\n<p><a href=\"https://www.notion.so/375a15b0cb3f444a8698cd6cb3a08fe0\">Untitled</a></p>\n<p>Now we've solved the multiple fields issue, but we created repeating data (the farm field), which is also an example of denormalization. As well, we can see that if we were tracking additional ranch information (such as annual revenue), that field is only vaguely related to the animal information.</p>\n<p><strong>When these issues begin arising in your schema design, it means that you should separate information into two or more tables.</strong></p>\n<h3><strong>Anomalies</strong></h3>\n<p>Obeying the above guidelines prevent <strong>anomalies</strong> in your database when inserting, updating, or deleting. For example, imagine if the revenue of Beech Ranch changed. With our denormalized schema, it may get updated in some records but not others:</p>\n<p><a href=\"https://www.notion.so/e05f5b2e8ff141798adc6f188f56f31e\">Untitled</a></p>\n<p>Similarly, if Beech Ranch shut down, there would be three (if not more) records that needed to be deleted to remove a single farm.</p>\n<p>Thus a denormalized table opens the door for contradictory, confusing, and unusable data.</p>\n<h2><strong>Challenge</strong></h2>\n<p>What issues does the following table have?</p>\n<p><a href=\"https://www.notion.so/2793e8f6b70a47f48f9208779366e69e\">Untitled</a></p>\n<h2><strong>Overview</strong></h2>\n<p>There are three types of relationships:</p>\n<ul>\n<li>One to one.</li>\n<li>One to many.</li>\n<li>Many to many.</li>\n</ul>\n<p>Determining how data is related can provide a set of guidelines for table representation and guides the use of foreign keys to connect said tables.</p>\n<h2><strong>Follow Along</strong></h2>\n<h3><strong>One to One Relationships</strong></h3>\n<p>Imagine we are storing the financial projections for a series of farms.</p>\n<p>We may wish to attach fields like farm name, address, description, projected revenue, and projected expenses. We could divide these fields into two categories: information related to the farm directly (name, address, description) and information related to the financial projections (revenue, expenses).</p>\n<p>We would say that farms and projections have a <strong>one-to-one</strong> relationship. This is to say that every farm has exactly one projection, and every project corresponds to exactly one farm.</p>\n<p>This data can be represented in two tables: farms and projections</p>\n<p><a href=\"https://www.notion.so/944e594f3464473ea06383bfdea13265\">Untitled</a></p>\n<p><a href=\"https://www.notion.so/de32fcf6760e45f284707274433fee92\">Untitled</a></p>\n<p>The farm_id is the foreign key that links farms and projections together.</p>\n<p>Notes about one-to-one relationships:</p>\n<ul>\n<li>The foreign key should always have a unique constraint to prevent duplicate entries. In the example above, we wouldn't want to allow multiple projections records for one farm.</li>\n<li>The foreign key can be in either table. For example, we may have had a projection_id in the farms table instead. A good rule of thumb is to put the foreign key in whichever table is more auxiliary to the other.</li>\n<li>You can represent one-to-one data in a single table <em>without</em> creating anomalies. However, it is sometimes prudent to use two tables as shown above to keep separate concerns in separate tables.</li>\n</ul>\n<h3><strong>One to Many Relationships</strong></h3>\n<p>Now imagine, we are storing the full-time ranchers employed at each farm. In this case, each rancher would only work at one farm however, each farm may have multiple ranchers.</p>\n<p>This is called a <strong>one-to-many</strong> relationship.</p>\n<p>This is the most common type of relationship between entities. Some other examples:</p>\n<ul>\n<li>One customer can have many orders.</li>\n<li>One user can have many posts.</li>\n<li>One post can have many comments.</li>\n</ul>\n<p>Manage this type of relationship by adding a foreign key on the \"many\" table of the relationship that points to the primary key on the \"one\" table. Consider the farms and ranchers tables.</p>\n<p><a href=\"https://www.notion.so/7dfd2e69c9804a01845f2e9b716a5ac2\">Untitled</a></p>\n<p><a href=\"https://www.notion.so/c95f3d418db94ab4b4532eeba0e4f918\">Untitled</a></p>\n<p>In a many-to-many relationship, the foreign key (in this case farm_id) should <em>not</em> be unique.</p>\n<h3><strong>Many to Many Relationships</strong></h3>\n<p>If we want to track animals on a farm as well, we must explore the <strong>many-to-many</strong> relationship. A farm has multiple animals, and multiple of each type of animal is present at multiple different farms.</p>\n<p>Some other examples:</p>\n<ul>\n<li>an order can have many products and the same product will appear in many orders.</li>\n<li>a book can have more than one author, and an author can write more than one book.</li>\n</ul>\n<p>To model this relationship, we need to introduce an <strong>intermediary table</strong> that holds foreign keys that reference the primary key on the related tables. We now have a farms, animals, and farm_animals table.</p>\n<p><a href=\"https://www.notion.so/3269812d7c2a4578b1a9f6bc27e485b1\">Untitled</a></p>\n<p><a href=\"https://www.notion.so/c2642c7f632f489cb1b9639c80b8400d\">Untitled</a></p>\n<p><a href=\"https://www.notion.so/d0b0042c5e104edd9ed55e122af89084\">Untitled</a></p>\n<p>While each foreign key on the intermediary table is not unique, the combinations of keys should be unique.</p>\n<h2><strong>Overview</strong></h2>\n<p>The Knex query builder library also allows us to create multi-table schemas include foreign keys. However, there are a few extra things to keep in mind when designing a multi-table schema, such as using the correct order when creating tables, dropping tables, seeding data, and removing data.</p>\n<p>We have to consider the way that delete and updates through our API will impact related data.</p>\n<h2><strong>Follow Along</strong></h2>\n<h3><strong>Foreign Key Setup</strong></h3>\n<p>In Knex, foreign key restrictions don't automatically work. Whenever using foreign keys in your schema, add the following code to your knexfile. This will prevent users from entering bad data into a foreign key column.</p>\n<h3><strong>Migrations</strong></h3>\n<p>Let's look at how we might track our farms and ranchers using Knex. In our migration file's up function, we would want to create two tables:</p>\n<p>Note that the foreign key can only be created <em>after</em> the reference table.</p>\n<p>In the down function, the opposite is true. We always want to drop a table with a foreign key <em>before</em> dropping the table it references.</p>\n<p>In the case of a many-to-many relationship, the syntax for creating an intermediary table is identical, except for one additional piece. We need a way to make sure our combination of foreign keys is unique.</p>\n<h3><strong>Seeds</strong></h3>\n<p>Order is also a concern when seeding. We want to create seeds in the <strong>same</strong> order we created our tables. In other words, don't create a seed with a foreign key, until that reference record exists.</p>\n<p>In our example, make sure to write the 01-farms seed file and then the 02-ranchers seed file.</p>\n<p>However, we run into a problem with truncating our seeds, because we want to truncate 02-ranchers <em>before</em> 01-farms. A library called knex-cleaner provides an easy solution for us.</p>\n<p>Run knex seed:make 00-cleanup and npm install knex-cleaner. Inside the cleanup seed, use the following code.</p>\n<p>This removes all tables (excluding the two tables that track migrations) in the correct order before any seed files run.</p>\n<h3><strong>Cascading</strong></h3>\n<p>If a user attempt to delete a record that is referenced by another record (such as attempting to delete Morton Ranch when entries in our ranchers table reference that record), by default, the database will block the action. The same thing can happen when updating a record when a foreign key reference.</p>\n<p>If we want that to override this default, we can delete or update with <strong>cascade</strong>. With cascade, deleting a record also deletes all referencing records, we can set that up in our schema.</p>"},{"url":"/blog/","relativePath":"blog/index.md","relativeDir":"blog","base":"index.md","name":"index","frontmatter":{"title":"Blog","subtitle":"Exclusive Blog Content","image":"images/maroon-onion.gif","has_more_link":true,"more_link_text":"Read more","seo":{"title":"Blog","description":"These are blog posts... not nescisarily different from the docs section except these pieces are more subject to my own opinions.","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Blog","keyName":"property"},{"name":"og:description","value":"This is the blog page","keyName":"property"},{"name":"og:image","value":"images/5.jpg","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Blog"},{"name":"twitter:description","value":"This is the blog page"},{"name":"twitter:image","value":"images/5.jpg","relativeUrl":true}]},"template":"blog"},"html":""},{"url":"/blog/my-medium/","relativePath":"blog/my-medium.md","relativeDir":"blog","base":"my-medium.md","name":"my-medium","frontmatter":{"title":"My Medium Articles","date":"2021-05-23","image":"images/medium.png","seo":{"title":"Medium Articles","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit","extra":[{"name":"og:type","value":"article","keyName":"property"},{"name":"og:title","value":"Medium Articles","keyName":"property"},{"name":"og:description","value":"Lorem ipsum dolor sit amet, consectetur adipiscing elit","keyName":"property"},{"name":"og:image","value":"images/medium.png","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Medium Articles"},{"name":"twitter:description","value":"Lorem ipsum dolor sit amet, consectetur adipiscing elit"},{"name":"twitter:image","value":"images/medium.png","relativeUrl":true}]},"template":"post","thumb_image":"images/web-dev-back.jpg"},"html":"<h1>A list of all of my articles to link to future posts</h1>\n<p>You should probably skip this one… seriously it’s just for internal use!</p>\n<hr>\n<h3>A list of all of my articles to link to future posts</h3>\n<p>You should probably skip this one… seriously it’s just for internal use!</p>\n<p><a href=\"https://bryanguner.medium.com/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/\"><strong>Bryan Guner - Medium</strong><br />\n<em>A plethora of front-end code playgrounds have appeared over the years. They offer a convenient way to experiment with…</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/codex/postgresql-cheat-sheet-718b813d3e31\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/codex/postgresql-cheat-sheet-718b813d3e31\"><strong>Postgresql Cheat Sheet</strong><br />\n<em>PostgreSQL commands</em>medium.com</a><a href=\"https://medium.com/codex/postgresql-cheat-sheet-718b813d3e31\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931\"><strong>Everything You Need to Get Started With VSCode + Extensions &#x26; Resources</strong><br />\n<em>Commands:</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/super-simple-intro-to-html-651d695f9bc\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/super-simple-intro-to-html-651d695f9bc\"><strong>Super Simple Intro To HTML</strong><br />\n<em>What is HTML, CSS &#x26; JS and why do we need all three?</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/super-simple-intro-to-html-651d695f9bc\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107\"><strong>Understanding Git (A Beginners Guide Containing Cheat Sheets &#x26; Resources)</strong><br />\n<em>Basic Git Work Flow.</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/git-tricks-57e8d0292285\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/git-tricks-57e8d0292285\"><strong>Git-Tricks</strong><br />\n<em>Refs</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/git-tricks-57e8d0292285\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522\"><strong>A Quick Guide to Big-O Notation, Memoization, Tabulation, and Sorting Algorithms by Example</strong><br />\n<em>Curating Complexity: A Guide to Big-O Notation</em>medium.com</a><a href=\"https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\"><strong>Python Study Guide for a JavaScript Programmer</strong><br />\n<em>A guide to commands in Python from what you know in JavaScript</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/lists-stacks-and-queues-in-javascript-88466fae0fbb\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/lists-stacks-and-queues-in-javascript-88466fae0fbb\"><strong>Lists Stacks and Queue’s In JavaScript</strong><br />\n<em>A simple to follow guide to these fundamental data structures with animated gifs, diagrams, and code examples!</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/lists-stacks-and-queues-in-javascript-88466fae0fbb\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a\"><strong>Web Development Resources Part 3</strong><br />\n<em>I’m the psychological equivalent of a physical hoarder only instead of empty soda cans and dead racoons it’s lists of…</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74\"><strong>My ‘awesome’ list of JavaScript resources</strong><br />\n<em>Everyone’s seen the ‘Awesome’ lists on GitHub… and they are indeed awesome… so today I am going to attempt to curate my…</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263\"><strong>Web Developer Resource List Part 2</strong><br />\n<em>Because I compile these things compulsively anyway…</em>medium.com</a><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/web-development-interview-part-3-826ae81a9107\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/web-development-interview-part-3-826ae81a9107\"><strong>Web Development Interview Part 3💻</strong><br />\n<em>This installment is going to be the least technically demanding thus far however these questions are a more realistic…</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/web-development-interview-part-3-826ae81a9107\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/star-gazers/the-web-developers-technical-interview-e347d7db3822\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/star-gazers/the-web-developers-technical-interview-e347d7db3822\"><strong>The Web Developer’s Technical Interview</strong><br />\n<em>Questions…. Answers… and links to the missing pieces.</em>medium.com</a><a href=\"https://medium.com/star-gazers/the-web-developers-technical-interview-e347d7db3822\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443\"><strong>Front End Interview Questions Part 2</strong><br />\n<em>These will focus more on vocabulary and concepts than the application driven approach in my last post!</em>medium.com</a><a href=\"https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/running-list-of-interesting-articles-tools-and-ideas-as-i-explore-them-b87a2f04d9a6\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/running-list-of-interesting-articles-tools-and-ideas-as-i-explore-them-b87a2f04d9a6\"><strong>Running List Of Interesting Articles, Tools and Ideas… as I Explore Them</strong><br />\n<em>Translation if you read this today (3/21/2021) it will be exceedingly short… because it’s just gonna accumulate entries…</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/running-list-of-interesting-articles-tools-and-ideas-as-i-explore-them-b87a2f04d9a6\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24\"><strong>The Best Cloud-Based Code Playgrounds of 2021 (Part 1)</strong><br />\n<em>A plethora of front-end code playgrounds have appeared over the years. They offer a convenient way to experiment with…</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/codex/fundamental-data-structures-in-javascript-8f9f709c15b4\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/codex/fundamental-data-structures-in-javascript-8f9f709c15b4\"><strong>Fundamental Data Structures In JavaScript</strong><br />\n<em>Data structures in JavaScript</em>medium.com</a><a href=\"https://medium.com/codex/fundamental-data-structures-in-javascript-8f9f709c15b4\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/http-basics-8f02a96a834a\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/http-basics-8f02a96a834a\"><strong>HTTP Basics</strong><br />\n<em>“If you want to build a ship, don’t drum up the men and women to gather wood, divide the work, and give orders…</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/http-basics-8f02a96a834a\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35\"><strong>JavaScript Frameworks &#x26; Libraries</strong><br />\n<em>My Awesome JavaScript List Part 2</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://github.com/bgoonz/Cumulative-Resource-List/tree/master/README-s\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz/Cumulative-Resource-List/tree/master/README-s\"><strong>bgoonz/Cumulative-Resource-List</strong><br />\n<em>List of useful cheatsheets Inspired by @sindresorhus awesome and improved by these amazing contributors . If you see a…</em>github.com</a><a href=\"https://github.com/bgoonz/Cumulative-Resource-List/tree/master/README-s\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f\"><strong>My Favorite VSCode <em>Themes</em></strong><br />\nThemeslevelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1\"><strong>JavaScript Rotate (Array) ProblemWalkthrough</strong><br />\n<em>Explanation for Rotate Right</em>medium.com</a><a href=\"https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/everything-you-need-to-know-about-relational-databases-sql-postgresql-and-sequelize-to-build-8acb68284a98\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/everything-you-need-to-know-about-relational-databases-sql-postgresql-and-sequelize-to-build-8acb68284a98\"><strong>Everything You Need To Know About Relational Databases, SQL, PostgreSQL and Sequelize To Build…</strong><br />\n<em>For Front end developers who like myself struggle with making the jump to fullstack.</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/everything-you-need-to-know-about-relational-databases-sql-postgresql-and-sequelize-to-build-8acb68284a98\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db\"><strong>The Complete JavaScript Reference Guide</strong><br />\n<em>You will want to bookmark this</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/geekculture/modules-in-javascript-a55333e35978\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/geekculture/modules-in-javascript-a55333e35978\"><strong>Modules in Javascript</strong><br />\n<em>Differences between Node.js and browsers</em>medium.com</a><a href=\"https://medium.com/geekculture/modules-in-javascript-a55333e35978\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/an-introduction-to-markdown-bonus-markdown-templates-included-3497ce56de3\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/an-introduction-to-markdown-bonus-markdown-templates-included-3497ce56de3\"><strong>An Introduction to Markdown (Bonus Markdown Templates Included)</strong><br />\n<em>Basic Syntax Guide</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/an-introduction-to-markdown-bonus-markdown-templates-included-3497ce56de3\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/web-dev-resources-ec1975773d7d\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/web-dev-resources-ec1975773d7d\"><strong>Web Dev Resources</strong><br />\n<em>Web Development</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/web-dev-resources-ec1975773d7d\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/codex/regular-expressions-4d8fb3eb146b\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/codex/regular-expressions-4d8fb3eb146b\"><strong>Regular Expressions</strong><br />\n<em>description:</em>medium.com</a><a href=\"https://medium.com/codex/regular-expressions-4d8fb3eb146b\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/a-collection-of-my-most-useful-gist-entries-f4314f3ba3ab\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/a-collection-of-my-most-useful-gist-entries-f4314f3ba3ab\"><strong>A Collection of my most useful Gist Entries</strong><br />\n<em>This list is in no particular order!</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/a-collection-of-my-most-useful-gist-entries-f4314f3ba3ab\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/vscode-extension-readme-compilation-92c60342cc8a\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/vscode-extension-readme-compilation-92c60342cc8a\"><strong>VsCode Extension Readme Compilation</strong><br />\n<em>Markdown PDF</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/vscode-extension-readme-compilation-92c60342cc8a\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/learn-css-so-that-your-site-doesnt-look-like-garbage-938871b4521a\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://javascript.plainenglish.io/learn-css-so-that-your-site-doesnt-look-like-garbage-938871b4521a\"><strong>Learn CSS So That Your Site Doesn’t Look Like Garbage</strong><br />\n<em>CSS Selectors</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/learn-css-so-that-your-site-doesnt-look-like-garbage-938871b4521a\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/postgresql-setup-for-windows-wsl-ubuntu-801672ab7089\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/postgresql-setup-for-windows-wsl-ubuntu-801672ab7089\"><strong>PostgreSQL Setup For Windows &#x26; WSL/Ubuntu</strong><br />\n<em>If you follow this guide to a tee… you will install PostgreSQL itself on your Windows installation. Then, you will…</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/postgresql-setup-for-windows-wsl-ubuntu-801672ab7089\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/emmet-cheat-sheet-24758e628d37\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/emmet-cheat-sheet-24758e628d37\"><strong>Emmet Cheat Sheet</strong><br />\n<em>EMMET</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/emmet-cheat-sheet-24758e628d37\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/express-quick-sheet-8f93762c59ca\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/express-quick-sheet-8f93762c59ca\"><strong>Express Quick Sheet</strong><br />\n<em>Settings</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/express-quick-sheet-8f93762c59ca\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/deploy-react-app-to-heroku-using-postgres-express-70b7ea807986\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/deploy-react-app-to-heroku-using-postgres-express-70b7ea807986\"><strong>Deploy React App To Heroku Using Postgres &#x26; Express</strong><br />\n<em>Heroku is an web application that makes deploying applications easy for a beginner.</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/deploy-react-app-to-heroku-using-postgres-express-70b7ea807986\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/basic-web-development-environment-setup-9f36c3f15afe\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/basic-web-development-environment-setup-9f36c3f15afe\"><strong>Basic Web Development Environment Setup</strong><br />\n<em>Windows Subsystem for Linux (WSL) and Ubuntu</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/basic-web-development-environment-setup-9f36c3f15afe\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/fetch-quick-sheet-8872650742b4\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/fetch-quick-sheet-8872650742b4\"><strong><em>Fetch</em> Quick Sheet</strong><br />\nFetchbryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/fetch-quick-sheet-8872650742b4\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p>By <a href=\"https://medium.com/@bryanguner\" class=\"p-author h-card\">Bryan Guner</a> on <a href=\"https://medium.com/p/1f6f88ebdf5b\">March 22, 2021</a>.</p>\n<p><a href=\"https://medium.com/@bryanguner/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\" class=\"p-canonical\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on May 23, 2021.</p>"},{"url":"/blog/git-gateway/","relativePath":"blog/git-gateway.md","relativeDir":"blog","base":"git-gateway.md","name":"git-gateway","frontmatter":{"title":"Git Bash","subtitle":"understanding git bsh","date":"2021-09-30","thumb_image_alt":"lorem-ipsum","excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"post"},"html":"<h2>Lorem ipsum</h2>\n<p>Lorem ipsum dolor sit amet, <strong>consectetur adipiscing elit</strong>, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n<ul>\n<li>Lorem ipsum</li>\n<li>dolor sit amet</li>\n</ul>"},{"url":"/blog/platform-docs/","relativePath":"blog/platform-docs.md","relativeDir":"blog","base":"platform-docs.md","name":"platform-docs","frontmatter":{"title":"Netlify CMS Intro","date":"2021-05-23","image":"images/curious-europa.gif","seo":{"title":"Platform Docs","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit","extra":[{"name":"og:type","value":"article","keyName":"property"},{"name":"og:title","value":"Platform Docs","keyName":"property"},{"name":"og:description","value":"Lorem ipsum dolor sit amet, consectetur adipiscing elit","keyName":"property"},{"name":"og:image","value":"images/curious-europa.gif","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Platform Docs"},{"name":"twitter:description","value":"Lorem ipsum dolor sit amet, consectetur adipiscing elit"},{"name":"twitter:image","value":"images/curious-europa.gif","relativeUrl":true}]},"template":"post","thumb_image":"images/redu-squarex.jpg"},"html":"<h1>Add to Your Site | Netlify CMS</h1>\n<blockquote>\n<p>Open source content management for your Git workflow</p>\n</blockquote>\n<p>You can adapt Netlify CMS to a wide variety of projects. It works with any content written in markdown, JSON, YAML, or TOML files, stored in a repo on <a href=\"https://github.com/\">GitHub</a>, <a href=\"https://about.gitlab.com/\">GitLab</a>, or <a href=\"https://bitbucket.org/\">Bitbucket</a>. You can also create your own custom backend.</p>\n<p>This tutorial guides you through the steps for adding Netlify CMS to a site that's built with a common <a href=\"https://www.staticgen.com/\">static site generator</a>, like Jekyll, Hugo, Hexo, or Gatsby. Alternatively, you can <a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/start-with-a-template\">start from a template</a> or dive right into <a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/configuration-options\">configuration options</a>.</p>\n<h2><a href=\"#app-file-structure\"></a>App File Structure</h2>\n<p>A static <code>admin</code> folder contains all Netlify CMS files, stored at the root of your published site. Where you store this folder in the source files depends on your static site generator. Here's the static file location for a few of the most popular static site generators:</p>\n<table>\n<thead>\n<tr>\n<th>These generators</th>\n<th>store static files in</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Jekyll, GitBook</td>\n<td><code>/</code> (project root)</td>\n</tr>\n<tr>\n<td>Hugo, Gatsby, Nuxt, Gridsome, Zola, Sapper</td>\n<td><code>/static</code></td>\n</tr>\n<tr>\n<td>Next</td>\n<td><code>/public</code></td>\n</tr>\n<tr>\n<td>Hexo, Middleman, Jigsaw</td>\n<td><code>/source</code></td>\n</tr>\n<tr>\n<td>Spike</td>\n<td><code>/views</code></td>\n</tr>\n<tr>\n<td>Wyam</td>\n<td><code>/input</code></td>\n</tr>\n<tr>\n<td>Pelican</td>\n<td><code>/content</code></td>\n</tr>\n<tr>\n<td>VuePress</td>\n<td><code>/.vuepress/public</code></td>\n</tr>\n<tr>\n<td>Elmstatic</td>\n<td><code>/_site</code></td>\n</tr>\n<tr>\n<td>11ty</td>\n<td><code>/_site</code></td>\n</tr>\n<tr>\n<td>preact-cli</td>\n<td><code>/src/static</code></td>\n</tr>\n</tbody>\n</table>\n<p>If your generator isn't listed here, you can check its documentation, or as a shortcut, look in your project for a <code>css</code> or <code>images</code> folder. The contents of folders like that are usually processed as static files, so it's likely you can store your <code>admin</code> folder next to those. (When you've found the location, feel free to add it to these docs by <a href=\"https://github.com/netlify/netlify-cms/blob/master/CONTRIBUTING.md#pull-requests\">filing a pull request</a>!)</p>\n<p>Inside the <code>admin</code> folder, you'll create two files:</p>\n<pre><code>admin\n ├ index.html\n └ config.yml\n</code></pre>\n<p>The first file, <code>admin/index.html</code>, is the entry point for the Netlify CMS admin interface. This means that users navigate to <code>yoursite.com/admin/</code> to access it. On the code side, it's a basic HTML starter page that loads the Netlify CMS JavaScript file. In this example, we pull the file from a public CDN:</p>\n<pre><code>&#x3C;!doctype html>\n&#x3C;html>\n&#x3C;head>\n  &#x3C;meta charset=\"utf-8\" />\n  &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  &#x3C;title>Content Manager&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n\n  &#x3C;script src=\"https://unpkg.com/netlify-cms@^2.0.0/dist/netlify-cms.js\">&#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>In the code above the <code>script</code> is loaded from the <code>unpkg</code> CDN. Should there be any issue, <code>jsDelivr</code> can be used as an alternative source. Simply set the <code>src</code> to <code>https://cdn.jsdelivr.net/npm/netlify-cms@^2.0.0/dist/netlify-cms.js</code></p>\n<p>The second file, <code>admin/config.yml</code>, is the heart of your Netlify CMS installation, and a bit more complex. The <a href=\"#configuration\">Configuration</a> section covers the details.</p>\n<h3><a href=\"#installing-with-npm\"></a>Installing with npm</h3>\n<p>You can also use Netlify CMS as an npm module. Wherever you import Netlify CMS, it automatically runs, taking over the current page. Make sure the script that imports it only runs on your CMS page. First install the package and save it to your project:</p>\n<pre><code>npm install netlify-cms-app --save\n</code></pre>\n<p>Then import it (assuming your project has tooling for imports):</p>\n<pre><code>import CMS from 'netlify-cms-app'\n\nCMS.init()\n\nCMS.registerPreviewTemplate('my-template', MyTemplate)\n</code></pre>\n<h2><a href=\"#configuration\"></a>Configuration</h2>\n<p>Configuration is different for every site, so we'll break it down into parts. Add all the code snippets in this section to your <code>admin/config.yml</code> file.</p>\n<h3><a href=\"#backend\"></a>Backend</h3>\n<p>We're using <a href=\"https://www.netlify.com/\">Netlify</a> for our hosting and authentication in this tutorial, so backend configuration is fairly straightforward.</p>\n<p>For GitHub and GitLab repositories, you can start your Netlify CMS <code>config.yml</code> file with these lines:</p>\n<pre><code>backend:\n  name: git-gateway\n  branch: master\n</code></pre>\n<p><em>(For Bitbucket repositories, use the <a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/docs/bitbucket-backend\">Bitbucket backend</a> instructions instead.)</em></p>\n<p>The configuration above specifies your backend protocol and your publication branch. Git Gateway is an open source API that acts as a proxy between authenticated users of your site and your site repo. (We'll get to the details of that in the <a href=\"#authentication\">Authentication section</a> below.) If you leave out the <code>branch</code> declaration, it defaults to <code>master</code>.</p>\n<h3><a href=\"#editorial-workflow\"></a>Editorial Workflow</h3>\n<p><strong>Note:</strong> Editorial workflow works with GitHub repositories, and support for GitLab and Bitbucket is <a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/docs/beta-features/#gitlab-and-bitbucket-editorial-workflow-support\">in beta</a>.</p>\n<p>By default, saving a post in the CMS interface pushes a commit directly to the publication branch specified in <code>backend</code>. However, you also have the option to enable the <a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/configuration-options/#publish-mode\">Editorial Workflow</a>, which adds an interface for drafting, reviewing, and approving posts. To do this, add the following line to your Netlify CMS <code>config.yml</code>:</p>\n<pre><code>publish_mode: editorial_workflow\n</code></pre>\n<h3><a href=\"#media-and-public-folders\"></a>Media and Public Folders</h3>\n<p>Netlify CMS allows users to upload images directly within the editor. For this to work, the CMS needs to know where to save them. If you already have an <code>images</code> folder in your project, you could use its path, possibly creating an <code>uploads</code> sub-folder, for example:</p>\n<pre><code>media_folder: \"images/uploads\"\n</code></pre>\n<p>If you're creating a new folder for uploaded media, you'll need to know where your static site generator expects static files. You can refer to the paths outlined above in <a href=\"#app-file-structure\">App File Structure</a>, and put your media folder in the same location where you put the <code>admin</code> folder.</p>\n<p>Note that the<code>media_folder</code> file path is relative to the project root, so the example above would work for Jekyll, GitBook, or any other generator that stores static files at the project root. However, it would not work for Hugo, Hexo, Middleman or others that store static files in a subfolder. Here's an example that could work for a Hugo site:</p>\n<pre><code>media_folder: \"static/images/uploads\"\npublic_folder: \"/images/uploads\"\n</code></pre>\n<p>The configuration above adds a new setting, <code>public_folder</code>. While <code>media_folder</code> specifies where uploaded files are saved in the repo, <code>public_folder</code> indicates where they are found in the published site. Image <code>src</code> attributes use this path, which is relative to the file where it's called. For this reason, we usually start the path at the site root, using the opening <code>/</code>.</p>\n<p><em>If `public</em>folder<code>is not set, Netlify CMS defaults to the same value as</code>media<em>folder<code>, adding an opening</code>/` if one is not included.</em></p>\n<h3><a href=\"#collections\"></a>Collections</h3>\n<p>Collections define the structure for the different content types on your static site. Since every site is different, the <code>collections</code> settings differ greatly from one site to the next.</p>\n<p>Let's say your site has a blog, with the posts stored in <code>_posts/blog</code>, and files saved in a date-title format, like <code>1999-12-31-lets-party.md</code>. Each post begins with settings in yaml-formatted front matter, like so:</p>\n<pre><code>---\nlayout: blog\ntitle: \"Let's Party\"\ndate: 1999-12-31 11:59:59 -0800\nthumbnail: \"/images/prince.jpg\"\nrating: 5\n---\n\nThis is the post body, where I write about our last chance to party before the Y2K bug destroys us all.\n</code></pre>\n<p>Given this example, our <code>collections</code> settings would look like this in your NetlifyCMS <code>config.yml</code> file:</p>\n<pre><code>collections:\n  - name: \"blog\"\n    label: \"Blog\"\n    folder: \"_posts/blog\"\n    create: true\n    slug: \"{{year}}-{{month}}-{{day}}-{{slug}}\"\n    fields:\n      - {label: \"Layout\", name: \"layout\", widget: \"hidden\", default: \"blog\"}\n      - {label: \"Title\", name: \"title\", widget: \"string\"}\n      - {label: \"Publish Date\", name: \"date\", widget: \"datetime\"}\n      - {label: \"Featured Image\", name: \"thumbnail\", widget: \"image\"}\n      - {label: \"Rating (scale of 1-5)\", name: \"rating\", widget: \"number\"}\n      - {label: \"Body\", name: \"body\", widget: \"markdown\"}\n</code></pre>\n<p>Let's break that down:</p>\n<table><tbody><tr><td><code>name</code></td><td>Post type identifier, used in routes. Must be unique.</td></tr><tr><td><code>label</code></td><td>What the admin UI calls the post type.</td></tr><tr><td><code>folder</code></td><td>Where files of this type are stored, relative to the repo root.</td></tr><tr><td><code>create</code></td><td>Set to <code>true</code> to allow users to create new files in this collection.</td></tr><tr><td><code>slug</code></td><td>Template for filenames. <code>{{year}}</code>, <code>{{month}}</code>, and <code>{{day}}</code> pulls from the post's <code>date</code> field or save date. <code>{{slug}}</code> is a url-safe version of the post's <code>title</code>. Default is simply <code>{{slug}}</code>.</td></tr><tr><td><code>fields</code></td><td>Fields listed here are shown as fields in the content editor, then saved as front matter at the beginning of the document (except for <code>body</code>, which follows the front matter). Each field contains the following properties:<ul><li><code>label</code>: Field label in the editor UI.</li><li><code>name</code>: Field name in the document front matter.</li><li><code>widget</code>: Determines UI style and value data type (details below).</li><li><code>default</code> (optional): Sets a default value for the field.</li></ul></td></tr></tbody></table>\n<p>As described above, the <code>widget</code> property specifies a built-in or custom UI widget for a given field. When a content editor enters a value into a widget, that value is saved in the document front matter as the value for the <code>name</code> specified for that field. A full listing of available widgets can be found in the <a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/widgets\">Widgets doc</a>.</p>\n<p>Based on this example, you can go through the post types in your site and add the appropriate settings to your Netlify CMS <code>config.yml</code> file. Each post type should be listed as a separate node under the <code>collections</code> field. See the <a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/configuration-options/#collections\">Collections reference doc</a> for more configuration options.</p>\n<h3><a href=\"#filter\"></a>Filter</h3>\n<p>The entries for any collection can be filtered based on the value of a single field. The example collection below only shows post entries with the value <code>en</code> in the <code>language</code> field.</p>\n<pre><code>collections:\n  - name: \"posts\"\n    label: \"Post\"\n    folder: \"_posts\"\n    filter:\n      field: language\n      value: en\n    fields:\n      - {label: \"Language\", name: \"language\"}\n</code></pre>\n<h2><a href=\"#authentication\"></a>Authentication</h2>\n<p>Now that you have your Netlify CMS files in place and configured, all that's left is to enable authentication. We're using the <a href=\"https://www.netlify.com/\">Netlify</a> platform here because it's one of the quickest ways to get started, but you can learn about other authentication options in the <a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/docs/backends-overview\">Backends</a> doc.</p>\n<h3><a href=\"#setup-on-netlify\"></a>Setup on Netlify</h3>\n<p>Netlify offers a built-in authentication service called Identity. In order to use it, connect your site repo with Netlify. Netlify has published a general <a href=\"https://www.netlify.com/blog/2016/10/27/a-step-by-step-guide-deploying-a-static-site-or-single-page-app/\">Step-by-Step Guide</a> for this, along with detailed guides for many popular static site generators, including <a href=\"https://www.netlify.com/blog/2015/10/28/a-step-by-step-guide-jekyll-3.0-on-netlify/\">Jekyll</a>, <a href=\"https://www.netlify.com/blog/2016/09/21/a-step-by-step-guide-victor-hugo-on-netlify/\">Hugo</a>, <a href=\"https://www.netlify.com/blog/2015/10/26/a-step-by-step-guide-hexo-on-netlify/\">Hexo</a>, <a href=\"https://www.netlify.com/blog/2015/10/01/a-step-by-step-guide-middleman-on-netlify/\">Middleman</a>, <a href=\"https://www.netlify.com/blog/2016/02/24/a-step-by-step-guide-gatsby-on-netlify/\">Gatsby</a>, and more.</p>\n<h3><a href=\"#enable-identity-and-git-gateway\"></a>Enable Identity and Git Gateway</h3>\n<p>Netlify's Identity and Git Gateway services allow you to manage CMS admin users for your site without requiring them to have an account with your Git host or commit access on your repo. From your site dashboard on Netlify:</p>\n<ol>\n<li>Go to <strong>Settings > Identity</strong>, and select <strong>Enable Identity service</strong>.</li>\n<li>Under <strong>Registration preferences</strong>, select <strong>Open</strong> or <strong>Invite only</strong>. In most cases, you want only invited users to access your CMS, but if you're just experimenting, you can leave it open for convenience.</li>\n<li>If you'd like to allow one-click login with services like Google and GitHub, check the boxes next to the services you'd like to use, under <strong>External providers</strong>.</li>\n<li>Scroll down to <strong>Services > Git Gateway</strong>, and click <strong>Enable Git Gateway</strong>. This authenticates with your Git host and generates an API access token. In this case, we're leaving the <strong>Roles</strong> field blank, which means any logged in user may access the CMS. For information on changing this, check the <a href=\"https://www.netlify.com/docs/identity/\">Netlify Identity documentation</a>.</li>\n</ol>\n<h3><a href=\"#add-the-netlify-identity-widget\"></a>Add the Netlify Identity Widget</h3>\n<p>With the backend set to handle authentication, now you need a frontend interface to connect to it. The open source Netlify Identity Widget is a drop-in widget made for just this purpose. To include the widget in your site, add the following script tag in two places:</p>\n<pre><code>&#x3C;script src=\"https://identity.netlify.com/v1/netlify-identity-widget.js\">&#x3C;/script>\n</code></pre>\n<p>Add this to the <code>&#x3C;head></code> of your CMS index page at <code>/admin/index.html</code>, as well as the <code>&#x3C;head></code> of your site's main index page. Depending on how your site generator is set up, this may mean you need to add it to the default template, or to a \"partial\" or \"include\" template. If you can find where the site stylesheet is linked, that's probably the right place. Alternatively, you can include the script in your site using Netlify's <a href=\"https://www.netlify.com/docs/inject-analytics-snippets/\">Script Injection</a> feature.</p>\n<p>When a user logs in with the Netlify Identity widget, an access token directs to the site homepage. In order to complete the login and get back to the CMS, redirect the user back to the <code>/admin/</code> path. To do this, add the following script before the closing <code>body</code> tag of your site's main index page:</p>\n<pre><code>&#x3C;script>\n  if (window.netlifyIdentity) {\n    window.netlifyIdentity.on(\"init\", user => {\n      if (!user) {\n        window.netlifyIdentity.on(\"login\", () => {\n          document.location.href = \"/admin/\";\n        });\n      }\n    });\n  }\n&#x3C;/script>\n</code></pre>\n<p>Note: This example script requires modern JavaScript and does not work on IE11. For legacy browser support, use function expressions (<code>function () {}</code>) in place of the arrow functions (<code>() => {}</code>), or use a transpiler such as <a href=\"https://babeljs.io/\">Babel</a>.</p>\n<h2><a href=\"#accessing-the-cms\"></a>Accessing the CMS</h2>\n<p>Your site CMS is now fully configured and ready for login!</p>\n<p>If you set your registration preference to \"Invite only,\" invite yourself (and anyone else you choose) as a site user. To do this, select the <strong>Identity</strong> tab from your site dashboard, and then select the <strong>Invite users</strong> button. Invited users receive an email invitation with a confirmation link. Clicking the link will take you to your site with a login prompt.</p>\n<p>If you left your site registration open, or for return visits after confirming an email invitation, access your site's CMS at <code>yoursite.com/admin/</code>.</p>\n<p><strong>Note:</strong> No matter where you access Netlify CMS — whether running locally, in a staging environment, or in your published site — it always fetches and commits files in your hosted repository (for example, on GitHub), on the branch you configured in your Netlify CMS config.yml file. This means that content fetched in the admin UI matches the content in the repository, which may be different from your locally running site. It also means that content saved using the admin UI saves directly to the hosted repository, even if you're running the UI locally or in staging.</p>\n<p>Happy posting!</p>\n<p><a href=\"https://www.netlifycms.org/docs/add-to-your-site/\">Source</a></p>"},{"url":"/blog/data-structures/","relativePath":"blog/data-structures.md","relativeDir":"blog","base":"data-structures.md","name":"data-structures","frontmatter":{"title":"Leetcode (Data Structures)","subtitle":"practice","date":"2021-09-14","thumb_image_alt":"Big O Cheat Sheet","excerpt":"A guide to computational complexity","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"post","image":"images/ds.PNG","thumb_image":"images/bigo-446eaa35.png"},"html":"<h1>Leetcode</h1>\n<h2>Data Structures &#x26; Algorithms</h2>\n<p><a href=\"https://github.com/bgoonz/Data-Structures-Algos-Codebase\">DS Algo Codebase</a></p>\n<p><a href=\"#115-distinct-subsequenceshttpsleetcodecomproblemsdistinct-subsequencesdescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/distinct-subsequences/description/\">115. Distinct Subsequences</a></h2>\n<h3>Problem:</h3>\n<p>Given a string <strong>S</strong> and a string <strong>T</strong>, count the number of distinct subsequences of <strong>S</strong> which equals <strong>T</strong>.</p>\n<p>A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, <code>\"ACE\"</code> is a subsequence of <code>\"ABCDE\"</code> while <code>\"AEC\"</code> is not).</p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: S = \"rabbbit\", T = \"rabbit\"\nOutput: 3\nExplanation:\n\nAs shown below, there are 3 ways you can generate \"rabbit\" from S.\n(The caret symbol ^ means the chosen letters)\n\nrabbbit\n^^^^ ^^\nrabbbit\n^^ ^^^^\nrabbbit\n^^^ ^^^\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: S = \"babgbag\", T = \"bag\"\nOutput: 5\nExplanation:\n\nAs shown below, there are 5 ways you can generate \"bag\" from S.\n(The caret symbol ^ means the chosen letters)\n\nbabgbag\n^^ ^\nbabgbag\n^^    ^\nbabgbag\n^    ^^\nbabgbag\n  ^  ^^\nbabgbag\n    ^^^\n</code></pre>\n<h3>Solution:</h3>\n<p>Define <code>f(i, j)</code> to be the number of ways that generate <code>T[0...j)</code> from <code>S[0...i)</code>.</p>\n<p>For <code>f(i, j)</code> you can always skip <code>S[i-1]</code>, but can only take it when <code>S[i-1] === T[j-1]</code>.</p>\n<pre><code class=\"language-javascript\">f(0, j) = 0, j > 0 // nothing to delete\nf(i, 0) = 1 // delete all\nf(i, j) = f(i-1, j) + (S[i-1] === T[j-1] ? f(i-1, j-1) : 0)\n</code></pre>\n<p>Dynamic array can be used.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {string} s\n * @param {string} t\n * @return {number}\n */\nlet numDistinct = function (s, t) {\n    const lens = s.length;\n    const lent = t.length;\n    const dp = new Array(lent + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i &#x3C;= lens; i++) {\n        for (let j = lent; j >= 1; j--) {\n            if (s[i - 1] === t[j - 1]) {\n                dp[j] += dp[j - 1];\n            }\n        }\n    }\n    return dp[lent];\n};\n</code></pre>\n<hr>\n<p>Difficulty: Medium\nRelated Topics:\n\"Tree\": <a href=\"https://leetcode.com/tag/tree\">https://leetcode.com/tag/tree</a>\n\"Depth-first Search\": <a href=\"https://leetcode.com/tag/depth-first-search\">https://leetcode.com/tag/depth-first-search</a>\nSimilar Questions:\n\"Populating Next Right Pointers in Each Node II\": <a href=\"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii\">https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii</a>\n\"Binary Tree Right Side View\": <a href=\"https://leetcode.com/problems/binary-tree-right-side-view\">https://leetcode.com/problems/binary-tree-right-side-view</a></p>\n<hr>\n<p><a href=\"#116-populating-next-right-pointers-in-each-nodehttpsleetcodecomproblemspopulating-next-right-pointers-in-each-nodedescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/populating-next-right-pointers-in-each-node/description/\">116. Populating Next Right Pointers in Each Node</a></h2>\n<h3>Problem:</h3>\n<p>Given a binary tree</p>\n<pre><code>struct TreeLinkNode {\n  TreeLinkNode *left;\n  TreeLinkNode *right;\n  TreeLinkNode *next;\n}\n</code></pre>\n<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>\n<p>Initially, all next pointers are set to <code>NULL</code>.</p>\n<p><strong>Note:</strong></p>\n<ul>\n<li>You may only use constant extra space.</li>\n<li>Recursive approach is fine, implicit stack space does not count as extra space for this problem.</li>\n<li>You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).</li>\n</ul>\n<p><strong>Example:</strong></p>\n<p>Given the following perfect binary tree,</p>\n<pre><code>     1\n   /  \\\n  2    3\n / \\  / \\\n4  5  6  7\n</code></pre>\n<p>After calling your function, the tree should look like:</p>\n<pre><code>     1 -> NULL\n   /  \\\n  2 -> 3 -> NULL\n / \\  / \\\n4->5->6->7 -> NULL\n</code></pre>\n<h3>Solution:</h3>\n<h4>ONE</h4>\n<p>Recursive.</p>\n<p>For every <code>node</code>:</p>\n<ul>\n<li>Left child: points to <code>node.right</code>.</li>\n<li>Right child: points to <code>node.next.left</code> if <code>node.next</code> exists.</li>\n</ul>\n<pre><code class=\"language-javascript\">/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n    if (root.left !== null) {\n        root.left.next = root.right;\n        connect(root.left);\n    }\n    if (root.right !== null) {\n        if (root.next !== null) {\n            root.right.next = root.next.left;\n        }\n        connect(root.right);\n    }\n};\n</code></pre>\n<h4>TWO</h4>\n<p>Level order traversal.</p>\n<pre><code class=\"language-javascript\">/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n\n    const queue = [NaN, root];\n    while (queue.length > 1) {\n        const node = queue.shift();\n        if (node !== node) {\n            for (let i = 0; i &#x3C; queue.length; i++) {\n                queue[i].next = queue[i + 1] || null;\n            }\n            queue.push(NaN);\n        } else {\n            if (node.left !== null) {\n                queue.push(node.left);\n            }\n            if (node.right !== null) {\n                queue.push(node.right);\n            }\n        }\n    }\n};\n</code></pre>\n<hr>\n<p>Difficulty: Medium\nRelated Topics:\n\"Tree\": <a href=\"https://leetcode.com/tag/tree\">https://leetcode.com/tag/tree</a>\n\"Depth-first Search\": <a href=\"https://leetcode.com/tag/depth-first-search\">https://leetcode.com/tag/depth-first-search</a>\nSimilar Questions:\n\"Populating Next Right Pointers in Each Node\": <a href=\"https://leetcode.com/problems/populating-next-right-pointers-in-each-node\">https://leetcode.com/problems/populating-next-right-pointers-in-each-node</a></p>\n<hr>\n<p><a href=\"#117-populating-next-right-pointers-in-each-node-iihttpsleetcodecomproblemspopulating-next-right-pointers-in-each-node-iidescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/description/\">117. Populating Next Right Pointers in Each Node II</a></h2>\n<h3>Problem:</h3>\n<p>Given a binary tree</p>\n<pre><code>struct TreeLinkNode {\n  TreeLinkNode *left;\n  TreeLinkNode *right;\n  TreeLinkNode *next;\n}\n</code></pre>\n<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>\n<p>Initially, all next pointers are set to <code>NULL</code>.</p>\n<p><strong>Note:</strong></p>\n<ul>\n<li>You may only use constant extra space.</li>\n<li>Recursive approach is fine, implicit stack space does not count as extra space for this problem.</li>\n</ul>\n<p><strong>Example:</strong></p>\n<p>Given the following binary tree,</p>\n<pre><code>     1\n   /  \\\n  2    3\n / \\    \\\n4   5    7\n</code></pre>\n<p>After calling your function, the tree should look like:</p>\n<pre><code>     1 -> NULL\n   /  \\\n  2 -> 3 -> NULL\n / \\    \\\n4-> 5 -> 7 -> NULL\n</code></pre>\n<h3>Solution:</h3>\n<h4>ONE</h4>\n<p>Recursive. See <a href=\"./116.%20Populating%20Next%20Right%20Pointers%20in%20Each%20Node.md\">116. Populating Next Right Pointers in Each Node</a>.</p>\n<p>The tree may not be perfect now. So keep finding <code>next</code> until there is a node with children, or <code>null</code>.</p>\n<p>This also means post-order traversal is required.</p>\n<pre><code class=\"language-javascript\">/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n    let next = null;\n    for (let node = root.next; node !== null; node = node.next) {\n        if (node.left !== null) {\n            next = node.left;\n            break;\n        }\n        if (node.right !== null) {\n            next = node.right;\n            break;\n        }\n    }\n    if (root.right !== null) {\n        root.right.next = next;\n    }\n    if (root.left !== null) {\n        root.left.next = root.right || next;\n    }\n    connect(root.right);\n    connect(root.left);\n};\n</code></pre>\n<h4>TWO</h4>\n<p>Level order traversal. Exact same as <a href=\"./116.%20Populating%20Next%20Right%20Pointers%20in%20Each%20Node.md\">116. Populating Next Right Pointers in Each Node</a>.</p>\n<pre><code class=\"language-javascript\">/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n\n    const queue = [NaN, root];\n    while (queue.length > 1) {\n        const node = queue.shift();\n        if (node !== node) {\n            for (let i = 0; i &#x3C; queue.length; i++) {\n                queue[i].next = queue[i + 1] || null;\n            }\n            queue.push(NaN);\n        } else {\n            if (node.left !== null) {\n                queue.push(node.left);\n            }\n            if (node.right !== null) {\n                queue.push(node.right);\n            }\n        }\n    }\n};\n</code></pre>\n<hr>\n<p>Difficulty: Easy\nRelated Topics:\n\"Array\": <a href=\"https://leetcode.com/tag/array\">https://leetcode.com/tag/array</a>\nSimilar Questions:\n\"Pascal's Triangle II\": <a href=\"https://leetcode.com/problems/pascals-triangle-ii\">https://leetcode.com/problems/pascals-triangle-ii</a></p>\n<hr>\n<p><a href=\"#118-pascals-trianglehttpsleetcodecomproblemspascals-triangledescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/pascals-triangle/description/\">118. Pascal's Triangle</a></h2>\n<h3>Problem:</h3>\n<p>Given a non-negative integer <em>numRows</em>, generate the first <em>numRows</em> of Pascal's triangle.</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" alt=\"PascalTriangleAnimated2.gif\"></p>\n<p>In Pascal's triangle, each number is the sum of the two numbers directly above it.</p>\n<p><strong>Example:</strong></p>\n<pre><code>Input: 5\nOutput:\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n</code></pre>\n<h3>Solution:</h3>\n<p>Dynamic Programming 101.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {number} numRows\n * @return {number[][]}\n */\nlet generate = function (numRows) {\n    if (numRows &#x3C;= 0) {\n        return [];\n    }\n\n    const result = [[1]];\n    for (let i = 1; i &#x3C; numRows; i++) {\n        const lastRow = result[i - 1];\n        const row = [1];\n        for (let j = 1; j &#x3C; i; j++) {\n            row[j] = lastRow[j] + lastRow[j - 1];\n        }\n        row.push(1);\n        result.push(row);\n    }\n\n    return result;\n};\n</code></pre>\n<hr>\n<p>Difficulty: Easy\nRelated Topics:\n\"Array\": <a href=\"https://leetcode.com/tag/array\">https://leetcode.com/tag/array</a>\nSimilar Questions:\n\"Pascal's Triangle\": <a href=\"https://leetcode.com/problems/pascals-triangle\">https://leetcode.com/problems/pascals-triangle</a></p>\n<hr>\n<p><a href=\"#119-pascals-triangle-iihttpsleetcodecomproblemspascals-triangle-iidescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/pascals-triangle-ii/description/\">119. Pascal's Triangle II</a></h2>\n<h3>Problem:</h3>\n<p>Given a non-negative index <em>k</em> where <em>k</em> ≤ 33, return the <em>k</em>th index row of the Pascal's triangle.</p>\n<p>Note that the row index starts from 0.</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" alt=\"PascalTriangleAnimated2.gif\"></p>\n<p>In Pascal's triangle, each number is the sum of the two numbers directly above it.</p>\n<p><strong>Example:</strong></p>\n<pre><code>Input: 3\nOutput: [1,3,3,1]\n</code></pre>\n<p><strong>Follow up:</strong></p>\n<p>Could you optimize your algorithm to use only <em>O</em>(<em>k</em>) extra space?</p>\n<h3>Solution:</h3>\n<p>Dynamic Programming 101 with dynamic array.</p>\n<p>State <code>(i, j)</code> depends on <code>(i-1, j)</code> and <code>(i-1, j-1)</code>. So to access <code>(i-1, j-1)</code> iteration must be from right to left.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {number} rowIndex\n * @return {number[]}\n */\nlet getRow = function (rowIndex) {\n    if (rowIndex &#x3C; 0) {\n        return [];\n    }\n\n    const row = [1];\n    for (let i = 1; i &#x3C;= rowIndex; i++) {\n        for (let j = i - 1; j > 0; j--) {\n            row[j] += row[j - 1];\n        }\n        row.push(1);\n    }\n\n    return row;\n};\n</code></pre>\n<hr>\n<p>Difficulty: Medium\nRelated Topics:\n\"Array\": <a href=\"https://leetcode.com/tag/array\">https://leetcode.com/tag/array</a>\n\"Dynamic Programming\": <a href=\"https://leetcode.com/tag/dynamic-programming\">https://leetcode.com/tag/dynamic-programming</a></p>\n<hr>\n<p><a href=\"#120-trianglehttpsleetcodecomproblemstriangledescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/triangle/description/\">120. Triangle</a></h2>\n<h3>Problem:</h3>\n<p>Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.</p>\n<p>For example, given the following triangle</p>\n<pre><code>[\n     [2],\n    [3,4],\n   [6,5,7],\n  [4,1,8,3]\n]\n</code></pre>\n<p>The minimum path sum from top to bottom is <code>11</code> (i.e., <strong>2</strong> + <strong>3</strong> + <strong>5</strong> + <strong>1</strong> = 11).</p>\n<p><strong>Note:</strong></p>\n<p>Bonus point if you are able to do this using only <em>O</em>(<em>n</em>) extra space, where <em>n</em> is the total number of rows in the triangle.</p>\n<h3>Solution:</h3>\n<p>Define <code>f(i, j)</code> to be the minimum path sum from <code>triangle[0][0]</code> to <code>triangle[i][j]</code>.</p>\n<pre><code>f(i, 0) = f(i-1, j) + triangle[i][0]\nf(i, j) = min( f(i-1, j-1), f(i-1, j) ) + triangle[i][j], 0 &#x3C; j &#x3C; i\nf(i, i) = f(i-1, i-1) + triangle[i][i], i > 0\n</code></pre>\n<p>Dynamic array can be used.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {number[][]} triangle\n * @return {number}\n */\nlet minimumTotal = function (triangle) {\n    if (triangle.length &#x3C;= 0) {\n        return 0;\n    }\n\n    const dp = [triangle[0][0]];\n    for (let i = 1; i &#x3C; triangle.length; i++) {\n        dp[i] = dp[i - 1] + triangle[i][i];\n        for (let j = i - 1; j >= 1; j--) {\n            dp[j] = Math.min(dp[j], dp[j - 1]) + triangle[i][j];\n        }\n        dp[0] += triangle[i][0];\n    }\n    return Math.min(...dp);\n};\n</code></pre>\n<hr>\n<p>Difficulty: Easy\nRelated Topics:\n\"Array\": <a href=\"https://leetcode.com/tag/array\">https://leetcode.com/tag/array</a>\n\"Dynamic Programming\": <a href=\"https://leetcode.com/tag/dynamic-programming\">https://leetcode.com/tag/dynamic-programming</a>\nSimilar Questions:\n\"Maximum Subarray\": <a href=\"https://leetcode.com/problems/maximum-subarray\">https://leetcode.com/problems/maximum-subarray</a>\n\"Best Time to Buy and Sell Stock II\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii</a>\n\"Best Time to Buy and Sell Stock III\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii</a>\n\"Best Time to Buy and Sell Stock IV\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv</a>\n\"Best Time to Buy and Sell Stock with Cooldown\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown</a></p>\n<hr>\n<p><a href=\"#121-best-time-to-buy-and-sell-stockhttpsleetcodecomproblemsbest-time-to-buy-and-sell-stockdescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/\">121. Best Time to Buy and Sell Stock</a></h2>\n<h3>Problem:</h3>\n<p>Say you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p>\n<p>If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>\n<p>Note that you cannot sell a stock before you buy one.</p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n             Not 7-1 = 6, as selling price needs to be larger than buying price.\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n</code></pre>\n<h3>Solution:</h3>\n<p>Only care about positive profits. Take the frist item as base and scan to the right. If we encounter an item <code>j</code> whose price <code>price[j]</code> is lower than the base (which means if we sell now the profit would be negative), we sell <code>j-1</code> instead and make <code>j</code> the new base.</p>\n<p>Because <code>price[j]</code> is lower that the base, using <code>j</code> as new base is guaranteed to gain more profit comparing to the old one.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {number[]} prices\n * @return {number}\n */\nlet maxProfit = function (prices) {\n    let max = 0;\n    let base = prices[0];\n    for (let i = 1; i &#x3C; prices.length; i++) {\n        const profit = prices[i] - base;\n        if (profit > max) {\n            max = profit;\n        } else if (profit &#x3C; 0) {\n            base = prices[i];\n        }\n    }\n    return max;\n};\n</code></pre>\n<hr>\n<p>Difficulty: Easy\nRelated Topics:\n\"Array\": <a href=\"https://leetcode.com/tag/array\">https://leetcode.com/tag/array</a>\n\"Greedy\": <a href=\"https://leetcode.com/tag/greedy\">https://leetcode.com/tag/greedy</a>\nSimilar Questions:\n\"Best Time to Buy and Sell Stock\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock</a>\n\"Best Time to Buy and Sell Stock III\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii</a>\n\"Best Time to Buy and Sell Stock IV\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv</a>\n\"Best Time to Buy and Sell Stock with Cooldown\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown</a>\n\"Best Time to Buy and Sell Stock with Transaction Fee\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee</a></p>\n<hr>\n<p><a href=\"#122-best-time-to-buy-and-sell-stock-iihttpsleetcodecomproblemsbest-time-to-buy-and-sell-stock-iidescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/\">122. Best Time to Buy and Sell Stock II</a></h2>\n<h3>Problem:</h3>\n<p>Say you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p>\n<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).</p>\n<p><strong>Note:</strong> You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\n             engaging multiple transactions at the same time. You must sell before buying again.\n</code></pre>\n<p><strong>Example 3:</strong></p>\n<pre><code>Input: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n</code></pre>\n<h3>Solution:</h3>\n<p>Sell immediately after the price drops. Or in other perspective, it is the sum of all the incremental pairs (buy in then immediately sell out).</p>\n<pre><code class=\"language-javascript\">/**\n * @param {number[]} prices\n * @return {number}\n */\nlet maxProfit = function (prices) {\n    let max = 0;\n    for (let i = 1; i &#x3C; prices.length; i++) {\n        if (prices[i] > prices[i - 1]) {\n            max += prices[i] - prices[i - 1];\n        }\n    }\n    return max;\n};\n</code></pre>\n<hr>\n<p>Difficulty: Hard\nRelated Topics:\n\"Array\": <a href=\"https://leetcode.com/tag/array\">https://leetcode.com/tag/array</a>\n\"Dynamic Programming\": <a href=\"https://leetcode.com/tag/dynamic-programming\">https://leetcode.com/tag/dynamic-programming</a>\nSimilar Questions:\n\"Best Time to Buy and Sell Stock\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock</a>\n\"Best Time to Buy and Sell Stock II\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii</a>\n\"Best Time to Buy and Sell Stock IV\": <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv</a>\n\"Maximum Sum of 3 Non-Overlapping Subarrays\": <a href=\"https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays\">https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays</a></p>\n<hr>\n<p><a href=\"#123-best-time-to-buy-and-sell-stock-iiihttpsleetcodecomproblemsbest-time-to-buy-and-sell-stock-iiidescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/description/\">123. Best Time to Buy and Sell Stock III</a></h2>\n<h3>Problem:</h3>\n<p>Say you have an array for which the <em>i</em>th element is the price of a given stock on day <em>i</em>.</p>\n<p>Design an algorithm to find the maximum profit. You may complete at most <em>two</em> transactions.</p>\n<p>**Note:**You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: [3,3,5,0,0,3,1,4]\nOutput: 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n             Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\n             engaging multiple transactions at the same time. You must sell before buying again.\n</code></pre>\n<p><strong>Example 3:</strong></p>\n<pre><code>Input: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n</code></pre>\n<h3>Solution:</h3>\n<p>Multiple transactions may not be engaged in at the same time. That means if we view the days that involed in the same transaction as a group, there won't be any intersection. We may complete at most <em>two</em> transactions, so divide the days into two groups, <code>[0...k]</code> and <code>[k...n-1]</code>. Notice <code>k</code> exists in both groups because technically we can sell out then immediately buy in at the same day.</p>\n<p>Define <code>p1(i)</code> to be the max profit of day <code>[0...i]</code>. This is just like the problem of <a href=\"./121.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock.md\">121. Best Time to Buy and Sell Stock</a>.</p>\n<pre><code>p1(0) = 0\np1(i) = max( p1(i-1), prices[i] - min(prices[0], ..., prices[i-1]) ), 0 &#x3C; i &#x3C;= n-1\n</code></pre>\n<p>Define <code>p2(i)</code> to be the max profit of day <code>[i...n-1]</code>. This is the mirror of <code>p1</code>.</p>\n<pre><code>p2(n-1) = 0\np2(i) = max( p2(i+1), max(prices[i], ..., prices[n-1]) - prices[i] ), n-1 > i >= 0\n</code></pre>\n<p>Define <code>f(k)</code> to be <code>p1(k) + p2(k)</code>. We need to get <code>max( f(0), ..., f(n-1) )</code>.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {number[]} prices\n * @return {number}\n */\nlet maxProfit = function (prices) {\n    const len = prices.length;\n    if (len &#x3C;= 1) {\n        return 0;\n    }\n\n    const dp = [0];\n\n    let min = prices[0];\n    for (let i = 1; i &#x3C; len; i++) {\n        dp[i] = Math.max(dp[i - 1], prices[i] - min);\n        min = Math.min(prices[i], min);\n    }\n\n    let p2 = 0;\n    let max = prices[len - 1];\n    for (let i = len - 2; i >= 0; i--) {\n        max = Math.max(prices[i], max);\n        p2 = Math.max(p2, max - prices[i]);\n        dp[i] += p2;\n    }\n\n    return Math.max(...dp);\n};\n</code></pre>\n<hr>\n<p>Difficulty: Hard\nRelated Topics:\n\"Tree\": <a href=\"https://leetcode.com/tag/tree\">https://leetcode.com/tag/tree</a>\n\"Depth-first Search\": <a href=\"https://leetcode.com/tag/depth-first-search\">https://leetcode.com/tag/depth-first-search</a>\nSimilar Questions:\n\"Path Sum\": <a href=\"https://leetcode.com/problems/path-sum\">https://leetcode.com/problems/path-sum</a>\n\"Sum Root to Leaf Numbers\": <a href=\"https://leetcode.com/problems/sum-root-to-leaf-numbers\">https://leetcode.com/problems/sum-root-to-leaf-numbers</a>\n\"Path Sum IV\": <a href=\"https://leetcode.com/problems/path-sum-iv\">https://leetcode.com/problems/path-sum-iv</a>\n\"Longest Univalue Path\": <a href=\"https://leetcode.com/problems/longest-univalue-path\">https://leetcode.com/problems/longest-univalue-path</a></p>\n<hr>\n<p><a href=\"#124-binary-tree-maximum-path-sumhttpsleetcodecomproblemsbinary-tree-maximum-path-sumdescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/binary-tree-maximum-path-sum/description/\">124. Binary Tree Maximum Path Sum</a></h2>\n<h3>Problem:</h3>\n<p>Given a <strong>non-empty</strong> binary tree, find the maximum path sum.</p>\n<p>For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain <strong>at least one node</strong> and does not need to go through the root.</p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: [1,2,3]\n\n       1\n      / \\\n     2   3\n\nOutput: 6\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: [-10,9,20,null,null,15,7]\n\n   -10\n   / \\\n  9  20\n    /  \\\n   15   7\n\nOutput: 42\n</code></pre>\n<h3>Solution:</h3>\n<p>For every <code>node</code>, there are six possible ways to get the max path sum:</p>\n<ul>\n<li>\n<p>With <code>node.val</code></p>\n<ol>\n<li><code>node.val</code> plus the max sum of a path that ends with <code>node.left</code>.</li>\n<li><code>node.val</code> plus the max sum of a path that starts with <code>node.right</code>.</li>\n<li><code>node.val</code> plus the max sum of both paths.</li>\n<li>Just <code>node.val</code> (the max sum of both paths are negative).</li>\n</ol>\n</li>\n<li>\n<p>Without<code>node.val</code> (disconnected)</p>\n<ol>\n<li>The max-sum path is somewhere under the <code>node.left</code> subtree.</li>\n<li>The max-sum path is somewhere under the <code>node.right</code> subtree.</li>\n</ol>\n</li>\n</ul>\n<p>There are two ways to implement this.</p>\n<h4>ONE</h4>\n<p>Define a function that returns two values. The max sum of a path that may or may not end with <code>root</code> node, and the max sum of the path that ends with <code>root</code> node.</p>\n<pre><code class=\"language-javascript\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nlet maxPathSum = function (root) {\n    return Math.max(..._maxPathSum(root));\n};\n\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nfunction _maxPathSum(root) {\n    if (!root) {\n        return [-Infinity, -Infinity];\n    }\n\n    const left = _maxPathSum(root.left);\n    const right = _maxPathSum(root.right);\n    return [Math.max(left[0], right[0], root.val + Math.max(0, left[1], right[1], left[1] + right[1])), Math.max(left[1], right[1], 0) + root.val];\n}\n</code></pre>\n<h4>TWO</h4>\n<p>Just return the later (max sum of a path that ends with <code>root</code>). Maintain a global variable to store the disconnected max sum.</p>\n<pre><code class=\"language-javascript\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nlet maxPathSum = function (root) {\n    const global = { max: -Infinity };\n    _maxPathSum(root, global);\n    return global.max;\n};\n\n/**\n * @param {TreeNode} root\n * @param {object} global\n * @param {number} global.max\n * @return {number[]}\n */\nfunction _maxPathSum(root, global) {\n    if (!root) {\n        return -Infinity;\n    }\n\n    const left = _maxPathSum(root.left, global);\n    const right = _maxPathSum(root.right, global);\n    const localMax = Math.max(left, right, 0) + root.val;\n    global.max = Math.max(global.max, localMax, root.val + left + right);\n    return localMax;\n}\n</code></pre>\n<hr>\n<p>Difficulty: Easy\nRelated Topics:\n\"Two Pointers\": <a href=\"https://leetcode.com/tag/two-pointers\">https://leetcode.com/tag/two-pointers</a>\n\"String\": <a href=\"https://leetcode.com/tag/string\">https://leetcode.com/tag/string</a>\nSimilar Questions:\n\"Palindrome Linked List\": <a href=\"https://leetcode.com/problems/palindrome-linked-list\">https://leetcode.com/problems/palindrome-linked-list</a>\n\"Valid Palindrome II\": <a href=\"https://leetcode.com/problems/valid-palindrome-ii\">https://leetcode.com/problems/valid-palindrome-ii</a></p>\n<hr>\n<p><a href=\"#125-valid-palindromehttpsleetcodecomproblemsvalid-palindromedescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/valid-palindrome/description/\">125. Valid Palindrome</a></h2>\n<h3>Problem:</h3>\n<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>\n<p><strong>Note:</strong> For the purpose of this problem, we define empty string as valid palindrome.</p>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input: \"A man, a plan, a canal: Panama\"\nOutput: true\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: \"race a car\"\nOutput: false\n</code></pre>\n<h3>Solution:</h3>\n<h4>ONE</h4>\n<pre><code class=\"language-javascript\">/**\n * @param {string} s\n * @return {boolean}\n */\nlet isPalindrome = function (s) {\n    const clean = s.toLowerCase().split(/[^a-z0-9]*/);\n    return clean.join('') === clean.reverse().join('');\n};\n</code></pre>\n<h4>TWO</h4>\n<p>Remove non-alphanumeric characters then compare.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {string} s\n * @return {boolean}\n */\nlet isPalindrome = function (s) {\n    const clean = s.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n    for (let i = 0, j = clean.length - 1; i &#x3C; j; i++, j--) {\n        if (clean[i] !== clean[j]) {\n            return false;\n        }\n    }\n    return true;\n};\n</code></pre>\n<h4>THREE</h4>\n<p>Compare the char codes.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {string} s\n * @return {boolean}\n */\nlet isPalindrome = function (s) {\n    for (let i = 0, j = s.length - 1; i &#x3C; j; i++, j--) {\n        let left = s.charCodeAt(i);\n        while (i &#x3C; j &#x26;&#x26; (left &#x3C; 48 || (left > 57 &#x26;&#x26; left &#x3C; 65) || (left > 90 &#x26;&#x26; left &#x3C; 97) || left > 122)) {\n            left = s.charCodeAt(++i);\n        }\n        if (i >= j) {\n            return true;\n        }\n        if (left >= 65 &#x26;&#x26; left &#x3C;= 90) {\n            left += 32;\n        }\n\n        let right = s.charCodeAt(j);\n        while (i &#x3C; j &#x26;&#x26; (right &#x3C; 48 || (right > 57 &#x26;&#x26; right &#x3C; 65) || (right > 90 &#x26;&#x26; right &#x3C; 97) || right > 122)) {\n            right = s.charCodeAt(--j);\n        }\n        if (i >= j) {\n            return true;\n        }\n        if (right >= 65 &#x26;&#x26; right &#x3C;= 90) {\n            right += 32;\n        }\n\n        if (left !== right) {\n            return false;\n        }\n    }\n\n    return true;\n};\n</code></pre>\n<hr>\n<p>Difficulty: Hard\nRelated Topics:\n\"Array\": <a href=\"https://leetcode.com/tag/array\">https://leetcode.com/tag/array</a>\n\"String\": <a href=\"https://leetcode.com/tag/string\">https://leetcode.com/tag/string</a>\n\"Backtracking\": <a href=\"https://leetcode.com/tag/backtracking\">https://leetcode.com/tag/backtracking</a>\n\"Breadth-first Search\": <a href=\"https://leetcode.com/tag/breadth-first-search\">https://leetcode.com/tag/breadth-first-search</a>\nSimilar Questions:\n\"Word Ladder\": <a href=\"https://leetcode.com/problems/word-ladder\">https://leetcode.com/problems/word-ladder</a></p>\n<hr>\n<p><a href=\"#126-word-ladder-iihttpsleetcodecomproblemsword-ladder-iidescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/word-ladder-ii/description/\">126. Word Ladder II</a></h2>\n<h3>Problem:</h3>\n<p>Given two words (<em>beginWord</em> and <em>endWord</em>), and a dictionary's word list, find all shortest transformation sequence(s) from <em>beginWord</em> to <em>endWord</em>, such that:</p>\n<ol>\n<li>Only one letter can be changed at a time</li>\n<li>Each transformed word must exist in the word list. Note that <em>beginWord</em> is <em>not</em> a transformed word.</li>\n</ol>\n<p><strong>Note:</strong></p>\n<ul>\n<li>Return an empty list if there is no such transformation sequence.</li>\n<li>All words have the same length.</li>\n<li>All words contain only lowercase alphabetic characters.</li>\n<li>You may assume no duplicates in the word list.</li>\n<li>You may assume <em>beginWord</em> and <em>endWord</em> are non-empty and are not the same.</li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input:\nbeginWord = \"hit\",\nendWord = \"cog\",\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\nOutput:\n[\n  [\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],\n  [\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]\n]\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input:\nbeginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n\nOutput: []\n\nExplanation: The endWord \"cog\" is not in wordList, therefore no possible transformation.\n</code></pre>\n<h3>Solution:</h3>\n<p>This is just like <a href=\"./127.%20Word%20Ladder\">127. Word Ladder</a>.</p>\n<p>The constrain still works, but instead of deleting the words right away, collect them and delete them all when a level ends, so that we can reuse the words (matching different parents in the same level).</p>\n<p>The items in the queue are not just words now. Parent nodes are also kept so that we can backtrack the path from the end.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {string[][]}\n */\nfunction findLadders(beginWord, endWord, wordList) {\n    wordList = new Set(wordList);\n    if (!wordList.has(endWord)) {\n        return [];\n    }\n\n    const ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n\n    const result = [];\n    let isEndWordFound = false;\n    const levelWords = new Set();\n    const queue = [[beginWord, null], null];\n    while (queue.length > 1) {\n        const node = queue.shift();\n\n        if (node === null) {\n            if (isEndWordFound) {\n                break;\n            }\n            levelWords.forEach((word) => wordList.delete(word));\n            levelWords.clear();\n            queue.push(null);\n            continue;\n        }\n\n        const word = node[0];\n\n        for (let i = word.length - 1; i >= 0; i--) {\n            const head = word.slice(0, i);\n            const tail = word.slice(i + 1);\n\n            for (let c = 0; c &#x3C; 26; c++) {\n                if (ALPHABET[c] !== word[i]) {\n                    const w = head + ALPHABET[c] + tail;\n                    if (w === endWord) {\n                        const path = [endWord];\n                        for (let n = node; n !== null; n = n[1]) {\n                            path.unshift(n[0]);\n                        }\n                        result.push(path);\n                        isEndWordFound = true;\n                    }\n                    if (wordList.has(w)) {\n                        levelWords.add(w);\n                        queue.push([w, node]);\n                    }\n                }\n            }\n        }\n    }\n\n    return result;\n}\n</code></pre>\n<hr>\n<p>Difficulty: Medium\nRelated Topics:\n\"Breadth-first Search\": <a href=\"https://leetcode.com/tag/breadth-first-search\">https://leetcode.com/tag/breadth-first-search</a>\nSimilar Questions:\n\"Word Ladder II\": <a href=\"https://leetcode.com/problems/word-ladder-ii\">https://leetcode.com/problems/word-ladder-ii</a>\n\"Minimum Genetic Mutation\": <a href=\"https://leetcode.com/problems/minimum-genetic-mutation\">https://leetcode.com/problems/minimum-genetic-mutation</a></p>\n<hr>\n<p><a href=\"#127-word-ladderhttpsleetcodecomproblemsword-ladderdescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/word-ladder/description/\">127. Word Ladder</a></h2>\n<h3>Problem:</h3>\n<p>Given two words (<em>beginWord</em> and <em>endWord</em>), and a dictionary's word list, find the length of shortest transformation sequence from <em>beginWord</em> to <em>endWord</em>, such that:</p>\n<ol>\n<li>Only one letter can be changed at a time.</li>\n<li>Each transformed word must exist in the word list. Note that <em>beginWord</em> is <em>not</em> a transformed word.</li>\n</ol>\n<p><strong>Note:</strong></p>\n<ul>\n<li>Return 0 if there is no such transformation sequence.</li>\n<li>All words have the same length.</li>\n<li>All words contain only lowercase alphabetic characters.</li>\n<li>You may assume no duplicates in the word list.</li>\n<li>You may assume <em>beginWord</em> and <em>endWord</em> are non-empty and are not the same.</li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<pre><code>Input:\nbeginWord = \"hit\",\nendWord = \"cog\",\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\nOutput: 5\n\nExplanation: As one shortest transformation is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\",\nreturn its length 5.\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input:\nbeginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n\nOutput: 0\n\nExplanation: The endWord \"cog\" is not in wordList, therefore no possible transformation.\n</code></pre>\n<h3>Solution:</h3>\n<p>Think of it as building a tree, with <code>begineWord</code> as root and <code>endWord</code> as leaves.</p>\n<p>The best way control the depth (length of the shortest transformations) while building the tree is level-order traversal (BFS).</p>\n<p>We do not actually build the tree because it is expensive (astronomical if the list is huge). In fact, we only need one shortest path. So just like Dijkstra's algorithm, we say that the first time (level <code>i</code>) we encounter a word that turns out to be in a shortest path, then level <code>i</code> is the lowest level this word could ever get. We can safely remove it from the <code>wordList</code>.</p>\n<p>To find all the next words, instead of filtering the <code>wordList</code>, enumerate all 25 possible words and check if in <code>wordList</code>.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {number}\n */\nlet ladderLength = function (beginWord, endWord, wordList) {\n    wordList = new Set(wordList);\n    if (!wordList.has(endWord)) {\n        return 0;\n    }\n\n    const ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n\n    let level = 1;\n    const queue = [beginWord, null];\n    while (queue.length > 1) {\n        const word = queue.shift();\n\n        if (word === null) {\n            level++;\n            queue.push(null);\n            continue;\n        }\n\n        for (let i = word.length - 1; i >= 0; i--) {\n            const head = word.slice(0, i);\n            const tail = word.slice(i + 1);\n\n            for (let c = 0; c &#x3C; 26; c++) {\n                if (ALPHABET[c] !== word[i]) {\n                    const word = head + ALPHABET[c] + tail;\n                    if (word === endWord) {\n                        return level + 1;\n                    }\n                    if (wordList.delete(word)) {\n                        queue.push(word);\n                    }\n                }\n            }\n        }\n    }\n\n    return 0;\n};\n</code></pre>\n<hr>\n<p>Difficulty: Hard\nRelated Topics:\n\"Array\": <a href=\"https://leetcode.com/tag/array\">https://leetcode.com/tag/array</a>\n\"Union Find\": <a href=\"https://leetcode.com/tag/union-find\">https://leetcode.com/tag/union-find</a>\nSimilar Questions:\n\"Binary Tree Longest Consecutive Sequence\": <a href=\"https://leetcode.com/problems/binary-tree-longest-consecutive-sequence\">https://leetcode.com/problems/binary-tree-longest-consecutive-sequence</a></p>\n<hr>\n<p><a href=\"#128-longest-consecutive-sequencehttpsleetcodecomproblemslongest-consecutive-sequencedescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/longest-consecutive-sequence/description/\">128. Longest Consecutive Sequence</a></h2>\n<h3>Problem:</h3>\n<p>Given an unsorted array of integers, find the length of the longest consecutive elements sequence.</p>\n<p>Your algorithm should run in O(<em>n</em>) complexity.</p>\n<p><strong>Example:</strong></p>\n<pre><code>Input: [100, 4, 200, 1, 3, 2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n</code></pre>\n<h3>Solution:</h3>\n<p>Build a Set from the list. Pick a number, find all it's adjacent numbers that are also in the Set. Count them and remove them all from the Set. Repeat until the Set is empty. Time complexity O(n + n) = O(n).</p>\n<pre><code class=\"language-javascript\">/**\n * @param {number[]} nums\n * @return {number}\n */\nlet longestConsecutive = function (nums) {\n    const numSet = new Set(nums);\n    let maxCount = 0;\n    while (numSet.size > 0) {\n        const num = numSet.values().next().value;\n        numSet.delete(num);\n        let count = 1;\n        for (let n = num + 1; numSet.delete(n); n++) {\n            count++;\n        }\n        for (let n = num - 1; numSet.delete(n); n--) {\n            count++;\n        }\n        if (count > maxCount) {\n            maxCount = count;\n        }\n    }\n    return maxCount;\n};\n</code></pre>\n<hr>\n<p>Difficulty: Medium\nRelated Topics:\n\"Tree\": <a href=\"https://leetcode.com/tag/tree\">https://leetcode.com/tag/tree</a>\n\"Depth-first Search\": <a href=\"https://leetcode.com/tag/depth-first-search\">https://leetcode.com/tag/depth-first-search</a>\nSimilar Questions:\n\"Path Sum\": <a href=\"https://leetcode.com/problems/path-sum\">https://leetcode.com/problems/path-sum</a>\n\"Binary Tree Maximum Path Sum\": <a href=\"https://leetcode.com/problems/binary-tree-maximum-path-sum\">https://leetcode.com/problems/binary-tree-maximum-path-sum</a></p>\n<hr>\n<p><a href=\"#129-sum-root-to-leaf-numbershttpsleetcodecomproblemssum-root-to-leaf-numbersdescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/sum-root-to-leaf-numbers/description/\">129. Sum Root to Leaf Numbers</a></h2>\n<h3>Problem:</h3>\n<p>Given a binary tree containing digits from <code>0-9</code> only, each root-to-leaf path could represent a number.</p>\n<p>An example is the root-to-leaf path <code>1->2->3</code> which represents the number <code>123</code>.</p>\n<p>Find the total sum of all root-to-leaf numbers.</p>\n<p><strong>Note:</strong> A leaf is a node with no children.</p>\n<p><strong>Example:</strong></p>\n<pre><code>Input: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><code>Input: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\n</code></pre>\n<h3>Solution:</h3>\n<p>To write a clean solution for this promblem, use <code>0</code> as indicator of leaf node. If all the children get <code>0</code>, it is a leaf node, return the sum of current level.</p>\n<pre><code class=\"language-javascript\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nlet sumNumbers = function (root, sum = 0) {\n    if (!root) {\n        return 0;\n    }\n    sum = sum * 10 + root.val;\n    return sumNumbers(root.left, sum) + sumNumbers(root.right, sum) || sum;\n};\n</code></pre>\n<hr>\n<p>Difficulty: Medium\nRelated Topics:\n\"Depth-first Search\": <a href=\"https://leetcode.com/tag/depth-first-search\">https://leetcode.com/tag/depth-first-search</a>\n\"Breadth-first Search\": <a href=\"https://leetcode.com/tag/breadth-first-search\">https://leetcode.com/tag/breadth-first-search</a>\n\"Union Find\": <a href=\"https://leetcode.com/tag/union-find\">https://leetcode.com/tag/union-find</a>\nSimilar Questions:\n\"Number of Islands\": <a href=\"https://leetcode.com/problems/number-of-islands\">https://leetcode.com/problems/number-of-islands</a>\n\"Walls and Gates\": <a href=\"https://leetcode.com/problems/walls-and-gates\">https://leetcode.com/problems/walls-and-gates</a></p>\n<hr>\n<p><a href=\"#130-surrounded-regionshttpsleetcodecomproblemssurrounded-regionsdescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/surrounded-regions/description/\">130. Surrounded Regions</a></h2>\n<h3>Problem:</h3>\n<p>Given a 2D board containing <code>'X'</code> and <code>'O'</code> (<strong>the letter O</strong>), capture all regions surrounded by <code>'X'</code>.</p>\n<p>A region is captured by flipping all <code>'O'</code>s into <code>'X'</code>s in that surrounded region.</p>\n<p><strong>Example:</strong></p>\n<pre><code>X X X X\nX O O X\nX X O X\nX O X X\n</code></pre>\n<p>After running your function, the board should be:</p>\n<pre><code>X X X X\nX X X X\nX X X X\nX O X X\n</code></pre>\n<p><strong>Explanation:</strong></p>\n<p>Surrounded regions shouldn't be on the border, which means that any <code>'O'</code> on the border of the board are not flipped to <code>'X'</code>. Any <code>'O'</code> that is not on the border and it is not connected to an <code>'O'</code> on the border will be flipped to <code>'X'</code>. Two cells are connected if they are adjacent cells connected horizontally or vertically.</p>\n<h3>Solution:</h3>\n<p>Find all the <code>O</code>s that are connected to the <code>O</code>s on the border, change them to <code>#</code>. Then scan the board, change <code>O</code> to <code>X</code> and <code>#</code> back to <code>O</code>.</p>\n<p>The process of finding the connected <code>O</code>s is just like tree traversal. <code>O</code>s on the border are the same level. Their children are the second level. And so on.</p>\n<p>So both BFS and DFS are good. I prefer BFS when pruning is not needed in favor of its readability.</p>\n<pre><code class=\"language-javascript\">/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nlet solve = function (board) {\n    const height = board.length;\n    if (height &#x3C;= 1) {\n        return;\n    }\n    const width = board[0].length;\n    if (width &#x3C;= 1) {\n        return;\n    }\n\n    const rowend = height - 1;\n    const colend = width - 1;\n\n    const queue = [];\n\n    for (let row = 0; row &#x3C; height; row++) {\n        if (board[row][0] === 'O') {\n            board[row][0] = '#';\n            queue.push(row, 0);\n        }\n        if (board[row][colend] === 'O') {\n            board[row][colend] = '#';\n            queue.push(row, colend);\n        }\n    }\n\n    for (let col = 0; col &#x3C; width; col++) {\n        if (board[0][col] === 'O') {\n            board[0][col] = '#';\n            queue.push(0, col);\n        }\n        if (board[rowend][col] === 'O') {\n            board[rowend][col] = '#';\n            queue.push(rowend, col);\n        }\n    }\n\n    while (queue.length > 0) {\n        const row = queue.shift();\n        const col = queue.shift();\n        if (row &#x3C; rowend &#x26;&#x26; board[row + 1][col] === 'O') {\n            board[row + 1][col] = '#';\n            queue.push(row + 1, col);\n        }\n        if (row > 0 &#x26;&#x26; board[row - 1][col] === 'O') {\n            board[row - 1][col] = '#';\n            queue.push(row - 1, col);\n        }\n        if (board[row][col + 1] === 'O') {\n            board[row][col + 1] = '#';\n            queue.push(row, col + 1);\n        }\n        if (board[row][col - 1] === 'O') {\n            board[row][col - 1] = '#';\n            queue.push(row, col - 1);\n        }\n    }\n\n    for (let row = 0; row &#x3C; height; row++) {\n        for (let col = 0; col &#x3C; width; col++) {\n            if (board[row][col] === '#') {\n                board[row][col] = 'O';\n            } else if (board[row][col] === 'O') {\n                board[row][col] = 'X';\n            }\n        }\n    }\n};\n</code></pre>\n<hr>\n<p>Difficulty: Medium\nRelated Topics:\n\"Depth-first Search\": <a href=\"https://leetcode.com/tag/depth-first-search\">https://leetcode.com/tag/depth-first-search</a>\n\"Breadth-first Search\": <a href=\"https://leetcode.com/tag/breadth-first-search\">https://leetcode.com/tag/breadth-first-search</a>\n\"Graph\": <a href=\"https://leetcode.com/tag/graph\">https://leetcode.com/tag/graph</a>\nSimilar Questions:\n\"Copy List with Random Pointer\": <a href=\"https://leetcode.com/problems/copy-list-with-random-pointer\">https://leetcode.com/problems/copy-list-with-random-pointer</a></p>\n<hr>\n<p><a href=\"#133-clone-graphhttpsleetcodecomproblemsclone-graphdescription\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ <a href=\"https://leetcode.com/problems/clone-graph/description/\">133. Clone Graph</a></h2>\n<h3>Problem:</h3>\n<p>Given the head of a graph, return a deep copy (clone) of the graph. Each node in the graph contains a <code>label</code> (<code>int</code>) and a list (<code>List[UndirectedGraphNode]</code>) of its <code>neighbors</code>. There is an edge between the given node and each of the nodes in its neighbors.</p>\n<p>OJ's undirected graph serialization (so you can understand error output):</p>\n<p>Nodes are labeled uniquely.</p>\n<p>We use <code>#</code> as a separator for each node, and <code>,</code> as a separator for node label and each neighbor of the node.</p>\n<p>As an example, consider the serialized graph <code>{0,1,2#1,2#2,2}</code>.</p>\n<p>The graph has a total of three nodes, and therefore contains three parts as separated by <code>#</code>.</p>\n<ol>\n<li>First node is labeled as <code>0</code>. Connect node <code>0</code> to both nodes <code>1</code> and <code>2</code>.</li>\n<li>Second node is labeled as <code>1</code>. Connect node <code>1</code> to node <code>2</code>.</li>\n<li>Third node is labeled as <code>2</code>. Connect node <code>2</code> to node <code>2</code> (itself), thus forming a self-cycle.</li>\n</ol>\n<p>Visually, the graph looks like the following:</p>\n<pre><code>       1\n      / \\\n     /   \\\n    0 --- 2\n         / \\\n         \\_/\n</code></pre>\n<p><strong>Note</strong>: The information about the tree serialization is only meant so that you can understand error output if you get a wrong answer. You don't need to understand the serialization to solve the problem.</p>\n<h3>Solution:</h3>\n<p>DFS. Cache the visited node before entering the next recursion.</p>\n<pre><code class=\"language-javascript\">/**\n * Definition for undirected graph.\n * function UndirectedGraphNode(label) {\n *     this.label = label;\n *     this.neighbors = [];   // Array of UndirectedGraphNode\n * }\n */\n\n/**\n * @param {UndirectedGraphNode} graph\n * @return {UndirectedGraphNode}\n */\nlet cloneGraph = function (graph) {\n    const cache = {};\n    return _clone(graph);\n\n    function _clone(graph) {\n        if (!graph) {\n            return graph;\n        }\n        const label = graph.label;\n        if (!cache[label]) {\n            cache[label] = new UndirectedGraphNode(label);\n            cache[label].neighbors = graph.neighbors.map(_clone);\n        }\n        return cache[label];\n    }\n};\n</code></pre>\n<p><img src=\"https://github.com/everthis/leetcode-js/blob/master/images/binary-tree-upside-down.webp\" alt=\"alt text\" title=\"binary-tree-upside-down\"></p>\n<pre><code class=\"language-js\">/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nconst upsideDownBinaryTree = function (root) {\n    let curr = root;\n    let next = null;\n    let temp = null;\n    let prev = null;\n    while (curr !== null) {\n        next = curr.left;\n        curr.left = temp;\n        temp = curr.right;\n        curr.right = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};\n\n// another\n\nconst upsideDownBinaryTree = function (root) {\n    if (root == null || root.left == null) {\n        return root;\n    }\n    const newRoot = upsideDownBinaryTree(root.left);\n    root.left.left = root.right;\n    root.left.right = root;\n    root.left = null;\n    root.right = null;\n    return newRoot;\n};\n</code></pre>\n<p><img src=\"https://github.com/everthis/leetcode-js/blob/master/images/maximum-sum-circular-subarray.png\" alt=\"alt text\" title=\"maximum-sum-circular-subarray\"></p>\n<pre><code class=\"language-js\">/**\n * @param {number[]} A\n * @return {number}\n */\nconst maxSubarraySumCircular = function (A) {\n    let minSum = Infinity,\n        sum = 0,\n        maxSum = -Infinity,\n        curMax = 0,\n        curMin = 0;\n    for (let a of A) {\n        sum += a;\n        curMax = Math.max(curMax + a, a);\n        maxSum = Math.max(maxSum, curMax);\n        curMin = Math.min(curMin + a, a);\n        minSum = Math.min(minSum, curMin);\n    }\n    return maxSum > 0 ? Math.max(maxSum, sum - minSum) : maxSum;\n};\n</code></pre>\n<p><a href=\"#balanced-binary-tree---leetcode\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h1>➤ Balanced Binary Tree - LeetCode</h1>\n<blockquote>\n<p>Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.</p>\n</blockquote>\n<p>Given a binary tree, determine if it is height-balanced.</p>\n<p>For this problem, a height-balanced binary tree is defined as:</p>\n<blockquote>\n<p>a binary tree in which the left and right subtrees of <em>every</em> node differ in height by no more than 1.</p>\n</blockquote>\n<p><strong>Example 1:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg\"></p>\n<p><strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> true</p>\n<p><strong>Example 2:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg\"></p>\n<p><strong>Input:</strong> root = [1,2,2,3,3,null,null,4,4]\n<strong>Output:</strong> false</p>\n<p><strong>Example 3:</strong></p>\n<p><strong>Input:</strong> root = []\n<strong>Output:</strong> true</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n<li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li>\n<li><code>-104 &#x3C;= Node.val &#x3C;= 104</code></li>\n</ul>\n<p><a href=\"https://leetcode.com/problems/balanced-binary-tree/\">Source</a># Convert Sorted Array to Binary Search Tree</p>\n<blockquote>\n<p>Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.</p>\n</blockquote>\n<p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p>\n<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of <em>every</em> node never differ by more than 1.</p>\n<p><strong>Example:</strong></p>\n<p>Given the sorted array: [-10,-3,0,5,9],</p>\n<p>One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:</p>\n<pre><code>  0\n / \\\\\n</code></pre>\n<p>-3 9\n/ /\n-10 5</p>\n<p><a href=\"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/\">Source</a># Delete Node in a BST</p>\n<blockquote>\n<p>Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.</p>\n</blockquote>\n<p>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.</p>\n<p>Basically, the deletion can be divided into two stages:</p>\n<ol>\n<li>Search for a node to remove.</li>\n<li>If the node is found, delete the node.</li>\n</ol>\n<p><strong>Follow up:</strong> Can you solve it with time complexity <code>O(height of tree)</code>?</p>\n<p><strong>Example 1:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2020/09/04/del_node_1.jpg\"></p>\n<p><strong>Input:</strong> root = [5,3,6,2,4,null,7], key = 3\n<strong>Output:</strong> [5,4,6,2,null,null,7]\n<strong>Explanation:</strong> Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.\n<img src=\"https://assets.leetcode.com/uploads/2020/09/04/del_node_supp.jpg\"></p>\n<p><strong>Example 2:</strong></p>\n<p><strong>Input:</strong> root = [5,3,6,2,4,null,7], key = 0\n<strong>Output:</strong> [5,3,6,2,4,null,7]\n<strong>Explanation:</strong> The tree does not contain a node with value = 0.</p>\n<p><strong>Example 3:</strong></p>\n<p><strong>Input:</strong> root = [], key = 0\n<strong>Output:</strong> []</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n<li>The number of nodes in the tree is in the range <code>[0, 104]</code>.</li>\n<li><code>-105 &#x3C;= Node.val &#x3C;= 105</code></li>\n<li>Each node has a <strong>unique</strong> value.</li>\n<li><code>root</code> is a valid binary search tree.</li>\n<li><code>-105 &#x3C;= key &#x3C;= 105</code></li>\n</ul>\n<p><a href=\"https://leetcode.com/problems/delete-node-in-a-bst/\">Source</a><img src=\"https://github.com/everthis/leetcode-js/blob/master/images/meeting-room-ii-0.jpg\" alt=\"alt text\" title=\"meeting-room-ii\">\n<img src=\"https://github.com/everthis/leetcode-js/blob/master/images/meeting-room-ii-1.jpg\" alt=\"alt text\" title=\"meeting-room-ii\"></p>\n<pre><code class=\"language-javascript\">/**\n * @param {number[][]} intervals\n * @return {number}\n */\nconst minMeetingRooms = function (intervals) {\n    const len = intervals.length;\n    const starts = new Array(len);\n    const ends = new Array(len);\n    for (let i = 0; i &#x3C; len; i++) {\n        starts[i] = intervals[i][0];\n        ends[i] = intervals[i][1];\n    }\n    starts.sort((a, b) => a - b);\n    ends.sort((a, b) => a - b);\n    let rooms = 0;\n    let endsIdx = 0;\n    for (let i = 0; i &#x3C; len; i++) {\n        if (starts[i] &#x3C; ends[endsIdx]) rooms++;\n        else endsIdx++;\n    }\n    return rooms;\n};\n</code></pre>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>"},{"url":"/blog/netlify-cms/","relativePath":"blog/netlify-cms.md","relativeDir":"blog","base":"netlify-cms.md","name":"netlify-cms","frontmatter":{"title":"Netlify CMS Reference Sheet","subtitle":"lorem-ipsum","date":"2021-09-30","thumb_image_alt":"lorem-ipsum","excerpt":"lorem-ipsum","seo":{"title":"","description":"Netlify CMS is an open source content management system for your Git workflow that enables you to provide editors with a friendly UI and intuitive workflows","robots":[],"extra":[{"name":"og:image","value":"images/netlify-dee8d6ae.svg","keyName":"property","relativeUrl":true},{"name":"og:title","value":"Intro to Netlify CMS","keyName":"property","relativeUrl":false},{"name":"twitter:card","value":"Intro to Netlify CMS","keyName":"name","relativeUrl":false}]},"template":"post","thumb_image":"images/netlify.svg","image":"images/netlify-26904b46.svg"},"html":"<h1>Overview\n\n</h1>\n<p>Netlify CMS is an open source content management system for your Git workflow that enables you to provide editors with a friendly UI and intuitive workflows. You can use it with any static site generator to create faster, more flexible web projects. Content is stored in your Git repository alongside your code for easier versioning, multi-channel publishing, and the option to handle content updates directly in Git.</p>\n<p>At its core, Netlify CMS is an open-source React app that acts as a wrapper for the Git workflow, using the GitHub, GitLab, or Bitbucket API. This provides many advantages, including:</p>\n<ul>\n<li><strong>Fast, web-based UI:</strong> With rich-text editing, real-time preview, and drag-and-drop media uploads.</li>\n<li><strong>Platform agnostic:</strong> Works with most static site generators.</li>\n<li><strong>Easy installation:</strong> Add two files to your site and hook up the backend by including those files in your build process or linking to our Content Delivery Network (CDN).</li>\n<li><strong>Modern authentication:</strong> Using GitHub, GitLab, or Bitbucket and JSON web tokens.</li>\n<li><strong>Flexible content types:</strong> Specify an unlimited number of content types with custom fields.</li>\n<li><strong>Fully extensible:</strong> Create custom-styled previews, UI widgets, and editor plugins.</li>\n</ul>\n<h2>Netlify CMS vs. Netlify</h2>\n<p><a href=\"https://www.netlify.com/\">Netlify.com</a> is a platform you can use to automatically build, deploy, serve, and manage your frontend sites and web apps. It also provides a variety of other features like form processing, serverless functions, and split testing. Not all Netlify sites use Netlify CMS, and not all sites using Netlify CMS are on Netlify.</p>\n<p>The folks at Netlify created Netlify CMS to fill a gap in the static site generation pipeline. There were some great proprietary headless CMS options, but no real contenders that were open source and extensible—that could turn into a community-built ecosystem like WordPress or Drupal. For that reason, Netlify CMS is <em>made</em> to be community-driven, and has never been locked to the Netlify platform (despite the name).</p>\n<p>With this in mind, you can:</p>\n<ul>\n<li>Use Netlify CMS without Netlify and deploy your site where you always have, hooking up your own CI, site hosting, CDN, etc.</li>\n<li>Use Netlify without Netlify CMS and edit your static site in your code editor.</li>\n<li>Or, use them together and have a fully-working CMS-enabled site with <a href=\"https://www.netlifycms.org/docs/start-with-a-template/\">one click</a>!</li>\n</ul>\n<p>If you hook up Netlify CMS to your website, you're basically adding a tool for content editors to make commits to your site repository without touching code or learning Git.</p>\n<ul>\n<li>Add to Your Site<strong>These generatorsstore static files in</strong>Jekyll, GitBook/ (project root)Hugo, Gatsby, Nuxt, Gridsome, Zola, Sapper/staticNext/publicHexo, Middleman, Jigsaw/sourceSpike/viewsWyam/inputPelican/contentVuePress/.vuepress/publicElmstatic/_site11ty/_sitepreact-cli/src/staticnamePost type identifier, used in routes. Must be unique.labelWhat the admin UI calls the post type.folderWhere files of this type are stored, relative to the repo root.createSet to true to allow users to create new files in this collection.slugTemplate for filenames. {{year}}, {{month}}, and {{day}} pulls from the post's date field or save date. {{slug}} is a url-safe version of the post's title. Default is simply {{slug}}.fieldsFields listed here are shown as fields in the content editor, then saved as front matter at the beginning of the document (except for body, which follows the front matter). Each field contains the following properties:</li>\n</ul>\n<p>You can adapt Netlify CMS to a wide variety of projects. It works with any content written in markdown, JSON, YAML, or TOML files, stored in a repo on <a href=\"https://github.com/\">GitHub</a>, <a href=\"https://about.gitlab.com/\">GitLab</a>, or <a href=\"https://bitbucket.org/\">Bitbucket</a>. You can also create your own custom backend.</p>\n<p>This tutorial guides you through the steps for adding Netlify CMS to a site that's built with a common <a href=\"https://www.staticgen.com/\">static site generator</a>, like Jekyll, Hugo, Hexo, or Gatsby. Alternatively, you can <a href=\"https://www.netlifycms.org/docs/start-with-a-template\">start from a template</a> or dive right into <a href=\"https://www.netlifycms.org/docs/configuration-options\">configuration options</a>.</p>\n<h2>App File Structure</h2>\n<p>A static admin folder contains all Netlify CMS files, stored at the root of your published site. Where you store this folder in the source files depends on your static site generator. Here's the static file location for a few of the most popular static site generators:</p>\n<p>If your generator isn't listed here, you can check its documentation, or as a shortcut, look in your project for a css or images folder. The contents of folders like that are usually processed as static files, so it's likely you can store your admin folder next to those. (When you've found the location, feel free to add it to these docs by <a href=\"https://github.com/netlify/netlify-cms/blob/master/CONTRIBUTING.md#pull-requests\">filing a pull request</a>!)</p>\n<p>Inside the admin folder, you'll create two files:</p>\n<p>The first file, admin/index.html, is the entry point for the Netlify CMS admin interface. This means that users navigate to yoursite.com/admin/ to access it. On the code side, it's a basic HTML starter page that loads the Netlify CMS JavaScript file. The second file, admin/config.yml, is the heart of your Netlify CMS installation, and a bit more complex. The <a href=\"https://www.netlifycms.org/docs/add-to-your-site/#configuration\">Configuration</a> section covers the details.</p>\n<p>In this example, we pull the admin/index.html file from a public CDN.</p>\n<p>In the code above the script is loaded from the unpkg CDN. Should there be any issue, jsDelivr can be used as an alternative source. Simply set the src to <a href=\"https://cdn.jsdelivr.net/npm/netlify-cms@%5E2.0.0/dist/netlify-cms.js\">https://cdn.jsdelivr.net/npm/netlify-cms@^2.0.0/dist/netlify-cms.js</a></p>\n<h3>Installing with npm</h3>\n<p>You can also use Netlify CMS as an npm module. Wherever you import Netlify CMS, it automatically runs, taking over the current page. Make sure the script that imports it only runs on your CMS page. First install the package and save it to your project:</p>\n<p>Then import it (assuming your project has tooling for imports):</p>\n<h2>Configuration</h2>\n<p>Configuration is different for every site, so we'll break it down into parts. Add all the code snippets in this section to your admin/config.yml file.</p>\n<h3>Backend</h3>\n<p>We're using <a href=\"https://www.netlify.com/\">Netlify</a> for our hosting and authentication in this tutorial, so backend configuration is fairly straightforward.</p>\n<p>For GitHub and GitLab repositories, you can start your Netlify CMS config.yml file with these lines:</p>\n<p><em>(For Bitbucket repositories, use the _[</em>Bitbucket backend<em>](<a href=\"https://www.netlifycms.org/docs/bitbucket-backend\">https://www.netlifycms.org/docs/bitbucket-backend</a>)</em> instructions instead.)_</p>\n<p>The configuration above specifies your backend protocol and your publication branch. Git Gateway is an open source API that acts as a proxy between authenticated users of your site and your site repo. (We'll get to the details of that in the <a href=\"https://www.netlifycms.org/docs/add-to-your-site/#authentication\">Authentication section</a> below.) If you leave out the branch declaration, it defaults to master.</p>\n<h3>Editorial Workflow</h3>\n<p><strong>Note:</strong> Editorial workflow works with GitHub repositories, and support for GitLab and Bitbucket is <a href=\"https://www.netlifycms.org/docs/beta-features/#gitlab-and-bitbucket-editorial-workflow-support\">in beta</a>.</p>\n<p>By default, saving a post in the CMS interface pushes a commit directly to the publication branch specified in backend. However, you also have the option to enable the <a href=\"https://www.netlifycms.org/docs/configuration-options/#publish-mode\">Editorial Workflow</a>, which adds an interface for drafting, reviewing, and approving posts. To do this, add the following line to your Netlify CMS config.yml:</p>\n<h3>Media and Public Folders</h3>\n<p>Netlify CMS allows users to upload images directly within the editor. For this to work, the CMS needs to know where to save them. If you already have an images folder in your project, you could use its path, possibly creating an uploads sub-folder, for example:</p>\n<p>If you're creating a new folder for uploaded media, you'll need to know where your static site generator expects static files. You can refer to the paths outlined above in <a href=\"https://www.netlifycms.org/docs/add-to-your-site/#app-file-structure\">App File Structure</a>, and put your media folder in the same location where you put the admin folder.</p>\n<p>Note that themedia_folder file path is relative to the project root, so the example above would work for Jekyll, GitBook, or any other generator that stores static files at the project root. However, it would not work for Hugo, Hexo, Middleman or others that store static files in a subfolder. Here's an example that could work for a Hugo site:</p>\n<p>The configuration above adds a new setting, public<em>folder. While media</em>folder specifies where uploaded files are saved in the repo, public_folder indicates where they are found in the published site. Image src attributes use this path, which is relative to the file where it's called. For this reason, we usually start the path at the site root, using the opening /.</p>\n<p><em>If public</em>folder is not set, Netlify CMS defaults to the same value as media<em>folder, adding an opening / if one is not included.</em></p>\n<h3>Collections</h3>\n<p>Collections define the structure for the different content types on your static site. Since every site is different, the collections settings differ greatly from one site to the next.</p>\n<p>Let's say your site has a blog, with the posts stored in _posts/blog, and files saved in a date-title format, like 1999-12-31-lets-party.md. Each post begins with settings in yaml-formatted front matter, like so:</p>\n<p>Given this example, our collections settings would look like this in your NetlifyCMS config.yml file:</p>\n<p>Let's break that down:</p>\n<ul>\n<li>label: Field label in the editor UI.</li>\n<li>name: Field name in the document front matter.</li>\n<li>widget: Determines UI style and value data type (details below).</li>\n<li>default (optional): Sets a default value for the field.</li>\n</ul>\n<p>As described above, the widget property specifies a built-in or custom UI widget for a given field. When a content editor enters a value into a widget, that value is saved in the document front matter as the value for the name specified for that field. A full listing of available widgets can be found in the <a href=\"https://www.netlifycms.org/docs/widgets\">Widgets doc</a>.</p>\n<p>Based on this example, you can go through the post types in your site and add the appropriate settings to your Netlify CMS config.yml file. Each post type should be listed as a separate node under the collections field. See the <a href=\"https://www.netlifycms.org/docs/configuration-options/#collections\">Collections reference doc</a> for more configuration options.</p>\n<h3>Filter</h3>\n<p>The entries for any collection can be filtered based on the value of a single field. The example collection below only shows post entries with the value en in the language field.</p>\n<h2>Authentication</h2>\n<p>Now that you have your Netlify CMS files in place and configured, all that's left is to enable authentication. We're using the <a href=\"https://www.netlify.com/\">Netlify</a> platform here because it's one of the quickest ways to get started, but you can learn about other authentication options in the <a href=\"https://www.netlifycms.org/docs/backends-overview\">Backends</a> doc.</p>\n<h3>Setup on Netlify</h3>\n<p>Netlify offers a built-in authentication service called Identity. In order to use it, connect your site repo with Netlify. Netlify has published a general <a href=\"https://www.netlify.com/blog/2016/10/27/a-step-by-step-guide-deploying-a-static-site-or-single-page-app/\">Step-by-Step Guide</a> for this, along with detailed guides for many popular static site generators, including <a href=\"https://www.netlify.com/blog/2015/10/28/a-step-by-step-guide-jekyll-3.0-on-netlify/\">Jekyll</a>, <a href=\"https://www.netlify.com/blog/2016/09/21/a-step-by-step-guide-victor-hugo-on-netlify/\">Hugo</a>, <a href=\"https://www.netlify.com/blog/2015/10/26/a-step-by-step-guide-hexo-on-netlify/\">Hexo</a>, <a href=\"https://www.netlify.com/blog/2015/10/01/a-step-by-step-guide-middleman-on-netlify/\">Middleman</a>, <a href=\"https://www.netlify.com/blog/2016/02/24/a-step-by-step-guide-gatsby-on-netlify/\">Gatsby</a>, and more.</p>\n<h3>Enable Identity and Git Gateway</h3>\n<p>Netlify's Identity and Git Gateway services allow you to manage CMS admin users for your site without requiring them to have an account with your Git host or commit access on your repo. From your site dashboard on Netlify:</p>\n<ol>\n<li>Go to <strong>Settings > Identity</strong>, and select <strong>Enable Identity service</strong>.</li>\n<li>Under <strong>Registration preferences</strong>, select <strong>Open</strong> or <strong>Invite only</strong>. In most cases, you want only invited users to access your CMS, but if you're just experimenting, you can leave it open for convenience.</li>\n<li>If you'd like to allow one-click login with services like Google and GitHub, check the boxes next to the services you'd like to use, under <strong>External providers</strong>.</li>\n<li>Scroll down to <strong>Services > Git Gateway</strong>, and click <strong>Enable Git Gateway</strong>. This authenticates with your Git host and generates an API access token. In this case, we're leaving the <strong>Roles</strong> field blank, which means any logged in user may access the CMS. For information on changing this, check the <a href=\"https://www.netlify.com/docs/identity/\">Netlify Identity documentation</a>.</li>\n</ol>\n<h3>Add the Netlify Identity Widget</h3>\n<p>With the backend set to handle authentication, now you need a frontend interface to connect to it. The open source Netlify Identity Widget is a drop-in widget made for just this purpose. To include the widget in your site, add the following script tag in two places:</p>\n<p>Add this to the &#x3C;head> of your CMS index page at /admin/index.html, as well as the &#x3C;head> of your site's main index page. Depending on how your site generator is set up, this may mean you need to add it to the default template, or to a \"partial\" or \"include\" template. If you can find where the site stylesheet is linked, that's probably the right place. Alternatively, you can include the script in your site using Netlify's <a href=\"https://www.netlify.com/docs/inject-analytics-snippets/\">Script Injection</a> feature.</p>\n<p>When a user logs in with the Netlify Identity widget, an access token directs to the site homepage. In order to complete the login and get back to the CMS, redirect the user back to the /admin/ path. To do this, add the following script before the closing body tag of your site's main index page:</p>\n<p>Note: This example script requires modern JavaScript and does not work on IE11. For legacy browser support, use function expressions (function () {}) in place of the arrow functions (() => {}), or use a transpiler such as <a href=\"https://babeljs.io/\">Babel</a>.</p>\n<h2>Accessing the CMS</h2>\n<p>Your site CMS is now fully configured and ready for login!</p>\n<p>If you set your registration preference to \"Invite only,\" invite yourself (and anyone else you choose) as a site user. To do this, select the <strong>Identity</strong> tab from your site dashboard, and then select the <strong>Invite users</strong> button. Invited users receive an email invitation with a confirmation link. Clicking the link will take you to your site with a login prompt.</p>\n<p>If you left your site registration open, or for return visits after confirming an email invitation, access your site's CMS at yoursite.com/admin/.</p>\n<p><strong>Note:</strong> No matter where you access Netlify CMS — whether running locally, in a staging environment, or in your published site — it always fetches and commits files in your hosted repository (for example, on GitHub), on the branch you configured in your Netlify CMS config.yml file. This means that content fetched in the admin UI matches the content in the repository, which may be different from your locally running site. It also means that content saved using the admin UI saves directly to the hosted repository, even if you're running the UI locally or in staging.</p>\n<p>Examples</p>\n<p>Do\nyou have a great, open source example? Submit a pull request to this page!</p>\n<p>Example\nTools\nType\nSource\nMore info</p>\n<p><a href=\"https://github.com/robertcoopercode/gatsby-netlify-cms\">Gatsby &#x26; Netlify\nCMS Meetup Group Template</a>\nGatsby\ndemo\n<a href=\"https://github.com/robertcoopercode/gatsby-netlify-cms\">robertcoopercode/gatsby-netlify-cms</a>\n<a href=\"https://blog.logrocket.com/gatsby-netlify-cms-a-perfect-pairing-d50d59d16f67\">blog\npost</a></p>\n<p><a href=\"https://briandouglas.me/\">This\nDeveloping Journey</a>\nmiddleman\nblog\n<a href=\"https://github.com/bdougie/blog\">bdougie/blog</a>\n<a href=\"https://www.netlify.com/blog/2017/04/20/creating-a-blog-with-middleman-and-netlify-cms/\">blog\npost</a></p>\n<p><a href=\"https://jamstack-cms.netlify.com/\">Jamstack Recipes</a>\nHugo, Azure\ndemo\n<a href=\"https://github.com/hlaueriksson/jamstack-cms\">hlaueriksson/jamstack-cms</a>\n<a href=\"http://conductofcode.io/post/managing-content-for-a-jamstack-site-with-netlify-cms/\">blog\npost</a></p>\n<p><a href=\"https://bael-theme.jake101.com/\">Bael</a>\nVue, Nuxt\nblog\n<a href=\"https://github.com/jake-101/bael-template\">jake-101/bael-template</a>\n<a href=\"https://bael-theme.jake101.com/blog/2018-06-19-top-10-reasons-why\">blog\npost</a></p>\n<p><a href=\"https://www.forestgarden.wales/\">Forest\nGarden Wales</a>\nHugo\nblog\n<a href=\"https://github.com/forestgardenwales/forestgarden.wales\">forestgardenwales/forestgarden.wales</a>\n<a href=\"https://www.forestgarden.wales/blog/now-using-netlify-cms/\">blog\npost</a></p>\n<p><a href=\"https://jekyll-netlifycms.netlify.com/\">Jekyll Demo</a>\nJekyll, Gulp\ndemo\n<a href=\"https://github.com/NickStees/jekyll-cms\">NickStees/jekyll-cms</a>\n<a href=\"https://github.com/NickStees/jekyll-cms\">read me</a></p>\n<p><a href=\"https://alembic-kit-demo.netlify.com/\">Jekyll feat Alembic\nTheme Demo</a>\nJekyll\ndemo\n<a href=\"https://github.com/daviddarnes/alembic-netlifycms-kit\">DavidDarnes/alembic-netlifycms-kit</a>\n<a href=\"https://github.com/daviddarnes/alembic-netlifycms-kit#starter-kit-for-alembic-with-netlify-cms\">read\nme</a></p>\n<p><a href=\"https://eleventy-netlify-boilerplate.netlify.com/\">Eleventy Starter\nProject</a>\nEleventy\ndemo\n<a href=\"https://github.com/danurbanowicz/eleventy-netlify-boilerplate\">danurbanowicz/eleventy-netlify-boilerplate</a>\n<a href=\"https://github.com/danurbanowicz/eleventy-netlify-boilerplate\">read\nme</a></p>\n<p><a href=\"https://yellowcake.netlify.com/\">YellowCake\n- Complete website with blog</a>\nGatsby, Netlify-CMS, Uploadcare\ndemo\n<a href=\"https://github.com/thriveweb/yellowcake/\">thriveweb/yellowcake</a>\n<a href=\"https://thriveweb.com.au/the-lab/yellowcake-gatsby-react-js-starter-project/\">blog\npost</a></p>\n<p><a href=\"https://github.com/renestalder/nuxt-netlify-cms-starter-template\">Vue.js\n- Nuxt.js Starter Project</a>\nVue, Nuxt\ndemo\n<a href=\"https://github.com/renestalder/nuxt-netlify-cms-starter-template\">renestalder/nuxt-netlify-cms-starter-template</a>\n<a href=\"https://github.com/renestalder/nuxt-netlify-cms-starter-template\">read\nme</a></p>\n<p><a href=\"https://hexocms.imst.xyz/\">Hexo\nDemo</a>\nHexo\ndemo\n<a href=\"https://github.com/DemoMacro/Hexo-NetlifyCMS\">DemoMacro/Hexo-NetlifyCMS</a>\n<a href=\"https://github.com/DemoMacro/Hexo-NetlifyCMS\">read me</a></p>\n<p><a href=\"https://gitbook.imst.xyz/\">Gitbook\nDemo</a>\nGitbook\ndemo\n<a href=\"https://github.com/DemoMacro/Gitbook-NetlifyCMS\">DemoMacro/Gitbook-NetlifyCMS</a>\n<a href=\"https://github.com/DemoMacro/Gitbook-NetlifyCMS\">read me</a></p>\n<p><a href=\"https://vuepress.imst.xyz/\">VuePress\nDemo</a>\nVuePress\ndemo\n<a href=\"https://github.com/DemoMacro/VuePress-NetlifyCMS\">DemoMacro/VuePress-NetlifyCMS</a>\n<a href=\"https://github.com/DemoMacro/VuePress-NetlifyCMS\">read\nme</a></p>\n<p><a href=\"https://jigsaw-blog-netlify-netlifycms-template.netlify.com/\">Jigsaw\nBlog Starter Template Demo</a>\nJigsaw\ndemo\n<a href=\"https://github.com/erickpatrick/jigsaw-blog-netlify-netlifycms-template\">erickpatrick/jigsaw-blog-netlify-netlifycms-template</a>\n<a href=\"https://www.erickpatrick.net/blog/augmenting-tightenco-jigsaw-with-netlifycms/\">blog\npost</a></p>\n<p><a href=\"https://nuxt-netlifycms-boilerplate.netlify.com/\">Nuxt &#x26;\nNetlifyCMS Boilerplate</a>\nVue, Nuxt\ndemo\n<a href=\"https://github.com/tylermercer/nuxt-netlifycms-boilerplate\">tylermercer/nuxt-netlifycms-boilerplate</a>\n<a href=\"https://github.com/tylermercer/nuxt-netlifycms-boilerplate\">read\nme</a></p>\n<p><a href=\"https://netlifycms-nextjs.netlify.com/\">Next.js demo</a>\nNext.js\nblog\n<a href=\"https://github.com/masives/netlifycms-nextjs\">masives/netlifycms-nextjs</a>\n<a href=\"https://github.com/masives/netlifycms-nextjs\">read me</a></p>\n<p><a href=\"https://delog-w3layouts.netlify.com/\">Delog - Jamstack\nBlog with Netlify CMS</a>\nGatsby, Netlify-CMS\ndemo\n<a href=\"https://github.com/W3Layouts/gatsby-starter-delog\">W3Layouts/gatsby-starter-delog</a>\n<a href=\"https://w3layouts.com/articles/delog-gatsby-starter-netlify-cms/\">blog\npost</a></p>\n<p><a href=\"https://netlifycms-gridsome.suits.at/\">Netlify CMS template\nfor Gridsome</a>\nGridsome, Vue\ndemo\n<a href=\"https://github.com/suits-at/netlifycms-gridsome\">suits-at/netlifycms-gridsome</a>\n<a href=\"https://github.com/suits-at/netlifycms-gridsome\">read me</a></p>\n<p><a href=\"https://nextjs-netlify-blog-template.netlify.app/\">Next.js blogging\ntemplate for Netlify</a>\nNext.js, Netlify\nblog\n<a href=\"https://github.com/wutali/nextjs-netlify-blog-template\">wutali/nextjs-netlify-blog-template</a>\n<a href=\"https://github.com/wutali/nextjs-netlify-blog-template\">read\nme</a></p>\n<p><a href=\"https://github.com/pulumi/examples/tree/master/aws-ts-netlify-cms-and-oauth\">Netlify\nCMS and OAuth server on AWS</a>\nNetlify, Pulumi, AWS\nblog\n<a href=\"https://github.com/pulumi/examples/tree/master/aws-ts-netlify-cms-and-oauth\">pulumi/examples/aws-ts-netlify-cms-and-oauth</a>\n<a href=\"https://www.pulumi.com/blog/deploying-the-infrastructure-of-oauth-server-for-cms-app/\">blog\npost</a></p>\n<p><a href=\"https://creativedesignsguru.com/demo/Eleventy-Starter-Boilerplate/eleventy-starter-boilerplate-presentation/\">Eleventy\nStarter Boilerplate</a>\nEleventy, Netlify\ndemo\n<a href=\"https://github.com/ixartz/Eleventy-Starter-Boilerplate\">ixartz/Eleventy-Starter-Boilerplate</a>\n<a href=\"https://github.com/ixartz/Eleventy-Starter-Boilerplate\">read\nme</a></p>\n<p><a href=\"https://ntn-boilerplate.netlify.app/\">Nuxt, Tailwind &#x26;\nNetlifyCMS Boilerplate</a>\nVue, Nuxt\ndemo\n<a href=\"https://github.com/Knogobert/ntn-boilerplate\">Knogobert/ntn-boilerplate</a>\n<a href=\"https://github.com/Knogobert/ntn-boilerplate#readme\">read\nme</a></p>\n<p><a href=\"https://kind-mestorf-5a2bc0.netlify.com/\">Gatsby &#x26; Netlify\nCMS Personal Portfolio</a>\nGatsby\nportfolio\n<a href=\"https://github.com/EarlGeorge/React-Gatsby\">EarlGeorge/React-Gatsby</a>\n<a href=\"https://github.com/EarlGeorge/React-Gatsby/blob/master/README.md\">read\nme</a></p>\n<h1>Gatsby\n\n</h1>\n<p>This guide will help you get started using Netlify CMS and Gatsby.</p>\n<p>To get up and running with Gatsby, you’ll need to have <a href=\"https://nodejs.org/\">Node.js</a> installed on your computer. <em>Note: Gatsby's minimum supported Node.js version is Node 8.</em></p>\n<h2>Create a new Gatsby site</h2>\n<p>Let's create a new site using the default Gatsby Starter Blog. Run the following commands in the terminal, in the folder where you'd like to create the blog:</p>\n<h2>Get to know Gatsby</h2>\n<p>In your favorite code editor, open up the code generated for your \"Gatsby Starter Blog\" site, and take a look at the content directory.</p>\n<p>You will see that there are multiple Markdown files that represent blog posts. Open one .md file and you will see something like this:</p>\n<p>We can see above that each blog post has a title, a date, a description and a body. Now, let's recreate this using Netlify CMS.</p>\n<h2>Add Netlify CMS to your site</h2>\n<p>First let's install some dependencies. We'll need netlify-cms-app and gatsby-plugin-netlify-cms. Run the following command in the terminal at the root of your site:</p>\n<h3>Configuration</h3>\n<p>For the purpose of this guide we will deploy to Netlify from a GitHub repository which requires the minimum configuration.</p>\n<p>Create a config.yml file in the directory structure you see below:</p>\n<p>In your config.yml file paste the following configuration:</p>\n<p><strong>Note:</strong> The above configuration allows assets to be stored relative to their content. Therefore posts would be stored in the format below as it is in gatsby-starter-blog.</p>\n<p>Finally, add the plugin to your gatsby-config.js.</p>\n<h3>Push to GitHub</h3>\n<p>It's now time to commit your changes and push to GitHub. The Gatsby starter initializes Git automatically for you, so you only need to do:</p>\n<h3>Add your repo to Netlify</h3>\n<p>Go to Netlify and select 'New Site from Git'. Select GitHub and the repository you just pushed to. Click Configure Netlify on GitHub and give access to your repository. Finish the setup by clicking Deploy Site. Netlify will begin reading your repository and starting building your project.</p>\n<h3>Enable Identity and Git Gateway</h3>\n<p>Netlify's Identity and Git Gateway services allow you to manage CMS admin users for your site without requiring them to have an account with your Git host or commit access on your repo. From your site dashboard on Netlify:</p>\n<ol>\n<li>Go to <strong>Settings > Identity</strong>, and select <strong>Enable Identity service</strong>.</li>\n<li>Under <strong>Registration preferences</strong>, select <strong>Open</strong> or <strong>Invite only</strong>. In most cases, you want only invited users to access your CMS, but if you're just experimenting, you can leave it open for convenience.</li>\n<li>If you'd like to allow one-click login with services like Google and GitHub, check the boxes next to the services you'd like to use, under <strong>External providers</strong>.</li>\n<li>Scroll down to <strong>Services > Git Gateway</strong>, and click <strong>Enable Git Gateway</strong>. This authenticates with your Git host and generates an API access token. In this case, we're leaving the <strong>Roles</strong> field blank, which means any logged in user may access the CMS. For information on changing this, check the <a href=\"https://www.netlify.com/docs/identity/\">Netlify Identity documentation</a>.</li>\n</ol>\n<h2>Start publishing</h2>\n<p>It's time to create your first blog post. Login to your site's /admin/ page and create a new post by clicking New Blog. Add a title, a date and some text. When you click Publish, a new commit will be created in your GitHub repo with this format Create Blog “year-month-date-title”.</p>\n<p>Then Netlify will detect that there was a commit in your repo, and will start rebuilding your project. When your project is deployed you'll be able to see the post you created.</p>\n<h3>Cleanup</h3>\n<p>It is now safe to remove the default Gatsby blog posts.</p>"},{"url":"/blog/web-dev-trends/","relativePath":"blog/web-dev-trends.md","relativeDir":"blog","base":"web-dev-trends.md","name":"web-dev-trends","frontmatter":{"title":"Web Development Tools","subtitle":"In 2021","date":"2021-09-30","thumb_image_alt":"lorem-ipsum","excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"post","thumb_image":"images/27697c1a901d3b3673aeb98edae4d2ae (2)-35ae1413.png"},"html":"<p><strong>1. AI Chatbots</strong><img src=\"https://blog.sagipl.com/wp-content/uploads/2019/05/AI-Chatbots-1-1024x573.png\"></p>\n<p>Artificial Intelligence (AI) refers to the intelligence displayed by machines. It is primarily used to replace human intelligence.</p>\n<p>As the demand for AI-powered automation, communication, and analytics solutions will rise this year, more web developers will be focusing on building AI-based chatbots and virtual assistant apps.</p>\n<p><strong>2. Single Page Application</strong></p>\n<p><a href=\"https://www.sagipl.com/ipad-apps-development/\">Single-page applications</a>, being light in weight, faster, and more efficient, increased both in demand and popularity in recent years.</p>\n<p>Developers will continue to use SPA for building responsive sites and apps in 2021.</p>\n<p><strong>3. JavaScript Frameworks</strong></p>\n<p>JavaScript continues to remain one of the <a href=\"https://blog.sagipl.com/top-programming-languages/\"><strong>most preferred web development languages</strong></a> owing to its flexibility, power and evolving frameworks.</p>\n<p>This year too, we will see many new applications being developed in this developer-friendly language.</p>\n<p><strong>4. Progressive Web Apps (PWAs)</strong></p>\n<p>These are special web applications which are designed to load with progressive enhancement.</p>\n<p>Because of its fast-loading and high functionality features, PWA will continue to remain one of the year’s hottest web trends.</p>\n<p><strong>5. Mobile-Friendly Website</strong></p>\n<p>Mobile-responsive sites are the ones that are designed to work smoothly across devices of all sizes.</p>\n<p>Owing to Google’s mobile-first index and other search guidelines, developers will keep offering mobile-optimized sites this year and beyond.</p>\n<p><strong>6. Blockchain Technology</strong></p>\n<p>Blockchain, which was founded as a technology for secure digital payments, is now finding its place as a distributed ledger, which is secure, decentralized and public and will dominate the web development industry in the coming years.</p>\n<p><strong>7. Motion UI</strong></p>\n<p>Motion UI (User Interface) is a technology for creating visually appealing apps, especially animations, graphics, and transitions.</p>\n<p>Owing to its great ability for <a href=\"https://www.sagipl.com/website-design/\">creating an interactive web design</a>, Motion UI will be a primary tool for web developers in 2021.</p>\n<p><strong>8. Accelerated Mobile Pages (AMP)</strong></p>\n<p>Accelerated mobile pages are an initiative by Google to ensure that existing desktop websites give an equally amazing user experience across mobile devices.</p>\n<p>Web developers who are familiar with this tech are helping companies to implement the same on their websites.</p>\n<p><strong>9. Cybersecurity</strong></p>\n<p>Cybersecurity, which is another term for IT security, will continue to have its place in the online space as long as the world of internet is threatened by data breaches, hacking and similar cyber attacks.</p>\n<p>Developers with specialization in IT security will be in high demand this year.</p>\n<p><strong>10. VR and AR</strong></p>\n<p>The Augmented Reality and Virtual Reality Technologies, which were introduced only two years back, have now become a core part of the modern web development frameworks.</p>\n<p>From digital reality to visualization to 3D replicas, AR/VR will be used for enhancing user experience in the online space.</p>\n<p><strong>11. Voice Search</strong></p>\n<p>Following Google’s increased focus on voice search queries, websites based on voice search optimization are now trending more than ever.</p>\n<p>As the number of people using voice searches will increase this year, so will the demand for websites optimized for the same.</p>\n<p><strong>12.</strong> <strong>Push Notification</strong></p>\n<p>Push Notification is replacing the Newsletter service. It is not very old but maintaining a high conversion rate better than Newsletters.</p>\n<p>Services and platforms like Onesignal, ZoPush, Push Engage are improving day by day, so it will be in trend in upcoming years and web developers also have to take care of it.</p>\n<p>SAG IPL is a leading global <a href=\"https://www.sagipl.com/web-development/\">web development company</a> providing modern web/app development services to clients worldwide.</p>"},{"url":"/blog/python-resources/","relativePath":"blog/python-resources.md","relativeDir":"blog","base":"python-resources.md","name":"python-resources","frontmatter":{"title":"Python Resources","date":"2021-06-03","image":"images/best-zebra.gif","seo":{"title":"Python Practice","description":"Commodo ante vis placerat interdum massa massa primis","extra":[{"name":"og:type","value":"article","keyName":"property"},{"name":"og:title","value":"Python Practice","keyName":"property"},{"name":"og:description","value":"Commodo ante vis placerat interdum massa massa primis","keyName":"property"},{"name":"og:image","value":"images/2.jpg","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Python Practice"},{"name":"twitter:description","value":"Commodo ante vis placerat interdum massa massa primis"},{"name":"twitter:image","value":"images/2.jpg","relativeUrl":true}]},"template":"post","thumb_image":"images/superb-amaranth.png","thumb_image_alt":"python logo"},"html":"<h1>Beginners Guide To Python<a href=\"https://levelup.gitconnected.com/basic-web-development-environment-setup-9f36c3f15afe\"><strong>Basic Web Development Environment Setup</strong>\n<em>Windows Subsystem for Linux (WSL) and Ubuntu</em>levelup.gitconnected.com</a><img src=\"https://cdn-images-1.medium.com/max/600/1*59V2ZNbyJfsdGR2N20PM7w.png\"><img src=\"https://cdn-images-1.medium.com/max/800/0*oVIDxWdgJXoIt7CI.jpg\"><a href=\"https://trinket.io/python3/2b693977e7\"><strong>Put Python Anywhere on the Web</strong>\n<em>Python in the browser. No installation required.</em>trinket.io</a>\n\n</h1>\n<iframe src=\"https://py-prac-42.netlify.app/\" width=\"100%\" height=\"1200px\"><iframe>\n<p>My favorite language for maintainability is Python. It has simple, clean syntax, object encapsulation, good library support, and optional named parameters.</p>\n<ul>\n<li>Bram Cohen</li>\n</ul>\n<p>Article on basic web development setup… it is geared towards web but VSCode is an incredibly versitile editor and this stack really could suit just about anyone working in the field of computer science.</p>\n<h3>The Repository &#x26; Live Site Behind This Article:</h3>\n<h3>About Python(Taken From Tutorial Page Of Docs):</h3>\n<p><a href=\"https://docs.python.org/3/tutorial/appetite.html\">Python enables programs to be written compactly and readably. Programs written in Python are typically much shorter than equivalent C, C++, or Java programs, for several reasons:</a></p>\n<ul>\n<li>the high-level data types allow you to express complex operations in a single statement;</li>\n<li>statement grouping is done by indentation instead of beginning and ending brackets;</li>\n<li>no variable or argument declarations are necessary.</li>\n</ul>\n<h3>Installing Python:</h3>\n<h3>Windows</h3>\n<p>To determine if your Windows computer already has Python 3:</p>\n<ol>\n<li>Open a command prompt by entering command prompt in the Windows 10 search box and selecting the Command Prompt App in the Best match section of the results.</li>\n<li>Enter the following command and then select the Enter key:</li>\n<li>ConsoleCopy</li>\n</ol>\n<p>python --version</p>\n<ol>\n<li>Running python --version may not return a value, or may return an error message stating <em>'python' is not recognized as an internal or external command, operable program or batch file.</em> This indicates Python is not installed on your Windows system.</li>\n<li>If you see the word Python with a set of numbers separated by . characters, some version of Python is installed.</li>\n</ol>\n<h4>i.e.</h4>\n<blockquote>\n<p>Python 3.8.0</p>\n</blockquote>\n<p><strong>As long as the first number is 3</strong>, you have Python 3 installed.</p>\n<blockquote>\n<p>Download Page:</p>\n<p><a href=\"https://www.python.org/downloads/release/python-395/\">https://www.python.org/downloads/release/python-395/</a></p>\n</blockquote>\n<blockquote>\n<p>Download Link:</p>\n<p><a href=\"https://www.python.org/ftp/python/3.9.5/python-3.9.5-amd64.exe\">https://www.python.org/ftp/python/3.9.5/python-3.9.5-amd64.exe</a></p>\n</blockquote>\n<h3>Install Jupyter Notebooks:</h3>\n<h3>pip</h3>\n<p>If you use pip, you can install it with:</p>\n<p>If installing using pip install --user, you must add the user-level bin directory to your PATH environment variable in order to launch jupyter lab. If you are using a Unix derivative (FreeBSD, GNU / Linux, OS X), you can achieve this by using export PATH=\"$HOME/.local/bin:$PATH\" command.</p>\n<h3>pipenv</h3>\n<p>If you use pipenv, you can install it as:</p>\n<p>or from a git checkout:</p>\n<p>When using pipenv, in order to launch jupyter lab, you must activate the project’s virtualenv. For example, in the directory where pipenv’s Pipfile and Pipfile.lock live (i.e., where you ran the above commands):</p>\n<p>Alternatively, you can run jupyter lab inside the virtualenv with</p>\n<p><a href=\"https://nbviewer.jupyter.org/github/bgoonz/Jupyter-Notebooks/tree/master/\">Jupyter Notebook Viewer</a></p>\n<h3>Python Syntax</h3>\n<p>Python syntax was made for readability, and easy editing. For example, the python language uses a : and indented code, while javascript and others generally use {} and indented code.</p>\n<h3>First Program</h3>\n<p>Lets create a <a href=\"https://repl.it/languages/python3\">python 3</a> repl, and call it <em>Hello World</em>. Now you have a blank file called <em>main.py</em>. Now let us write our first line of code:</p>\n<blockquote>\n<p><em>Brian Kernighan actually wrote the first “Hello, World!” program as part of the documentation for the BCPL programming language developed by Martin Richards.</em></p>\n</blockquote>\n<p>Now, press the run button, which obviously runs the code. If you are not using replit, this will not work. You should research how to run a file with your text editor.</p>\n<h3>Command Line</h3>\n<p>If you look to your left at the console where hello world was just printed, you can see a >, >>>, or $ depending on what you are using. After the prompt, try typing a line of code.</p>\n<p>The command line allows you to execute single lines of code at a time. It is often used when trying out a new function or method in the language.</p>\n<h3>New: Comments!</h3>\n<p>Another cool thing that you can generally do with all languages, are comments. In python, a comment starts with a #. The computer ignores all text starting after the #.</p>\n<p># Write some comments!</p>\n<p>If you have a huge comment, do <strong>not</strong> comment all the 350 lines, just put ''' before it, and ''' at the end. Technically, this is not a comment but a string, but the computer still ignores it, so we will use it.</p>\n<h3>New: Variables!</h3>\n<p>Unlike many other languages, there is no var, let, or const to declare a variable in python. You simply go name = 'value'.</p>\n<p>Remember, there is a difference between integers and strings. <em>Remember: String = \"\".</em> To convert between these two, you can put an int in a str() function, and a string in a int() function. There is also a less used one, called a float. Mainly, these are integers with decimals. Change them using the float() command.</p>\n<p><a href=\"https://repl.it/@bgoonz/second-scr?lite=true&#x26;referrer=https%3A%2F%2Fbryanguner.medium.com\">https://repl.it/@bgoonz/second-scr?lite=true&#x26;referrer=https%3A%2F%2Fbryanguner.medium.com</a></p>\n<p>Instead of using the , in the print function, you can put a + to combine the variables and string.</p>\n<h3>Operators</h3>\n<p>There are many operators in python:</p>\n<ul>\n<li>+</li>\n<li>-</li>\n<li>/</li>\n<li>*\nThese operators are the same in most languages, and allow for addition, subtraction, division, and multiplicaiton.\nNow, we can look at a few more complicated ones:</li>\n</ul>\n<p><em>simpleops.py</em></p>\n<p>You should already know everything shown above, as it is similar to other languages. If you continue down, you will see more complicated ones.</p>\n<p><em>complexop.py</em></p>\n<p>The ones above are to edit the current value of the variable.\nSorry to JS users, as there is no i++; or anything.</p>\n<h3><em>Fun Fact:\nThe python language was named after Monty Python.</em></h3>\n<p>If you really want to know about the others, view <a href=\"https://www.tutorialspoint.com/python/python_basic_operators.htm\">Py Operators</a></p>\n<h3>More Things With Strings</h3>\n<p>Like the title?\nAnyways, a ' and a \" both indicate a string, but <strong>do not combine them!</strong></p>\n<p><em>quotes.py</em></p>\n<p><em>slicing.py</em></p>\n<h3>String Slicing</h3>\n<p>You can look at only certain parts of the string by slicing it, using [num:num].\nThe first number stands for how far in you go from the front, and the second stands for how far in you go from the back.</p>\n<h3>Methods and Functions</h3>\n<p>Here is a list of functions/methods we will go over:</p>\n<ul>\n<li>.strip()</li>\n<li>len()</li>\n<li>.lower()</li>\n<li>.upper()</li>\n<li>.replace()</li>\n<li>.split()</li>\n</ul>\n<h3>New: Input()</h3>\n<p>Input is a function that gathers input entered from the user in the command line. It takes one optional parameter, which is the users prompt.</p>\n<p><em>inp.py</em></p>\n<p>If you wanted to make it smaller, and look neater to the user, you could do…</p>\n<p><em>inp2.py</em></p>\n<p>Running:\n<em>inp.py</em></p>\n<p><em>inp2.py</em></p>\n<h3>New: Importing Modules</h3>\n<p>Python has created a lot of functions that are located in other .py files. You need to import these <strong>modules</strong> to gain access to the,, You may wonder why python did this. The purpose of separate modules is to make python faster. Instead of storing millions and millions of functions, , it only needs a few basic ones. To import a module, you must write input &#x3C;modulename>. Do not add the .py extension to the file name. In this example , we will be using a python created module named random.</p>\n<p><em>module.py</em></p>\n<p>Now, I have access to all functions in the random.py file. To access a specific function in the module, you would do &#x3C;module>.&#x3C;function>. For example:</p>\n<p><em>module2.py</em></p>\n<blockquote>\n<p>*Pro Tip:\nDo from random import randint to not have to do random.randint(), just randint()\nTo import all functions from a module, you could do from random import **</p>\n</blockquote>\n<blockquote>\n</blockquote>\n<h3>New: Loops!</h3>\n<p>Loops allow you to repeat code over and over again. This is useful if you want to print Hi with a delay of one second 100 times.</p>\n<h4>for Loop</h4>\n<p>The for loop goes through a list of variables, making a seperate variable equal one of the list every time.\nLet’s say we wanted to create the example above.</p>\n<p><em>loop.py</em></p>\n<p>This will print Hello with a .3 second delay 100 times. This is just one way to use it, but it is usually used like this:</p>\n<p><em>loop2.py</em></p>\n<p><a href=\"https://storage.googleapis.com/replit/images/1539649280875_37d22e6d49e8e8fbc453631def345387.pn\">https://storage.googleapis.com/replit/images/1539649280875_37d22e6d49e8e8fbc453631def345387.pn</a></p>\n<h4>while Loop</h4>\n<p>The while loop runs the code while something stays true. You would put while &#x3C;expression>. Every time the loop runs, it evaluates if the expression is True. It it is, it runs the code, if not it continues outside of the loop. For example:</p>\n<p><em>while.py</em></p>\n<p>Or you could do:</p>\n<p><em>while2.py</em></p>\n<h3>New: if Statement</h3>\n<p>The if statement allows you to check if something is True. If so, it runs the code, if not, it continues on. It is kind of like a while loop, but it executes <strong>only once</strong>. An if statement is written:</p>\n<p><em>if.py</em></p>\n<p>Now, you may think that it would be better if you could make it print only one message. Not as many that are True. You can do that with an elif statement:</p>\n<p><em>elif.py</em></p>\n<p>Now, you may wonder how to run code if none work. Well, there is a simple statement called else:</p>\n<p><em>else.py</em></p>\n<h3>New: Functions (def)</h3>\n<p>So far, you have only seen how to use functions other people have made. Let use the example that you want to print the a random number between 1 and 9, and print different text every time.\nIt is quite tiring to type:</p>\n<p>Characters: 389</p>\n<p><em>nofunc.py</em></p>\n<p>Now with functions, you can seriously lower the amount of characters:</p>\n<p>Characters: 254</p>\n<p><em>functions.py</em></p>\n<h3>Project Based Learning:</h3>\n<p>The following is a modified version of a tutorial posted By: <a href=\"https://replit.com/@InvisibleOne\">InvisibleOne </a></p>\n<p>I would cite the original tutorial it’s self but at the time of this writing I can no longer find it on his repl.it profile and so the only reference I have are my own notes from following the tutorial when I first found it.</p>\n<h3>1. Adventure Story</h3>\n<p>The first thing you need with an adventure story is a great storyline, something that is exciting and fun. The idea is, that at each pivotal point in the story, you give the player the opportunity to make a choice.\nFirst things first, let’s import the stuff that we need, like this:</p>\n<p>Now, we need some variables to hold some of the player data.</p>\n<p>Ok, now we have the player’s name and nickname, let’s welcome them to the game</p>\n<p>Now for the story. The most important part of all stories is the introduction, so let’s print our introduction</p>\n<p>Now, we’ll give the player their first choice</p>\n<p>There you have it, a pretty simple choose your own ending story. You can make it as complex or uncomplex as you like.</p>\n<h3>2. TEXT ENCODER</h3>\n<p>Ever make secret messages as a kid? I used to. Anyways, here’s the way you can make a program to encode messages! It’s pretty simple. First things first, let’s get the message the user wants to encode, we’ll use input() for that:</p>\n<p>Now we need to split that string into a list of characters, this part is a bit more complicated.</p>\n<p>Now we need to convert the characters into code, well do this with a for loop:</p>\n<p>Once we’ve encoded the text, we’ll print it back for the user</p>\n<p>And if you want to decode something, it is this same process but in reverse!</p>\n<h3>3. Guess my Number</h3>\n<p>Number guessing games are fun and pretty simple, all you need are a few loops. To start, we need to import random.</p>\n<p>That is pretty simple. Now we’ll make a list with the numbers were want available for the game</p>\n<p>Next, we get a random number from the list</p>\n<p>Now, we need to ask the user for input, we’ll to this with a while loop</p>\n<p>Have fun with this!</p>\n<h3>4. Notes</h3>\n<p>Here is a more advanced project, but still pretty easy. This will be using a txt file to save some notes. The first thing we need to do is to create a txt file in your repl, name it ‘notes.txt’\nNow, to open a file in python we use open(‘filename’, type) The type can be ‘r’ for read, or ‘w’ for write. There is another option, but we won’t be using that here. Now, the first thing we are going to do is get what the user would like to save:</p>\n<p>Now we’ll open our file and save that text</p>\n<p>There we go, now the information is in the file. Next, we’ll retrieve it</p>\n<p>There we go, that’s how you can open files and close files with python</p>\n<h3>5. Random Dare Generator</h3>\n<p>Who doesn’t love a good dare? Here is a program that can generate random dares. The first thing we’ll need to do is as always, import random. Then we’ll make some lists of dares</p>"},{"url":"/blog/python-for-js-dev/","relativePath":"blog/python-for-js-dev.md","relativeDir":"blog","base":"python-for-js-dev.md","name":"python-for-js-dev","frontmatter":{"title":"Python Resources","date":"2021-06-03","image":"images/python.png","seo":{"title":"python","description":"Commodo ante vis placerat interdum massa massa primis","extra":[{"name":"og:type","value":"article","keyName":"property"},{"name":"og:title","value":"python","keyName":"property"},{"name":"og:description","value":"Commodo ante vis placerat interdum massa massa primis","keyName":"property"},{"name":"og:image","value":"images/python.png","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"python"},{"name":"twitter:description","value":"Commodo ante vis placerat interdum massa massa primis"},{"name":"twitter:image","value":"images/python.png","relativeUrl":true}]},"template":"post","thumb_image":"images/superb-triceratops.jpg","thumb_image_alt":"python logo"},"html":"<h1>Python Study Guide for a JavaScript Programmer\n</h1>\n<p><img src=\"https://miro.medium.com/max/1970/1*3V9VOfPk_hrFdbEAd3j-QQ.png\"><img src=\"https://miro.medium.com/max/52/0*eC4EvZcv6hhH88jX.png?q=20\"><img src=\"https://miro.medium.com/max/647/0*eC4EvZcv6hhH88jX.png\"><img src=\"https://miro.medium.com/max/60/0*Ez_1PZ93N4FfvkRr.png?q=20\"><img src=\"https://miro.medium.com/max/608/0*Ez_1PZ93N4FfvkRr.png\"><img src=\"https://miro.medium.com/max/60/0*eE3E5H0AoqkhqK1z.png?q=20\"><img src=\"https://miro.medium.com/max/1648/0*eE3E5H0AoqkhqK1z.png\"><img src=\"https://miro.medium.com/max/60/0*Q0CMqFd4PozLDFPB.png?q=20\"><img src=\"https://miro.medium.com/max/1638/0*Q0CMqFd4PozLDFPB.png\"><img src=\"https://miro.medium.com/max/3216/0*HQpndNhm1Z_xSoHb.png\"><img src=\"https://miro.medium.com/max/60/0*qHzGRLTOMTf30miT.png?q=20\"><img src=\"https://miro.medium.com/max/1614/0*qHzGRLTOMTf30miT.png\">[</p>\n<p>](<a href=\"https://github.com/bgoonz\">https://github.com/bgoonz</a>)</p>\n<iframe src=\"https://py-prac-42.netlify.app/\" width=\"100%\" height=\"1200px\"><iframe>\n<h1>Applications of Tutorial &#x26; Cheat Sheet Respectivley (At Bottom Of Tutorial):</h1>\n<h1>Basics</h1>\n<ul>\n<li><strong>PEP8</strong> : Python Enhancement Proposals, style-guide for Python.</li>\n<li>print is the equivalent of console.log.</li>\n</ul>\n<blockquote>\n<p>‘print() == console.log()’</p>\n</blockquote>\n<h1># is used to make comments in your code.</h1>\n<blockquote>\n<p><em>Python has a built in help function that let’s you see a description of the source code without having to navigate to it… “-SickNasty … Autor Unknown”</em></p>\n</blockquote>\n<h1>Numbers</h1>\n<ul>\n<li>Python has three types of numbers:</li>\n<li><strong>Integer</strong></li>\n<li><strong>Positive and Negative Counting Numbers.</strong></li>\n</ul>\n<p>No Decimal Point</p>\n<blockquote>\n<p>Created by a literal non-decimal point number … <strong>or</strong> … with the <em>int()</em> constructor.</p>\n</blockquote>\n<p><strong>3. Complex Numbers</strong></p>\n<blockquote>\n<p>Consist of a real part and imaginary part.</p>\n</blockquote>\n<h2>Boolean is a subtype of integer in Python.🤷‍♂️</h2>\n<blockquote>\n<p>If you came from a background in JavaScript and learned to accept the premise(s) of the following meme…</p>\n</blockquote>\n<blockquote>\n<p>Than I am sure you will find the means to suspend your disbelief.</p>\n</blockquote>\n<h1>KEEP IN MIND:</h1>\n<blockquote>\n<p><strong>The i is switched to a j in programming.</strong></p>\n</blockquote>\n<p>T*his is because the letter i is common place as the de facto index for any and all enumerable entities so it just makes sense not to compete for name-**space *<em>when there’s another 25 letters that don’t get used for every loop under the sun. My most medium apologies to Leonhard Euler.</em></p>\n<ul>\n<li><strong>Type Casting</strong> : The process of converting one number to another.</li>\n</ul>\n<p><strong>The arithmetic operators are the same between JS and Python, with two additions:</strong></p>\n<ul>\n<li><em>“**” : Double asterisk for exponent.</em></li>\n<li><em>“//” : Integer Division.</em></li>\n<li><strong>There are no spaces between math operations in Python.</strong></li>\n<li><strong>Integer Division gives the other part of the number from Module; it is a way to do round down numbers replacing Math.floor() in JS.</strong></li>\n<li><strong>There are no ++ and -- in Python, the only shorthand operators are:</strong></li>\n</ul>\n<h1>Strings</h1>\n<ul>\n<li>Python uses both single and double quotes.</li>\n<li>You can escape strings like so 'Jodi asked, \"What\\'s up, Sam?\"'</li>\n<li>Multiline strings use triple quotes.</li>\n</ul>\n<p><strong>Use the len() function to get the length of a string.</strong></p>\n<h1><strong>Python uses zero-based indexing</strong></h1>\n<h2>Python allows negative indexing (thank god!)</h2>\n<ul>\n<li>Python let’s you use ranges</li>\n</ul>\n<p>You can think of this as roughly equivalent to the slice method called on a JavaScript object or string… *(mind you that in JS … strings are wrapped in an object (under the hood)… upon which the string methods are actually called. As a immutable privative type <strong>by textbook definition</strong>, a string literal could not hope to invoke most of it’s methods without violating the state it was bound to on initialization if it were not for this bit of syntactic sugar.)*</p>\n<ul>\n<li>The end range is exclusive just like slice in JS.</li>\n</ul>\n<!---->\n<ul>\n<li>The index string function is the equiv. of indexOf() in JS</li>\n</ul>\n<!---->\n<ul>\n<li>The count function finds out how many times a substring appears in a string… pretty nifty for a hard coded feature of the language.</li>\n</ul>\n<!---->\n<ul>\n<li><strong>You can use + to concatenate strings, just like in JS.</strong></li>\n<li><strong>You can also use “*” to repeat strings or multiply strings.</strong></li>\n<li><strong>Use the format() function to use placeholders in a string to input values later on.</strong></li>\n</ul>\n<!---->\n<ul>\n<li>*Shorthand way to use format function is:\n*print(f'Your name is {first<em>name} {last</em>name}')</li>\n</ul>\n<h2>Some useful string methods.</h2>\n<ul>\n<li><strong>Note that in JS join is used on an Array, in Python it is used on String.</strong></li>\n</ul>\n<!---->\n<ul>\n<li>There are also many handy testing methods.</li>\n</ul>\n<h1>Variables and Expressions</h1>\n<ul>\n<li><strong>Duck-Typing</strong> : Programming Style which avoids checking an object’s type to figure out what it can do.</li>\n<li>Duck Typing is the fundamental approach of Python.</li>\n<li>Assignment of a value automatically declares a variable.</li>\n</ul>\n<!---->\n<ul>\n<li><strong><em>You can chain variable assignments to give multiple var names the same value.</em></strong></li>\n</ul>\n<h2>Use with caution as this is highly unreadable</h2>\n<h2>The value and type of a variable can be re-assigned at any time.</h2>\n<ul>\n<li>*NaN does not exist in Python, but you can 'create' it like so:\n<strong>print(float(\"nan\"))*</strong></li>\n<li><em>Python replaces null with none.</em></li>\n<li><strong>*none is an object</strong> and can be directly assigned to a variable.*</li>\n</ul>\n<blockquote>\n<p>Using none is a convenient way to check to see why an action may not be operating correctly in your program.</p>\n</blockquote>\n<h1>Boolean Data Type</h1>\n<ul>\n<li>One of the biggest benefits of Python is that it reads more like English than JS does.</li>\n</ul>\n<!---->\n<ul>\n<li>By default, Python considers an object to be true UNLESS it is one of the following:</li>\n<li>Constant None or False</li>\n<li>Zero of any numeric type.</li>\n<li>Empty Sequence or Collection.</li>\n<li>True and False must be capitalized</li>\n</ul>\n<h1>Comparison Operators</h1>\n<ul>\n<li>Python uses all the same equality operators as JS.</li>\n<li>In Python, equality operators are processed from left to right.</li>\n<li>Logical operators are processed in this order:</li>\n<li><strong>NOT</strong></li>\n<li><strong>AND</strong></li>\n<li><strong>OR</strong></li>\n</ul>\n<blockquote>\n<p>Just like in JS, you can use parentheses to change the inherent order of operations.</p>\n<p><strong>Short Circuit</strong> : Stopping a program when a true or false has been reached.</p>\n</blockquote>\n<h1>Identity vs Equality</h1>\n<ul>\n<li>In the Python community it is better to use is and is not over == or !=</li>\n</ul>\n<h1>If Statements</h1>\n<blockquote>\n<p>Remember the order of elif statements matter.</p>\n</blockquote>\n<h1>While Statements</h1>\n<ul>\n<li>Break statement also exists in Python.</li>\n</ul>\n<!---->\n<ul>\n<li>As are continue statements</li>\n</ul>\n<h1>Try/Except Statements</h1>\n<ul>\n<li>Python equivalent to try/catch</li>\n</ul>\n<!---->\n<ul>\n<li>You can name an error to give the output more specificity.</li>\n</ul>\n<!---->\n<ul>\n<li>You can also use the pass commmand to by pass a certain error.</li>\n</ul>\n<!---->\n<ul>\n<li>The pass method won't allow you to bypass every single error so you can chain an exception series like so:</li>\n</ul>\n<!---->\n<ul>\n<li>You can use an else statement to end a chain of except statements.</li>\n</ul>\n<!---->\n<ul>\n<li>finally is used at the end to clean up all actions under any circumstance.</li>\n</ul>\n<!---->\n<ul>\n<li>Using duck typing to check to see if some value is able to use a certain method.</li>\n</ul>\n<h1>Pass</h1>\n<ul>\n<li>Pass Keyword is required to write the JS equivalent of :</li>\n</ul>\n<h1>Functions</h1>\n<ul>\n<li><strong>Function definition includes:</strong></li>\n<li><strong>The def keyword</strong></li>\n<li><strong>The name of the function</strong></li>\n<li><strong>A list of parameters enclosed in parentheses.</strong></li>\n<li><strong>A colon at the end of the line.</strong></li>\n<li><strong>One tab indentation for the code to run.</strong></li>\n<li><strong>You can use default parameters just like in JS</strong></li>\n</ul>\n<h2><strong>Keep in mind, default parameters must always come after regular parameters.</strong></h2>\n<ul>\n<li><em>You can specify arguments by name without destructuring in Python.</em></li>\n</ul>\n<!---->\n<ul>\n<li>The lambda keyword is used to create anonymous functions and are supposed to be one-liners.</li>\n</ul>\n<p>toUpper = lambda s: s.upper()</p>\n<h1>Notes</h1>\n<h2>Formatted Strings</h2>\n<blockquote>\n<p>Remember that in Python join() is called on a string with an array/list passed in as the argument.\nPython has a very powerful formatting engine.\nformat() is also applied directly to strings.</p>\n</blockquote>\n<h1>Comma Thousands Separator</h1>\n<h1>Date and Time</h1>\n<h1>Percentage</h1>\n<h1>Data Tables</h1>\n<p><strong>Python can be used to display html, css, and JS.</strong>\n<em>It is common to use Python as an API (Application Programming Interface)</em></p>\n<h2>Structured Data</h2>\n<h2>Sequence : The most basic data structure in Python where the index determines the order.</h2>\n<blockquote>\n<p>List\nTuple\nRange\nCollections : Unordered data structures, hashable values.</p>\n</blockquote>\n<h2>Dictionaries\nSets</h2>\n<h2>Iterable : Generic name for a sequence or collection; any object that can be iterated through.</h2>\n<h2>Can be mutable or immutable.\nBuilt In Data Types</h2>\n<h1>Lists are the python equivalent of arrays.</h1>\n<h1>You can instantiate</h1>\n<h2>Test if a value is in a list.</h2>\n<h2>Instantiated with parentheses</h2>\n<h2>Sometimes instantiated without</h2>\n<h2>Tuple() built in can be used to convert other data into a tuple</h2>\n<h2>Ranges : A list of numbers which can’t be changed; often used with for loops.</h2>\n<p><strong>Declared using one to three parameters</strong>.</p>\n<blockquote>\n<p>Start : opt. default 0, first # in sequence.\nStop : required next number past the last number in the sequence.\nStep : opt. default 1, difference between each number in the sequence.</p>\n</blockquote>\n<h2>Dictionaries : Mappable collection where a hashable value is used as a key to ref. an object stored in the dictionary.</h2>\n<h2>Mutable.</h2>\n<p><strong><em>Declared with curly braces of the built in dict()</em></strong></p>\n<blockquote>\n<p><em>Benefit of dictionaries in Python is that it doesn’t matter how it is defined, if the keys and values are the same the dictionaries are considered equal.</em></p>\n</blockquote>\n<p><strong>Use the in operator to see if a key exists in a dictionary.</strong></p>\n<p>S<strong>ets : Unordered collection of distinct objects; objects that need to be hashable.</strong></p>\n<blockquote>\n<p><em>Always be unique, duplicate items are auto dropped from the set.</em></p>\n</blockquote>\n<h2>Common Uses:</h2>\n<blockquote>\n<p>Removing Duplicates\nMembership Testing\nMathematical Operators: Intersection, Union, Difference, Symmetric Difference.</p>\n</blockquote>\n<p><strong>Standard Set is mutable, Python has a immutable version called frozenset.\nSets created by putting comma seperated values inside braces:</strong></p>\n<h2>Also can use set constructor to automatically put it into a set.</h2>\n<p><strong>filter(function, iterable) : creates new iterable of the same type which includes each item for which the function returns true.</strong></p>\n<p><strong>map(function, iterable) : creates new iterable of the same type which includes the result of calling the function on every item of the iterable.</strong></p>\n<p><strong>sorted(iterable, key=None, reverse=False) : creates a new sorted list from the items in the iterable.</strong></p>\n<p><strong>Output is always a list</strong></p>\n<p><strong>key: opt function which coverts and item to a value to be compared.</strong></p>\n<p><strong>reverse: optional boolean.</strong></p>\n<p><strong>enumerate(iterable, start=0) : starts with a sequence and converts it to a series of tuples</strong></p>\n<h2>(0, ‘First’), (1, ‘Second’), (2, ‘Third’), (3, ‘Fourth’)</h2>\n<h2>(1, ‘First’), (2, ‘Second’), (3, ‘Third’), (4, ‘Fourth’)</h2>\n<blockquote>\n<p>zip(*iterables) : creates a zip object filled with tuples that combine 1 to 1 the items in each provided iterable.\nFunctions that analyze iterable</p>\n</blockquote>\n<p><strong>len(iterable) : returns the count of the number of items.</strong></p>\n<p><strong>max(*args, key=None) : returns the largest of two or more arguments.</strong></p>\n<p><strong>max(iterable, key=None) : returns the largest item in the iterable.</strong></p>\n<p><em>key optional function which converts an item to a value to be compared.\nmin works the same way as max</em></p>\n<p><strong>sum(iterable) : used with a list of numbers to generate the total.</strong></p>\n<p><em>There is a faster way to concatenate an array of strings into one string, so do not use sum for that.</em></p>\n<p><strong>any(iterable) : returns True if any items in the iterable are true.</strong></p>\n<p><strong>all(iterable) : returns True is all items in the iterable are true.</strong></p>\n<h1>Working with dictionaries</h1>\n<p><strong>dir(dictionary) : returns the list of keys in the dictionary.\nWorking with sets</strong></p>\n<p><strong>Union : The pipe | operator or union(*sets) function can be used to produce a new set which is a combination of all elements in the provided set.</strong></p>\n<h2>Intersection : The &#x26; operator ca be used to produce a new set of only the elements that appear in all sets.</h2>\n<p><strong>Symmetric Difference : The ^ operator can be used to produce a new set of only the elements that appear in exactly one set and not in both.</strong></p>\n<h1><strong>For Statements\nIn python, there is only one for loop.</strong></h1>\n<p>Always Includes:</p>\n<blockquote>\n<p>1. The for keyword\n2. A variable name\n3. The ‘in’ keyword\n4. An iterable of some kid\n5. A colon\n6. On the next line, an indented block of code called the for clause.</p>\n</blockquote>\n<p><strong>You can use break and continue statements inside for loops as well.</strong></p>\n<p><strong>You can use the range function as the iterable for the for loop.</strong></p>\n<p><strong><em>Common technique is to use the len() on a pre-defined list with a for loop to iterate over the indices of the list.</em></strong></p>\n<p><strong>You can loop and destructure at the same time.</strong></p>\n<blockquote>\n<p>Prints 1, 2</p>\n<p>Prints 3, 4</p>\n<p>Prints 5, 6</p>\n</blockquote>\n<p><strong>You can use values() and keys() to loop over dictionaries.</strong></p>\n<p><em>Prints red</em></p>\n<p><em>Prints 42</em></p>\n<p><em>Prints color</em></p>\n<p><em>Prints age</em></p>\n<p><strong>For loops can also iterate over both keys and values.</strong></p>\n<p><strong>Getting tuples</strong></p>\n<p><em>Prints (‘color’, ‘red’)</em></p>\n<p><em>Prints (‘age’, 42)</em></p>\n<p><em>Destructuring to values</em></p>\n<p><em>Prints Key: age Value: 42</em></p>\n<p><em>Prints Key: color Value: red</em></p>\n<p><strong>Looping over string</strong></p>\n<p><strong>When you order arguments within a function or function call, the args need to occur in a particular order:</strong></p>\n<p><em>formal positional args.</em></p>\n<p>*args</p>\n<p><em>keyword args with default values</em></p>\n<p>**kwargs</p>\n<h1><strong>Importing in Python</strong></h1>\n<p><strong>Modules are similar to packages in Node.js</strong>\nCome in different types:</p>\n<p>Built-In,</p>\n<p>Third-Party,</p>\n<p>Custom.</p>\n<p><strong>All loaded using import statements.</strong></p>\n<h1><strong>Terms</strong></h1>\n<blockquote>\n<p>module : Python code in a separate file.\npackage : Path to a directory that contains modules.\n<a href=\"http://init.py/\"><strong>init.py</strong></a> : Default file for a package.\nsubmodule : Another file in a module’s folder.\nfunction : Function in a module.</p>\n</blockquote>\n<p><strong>A module can be any file but it is usually created by placing a special file init.py into a folder. pic</strong></p>\n<p><em>Try to avoid importing with wildcards in Python.</em></p>\n<p><em>Use multiple lines for clarity when importing.</em></p>\n<h1>Watching Out for Python 2</h1>\n<p><strong>Python 3 removed &#x3C;> and only uses !=</strong></p>\n<p><strong>format() was introduced with P3</strong></p>\n<p><strong>All strings in P3 are unicode and encoded.\nmd5 was removed.</strong></p>\n<p><strong>ConfigParser was renamed to configparser\nsets were killed in favor of set() class.</strong></p>\n<h2><strong>print was a statement in P2, but is a function in P3.</strong></h2>\n<h1>Topics revisited (in python syntax)</h1>\n<h1>Cheat Sheet:</h1>\n<h2>If you found this guide helpful feel free to checkout my github/gists where I host similar content:</h2>\n<p><a href=\"https://gist.github.com/bgoonz\">bgoonz’s gists · GitHub</a></p>\n<p>Or Checkout my personal Resource Site:</p>\n<h1>Python Cheat Sheet:</h1>\n<h1>If you found this guide helpful feel free to checkout my GitHub/gists where I host similar content:</h1>"},{"url":"/docs/gallery/","relativePath":"docs/gallery.md","relativeDir":"docs","base":"gallery.md","name":"gallery","frontmatter":{"title":"my gists","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"Gist Archive","description":"A collection of my github gists","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h2>Gist Archive</h2>\n<h2>Gist Archive</h2>\n<iframe src=\"https://bgoonzgist.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>"},{"url":"/docs/","relativePath":"docs/index.md","relativeDir":"docs","base":"index.md","name":"index","frontmatter":{"title":"Docs","seo":{"title":"Web Dev Hub","description":"Application, Back-end, Bootstrap, Browser, Caching, Code, CSS, Content Management System (CMS) , Cookies, Domain Name ,Frameworks, Front-end, JavaScript, Python","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Web Dev Hub","keyName":"property"},{"name":"og:description","value":"Docs Home","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Web Dev Hub"},{"name":"twitter:description","value":"Docs Home"}]},"template":"docs","weight":900,"excerpt":"docs quick reference"},"html":"<h1>Go To Sitemap: <a href=\"./docs/sitemap/\">Go Now --></a></h1>\n<hr>\n<div id=\"search\"></div>\n<p>&#x3C;div id=\"search\"></div></p>\n<h1>Actual Docs:</h1>\n<br>\n<br>\n       <div id=\"search\" />\n<br>\n               <div id=\"search\" className=\"inner\"></div>\n<br>\n<h1>  Docs</h1>\n<br>\n<iframe class=\"inner\" src=\"https://docs42.netlify.app/#C:/MY-WEB-DEV/__NEW_GIT/DOCS/docs-collection\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<hr>\n<h2>Doc Websites &#x26; Repos</h2>\n<ul>\n<li><a href=\"https://github.com/bgoonz/PYTHON_PRAC\">Python Practice</a></li>\n<li><a href=\"https://lambda-resources.netlify.app/\">Lambda Bootcamp Website</a></li>\n<li><a href=\"https://github.com/bgoonz/React_Notes_V3\">React Notes</a></li>\n<li><a href=\"https://github.com/bgoonz/Project-Showcase\">Project Showcase</a></li>\n<li><a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\">Data Structures &#x26; Algorithms</a></li>\n<li><a href=\"https://github.com/bgoonz/Lambda-Resource-Static-Assets\">Lambda Site Static Content Server</a></li>\n<li><a href=\"https://github.com/bgoonz/mini-project-showcase\">Mini-Project Showcase</a></li>\n<li><a href=\"https://github.com/bgoonz/Useful-Snippets-js\">Useful Snippets</a></li>\n<li><a href=\"https://github.com/bgoonz/Markdown-Templates\">Markdown Templates</a></li>\n<li><a href=\"https://github.com/bgoonz/zumzi-chat-messenger\">Zumzi Video Conferencing App (mesibo api backend)</a></li>\n</ul>"},{"url":"/docs/search/","relativePath":"docs/search.md","relativeDir":"docs","base":"search.md","name":"search","frontmatter":{"title":"lorem-ipsum","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h2>Search:</h2>\n<hr>\n<h1>Actual Docs:</h1>\n<br>\n<br>\n<br>\n<br>\n<h1>  Docs</h1>\n<br>\n<div id=\"search\"></div>\n<div id=\"search\" />"},{"url":"/docs/about/hobbies-n-interests/","relativePath":"docs/about/hobbies-n-interests.md","relativeDir":"docs/about","base":"hobbies-n-interests.md","name":"hobbies-n-interests","frontmatter":{"title":"My Hobbies & Interests","sections":[{"title":"My Hobbies & Interests","section_id":"links","subtitle":"lorem-ipsum","col_number":"three","type":"section_docs"},{"title":"lorem-ipsum","section_id":"lorem-ipsum","subtitle":"lorem-ipsum","col_number":"three","grid_items":[],"type":"section_grid"}],"seo":{"title":"","description":"","robots":[],"extra":[]},"template":"advanced"},"html":""},{"url":"/docs/about/eng-portfolio/","relativePath":"docs/about/eng-portfolio.md","relativeDir":"docs/about","base":"eng-portfolio.md","name":"eng-portfolio","frontmatter":{"title":"Engineering Portfolio","weight":2,"seo":{"title":"Engineering Portfolio","description":"This is an Engineering Portfolio page that contains a powerpoint portfolio of my work as an electrical engineer!","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Engineering Portfolio","keyName":"property"},{"name":"og:description","value":"This is the Engineering Portfolio page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Engineering Portfolio"},{"name":"twitter:description","value":"This is the Engineering Portfolio page"}]},"template":"docs"},"html":"<h1>Portfolio</h1>\n<iframe src=\"https://onedrive.live.com/embed?resid=D21009FDD967A241%21459307&amp;authkey=%21ABwIG4Hz-hsgPLU&amp;em=2&amp;wdAr=1.7777777777777777&amp;wdEaa=1\" width=\"800px\" height=\"691px\" frameborder=\"0\">This is an embedded <a target=\"_blank\" href=\"https://office.com\">Microsoft Office</a> presentation, powered by <a target=\"_blank\" href=\"https://office.com/webapps\">Office</a>.</iframe>"},{"url":"/docs/privacy-policy/","relativePath":"docs/privacy-policy.md","relativeDir":"docs","base":"privacy-policy.md","name":"privacy-policy","frontmatter":{"title":"lorem-ipsum","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<pre><code>PRIVACY NOTICE\n</code></pre>\n<ul>\n<li>Visit our website at <a href=\"https://bgoonz-blog.netlify.app/\">https://bgoonz-blog.netlify.app/</a></li>\n</ul>\n<!---->\n<ul>\n<li>Use our Facebook application — <a href=\"https://bgoonz-blog.netlify.app/\">https://bgoonz-blog.netlify.app/</a></li>\n</ul>\n<!---->\n<ul>\n<li>Engage with us in other related ways ― including any sales, marketing, or events</li>\n</ul>\n<!---->\n<ul>\n<li>\"<strong>Website</strong>,\" we are referring to any website of ours that references or links to this policy</li>\n</ul>\n<!---->\n<ul>\n<li>\"<strong>App</strong>,\" we are referring to any application of ours that references or links to this policy, including any listed above</li>\n</ul>\n<!---->\n<ul>\n<li>\"<strong>Services</strong>,\" we are referring to our Website, App, and other related services, including any sales, marketing, or events</li>\n</ul>\n<!---->\n<ul>\n<li><strong>To facilitate account creation and logon process.</strong> If you choose to link your account with us to a third-party account (such as your Google or Facebook account), we use the information you allowed us to collect from those third parties to facilitate account creation and logon process for the performance of the contract.</li>\n</ul>\n<!---->\n<ul>\n<li><strong>To post testimonials.</strong> We post testimonials on our Services that may contain personal information. Prior to posting a testimonial, we will obtain your consent to use your name and the content of the testimonial. If you wish to update, or delete your testimonial, please contact us at __________ and be sure to include your name, testimonial location, and contact information.</li>\n</ul>\n<!---->\n<ul>\n<li>**Request feedback. **We may use your information to request feedback and to contact you about your use of our Services.</li>\n</ul>\n<!---->\n<ul>\n<li><strong>To enable user-to-user communications.</strong> We may use your information in order to enable user-to-user communications with each user's consent.</li>\n</ul>\n<!---->\n<ul>\n<li>**To manage user accounts. **We may use your information for the purposes of managing our account and keeping it in working order.</li>\n</ul>\n<!---->\n<ul>\n<li>**To send administrative information to you. **We may use your personal information to send you product, service and new feature information and/or information about changes to our terms, conditions, and policies.</li>\n</ul>\n<!---->\n<ul>\n<li>**To protect our Services. **We may use your information as part of our efforts to keep our Services safe and secure (for example, for fraud monitoring and prevention).</li>\n</ul>\n<!---->\n<ul>\n<li><strong>To enforce our terms, conditions and policies for business purposes, to comply with legal and regulatory requirements or in connection with our contract.</strong></li>\n</ul>\n<!---->\n<ul>\n<li>**To respond to legal requests and prevent harm. **If we receive a subpoena or other legal request, we may need to inspect the data we hold to determine how to respond.</li>\n<li>**Fulfill and manage your orders. **We may use your information to fulfill and manage your orders, payments, returns, and exchanges made through the Services.</li>\n<li><strong>Administer prize draws and competitions.</strong> We may use your information to administer prize draws and competitions when you elect to participate in our competitions.</li>\n<li><strong>To deliver and facilitate delivery of services to the user.</strong> We may use your information to provide you with the requested service.</li>\n<li><strong>To respond to user inquiries/offer support to users.</strong> We may use your information to respond to your inquiries and solve any potential issues you might have with the use of our Services.</li>\n</ul>\n<!---->\n<ul>\n<li><strong>To send you marketing and promotional communications.</strong> We and/or our third-party marketing partners may use the personal information you send to us for our marketing purposes, if this is in accordance with your marketing preferences. For example, when expressing an interest in obtaining information about us or our Services, subscribing to marketing or otherwise contacting us, we will collect personal information from you. You can opt-out of our marketing emails at any time (see the \"<a href=\"https://cdpn.io/bgoonz/fullpage/LYLJZrW#privacyrights\">WHAT ARE YOUR PRIVACY RIGHTS?</a>\" below).</li>\n</ul>\n<!---->\n<ul>\n<li><strong>Deliver targeted advertising to you.</strong> We may use your information to develop and display personalized content and advertising (and work with third parties who do so) tailored to your interests and/or location and to measure its effectiveness.</li>\n</ul>\n<!---->\n<ul>\n<li><strong>Consent:</strong> We may process your data if you have given us specific consent to use your personal information for a specific purpose.</li>\n</ul>\n<!---->\n<ul>\n<li><strong>Legitimate Interests:</strong> We may process your data when it is reasonably necessary to achieve our legitimate business interests.</li>\n</ul>\n<!---->\n<ul>\n<li><strong>Performance of a Contract:</strong> Where we have entered into a contract with you, we may process your personal information to fulfill the terms of our contract.</li>\n</ul>\n<!---->\n<ul>\n<li><strong>Legal Obligations:</strong> We may disclose your information where we are legally required to do so in order to comply with applicable law, governmental requests, a judicial proceeding, court order, or legal process, such as in response to a court order or a subpoena (including in response to public authorities to meet national security or law enforcement requirements).</li>\n</ul>\n<!---->\n<ul>\n<li><strong>Vital Interests:</strong> We may disclose your information where we believe it is necessary to investigate, prevent, or take action regarding potential violations of our policies, suspected fraud, situations involving potential threats to the safety of any person and illegal activities, or as evidence in litigation in which we are involved.</li>\n</ul>\n<!---->\n<ul>\n<li><strong>Business Transfers.</strong> We may share or transfer your information in connection with, or during negotiations of, any merger, sale of company assets, financing, or acquisition of all or a portion of our business to another company.</li>\n</ul>\n<!---->\n<ul>\n<li>Receiving help through our customer support channels;</li>\n</ul>\n<!---->\n<ul>\n<li>Participation in customer surveys or contests; and</li>\n</ul>\n<!---->\n<ul>\n<li>Facilitation in the delivery of our Services and to respond to your inquiries.</li>\n</ul>\n<!---->\n<ul>\n<li>whether we collect and use your personal information;</li>\n</ul>\n<!---->\n<ul>\n<li>the categories of personal information that we collect;</li>\n</ul>\n<!---->\n<ul>\n<li>the purposes for which the collected personal information is used;</li>\n</ul>\n<!---->\n<ul>\n<li>whether we sell your personal information to third parties;</li>\n</ul>\n<!---->\n<ul>\n<li>the categories of personal information that we sold or disclosed for a business purpose;</li>\n</ul>\n<!---->\n<ul>\n<li>the categories of third parties to whom the personal information was sold or disclosed for a business purpose; and</li>\n</ul>\n<!---->\n<ul>\n<li>the business or commercial purpose for collecting or selling personal information.</li>\n</ul>\n<!---->\n<ul>\n<li>you may object to the processing of your personal data</li>\n</ul>\n<!---->\n<ul>\n<li>you may request correction of your personal data if it is incorrect or no longer relevant, or ask to restrict the processing of the data</li>\n</ul>\n<!---->\n<ul>\n<li>you can designate an authorized agent to make a request under the CCPA on your behalf. We may deny a request from an authorized agent that does not submit proof that they have been validly authorized to act on your behalf in accordance with the CCPA.</li>\n</ul>\n<!---->\n<ul>\n<li>you may request to opt-out from future selling of your personal information to third parties. Upon receiving a request to opt-out, we will act upon the request as soon as feasibly possible, but no later than 15 days from the date of the request submission.</li>\n</ul>"},{"url":"/docs/about/intrests/","relativePath":"docs/about/intrests.md","relativeDir":"docs/about","base":"intrests.md","name":"intrests","frontmatter":{"title":"Youtube","weight":1,"excerpt":"youtube","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/xGZSWvFess8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<iframe \n<iframe"},{"url":"/docs/sitemap/","relativePath":"docs/sitemap.md","relativeDir":"docs","base":"sitemap.md","name":"sitemap","frontmatter":{"title":"Navigation","weight":900,"excerpt":"Navigation quick reference","seo":{"title":"Web Dev Hub","description":"This website contains docs, blogs, a personal portfolio spread out across multiple pages as well as interactive animations and tools.","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Web Dev Hub","keyName":"property"},{"name":"og:description","value":"Navigation Home","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Web Dev Hub"},{"name":"twitter:description","value":"Navigation Home"},{"name":"og:image","value":"images/background.gif","keyName":"property","relativeUrl":true}]},"template":"docs"},"html":"<h1><span style=\"align-self:center;margin:auto; font-family:Papyrus; font-size:2em;\">Sitemap:</span></h1>\n<hr>\n<div id=\"search\"></div>\n<h1>- <a href=\"https://bgoonz-blog.netlify.app/\"><strong>✅HOME🌍</strong></a></h1>\n<hr>\n<h3><a href=\"https://bgoonz-blog.netlify.app/blog/\"><strong>✅blog/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/blog/awesome-graphql/\"><strong>✅blog/awesome-graphql/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/blog/big-o-complexity/\"><strong>✅blog/big-o-complexity/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/blog/blog-archive/\"><strong>✅blog/blog-archive/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/blog/blogwcomments/\"><strong>✅blog/blogwcomments/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/blog/data-structures/\"><strong>✅blog/data-structures/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/blog/git-gateway/\"><strong>✅blog/git-gateway/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/blog/interview-questions-js/\"><strong>✅blog/interview-questions-js/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/blog/my-medium/\"><strong>✅blog/my-medium/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/blog/netlify-cms/\"><strong>✅blog/netlify-cms/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/blog/platform-docs/\"><strong>✅blog/platform-docs/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/blog/python-for-js-dev/\"><strong>✅blog/python-for-js-dev/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/blog/python-resources/\"><strong>✅blog/python-resources/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/blog/web-dev-trends/\"><strong>✅blog/web-dev-trends/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/blog/web-scraping/\"><strong>✅blog/web-scraping/🌍</strong></a></h3>\n<hr>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/\"><strong>✅⇒🌍</strong></a></h3>\n<hr>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/about/\"><strong>✅⇒about/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/about/eng-portfolio/\"><strong>✅⇒about/eng-portfolio/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/about/intrests/\"><strong>✅⇒about/intrests/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/about/job-search/\"><strong>✅⇒about/job-search/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/about/resume/\"><strong>✅⇒about/resume/🌍</strong></a></h3>\n<hr>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/\"><strong>✅⇒articles/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/basic-web-dev/\"><strong>✅⇒articles/basic-web-dev/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/buffers/\"><strong>✅⇒articles/buffers/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/dev-dep/\"><strong>✅⇒articles/dev-dep/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/event-loop/\"><strong>✅⇒articles/event-loop/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/fs-module/\"><strong>✅⇒articles/fs-module/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/how-the-web-works/\"><strong>✅⇒articles/how-the-web-works/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/http/\"><strong>✅⇒articles/http/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/install/\"><strong>✅⇒articles/install/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/intro/\"><strong>✅⇒articles/intro/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/module-exports/\"><strong>✅⇒articles/module-exports/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node-api-express/\"><strong>✅⇒articles/node-api-express/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node-cli-args/\"><strong>✅⇒articles/node-cli-args/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node-common-modules/\"><strong>✅⇒articles/node-common-modules/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node-env-variables/\"><strong>✅⇒articles/node-env-variables/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node-js-language/\"><strong>✅⇒articles/node-js-language/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node-package-manager/\"><strong>✅⇒articles/node-package-manager/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node-repl/\"><strong>✅⇒articles/node-repl/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node-run-cli/\"><strong>✅⇒articles/node-run-cli/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/nodejs/\"><strong>✅⇒articles/nodejs/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/nodevsbrowser/\"><strong>✅⇒articles/nodevsbrowser/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/npm/\"><strong>✅⇒articles/npm/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/npx/\"><strong>✅⇒articles/npx/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/os-module/\"><strong>✅⇒articles/os-module/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/reading-files/\"><strong>✅⇒articles/reading-files/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/semantic-html/\"><strong>✅⇒articles/semantic-html/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/semantic/\"><strong>✅⇒articles/semantic/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/the-uniform-resource-locator-(url)/\"><strong>✅⇒articles/the-uniform-resource-locator-(url)/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/understanding-firebase/\"><strong>✅⇒articles/understanding-firebase/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/v8/\"><strong>✅⇒articles/v8/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/web-standards-checklist/\"><strong>✅⇒articles/web-standards-checklist/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/webdev-tools/\"><strong>✅⇒articles/webdev-tools/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/articles/writing-files/\"><strong>✅⇒articles/writing-files/🌍</strong></a></h3>\n<hr>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/audio/\"><strong>✅⇒audio/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/audio/dfft/\"><strong>✅⇒audio/dfft/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/audio/discrete-fft/\"><strong>✅⇒audio/discrete-fft/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/audio/dtw-python-explained/\"><strong>✅⇒audio/dtw-python-explained/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/audio/dynamic-time-warping/\"><strong>✅⇒audio/dynamic-time-warping/🌍</strong></a></h3>\n<hr>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/community/\"><strong>✅⇒community/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/community/video-chat/\"><strong>✅⇒community/video-chat/🌍</strong></a></h3>\n<hr>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/content/\"><strong>✅⇒content/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/content/algo/\"><strong>✅⇒content/algo/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/content/archive/\"><strong>✅⇒content/archive/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/content/data-structures-algo/\"><strong>✅⇒content/data-structures-algo/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/content/gatsby-queries-mutations/\"><strong>✅⇒content/gatsby-queries-mutations/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/content/history-api/\"><strong>✅⇒content/history-api/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/content/js-async-n-callbacks/\"><strong>✅⇒content/js-async-n-callbacks/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/content/projects/\"><strong>✅⇒content/projects/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/content/recent-projects/\"><strong>✅⇒content/recent-projects/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/content/trouble-shooting/\"><strong>✅⇒content/trouble-shooting/🌍</strong></a></h3>\n<hr>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/docs/\"><strong>✅⇒docs/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/docs/appendix/\"><strong>✅⇒docs/appendix/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/docs/await-keyword/\"><strong>✅⇒docs/await-keyword/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/docs/bash/\"><strong>✅⇒docs/bash/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/docs/content/\"><strong>✅⇒docs/content/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/docs/css/\"><strong>✅⇒docs/css/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/docs/data-structures-docs/\"><strong>✅⇒docs/data-structures-docs/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/docs/git-repos/\"><strong>✅⇒docs/git-repos/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/docs/no-whiteboarding/\"><strong>✅⇒docs/no-whiteboarding/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/docs/regex-in-js/\"><strong>✅⇒docs/regex-in-js/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/docs/sitemap/\"><strong>✅⇒docs/sitemap/🌍</strong></a></h3>\n<hr>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/faq/\"><strong>✅⇒faq/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/faq/contact/\"><strong>✅⇒faq/contact/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/faq/plug-ins/\"><strong>✅⇒faq/plug-ins/🌍</strong></a></h3>\n<hr>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/gallery/\"><strong>✅⇒gallery/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/interact/\"><strong>✅⇒interact/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/interact/callstack-visual/\"><strong>✅⇒interact/callstack-visual/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/interact/clock/\"><strong>✅⇒interact/clock/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/interact/jupyter-notebooks/\"><strong>✅⇒interact/jupyter-notebooks/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/interact/other-sites/\"><strong>✅⇒interact/other-sites/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/interact/video-chat/\"><strong>✅⇒interact/video-chat/🌍</strong></a></h3>\n<hr>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/javascript/\"><strong>✅⇒javascript/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/javascript/bigo/\"><strong>✅⇒javascript/bigo/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/javascript/constructor-functions/\"><strong>✅⇒javascript/constructor-functions/🌍</strong></a></h3>\n<hr>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/medium/\"><strong>✅⇒medium/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/medium/medium-links/\"><strong>✅⇒medium/medium-links/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/medium/my-websites/\"><strong>✅⇒medium/my-websites/🌍</strong></a></h3>\n<hr>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/python/\"><strong>✅⇒python/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/python/at-length/\"><strong>✅⇒python/at-length/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/python/google-sheets-api/\"><strong>✅⇒python/google-sheets-api/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/python/python-ds/\"><strong>✅⇒python/python-ds/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/python/snippets/\"><strong>✅⇒python/snippets/🌍</strong></a></h3>\n<hr>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/\"><strong>✅⇒quick-reference/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/awesome-lists/\"><strong>✅⇒quick-reference/awesome-lists/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/awesome-static/\"><strong>✅⇒quick-reference/awesome-static/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/create-react-app/\"><strong>✅⇒quick-reference/create-react-app/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/emmet/\"><strong>✅⇒quick-reference/emmet/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/git-bash/\"><strong>✅⇒quick-reference/git-bash/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/github-search/\"><strong>✅⇒quick-reference/github-search/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/google-firebase/\"><strong>✅⇒quick-reference/google-firebase/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/heroku-error-codes/\"><strong>✅⇒quick-reference/heroku-error-codes/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/installation/\"><strong>✅⇒quick-reference/installation/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/minifiction/\"><strong>✅⇒quick-reference/minifiction/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/new-repo-instructions/\"><strong>✅⇒quick-reference/new-repo-instructions/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/notes-template/\"><strong>✅⇒quick-reference/notes-template/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/psql-setup/\"><strong>✅⇒quick-reference/psql-setup/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/psql/\"><strong>✅⇒quick-reference/psql/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/pull-request-rubric/\"><strong>✅⇒quick-reference/pull-request-rubric/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/quick-links/\"><strong>✅⇒quick-reference/quick-links/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/resources/\"><strong>✅⇒quick-reference/resources/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/toprepos/\"><strong>✅⇒quick-reference/toprepos/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/understanding-path/\"><strong>✅⇒quick-reference/understanding-path/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/vscode-themes/\"><strong>✅⇒quick-reference/vscode-themes/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/vscode/\"><strong>✅⇒quick-reference/vscode/🌍</strong></a></h3>\n<hr>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/react/\"><strong>✅⇒react/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/react/createreactapp/\"><strong>✅⇒react/createreactapp/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/react/react-docs/\"><strong>✅⇒react/react-docs/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/react/react-in-depth/\"><strong>✅⇒react/react-in-depth/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/react/react2/\"><strong>✅⇒react/react2/🌍</strong></a></h3>\n<hr>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/sitemap/\"><strong>✅⇒sitemap/🌍</strong></a></h3>\n<hr>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/tools/\"><strong>✅⇒tools/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/tools/cloudstorage/\"><strong>✅⇒tools/cloudstorage/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/tools/data-structures/\"><strong>✅⇒tools/data-structures/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/tools/dev-utilities/\"><strong>✅⇒tools/dev-utilities/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/tools/markdown-html/\"><strong>✅⇒tools/markdown-html/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/docs/tools/more-tools/\"><strong>✅⇒tools/more-tools/🌍</strong></a></h3>\n<h3><a href=\"https://bgoonz-blog.netlify.app/review/\"><strong>✅review/🌍</strong></a></h3>\n<h3>[<strong>✅showcase/🌍</strong>]<a href=\"https://bgoonz-blog.netlify.app/showcase/\">https://bgoonz-blog.netlify.app/showcase/</a>)</h3>"},{"url":"/docs/about/resume/","relativePath":"docs/about/resume.md","relativeDir":"docs/about","base":"resume.md","name":"resume","frontmatter":{"title":"Resume","weight":1,"seo":{"title":"Resume","description":"Successfully completed and delivered a platform to digitize a guitar signal and perform filtering before executing frequency & time domain analysis to track a current performance against prerecorded performance.","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Resume","keyName":"property"},{"name":"og:description","value":"This is the Resume page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Resume"},{"name":"twitter:description","value":"This is the Resume page"}]},"template":"docs"},"html":"<h1>➤ Technical Skills­­­</h1>\n<table>\n<thead>\n<tr>\n<th><strong>Programming**</strong> Languages:**</th>\n<th>JavaScript ES-6, NodeJS, React, HTML5, CSS3, SCSS, Bash Shell, Excel, SQL, NoSQL, MATLAB, Python, C++</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Databases:</strong></td>\n<td>PostgreSQL, MongoDB</td>\n</tr>\n<tr>\n<td><strong>Cloud:</strong></td>\n<td>Docker, AWS, Google App Engine, Netlify, Digital Ocean, Heroku, Azure Cloud Services</td>\n</tr>\n<tr>\n<td><strong>OS:</strong></td>\n<td>Linux, Windows (WSL), IOS</td>\n</tr>\n<tr>\n<td><strong>Agile:</strong></td>\n<td>GitHub, BitBucket, Jira, Confluence</td>\n</tr>\n<tr>\n<td><strong>IDEs:</strong></td>\n<td>VSCode, Visual Studio, Atom, Code Blocks, Sublime Text 3, Brackets</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1>➤ Experience</h1>\n<table>\n<thead>\n<tr>\n<th><strong>Relational Concepts:</strong> Hallandale Beach, FL</th>\n<th>March 2020 - Present</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Front End Web Developer</strong></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Responsible for front-end development for a custom real estate application which provides sophisticated and fully customizable filtering to allow investors and real estate professionals to narrow in on exact search targets.</li>\n<li>Designed mock-up screens, wireframes, and workflows for intuitive user experience.</li>\n<li>Migrated existing multi-page user experience into singular page interfaces using React components.</li>\n<li>Participated in every stage of the design from conception through development and iterative improvement.</li>\n<li>Produced user stories and internal documentation for future site development and maintenance.</li>\n<li>Implemented modern frameworks including Bootstrap and Font-Awesome to give the site an aesthetic overhaul.</li>\n<li>Managed all test deployments using a combination of Digital Ocean and Netlify.</li>\n<li>Produced unit tests using a combination of Mocha and Chai.</li>\n<li>Injected Google Analytics to capture pertinent usage data to produce an insightful dashboard experience.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>Environment:</strong></th>\n<th><strong>JavaScript, JQuery, React, HTML5 &#x26; CSS, Bootstrap, DOJO, Google Cloud, Bash Script</strong></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><strong>Cembre:</strong> Edison, NJ</th>\n<th>Nov 2019 – Mar 2020</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Product Development Engineer</strong></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Converted client's product needs into technical specs to be sent to the development team in Italy.</li>\n<li>Reorganized internal file server structure.</li>\n<li>Conducted remote / in person system integration and product demonstrations.</li>\n<li>Presided over internal and end user software trainings in addition to producing the corresponding documentation.</li>\n<li>Served as the primary point of contact for troubleshooting railroad hardware and software in the North America.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>Environment:</strong></th>\n<th><strong>Excel, AutoCAD, PowerPoint, Word</strong></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<hr>\n<h1>➤ Education</h1>\n<table>\n<thead>\n<tr>\n<th>**B.S. Electrical Engineering, TCNJ, ** Ewing NJ</th>\n<th>2014 – 2019</th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<p><strong>Capstone Project – Team Lead</strong></p>\n<ul>\n<li>Successfully completed and delivered a platform to digitize a guitar signal and perform filtering before executing frequency &#x26; time domain analysis to track a current performance against prerecorded performance.</li>\n<li>Implemented the Dynamic Time Warping algorithm in C++ and Python to autonomously activate or adjust guitar effect at multiple pre-designated section of performance.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>Environment:</strong></th>\n<th><strong>C++, Python, MATLAB, PureData</strong></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>"},{"url":"/blog/web-scraping/","relativePath":"blog/web-scraping.md","relativeDir":"blog","base":"web-scraping.md","name":"web-scraping","frontmatter":{"title":"Webscraping w nodejs","date":"2021-07-26","image":"images/web-development.gif","seo":{"title":"webscraping","description":"There are a lot of use cases for web scraping","extra":[{"name":"og:type","value":"article","keyName":"property"},{"name":"og:title","value":"Platform Docs","keyName":"property"},{"name":"og:description","value":"Lorem ipsum dolor sit amet, consectetur adipiscing elit","keyName":"property"},{"name":"og:image","value":"images/curious-europa.gif","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Platform Docs"},{"name":"twitter:description","value":"Lorem ipsum dolor sit amet, consectetur adipiscing elit"},{"name":"twitter:image","value":"images/web-development.gif","relativeUrl":true}]},"template":"post","thumb_image":"images/blue-plankton.png"},"html":"<h1>Web Scraping with Node.js</h1>\n<blockquote>\n<p>So what’s web scraping anyway? It involves automating away the laborious task of collecting information from websites. There are a lot of use cases for web scraping: you might want to collect prices from various e-commerce sites for a price comparison site. Or perhaps you need flight times and</p>\n</blockquote>\n<p><img src=\"https://cdn-media-1.freecodecamp.org/images/1*KkVKtysvgh2hIVRI1Irk-Q.jpeg\" alt=\"The Ultimate Guide to Web Scraping with Node.js\"></p>\n<p>So what’s web scraping anyway? It involves automating away the laborious task of collecting information from websites.</p>\n<p>There are a lot of use cases for web scraping: you might want to collect prices from various e-commerce sites for a price comparison site. Or perhaps you need flight times and hotel/AirBNB listings for a travel site. Maybe you want to collect emails from various directories for sales leads, or use data from the internet to train machine learning/AI models. Or you could even be wanting to build a search engine like Google!</p>\n<p>Getting started with web scraping is easy, and the process can be broken down into two main parts:</p>\n<ul>\n<li>acquiring the data using an HTML request library or a headless browser,</li>\n<li>and parsing the data to get the exact information you want.</li>\n</ul>\n<p>This guide will walk you through the process with the popular Node.js <a href=\"https://github.com/request/request-promise\">request-promise</a> module, <a href=\"https://github.com/cheeriojs/cheerio\">CheerioJS</a>, and <a href=\"https://github.com/GoogleChrome/puppeteer\">Puppeteer</a>. Working through the examples in this guide, you will learn all the tips and tricks you need to become a pro at gathering any data you need with Node.js!</p>\n<p>We will be gathering a list of all the names and birthdays of U.S. presidents from Wikipedia and the titles of all the posts on the front page of Reddit.</p>\n<p>First things first: Let’s install the libraries we’ll be using in this guide (Puppeteer will take a while to install as it needs to download Chromium as well).</p>\n<h3>Making your first request</h3>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-install-libraries-L1\" data-line-number=\"1\"></td><td id=\"file-install-libraries-LC1\">npm install --save request request-promise cheerio puppeteer</td></tr></tbody></table>\n<p>Next, let’s open a new text file (name the file potusScraper.js), and write a quick function to get the HTML of the Wikipedia “List of Presidents” page.</p>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-potusscraper-js-v1-L1\" data-line-number=\"1\"></td><td id=\"file-potusscraper-js-v1-LC1\">const rp = require('request-promise');</td></tr><tr><td id=\"file-potusscraper-js-v1-L2\" data-line-number=\"2\"></td><td id=\"file-potusscraper-js-v1-LC2\">const url = 'https://en.wikipedia.org/wiki/List_of_Presidents_of_the_United_States';</td></tr><tr><td id=\"file-potusscraper-js-v1-L3\" data-line-number=\"3\"></td><td id=\"file-potusscraper-js-v1-LC3\"></td></tr><tr><td id=\"file-potusscraper-js-v1-L4\" data-line-number=\"4\"></td><td id=\"file-potusscraper-js-v1-LC4\">rp(url)</td></tr><tr><td id=\"file-potusscraper-js-v1-L5\" data-line-number=\"5\"></td><td id=\"file-potusscraper-js-v1-LC5\">.then(function(html){</td></tr><tr><td id=\"file-potusscraper-js-v1-L6\" data-line-number=\"6\"></td><td id=\"file-potusscraper-js-v1-LC6\">//success!</td></tr><tr><td id=\"file-potusscraper-js-v1-L7\" data-line-number=\"7\"></td><td id=\"file-potusscraper-js-v1-LC7\">console.log(html);</td></tr><tr><td id=\"file-potusscraper-js-v1-L8\" data-line-number=\"8\"></td><td id=\"file-potusscraper-js-v1-LC8\">})</td></tr><tr><td id=\"file-potusscraper-js-v1-L9\" data-line-number=\"9\"></td><td id=\"file-potusscraper-js-v1-LC9\">.catch(function(err){</td></tr><tr><td id=\"file-potusscraper-js-v1-L10\" data-line-number=\"10\"></td><td id=\"file-potusscraper-js-v1-LC10\">//handle error</td></tr><tr><td id=\"file-potusscraper-js-v1-L11\" data-line-number=\"11\"></td><td id=\"file-potusscraper-js-v1-LC11\">});</td></tr></tbody></table>\n<p>Output:</p>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-potusscraper-js-v1-output-L1\" data-line-number=\"1\"></td><td id=\"file-potusscraper-js-v1-output-LC1\">&lt;!DOCTYPE html&gt;</td></tr><tr><td id=\"file-potusscraper-js-v1-output-L2\" data-line-number=\"2\"></td><td id=\"file-potusscraper-js-v1-output-LC2\">&lt;html class=\"client-nojs\" lang=\"en\" dir=\"ltr\"&gt;</td></tr><tr><td id=\"file-potusscraper-js-v1-output-L3\" data-line-number=\"3\"></td><td id=\"file-potusscraper-js-v1-output-LC3\">&lt;head&gt;</td></tr><tr><td id=\"file-potusscraper-js-v1-output-L4\" data-line-number=\"4\"></td><td id=\"file-potusscraper-js-v1-output-LC4\">&lt;meta charset=\"UTF-8\"/&gt;</td></tr><tr><td id=\"file-potusscraper-js-v1-output-L5\" data-line-number=\"5\"></td><td id=\"file-potusscraper-js-v1-output-LC5\">&lt;title&gt;List of Presidents of the United States - Wikipedia&lt;/title&gt;</td></tr><tr><td id=\"file-potusscraper-js-v1-output-L6\" data-line-number=\"6\"></td><td id=\"file-potusscraper-js-v1-output-LC6\">...</td></tr></tbody></table>\n<h3>Using Chrome DevTools</h3>\n<p>Cool, we got the raw HTML from the web page! But now we need to make sense of this giant blob of text. To do that, we’ll need to use Chrome DevTools to allow us to easily search through the HTML of a web page.</p>\n<p>Using Chrome DevTools is easy: simply open Google Chrome, and right click on the element you would like to scrape (in this case I am right clicking on George Washington, because we want to get links to all of the individual presidents’ Wikipedia pages):</p>\n<p><img src=\"https://cdn-media-1.freecodecamp.org/images/1*gLKhu_EO-cDqYna1P9WL_w.png\"></p>\n<p>Now, simply click inspect, and Chrome will bring up its DevTools pane, allowing you to easily inspect the page’s source HTML.</p>\n<p><img src=\"https://cdn-media-1.freecodecamp.org/images/1*HSUjFgji22vjwvGi2uZe1A.png\"></p>\n<h3>Parsing HTML with Cheerio.js</h3>\n<p>Awesome, Chrome DevTools is now showing us the exact pattern we should be looking for in the code (a “big” tag with a hyperlink inside of it). Let’s use Cheerio.js to parse the HTML we received earlier to return a list of links to the individual Wikipedia pages of U.S. presidents.</p>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-potusscraper-js-v2-L1\" data-line-number=\"1\"></td><td id=\"file-potusscraper-js-v2-LC1\">const rp = require('request-promise');</td></tr><tr><td id=\"file-potusscraper-js-v2-L2\" data-line-number=\"2\"></td><td id=\"file-potusscraper-js-v2-LC2\">const $ = require('cheerio');</td></tr><tr><td id=\"file-potusscraper-js-v2-L3\" data-line-number=\"3\"></td><td id=\"file-potusscraper-js-v2-LC3\">const url = 'https://en.wikipedia.org/wiki/List_of_Presidents_of_the_United_States';</td></tr><tr><td id=\"file-potusscraper-js-v2-L4\" data-line-number=\"4\"></td><td id=\"file-potusscraper-js-v2-LC4\"></td></tr><tr><td id=\"file-potusscraper-js-v2-L5\" data-line-number=\"5\"></td><td id=\"file-potusscraper-js-v2-LC5\">rp(url)</td></tr><tr><td id=\"file-potusscraper-js-v2-L6\" data-line-number=\"6\"></td><td id=\"file-potusscraper-js-v2-LC6\">.then(function(html){</td></tr><tr><td id=\"file-potusscraper-js-v2-L7\" data-line-number=\"7\"></td><td id=\"file-potusscraper-js-v2-LC7\">//success!</td></tr><tr><td id=\"file-potusscraper-js-v2-L8\" data-line-number=\"8\"></td><td id=\"file-potusscraper-js-v2-LC8\">console.log($('big &gt; a', html).length);</td></tr><tr><td id=\"file-potusscraper-js-v2-L9\" data-line-number=\"9\"></td><td id=\"file-potusscraper-js-v2-LC9\">console.log($('big &gt; a', html));</td></tr><tr><td id=\"file-potusscraper-js-v2-L10\" data-line-number=\"10\"></td><td id=\"file-potusscraper-js-v2-LC10\">})</td></tr><tr><td id=\"file-potusscraper-js-v2-L11\" data-line-number=\"11\"></td><td id=\"file-potusscraper-js-v2-LC11\">.catch(function(err){</td></tr><tr><td id=\"file-potusscraper-js-v2-L12\" data-line-number=\"12\"></td><td id=\"file-potusscraper-js-v2-LC12\">//handle error</td></tr><tr><td id=\"file-potusscraper-js-v2-L13\" data-line-number=\"13\"></td><td id=\"file-potusscraper-js-v2-LC13\">});</td></tr></tbody></table>\n<p>Output:</p>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-potusscraper-js-v2-output-L1\" data-line-number=\"1\"></td><td id=\"file-potusscraper-js-v2-output-LC1\">45</td></tr><tr><td id=\"file-potusscraper-js-v2-output-L2\" data-line-number=\"2\"></td><td id=\"file-potusscraper-js-v2-output-LC2\">{ '0':</td></tr><tr><td id=\"file-potusscraper-js-v2-output-L3\" data-line-number=\"3\"></td><td id=\"file-potusscraper-js-v2-output-LC3\">{ type: 'tag',</td></tr><tr><td id=\"file-potusscraper-js-v2-output-L4\" data-line-number=\"4\"></td><td id=\"file-potusscraper-js-v2-output-LC4\">name: 'a',</td></tr><tr><td id=\"file-potusscraper-js-v2-output-L5\" data-line-number=\"5\"></td><td id=\"file-potusscraper-js-v2-output-LC5\">attribs: { href: '/wiki/George_Washington', title: 'George Washington' },</td></tr><tr><td id=\"file-potusscraper-js-v2-output-L6\" data-line-number=\"6\"></td><td id=\"file-potusscraper-js-v2-output-LC6\">children: [ [Object] ],</td></tr><tr><td id=\"file-potusscraper-js-v2-output-L7\" data-line-number=\"7\"></td><td id=\"file-potusscraper-js-v2-output-LC7\">next: null,</td></tr><tr><td id=\"file-potusscraper-js-v2-output-L8\" data-line-number=\"8\"></td><td id=\"file-potusscraper-js-v2-output-LC8\">prev: null,</td></tr><tr><td id=\"file-potusscraper-js-v2-output-L9\" data-line-number=\"9\"></td><td id=\"file-potusscraper-js-v2-output-LC9\">parent:</td></tr><tr><td id=\"file-potusscraper-js-v2-output-L10\" data-line-number=\"10\"></td><td id=\"file-potusscraper-js-v2-output-LC10\">{ type: 'tag',</td></tr><tr><td id=\"file-potusscraper-js-v2-output-L11\" data-line-number=\"11\"></td><td id=\"file-potusscraper-js-v2-output-LC11\">name: 'big',</td></tr><tr><td id=\"file-potusscraper-js-v2-output-L12\" data-line-number=\"12\"></td><td id=\"file-potusscraper-js-v2-output-LC12\">attribs: {},</td></tr><tr><td id=\"file-potusscraper-js-v2-output-L13\" data-line-number=\"13\"></td><td id=\"file-potusscraper-js-v2-output-LC13\">children: [Array],</td></tr><tr><td id=\"file-potusscraper-js-v2-output-L14\" data-line-number=\"14\"></td><td id=\"file-potusscraper-js-v2-output-LC14\">next: null,</td></tr><tr><td id=\"file-potusscraper-js-v2-output-L15\" data-line-number=\"15\"></td><td id=\"file-potusscraper-js-v2-output-LC15\">prev: null,</td></tr><tr><td id=\"file-potusscraper-js-v2-output-L16\" data-line-number=\"16\"></td><td id=\"file-potusscraper-js-v2-output-LC16\">parent: [Object] } },</td></tr><tr><td id=\"file-potusscraper-js-v2-output-L17\" data-line-number=\"17\"></td><td id=\"file-potusscraper-js-v2-output-LC17\">'1':</td></tr><tr><td id=\"file-potusscraper-js-v2-output-L18\" data-line-number=\"18\"></td><td id=\"file-potusscraper-js-v2-output-LC18\">{ type: 'tag'</td></tr><tr><td id=\"file-potusscraper-js-v2-output-L19\" data-line-number=\"19\"></td><td id=\"file-potusscraper-js-v2-output-LC19\">...</td></tr></tbody></table>\n<p>We check to make sure there are exactly 45 elements returned (the number of U.S. presidents), meaning there aren’t any extra hidden “big” tags elsewhere on the page. Now, we can go through and grab a list of links to all 45 presidential Wikipedia pages by getting them from the “attribs” section of each element.</p>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-potusscraper-js-v3-L1\" data-line-number=\"1\"></td><td id=\"file-potusscraper-js-v3-LC1\">const rp = require('request-promise');</td></tr><tr><td id=\"file-potusscraper-js-v3-L2\" data-line-number=\"2\"></td><td id=\"file-potusscraper-js-v3-LC2\">const $ = require('cheerio');</td></tr><tr><td id=\"file-potusscraper-js-v3-L3\" data-line-number=\"3\"></td><td id=\"file-potusscraper-js-v3-LC3\">const url = 'https://en.wikipedia.org/wiki/List_of_Presidents_of_the_United_States';</td></tr><tr><td id=\"file-potusscraper-js-v3-L4\" data-line-number=\"4\"></td><td id=\"file-potusscraper-js-v3-LC4\"></td></tr><tr><td id=\"file-potusscraper-js-v3-L5\" data-line-number=\"5\"></td><td id=\"file-potusscraper-js-v3-LC5\">rp(url)</td></tr><tr><td id=\"file-potusscraper-js-v3-L6\" data-line-number=\"6\"></td><td id=\"file-potusscraper-js-v3-LC6\">.then(function(html){</td></tr><tr><td id=\"file-potusscraper-js-v3-L7\" data-line-number=\"7\"></td><td id=\"file-potusscraper-js-v3-LC7\">//success!</td></tr><tr><td id=\"file-potusscraper-js-v3-L8\" data-line-number=\"8\"></td><td id=\"file-potusscraper-js-v3-LC8\">const wikiUrls = [];</td></tr><tr><td id=\"file-potusscraper-js-v3-L9\" data-line-number=\"9\"></td><td id=\"file-potusscraper-js-v3-LC9\">for (let i = 0; i &lt; 45; i++) {</td></tr><tr><td id=\"file-potusscraper-js-v3-L10\" data-line-number=\"10\"></td><td id=\"file-potusscraper-js-v3-LC10\">wikiUrls.push($('big &gt; a', html)[i].attribs.href);</td></tr><tr><td id=\"file-potusscraper-js-v3-L11\" data-line-number=\"11\"></td><td id=\"file-potusscraper-js-v3-LC11\">}</td></tr><tr><td id=\"file-potusscraper-js-v3-L12\" data-line-number=\"12\"></td><td id=\"file-potusscraper-js-v3-LC12\">console.log(wikiUrls);</td></tr><tr><td id=\"file-potusscraper-js-v3-L13\" data-line-number=\"13\"></td><td id=\"file-potusscraper-js-v3-LC13\">})</td></tr><tr><td id=\"file-potusscraper-js-v3-L14\" data-line-number=\"14\"></td><td id=\"file-potusscraper-js-v3-LC14\">.catch(function(err){</td></tr><tr><td id=\"file-potusscraper-js-v3-L15\" data-line-number=\"15\"></td><td id=\"file-potusscraper-js-v3-LC15\">//handle error</td></tr><tr><td id=\"file-potusscraper-js-v3-L16\" data-line-number=\"16\"></td><td id=\"file-potusscraper-js-v3-LC16\">});</td></tr></tbody></table>\n<p>Output:</p>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-potusscraper-js-v3-output-L1\" data-line-number=\"1\"></td><td id=\"file-potusscraper-js-v3-output-LC1\"></td></tr><tr><td id=\"file-potusscraper-js-v3-output-L2\" data-line-number=\"2\"></td><td id=\"file-potusscraper-js-v3-output-LC2\">[</td></tr><tr><td id=\"file-potusscraper-js-v3-output-L3\" data-line-number=\"3\"></td><td id=\"file-potusscraper-js-v3-output-LC3\">'/wiki/George_Washington',</td></tr><tr><td id=\"file-potusscraper-js-v3-output-L4\" data-line-number=\"4\"></td><td id=\"file-potusscraper-js-v3-output-LC4\">'/wiki/John_Adams',</td></tr><tr><td id=\"file-potusscraper-js-v3-output-L5\" data-line-number=\"5\"></td><td id=\"file-potusscraper-js-v3-output-LC5\">'/wiki/Thomas_Jefferson',</td></tr><tr><td id=\"file-potusscraper-js-v3-output-L6\" data-line-number=\"6\"></td><td id=\"file-potusscraper-js-v3-output-LC6\">'/wiki/James_Madison',</td></tr><tr><td id=\"file-potusscraper-js-v3-output-L7\" data-line-number=\"7\"></td><td id=\"file-potusscraper-js-v3-output-LC7\">'/wiki/James_Monroe',</td></tr><tr><td id=\"file-potusscraper-js-v3-output-L8\" data-line-number=\"8\"></td><td id=\"file-potusscraper-js-v3-output-LC8\">'/wiki/John_Quincy_Adams',</td></tr><tr><td id=\"file-potusscraper-js-v3-output-L9\" data-line-number=\"9\"></td><td id=\"file-potusscraper-js-v3-output-LC9\">'/wiki/Andrew_Jackson',</td></tr><tr><td id=\"file-potusscraper-js-v3-output-L10\" data-line-number=\"10\"></td><td id=\"file-potusscraper-js-v3-output-LC10\">...</td></tr><tr><td id=\"file-potusscraper-js-v3-output-L11\" data-line-number=\"11\"></td><td id=\"file-potusscraper-js-v3-output-LC11\">]</td></tr></tbody></table>\n<p>Now we have a list of all 45 presidential Wikipedia pages. Let’s create a new file (named potusParse.js), which will contain a function to take a presidential Wikipedia page and return the president’s name and birthday. First things first, let’s get the raw HTML from George Washington’s Wikipedia page.</p>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-potusparse-js-v1-L1\" data-line-number=\"1\"></td><td id=\"file-potusparse-js-v1-LC1\">const rp = require('request-promise');</td></tr><tr><td id=\"file-potusparse-js-v1-L2\" data-line-number=\"2\"></td><td id=\"file-potusparse-js-v1-LC2\">const url = 'https://en.wikipedia.org/wiki/George_Washington';</td></tr><tr><td id=\"file-potusparse-js-v1-L3\" data-line-number=\"3\"></td><td id=\"file-potusparse-js-v1-LC3\"></td></tr><tr><td id=\"file-potusparse-js-v1-L4\" data-line-number=\"4\"></td><td id=\"file-potusparse-js-v1-LC4\">rp(url)</td></tr><tr><td id=\"file-potusparse-js-v1-L5\" data-line-number=\"5\"></td><td id=\"file-potusparse-js-v1-LC5\">.then(function(html) {</td></tr><tr><td id=\"file-potusparse-js-v1-L6\" data-line-number=\"6\"></td><td id=\"file-potusparse-js-v1-LC6\">console.log(html);</td></tr><tr><td id=\"file-potusparse-js-v1-L7\" data-line-number=\"7\"></td><td id=\"file-potusparse-js-v1-LC7\">})</td></tr><tr><td id=\"file-potusparse-js-v1-L8\" data-line-number=\"8\"></td><td id=\"file-potusparse-js-v1-LC8\">.catch(function(err) {</td></tr><tr><td id=\"file-potusparse-js-v1-L9\" data-line-number=\"9\"></td><td id=\"file-potusparse-js-v1-LC9\">//handle error</td></tr><tr><td id=\"file-potusparse-js-v1-L10\" data-line-number=\"10\"></td><td id=\"file-potusparse-js-v1-LC10\">});</td></tr></tbody></table>\n<p>Output:</p>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-potusparse-js-v1-output-L1\" data-line-number=\"1\"></td><td id=\"file-potusparse-js-v1-output-LC1\">&lt;html class=\"client-nojs\" lang=\"en\" dir=\"ltr\"&gt;</td></tr><tr><td id=\"file-potusparse-js-v1-output-L2\" data-line-number=\"2\"></td><td id=\"file-potusparse-js-v1-output-LC2\">&lt;head&gt;</td></tr><tr><td id=\"file-potusparse-js-v1-output-L3\" data-line-number=\"3\"></td><td id=\"file-potusparse-js-v1-output-LC3\">&lt;meta charset=\"UTF-8\"/&gt;</td></tr><tr><td id=\"file-potusparse-js-v1-output-L4\" data-line-number=\"4\"></td><td id=\"file-potusparse-js-v1-output-LC4\">&lt;title&gt;George Washington - Wikipedia&lt;/title&gt;</td></tr><tr><td id=\"file-potusparse-js-v1-output-L5\" data-line-number=\"5\"></td><td id=\"file-potusparse-js-v1-output-LC5\">...</td></tr></tbody></table>\n<p>Let’s once again use Chrome DevTools to find the syntax of the code we want to parse, so that we can extract the name and birthday with Cheerio.js.</p>\n<p><img src=\"https://cdn-media-1.freecodecamp.org/images/1*exzZbuIwfrCcbTM2rr9_bw.png\"></p>\n<p><img src=\"https://cdn-media-1.freecodecamp.org/images/1*yth6AmHpywM77n0wEprpiA.png\"></p>\n<p>So we see that the name is in a class called “firstHeading” and the birthday is in a class called “bday”. Let’s modify our code to use Cheerio.js to extract these two classes.</p>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-potusparse-js-v2-L1\" data-line-number=\"1\"></td><td id=\"file-potusparse-js-v2-LC1\">const rp = require('request-promise');</td></tr><tr><td id=\"file-potusparse-js-v2-L2\" data-line-number=\"2\"></td><td id=\"file-potusparse-js-v2-LC2\">const $ = require('cheerio');</td></tr><tr><td id=\"file-potusparse-js-v2-L3\" data-line-number=\"3\"></td><td id=\"file-potusparse-js-v2-LC3\">const url = 'https://en.wikipedia.org/wiki/George_Washington';</td></tr><tr><td id=\"file-potusparse-js-v2-L4\" data-line-number=\"4\"></td><td id=\"file-potusparse-js-v2-LC4\"></td></tr><tr><td id=\"file-potusparse-js-v2-L5\" data-line-number=\"5\"></td><td id=\"file-potusparse-js-v2-LC5\">rp(url)</td></tr><tr><td id=\"file-potusparse-js-v2-L6\" data-line-number=\"6\"></td><td id=\"file-potusparse-js-v2-LC6\">.then(function(html) {</td></tr><tr><td id=\"file-potusparse-js-v2-L7\" data-line-number=\"7\"></td><td id=\"file-potusparse-js-v2-LC7\">console.log($('.firstHeading', html).text());</td></tr><tr><td id=\"file-potusparse-js-v2-L8\" data-line-number=\"8\"></td><td id=\"file-potusparse-js-v2-LC8\">console.log($('.bday', html).text());</td></tr><tr><td id=\"file-potusparse-js-v2-L9\" data-line-number=\"9\"></td><td id=\"file-potusparse-js-v2-LC9\">})</td></tr><tr><td id=\"file-potusparse-js-v2-L10\" data-line-number=\"10\"></td><td id=\"file-potusparse-js-v2-LC10\">.catch(function(err) {</td></tr><tr><td id=\"file-potusparse-js-v2-L11\" data-line-number=\"11\"></td><td id=\"file-potusparse-js-v2-LC11\">//handle error</td></tr><tr><td id=\"file-potusparse-js-v2-L12\" data-line-number=\"12\"></td><td id=\"file-potusparse-js-v2-LC12\">});</td></tr></tbody></table>\n<p>Output:</p>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-potusparse-js-v2-output-L1\" data-line-number=\"1\"></td><td id=\"file-potusparse-js-v2-output-LC1\">George Washington</td></tr><tr><td id=\"file-potusparse-js-v2-output-L2\" data-line-number=\"2\"></td><td id=\"file-potusparse-js-v2-output-LC2\">1732-02-22</td></tr></tbody></table>\n<h3>Putting it all together</h3>\n<p>Perfect! Now let’s wrap this up into a function and export it from this module.</p>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-potusparse-js-v3-L1\" data-line-number=\"1\"></td><td id=\"file-potusparse-js-v3-LC1\">const rp = require('request-promise');</td></tr><tr><td id=\"file-potusparse-js-v3-L2\" data-line-number=\"2\"></td><td id=\"file-potusparse-js-v3-LC2\">const $ = require('cheerio');</td></tr><tr><td id=\"file-potusparse-js-v3-L3\" data-line-number=\"3\"></td><td id=\"file-potusparse-js-v3-LC3\"></td></tr><tr><td id=\"file-potusparse-js-v3-L4\" data-line-number=\"4\"></td><td id=\"file-potusparse-js-v3-LC4\">const potusParse = function(url) {</td></tr><tr><td id=\"file-potusparse-js-v3-L5\" data-line-number=\"5\"></td><td id=\"file-potusparse-js-v3-LC5\">return rp(url)</td></tr><tr><td id=\"file-potusparse-js-v3-L6\" data-line-number=\"6\"></td><td id=\"file-potusparse-js-v3-LC6\">.then(function(html) {</td></tr><tr><td id=\"file-potusparse-js-v3-L7\" data-line-number=\"7\"></td><td id=\"file-potusparse-js-v3-LC7\">return {</td></tr><tr><td id=\"file-potusparse-js-v3-L8\" data-line-number=\"8\"></td><td id=\"file-potusparse-js-v3-LC8\">name: $('.firstHeading', html).text(),</td></tr><tr><td id=\"file-potusparse-js-v3-L9\" data-line-number=\"9\"></td><td id=\"file-potusparse-js-v3-LC9\">birthday: $('.bday', html).text(),</td></tr><tr><td id=\"file-potusparse-js-v3-L10\" data-line-number=\"10\"></td><td id=\"file-potusparse-js-v3-LC10\">};</td></tr><tr><td id=\"file-potusparse-js-v3-L11\" data-line-number=\"11\"></td><td id=\"file-potusparse-js-v3-LC11\">})</td></tr><tr><td id=\"file-potusparse-js-v3-L12\" data-line-number=\"12\"></td><td id=\"file-potusparse-js-v3-LC12\">.catch(function(err) {</td></tr><tr><td id=\"file-potusparse-js-v3-L13\" data-line-number=\"13\"></td><td id=\"file-potusparse-js-v3-LC13\">//handle error</td></tr><tr><td id=\"file-potusparse-js-v3-L14\" data-line-number=\"14\"></td><td id=\"file-potusparse-js-v3-LC14\">});</td></tr><tr><td id=\"file-potusparse-js-v3-L15\" data-line-number=\"15\"></td><td id=\"file-potusparse-js-v3-LC15\">};</td></tr><tr><td id=\"file-potusparse-js-v3-L16\" data-line-number=\"16\"></td><td id=\"file-potusparse-js-v3-LC16\"></td></tr><tr><td id=\"file-potusparse-js-v3-L17\" data-line-number=\"17\"></td><td id=\"file-potusparse-js-v3-LC17\">module.exports = potusParse;</td></tr></tbody></table>\n<p>Now let’s return to our original file potusScraper.js and require the potusParse.js module. We’ll then apply it to the list of wikiUrls we gathered earlier.</p>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-potusparse-js-v4-L1\" data-line-number=\"1\"></td><td id=\"file-potusparse-js-v4-LC1\"></td></tr><tr><td id=\"file-potusparse-js-v4-L2\" data-line-number=\"2\"></td><td id=\"file-potusparse-js-v4-LC2\">const rp = require('request-promise');</td></tr><tr><td id=\"file-potusparse-js-v4-L3\" data-line-number=\"3\"></td><td id=\"file-potusparse-js-v4-LC3\">const $ = require('cheerio');</td></tr><tr><td id=\"file-potusparse-js-v4-L4\" data-line-number=\"4\"></td><td id=\"file-potusparse-js-v4-LC4\">const potusParse = require('./potusParse');</td></tr><tr><td id=\"file-potusparse-js-v4-L5\" data-line-number=\"5\"></td><td id=\"file-potusparse-js-v4-LC5\">const url = 'https://en.wikipedia.org/wiki/List_of_Presidents_of_the_United_States';</td></tr><tr><td id=\"file-potusparse-js-v4-L6\" data-line-number=\"6\"></td><td id=\"file-potusparse-js-v4-LC6\"></td></tr><tr><td id=\"file-potusparse-js-v4-L7\" data-line-number=\"7\"></td><td id=\"file-potusparse-js-v4-LC7\">rp(url)</td></tr><tr><td id=\"file-potusparse-js-v4-L8\" data-line-number=\"8\"></td><td id=\"file-potusparse-js-v4-LC8\">.then(function(html) {</td></tr><tr><td id=\"file-potusparse-js-v4-L9\" data-line-number=\"9\"></td><td id=\"file-potusparse-js-v4-LC9\">//success!</td></tr><tr><td id=\"file-potusparse-js-v4-L10\" data-line-number=\"10\"></td><td id=\"file-potusparse-js-v4-LC10\">const wikiUrls = [];</td></tr><tr><td id=\"file-potusparse-js-v4-L11\" data-line-number=\"11\"></td><td id=\"file-potusparse-js-v4-LC11\">for (let i = 0; i &lt; 45; i++) {</td></tr><tr><td id=\"file-potusparse-js-v4-L12\" data-line-number=\"12\"></td><td id=\"file-potusparse-js-v4-LC12\">wikiUrls.push($('big &gt; a', html)[i].attribs.href);</td></tr><tr><td id=\"file-potusparse-js-v4-L13\" data-line-number=\"13\"></td><td id=\"file-potusparse-js-v4-LC13\">}</td></tr><tr><td id=\"file-potusparse-js-v4-L14\" data-line-number=\"14\"></td><td id=\"file-potusparse-js-v4-LC14\">return Promise.all(</td></tr><tr><td id=\"file-potusparse-js-v4-L15\" data-line-number=\"15\"></td><td id=\"file-potusparse-js-v4-LC15\">wikiUrls.map(function(url) {</td></tr><tr><td id=\"file-potusparse-js-v4-L16\" data-line-number=\"16\"></td><td id=\"file-potusparse-js-v4-LC16\">return potusParse('https://en.wikipedia.org' + url);</td></tr><tr><td id=\"file-potusparse-js-v4-L17\" data-line-number=\"17\"></td><td id=\"file-potusparse-js-v4-LC17\">})</td></tr><tr><td id=\"file-potusparse-js-v4-L18\" data-line-number=\"18\"></td><td id=\"file-potusparse-js-v4-LC18\">);</td></tr><tr><td id=\"file-potusparse-js-v4-L19\" data-line-number=\"19\"></td><td id=\"file-potusparse-js-v4-LC19\">})</td></tr><tr><td id=\"file-potusparse-js-v4-L20\" data-line-number=\"20\"></td><td id=\"file-potusparse-js-v4-LC20\">.then(function(presidents) {</td></tr><tr><td id=\"file-potusparse-js-v4-L21\" data-line-number=\"21\"></td><td id=\"file-potusparse-js-v4-LC21\">console.log(presidents);</td></tr><tr><td id=\"file-potusparse-js-v4-L22\" data-line-number=\"22\"></td><td id=\"file-potusparse-js-v4-LC22\">})</td></tr><tr><td id=\"file-potusparse-js-v4-L23\" data-line-number=\"23\"></td><td id=\"file-potusparse-js-v4-LC23\">.catch(function(err) {</td></tr><tr><td id=\"file-potusparse-js-v4-L24\" data-line-number=\"24\"></td><td id=\"file-potusparse-js-v4-LC24\">//handle error</td></tr><tr><td id=\"file-potusparse-js-v4-L25\" data-line-number=\"25\"></td><td id=\"file-potusparse-js-v4-LC25\">console.log(err);</td></tr><tr><td id=\"file-potusparse-js-v4-L26\" data-line-number=\"26\"></td><td id=\"file-potusparse-js-v4-LC26\">});</td></tr></tbody></table>\n<p>Output:</p>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-potusparse-js-v4-output-L1\" data-line-number=\"1\"></td><td id=\"file-potusparse-js-v4-output-LC1\"></td></tr><tr><td id=\"file-potusparse-js-v4-output-L2\" data-line-number=\"2\"></td><td id=\"file-potusparse-js-v4-output-LC2\">[</td></tr><tr><td id=\"file-potusparse-js-v4-output-L3\" data-line-number=\"3\"></td><td id=\"file-potusparse-js-v4-output-LC3\">{ name: 'George Washington', birthday: '1732-02-22' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L4\" data-line-number=\"4\"></td><td id=\"file-potusparse-js-v4-output-LC4\">{ name: 'John Adams', birthday: '1735-10-30' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L5\" data-line-number=\"5\"></td><td id=\"file-potusparse-js-v4-output-LC5\">{ name: 'Thomas Jefferson', birthday: '1743-04-13' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L6\" data-line-number=\"6\"></td><td id=\"file-potusparse-js-v4-output-LC6\">{ name: 'James Madison', birthday: '1751-03-16' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L7\" data-line-number=\"7\"></td><td id=\"file-potusparse-js-v4-output-LC7\">{ name: 'James Monroe', birthday: '1758-04-28' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L8\" data-line-number=\"8\"></td><td id=\"file-potusparse-js-v4-output-LC8\">{ name: 'John Quincy Adams', birthday: '1767-07-11' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L9\" data-line-number=\"9\"></td><td id=\"file-potusparse-js-v4-output-LC9\">{ name: 'Andrew Jackson', birthday: '1767-03-15' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L10\" data-line-number=\"10\"></td><td id=\"file-potusparse-js-v4-output-LC10\">{ name: 'Martin Van Buren', birthday: '1782-12-05' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L11\" data-line-number=\"11\"></td><td id=\"file-potusparse-js-v4-output-LC11\">{ name: 'William Henry Harrison', birthday: '1773-02-09' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L12\" data-line-number=\"12\"></td><td id=\"file-potusparse-js-v4-output-LC12\">{ name: 'John Tyler', birthday: '1790-03-29' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L13\" data-line-number=\"13\"></td><td id=\"file-potusparse-js-v4-output-LC13\">{ name: 'James K. Polk', birthday: '1795-11-02' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L14\" data-line-number=\"14\"></td><td id=\"file-potusparse-js-v4-output-LC14\">{ name: 'Zachary Taylor', birthday: '1784-11-24' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L15\" data-line-number=\"15\"></td><td id=\"file-potusparse-js-v4-output-LC15\">{ name: 'Millard Fillmore', birthday: '1800-01-07' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L16\" data-line-number=\"16\"></td><td id=\"file-potusparse-js-v4-output-LC16\">{ name: 'Franklin Pierce', birthday: '1804-11-23' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L17\" data-line-number=\"17\"></td><td id=\"file-potusparse-js-v4-output-LC17\">{ name: 'James Buchanan', birthday: '1791-04-23' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L18\" data-line-number=\"18\"></td><td id=\"file-potusparse-js-v4-output-LC18\">{ name: 'Abraham Lincoln', birthday: '1809-02-12' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L19\" data-line-number=\"19\"></td><td id=\"file-potusparse-js-v4-output-LC19\">{ name: 'Andrew Johnson', birthday: '1808-12-29' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L20\" data-line-number=\"20\"></td><td id=\"file-potusparse-js-v4-output-LC20\">{ name: 'Ulysses S. Grant', birthday: '1822-04-27' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L21\" data-line-number=\"21\"></td><td id=\"file-potusparse-js-v4-output-LC21\">{ name: 'Rutherford B. Hayes', birthday: '1822-10-04' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L22\" data-line-number=\"22\"></td><td id=\"file-potusparse-js-v4-output-LC22\">{ name: 'James A. Garfield', birthday: '1831-11-19' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L23\" data-line-number=\"23\"></td><td id=\"file-potusparse-js-v4-output-LC23\">{ name: 'Chester A. Arthur', birthday: '1829-10-05' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L24\" data-line-number=\"24\"></td><td id=\"file-potusparse-js-v4-output-LC24\">{ name: 'Grover Cleveland', birthday: '1837-03-18' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L25\" data-line-number=\"25\"></td><td id=\"file-potusparse-js-v4-output-LC25\">{ name: 'Benjamin Harrison', birthday: '1833-08-20' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L26\" data-line-number=\"26\"></td><td id=\"file-potusparse-js-v4-output-LC26\">{ name: 'Grover Cleveland', birthday: '1837-03-18' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L27\" data-line-number=\"27\"></td><td id=\"file-potusparse-js-v4-output-LC27\">{ name: 'William McKinley', birthday: '1843-01-29' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L28\" data-line-number=\"28\"></td><td id=\"file-potusparse-js-v4-output-LC28\">{ name: 'Theodore Roosevelt', birthday: '1858-10-27' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L29\" data-line-number=\"29\"></td><td id=\"file-potusparse-js-v4-output-LC29\">{ name: 'William Howard Taft', birthday: '1857-09-15' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L30\" data-line-number=\"30\"></td><td id=\"file-potusparse-js-v4-output-LC30\">{ name: 'Woodrow Wilson', birthday: '1856-12-28' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L31\" data-line-number=\"31\"></td><td id=\"file-potusparse-js-v4-output-LC31\">{ name: 'Warren G. Harding', birthday: '1865-11-02' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L32\" data-line-number=\"32\"></td><td id=\"file-potusparse-js-v4-output-LC32\">{ name: 'Calvin Coolidge', birthday: '1872-07-04' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L33\" data-line-number=\"33\"></td><td id=\"file-potusparse-js-v4-output-LC33\">{ name: 'Herbert Hoover', birthday: '1874-08-10' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L34\" data-line-number=\"34\"></td><td id=\"file-potusparse-js-v4-output-LC34\">{ name: 'Franklin D. Roosevelt', birthday: '1882-01-30' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L35\" data-line-number=\"35\"></td><td id=\"file-potusparse-js-v4-output-LC35\">{ name: 'Harry S. Truman', birthday: '1884-05-08' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L36\" data-line-number=\"36\"></td><td id=\"file-potusparse-js-v4-output-LC36\">{ name: 'Dwight D. Eisenhower', birthday: '1890-10-14' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L37\" data-line-number=\"37\"></td><td id=\"file-potusparse-js-v4-output-LC37\">{ name: 'John F. Kennedy', birthday: '1917-05-29' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L38\" data-line-number=\"38\"></td><td id=\"file-potusparse-js-v4-output-LC38\">{ name: 'Lyndon B. Johnson', birthday: '1908-08-27' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L39\" data-line-number=\"39\"></td><td id=\"file-potusparse-js-v4-output-LC39\">{ name: 'Richard Nixon', birthday: '1913-01-09' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L40\" data-line-number=\"40\"></td><td id=\"file-potusparse-js-v4-output-LC40\">{ name: 'Gerald Ford', birthday: '1913-07-14' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L41\" data-line-number=\"41\"></td><td id=\"file-potusparse-js-v4-output-LC41\">{ name: 'Jimmy Carter', birthday: '1924-10-01' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L42\" data-line-number=\"42\"></td><td id=\"file-potusparse-js-v4-output-LC42\">{ name: 'Ronald Reagan', birthday: '1911-02-06' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L43\" data-line-number=\"43\"></td><td id=\"file-potusparse-js-v4-output-LC43\">{ name: 'George H. W. Bush', birthday: '1924-06-12' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L44\" data-line-number=\"44\"></td><td id=\"file-potusparse-js-v4-output-LC44\">{ name: 'Bill Clinton', birthday: '1946-08-19' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L45\" data-line-number=\"45\"></td><td id=\"file-potusparse-js-v4-output-LC45\">{ name: 'George W. Bush', birthday: '1946-07-06' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L46\" data-line-number=\"46\"></td><td id=\"file-potusparse-js-v4-output-LC46\">{ name: 'Barack Obama', birthday: '1961-08-04' },</td></tr><tr><td id=\"file-potusparse-js-v4-output-L47\" data-line-number=\"47\"></td><td id=\"file-potusparse-js-v4-output-LC47\">{ name: 'Donald Trump', birthday: '1946-06-14' }</td></tr><tr><td id=\"file-potusparse-js-v4-output-L48\" data-line-number=\"48\"></td><td id=\"file-potusparse-js-v4-output-LC48\">]</td></tr></tbody></table>\n<h3>Rendering JavaScript Pages</h3>\n<p>Voilà! A list of the names and birthdays of all 45 U.S. presidents. Using just the request-promise module and Cheerio.js should allow you to scrape the vast majority of sites on the internet.</p>\n<p>Recently, however, many sites have begun using JavaScript to generate dynamic content on their websites. This causes a problem for request-promise and other similar HTTP request libraries (such as axios and fetch), because they only get the response from the initial request, but they cannot execute the JavaScript the way a web browser can.</p>\n<p>Thus, to scrape sites that require JavaScript execution, we need another solution. In our next example, we will get the titles for all of the posts on the front page of Reddit. Let’s see what happens when we try to use request-promise as we did in the previous example.</p>\n<p>Output:</p>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-reddit-js-v1-L1\" data-line-number=\"1\"></td><td id=\"file-reddit-js-v1-LC1\">const rp = require('request-promise');</td></tr><tr><td id=\"file-reddit-js-v1-L2\" data-line-number=\"2\"></td><td id=\"file-reddit-js-v1-LC2\">const url = 'https://www.reddit.com';</td></tr><tr><td id=\"file-reddit-js-v1-L3\" data-line-number=\"3\"></td><td id=\"file-reddit-js-v1-LC3\"></td></tr><tr><td id=\"file-reddit-js-v1-L4\" data-line-number=\"4\"></td><td id=\"file-reddit-js-v1-LC4\">rp(url)</td></tr><tr><td id=\"file-reddit-js-v1-L5\" data-line-number=\"5\"></td><td id=\"file-reddit-js-v1-LC5\">.then(function(html){</td></tr><tr><td id=\"file-reddit-js-v1-L6\" data-line-number=\"6\"></td><td id=\"file-reddit-js-v1-LC6\">//success!</td></tr><tr><td id=\"file-reddit-js-v1-L7\" data-line-number=\"7\"></td><td id=\"file-reddit-js-v1-LC7\">console.log(html);</td></tr><tr><td id=\"file-reddit-js-v1-L8\" data-line-number=\"8\"></td><td id=\"file-reddit-js-v1-LC8\">})</td></tr><tr><td id=\"file-reddit-js-v1-L9\" data-line-number=\"9\"></td><td id=\"file-reddit-js-v1-LC9\">.catch(function(err){</td></tr><tr><td id=\"file-reddit-js-v1-L10\" data-line-number=\"10\"></td><td id=\"file-reddit-js-v1-LC10\">//handle error</td></tr><tr><td id=\"file-reddit-js-v1-L11\" data-line-number=\"11\"></td><td id=\"file-reddit-js-v1-LC11\">});</td></tr><tr><td id=\"file-reddit-js-v1-L12\" data-line-number=\"12\"></td><td id=\"file-reddit-js-v1-LC12\">}</td></tr></tbody></table>\n<p>Here’s what the output looks like:</p>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-reddit-js-v1-output-L1\" data-line-number=\"1\"></td><td id=\"file-reddit-js-v1-output-LC1\">&lt;!DOCTYPE html&gt;&lt;html</td></tr><tr><td id=\"file-reddit-js-v1-output-L2\" data-line-number=\"2\"></td><td id=\"file-reddit-js-v1-output-LC2\">lang=\"en\"&gt;&lt;head&gt;&lt;title&gt;reddit: the front page of the</td></tr><tr><td id=\"file-reddit-js-v1-output-L3\" data-line-number=\"3\"></td><td id=\"file-reddit-js-v1-output-LC3\">internet&lt;/title&gt;</td></tr><tr><td id=\"file-reddit-js-v1-output-L4\" data-line-number=\"4\"></td><td id=\"file-reddit-js-v1-output-LC4\">...</td></tr></tbody></table>\n<p><img src=\"https://cdn-media-1.freecodecamp.org/images/1*mKzPVGRR4CFKMwQw5y_YnQ.png\"></p>\n<p>Hmmm…not quite what we want. That’s because getting the actual content requires you to run the JavaScript on the page! With Puppeteer, that’s no problem.</p>\n<p>Puppeteer is an extremely popular new module brought to you by the Google Chrome team that allows you to control a headless browser. This is perfect for programmatically scraping pages that require JavaScript execution. Let’s get the HTML from the front page of Reddit using Puppeteer instead of request-promise.</p>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-reddit-js-v2-L1\" data-line-number=\"1\"></td><td id=\"file-reddit-js-v2-LC1\">const puppeteer = require('puppeteer');</td></tr><tr><td id=\"file-reddit-js-v2-L2\" data-line-number=\"2\"></td><td id=\"file-reddit-js-v2-LC2\">const url = 'https://www.reddit.com';</td></tr><tr><td id=\"file-reddit-js-v2-L3\" data-line-number=\"3\"></td><td id=\"file-reddit-js-v2-LC3\"></td></tr><tr><td id=\"file-reddit-js-v2-L4\" data-line-number=\"4\"></td><td id=\"file-reddit-js-v2-LC4\">puppeteer</td></tr><tr><td id=\"file-reddit-js-v2-L5\" data-line-number=\"5\"></td><td id=\"file-reddit-js-v2-LC5\">.launch()</td></tr><tr><td id=\"file-reddit-js-v2-L6\" data-line-number=\"6\"></td><td id=\"file-reddit-js-v2-LC6\">.then(function(browser) {</td></tr><tr><td id=\"file-reddit-js-v2-L7\" data-line-number=\"7\"></td><td id=\"file-reddit-js-v2-LC7\">return browser.newPage();</td></tr><tr><td id=\"file-reddit-js-v2-L8\" data-line-number=\"8\"></td><td id=\"file-reddit-js-v2-LC8\">})</td></tr><tr><td id=\"file-reddit-js-v2-L9\" data-line-number=\"9\"></td><td id=\"file-reddit-js-v2-LC9\">.then(function(page) {</td></tr><tr><td id=\"file-reddit-js-v2-L10\" data-line-number=\"10\"></td><td id=\"file-reddit-js-v2-LC10\">return page.goto(url).then(function() {</td></tr><tr><td id=\"file-reddit-js-v2-L11\" data-line-number=\"11\"></td><td id=\"file-reddit-js-v2-LC11\">return page.content();</td></tr><tr><td id=\"file-reddit-js-v2-L12\" data-line-number=\"12\"></td><td id=\"file-reddit-js-v2-LC12\">});</td></tr><tr><td id=\"file-reddit-js-v2-L13\" data-line-number=\"13\"></td><td id=\"file-reddit-js-v2-LC13\">})</td></tr><tr><td id=\"file-reddit-js-v2-L14\" data-line-number=\"14\"></td><td id=\"file-reddit-js-v2-LC14\">.then(function(html) {</td></tr><tr><td id=\"file-reddit-js-v2-L15\" data-line-number=\"15\"></td><td id=\"file-reddit-js-v2-LC15\">console.log(html);</td></tr><tr><td id=\"file-reddit-js-v2-L16\" data-line-number=\"16\"></td><td id=\"file-reddit-js-v2-LC16\">})</td></tr><tr><td id=\"file-reddit-js-v2-L17\" data-line-number=\"17\"></td><td id=\"file-reddit-js-v2-LC17\">.catch(function(err) {</td></tr><tr><td id=\"file-reddit-js-v2-L18\" data-line-number=\"18\"></td><td id=\"file-reddit-js-v2-LC18\">//handle error</td></tr><tr><td id=\"file-reddit-js-v2-L19\" data-line-number=\"19\"></td><td id=\"file-reddit-js-v2-LC19\">});</td></tr></tbody></table>\n<p>Output:</p>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-reddit-js-v2-output-L1\" data-line-number=\"1\"></td><td id=\"file-reddit-js-v2-output-LC1\">&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;&lt;link</td></tr><tr><td id=\"file-reddit-js-v2-output-L2\" data-line-number=\"2\"></td><td id=\"file-reddit-js-v2-output-LC2\">href=\"//c.amazon-adsystem.com/aax2/apstag.js\" rel=\"preload\"</td></tr><tr><td id=\"file-reddit-js-v2-output-L3\" data-line-number=\"3\"></td><td id=\"file-reddit-js-v2-output-LC3\">as=\"script\"&gt;</td></tr><tr><td id=\"file-reddit-js-v2-output-L4\" data-line-number=\"4\"></td><td id=\"file-reddit-js-v2-output-LC4\">...</td></tr></tbody></table>\n<p>Nice! The page is filled with the correct content!</p>\n<p><img src=\"https://cdn-media-1.freecodecamp.org/images/1*N5HtAiijcMEB_fBQvPd7Ow.png\"></p>\n<p>Now we can use Chrome DevTools like we did in the previous example.</p>\n<p><img src=\"https://cdn-media-1.freecodecamp.org/images/1*tHSgjPMvn3M26N2f7Q2B1Q.png\"></p>\n<p>It looks like Reddit is putting the titles inside “h2” tags. Let’s use Cheerio.js to extract the h2 tags from the page.</p>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-reddit-js-v3-L1\" data-line-number=\"1\"></td><td id=\"file-reddit-js-v3-LC1\">const puppeteer = require('puppeteer');</td></tr><tr><td id=\"file-reddit-js-v3-L2\" data-line-number=\"2\"></td><td id=\"file-reddit-js-v3-LC2\">const $ = require('cheerio');</td></tr><tr><td id=\"file-reddit-js-v3-L3\" data-line-number=\"3\"></td><td id=\"file-reddit-js-v3-LC3\">const url = 'https://www.reddit.com';</td></tr><tr><td id=\"file-reddit-js-v3-L4\" data-line-number=\"4\"></td><td id=\"file-reddit-js-v3-LC4\"></td></tr><tr><td id=\"file-reddit-js-v3-L5\" data-line-number=\"5\"></td><td id=\"file-reddit-js-v3-LC5\">puppeteer</td></tr><tr><td id=\"file-reddit-js-v3-L6\" data-line-number=\"6\"></td><td id=\"file-reddit-js-v3-LC6\">.launch()</td></tr><tr><td id=\"file-reddit-js-v3-L7\" data-line-number=\"7\"></td><td id=\"file-reddit-js-v3-LC7\">.then(function(browser) {</td></tr><tr><td id=\"file-reddit-js-v3-L8\" data-line-number=\"8\"></td><td id=\"file-reddit-js-v3-LC8\">return browser.newPage();</td></tr><tr><td id=\"file-reddit-js-v3-L9\" data-line-number=\"9\"></td><td id=\"file-reddit-js-v3-LC9\">})</td></tr><tr><td id=\"file-reddit-js-v3-L10\" data-line-number=\"10\"></td><td id=\"file-reddit-js-v3-LC10\">.then(function(page) {</td></tr><tr><td id=\"file-reddit-js-v3-L11\" data-line-number=\"11\"></td><td id=\"file-reddit-js-v3-LC11\">return page.goto(url).then(function() {</td></tr><tr><td id=\"file-reddit-js-v3-L12\" data-line-number=\"12\"></td><td id=\"file-reddit-js-v3-LC12\">return page.content();</td></tr><tr><td id=\"file-reddit-js-v3-L13\" data-line-number=\"13\"></td><td id=\"file-reddit-js-v3-LC13\">});</td></tr><tr><td id=\"file-reddit-js-v3-L14\" data-line-number=\"14\"></td><td id=\"file-reddit-js-v3-LC14\">})</td></tr><tr><td id=\"file-reddit-js-v3-L15\" data-line-number=\"15\"></td><td id=\"file-reddit-js-v3-LC15\">.then(function(html) {</td></tr><tr><td id=\"file-reddit-js-v3-L16\" data-line-number=\"16\"></td><td id=\"file-reddit-js-v3-LC16\">$('h2', html).each(function() {</td></tr><tr><td id=\"file-reddit-js-v3-L17\" data-line-number=\"17\"></td><td id=\"file-reddit-js-v3-LC17\">console.log($(this).text());</td></tr><tr><td id=\"file-reddit-js-v3-L18\" data-line-number=\"18\"></td><td id=\"file-reddit-js-v3-LC18\">});</td></tr><tr><td id=\"file-reddit-js-v3-L19\" data-line-number=\"19\"></td><td id=\"file-reddit-js-v3-LC19\">})</td></tr><tr><td id=\"file-reddit-js-v3-L20\" data-line-number=\"20\"></td><td id=\"file-reddit-js-v3-LC20\">.catch(function(err) {</td></tr><tr><td id=\"file-reddit-js-v3-L21\" data-line-number=\"21\"></td><td id=\"file-reddit-js-v3-LC21\">//handle error</td></tr><tr><td id=\"file-reddit-js-v3-L22\" data-line-number=\"22\"></td><td id=\"file-reddit-js-v3-LC22\">});</td></tr></tbody></table>\n<p>Output:</p>\n<table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-reddit-js-v3-output-L1\" data-line-number=\"1\"></td><td id=\"file-reddit-js-v3-output-LC1\">Russian Pipeline. Upvote so that this is the first image people see when they Google “Russian Pipeline”</td></tr><tr><td id=\"file-reddit-js-v3-output-L2\" data-line-number=\"2\"></td><td id=\"file-reddit-js-v3-output-LC2\">John F. Kennedy Jr. Sitting in the pilot seat of the Marine One circa 1963</td></tr><tr><td id=\"file-reddit-js-v3-output-L3\" data-line-number=\"3\"></td><td id=\"file-reddit-js-v3-output-LC3\">I didn't take it as a compliment.</td></tr><tr><td id=\"file-reddit-js-v3-output-L4\" data-line-number=\"4\"></td><td id=\"file-reddit-js-v3-output-LC4\">How beautiful is this</td></tr><tr><td id=\"file-reddit-js-v3-output-L5\" data-line-number=\"5\"></td><td id=\"file-reddit-js-v3-output-LC5\">Hustle like Faye</td></tr><tr><td id=\"file-reddit-js-v3-output-L6\" data-line-number=\"6\"></td><td id=\"file-reddit-js-v3-output-LC6\">The power of a salt water crocodile's tail.</td></tr><tr><td id=\"file-reddit-js-v3-output-L7\" data-line-number=\"7\"></td><td id=\"file-reddit-js-v3-output-LC7\">I'm 36, and will be dead inside of a year.</td></tr><tr><td id=\"file-reddit-js-v3-output-L8\" data-line-number=\"8\"></td><td id=\"file-reddit-js-v3-output-LC8\">F***ing genius.</td></tr><tr><td id=\"file-reddit-js-v3-output-L9\" data-line-number=\"9\"></td><td id=\"file-reddit-js-v3-output-LC9\">TIL Anthony Daniels, who endured years of discomfort in the C-3PO costume, was so annoyed by Alan Tudyk (Rogue One) playing K-2SO in the comfort of a motion-capture suit that he cursed at Tudyk. Tudyk later joked that a \"fuck you\" from Daniels was among the highest compliments he had ever received.</td></tr><tr><td id=\"file-reddit-js-v3-output-L10\" data-line-number=\"10\"></td><td id=\"file-reddit-js-v3-output-LC10\">Reminder about the fact UC Davis paid over $100k to remove this photo from the internet.</td></tr><tr><td id=\"file-reddit-js-v3-output-L11\" data-line-number=\"11\"></td><td id=\"file-reddit-js-v3-output-LC11\">King of the Hill reruns will start airing on Comedy Central July 24th</td></tr><tr><td id=\"file-reddit-js-v3-output-L12\" data-line-number=\"12\"></td><td id=\"file-reddit-js-v3-output-LC12\">[Image] Slow and steady</td></tr><tr><td id=\"file-reddit-js-v3-output-L13\" data-line-number=\"13\"></td><td id=\"file-reddit-js-v3-output-LC13\">White House: Trump open to Russia questioning US citizens</td></tr><tr><td id=\"file-reddit-js-v3-output-L14\" data-line-number=\"14\"></td><td id=\"file-reddit-js-v3-output-LC14\">Godzilla: King of the Monsters Teaser Banner</td></tr><tr><td id=\"file-reddit-js-v3-output-L15\" data-line-number=\"15\"></td><td id=\"file-reddit-js-v3-output-LC15\">He tried</td></tr><tr><td id=\"file-reddit-js-v3-output-L16\" data-line-number=\"16\"></td><td id=\"file-reddit-js-v3-output-LC16\">Soldier reunited with his dog after being away.</td></tr><tr><td id=\"file-reddit-js-v3-output-L17\" data-line-number=\"17\"></td><td id=\"file-reddit-js-v3-output-LC17\">Hiring a hitman on yourself and preparing for battle is the ultimate extreme sport.</td></tr><tr><td id=\"file-reddit-js-v3-output-L18\" data-line-number=\"18\"></td><td id=\"file-reddit-js-v3-output-LC18\">Two paintballs colliding midair</td></tr><tr><td id=\"file-reddit-js-v3-output-L19\" data-line-number=\"19\"></td><td id=\"file-reddit-js-v3-output-LC19\">My thoughts &amp; prayers are with those ears</td></tr><tr><td id=\"file-reddit-js-v3-output-L20\" data-line-number=\"20\"></td><td id=\"file-reddit-js-v3-output-LC20\">When even your fantasy starts dropping hints</td></tr><tr><td id=\"file-reddit-js-v3-output-L21\" data-line-number=\"21\"></td><td id=\"file-reddit-js-v3-output-LC21\">Elon Musk's apology is out</td></tr><tr><td id=\"file-reddit-js-v3-output-L22\" data-line-number=\"22\"></td><td id=\"file-reddit-js-v3-output-LC22\">\"When you're going private so you plant trees to throw some last shade at TDNW before you vanish.\" Thanos' farm advances. The soul children will have full bellies. 1024 points will give him the resources to double, and irrigate, his farm. (See comment)</td></tr><tr><td id=\"file-reddit-js-v3-output-L23\" data-line-number=\"23\"></td><td id=\"file-reddit-js-v3-output-LC23\">Some leaders prefer chess, others prefer hungry hippos. Travis Chapman, oil, 2018</td></tr><tr><td id=\"file-reddit-js-v3-output-L24\" data-line-number=\"24\"></td><td id=\"file-reddit-js-v3-output-LC24\">The S.S. Ste. Claire, retired from ferrying amusement park goers, now ferries The Damned across the river Styx.</td></tr><tr><td id=\"file-reddit-js-v3-output-L25\" data-line-number=\"25\"></td><td id=\"file-reddit-js-v3-output-LC25\">A soldier is reunited with his dog</td></tr><tr><td id=\"file-reddit-js-v3-output-L26\" data-line-number=\"26\"></td><td id=\"file-reddit-js-v3-output-LC26\">*hits blunt*</td></tr><tr><td id=\"file-reddit-js-v3-output-L27\" data-line-number=\"27\"></td><td id=\"file-reddit-js-v3-output-LC27\">Today I Learned</td></tr><tr><td id=\"file-reddit-js-v3-output-L28\" data-line-number=\"28\"></td><td id=\"file-reddit-js-v3-output-LC28\">Black Panther Scene Representing the Pan-African Flag</td></tr><tr><td id=\"file-reddit-js-v3-output-L29\" data-line-number=\"29\"></td><td id=\"file-reddit-js-v3-output-LC29\">The precision of this hydraulic press.</td></tr><tr><td id=\"file-reddit-js-v3-output-L30\" data-line-number=\"30\"></td><td id=\"file-reddit-js-v3-output-LC30\">Let bring the game to another level</td></tr><tr><td id=\"file-reddit-js-v3-output-L31\" data-line-number=\"31\"></td><td id=\"file-reddit-js-v3-output-LC31\">When you're fighting a Dark Souls boss and you gamble to get 'just one extra hit' in instead of rolling out of range.</td></tr><tr><td id=\"file-reddit-js-v3-output-L32\" data-line-number=\"32\"></td><td id=\"file-reddit-js-v3-output-LC32\">\"I check for traps\"</td></tr><tr><td id=\"file-reddit-js-v3-output-L33\" data-line-number=\"33\"></td><td id=\"file-reddit-js-v3-output-LC33\">Anon finds his home at last</td></tr><tr><td id=\"file-reddit-js-v3-output-L34\" data-line-number=\"34\"></td><td id=\"file-reddit-js-v3-output-LC34\">He’s hungry</td></tr><tr><td id=\"file-reddit-js-v3-output-L35\" data-line-number=\"35\"></td><td id=\"file-reddit-js-v3-output-LC35\">Being a single mother is a thankless job.</td></tr><tr><td id=\"file-reddit-js-v3-output-L36\" data-line-number=\"36\"></td><td id=\"file-reddit-js-v3-output-LC36\">TIL That when you're pulling out Minigun, you're actually pulling out suitcase that then transforms into Minigun.</td></tr><tr><td id=\"file-reddit-js-v3-output-L37\" data-line-number=\"37\"></td><td id=\"file-reddit-js-v3-output-LC37\">OMG guys don’t look!!! 🙈🙈🙈</td></tr><tr><td id=\"file-reddit-js-v3-output-L38\" data-line-number=\"38\"></td><td id=\"file-reddit-js-v3-output-LC38\">hyubsama's emote of his own face denied for political reasons because twitch thinks its a picture of Kim Jong Un</td></tr></tbody></table>\n<h3>Additional Resources</h3>\n<p>And there’s the list! At this point you should feel comfortable writing your first web scraper to gather data from any website. Here are a few additional resources that you may find helpful during your web scraping journey:</p>\n<ul>\n<li><a href=\"https://www.scraperapi.com/blog/the-10-best-rotating-proxy-services-for-web-scraping\">List of web scraping proxy services</a></li>\n<li><a href=\"https://www.scraperapi.com/blog/the-10-best-web-scraping-tools\">List of handy web scraping tools</a></li>\n<li><a href=\"https://www.scraperapi.com/blog/5-tips-for-web-scraping\">List of web scraping tips</a></li>\n<li><a href=\"https://www.scraperapi.com/blog/free-shared-dedicated-datacenter-residential-rotating-proxies-for-web-scraping\">Comparison of web scraping proxies</a></li>\n<li><a href=\"https://github.com/cheeriojs/cheerio\">Cheerio Documentation</a></li>\n<li><a href=\"https://github.com/GoogleChrome/puppeteer\">Puppeteer Documentation</a></li>\n</ul>\n<hr>"},{"url":"/docs/articles/buffers/","relativePath":"docs/articles/buffers.md","relativeDir":"docs/articles","base":"buffers.md","name":"buffers","frontmatter":{"title":"Node Buffers","sections":[],"seo":{"title":"","description":"A buffer is an area of memory. JavaScript developers are not familiar with this concept, much less than C, C++ or Go developers","robots":[],"extra":[{"name":"og:description","value":"A buffer is an area of memory. JavaScript developers are not familiar with this concept, much less than C, C++ or Go developers","keyName":"property","relativeUrl":false},{"name":"og:title","value":"Buffer","keyName":"property","relativeUrl":false},{"name":"og:image","value":"images/javascript-4ced5a19.gif","keyName":"property","relativeUrl":true}],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h2>What is a buffer?</h2>\n<p>A buffer is an area of memory. JavaScript developers are not familiar with this concept, much less than C, C++ or Go developers (or any programmer that uses a system programming language), which interact with memory every day.</p>\n<p>It represents a fixed-size chunk of memory (can't be resized) allocated outside of the V8 JavaScript engine.</p>\n<p>You can think of a buffer like an array of integers, which each represent a byte of data.</p>\n<p>It is implemented by the Node.js <a href=\"https://nodejs.org/api/buffer.html\">Buffer class</a>.</p>\n<h2>Why do we need a buffer?</h2>\n<p>Buffers were introduced to help developers deal with binary data, in an ecosystem that traditionally only dealt with strings rather than binaries.</p>\n<p>Buffers are deeply linked with streams. When a stream processor receives data faster than it can digest, it puts the data in a buffer.</p>\n<p>A simple visualization of a buffer is when you are watching a YouTube video and the red line goes beyond your visualization point: you are downloading data faster than you're viewing it, and your browser buffers it.</p>\n<h2>How to create a buffer</h2>\n<p>A buffer is created using the <a href=\"https://nodejs.org/api/buffer.html#buffer_buffer_from_buffer_alloc_and_buffer_allocunsafe\"><code>Buffer.from()</code></a>, <a href=\"https://nodejs.org/api/buffer.html#buffer_class_method_buffer_alloc_size_fill_encoding\"><code>Buffer.alloc()</code></a>, and <a href=\"https://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafe_size\"><code>Buffer.allocUnsafe()</code></a> methods.</p>\n<pre><code class=\"language-js\">const buf = Buffer.from('Hey!');\n</code></pre>\n<ul>\n<li><a href=\"https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_array\"><code>Buffer.from(array)</code></a></li>\n<li><a href=\"https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length\"><code>Buffer.from(arrayBuffer[, byteOffset[, length]])</code></a></li>\n<li><a href=\"https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_buffer\"><code>Buffer.from(buffer)</code></a></li>\n<li><a href=\"https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding\"><code>Buffer.from(string[, encoding])</code></a></li>\n</ul>\n<p>You can also just initialize the buffer passing the size. This creates a 1KB buffer:</p>\n<pre><code class=\"language-js\">const buf = Buffer.alloc(1024);\n//or\nconst buf = Buffer.allocUnsafe(1024);\n</code></pre>\n<p>While both <code>alloc</code> and <code>allocUnsafe</code> allocate a <code>Buffer</code> of the specified size in bytes, the <code>Buffer</code> created by <code>alloc</code> will be <em>initialized</em> with zeroes and the one created by <code>allocUnsafe</code> will be <em>uninitialized</em>. This means that while <code>allocUnsafe</code> would be quite fast in comparison to <code>alloc</code>, the allocated segment of memory may contain old data which could potentially be sensitive.</p>\n<p>Older data, if present in the memory, can be accessed or leaked when the <code>Buffer</code> memory is read. This is what really makes <code>allocUnsafe</code> unsafe and extra care must be taken while using it.</p>\n<h2>Using a buffer</h2>\n<h3>Access the content of a buffer</h3>\n<p>A buffer, being an array of bytes, can be accessed like an array:</p>\n<pre><code class=\"language-js\">const buf = Buffer.from('Hey!');\nconsole.log(buf[0]); //72\nconsole.log(buf[1]); //101\nconsole.log(buf[2]); //121\n</code></pre>\n<p>Those numbers are the Unicode Code that identifies the character in the buffer position (H => 72, e => 101, y => 121)</p>\n<p>You can print the full content of the buffer using the <code>toString()</code> method:</p>\n<pre><code class=\"language-js\">console.log(buf.toString());\n</code></pre>\n<blockquote>\n<p>Notice that if you initialize a buffer with a number that sets its size, you'll get access to pre-initialized memory that will contain random data, not an empty buffer!</p>\n</blockquote>\n<h3>Get the length of a buffer</h3>\n<p>Use the <code>length</code> property:</p>\n<pre><code class=\"language-js\">const buf = Buffer.from('Hey!');\nconsole.log(buf.length);\n</code></pre>\n<h3>Iterate over the contents of a buffer</h3>\n<pre><code class=\"language-js\">const buf = Buffer.from('Hey!');\nfor (const item of buf) {\n    console.log(item); //72 101 121 33\n}\n</code></pre>\n<h3>Changing the content of a buffer</h3>\n<p>You can write to a buffer a whole string of data by using the <code>write()</code> method:</p>\n<pre><code class=\"language-js\">const buf = Buffer.alloc(4);\nbuf.write('Hey!');\n</code></pre>\n<p>Just like you can access a buffer with an array syntax, you can also set the contents of the buffer in the same way:</p>\n<pre><code class=\"language-js\">const buf = Buffer.from('Hey!');\nbuf[1] = 111; //o\nconsole.log(buf.toString()); //Hoy!\n</code></pre>\n<h3>Copy a buffer</h3>\n<p>Copying a buffer is possible using the <code>copy()</code> method:</p>\n<pre><code class=\"language-js\">const buf = Buffer.from('Hey!');\nlet bufcopy = Buffer.alloc(4); //allocate 4 bytes\nbuf.copy(bufcopy);\n</code></pre>\n<p>By default you copy the whole buffer. 3 more parameters let you define the starting position, the ending position, and the new buffer length:</p>\n<pre><code class=\"language-js\">const buf = Buffer.from('Hey!');\nlet bufcopy = Buffer.alloc(2); //allocate 2 bytes\nbuf.copy(bufcopy, 0, 0, 2);\nbufcopy.toString(); //'He'\n</code></pre>\n<h3>Slice a buffer</h3>\n<p>If you want to create a partial visualization of a buffer, you can create a slice. A slice is not a copy: the original buffer is still the source of truth. If that changes, your slice changes.</p>\n<p>Use the <code>slice()</code> method to create it. The first parameter is the starting position, and you can specify an optional second parameter with the end position:</p>\n<pre><code class=\"language-js\">const buf = Buffer.from('Hey!');\nbuf.slice(0).toString(); //Hey!\nconst slice = buf.slice(0, 2);\nconsole.log(slice.toString()); //He\nbuf[1] = 111; //o\nconsole.log(slice.toString()); //Ho\n</code></pre>"},{"url":"/docs/articles/dev-dep/","relativePath":"docs/articles/dev-dep.md","relativeDir":"docs/articles","base":"dev-dep.md","name":"dev-dep","frontmatter":{"title":"Dev Dependencies","sections":[],"seo":{"title":"Dependencies","description":"install an npm package using npm install you are installing it as a dependency. (npm install --production) to avoid installing those development dependencies.\n\n","robots":[],"extra":[{"name":"og:image","value":"images/react2.jpg","keyName":"property","relativeUrl":true},{"name":"og:description","value":"install an npm package using npm install you are installing it as a dependency. (npm install --production) to avoid installing those development dependencies.\n\n","keyName":"property","relativeUrl":false},{"name":"og:type","value":"website","keyName":"property","relativeUrl":false},{"name":"twitter:image","value":"images/browserify-25532eef.png","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image","keyName":"name","relativeUrl":false},{"name":"og:title","value":"Dev Dependencies","keyName":"property","relativeUrl":false}],"type":"stackbit_page_meta"},"template":"docs"},"html":"<p>When you install an npm package using <code>npm install &#x3C;package-name></code>, you are installing it as a <strong>dependency</strong>.</p>\n<p>The package is automatically listed in the package.json file, under the <code>dependencies</code> list (as of npm 5: before you had to manually specify <code>--save</code>).</p>\n<p>When you add the <code>-D</code> flag, or <code>--save-dev</code>, you are installing it as a development dependency, which adds it to the <code>devDependencies</code> list.</p>\n<p>Development dependencies are intended as development-only packages, that are unneeded in production. For example testing packages, webpack or Babel.</p>\n<p>When you go in production, if you type <code>npm install</code> and the folder contains a <code>package.json</code> file, they are installed, as npm assumes this is a development deploy.</p>\n<p>You need to set the <code>--production</code> flag (<code>npm install --production</code>) to avoid installing those development dependencies.</p>"},{"url":"/docs/about/","relativePath":"docs/about/index.md","relativeDir":"docs/about","base":"index.md","name":"index","frontmatter":{"title":"About","excerpt":"Web-Dev-Hub is my personal blogand documentation site","seo":{"title":"About","description":"Bryan Guner personal blog about page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"About","keyName":"property"},{"name":"og:description","value":"This is the About page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"About"},{"name":"twitter:description","value":"This is the About page"}]},"template":"docs"},"html":"<div align=\"center\">\n<h1>Hi 👋, I'm Bryan</h1>\n  \n<img align=\"center\"  src=\"https://github.com/bgoonz/bgoonz/blob/master/circle-small-sharp.png?raw=true?raw=true\" ></img>\n<blockquote>\n<p>Netlify Research Program Participant!</p>\n</blockquote>\n<h4><a href=\"https://master--bgoonz-blog.netlify.app/\">WEBSITE</a> ⇄ <a href=\"https://bg-portfolio.netlify.app/\">Portfolio</a> ⇄ <a href=\"https://webdevhub.jetbrains.space/oauth/auth/invite/419dd305ba717a392a02aa5b4e41e09c\">Collaborate</a> ⇄ <a href=\"https://unruffled-curran-b8a076.netlify.app/my-websites.html\">Other-Websites</a></h4>\n<p><img src=\"https://views.whatilearened.today/views/github/bgoonz/views.svg\" alt=\"Profile views\"><a href=\"https://gitter.im/bgoonz/community?utm_source=badge&#x26;utm_medium=badge&#x26;utm_campaign=pr-badge\"><img src=\"https://badges.gitter.im/bgoonz/community.svg\" alt=\"Gitter\"></a><a href=\"https://hackmd.io/5DeYj2oXTvGJ1-Xvp1Jo2Q\"><img src=\"https://hackmd.io/5DeYj2oXTvGJ1-Xvp1Jo2Q/badge\" alt=\"hackmd-github-sync-badge\"></a><a href=\"https://github.com/bgoonz?tab=followers\"><img src=\"https://img.shields.io/github/followers/bgoonz.svg?style=social&#x26;label=Follow&#x26;maxAge=2592000\" alt=\"GitHub followers\"></a></p>\n<h3>➤ <em>Email</em> <a href=\"#\">bryan.guner@gmail.com</a> <em>Phone</em> <a href=\"551-254-5505\">551-254-5505</a></h3>\n<h4 align=\"center\">A passionate Web Developer, Electrical Engineer, Musician & Producer</h4>\n<img align=\"center\" src=\"https://readme-jokes.vercel.app/api\" stye=\"width:570; height:420;\">\n<p><a href=\"https://bg-portfolio.netlify.app/\"><img src=\"https://img.shields.io/badge/-%E2%9D%A4_Portfolio-f58?style=flat-square&#x26;logo=a&#x26;logoColor=white&#x26;link=https://bg-portfolio.netlify.app/\" alt=\"Portfolio\"></a>\n<a href=\"https://github.com/bgoonz/resume-cv-portfolio-samples/blob/master/2021-resume/bryan-guner-resume-2021.pdf\" download><img src=\"https://img.shields.io/badge/-Resume-f00?style=flat-square&#x26;logo=adobe-acrobat-reader&#x26;logoColor=white\" alt=\"Resume PDF\"></a>\n<a href=\"mailto:bryan.guner@gmail.com\"><img src=\"https://img.shields.io/badge/bryan.guner@gmail.com-f4b400?style=flat-square&#x26;logo=gmail&#x26;logoColor=black&#x26;link=mailto:bryan.guner@gmail.com\" alt=\"Bryan&#x27;s email\"></a>\n<a href=\"https://web-dev-hub.com/\"><img src=\"https://img.shields.io/badge/-Blog-21759b?style=flat-square&#x26;logo=WordPress&#x26;logoColor=white&#x26;link=https://web-dev-hub.com/\" alt=\"Blog\"></a>\n<a href=\"https://www.linkedin.com/in/bryan-guner-046199128/\"><img src=\"https://img.shields.io/badge/-LinkedIn-0077b5?style=flat-square&#x26;logo=Linkedin&#x26;logoColor=white&#x26;link=https://www.linkedin.com/in/bryan-guner-046199128/\" alt=\"Linkedin\"></a>\n<a href=\"https://angel.co/u/bryan-guner\"><img src=\"https://img.shields.io/badge/-AngelList-black?style=flat-square&#x26;logo=AngelList&#x26;logoColor=white&#x26;link=https://angel.co/u/bryan-guner\" alt=\"AngelList\"></a>\n<a href=\"https://github.com/bgoonz\"><img src=\"https://img.shields.io/github/followers/bgoonz?label=follow&#x26;style=social\" alt=\"GitHub bgoonz\"></a></p>\n<p align=\"center\">\n  <a href=\"mailto:bryan.guner@gmail.com\"><img src=\"https://img.icons8.com/color/96/000000/gmail.png\" alt=\"email\"/></a><a href=\"https://www.facebook.com/bryan.guner/\"><img src=\"https://img.icons8.com/color/96/000000/facebook.png\" alt=\"facebook\"/></a><a href=\"https://twitter.com/bgooonz\"><img src=\"https://img.icons8.com/color/96/000000/twitter-squared.png\" alt=\"twitter\"/></a><a href=\"https://www.youtube.com/channel/UC9-rYyUMsnEBK8G8fCyrXXA/videos\"><img src=\"https://img.icons8.com/color/96/000000/youtube.png\" alt=\"youtube\"/></a><a href=\"https://www.instagram.com/bgoonz/?hl=en\"><img src=\"https://img.icons8.com/color/96/000000/instagram-new.png\" alt=\"instagram\"/></a><a href=\"https://www.linkedin.com/in/bryan-guner-046199128/\"><img src=\"https://img.icons8.com/color/96/000000/linkedin.png\" alt=\"linkedin\"/></a>\n  <a href=\"https://bryanguner.medium.com/\"><img src=\"https://img.icons8.com/color/96/000000/medium-logo.png\" alt=\"medium\"/></a><a href=\"https://open.spotify.com/user/bgoonz?si=ShH9wYbIQWab5Jz_30BKFw\"><img src=\"https://img.icons8.com/color/96/000000/spotify--v1.png\" alt=\"spotify\"/></a>\n  </p>\n  \n  \n  \n[![Bryans github activity graph](https://activity-graph.herokuapp.com/graph?username=bgoonz&custom_title=This%20is%20Bryans%20Activity&hide_border=true&theme=chartreuse-dark)](https://github.com/bgoonz/github-readme-activity-graph)\n<div align=\"center\">\n<h3 align=\"center\">Languages and Tools:</h3>\n<p align=\"left\"> <a href=\"https://www.arduino.cc/\" target=\"_blank\"> <img src=\"https://cdn.worldvectorlogo.com/logos/arduino-1.svg\" alt=\"arduino\" width=\"40\" height=\"40\"/> </a> <a href=\"https://aws.amazon.com\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/amazonwebservices/amazonwebservices-original-wordmark.svg\" alt=\"aws\" width=\"40\" height=\"40\"/> </a> <a href=\"https://azure.microsoft.com/en-in/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/microsoft_azure/microsoft_azure-icon.svg\" alt=\"azure\" width=\"40\" height=\"40\"/> </a> <a href=\"https://babeljs.io/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/babeljs/babeljs-icon.svg\" alt=\"babel\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.gnu.org/software/bash/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/gnu_bash/gnu_bash-icon.svg\" alt=\"bash\" width=\"40\" height=\"40\"/> </a> <a href=\"https://getbootstrap.com\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/bootstrap/bootstrap-plain-wordmark.svg\" alt=\"bootstrap\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.w3schools.com/cpp/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/cplusplus/cplusplus-original.svg\" alt=\"cplusplus\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.w3schools.com/css/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/css3/css3-original-wordmark.svg\" alt=\"css3\" width=\"40\" height=\"40\"/> </a> <a href=\"https://d3js.org/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/d3js/d3js-original.svg\" alt=\"d3js\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.docker.com/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/docker/docker-original-wordmark.svg\" alt=\"docker\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.elastic.co\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/elastic/elastic-icon.svg\" alt=\"elasticsearch\" width=\"40\" height=\"40\"/> </a> <a href=\"https://emberjs.com/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/ember/ember-original-wordmark.svg\" alt=\"ember\" width=\"40\" height=\"40\"/> </a> <a href=\"https://expressjs.com\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/express/express-original-wordmark.svg\" alt=\"express\" width=\"40\" height=\"40\"/> </a> <a href=\"https://firebase.google.com/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/firebase/firebase-icon.svg\" alt=\"firebase\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.gatsbyjs.com/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/gatsbyjs/gatsbyjs-icon.svg\" alt=\"gatsby\" width=\"40\" height=\"40\"/> </a> <a href=\"https://cloud.google.com\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/google_cloud/google_cloud-icon.svg\" alt=\"gcp\" width=\"40\" height=\"40\"/> </a> <a href=\"https://git-scm.com/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/git-scm/git-scm-icon.svg\" alt=\"git\" width=\"40\" height=\"40\"/> </a> <a href=\"https://heroku.com\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/heroku/heroku-icon.svg\" alt=\"heroku\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.w3.org/html/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/html5/html5-original-wordmark.svg\" alt=\"html5\" width=\"40\" height=\"40\"/> </a> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/javascript/javascript-original.svg\" alt=\"javascript\" width=\"40\" height=\"40\"/> </a> <a href=\"https://jekyllrb.com/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/jekyllrb/jekyllrb-icon.svg\" alt=\"jekyll\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.linux.org/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/linux/linux-original.svg\" alt=\"linux\" width=\"40\" height=\"40\"/> </a> <a href=\"https://mochajs.org\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/mochajs/mochajs-icon.svg\" alt=\"mocha\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.mongodb.com/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/mongodb/mongodb-original-wordmark.svg\" alt=\"mongodb\" width=\"40\" height=\"40\"/> </a> <a href=\"https://nextjs.org/\" target=\"_blank\"> <img src=\"https://cdn.worldvectorlogo.com/logos/nextjs-3.svg\" alt=\"nextjs\" width=\"40\" height=\"40\"/> </a> <a href=\"https://nodejs.org\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/nodejs/nodejs-original-wordmark.svg\" alt=\"nodejs\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.photoshop.com/en\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/photoshop/photoshop-line.svg\" alt=\"photoshop\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.postgresql.org\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/postgresql/postgresql-original-wordmark.svg\" alt=\"postgresql\" width=\"40\" height=\"40\"/> </a> <a href=\"https://postman.com\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/getpostman/getpostman-icon.svg\" alt=\"postman\" width=\"40\" height=\"40\"/> </a> <a href=\"https://pugjs.org\" target=\"_blank\"> <img src=\"https://cdn.worldvectorlogo.com/logos/pug.svg\" alt=\"pug\" width=\"40\" height=\"40\"/> </a> <a href=\"https://github.com/puppeteer/puppeteer\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/pptrdev/pptrdev-official.svg\" alt=\"puppeteer\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.python.org\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/python/python-original.svg\" alt=\"python\" width=\"40\" height=\"40\"/> </a> <a href=\"https://reactjs.org/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/react/react-original-wordmark.svg\" alt=\"react\" width=\"40\" height=\"40\"/> </a> <a href=\"https://reactnative.dev/\" target=\"_blank\"> <img src=\"https://reactnative.dev/img/header_logo.svg\" alt=\"reactnative\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.typescriptlang.org/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/typescript/typescript-original.svg\" alt=\"typescript\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.vagrantup.com/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/vagrantup/vagrantup-icon.svg\" alt=\"vagrant\" width=\"40\" height=\"40\"/> </a> <a href=\"https://webpack.js.org\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/d00d0969292a6569d45b06d3f350f463a0107b0d/icons/webpack/webpack-original-wordmark.svg\" alt=\"webpack\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.adobe.com/products/xd.html\" target=\"_blank\"> <img src=\"https://cdn.worldvectorlogo.com/logos/adobe-xd.svg\" alt=\"xd\" width=\"40\" height=\"40\"/> </a> <a href=\"https://zapier.com\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/zapier/zapier-icon.svg\" alt=\"zapier\" width=\"40\" height=\"40\"/> </a> </p>  \n  \n  </div>\n<div align=\"center\">\n  \n<p><img align=\"center\" src=\"https://github-readme-streak-stats.herokuapp.com/?user=bgoonz&\" alt=\"bgoonz\" /><img align=\"center\" src=\"https://github-readme-stats.vercel.app/api?username=bgoonz&show_icons=true&locale=en\" alt=\"bgoonz\" /></p>\n<p><a href=\"https://github.com/bgoonz/Lambda\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=bgoonz&#x26;repo=Lambda\" alt=\"ReadMe Card\"></a>\n<a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=bgoonz&#x26;repo=DS-ALGO-OFFICIAL\" alt=\"ReadMe Card\"></a></p>\n<p><a href=\"https://github.com/bgoonz/github-profile-trophy\"><img src=\"https://github-profile-trophy.vercel.app/?username=bgoonz&#x26;row=1\" alt=\"trophy\"></a></p>\n<p><a href=\"https://github.com/bgoonz/BGOONZ_BLOG_2.0\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=bgoonz&#x26;repo=BGOONZ_BLOG_2.0\" alt=\"ReadMe Card\"></a></p>\n<p><a href=\"https://github.com/bgoonz/github-readme-stats\"><img src=\"https://github-readme-stats.vercel.app/api/top-langs/?username=bgoonz&#x26;layout=compact&#x26;hide=html,mathematica&#x26;langs_count=16\" alt=\"Top Langs\"></a></p>\n</div>\n</div>\n<center>\n<details>\n<summary>About Me</summary>\n<ul>\n<li>🔭 Contract Web Development <strong>Relational Concepts</strong></li>\n<li>🌱 I'm currently learning <strong>React/Redux, Python, Java, Express, jQuery</strong></li>\n<li>👯 I'm looking to collaborate on <a href=\"https://goofy-euclid-1cd736.netlify.app/core-site/index.html\">Any web audio or open source educational tools.</a></li>\n<li>🤝 I'm looking for help with <a href=\"https://github.com/bgoonz/React-Practice\">Learning React</a></li>\n<li>👨‍💻 All of my projects are available at <a href=\"https://bgoonz.github.io/\">https://bgoonz.github.io/</a></li>\n<li>📝 I regularly write articles on <a href=\"https://bryanguner.medium.com/\">medium</a> &#x26;&#x26; <a href=\"https://web-dev-resource-hub.netlify.app/\">Web-Dev-Resource-Hub</a></li>\n<li>💬 Ask me about <strong>Anything:</strong></li>\n<li>📫 How to reach me <strong>bryan.guner@gmail.com</strong></li>\n<li>⚡ Fun fact <strong>I played Bamboozle Music Festival at the Meadowlands Stadium Complex when I was 14.</strong></li>\n</ul>\n<h3>i really like music :headphones:</h3>\n<h4>What's the most useful business-related book you've ever read?</h4>\n<blockquote>\n<p>A Random Walk Down Wall Street</p>\n</blockquote>\n<h4>What's your favorite non-business book?</h4>\n<blockquote>\n<p>Hitchhiker's Guide To The Galaxy</p>\n</blockquote>\n<h4>If money were not an issue, what would you be doing right now?</h4>\n<blockquote>\n<p>Designing recording software/hardware and using it</p>\n</blockquote>\n<h4>What words of advice would you give your younger self?</h4>\n<blockquote>\n<p>Try harder and listen to your parents more (the latter bit of advice would be almost certain to fall on deaf ears lol)</p>\n</blockquote>\n<h4>What's the most creative thing you've ever done?</h4>\n<blockquote>\n<p>I built a platform that listens to a guitarist's performance and automatically triggers guitar effects at the appropriate time in the song.</p>\n</blockquote>\n<h4>Which founders or startups do you most admire?</h4>\n<blockquote>\n<p>Is it to basic to say Tesla... I know they're prevalent now but I've been an avid fan since as early as 2012.</p>\n</blockquote>\n<h4>What's your super power?</h4>\n<blockquote>\n<p>Having really good ideas and forgetting them moments later.</p>\n</blockquote>\n<h4>What's the best way for people to get in touch with you?</h4>\n<blockquote>\n<p>A text</p>\n</blockquote>\n<h4>What aspects of your work are you most passionate about?</h4>\n<p>Creating things that change my every day life.</p>\n<h4>What was the most impactful class you took in school?</h4>\n<blockquote>\n<p>Modern Physics... almost changed my major after that class... but at the end of the day engineering was a much more fiscally secure avenue.</p>\n</blockquote>\n<h4>What's something you wish you had done years earlier?</h4>\n<blockquote>\n<p>Learned to code ... and sing</p>\n</blockquote>\n<h4>What words of wisdom do you live by?</h4>\n<blockquote>\n<p>*Disclaimer: The following wisdom is very cliche ... but... \"Be the change that you wish to see in the world.\"</p>\n</blockquote>\n<blockquote>\n<p>Mahatma Gandhi</p>\n</blockquote>\n<p>| | ## Portfolio:</p>\n<h1><a href=\"https://portfolio42.netlify.app/\">netlify</a> |</h1>\n<p>| :------------: ||\n| <strong>Languages</strong> | <img src=\"https://img.shields.io/badge/Lang-HTML5-informational?style=flat&#x26;logo=HTML5&#x26;logoColor=white&#x26;color=00FF00\"> <img src=\"https://img.shields.io/badge/Lang-CSS-informational?style=flat&#x26;logo=CSS%20Wizardry&#x26;logoColor=white&#x26;color=00FF00\"> <img src=\"https://img.shields.io/badge/Lang-JavaScript-informational?style=flat&#x26;logo=JavaScript&#x26;logoColor=white&#x26;color=00FF00\"> <img src=\"https://img.shields.io/badge/Lang-SQL-informational?style=flat&#x26;logo=SQL&#x26;logoColor=white&#x26;color=00FF00\"> <img src=\"https://img.shields.io/badge/Lang-Java-informational?style=flat&#x26;logo=Java&#x26;logoColor=white&#x26;color=00FF00\"> <br /><img src=\"https://img.shields.io/badge/Lang-Python-informational?style=flat&#x26;logo=Python&#x26;logoColor=white&#x26;color=00FF00\"> <img src=\"https://img.shields.io/badge/Lang-TypeScript-informational?style=flat&#x26;logo=TypeScript&#x26;logoColor=white&#x26;color=00FF00\"> |\n| <strong>Libraries</strong> | <img src=\"https://img.shields.io/badge/Lib-Bootstrap-informational?style=flat&#x26;logo=Bootstrap&#x26;logoColor=white&#x26;color=00FF00\"> <img src=\"https://img.shields.io/badge/Lib-React-informational?style=flat&#x26;logo=React&#x26;logoColor=white&#x26;color=00FF00\"> |\n| <strong>Frameworks</strong> | <img src=\"https://img.shields.io/badge/FW-Redux-informational?style=flat&#x26;logo=Redux&#x26;logoColor=white&#x26;color=00FF00\"> <img src=\"https://img.shields.io/badge/FW-Node.js-informational?style=flat&#x26;logo=Node.js&#x26;logoColor=white&#x26;color=00FF00\"> <img src=\"https://img.shields.io/badge/FW-Express-informational?style=flat&#x26;logoColor=white&#x26;color=00FF00\"> <img src=\"https://img.shields.io/badge/FW-PowerShell-informational?style=flat&#x26;logo=PowerShell&#x26;logoColor=white&#x26;color=00FF00\"> |\n| <strong>Databases</strong> | <img src=\"https://img.shields.io/badge/DB-PostgreSQL-informational?style=flat&#x26;logo=PostgreSQL&#x26;logoColor=white&#x26;color=00FF00\"> <img src=\"https://img.shields.io/badge/DB-MySQL-informational?style=flat&#x26;logo=MySQL&#x26;logoColor=white&#x26;color=00FF00\"> |\n| <strong>Testing</strong> | <img src=\"https://img.shields.io/badge/Test-Jest-informational?style=flat&#x26;logo=Jest&#x26;logoColor=white&#x26;color=00FF00\"> <img src=\"https://img.shields.io/badge/Test-Cypress-informational?style=flat&#x26;logo=Cypress&#x26;logoColor=white&#x26;color=00FF00\"> <img src=\"https://img.shields.io/badge/Test-JUnit-informational?style=flat&#x26;logo=JUnit&#x26;logoColor=white&#x26;color=00FF00\"> |\n| <strong>Other</strong> | <img src=\"https://img.shields.io/badge/Editor-VS%20Code-informational?style=flat&#x26;logo=visualstudiocode&#x26;logoColor=white&#x26;color=00FF00\"> <img src=\"https://img.shields.io/badge/Editor-IntelliJ%20IDEA-informational?style=flat&#x26;logo=intellijidea&#x26;logoColor=white&#x26;color=00FF00\"> <br /><img src=\"https://img.shields.io/badge/Tools-ESLint-informational?style=flat&#x26;logo=ESLint&#x26;logoColor=white&#x26;color=00FF00\"> <img src=\"https://img.shields.io/badge/Tools-Postman-informational?style=flat&#x26;logo=Postman&#x26;logoColor=white&#x26;color=00FF00\"> <img src=\"https://img.shields.io/badge/Tools-Git-informational?style=flat&#x26;logo=Git&#x26;logoColor=white&#x26;color=00FF00\"> <img src=\"https://img.shields.io/badge/Tools-GitHub-informational?style=flat&#x26;logo=GitHub&#x26;logoColor=white&#x26;color=00FF00\"> <br /><img src=\"https://img.shields.io/badge/OS-Windows%2010-informational?style=flat&#x26;logo=Windows&#x26;logoColor=white&#x26;color=00FF00\"> <br /><img src=\"https://img.shields.io/badge/Code-LESS-informational?style=flat&#x26;logoColor=white&#x26;color=00FF00\"> <img src=\"https://img.shields.io/badge/Code-Emmet-informational?style=flat&#x26;logoColor=white&#x26;color=00FF00\"> |</p>\n  </div>\n</details>\n<!-- start work experience section -->\n<details>\n<summary> Resume </summary>\n<h1>➤ Technical Skills­­­</h1>\n<table>\n<thead>\n<tr>\n<th><strong>Programming**</strong> Languages:**</th>\n<th>JavaScript ES-6, NodeJS, React, HTML5, CSS3, SCSS, Bash Shell, Excel, SQL, NoSQL, MATLAB, Python, C++</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Databases:</strong></td>\n<td>PostgreSQL, MongoDB</td>\n</tr>\n<tr>\n<td><strong>Cloud:</strong></td>\n<td>Docker, AWS, Google App Engine, Netlify, Digital Ocean, Heroku, Azure Cloud Services</td>\n</tr>\n<tr>\n<td><strong>OS:</strong></td>\n<td>Linux, Windows (WSL), IOS</td>\n</tr>\n<tr>\n<td><strong>Agile:</strong></td>\n<td>GitHub, BitBucket, Jira, Confluence</td>\n</tr>\n<tr>\n<td><strong>IDEs:</strong></td>\n<td>VSCode, Visual Studio, Atom, Code Blocks, Sublime Text 3, Brackets</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p><a href=\"#experience\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h1>➤ Experience</h1>\n<table>\n<thead>\n<tr>\n<th><strong>Relational Concepts:</strong> Hallandale Beach, FL</th>\n<th>March 2020 - Present</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Front End Web Developer</strong></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Responsible for front-end development for a custom real estate application which provides sophisticated and fully customizable filtering to allow investors and real estate professionals to narrow in on exact search targets.</li>\n<li>Designed mock-up screens, wireframes, and workflows for intuitive user experience.</li>\n<li>Migrated existing multi-page user experience into singular page interfaces using React components.</li>\n<li>Participated in every stage of the design from conception through development and iterative improvement.</li>\n<li>Produced user stories and internal documentation for future site development and maintenance.</li>\n<li>Implemented modern frameworks including Bootstrap and Font-Awesome to give the site an aesthetic overhaul.</li>\n<li>Managed all test deployments using a combination of Digital Ocean and Netlify.</li>\n<li>Produced unit tests using a combination of Mocha and Chai.</li>\n<li>Injected Google Analytics to capture pertinent usage data to produce an insightful dashboard experience.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>Environment:</strong></th>\n<th><strong>JavaScript, JQuery, React, HTML5 &#x26; CSS, Bootstrap, DOJO, Google Cloud, Bash Script</strong></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><strong>Cembre:</strong> Edison, NJ</th>\n<th>Nov 2019 – Mar 2020</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Product Development Engineer</strong></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Converted client's product needs into technical specs to be sent to the development team in Italy.</li>\n<li>Reorganized internal file server structure.</li>\n<li>Conducted remote / in person system integration and product demonstrations.</li>\n<li>Presided over internal and end user software trainings in addition to producing the corresponding documentation.</li>\n<li>Served as the primary point of contact for troubleshooting railroad hardware and software in the North America.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>Environment:</strong></th>\n<th><strong>Excel, AutoCAD, PowerPoint, Word</strong></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<hr>\n<p><a href=\"#education\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h1>➤ Education</h1>\n<table>\n<thead>\n<tr>\n<th>**B.S. Electrical Engineering, TCNJ, ** Ewing NJ</th>\n<th>2014 – 2019</th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<p><strong>Capstone Project – Team Lead</strong></p>\n<ul>\n<li>Successfully completed and delivered a platform to digitize a guitar signal and perform filtering before executing frequency &#x26; time domain analysis to track a current performance against prerecorded performance.</li>\n<li>Implemented the Dynamic Time Warping algorithm in C++ and Python to autonomously activate or adjust guitar effect at multiple pre-designated section of performance.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>Environment:</strong></th>\n<th><strong>C++, Python, MATLAB, PureData</strong></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n</details>\n<details>\n<summary> My Projects</summary>\n<table>\n  <thead>\n    <tr>\n      <th>Project Name</th>\n      <th>Skills used</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href='https://web-dev-resource-hub.netlify.app/'>Web-Dev-Resource-Hub (blog)</a></td>\n      <td>Html, Css, javascript, Python, jQuery,  React,  FireBase,  AWS S3,  Netlify,  Heroku,  NodeJS,  PostgreSQL,  C++,  Web Audio API</td>\n      <td>My blog site contains my resource sharing and blog site ... centered mostly on web development and just a bit of audio production / generally nerdy things I find interesting.</td>\n    </tr>\n       <tr>\n      <td><a href='https://project-showcase-bgoonz.netlify.app/'>Dynamic Guitar Effects Triggering Using A Modified Dynamic Time Warping Algorithm</a></td>\n      <td>C, C++, Python, Java, Pure Data, Matlab</td>\n      <td>Successfully completed and delivered a platform to digitize a guitar signal and perform filtering before executing frequency & time domain analysis to track a current performance against prerecorded performance.Implemented the Dynamic Time Warping algorithm in C++ and Python to autonomously activate or adjust guitar effect at multiple pre-designated section of performance.</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://trusting-dijkstra-4d3b17.netlify.app/\">Data Structures & Algorithms Interactive Learning Site</a></td>\n      <td>HTML, CSS, Javascript,  Python,  Java,  jQuery,  Repl.it-Database API</td>\n      <td>A interactive and comprehensive guide and learning tool for DataStructures and Algorithms ... concentrated on JS but with some examples in Python,  C++ and Java as well</td>\n    </tr>\n    <tr>\n      <td><a href='https://mihirbegmusic.netlify.app/'>MihirBeg.com</a></td>\n      <td>Html, Css, Javascript,  Bootstrap,  FontAwesome,  jQuery</td>\n      <td>A responsive and mobile friendly content promotion site for an Audio Engineer to engage with fans and potential clients</td>\n    </tr>\n    <tr>\n      <td><a href='https://tetris42.netlify.app/'>Tetris-JS</a></td>\n      <td>Html, Css, Javascript</td>\n      <td>The classic game of tetris implemented in plain javascipt and styled with a retro-futureistic theme</td>\n    </tr>\n    <tr>\n      <td><a href=\"https://githtmlpreview.netlify.app/\">Git Html Preview Tool</a></td>\n      <td>Git,  Javascript,  CSS3,  HTML5,  Bootstrap,  BitBucket</td>\n      <td>Loads HTML using CORS proxy,  then process all links,  frames,  scripts and styles,  and load each of them using CORS proxy,  so they can be evaluated by the browser.</td>\n    </tr>\n    <tr>\n      <td><a href='https://project-showcase-bgoonz.netlify.app/'>Mini Project Showcase</a></td>\n      <td>HTML, HTML5, CSS, CSS3, Javascript, jQuery</td>\n      <td>add songs and play music, it also uses to store data in  INDEXEDB Database by which we can play songs, if we not clear the catch then song will remain stored in database.</td>\n    </tr>\n    \n  </tbody>\n<p align=\"center\">\n<hr>\n<hr>\n<hr>\n<hr>\n<div style=\" border: 1px solid black\">\n<img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23b9b236-746e-409c-8e86-30b4385e3b72/hr1-raypham.gif\" alt=\"hr-line\" width=\"100%\" height=\"22\">\n</div>\n<hr>\n<hr>\n<h1><a href=\"https://ecstatic-jang-593fd1.netlify.app/readme\">Learning React Blog</a></h1>\n<h4>React Repo:</h4>\n<p><a href=\"https://github.com/bgoonz/React-Practice\">React Repo</a></p>\n<hr>\n<h2><a href=\"https://codesandbox.io/embed/zealous-microservice-ti7em?autoresize=1&expanddevtools=1&fontsize=14&hidenavigation=1&moduleview=1&theme=dark\"   style=\"width:100%; height:20px; border:0; border-radius: 4px; overflow:hidden;\" rel=\"React Todo\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Foo\"></a></h2>\n<div style=\" border: 1px solid black\">\n<img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23b9b236-746e-409c-8e86-30b4385e3b72/hr1-raypham.gif\" alt=\"hr-line\" width=\"100%\" height=\"22\">\n</div>\n<h1><a href=\"https://documentation-site-react2-peitff669-bgoonz.vercel.app/\">react-documentation-site</a></h1>\n<p><a href=\"https://codesandbox.io/s/magical-stallman-ov0d1?autoresize=1&#x26;expanddevtools=1&#x26;fontsize=12&#x26;hidenavigation=1&#x26;moduleview=1&#x26;theme=dark\"><img src=\"https://codesandbox.io/static/img/play-codesandbox.svg\" alt=\"Edit magical-stallman-ov0d1\"></a></p>\n<div style=\" border: 1px solid black\">\n<img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23b9b236-746e-409c-8e86-30b4385e3b72/hr1-raypham.gif\" alt=\"hr-line\" width=\"100%\" height=\"22\">\n</div>\n<hr>\n<h2>➤ Codepens (mostly embeded animations)</h2>\n<h1><a href=\"https://embedable-content.netlify.app/\">code-pens-embedded</a></h1>\n<p><a href=\"#weekly-quick-snips\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>➤ Weekly-Quick-Snips:</h2>\n<hr>\n<h4>Snippet of the Day:</h4>\n<h3>replaceAll</h3>\n<p>the method string.replaceAll(search, replaceWith) replaces all appearances of search string with replaceWith.</p>\n<pre><code class=\"language-javascript\">const str = 'this is a JSsnippets example';\n\nconst updatedStr = str.replace('example', 'snippet'); // 'this is a  JSsnippets snippet'\n\n\nThe tricky part is that replace method replaces only the very first match of the substring we have passed:\n\n\nconst str = 'this is a JSsnippets example and examples are great';\n\nconst updatedStr = str.replace('example', 'snippet'); //'this is a JSsnippets snippet and examples are great'\n\nIn order to go through this, we need to use a global regexp instead:\n\n\nconst str = 'this is a JSsnippets example and examples are great';\n\nconst updatedStr = str.replace(/example/g, 'snippet'); //'this is a JSsnippets snippet and snippets are greatr'\n\nbut now we have new friend in town, replaceAll\n\nconst str = 'this is a JSsnippets example and examples are great';\n\nconst updatedStr = str.replaceAll('example', 'snippet'); //'this is a JSsnippets snippet and snippets are greatr'\n</code></pre>\n<hr>\n<h3>Fibonacci in Python:</h3>\n<pre><code class=\"language-py\">def fib_iter(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    p0 = 0\n    p1 = 1\n    for i in range(n-1):\n        next_val = p0 + p1\n        p0 = p1\n        p1 = next_val\n    return next_val\nfor i in range(10):\n    print(f'{i}: {fib_iter(i)}')\n</code></pre>\n<hr>\n<h4>Yesterday's Snippet of the day:</h4>\n<hr>\n<pre><code class=\"language-py\">def quicksort(l):\n    # One of our base cases is an empty list or list with one element\n    if len(l) == 0 or len(l) == 1:\n        return l\n    # If we have a left list, a pivot point and a right list...\n    # assigns the return values of the partition() function\n    left, pivot, right = partition(l)\n    # Our sorted list looks like left + pivot + right, but sorted.\n    # Pivot has to be in brackets to be a list, so python can concatenate all the elements to a single list\n    return quicksort(left) + [pivot] + quicksort(right)\n\n\n\nprint(quicksort([]))\n\n\n\nprint(quicksort([1]))\n\n\n\nprint(quicksort([1,2]))\n\nprint(quicksort([2,1]))\n\n\nprint(quicksort([2,2]))\n\n\nprint(quicksort([5,3,9,4,8,1,7]))\n\n\nprint(quicksort([1,2,3,4,5,6,7]))\n\n\nprint(quicksort([9,8,7,6,5,4,3,2,1]))\n</code></pre>\n<hr>\n<details>\n  \n  <summary>See Older Snippets!</summary>\n  \n  \n  #### This Week's snippets: \n  \n  ---\n  \n  \n   >will replace any spaces in file names with an underscore!\n```bash\n for file in *; do mv \"$file\" `echo $file | tr ' ' '_'` ; done\n  ## TAKING IT A STEP FURTHER:\n # Let's do it recursivley:\n  function RecurseDirs ()\n{\n    oldIFS=$IFS\n    IFS=$'\\n'\n    for f in \"$@\"\n    do\n  # YOUR CODE HERE!\n<p>[<img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\">]</p>\n<p>for file in *; do mv \"$file\" <code>echo $file | tr ' ' '_'</code> ; done\nif [[ -d \"${f}\" ]]; then\ncd \"${f}\"\nRecurseDirs $(ls -1 \".\")\ncd ..\nfi\ndone\nIFS=$oldIFS\n}\nRecurseDirs \"./\"</p>\n<pre><code> ---\n ### Copy to clipboard jQuerry\n > Language: Javascript/Jquery\n\n\n>In combination with the script tag :  &#x3C;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\">&#x3C;/script> , this snippet will add a copy to clipboard button to all of your embedded &#x3C;code> blocks.\n\n\n```js\n$(document).ready(function() {\n  $('code, pre').append('&#x3C;span class=\"command-copy\" >&#x3C;i class=\"fa fa-clipboard\" aria-hidden=\"true\">&#x3C;/i>&#x3C;/span>');\n\n  $('code span.command-copy').click(function(e) {\n    var text = $(this).parent().text().trim(); //.text();\n    var copyHex = document.createElement('input');\n    copyHex.value = text\n    document.body.appendChild(copyHex);\n    copyHex.select();\n    document.execCommand('copy');\n    console.log(copyHex.value)\n    document.body.removeChild(copyHex);\n  });\n\n\n  $('pre span.command-copy').click(function(e) {\n    var text = $(this).parent().text().trim();\n    var copyHex = document.createElement('input');\n    copyHex.value = text\n    document.body.appendChild(copyHex);\n    copyHex.select();\n    document.execCommand('copy');\n    console.log(copyHex.value)\n    document.body.removeChild(copyHex);\n  });\n})\n</code></pre>\n<hr>\n<h3>Append Files in PWD</h3>\n<pre><code class=\"language-js\">//APPEND-DIR.js\nconst fs = require('fs');\nlet cat = require('child_process').execSync('cat *').toString('UTF-8');\nfs.writeFile('output.md', cat, (err) => {\n    if (err) throw err;\n});\n</code></pre>\n<hr>\n<h3>doesUserFrequentStarbucks.js</h3>\n<pre><code class=\"language-js\">const isAppleDevice = /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nconsole.log(isAppleDevice);\n// Result: will return true if user is on an Apple device\n</code></pre>\n<hr>\n<h3>arr-intersection.js</h3>\n<pre><code class=\"language-js\">/*\n function named intersection(firstArr) that takes in an array and\nreturns a function. \nWhen the function returned by intersection is invoked\npassing in an array (secondArr) it returns a new array containing the elements\ncommon to both firstArr and secondArr.\n*/\nfunction intersection(firstArr) {\n    return (secondArr) => {\n        let common = [];\n        for (let i = 0; i &#x3C; firstArr.length; i++) {\n            let el = firstArr[i];\n            if (secondArr.indexOf(el) > -1) {\n                common.push(el);\n            }\n        }\n        return common;\n    };\n}\nlet abc = intersection(['a', 'b', 'c']); // returns a function\nconsole.log(abc(['b', 'd', 'c'])); // returns [ 'b', 'c' ]\n\nlet fame = intersection(['f', 'a', 'm', 'e']); // returns a function\nconsole.log(fame(['a', 'f', 'z', 'b'])); // returns [ 'f', 'a' ]\n</code></pre>\n<hr>\n<h3>arr-of-cum-partial-sums.js</h3>\n<pre><code class=\"language-js\">/*\nFirst is recurSum(arr, start) which returns the sum of the elements of arr from the index start till the very end.\nSecond is partrecurSum() that recursively concatenates the required sum into an array and when we reach the end of the array, it returns the concatenated array.\n*/\n//arr.length -1 = 5\n//                   arr   [    1,    7,    12,   6,    5,    10   ]\n//                   ind   [    0     1     2     3     4      5   ]\n//                              ↟                              ↟\n//                            start                           end\n\nfunction recurSum(arr, start = 0, sum = 0) {\n    if (start &#x3C; arr.length) {\n        return recurSum(arr, start + 1, sum + arr[start]);\n    }\n\n    return sum;\n}\n\nfunction rPartSumsArr(arr, partSum = [], start = 0, end = arr.length - 1) {\n    if (start &#x3C;= end) {\n        return rPartSumsArr(arr, partSum.concat(recurSum(arr, start)), ++start, end);\n    }\n    return partSum.reverse();\n}\n\nconsole.log('------------------------------------------------rPartSumArr------------------------------------------------');\nconsole.log('rPartSumsArr(arr)=[ 1, 1, 5, 2, 6, 10 ]: ', rPartSumsArr(arr));\nconsole.log('rPartSumsArr(arr1)=[ 1, 7, 12, 6, 5, 10 ]: ', rPartSumsArr(arr1));\nconsole.log('------------------------------------------------rPartSumArr------------------------------------------------');\n/*\n------------------------------------------------rPartSumArr------------------------------------------------\nrPartSumsArr(arr)=[ 1, 1, 5, 2, 6, 10 ]:  [ 10, 16, 18, 23, 24, 25 ]\nrPartSumsArr(arr1)=[ 1, 7, 12, 6, 5, 10 ]:  [ 10, 15, 21, 33, 40, 41 ]\n------------------------------------------------rPartSumArr------------------------------------------------\n*/\n</code></pre>\n<hr>\n<h3>camel2Kabab.js</h3>\n<pre><code class=\"language-js\">function camelToKebab(value) {\n    return value.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n</code></pre>\n<hr>\n<h3>camelCase.js</h3>\n<pre><code class=\"language-js\">function camel(str) {\n    return str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function (match, index) {\n        if (+match === 0) return ''; // or if (/\\s+/.test(match)) for white spaces\n        return index === 0 ? match.toLowerCase() : match.toUpperCase();\n    });\n}\n</code></pre>\n<hr>\n<h3>concatLinkedLists.js</h3>\n<pre><code class=\"language-js\">function addTwoNumbers(l1, l2) {\n    let result = new ListNode(0);\n    let currentNode = result;\n    let carryOver = 0;\n    while (l1 != null || l2 != null) {\n        let v1 = 0;\n        let v2 = 0;\n        if (l1 != null) v1 = l1.val;\n        if (l2 != null) v2 = l2.val;\n\n        let sum = v1 + v2 + carryOver;\n        carryOver = Math.floor(sum / 10);\n        sum = sum % 10;\n        currentNode.next = new ListNode(sum);\n\n        currentNode = currentNode.next;\n        if (l1 != null) l1 = l1.next;\n        if (l2 != null) l2 = l2.next;\n    }\n\n    if (carryOver > 0) {\n        currentNode.next = new ListNode(carryOver);\n    }\n\n    return result.next;\n}\n</code></pre>\n<hr>\n<h3>fast-is-alpha-numeric.js</h3>\n<pre><code class=\"language-js\">//Function to test if a character is alpha numeric that is faster than a regular\n//expression in JavaScript\n\nlet isAlphaNumeric = (char) => {\n    char = char.toString();\n    let id = char.charCodeAt(0);\n    if (\n        !(id > 47 &#x26;&#x26; id &#x3C; 58) &#x26;&#x26; // if not numeric(0-9)\n        !(id > 64 &#x26;&#x26; id &#x3C; 91) &#x26;&#x26; // if not letter(A-Z)\n        !(id > 96 &#x26;&#x26; id &#x3C; 123) // if not letter(a-z)\n    ) {\n        return false;\n    }\n    return true;\n};\n\nconsole.log(isAlphaNumeric('A')); //true\nconsole.log(isAlphaNumeric(2)); //true\nconsole.log(isAlphaNumeric('z')); //true\nconsole.log(isAlphaNumeric(' ')); //false\nconsole.log(isAlphaNumeric('!')); //false\n</code></pre>\n<hr>\n<h3>find-n-replace.js</h3>\n<pre><code class=\"language-js\">function replaceWords(str, before, after) {\n    if (/^[A-Z]/.test(before)) {\n        after = after[0].toUpperCase() + after.substring(1);\n    } else {\n        after = after[0].toLowerCase() + after.substring(1);\n    }\n    return str.replace(before, after);\n}\nconsole.log(replaceWords('Let us go to the store', 'store', 'mall')); //\"Let us go to the mall\"\nconsole.log(replaceWords('He is Sleeping on the couch', 'Sleeping', 'sitting')); //\"He is Sitting on the couch\"\nconsole.log(replaceWords('His name is Tom', 'Tom', 'john'));\n//\"His name is John\"\n</code></pre>\n<hr>\n<h3>flatten-arr.js</h3>\n<pre><code class=\"language-js\">/*Simple Function to flatten an array into a single layer */\nconst flatten = (array) => array.reduce((accum, ele) => accum.concat(Array.isArray(ele) ? flatten(ele) : ele), []);\n</code></pre>\n<hr>\n<h3>isWeekDay.js</h3>\n<pre><code class=\"language-js\">const isWeekday = (date) => date.getDay() % 6 !== 0;\nconsole.log(isWeekday(new Date(2021, 0, 11)));\n// Result: true (Monday)\nconsole.log(isWeekday(new Date(2021, 0, 10)));\n// Result: false (Sunday)\n</code></pre>\n<hr>\n<h3>longest-common-prefix.js</h3>\n<pre><code class=\"language-js\">function longestCommonPrefix(strs) {\n    let prefix = '';\n    if (strs.length === 0) return prefix;\n    for (let i = 0; i &#x3C; strs[0].length; i++) {\n        const character = strs[0][i];\n        for (let j = 0; j &#x3C; strs.length; j++) {\n            if (strs[j][i] !== character) return prefix;\n        }\n        prefix = prefix + character;\n    }\n    return prefix;\n}\n</code></pre>\n<p><a href=\"https://wakatime.com\"><img src=\"https://wakatime.com/share/@bgoonz42/e088a908-1c73-434f-9eab-b73ea4f17d3c.png\" /></a></p>\n</details>\n<hr>\n<p><a href=\"#github-gists\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h1>➤ Github Gists</h1>\n<h2><a href=\"https://bgoonzgist.netlify.app/\">Github Gists</a></h2>\n<p><a href=\"https://gist.github.com/bgoonz/659a9b81ac45453bedc0a1a36275b580\">list-of-my-websites</a></p>\n<p><a href=\"https://github.com/sindresorhus/awesome\"><img src=\"https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg\" alt=\"Awesome\"></a> <a href=\"https://github.com/chetanraj/awesome-github-badges\"><img src=\"https://img.shields.io/badge/Made%20With-Love-orange.svg\" alt=\"Made With Love\"></a></p>\n<p><a href=\"https://forthebadge.com\"><img src=\"https://forthebadge.com/images/badges/certified-snoop-lion.svg\" alt=\"forthebadge\"></a><a href=\"https://forthebadge.com\"><img src=\"https://forthebadge.com/images/badges/60-percent-of-the-time-works-every-time.svg\" alt=\"forthebadge\"></a></p>\n<p><a href=\"https://github.com/bgoonz/blog-w-comments\"><img src=\"https://img.shields.io/website-up-down-green-red/http/shields.io.svg\" alt=\"Website shields.io\"></a><a href=\"https://GitHub.com/bgoonz/ask-me-anything\"><img src=\"https://img.shields.io/badge/Ask%20me-anything-1abc9c.svg\" alt=\"Ask Me Anything !\"></a><a href=\"https://gitter.im/bgoonz/community?utm_source=badge&#x26;utm_medium=badge&#x26;utm_campaign=pr-badge\"><img src=\"https://badges.gitter.im/bgoonz/community.svg\" alt=\"Gitter\"></a><a href=\"https://pypi.python.org/pypi/ansicolortags/\"><img src=\"https://img.shields.io/pypi/l/ansicolortags.svg\" alt=\"PyPI license\"></a></p>\n<p><a href=\"https://GitHub.com/bgoonz/bgoonz/graphs/commit-activity\"><img src=\"https://img.shields.io/badge/Maintained%3F-yes-green.svg\" alt=\"Maintenance\"></a><a href=\"https://github.com/ellerbrock/open-source-badges/\"><img src=\"https://badges.frapsoft.com/os/v1/open-source.png?v=103\" alt=\"Open Source Love\"></a> <a href=\"https://github.com/ellerbrock/open-source-badges/\"><img src=\"https://badges.frapsoft.com/bash/v1/bash.png?v=103\" alt=\"Bash Shell\"></a></p>\n<p><img src=\"https://img.shields.io/badge/-React-black?style=flat&#x26;logo=react\" alt=\"React\"> <img src=\"https://img.shields.io/badge/-Redux-lightblue?style=flat&#x26;logo=redux\" alt=\"Redux\">\n<img src=\"https://img.shields.io/badge/-HTML5-E34F26?style=flat&#x26;logo=html5&#x26;logoColor=white\" alt=\"HTML5\"> <img src=\"https://img.shields.io/badge/-CSS3-1572B6?style=flat&#x26;logo=css3\" alt=\"CSS3\"> <img src=\"https://img.shields.io/badge/-Sass-black?style=flat&#x26;logo=sass\" alt=\"Sass\"><img src=\"https://img.shields.io/badge/-Docker-black?style=flat&#x26;logo=docker\" alt=\"Docker\"> <img src=\"https://img.shields.io/badge/-MySQL-black?style=flat&#x26;logo=mysql\" alt=\"MySQL\"> <img src=\"https://img.shields.io/badge/-PostgreSQL-blue?style=flat&#x26;logo=postgresql\" alt=\"PostgresQL\"> <img src=\"https://img.shields.io/badge/-Git-black?style=flat&#x26;logo=git\" alt=\"Git\"> <img src=\"https://img.shields.io/badge/-Ruby-darkred?style=flat&#x26;logo=ruby\" alt=\"Ruby\"> <img src=\"https://img.shields.io/badge/-MaterialUI-0081CB?style=flat&#x26;logo=Material-UI&#x26;logoColor=white\" alt=\"Material-UI\"></p>\n<p><img src=\"https://img.shields.io/badge/-Express-blue?style=flat&#x26;logo=express\" alt=\"Express\"> <img src=\"https://img.shields.io/badge/-Nodejs-green?style=flat&#x26;logo=Node.js\" alt=\"Nodejs\"><img src=\"https://img.shields.io/badge/-Python-lightyellow?style=flat&#x26;logo=python&#x26;logoColor=blue\" alt=\"Python\"> <img src=\"https://img.shields.io/badge/-Bootstrap-7952B3?style=flat&#x26;logo=bootstrap&#x26;logoColor=white\" alt=\"Bootstrap\"> <img src=\"https://img.shields.io/badge/-JavaScript-black?style=flat&#x26;logo=javascript\" alt=\"JavaScript\"></p>\n</details>\n</center>"},{"url":"/docs/about/job-search/","relativePath":"docs/about/job-search.md","relativeDir":"docs/about","base":"job-search.md","name":"job-search","frontmatter":{"title":"Job Search","weight":0,"excerpt":"the hunt for a webdev position","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>Job Boards and The Hunt</h1>\n<p>I can’t imagine the kind of masochism it would take to enjoy the act of posting and daily maintenance on a job board…It’s part of the…</p>\n<hr>\n<h3>Job Boards and The Hunt</h3>\n<h4>I can’t imagine the kind of masochism it would take to enjoy the act of posting and daily maintenance on a job board…It’s part of the process that you’ve already invested so much of yourself in, so you should take pride in it; do a good job the first time around and you’ll get where your going in the blink of an eye!</h4>\n<p><a href=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\"><strong>A list of all of my articles to link to future posts</strong><br />\n<em>You should probably skip this one… seriously it’s just for internal use!</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<hr>\n<h3>Update(After The Interview):</h3>\n<p>As a candidate, there are key next steps that you can and should after every interview to help you stand out.</p>\n<p><strong>Send a thank you email within 24 business hours</strong></p>\n<p><strong>Do not miss this step!</strong> It takes less than five minutes and can make the difference between you and another candidate. It also keeps you fresh in your interviewers’ memories. For example:</p>\n<p>‍</p>\n<p><em>Hi (name),</em></p>\n<blockquote>\n<p><em>Thank you so much for taking the time to meet with me yesterday to discuss my candidacy for (role title). After learning more about (share one or two takeaways from the interview about the company/team’s priorities), I’m even more excited to bring my skills in (1–3 relevant skills) to the team.</em></p>\n</blockquote>\n<blockquote>\n<p><em>I look forward to hearing from you about next steps, and if there is anything that I can clarify about my experience or qualifications for the (role title) position, please don’t hesitate to reach out.</em></p>\n</blockquote>\n<blockquote>\n<p><em>Thank you for your consideration,</em></p>\n</blockquote>\n<blockquote>\n<p><em>(your name)</em></p>\n</blockquote>\n<p><strong>Follow up</strong></p>\n<p>Don’t wait for the company to reach out to you! Be proactive in showing your interest by checking in to see where you stand in the process. If a company indicates a deadline by which you will hear back, and the deadline has passed, follow-up!</p>\n<p><strong>Check your email and phone regularly<br>\n‍*</strong><br>\n*Don’t ghost on a company at any stage in the process; make sure you add their domain to your safe senders list and respond to any messages within 24 hours.</p>\n<p>‍</p>\n<p><strong>Be prepared<br>\n‍*</strong><br>\n*You might be invited for another interview on short notice; review the description regularly so it doesn’t slip from your memory, and keep brushing up on skills you may need for an interview (chances are, this won’t be the only job you’ll need them for anyway!)</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*H4pwwuDEjkYTWKpJ.gif\" class=\"graf-image\" /></figure>\n<hr>\n<blockquote>\n<p>Here I will maintain a running list of applicable job boards and below I will go into detail about the niches they occupy and whatever I resource I have found to use them to your maximum advantage. !</p>\n</blockquote>\n<h3>Update (remote work edition):</h3>\n<ol>\n<li><span id=\"3063\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#arc\" class=\"markup--anchor markup--li-anchor\">Arc</a></span></li>\n<li><span id=\"7639\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#we-work-remotely\" class=\"markup--anchor markup--li-anchor\">We Work Remotely</a></span></li>\n<li><span id=\"e21f\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#skip-the-drive\" class=\"markup--anchor markup--li-anchor\">Skip The Drive</a></span></li>\n<li><span id=\"e1df\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#power-to-fly\" class=\"markup--anchor markup--li-anchor\">Power to Fly</a></span></li>\n<li><span id=\"ecb8\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#remote-ok\" class=\"markup--anchor markup--li-anchor\">Remote OK</a></span></li>\n<li><span id=\"c08c\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#remotive\" class=\"markup--anchor markup--li-anchor\">Remotive</a></span></li>\n<li><span id=\"b4f2\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#flexjobs\" class=\"markup--anchor markup--li-anchor\">FlexJobs</a></span></li>\n<li><span id=\"e670\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#dribble\" class=\"markup--anchor markup--li-anchor\">Dribble</a></span></li>\n<li><span id=\"3b01\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#angellist\" class=\"markup--anchor markup--li-anchor\">AngelList</a></span></li>\n<li><span id=\"4e54\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#remote-co\" class=\"markup--anchor markup--li-anchor\">Remote.co</a></span></li>\n<li><span id=\"043a\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#justremote\" class=\"markup--anchor markup--li-anchor\">JustRemote</a></span></li>\n<li><span id=\"7190\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#virtual-vocations\" class=\"markup--anchor markup--li-anchor\">Virtual Vocations</a></span></li>\n<li><span id=\"8128\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#pangian\" class=\"markup--anchor markup--li-anchor\">Pangian</a></span></li>\n<li><span id=\"f142\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#working-nomads\" class=\"markup--anchor markup--li-anchor\">Working Nomads</a></span></li>\n<li><span id=\"6d89\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#jobspresso\" class=\"markup--anchor markup--li-anchor\">Jobspresso</a></span></li>\n<li><span id=\"8732\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#outsourcely\" class=\"markup--anchor markup--li-anchor\">Outsourcely</a></span></li>\n<li><span id=\"4f25\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#landing-jobs\" class=\"markup--anchor markup--li-anchor\">Landing.Jobs</a></span></li>\n<li><span id=\"f994\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#authentic-jobs\" class=\"markup--anchor markup--li-anchor\">Authentic Jobs</a></span></li>\n<li><span id=\"4b77\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#stack-overflow\" class=\"markup--anchor markup--li-anchor\">Stack Overflow</a></span></li>\n<li><span id=\"bb76\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#gun-io\" class=\"markup--anchor markup--li-anchor\">Gun.io</a></span></li>\n<li><span id=\"114e\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#idealist\" class=\"markup--anchor markup--li-anchor\">Idealist</a></span></li>\n<li><span id=\"5da2\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#fiverr\" class=\"markup--anchor markup--li-anchor\">Fiverr</a></span></li>\n<li><span id=\"fa5e\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#upwork\" class=\"markup--anchor markup--li-anchor\">Upwork</a></span></li>\n<li><span id=\"f209\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#freelancer\" class=\"markup--anchor markup--li-anchor\">Freelancer</a></span></li>\n<li><span id=\"5ec4\"><a href=\"https://www.freecodecamp.org/news/how-to-find-remote-jobs/#freelancermap\" class=\"markup--anchor markup--li-anchor\">freelancermap</a></span></li>\n</ol>\n<hr>\n<h3>List:</h3>\n<h4>General Boards</h4>\n<ul>\n<li><span id=\"a076\"><a href=\"https://builtin.com/jobs\" class=\"markup--anchor markup--li-anchor\">Built In</a></span></li>\n<li><span id=\"c522\"><a href=\"https://stackoverflow.com/jobs\" class=\"markup--anchor markup--li-anchor\">Stack Overflow</a></span></li>\n<li><span id=\"8235\"><a href=\"http://angel.co/jobs\" class=\"markup--anchor markup--li-anchor\">angel.co</a></span></li>\n<li><span id=\"ae9e\"><a href=\"https://www.theladders.com/jobs/search-jobs\" class=\"markup--anchor markup--li-anchor\">The Ladders</a></span></li>\n<li><span id=\"aceb\"><a href=\"http://www.crunchboard.com/jobs\" class=\"markup--anchor markup--li-anchor\">CrunchBoard</a></span></li>\n<li><span id=\"7e5f\"><a href=\"https://uncubed.com/\" class=\"markup--anchor markup--li-anchor\">Uncubed</a></span></li>\n<li><span id=\"8678\"><a href=\"https://technical.ly/jobs/\" class=\"markup--anchor markup--li-anchor\">Technical.ly</a></span></li>\n<li><span id=\"c7fe\"><a href=\"https://www.dice.com/\" class=\"markup--anchor markup--li-anchor\">Dice</a></span></li>\n<li><span id=\"23f7\"><a href=\"https://www.techcareers.com/\" class=\"markup--anchor markup--li-anchor\">Tech Careers</a></span></li>\n<li><span id=\"20cf\"><a href=\"http://jobs.mashable.com/jobs/search/results\" class=\"markup--anchor markup--li-anchor\">Mashable</a></span></li>\n</ul>\n<h4>Remote or Relocation Boards:</h4>\n<ul>\n<li><span id=\"1e47\"><a href=\"https://weworkremotely.com/\" class=\"markup--anchor markup--li-anchor\">We Work Remotely</a></span></li>\n<li><span id=\"37d2\"><a href=\"https://relocate.me/\" class=\"markup--anchor markup--li-anchor\">Relocate</a><a href=\"https://workfromhomejobs.me/\" class=\"markup--anchor markup--li-anchor\">‍</a></span></li>\n<li><span id=\"aad7\"><a href=\"https://workfromhomejobs.me/\" class=\"markup--anchor markup--li-anchor\">Work From Home Jobs</a></span></li>\n<li><span id=\"d1fc\"><a href=\"https://docs.google.com/spreadsheets/d/16V7hG7l24hBAnlcmaSG3mrusDx1uj_ZsLwnTu7L_wsQ/edit?usp=sharing\" class=\"markup--anchor markup--li-anchor\">Remote Boards &#x26; Companies Spreadsheet</a></span></li>\n<li><span id=\"5267\"><a href=\"https://careervault.io/\" class=\"markup--anchor markup--li-anchor\">Career Vault</a></span></li>\n</ul>\n<h4>DS Boards:</h4>\n<ul>\n<li><span id=\"a50a\"><a href=\"https://www.bigdatajobs.com/\" class=\"markup--anchor markup--li-anchor\">BigDataJobs</a></span></li>\n<li><span id=\"e7ce\"><a href=\"https://icrunchdata.com/data-science-jobs/\" class=\"markup--anchor markup--li-anchor\">Icrunchdata</a></span></li>\n<li><span id=\"d66f\"><a href=\"https://www.analyticsjobs.co.uk/\" class=\"markup--anchor markup--li-anchor\">Analyticsjobs.co.uk</a></span></li>\n</ul>\n<h4>Design Boards</h4>\n<ul>\n<li><span id=\"0a09\"><a href=\"https://www.behance.net/joblist\" class=\"markup--anchor markup--li-anchor\">Behance</a></span></li>\n<li><span id=\"0174\"><a href=\"https://www.uxjobsboard.com/\" class=\"markup--anchor markup--li-anchor\">UX Jobs Board</a></span></li>\n<li><span id=\"ef44\"><a href=\"https://www.krop.com/creative-jobs/ux-ui-designer/\" class=\"markup--anchor markup--li-anchor\">Krop</a></span></li>\n</ul>\n<h4>Software Development</h4>\n<ul>\n<li><span id=\"4702\"><a href=\"https://www.honeypot.io/pages/for_employers\" class=\"markup--anchor markup--li-anchor\">Honeypot.io</a></span></li>\n<li><span id=\"d025\"><a href=\"https://jobs.github.com/\" class=\"markup--anchor markup--li-anchor\">GitHub</a></span></li>\n<li><span id=\"ed46\"><a href=\"https://blabladev.eu/\" class=\"markup--anchor markup--li-anchor\">BlablaDev</a></span></li>\n<li><span id=\"c23f\"><a href=\"http://jobs.smashingmagazine.com/\" class=\"markup--anchor markup--li-anchor\">Smashing <strong>Magazine</strong></a></span></li>\n<li><span id=\"61fd\"><a href=\"http://jobs.arstechnica.com/\" class=\"markup--anchor markup--li-anchor\">arstechnica</a></span></li>\n<li><span id=\"c526\"><a href=\"http://jobs.37signals.com/\" class=\"markup--anchor markup--li-anchor\">obs.37signals</a></span></li>\n<li><span id=\"1ec6\"><a href=\"http://news.ycombinator.com/submitted?id=whoishiring\" class=\"markup--anchor markup--li-anchor\">ycombinator</a></span></li>\n<li><span id=\"fa87\"><a href=\"http://jobs.slashdot.org/jobboard.php\" class=\"markup--anchor markup--li-anchor\">jobs.slashdot.org</a></span></li>\n<li><span id=\"3dfc\"><a href=\"http://angel.co/talent\" class=\"markup--anchor markup--li-anchor\">http://angel.co/talent</a></span></li>\n<li><span id=\"319e\"><a href=\"https://www.whitetruffle.com/\" class=\"markup--anchor markup--li-anchor\">whitetruffle</a></span></li>\n<li><span id=\"428a\"><a href=\"http://www.crunchboard.com/jobs/\" class=\"markup--anchor markup--li-anchor\">crunchboard</a></span></li>\n</ul>\n<p><strong>I am intentionally not linking glassdoor because they have irritated me for the last time by insisting I provide a job review every time I want to access their content… (To the makers of glassdoor… HOW MANY TIMES A MONTH DO YOU THINK I CHANGE JOBS!!!!) I don’t have 15 minutes to make up a job experience every time I want to read a review.</strong></p>\n<hr>\n<blockquote>\n<p>Also here is a repo of compiled job search and interviewing resources:</p>\n</blockquote>\n<p><a href=\"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE\"><strong>bgoonz/INTERVIEW-PREP-COMPLETE</strong><br />\n<em>Your resume is your personal summary sheet. Your resume is the thing that gets your foot in the door. So, there's a few…</em>github.com</a><a href=\"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/600/1*3_3Cb73SQM_YazWGpZWtIw.png\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/600/1*aI1PfkSpsUks598LAJvKoQ.png\" class=\"graf-image\" /></figure>\n<h4>First off I am going to introduce a few different categories for those of you who are completely overwhelmed by the prospect of even selecting a job board let alone establishing a competitive presence on one. Here’s a few catorizations I think are worth distinguishing for one and other.</h4>\n<h3>1. Interpersonal Connections</h3>\n<p>Seek to leverage the connections you have with people you know and companies you want to work with. I know that that’s a violation of the premise of this article but without even feeling the need to provide quantitative proof; I can confidently assume that this is the most <a href=\"https://www.investopedia.com/terms/r/returnoninvestment.asp\" class=\"markup--anchor markup--p-anchor\">RO</a>I efficient way to produce a desirable result. (Sorry introverts… 2020 may have been your year but this is our world. 😘)</p>\n<p><strong>If personal connections don’t come through, the next best thing is cold outreach (<em>best in terms of results…. personally I hate cold calling strangers and I am an extrovert</em>.)</strong></p>\n<ol>\n<li><span id=\"2139\">Before or after submitting an application, <strong>identify 1–3 professionals to reach out to</strong> at the company to express interest in opportunities.</span></li>\n<li><span id=\"fb8b\"><strong>Send a message to express interest and request an informational interview</strong> with the individual via LinkedIn, email, Twitter, or other available communication methods.</span></li>\n<li><span id=\"840d\"><strong>If you hear back</strong> and the individual is willing to connect, <strong>confirm a day and time to conduct a preliminary interview.</strong> <em>OR</em> <strong>If you have yet to hear back after 3 business days, follow-up.</strong></span></li>\n</ol>\n<p>Once you send off a message in step two, there are a variety of responses you may receive. Sometimes an individual will forward you along to someone who may be of better assistance, other times your message may be overlooked with no reply, and its possible (best case scenario) your request for a chat becomes an invitation to interview.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/600/1*3_3Cb73SQM_YazWGpZWtIw.png\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/600/1*aI1PfkSpsUks598LAJvKoQ.png\" class=\"graf-image\" /></figure>\n<figure><img src=\"https://cdn-images-1.medium.com/max/600/1*5eObFD9fV2fe5DztitZfsA.png\" class=\"graf-image\" /></figure>### ***2. LinkedIn***.\n<p>I am going to devote a lot of time to this one because it is the largest and most active of all the job board ecosystems… period… full stop regardless of your industry.</p>\n<p>LinkedIn now has <a href=\"https://news.linkedin.com/about-us#Statistics\" class=\"markup--anchor markup--p-anchor\">almost 740 million members</a> with over 55 million registered companies. (for comparison 12.3 million people visited Indeed in October, up 19.6 percent. <a href=\"http://www.monster.com/\" class=\"markup--anchor markup--p-anchor\">Monster.com</a> attracted 12.1 million people, and <a href=\"http://www.careerbuilder.com/\" class=\"markup--anchor markup--p-anchor\">CareerBuilder.com</a>attractedd 11.3 million in that same time) and LinkedIn is the most-used social media platform amongst Fortune 500 companies as it provides far more networking capabilities than pure recruitment.</p>\n<p>If you put your resume and skills on LinkedIn.com as a software Engineer, and state that you are open to new opportunities, you <em>will</em> be contacted by multiple recruiters, and if your skills are desirable possibly also directly by companies seeking to hire you. It’s a developer’s market; there’s not enough people out there, especially in America.</p>\n<p>Here’s my profile… feel free to connect… the larger your network the greater your exposure is to someone who works at your potential dream job.</p>\n<p><a href=\"https://www.linkedin.com/in/bryan-guner-046199128/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://www.linkedin.com/in/bryan-guner-046199128/\"><strong>Bryan Guner - Web Developer - Freelance | LinkedIn</strong><br />\n<em>View Bryan Guner's profile on LinkedIn, the world's largest professional community. Bryan has 5 jobs listed on their…</em>www.linkedin.com</a><a href=\"https://www.linkedin.com/in/bryan-guner-046199128/\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p>Here’s A Linkedin Checklist I will be using before I return to the job hunt!</p>\n<p><a href=\"https://www.notion.so/LinkedIn-d8b35e25ff0c451dbb5506ffa1179a8d\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://www.notion.so/LinkedIn-d8b35e25ff0c451dbb5506ffa1179a8d\"><strong>LinkedIn</strong><br />\n<em>Personal and Contact Information:</em>www.notion.so</a><a href=\"https://www.notion.so/LinkedIn-d8b35e25ff0c451dbb5506ffa1179a8d\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<blockquote>\n<p>excerpt:</p>\n</blockquote>\n<h4>Experience Section</h4>\n<ul>\n<li><span id=\"a517\">[ ] I <strong>have</strong> listed all professional roles included on my resume in this section and any that I had to cut from my resume for space</span></li>\n<li><span id=\"eca7\">[ ] I <strong>have</strong> written 2–4 power statements for each experience listed (okay to copy and paste from resume)</span></li>\n<li><span id=\"d298\">[ ] My power statements for each experience <a href=\"https://www.linkedin.com/pulse/update-how-add-bullet-points-your-linkedin-profile-erin-dore-miller/\" class=\"markup--anchor markup--li-anchor\">are bulleted</a>, not in paragraph form.</span></li>\n<li><span id=\"ec6c\">[ ] I <strong>did</strong> list responsibilities in bullet point format (I <strong>did not</strong> leave in paragraph format)</span></li>\n<li><span id=\"f472\">[ ] I <strong>did</strong> start each bullet point with <a href=\"https://docs.google.com/document/d/1wZkDPBWtQZDGGdvStD61iRx_jOWVlIyyQl9UOYHtZgA/edit?usp=sharing\" class=\"markup--anchor markup--li-anchor\">an action verb</a> and I <strong>did not</strong> use phrases such as: <code>Assisted with...</code> <code>Worked on...</code> <code>Helped with...</code> (<code>Solely responsible for...</code> ok)</span></li>\n<li><span id=\"9a26\">[ ] I <strong>did</strong> describe past projects in past tense and current projects in present tense</span></li>\n<li><span id=\"0f5a\">[ ] I <strong>did not</strong> use pronouns such as: “I,” “we,” “they, “you,” “me,” “us”</span></li>\n<li><span id=\"3616\">[ ] <strong>Optional:</strong> Bootcamp student experience and projects can be listed under your experience section if you have no (or almost no) prior work experience.</span></li>\n<li><span id=\"7fa1\">[ ] If I listed my Bootcamp student experience, my title is [name of program] Student (example: Data Science Student)</span></li>\n<li><span id=\"c928\">[ ] I copied and pasted my Lambda projects in my student description and also included them in the Accomplishments section</span></li>\n</ul>\n<h3>Do’s:</h3>\n<p><strong>Spend a good portion of your time learning and reading. Your jobs teach you so much about an organization and the business.</strong></p>\n<p><strong>Follow business owners and senior managers, successful team leaders in large organizations, startup owners. You would be surprised how willing some otherwise busy executives are to rub elbows with veritable newcomers. They’re not just doing this out of the kindness of their hearts, just like you… they have an ulterior motive. They are hoping to build goodwill with the incoming workforce in a bid to make their company more attractive to high quality candidates. If they give you any of their time…treat it like an interview.</strong></p>\n<blockquote>\n<p><em>To leverage this information, (the trick is to constantly remind yourself to be on your game with speaking with them.) I do not care what your teacher’s past have said… mark my words…</em> <strong>*THERE IS MOST CERTAINLY SUCH A THING AS A STUPID QUESTION**</strong>…Anyone who tells you otherwise is either stupid themselves or just overcome with their own compassion (an admirable trait but ultimately a disservice to you the competitive job seeker).*</p>\n</blockquote>\n<p><a href=\"https://hbr.org/2018/05/the-surprising-power-of-questions\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://hbr.org/2018/05/the-surprising-power-of-questions\"><strong>How to Ask Great Questions</strong><br />\n<em>In Brief The Problem Some professionals such as litigators, journalists and even doctors, are taught to ask questions…</em>hbr.org</a><a href=\"https://hbr.org/2018/05/the-surprising-power-of-questions\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<blockquote>\n<p>Engage in networking. I would recommend <strong>finding and connecting with current attendee of any software development bootcamp</strong>. They’re all (for the most part) programatically encouraged to connect network and engage in peer skill promotion (even if they have no idea of you skill level). If that weren’t enough reason, all of them come from a cohort of other individuals being instructed to do the same. Once you have a few in your network other’s will seek you out through Linkedin recommendations algorithm.</p>\n</blockquote>\n<blockquote>\n<p><strong>Note to prospective employers please just skip the next few sentences and don’t ask why…😅</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>Of the 214 people that vouched for me… I guestimate about only 80 actually know me in any respectable capacity, and of those, only probably 30 or so are familiar with my competency in the skills they endorsed. It all boils down to the strategies that bootcamps instill in their students. It’s the polar opposite of a zero sum game and they’re more than happy to exchange personal recommendations with you. They’re also far more driven to consistently engage with other members of the linkedin ecosystem because they need to a network to help compensate for their lack of a four year degree and the connections you make in that time.</strong></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/400/1*E519LWHx8W3CXw6c5FXgqg.png\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/1000/1*AUDMmyZrugM3SSy_0axgfQ.jpeg\" class=\"graf-image\" /></figure>\n<blockquote>\n<p>Build your personal brand. Developing your brand will not only help you attract clients or recruits if you decide to start a business, but will also help you find great job opportunities. You can post anything you take pride in so long as it’s fairly professional. Definitely make use of the featured section to showcase your work.</p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*DlqWg94B670bgin5STdJNg.png\" class=\"graf-image\" /></figure>### Don’t:\n<h4>Don’t Use LinkedIn’s Default Headline</h4>\n<p>LinkedIn automatically populates your headline with your current job title and company name. I hope it goes without saying… but as a rule avoid signaling to prospective employers the depths of your laziness by using any stock responses LinkedIn provides you.</p>\n<h4>Don’t Go Ham On Keyword Placment</h4>\n<p>Placing keywords strategically into your LinkedIn profile is virtually the only way to ensure being flagged by search algorithms as a potential candidate.You could be forgiven for being tempted to heed the advice of your inner lizard brain, and just stuffing your profile with buzzwords but this will likely trigger a spam account checker and result in worse outcomes than the absence of said keywords.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/600/1*3_3Cb73SQM_YazWGpZWtIw.png\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/600/1*aI1PfkSpsUks598LAJvKoQ.png\" class=\"graf-image\" /></figure>\n<hr>\n<h3>Why it matters<em>¿</em></h3>\n<h4>Are We Really All Connected by Just Six Degrees of Separation?</h4>\n<p>Most of us are familiar with the concept of six degrees of separation — the idea is that anyone in the planet can be connected to anyone else in just six steps. So through just five other people, you’re effectively connected to the Queen of England, Jim Belushi or even yo mamma.</p>\n<hr>\n<h3>Back to the other Job Board Niches:</h3>\n<p><strong><em>3. Traditional job boards</em></strong>. Dice.com, Monster.com, etc. They will not find you great jobs at technology companies; they may find you openings as a software engineer at other types of more traditional companies (for example, banks, retail chains, etc though.</p>\n<p><strong><em>4. Local-focused sites</em></strong>. The biggest is Craigslist, but there are others. Often great for contract work and opportunities you wouldn’t have otherwise come across.</p>\n<p><strong><em>5. Freelancer websites</em></strong>. oDesk.com, Elance.com, etc. Lower pay, but 100% contract work, and has a lot of flexible opportunities if you’re not looking for traditional full-time employment or remote work.</p>\n<ul>\n<li><span id=\"1350\"><a href=\"https://www.quora.com/What-are-the-best-job-boards-for-software-engineers\" class=\"markup--anchor markup--li-anchor\">Source</a></span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/600/1*3_3Cb73SQM_YazWGpZWtIw.png\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/600/1*aI1PfkSpsUks598LAJvKoQ.png\" class=\"graf-image\" /></figure>\n<h3>Lastly Here’s A Github Profile Guide:</h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*0nYkgla6oc0uImSZJElpdw.jpeg\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/1*wIhqnhU5zoyIr1GwZ2UTNA.jpeg\" class=\"graf-image\" /></figure>Medium is causing strange formatting… they normally form a grid!\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*-ypWlmloBF6kz9UnVG2kOA.png\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/1*Y9SdKz9cS3FtjlKaRge3jg.png\" class=\"graf-image\" /></figure>### Rubric:\n<figure><img src=\"https://cdn-images-1.medium.com/max/1200/1*5-FYxWj0q8sUvpDoAR3ZLA.png\" class=\"graf-image\" /></figure>\n<hr>\n<h3>Discover More:</h3>\n<p><a href=\"https://bgoonz-blog.netlify.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bgoonz-blog.netlify.app/\"><strong>Web-Dev-Hub</strong><br />\n<em>Memoization, Tabulation, and Sorting Algorithms by Example Why is looking at runtime not a reliable method of…</em>bgoonz-blog.netlify.app</a><a href=\"https://bgoonz-blog.netlify.app/\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<h1><strong>General</strong></h1>\n<ul>\n<li><strong><a href=\"https://haseebq.com/how-to-break-into-tech-job-hunting-and-interviews/\">How To Break Into Tech - Job Hunting and Interviews by Haseeb Qureshi</a></strong></li>\n<li><strong><a href=\"https://mintbean.io/\">Mintbean.io - Hackathons and Workshops</a></strong></li>\n<li><strong><a href=\"https://talent.works/category/science-of-the-job-search/\">Data on the job search and how to do it!</a></strong></li>\n<li><strong><a href=\"https://www.linkedin.com/post-inspector/inspect/\">LinkedIn Post Inspector</a></strong></li>\n<li><strong><a href=\"https://medium.com/@jamesyhiggs/how-to-add-thumbnail-images-to-the-featured-section-of-your-linkedin-profile-for-web-apps-sites-917346235932\">LinkedIn Featured Images</a></strong></li>\n<li><strong><a href=\"https://frontendmasters.com/\">Frontend Masters</a></strong> - Expensive, but worth every penny</li>\n</ul>\n<hr>\n<h1><strong>Resume</strong></h1>\n<ul>\n<li><strong><a href=\"http://blog.alinelerner.com/lessons-from-a-years-worth-of-hiring-data/\">Spelling/Grammar mistakes on Resume costs jobs</a></strong></li>\n</ul>\n<h1><strong>Cover Letter</strong></h1>\n<ul>\n<li><strong><a href=\"http://www.fsb.miamioh.edu/fsb/content/programs/howe-writing-initiative/HWI-handout-CsofBusComm.html\">Six C's of Business Communication</a></strong></li>\n</ul>\n<hr>\n<h1><strong>Heroku</strong> - <em>Use at your own risk</em></h1>\n<ul>\n<li><strong><a href=\"https://medium.com/@pandachain/keep-free-heroku-app-awake-during-a-specific-period-using-google-app-script-in-2017-63fe37ee9e9f\">Keep Heroku App Awake For Free Using Google App Script</a></strong></li>\n<li><strong><a href=\"https://uptimerobot.com/\">UptimeRobot</a></strong></li>\n<li><strong><a href=\"https://kaffeine.herokuapp.com/\">Kaffeine</a></strong></li>\n<li><strong><a href=\"https://docs.google.com/document/d/1_BZswbvmcEtVul9gD59Lk4IUk2mHp1Wbe2ucaHTY7A0/edit\">UptimeRobot and Dyno Lecture</a></strong></li>\n</ul>\n<hr>\n<h1><strong>Trivia</strong></h1>\n<ul>\n<li>\n<h2><strong>JavaScript Trivia</strong></h2>\n<ul>\n<li><strong><a href=\"https://www.fullstack.cafe/\">Fullstack Cafe - EVERYTHING</a></strong></li>\n<li><strong><a href=\"https://www.thatjsdude.com/interview/\">Front-end trivia</a></strong></li>\n</ul>\n</li>\n<li>\n<h2><strong>Python Trivia</strong></h2>\n</li>\n<li>\n<h2><strong>Frontend Trivia</strong></h2>\n<ul>\n<li><a href=\"https://www.toptal.com/designers/web/interview-questions\"><strong>12 Essential Web Design Interview Questions</strong></a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1><strong>Language Resources</strong></h1>\n<ul>\n<li>\n<h2><strong>JavaScript Resources</strong></h2>\n<ul>\n<li><strong><a href=\"https://github.com/antonjb/TypeScript-Learning-Plan\">TypeScript Learning Plan</a></strong></li>\n<li>\n<p><strong>React Native</strong></p>\n<ul>\n<li>\n<p><strong><a href=\"https://codewithmosh.com/courses/enrolled\">Code With Mosh Enrolled</a></strong></p>\n<ul>\n<li><em>satagonia@gmail.com / qqqq1111</em></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2><strong>Python Resources</strong></h2>\n<p>-</p>\n</li>\n<li>\n<h2><strong>HTML5 Resources</strong></h2>\n<ul>\n<li><a href=\"https://digital.com/tools/html-cheatsheet/\"><strong>HTML5 Cheat Sheet</strong></a></li>\n<li><a href=\"https://www.html5rocks.com/en/resources.html\"><strong>HTML5 Rocks</strong></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML\"><strong>MDN - HTML</strong></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML\"><strong>MDN - HTML5</strong></a></li>\n<li><a href=\"http://html5doctor.com/\"><strong>HTML5 Doctor</strong></a></li>\n<li>-</li>\n</ul>\n</li>\n<li>\n<h2><strong>CSS3 Resources</strong></h2>\n<ul>\n<li><a href=\"https://www.w3schools.com/css/\"><strong>W3 Schools CSS3 Tutorial</strong></a></li>\n<li><a href=\"https://www.tutorialrepublic.com/css-tutorial/\"><strong>Tutorial Republic - Ultimate Tutorial for Beginners</strong></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS\"><strong>MDN - CSS</strong></a></li>\n<li><a href=\"https://www.css3.info/\"><strong>CSS3.info</strong></a></li>\n<li>\n<p><a href=\"https://css-tricks.com/\"><strong>CSS Tricks</strong></a></p>\n<ul>\n<li><a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">Complete Guide to Flexbox</a></li>\n<li><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">Complete Guide to Grid</a></li>\n</ul>\n</li>\n<li><a href=\"https://grid.layoutit.com/\"><strong>Interactive CSS Grid Generator</strong></a></li>\n<li><a href=\"http://csszengarden.com/\"><strong>CSS Zen Garden</strong></a></li>\n<li><a href=\"http://flexboxgrid.com/\"><strong>Flexbox Grid (Package)</strong></a></li>\n<li><a href=\"http://www.specifishity.com/\"><strong>Specifishity</strong></a></li>\n<li><a href=\"https://www.onblastblog.com/css3-cheat-sheet/\"><strong>CSS3 Cheat Sheet</strong></a></li>\n<li><a href=\"https://labs.jensimmons.com/\"><strong>Jen Simmons Labs</strong></a></li>\n</ul>\n</li>\n<li>\n<h2><strong>Miscellaneous Resources</strong></h2>\n<ul>\n<li>\n<p><a href=\"https://codepen.io/\"><strong>CodePen</strong></a></p>\n<ul>\n<li><a href=\"https://codepen.io/202/popular/pens/\">2020 Most Popular Pens (replace year for more)</a></li>\n</ul>\n</li>\n<li><a href=\"https://web-design-weekly.com/\"><strong>Web Design Weekly</strong></a></li>\n<li><a href=\"https://responsivedesign.is/\"><strong>Responsive Design Weekly</strong></a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1><strong>DS&#x26;A</strong></h1>\n<ul>\n<li><strong><a href=\"https://leetcode.com/explore\">Leetcode</a></strong></li>\n<li><strong><a href=\"https://www.algoexpert.io/\">AlgoExpert</a></strong></li>\n</ul>\n<h2><strong>Hash Tables:</strong></h2>\n<ul>\n<li>\n<p><strong><a href=\"https://www.youtube.com/watch?v=shs0KM3wKv8\">What is a Hash Table</a></strong></p>\n<ul>\n<li>O(1) for a \"good\" table</li>\n<li>O(n) for a terrible table (lots of collisions, etc.)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1><strong>System Design</strong></h1>\n<ul>\n<li><strong><a href=\"https://www.educative.io/courses/grokking-the-system-design-interview/m2yDVZnQ8lG\">The Basics</a></strong></li>\n<li><strong><a href=\"https://levelup.gitconnected.com/everything-you-need-to-know-about-caching-system-design-932a6bdf3334\">Caching</a></strong></li>\n<li><strong><a href=\"https://codeburst.io/system-design-basics-load-balancer-101-adc4f602d08f\">Load Balancing</a></strong></li>\n</ul>\n<hr>\n<h1><strong>Interviewing</strong></h1>\n<ul>\n<li>\n<h3><strong>Mock Interviewing</strong></h3>\n<ul>\n<li><strong><a href=\"https://interviewing.io/\">Interviewing.io</a></strong></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1><strong>Networking</strong></h1>\n<ul>\n<li><strong><a href=\"https://www.meetup.com/\">MeetUp</a></strong></li>\n</ul>\n<hr>\n<h1><strong>Managing and Organizing Job Search</strong></h1>\n<ul>\n<li>\n<p><strong><a href=\"notion.so\">Notion</a></strong></p>\n<ul>\n<li>Trillo clone but with added features that make it really great! Consider creating a template for new job seekers!</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1><strong>Negotiations</strong></h1>\n<ul>\n<li><strong><a href=\"https://haseebq.com/my-ten-rules-for-negotiating-a-job-offer/\">Haseeb's 10 Rules - Part 1</a></strong></li>\n<li><strong><a href=\"https://haseebq.com/how-not-to-bomb-your-offer-negotiation/\">Haseeb's 10 Rules - Part 2</a></strong></li>\n</ul>\n<hr>\n<h1><strong>Portfolio Sites</strong></h1>\n<p>Take 25 minutes to choose a template, download it, rename it githubusername.github.io , git init, and push it to a github repo of the same name:</p>\n<h2><strong>Template Sources</strong></h2>\n<ul>\n<li><a href=\"http://www.free-css.com/template-categories/portfolio\"><strong>Free CSS Templates</strong></a></li>\n<li><a href=\"http://html5up.net/\"><strong>HTML5 UP</strong></a></li>\n<li><a href=\"http://startbootstrap.com/\"><strong>Start Bootstrap</strong></a></li>\n<li><a href=\"https://themewagon.com/top-html-landing-page-templates/\"><strong>Theme Wagon</strong></a></li>\n<li><a href=\"https://templatemo.com/tag/portfolio\"><strong>Templatemo</strong></a></li>\n<li><a href=\"https://onepagelove.com/templates/free-templates\"><strong>One Page Love</strong></a></li>\n<li>Once you’ve decided on a template, download it to your machine.</li>\n<li>Rename the folder <code>{$yourGitHubUserName}.github.io</code>, (e.g. if my GitHub\nusername were QueenOfTheBeyhive, I would name my repo\n<code>QueenOfTheBeyhive.github.io</code>). This will be important for deployment to GitHub\npages later.</li>\n<li>Make sure to <code>git init</code> and set up your remote repository.</li>\n<li>As always, make sure to read through any provided README for any potentially\nuseful information.</li>\n<li>Take some time to explore the structure, included elements, and default assets\nincluded in the template. Take special note of style sheets and the main HTML\nfile. The main HTML must be called <code>index.html</code> and it must be located in the root\nof the directory. If the file is located elsewhere, relocate it to the root and adjust\nany relative paths for any imported scripts or style sheets.</li>\n</ul>\n<hr>\n<h1><strong>QA Engineering</strong></h1>\n<ul>\n<li><strong><a href=\"https://teamtreehouse.com/library/introduction-to-qa-engineering\">Full course in 7 day trial</a></strong></li>\n<li><strong><a href=\"https://docs.google.com/document/d/1REtlnM0j88iGgIkPmOyeuwf-VdhOSV6U0QkcPEz81Oc/edit\">Prep Notes</a></strong></li>\n</ul>\n<h1><strong>Alternative Roles</strong></h1>\n<pre><code>Data Analyst\nSales Engineer\nTechnical Support Engineer\nCustomer Success Engineer\nData Engineer\nDev Ops Engineer\nQA Engineer\nSolutions Engineer\nSupport Engineer\nTechnical Product Manager\nScrum Master\nImplementation Specialist\nTechnical Account Manager\n</code></pre>\n<hr>\n<h1><strong>Externship</strong></h1>\n<ul>\n<li><strong><a href=\"https://www.insidesherpa.com/\">insidesherpa</a></strong></li>\n</ul>\n<hr>\n<h1><strong>Open Source</strong></h1>\n<ul>\n<li><strong><a href=\"https://opensource.guide/\">GitHub's open source guides</a></strong></li>\n<li><strong><a href=\"https://opensource.com/resources/getting-started-open-source\">Getting started with open source</a></strong></li>\n<li><strong><a href=\"https://www.firsttimersonly.com/\">First timers only</a></strong></li>\n<li><strong><a href=\"https://opensourceunderdogs.com/episodes/\">Open Source Underdogs</a></strong></li>\n<li><strong><a href=\"https://www.codetriage.com/\">Code Triage</a></strong></li>\n</ul>\n<hr>\n<h1><strong>Volunteer</strong></h1>\n<ul>\n<li><strong><a href=\"https://www.codeforamerica.org/\">Code For America</a></strong></li>\n<li><strong><a href=\"https://www.donatecode.com/\">Donate Code</a></strong></li>\n<li><strong><a href=\"https://socialcoder.org/Home/Index\">Social Coder</a></strong></li>\n<li><strong><a href=\"https://www.catchafire.org/\">Catch A Fire</a></strong></li>\n<li><strong><a href=\"https://www.hackersforcharity.org/\">Hackers For Charity</a></strong></li>\n</ul>\n<hr>\n<h1><strong>Imposter Syndrome</strong></h1>\n<ul>\n<li><strong><a href=\"https://www.zainrizvi.io/blog/the-impostors-advantage/\">The Imposter's Advantage - Zain Rizvi</a></strong></li>\n<li><strong><a href=\"https://www.techrepublic.com/article/why-58-of-tech-employees-suffer-from-imposter-syndrome/\">Stats on the tech giants</a></strong></li>\n<li><strong><a href=\"http://blog.alinelerner.com/how-different-is-a-b-s-in-computer-science-from-a-m-s-in-computer-science-when-it-comes-to-recruiting/\">Why MS degrees are shit</a></strong></li>\n</ul>\n<hr>\n<h1><strong>Podcasts</strong></h1>\n<ul>\n<li><strong><a href=\"https://freecodecamp.libsyn.com/\">FreeCodeCamp Podcast</a></strong></li>\n<li><strong><a href=\"https://www.heroku.com/podcasts/codeish/85-the-new-definition-of-frontend-development\">Codish Podcast</a></strong></li>\n</ul>\n<hr>\n<h1><strong>Books</strong></h1>\n<ul>\n<li>\n<p><strong>Grokking the Coding Interview</strong></p>\n<ul>\n<li><a href=\"https://github.com/cl2333/Grokking-the-Coding-Interview-Patterns-for-Coding-Questions\">GitHub Coding Questions</a></li>\n<li><a href=\"https://www.educative.io/courses/grokking-the-coding-interview\">Purchase Course</a></li>\n</ul>\n</li>\n<li>\n<p><strong>Grokking the System Design Interview</strong></p>\n<ul>\n<li><a href=\"https://github.com/ema2159/Grokking-System-Design-Interview-Quizzes\">Quizzes</a></li>\n<li><a href=\"https://www.educative.io/courses/grokking-the-system-design-interview\">Purchase Course</a></li>\n</ul>\n</li>\n<li>\n<p><strong>Elements of Programming Interviews (EPI) in Python</strong></p>\n<ul>\n<li><a href=\"https://www.amazon.com/Elements-Programming-Interviews-Python-Insiders/dp/1537713949\">Amazon</a></li>\n</ul>\n</li>\n<li>\n<p><strong>Skienna Algorithm Design Manual</strong></p>\n<ul>\n<li><a href=\"https://www.amazon.com/Algorithm-Design-Manual-Steven-Skiena-ebook-dp-B00B8139Z8/dp/B00B8139Z8/ref=mt_other?_encoding=UTF8&#x26;me=&#x26;qid=\">Amazon</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1><strong>QA Questions</strong></h1>\n<p><strong>10:22:12 From Alexis Kozak to Everyone : Scenario 1</strong></p>\n<ul>\n<li>It's 7:00 pm on a Friday, and you receive a message from Dev Ops that they haven't been able to upgrade a live Production environment as planned. There were feature updates in this release that customers have planned marketing campaigns around. It also included a bug fix for one customer that’s currently having to maintain a very manual workaround. What do you do?</li>\n</ul>\n<p><strong>10:24:40 From Alexis Kozak to Everyone : Scenario 2</strong></p>\n<ul>\n<li>An application has been configured to send an email every time a patient requests a changed email. The automated email sends something to the old email, acknowledging that they changed their email, and if that isn’t right, to please contact Secular Health Network. When you come into the office one morning, you see that thousands of emails have been generated in the space of two hours. What do you do? How do you find the number of emails sent?</li>\n</ul>\n<p><strong>10:28:11 From Alexis Kozak to Everyone : Scenario 3</strong></p>\n<ul>\n<li>A customer has requested a change to SSO logic such that only users from a certain region can access SmartExam. You’ve implemented the rule on their demo environments and given them a testing plan that is simple and straightforward. During testing, you’re included in multiple email chains with different parties, as well as some one-off calls and texts messages. Resources seem scattered, but the testing happens. After receiving confirmation from the customer that testing was successful, you’re told the code is good to go into production. However, upon doing some quick checks, you discover that the rule you wrote doesn’t work and would actually prevent any user from logging into SmartExam. The fix is quite simple. What do you do?</li>\n</ul>"},{"url":"/docs/articles/event-loop/","relativePath":"docs/articles/event-loop.md","relativeDir":"docs/articles","base":"event-loop.md","name":"event-loop","frontmatter":{"title":"The Node.js Event Loop","sections":[],"seo":{"title":"","description":"The Event Loop is one of the most important aspects to understand about Node.js","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h2>Introduction</h2>\n<p>The <strong>Event Loop</strong> is one of the most important aspects to understand about Node.js.</p>\n<p>Why is this so important? Because it explains how Node.js can be asynchronous and have non-blocking I/O, and so it explains basically the \"killer app\" of Node.js, the thing that made it this successful.</p>\n<p>The Node.js JavaScript code runs on a single thread. There is just one thing happening at a time.</p>\n<p>This is a limitation that's actually very helpful, as it simplifies a lot how you program without worrying about concurrency issues.</p>\n<p>You just need to pay attention to how you write your code and avoid anything that could block the thread, like synchronous network calls or infinite loops.</p>\n<p>In general, in most browsers there is an event loop for every browser tab, to make every process isolated and avoid a web page with infinite loops or heavy processing to block your entire browser.</p>\n<p>The environment manages multiple concurrent event loops, to handle API calls for example. Web Workers run in their own event loop as well.</p>\n<p>You mainly need to be concerned that <em>your code</em> will run on a single event loop, and write code with this thing in mind to avoid blocking it.</p>\n<h2>Blocking the event loop</h2>\n<p>Any JavaScript code that takes too long to return back control to the event loop will block the execution of any JavaScript code in the page, even block the UI thread, and the user cannot click around, scroll the page, and so on.</p>\n<p>Almost all the I/O primitives in JavaScript are non-blocking. Network requests, filesystem operations, and so on. Being blocking is the exception, and this is why JavaScript is based so much on callbacks, and more recently on promises and async/await.</p>\n<h2>The call stack</h2>\n<p>The call stack is a LIFO queue (Last In, First Out).</p>\n<p>The event loop continuously checks the <strong>call stack</strong> to see if there's any function that needs to run.</p>\n<p>While doing so, it adds any function call it finds to the call stack and executes each one in order.</p>\n<p>You know the error stack trace you might be familiar with, in the debugger or in the browser console? The browser looks up the function names in the call stack to inform you which function originates the current call:</p>\n<p><img src=\"exception-call-stack.png\" alt=\"Exception call stack\"></p>\n<h2>A simple event loop explanation</h2>\n<p>Let's pick an example:</p>\n<iframe\n  title=\"A simple event loop explanation\"\n  src=\"https://glitch.com/embed/#!/embed/nodejs-dev-0029-01?path=server.js&previewSize=20&attributionHidden=true&sidebarCollapsed=true\"\n  alt=\"nodejs-dev-0029-01 on Glitch\"\n  style=\"height: 400px; width: 100%; border: 0;\">\n</iframe>\n<!--```js\nconst bar = () => console.log('bar')\n\nconst baz = () => console.log('baz')\n\nconst foo = () => {\n  console.log('foo')\n  bar()\n  baz()\n}\n\nfoo()\n```\n\nThis code prints\n\n```txt\nfoo\nbar\nbaz\n```\n\nas expected.-->\n<p>When this code runs, first <code>foo()</code> is called. Inside <code>foo()</code> we first call <code>bar()</code>, then we call <code>baz()</code>.</p>\n<p>At this point the call stack looks like this:</p>\n<p><img src=\"call-stack-first-example.png\" alt=\"Call stack first example\"></p>\n<p>The event loop on every iteration looks if there's something in the call stack, and executes it:</p>\n<p><img src=\"execution-order-first-example.png\" alt=\"Execution order first example\"></p>\n<p>until the call stack is empty.</p>\n<h2>Queuing function execution</h2>\n<p>The above example looks normal, there's nothing special about it: JavaScript finds things to execute, runs them in order.</p>\n<p>Let's see how to defer a function until the stack is clear.</p>\n<p>The use case of <code>setTimeout(() => {}, 0)</code> is to call a function, but execute it once every other function in the code has executed.</p>\n<p>Take this example:</p>\n<iframe\n  title=\"Queuing function execution\"\n  src=\"https://glitch.com/embed/#!/embed/nodejs-dev-0029-02?path=server.js&previewSize=20&attributionHidden=true&sidebarCollapsed=true\"\n  alt=\"nodejs-dev-0029-02 on Glitch\"\n  style=\"height: 400px; width: 100%; border: 0;\">\n</iframe>\n<!--```js\nconst bar = () => console.log('bar')\n\nconst baz = () => console.log('baz')\n\nconst foo = () => {\n  console.log('foo')\n  setTimeout(bar, 0)\n  baz()\n}\n\nfoo()\n```-->\n<p>This code prints, maybe surprisingly:</p>\n<pre><code class=\"language-bash\">foo\nbaz\nbar\n</code></pre>\n<p>When this code runs, first foo() is called. Inside foo() we first call setTimeout, passing <code>bar</code> as an argument, and we instruct it to run immediately as fast as it can, passing 0 as the timer. Then we call baz().</p>\n<p>At this point the call stack looks like this:</p>\n<p><img src=\"call-stack-second-example.png\" alt=\"Call stack second example\"></p>\n<p>Here is the execution order for all the functions in our program:</p>\n<p><img src=\"execution-order-second-example.png\" alt=\"Execution order second example\"></p>\n<p>Why is this happening?</p>\n<h2>The Message Queue</h2>\n<p>When setTimeout() is called, the Browser or Node.js starts the timer. Once the timer expires, in this case immediately as we put 0 as the timeout, the callback function is put in the <strong>Message Queue</strong>.</p>\n<p>The Message Queue is also where user-initiated events like click or keyboard events, or fetch responses are queued before your code has the opportunity to react to them. Or also DOM events like <code>onLoad</code>.</p>\n<p><strong>The loop gives priority to the call stack, and it first processes everything it finds in the call stack, and once there's nothing in there, it goes to pick up things in the message queue.</strong></p>\n<p>We don't have to wait for functions like <code>setTimeout</code>, fetch or other things to do their own work, because they are provided by the browser, and they live on their own threads. For example, if you set the <code>setTimeout</code> timeout to 2 seconds, you don't have to wait 2 seconds - the wait happens elsewhere.</p>\n<h2>ES6 Job Queue</h2>\n<p>ECMAScript 2015 introduced the concept of the Job Queue, which is used by Promises (also introduced in ES6/ES2015). It's a way to execute the result of an async function as soon as possible, rather than being put at the end of the call stack.</p>\n<p>Promises that resolve before the current function ends will be executed right after the current function.</p>\n<p>I find nice the analogy of a rollercoaster ride at an amusement park: the message queue puts you at the back of the queue, behind all the other people, where you will have to wait for your turn, while the job queue is the fastpass ticket that lets you take another ride right after you finished the previous one.</p>\n<p>Example:</p>\n<iframe\n  title=\"ECMAScript 2015 Job Queue\"\n  src=\"https://glitch.com/embed/#!/embed/nodejs-dev-0029-03?path=server.js&previewSize=35&attributionHidden=true&sidebarCollapsed=true\"\n  alt=\"nodejs-dev-0029-03 on Glitch\"\n  style=\"height: 400px; width: 100%; border: 0;\">\n</iframe>\n<!--```js\nconst bar = () => console.log('bar')\n\nconst baz = () => console.log('baz')\n\nconst foo = () => {\n  console.log('foo')\n  setTimeout(bar, 0)\n  new Promise((resolve, reject) =>\n    resolve('should be right after baz, before bar')\n  ).then(resolve => console.log(resolve))\n  baz()\n}\n\nfoo()\n```\n\nThis prints\n\n```txt\nfoo\nbaz\nshould be right after baz, before bar\nbar\n```-->\n<p>That's a big difference between Promises (and Async/await, which is built on promises) and plain old asynchronous functions through <code>setTimeout()</code> or other platform APIs.</p>"},{"url":"/docs/articles/basic-web-dev/","relativePath":"docs/articles/basic-web-dev.md","relativeDir":"docs/articles","base":"basic-web-dev.md","name":"basic-web-dev","frontmatter":{"title":"Web Dev Review","sections":[],"seo":{"title":"","description":"Review-Of-Previous-Concepts","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<hr>\n<h2>description: Review</h2>\n<h1>Review-Of-Previous-Concepts</h1>\n<h3>Review of Concepts</h3>\n<h3>Running JS Locally Concepts</h3>\n<ul>\n<li>\n<p>Match the commands <code>ls</code>, <code>cd</code>, <code>pwd</code> to their descriptions</p>\n<ul>\n<li><code>ls</code> lists contents of current directory</li>\n<li>\n<p><code>cd</code> changes current directory</p>\n<ul>\n<li><code>cd ..</code> takes you up one level</li>\n<li><code>cd</code> alone takes you back home</li>\n</ul>\n</li>\n<li><code>pwd</code> returns current directory</li>\n</ul>\n</li>\n<li>Given a folder structure diagram, a list of 'cd (path)' commands and target files, match the paths to the target files.</li>\n<li>Use VSCode to create a folder. Within the folder create a .js file containing <code>console.log('hello new world');</code> and save it.</li>\n<li>Use node to execute a JavaScript file in the terminal</li>\n</ul>\n<h3>Plain Old JS Object Lesson Concepts</h3>\n<ul>\n<li>\n<p>Label variables as either Primitive vs. Reference</p>\n<ul>\n<li>\n<p>primitives: strings, booleans, numbers, null and undefined</p>\n<ul>\n<li>primitives are immutable</li>\n</ul>\n</li>\n<li>\n<p>refereces: objects (including arrays)</p>\n<ul>\n<li>references are mutable</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Identify when to use <code>.</code> vs <code>[]</code> when accessing values of an object</p>\n<ul>\n<li>\n<p>dot syntax <code>object.key</code></p>\n<ul>\n<li>easier to read</li>\n<li>easier to write</li>\n<li>cannot use variables as keys</li>\n<li>keys cannot begin with a number</li>\n</ul>\n</li>\n<li>\n<p>bracket notation <code>object[\"key]</code></p>\n<ul>\n<li>allows variables as keys</li>\n<li>strings that start with numbers can be use as keys</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Write an object literal with a variable key using interpolation</p>\n<ul>\n<li>\n<p>put it in brackets to access the value of the variable, rather than just make the value that string</p>\n<pre><code class=\"language-javascript\">let a = 'b';\nlet obj = { a: 'letter_a', [a]: 'letter b' };\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Use the <code>obj[key] !== undefined</code> pattern to check if a given variable that contains a key exists in an object</p>\n<ul>\n<li>can also use <code>(key in object)</code> syntax interchangeably (returns a boolean)</li>\n</ul>\n</li>\n<li>\n<p>Utilize Object.keys and Object.values in a function</p>\n<ul>\n<li><code>Object.keys(obj)</code> returns an array of all the keys in <code>obj</code></li>\n<li><code>Object.values(obj)</code> returns an array of the values in <code>obj</code></li>\n</ul>\n</li>\n<li>\n<p>Iterate through an object using a <code>for in</code> loop</p>\n<pre><code class=\"language-javascript\">let printValues = function (obj) {\n    for (let key in obj) {\n        let value = obj[key];\n        console.log(value);\n    }\n};\n</code></pre>\n</li>\n<li>\n<p>Define a function that utilizes <code>...rest</code> syntax to accept an arbitrary number of arguments</p>\n<ul>\n<li><code>...rest</code> syntax will store all additional arguments in an array</li>\n<li>\n<p>array will be empty if there are no additional arguments</p>\n<pre><code class=\"language-javascript\">let myFunction = function (str, ...strs) {\n    console.log('The first string is ' + str);\n    console.log('The rest of the strings are:');\n    strs.forEach(function (str) {\n        console.log(str);\n    });\n};\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3></h3>\n<ul>\n<li>\n<p>Use <code>...spread</code> syntax for Object literals and Array literals</p>\n<pre><code class=\"language-javascript\">let arr1 = ['a', 'b', 'c'];\nlet longer = [...arr1, 'd', 'e']; // [\"a\", \"b\", \"c\", \"d\", \"e\"]\n// without spread syntax, this would give you a nested array\nlet withoutRest = [arr1, 'd', 'e']; // [[\"a\", \"b\", \"c\"], \"d\", \"e\"]\n</code></pre>\n</li>\n<li>\n<p>Destructure an array to reference specific elements</p>\n<p>```javascript</p>\n<p>let array = [35,9];</p>\n<p>let [firstEl, secondEl] = array;</p>\n<p>console.log(firstEl); // => 35</p>\n<p>console.log(secondEl); // => 9</p>\n</li>\n</ul>\n<p>// can also destructure using ... syntax let array = [35,9,14]; let [head, ...tail] = array; console.log(head); // => 35 console.log(tail); // => [9, 14]</p>\n<pre><code class=\"language-javascript\">- Destructure an object to reference specific values\n   - if you want to use variable names that don't match the keys, you can use aliasing\n      - `let { oldkeyname: newkeyname } = object`\n   - rule of thumb—only destructure values from objects that are two levels deep\n```javascript\nlet obj = {\n   name: \"Wilfred\",\n   appearance: [\"short\", \"mustache\"],\n   favorites: {\n      color: \"mauve\",\n      food: \"spaghetti squash\",\n      number: 3\n   }\n}\n// with variable names that match keys\nlet { name, appearance } = obj;\nconsole.log(name); // \"Wilfred\"\nconsole.log(appearance); // [\"short\", \"mustache\"]\n\n// with new variable names (aliasing)\nlet {name: myName, appearance: myAppearance} = obj;\n\nconsole.log(myName); // \"Wilfred\"\nconsole.log(myAppearance); // [\"short\", \"mustache\"]\n\n// in a function call\nlet sayHello = function({name}) {\nconsole.log(\"Hello, \" + name); // \"Hello Wilfred\"\n}\n\n// nested objects + aliasing\nlet { favorites: {color, food: vegetable} } = obj;\nconsole.log(color, vegetable); //=> mauve spaghetti squash\n</code></pre>\n<ul>\n<li>\n<p>Write a function that accepts a array as an argument and returns an object representing the count of each character in the array</p>\n<pre><code class=\"language-javascript\">//\nlet elementCounts = function (array) {\n    let obj = {};\n    array.forEach(function (el) {\n        if (el in obj) obj[el] += 1;\n        else obj[el] = 1;\n    });\n    return obj;\n};\nconsole.log(elementCounts(['e', 'f', 'g', 'f'])); // => Object {e: 1, f: 2, g: 1}\n</code></pre>\n</li>\n</ul>\n<h3>Callbacks Lesson Concepts</h3>\n<ul>\n<li>\n<p>Given multiple plausible reasons, identify why functions are called \"First Class Objects\" in JavaScript.</p>\n<ul>\n<li>they can be stored in variables, passed as arguments to other functions, and serve as return value for a function</li>\n<li>supports same basic operations as other types (strings, bools, numbers)</li>\n<li>higher-order functions take functions as arguments or return functions as values</li>\n</ul>\n</li>\n<li>\n<p>Given a code snippet containing an anonymous callback, a named callback, and multiple <code>console.log</code>s, predict what will be printed</p>\n<ul>\n<li>what is this referring to?</li>\n</ul>\n</li>\n<li>Write a function that takes in a value and two callbacks. The function should return the result of the callback that is greater.</li>\n</ul>\n<pre><code class=\"language-javascript\">let greaterCB = function (val, callback1, callback2) {\n    if (callback1(val) > callback2(val)) {\n        return callback1(val);\n    }\n    return callback2(val);\n};\n\nlet greaterCB = function (val, callback1, callback2) {\n    if (callback1(val) > callback2(val)) {\n        return callback1(val);\n    }\n    return callback2(val);\n};\n</code></pre>\n<p>// shorter version let greaterCB = function(val, callback1, callback2) { return Math.max(callback1(val), callback2(val)); } // even shorter, cause why not let greaterCB = (val, cb1, cb2) => Math.max(cb1(val), cb2(val));</p>\n<pre><code class=\"language-javascript\">- Write a function, myMap, that takes in an array and a callback as arguments. The function should mimic the behavior of `Array#map`.\n```javascript\nlet myMap = function(array, callback) {\n   let newArr = [];\n   for (let i = 0; i &#x3C; array.length; i ++) {\n      mapped = callback(array[i], i, array);\n      newArr.push(mapped);\n   }\n   return newArr;\n}\nconsole.log( myMap([16,25,36], Math.sqrt)); // => [4, 5, 6];\n\nlet myMapArrow = (array, callback) => {\n   let newArr = [];\n   array.forEach( (ele, ind, array) => {\n      newArr.push(callback(ele, ind, array));\n   })\n   return newArr;\n}\nconsole.log(myMapArrow([16,25,36], Math.sqrt)); // => [4, 5, 6];\n</code></pre>\n<ul>\n<li>\n<p>Write a function, myFilter, that takes in an array and a callback as arguments. The function should mimic the behavior of <code>Array#filter</code>.</p>\n<pre><code class=\"language-javascript\">let myFilter = function (array, callback) {\n    let filtered = [];\n    for (let i = 0; i &#x3C; array.length; i++) {\n        if (callback(array[i])) {\n            filtered.push(array[i], i, array);\n        }\n    }\n};\n</code></pre>\n</li>\n<li>\n<p>Write a function, myEvery, that takes in an array and a callback as arguments. The function should mimic the behavior of <code>Array#every</code>.</p>\n<pre><code class=\"language-javascript\">let myEvery = function (array, callback) {\n    for (let i = 0; i &#x3C; array.length; i++) {\n        if (!callback(array[i], i, array)) {\n            return false;\n        }\n    }\n    return true;\n};\n// with arrow function syntax\nlet myEvery = (array, callback) => {\n    for (let i = 0; i &#x3C; array.length; i++) {\n        if (!callback(array[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n</code></pre>\n</li>\n</ul>\n<h3>Scope Lesson Concepts</h3>\n<ul>\n<li>\n<p>Identify the difference between <code>const</code>, <code>let</code>, and <code>var</code> declarations</p>\n<ul>\n<li><code>const</code> - cannot reassign variable, scoped to block</li>\n<li><code>let</code> - can reassign variable, scoped to block</li>\n<li><code>var</code> - outdated, may or may not be reassigned, scoped to function. can be not just reassigned, but also redeclared!</li>\n<li>a variable will always evaluate to the value it contains regardless of how it was declared</li>\n</ul>\n</li>\n<li>\n<p>Explain the difference between <code>const</code>, <code>let</code>, and <code>var</code> declarations</p>\n<ul>\n<li>\n<p><code>var</code> is function scoped—so if you declare it anywhere in a function, the declaration (but not assignment) is \"hoisted\"</p>\n<ul>\n<li>so it will exist in memory as \"undefined\" which is bad and unpredictable</li>\n</ul>\n</li>\n<li><code>var</code> will also allow you to redeclare a variable, while <code>let</code> or <code>const</code> will raise a syntax error. you shouldn't be able to do that!</li>\n<li><code>const</code> won't let you reassign a variable, but if it points to a mutable object, you will still be able to change the value by mutating the object</li>\n<li>block-scoped variables allow new variables with the same name in new scopes</li>\n<li>block-scoped still performs hoisting of all variables within the block, but it doesn't initialize to the value of <code>undefined</code> like <code>var</code> does, so it throws a specific reference error if you try to access the value before it has been declared</li>\n<li>\n<p>if you do not use <code>var</code> or <code>let</code> or <code>const</code> when initializing, it will be declared as global—THIS IS BAD</p>\n<ul>\n<li>if you assign a value without a declaration, it exists in the global scope (so then it would be accessible by all outer scopes, so bad). however, there's no hoisting, so it doesn't exist in the scope until after the line is run</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Predict the evaluation of code that utilizes function scope, block scope, lexical scope, and scope chaining</p>\n<ul>\n<li>scope of a program means the set of variables that are available for use within the program</li>\n<li>\n<p>global scope is represented by the <code>window</code> object in the browser and the <code>global</code> object in Node.js</p>\n<ul>\n<li>global variables are available everywhere, and so increase the risk of name collisions</li>\n</ul>\n</li>\n<li>\n<p>local scope is the set of variables available for use within the function</p>\n<ul>\n<li>when we enter a function, we enter a new scope</li>\n<li>includes functions arguments, local variables declared inside function, and any variables that were already declared when the function is defined (hmm about that last one)</li>\n</ul>\n</li>\n<li>for blocks (denoted by curly braces <code>{}</code>, as in conditionals or <code>for</code> loops), variables can be block scoped</li>\n<li>\n<p>inner scope does not have access to variables in the outer scope</p>\n<ul>\n<li>scope chaining—if a given variable is not found in immediate scope, javascript will search all accessible outer scopes until variable is found</li>\n<li>so an inner scope can access outer scope variables</li>\n<li>but an outer scope can never access inner scope variables</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Define an arrow function</p>\n<p>```javascript</p>\n<p>let arrowFunction = (param1, param2) => {</p>\n<p>let sum = param1 + param2;</p>\n<p>return sum;</p>\n<p>}</p>\n</li>\n</ul>\n<p>// with 1 param you can remove parens around parameters let arrowFunction = param => { param += 1; return param; }</p>\n<p>// if your return statement is one line, you can use implied return let arrowFunction = param => param + 1;</p>\n<p>// you don't have to assign to variable, can be anonymous // if you never need to use it again param => param + 1;</p>\n<p>```</p>\n<ul>\n<li>\n<p>Given an arrow function, deduce the value of <code>this</code> without executing the code</p>\n<ul>\n<li>arrow functions are automatically bound to the context they were declared in</li>\n<li>unlike regular function which use the context they are invoked in (unless they have been bound using <code>Function#bind</code>)</li>\n<li>if you implement an arrow function as a method in an object the context it will be bound to is NOT the object itself, but the global context</li>\n<li>\n<p>so you can't use an arrow function to define a method directly</p>\n<p>```javascript</p>\n<p>let obj = {</p>\n<p>name: \"my object\",</p>\n<p>unboundFunc: function () {</p>\n<p>return this.name;</p>\n<p>// this function will be able to be called on different objects</p>\n<p>},</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3></h3>\n<p>boundToGlobal: () => { return this.name; // this function, no matter how you call it, will be called // on the global object, and it cannot be rebound // this is because it was defined using arrow syntax },</p>\n<pre><code class=\"language-javascript\">makeFuncBoundToObj: function () {\n    return () => {\n        return this.name;\n    }\n    // this function will return a function that will be bound\n    // to the object where we call the outer method\n    // because the arrow syntax is nested inside one of this\n    // function's methods, it cannot be rebound\n},\n\nmakeUnboundFunc: function () {\n    return function () {\n        return this.name;\n    }\n    //this function will return a function that will still be unbound\n},\n\nimmediatelyInvokedFunc: function () {\n    return this.name;\n}(), // this property will be set to the return value of this anonymous function,\n// which is invoked during the object definition;\n// basically, it's a way to check the context inside of an object, at this moment\n\ninnerObj: {\n    name: \"inner object\",\n    innerArrowFunc: () =>  {\n        return this.name;\n    } // the context inside a nested object is not the parent, it's still\n    // the global object. entering an object definition doesn't change the context\n},\n\n\nlet otherObj = { name: \"my other object\" }\n// call unboundFunc on obj, we get \"my object\" console.log(\"unboundFunc: \", obj.unboundFunc()); // => \"my object\" // assign unboundFunc to a variable and call it let newFunc = obj.unboundFunc; // this newFunc will default to being called on global object console.log(\"newFunc: \",newFunc()); // => undefined // but you could bind it directly to a different object if you wanted console.log(\"newFunc: \", newFunc.bind(otherObj)()); // \"my other object\"\n// meanwhile, obj.boundToGlobal will only ever be called on global object console.log(\"boundToGlobal: \", obj.boundToGlobal()); //=> undefined let newBoundFunc = obj.boundToGlobal; console.log(\"newBoundFunc: \", newBoundFunc()); // => undefined // even if you try to directly bind to another object, it won't work! console.log(\"newBoundFunc: \", newBoundFunc.bind(otherObj)()); // => undefined\n// let's make a new function that will always be bound to the context // where we call our function maker let boundFunc = obj.makeFuncBoundToObj();// note that we're invoking, not just assigning console.log(\"boundFunc: \", boundFunc()); // => \"my object\" // we can't rebind this function console.log(\"boundFunc: \", boundFunc.bind(otherObj)()) // =>\"my object\"\n// but if I call makeFuncBoundToObj on another context // the new bound function is stuck with that other context let boundToOther = obj.makeFuncBoundToObj.bind(otherObj)(); console.log(\"boundToOther: \", boundToOther()); // => \"my other object\" console.log(\"boundToOther: \", boundToOther.bind(obj)()) // \"my other object\"\n// the return value of my immediately invoked function // shows that the context inside of the object is the // global object, not the object itself // context only changes inside a function that is called // on an object console.log(\"immediatelyInvokedFunc: \", obj.immediatelyInvokedFunc); // => undefined\n// even though we're inside a nested object, the context is // still the same as it was outside the outer object // in this case, the global object console.log(\"innerArrowFunc: \", obj.innerObj.innerArrowFunc()); // => undefined\n</code></pre>\n<p>}</p>\n<pre><code class=\"language-javascript\">- Implement a closure and explain how the closure effects scope\n   - a closure is \"the combination of a function and the lexical environment within which that function was declared\"\n      - alternatively, \"when an inner function uses or changes variables in an outer function\"\n   - closures have access to any variables within their own scope + scope of outer functions + global scope — the set of all these available variables is \"lexical environemnt\"\n   - closure keeps reference to all variables **even if the outer function has returned**\n      - each function has a private mutable state that cannot be accessed externally\n      - the inner function will maintain a reference to the scope in which it was declared. so it has access to variables that were initialized in any outer scope—even if that scope\n      - if a variable exists in the scope of what could have been accessed by a function (e.g. global scope, outer function, etc), does that variable wind up in the closure even if it never got accessed?\n      - if you change the value of a variable (e.g. i++) you will change the value of that variable in the scope that it was declared in\n\n\n```javascript\nfunction createCounter() {\n   // this function starts a counter at 0, then returns a\n   // new function that can access and change that counter\n   //\n   // each new counter you create will have a single internal\n   // state, that can be changed only by calling the function.\n   // you can't access that state from outside of the function,\n   // even though the count variable in question is initialized\n   // by the outer function, and it remains accessible to the\n   // inner function after the outer function returns.\n   let count = 0;\n   return function() {\n      count ++;\n      return count;\n   }\n}\n\nlet counter = createCounter();\nconsole.log(counter()); //=> 1\nconsole.log(counter()); //=> 2\n// so the closure here comes into play because\n// an inner function is accessing and changing\n// a variable from an outer function\n\n// the closure is the combination of the counter\n// function and the all the variables that existed\n// in the scope that it was declared in. because\n// inner blocks/functions have access to outer\n// scopes, that includes the scope of the outer\n// function.\n\n// so counter variable is a closure, in that\n// it contains the inner count value that was\n// initialized by the outer createCounter() function\n// count has been captured or closed over\n\n// this state is private, so if i run createCounter again\n// i get a totally separate count that doesn't interact\n// with the previous one and each of the new functions\n// will have their own internal state based on the\n// initial declaration in the now-closed outer function\n\nlet counter2 = createCounter();\nconsole.log(counter2()); // => 1\n\n// if i set a new function equal to my existing counter\n// the internal state is shared with the new function\nlet counter3 = counter2;\nconsole.log(counter3());\n</code></pre>\n<ul>\n<li>\n<p>Define a method that references <code>this</code> on an object literal</p>\n<ul>\n<li>\n<p>when we use <code>this</code> in a method it refers to the object that the method is invoked on</p>\n<ul>\n<li>it will let you access other pieces of information from within that object, or even other methods</li>\n<li>method style invocation - <code>object.method(args)</code> (e.g. built in examples like <code>Array#push</code>, or <code>String#toUpperCase</code>)</li>\n</ul>\n</li>\n<li>context is set every time we invoke a function</li>\n<li>function style invocation sets the context to the global object no matter what</li>\n<li>being inside an object does not make the context that object! you still have to use method-style invocation</li>\n</ul>\n</li>\n<li>\n<p>Utilize the built in <code>Function#bind</code> on a callback to maintain the context of this</p>\n<ul>\n<li>when we call bind on a function, we get an exotic function back—so the context will always be the same for that new function</li>\n</ul>\n<pre><code class=\"language-text\">let cat = {\npurr: function () {\nconsole.log(\"meow\");\n},\npurrMore: function () {\nthis.purr();\n},\n};\nlet sayMeow = cat.purrMore; console.log(sayMeow()); // TypeError: this.purr is not a function\n\n\n// we can use the built in Function.bind to ensure our context, our this, // is the cat object let boundCat = sayMeow.bind(cat);\nboundCat(); // prints \"meow\"\n</code></pre>\n<p>``</p>\n</li>\n</ul>\n<h3></h3>\n<h3></h3>\n<pre><code class=\"language-javascript\">   - `bind` can also work with arguments, so you can have a version of a function with particular arguments and a particular context. the first arg will be the context aka the `this` you want it to use. the next arguments will be the functions arguments that you are binding\n      - if you just want to bind it to those arguments in particular, you can use `null` as the first argument, so the context won't be bound, just the arguments\n- Given a code snippet, identify what `this` refers to\n   - important to recognize the difference between scope and context\n      - scope works like a dictionary that has all the variables that are available within a given block, plus a pointer back the next outer scope (which itself has pointers to new scopes until you reach the global scope. so you can think about a whole given block's scope as a kind of linked list of dictionaries) (also, this is not to say that scope is actually implemented in this way, that is just the schema that i can use to understand it)\n      - context refers to the value of the `this` keyword\n   - the keyword `this` exists in every function and it evaluates to the object that is currently invoking that function\n   - so the context is fairly straightforward when we talk about methods being called on specific objects\n   - you could, however, call an object's method on something other than that object, and then this would refer to the context where/how it was called, e.g.\n```javascript\nlet dog = {\n   name: \"Bowser\",\n   changeName: function () {\n      this.name = \"Layla\";\n  },\n};\n\n// note this is **not invoked** - we are assigning the function itself\nlet change = dog.changeName;\nconsole.log(change()); // undefined\n\n// our dog still has the same name\nconsole.log(dog); // { name: 'Bowser', changeName: [Function: changeName] }\n\n// instead of changing the dog we changed the global name!!!\nconsole.log(this); // Object [global] {etc, etc, etc,  name: 'Layla'}\n</code></pre>\n<ul>\n<li>\n<p>CALLING SOMETHING IN THE WRONG CONTEXT CAN MESS YOU UP!</p>\n<ul>\n<li>could throw an error if it expects this to have some other method or whatever that doesn't exist</li>\n<li>you could also overwrite values or assign values to exist in a space where they should not exist</li>\n</ul>\n</li>\n<li>\n<p>if you call a function as a callback, it will set <code>this</code> to be the outer function itself, even if the function you were calling is a method that was called on a particular object</p>\n<pre><code class=\"language-text\">let cat = {\npurr: function () {\nconsole.log(\"meow\");\n},\npurrMore: function () {\nthis.purr();\n},\n};\nglobal.setTimeout(cat.purrMore, 5000); // 5 seconds later: TypeError: this.purr is not a function\n</code></pre>\n</li>\n</ul>\n<p>we can use strict mode with <code>\"use strict\";</code> this will prevent you from accessing the global object with <code>this</code> in functions, so if you try to call <code>this</code> in the global context and change a value, you will get a type error, and the things you try to access will be undefined</p>\n<h3></h3>\n<p>let sayMeow = cat.purrMore; console.log(sayMeow()); // TypeError: this.purr is not a function</p>\n<p>// we can use the built in Function.bind to ensure our context, our <code>this</code>, // is the cat object let boundCat = sayMeow.bind(cat);</p>\n<p>boundCat(); // prints \"meow\"</p>\n<pre><code class=\"language-text\">   - `bind` can also work with arguments, so you can have a version of a function with particular arguments and a particular context. the first arg will be the context aka the `this` you want it to use. the next arguments will be the functions arguments that you are binding\n      - if you just want to bind it to those arguments in particular, you can use `null` as the first argument, so the context won't be bound, just the arguments\n- Given a code snippet, identify what `this` refers to\n   - important to recognize the difference between scope and context\n      - scope works like a dictionary that has all the variables that are available within a given block, plus a pointer back the next outer scope (which itself has pointers to new scopes until you reach the global scope. so you can think about a whole given block's scope as a kind of linked list of dictionaries) (also, this is not to say that scope is actually implemented in this way, that is just the schema that i can use to understand it)\n      - context refers to the value of the `this` keyword\n   - the keyword `this` exists in every function and it evaluates to the object that is currently invoking that function\n   - so the context is fairly straightforward when we talk about methods being called on specific objects\n   - you could, however, call an object's method on something other than that object, and then this would refer to the context where/how it was called, e.g.\n```javascript\nlet dog = {\n   name: \"Bowser\",\n   changeName: function () {\n      this.name = \"Layla\";\n  },\n};\n\n// note this is **not invoked** - we are assigning the function itself\nlet change = dog.changeName;\nconsole.log(change()); // undefined\n\n// our dog still has the same name\nconsole.log(dog); // { name: 'Bowser', changeName: [Function: changeName] }\n\n// instead of changing the dog we changed the global name!!!\nconsole.log(this); // Object [global] {etc, etc, etc,  name: 'Layla'}\n</code></pre>\n<ul>\n<li>\n<p>CALLING SOMETHING IN THE WRONG CONTEXT CAN MESS YOU UP!</p>\n<ul>\n<li>could throw an error if it expects this to have some other method or whatever that doesn't exist</li>\n<li>you could also overwrite values or assign values to exist in a space where they should not exist</li>\n</ul>\n</li>\n<li>\n<p>if you call a function as a callback, it will set <code>this</code> to be the outer function itself, even if the function you were calling is a method that was called on a particular object</p>\n<p>```javascript</p>\n<p>let cat = {</p>\n<p>purr: function () {</p>\n<p>console.log(\"meow\");</p>\n<p>},</p>\n<p>purrMore: function () {</p>\n<p>this.purr();</p>\n<p>},</p>\n<p>};</p>\n</li>\n</ul>\n<p>global.setTimeout(cat.purrMore, 5000); // 5 seconds later: TypeError: this.purr is not a function</p>\n<p>```</p>\n<ul>\n<li>we can use strict mode with <code>\"use strict\";</code> this will prevent you from accessing the global object with <code>this</code> in functions, so if you try to call <code>this</code> in the global context and change a value, you will get a type error, and the things you try to access will be undefined</li>\n</ul>\n<h3>POJOs</h3>\n<h4>1. Label variables as either Primitive vs. Reference</h4>\n<p>Javascript considers most data types to be 'primitive', these data types are immutable, and are passed by value. The more complex data types: Array and Object are mutable, are considered 'reference' data types, and are passed by reference.</p>\n<ul>\n<li>Boolean - Primitive</li>\n<li>Null - Primitive</li>\n<li>Undefined - Primitive</li>\n<li>Number - Primitive</li>\n<li>String - Primitive</li>\n<li>Array - Reference</li>\n<li>Object - Reference</li>\n<li>Function - Reference</li>\n</ul>\n<h4>2. Identify when to use . vs [] when accessing values of an object</h4>\n<pre><code class=\"language-javascript\">let obj = { one: 1, two: 2 };\n\n// Choose the square brackets property accessor when the property name is determined at\n// runtime, or if the property name is not a valid identifier\nlet myKey = 'one';\nconsole.log(obj[myKey]);\n\n// Choose the dot property accessor when the property name is known ahead of time.\nconsole.log(obj.two);\n</code></pre>\n<h4>3. Write an object literal with a variable key using interpolation</h4>\n<pre><code class=\"language-javascript\">let keyName = 'two';\n\n// If the key is not known, you can use an alternative `[]` syntax for\n// object initialization only\nlet obj2 = { [keyName]: 2 };\nconsole.log(obj2);\n</code></pre>\n<h4>4. Use the obj[key] !== undefined pattern to check if a given variable that contains a key exists in an object</h4>\n<pre><code class=\"language-javascript\">function doesKeyExist(obj, key) {\n    // obj[key] !== undefined\n    // or:\n    return key in obj;\n}\n\nlet course = { bootcamp: 'Lambda', course: 'Bootcamp Prep' };\nconsole.log(doesKeyExist(course, 'course')); // => true\nconsole.log(doesKeyExist(course, 'name')); // => false\n</code></pre>\n<h4>5. Utilize Object.keys and Object.values in a function</h4>\n<pre><code class=\"language-javascript\">function printKeys(object) {\n    return Object.keys(object);\n}\n\nfunction printValues(object) {\n    return Object.values(object);\n}\n\nconsole.log(printKeys({ dog: 'Strelka', dog2: 'Belka' }));\nconsole.log(printValues({ dog: 'Strelka', dog2: 'Belka' }));\n</code></pre>\n<h4>6. Iterate through an object using a for in loop</h4>\n<pre><code class=\"language-javascript\">let player = { name: 'Sergey', skill: 'hockey' };\n\nfor (let key in player) {\n    console.log(key, player[key]);\n}\n\nconsole.log(Object.entries(player));\n</code></pre>\n<h4>7. Define a function that utilizes ...rest syntax to accept an arbitrary number of arguments</h4>\n<pre><code class=\"language-javascript\">function restSum(...otherNums) {\n    let sum = 0;\n    console.log(otherNums);\n    otherNums.forEach(function (num) {\n        sum += num;\n    });\n\n    return sum;\n}\n\nconsole.log(restSum(3, 5, 6)); // => 14\nconsole.log(restSum(1, 2, 3, 4, 5, 6, 7, 8, 9)); // => 45\nconsole.log(restSum(0)); // => 0\n</code></pre>\n<h4>8. Use ...spread syntax for Object literals and Array literals</h4>\n<pre><code class=\"language-javascript\">let numArray = [1, 2, 3];\nlet moreNums = [...numArray, 4, 5, 6];\n\nconsole.log(moreNums);\n\nlet shoe = { color: 'red', size: 10 };\nlet newShoe = { ...shoe, brand: 'Nike', size: 12 };\nconsole.log(newShoe);\nnewShoe.color = 'black';\nconsole.log(newShoe);\n\nconsole.log(shoe);\n</code></pre>\n<h4>9. Destructure an array to reference specific elements</h4>\n<pre><code class=\"language-javascript\">let arr = ['one', 'two', 'three'];\n\nlet [first] = arr;\nconsole.log(first);\n</code></pre>\n<h4>10. Destructure an object to reference specific values</h4>\n<pre><code class=\"language-javascript\">let me = {\n    name: 'Ian',\n    instruments: ['bass', 'synth', 'guitar'],\n    siblings: {\n        brothers: ['Alistair'],\n        sisters: ['Meghan']\n    }\n};\n\nlet {\n    name,\n    instruments: musical_instruments,\n    siblings: { sisters }\n} = me;\n\nconsole.log(name);\nconsole.log(musical_instruments);\nconsole.log(sisters);\n</code></pre>\n<h4>11. Write a function that accepts a string as an argument and returns an object representing the count of each character in the array</h4>\n<pre><code class=\"language-javascript\">function charCount(inputString) {\n    let res = inputString.split('').reduce(function (accum, el) {\n        if (el in accum) {\n            accum[el] = accum[el] + 1;\n        } else {\n            accum[el] = 1;\n        }\n        return accum;\n    }, {});\n    return res;\n}\n\nconsole.log(charCount('aaabbbeebbcdkjfalksdfjlkasdfasdfiiidkkdingds'));\n</code></pre>\n<h3></h3>\n<h3>Review of Concepts</h3>\n<h4>1. Identify the difference between const, let, and var declarations</h4>\n<h4>2. Explain the difference between const, let, and var declarations</h4>\n<pre><code class=\"language-javascript\">var a = 'a';\n</code></pre>\n<ul>\n<li><code>var</code> is the historical keyword used for variable declaration.</li>\n<li><code>var</code> declares variables in function scope, or global scope if not inside a function.</li>\n<li>We consider <code>var</code> to be <em>deprecated</em> and it is never used in this course.</li>\n</ul>\n<pre><code class=\"language-javascript\">let b = 'b';\n</code></pre>\n<ul>\n<li><code>let</code> is the keyword we use most often for variable declaration.</li>\n<li><code>let</code> declares variables in block scope.</li>\n<li>variables declared with <code>let</code> are re-assignable.</li>\n</ul>\n<pre><code class=\"language-javascript\">const c = 'c';\n</code></pre>\n<ul>\n<li><code>const</code> is a specialized form of <code>let</code> that can only be used to <strong>initialize</strong> a variable.</li>\n<li>Except when it is declared, you cannot assign to a <code>const</code> variable.</li>\n<li><code>const</code> scopes variables the same way that <code>let</code> does.</li>\n</ul>\n<h4>3. Predict the evaluation of code that utilizes function scope, block scope, lexical scope, and scope chaining</h4>\n<p>Consider this <code>run</code> function, inside which <code>foo</code> and <code>bar</code> have <code>function scope</code>. <code>i</code> and <code>baz</code> are scoped to the block expression.</p>\n<pre><code class=\"language-javascript\">// function and block scope in this example\nfunction run() {\n    var foo = 'Foo';\n    let bar = 'Bar';\n\n    console.log(foo, bar);\n\n    {\n        console.log(foo);\n        let baz = 'Bazz';\n        console.log(baz);\n    }\n\n    console.log(baz); // ReferenceError\n}\n\nrun();\n</code></pre>\n<p>Notice that referencing <code>baz</code> from outside it's block results in JavaScript throwing a ReferenceError.</p>\n<p>Consider this <code>run</code> function, inside of which <code>foo</code> has <code>function scope</code>.</p>\n<pre><code class=\"language-javascript\">function run() {\n    console.log(foo); // undefined\n    var foo = 'Foo';\n    console.log(foo); // Foo\n}\n\nrun();\n</code></pre>\n<p>Consider this <code>func1</code> function and it's nested scopes.</p>\n<pre><code class=\"language-javascript\">// global scope\nfunction func1(arg1) {\n    // func1 scope\n\n    return function func2(arg2) {\n        // func2 scope\n\n        return function func3(arg3) {\n            // func3 scope\n\n            console.log(arg1, arg2, arg3);\n        };\n    };\n}\n</code></pre>\n<h4>6. Implement a closure and explain how the closure effects scope</h4>\n<pre><code class=\"language-javascript\">const adder = (arg1) => {\n    return (arg2) => {\n        return arg1 + arg2;\n    };\n};\n\nconst func2 = adder(2);\nconst result = func2(2);\nconsole.log(result); // => 4;\n</code></pre>\n<h4>4. Define an arrow function</h4>\n<pre><code class=\"language-javascript\">const returnValue = (val) => val;\n</code></pre>\n<p>This simple construct will create a function that accepts <code>val</code> as a parameter, and returns <code>val</code> immediately. We do not need to type <code>return val</code>, because this is a single-line function.</p>\n<p>Identically, we could write</p>\n<pre><code class=\"language-javascript\">const returnValue = (val) => {\n    return val;\n};\n</code></pre>\n<h4>5. Given an arrow function, deduce the value of <code>this</code> without executing the code</h4>\n<pre><code class=\"language-javascript\">function fDAdder(arr) {\n    console.log(this);\n\n    return arr.reduce((acc, ele) => {\n        return acc + ele;\n    });\n}\n\nfDAdder([1, 2, 4, 6]);\n</code></pre>\n<p>If we use a <em>function declaration</em> style function, the <code>this</code> variable is set to the <code>global</code> object (i.e. <code>Object [global]</code> in Node.JS and <code>Window</code> in your browser).</p>\n<pre><code class=\"language-javascript\">const adder = (arr) => {\n    console.log(this);\n    arr.reduce((acc, ele) => (sum += ele));\n};\nadder([1, 2, 4, 6]);\n</code></pre>\n<p>In this example, we use a <em>fat arrow</em> style function. Note that when we declare a funciton like this <code>this</code> becomes</p>\n<h4>7. Define a method that references this on an object literal</h4>\n<pre><code class=\"language-javascript\">const pokemon = {\n    firstname: 'Pika',\n    lastname: 'Chu',\n    getPokeName: function () {\n        const fullname = `${this.firstname} ${this.lastname}`;\n        return fullname;\n    }\n};\n\nconsole.log(pokemon.getPokeName());\n</code></pre>\n<h4>8. Utilize the built in Function#bind on a callback to maintain the context of <code>this</code></h4>\n<pre><code class=\"language-javascript\">const pokemon = {\n    firstname: 'Pika',\n    lastname: 'Chu',\n    getPokeName: function () {\n        const fullname = `${this.firstname} ${this.lastname}`;\n        return fullname;\n    }\n};\n\nconst logPokemon = pokemon.getPokename.bind(pokemon);\n\nlogPokemon('sushi', 'algorithms'); // Pika Chu loves sushi and algorithms\n</code></pre>\n<h4>9. Given a code snippet, identify what <code>this</code> refers to</h4>\n<pre><code class=\"language-javascript\">function Person(name) {\n    // this.name = name;\n    // let that = this;\n\n    setTimeout(function () {\n        // console.log(this); // => Window\n        // console.log(that); // => [Function] => Person\n        // this.sayName(); // => no method error\n        that.sayName();\n    }, 1000);\n}\n\nPerson.prototype.sayName = function () {\n    console.log(this.name);\n};\n\nconst jane = new Person('Jane');\n</code></pre>"},{"url":"/docs/articles/fs-module/","relativePath":"docs/articles/fs-module.md","relativeDir":"docs/articles","base":"fs-module.md","name":"fs-module","frontmatter":{"title":"Fs-Module","sections":[],"seo":{"title":"","description":"Fs-Module","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<p>The <code>fs</code> module provides a lot of very useful functionality to access and interact with the file system.</p>\n<p>There is no need to install it. Being part of the Node.js core, it can be used by simply requiring it:</p>\n<pre><code class=\"language-js\">const fs = require('fs');\n</code></pre>\n<p>Once you do so, you have access to all its methods, which include:</p>\n<ul>\n<li><code>fs.access()</code>: check if the file exists and Node.js can access it with its permissions</li>\n<li><code>fs.appendFile()</code>: append data to a file. If the file does not exist, it's created</li>\n<li><code>fs.chmod()</code>: change the permissions of a file specified by the filename passed. Related: <code>fs.lchmod()</code>, <code>fs.fchmod()</code></li>\n<li><code>fs.chown()</code>: change the owner and group of a file specified by the filename passed. Related: <code>fs.fchown()</code>, <code>fs.lchown()</code></li>\n<li><code>fs.close()</code>: close a file descriptor</li>\n<li><code>fs.copyFile()</code>: copies a file</li>\n<li><code>fs.createReadStream()</code>: create a readable file stream</li>\n<li><code>fs.createWriteStream()</code>: create a writable file stream</li>\n<li><code>fs.link()</code>: create a new hard link to a file</li>\n<li><code>fs.mkdir()</code>: create a new folder</li>\n<li><code>fs.mkdtemp()</code>: create a temporary directory</li>\n<li><code>fs.open()</code>: set the file mode</li>\n<li><code>fs.readdir()</code>: read the contents of a directory</li>\n<li><code>fs.readFile()</code>: read the content of a file. Related: <code>fs.read()</code></li>\n<li><code>fs.readlink()</code>: read the value of a symbolic link</li>\n<li><code>fs.realpath()</code>: resolve relative file path pointers (<code>.</code>, <code>..</code>) to the full path</li>\n<li><code>fs.rename()</code>: rename a file or folder</li>\n<li><code>fs.rmdir()</code>: remove a folder</li>\n<li><code>fs.stat()</code>: returns the status of the file identified by the filename passed. Related: <code>fs.fstat()</code>, <code>fs.lstat()</code></li>\n<li><code>fs.symlink()</code>: create a new symbolic link to a file</li>\n<li><code>fs.truncate()</code>: truncate to the specified length the file identified by the filename passed. Related: <code>fs.ftruncate()</code></li>\n<li><code>fs.unlink()</code>: remove a file or a symbolic link</li>\n<li><code>fs.unwatchFile()</code>: stop watching for changes on a file</li>\n<li><code>fs.utimes()</code>: change the timestamp of the file identified by the filename passed. Related: <code>fs.futimes()</code></li>\n<li><code>fs.watchFile()</code>: start watching for changes on a file. Related: <code>fs.watch()</code></li>\n<li><code>fs.writeFile()</code>: write data to a file. Related: <code>fs.write()</code></li>\n</ul>\n<p>One peculiar thing about the <code>fs</code> module is that all the methods are asynchronous by default, but they can also work synchronously by appending <code>Sync</code>.</p>\n<p>For example:</p>\n<ul>\n<li><code>fs.rename()</code></li>\n<li><code>fs.renameSync()</code></li>\n<li><code>fs.write()</code></li>\n<li><code>fs.writeSync()</code></li>\n</ul>\n<p>This makes a huge difference in your application flow.</p>\n<blockquote>\n<p>Node.js 10 includes <a href=\"https://nodejs.org/api/fs.html#fs_fs_promises_api\">experimental support</a> for a promise based API</p>\n</blockquote>\n<p>For example let's examine the <code>fs.rename()</code> method. The asynchronous API is used with a callback:</p>\n<pre><code class=\"language-js\">const fs = require('fs');\n\nfs.rename('before.json', 'after.json', (err) => {\n    if (err) {\n        return console.error(err);\n    }\n\n    //done\n});\n</code></pre>\n<p>A synchronous API can be used like this, with a try/catch block to handle errors:</p>\n<pre><code class=\"language-js\">const fs = require('fs');\n\ntry {\n    fs.renameSync('before.json', 'after.json');\n    //done\n} catch (err) {\n    console.error(err);\n}\n</code></pre>\n<p>The key difference here is that the execution of your script will block in the second example, until the file operation succeeded.</p>"},{"url":"/docs/articles/","relativePath":"docs/articles/index.md","relativeDir":"docs/articles","base":"index.md","name":"index","frontmatter":{"title":"Articles","weight":2,"excerpt":"resources","seo":{"title":"","description":"This section is similar to a blog but is more technical in nature and time invariant with regard to content.","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<div id=\"search\"></div>\n<div id=\"search\" />\n<p>|<div id=\"search\"></div></p>\n<div id=\"search\" />\n<div id=\"search\"></div>\n<div id=\"search\" />\n<p><span id=\"search\"></span></p>"},{"url":"/docs/articles/http/","relativePath":"docs/articles/http.md","relativeDir":"docs/articles","base":"http.md","name":"http","frontmatter":{"title":"The HTTP Protocol","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h2>The HTTP Protocol\n\n</h2>\n<ul>\n<li>Requires: a connection between client and server</li>\n<li>Stateless: no login process, each request is independent</li>\n<li>Simple format: request header, blank line, possible payload</li>\n<li>Symmetrical: allows data to be sent and recieved</li>\n<li>Very easy to implement but scales very well</li>\n</ul>\n<h2>Example HTTP Request</h2>\n<p>Note lines folded for display.</p>\n<p>What do each of these headers mean? Which are required? Many are defined in the <a href=\"ftp://ftp.isi.edu/in-notes/rfc2616.txt\">HTTP standard</a> but others can be defined via the HTTP extension framework.</p>\n<h2>Example HTTP Response</h2>\n<h2>Example HTTP POST Request</h2>\n<p>Note lines folded for display.</p>\n<p>This is a POST request, note how the data is encoded in the request body.</p>\n<h2>Example HTTP GET Request</h2>\n<p>Note lines folded for display.</p>\n<p>This is the same form submitted via a GET request, here the data is encoded in request URL. Note also the If-Modified-Since header in this request, sent because my browser has just asked for the same resource.</p>\n<h2>HTTP Redirect</h2>\n<p>Alternately</p>\n<p>The HTTP redirect is a server response that can be used to indicate that a resource has moved to a new location. An alternate is to include the above meta tag in a page header to force a redirect from the current page.</p>\n<h2>HTTP Verbs</h2>\n<ul>\n<li>GET - get a resource, <em>Idempotent</em></li>\n<li>POST - send some data to a resource</li>\n<li>HEAD - get headers for a resource</li>\n<li>PUT - create a new resource</li>\n<li>DELETE - delete a resource</li>\n</ul>\n<h2>Common HTTP Response Status Codes</h2>\n<p>Some notable response codes:</p>\n<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#2xx_Success\">200 OK</a> - Request succeeded and everything went well</li>\n<li><a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_Redirection\">301 Moved Permanently</a> - Requested resource has moved and all future requests should be made to new location</li>\n<li><a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_Error\">403 Forbidden</a> - Response refused by server (even if request is valid)</li>\n<li><a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_Error\">404 Not Found</a> - Server could not find requested resource (though it may be available in the future)</li>\n<li><a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#5xx_Server_Error\">500 Internal Server Error</a> - Generic error message response when server encountered an error</li>\n</ul>\n<p>See also: <a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">full list of HTTP status codes</a></p>\n<h2>Resources</h2>\n<ul>\n<li>Use <a href=\"https://addons.mozilla.org/en-US/firefox/addon/3829\">Live HTTP Headers</a> in Firefox to view headers of requests that you make. Also available as a <a href=\"https://chrome.google.com/webstore/detail/live-http-headers/iaiioopjkcekapmldfgbebdclcnpgnlo\">Chrome Extension</a>.</li>\n<li>Similarly, in Google Chrome, the <a href=\"http://www.chromium.org/devtools/google-chrome-developer-tools-tutorial#resources\">Resources panel</a> in the Developer tools allows you to view the request headers and content for each request that was made when you're looking at a page.</li>\n<li>Wikipedia's <a href=\"http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\">entry on HTTP</a> gives a good overview of the protocol.</li>\n</ul>"},{"url":"/docs/articles/install/","relativePath":"docs/articles/install.md","relativeDir":"docs/articles","base":"install.md","name":"install","frontmatter":{"title":"Install","excerpt":"Web-Dev-Hubis a Unibit theme created for project documentations. You can use it for your project.","seo":{"title":"Install","description":"This is the Install page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Install","keyName":"property"},{"name":"og:description","value":"This is the Install page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Install"},{"name":"twitter:description","value":"This is the Install page"}]},"template":"docs"},"html":"<p>Node.js can be installed in different ways. This post highlights the most common and convenient ones.</p>\n<p>Official packages for all the major platforms are available at <a href=\"https://nodejs.org/en/download/\">https://nodejs.org/en/download/</a>.</p>\n<p>One very convenient way to install Node.js is through a package manager. In this case, every operating system has its own.</p>\n<p>On macOS, <a href=\"https://brew.sh/\">Homebrew</a> is the de-facto standard, and - once installed - allows you to install Node.js very easily, by running this command in the CLI:</p>\n<pre><code class=\"language-bash\">brew install node\n</code></pre>\n<p>Other package managers for Linux and Windows are listed in <a href=\"https://nodejs.org/en/download/package-manager/\">https://nodejs.org/en/download/package-manager/</a></p>\n<p><code>nvm</code> is a popular way to run Node.js. It allows you to easily switch the Node.js version, and install new versions to try and easily rollback if something breaks, for example.</p>\n<p>It is also very useful to test your code with old Node.js versions.</p>\n<p>See <a href=\"https://github.com/creationix/nvm\">https://github.com/creationix/nvm</a> for more information about this option.</p>\n<p>My suggestion is to use the official installer if you are just starting out and you don't use Homebrew already, otherwise, Homebrew is my favorite solution.</p>\n<p>In any case, when Node.js is installed you'll have access to the <code>node</code> executable program in the command line.</p>"},{"url":"/docs/articles/node-cli-args/","relativePath":"docs/articles/node-cli-args.md","relativeDir":"docs/articles","base":"node-cli-args.md","name":"node-cli-args","frontmatter":{"title":"where-is-npm-pack","weight":1,"excerpt":"How to find out where npm installs the packages","seo":{"title":"npm packages","description":"When you install a package using npm you can perform 2 types of installation:\na local install\na global install\n\nBy default, when you type an npm install command, like:\nthe package is installed in the current file tree, under the node_modules subfolder.\n","robots":[],"extra":[{"name":"og:description","value":"When you install a package using npm you can perform 2 types of installation:\na local install\na global install\n\nBy default, when you type an npm install command, like:\nthe package is installed in the current file tree, under the node_modules subfolder.\n","keyName":"property","relativeUrl":false}],"type":"stackbit_page_meta"},"template":"docs"},"html":"<p>When you install a package using npm you can perform 2 types of installation:</p>\n<ul>\n<li>a local install</li>\n<li>a global install</li>\n</ul>\n<p>By default, when you type an npm install command, like:</p>\n<p>the package is installed in the current file tree, under the node_modules subfolder.</p>\n<p>As this happens, npm also adds the lodash entry in the dependencies property of the package.json file present in the current folder.</p>\n<p>A global installation is performed using the -g flag:</p>\n<p>When this happens, npm won't install the package under the local folder, but instead, it will use a global location.</p>\n<p>Where, exactly?</p>\n<p>The npm root -g command will tell you where that exact location is on your machine.</p>\n<p>On macOS or Linux this location could be /usr/local/lib/node<em>modules. On Windows it could be C:\\Users\\YOU\\AppData\\Roaming\\npm\\node</em>modules</p>\n<p>If you use nvm to manage Node.js versions, however, that location would differ.</p>\n<p>I for example use nvm and my packages location was shown as /Users/joe/.nvm/versions/node/v8.9.0/lib/node_modules.</p>"},{"url":"/docs/articles/how-the-web-works/","relativePath":"docs/articles/how-the-web-works.md","relativeDir":"docs/articles","base":"how-the-web-works.md","name":"how-the-web-works","frontmatter":{"title":"How The Web Works","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h2>What is the World Wide Web?\n\n</h2>\n<p>Perhaps the first thing to establish in our discussion of the web is what exactly it is. This chapter will look in brief overview at the core technologies that go together to make the World Wide Web.</p>\n<p>We can start by differentiating the Internet and the World Wide Web. These are often confused because the Web is the main use that most people have for the Internet and a common web browser is called \"Internet Explorer\". However, we can properly distinguish between them. The Internet is a collection of inter-connected computers using the TCP/IP protocol to exchange information. The World Wide Web is a particular use of the Internet to exchange HTML web pages (and other documents) using the Hypertext Transfer Protocol (HTTP).</p>\n<p>Let's look briefly at the four basic ingredients of the Web:</p>\n<ul>\n<li>TCP/IP - is a low level message protocol that is used to transfer messages between computers on the Internet.</li>\n<li>HTTP - is used by a Web Client to make a request to a Web Server and for the server to return the response.</li>\n<li>URL - is a way of writing down the address of something on the Web so that a browser can work out where to get it from.</li>\n<li>HTML - is a language for writing web pages containing text, images and other content.</li>\n</ul>\n<p>Together, these four technologies allow a web client - the web browser on your computer - to fetch pages from a web server anywhere in the world that might contain links to other documents and so on. It's the links between documents that make this a <em>Web</em> and the Internet that allows it to be the <em>World Wide Web</em>.</p>\n<p>Let's look at each of these technologies in a little more detail; although we'll explore most of them a lot more throughout the rest of this book.</p>\n<h2>TCP/IP and DNS</h2>\n<p>TCP/IP, the Transmission Control Protocol/Internet Protocol, is the standard way of exchanging messages on the Internet - in fact it effectively defines what the Internet is: a network of computers communicating via TCP/IP. For our purposes, there's no need to have a deep understanding of the low level details of TCP/IP, though many of you will learn more about it if you study any networking topics. However there are a few higher level things that touch on how we use the Internet in the context of the World Wide Web.</p>\n<p>A <em>Protocol</em> in this sense is a formal standard for how two machines will talk to each other over a communications channel. It describes what messages are allowed and what they mean and how data is transferred over the network. Later, we'll look at HTTP which is a higher level protocol for web requests. TCP/IP deals with the low level exchange of data and doesn't really care what the content of that data is.</p>\n<p>The Internet is a collection of computer networks joined by physical network channels. Within an organisation, there may be a physical network based on the Ethernet standard (wired or wireless) which effectively connects all computers on the network to each other. Organisations connect to each other via DSL or cable connections. These <em>inter</em>-connected <em>net</em>works make up the Internet. The role of TCP/IP is to allow a computer within one organisation (your laptop) to establish a connection to a computer in another (a web server). Importantly, this connection is a <em>point-to-point</em> connection - like a private channel between the two computers, even though the data is carried by this shared network of networks.</p>\n<p>TCP/IP is a <em>packet oriented</em> protocol. To send a message, it is broken up into small chunks (packets) which are each addressed and sent over the network. The receiving computer intercepts these packets, notices that they are addressed to them, and re-assembles the original message. Packets can arrive out of order (or not at all) and TCP/IP defines what the two communicating computers should do in this case.</p>\n<p>Each computer on the network is assigned a unique <em>IP address</em> which is a 32 bit number usually expressed as four 8 bit digits separated by dots. For example 192.168.1.2 or 137.111.158.22. These numbers are used as the addresses of the packets sent around the Internet. Within an organisation, all computers will share the first part of their address; for example, all Macquarie University computers will have addresses starting with 137.111. This means that any packet sent from within Macquarie to an address in the range 137.111.x.x will find it's destination somewhere inside the organisation. However, if we send a packet to 143.119.160.16 (the NSW Government website) the network protocols need to know that this packet should be forwarded to the NSW Government network before it can be delivered. We can pretend that this all happens by magic (this isn't a networking course) and rest assured that a clever <em>network routing</em> algorithm will get the packets to where they need to go. As long as we know the IP address of the destination computer, we can establish a point-to-point channel and send data back and forth.</p>\n<p>Within your home you might have your own private network, often established by a wireless router that connects to your ADSL or cable service. While this router will have a proper IP address, the network it establishes in your home is a <em>private network</em> and will use one of two address ranges: 192.168.x.x or 10.10.x.x. Both of these are reserved for private use, so that my laptop and your printer might have the same IP address of 192.168.100.13. A trick called Network Address Translation (NAT) carried out by your router allows each of these devices to connect to the Internet through the router, even though they don't have a full IP address. Again, we don't need to worry about the details but sometimes it's useful to know how to communicate directly with devices on your own network, in which case you might start finding out about these private IP addresses.</p>\n<p>A significant issue with the success and ubiquity of the Internet is that we might run out of unique addresses. Since an IP address is a 32 bit number, that means there are only 4,294,967,296 unique addresses. If every computer, mobile phone, printer and electricity meter is to be connected to the Internet, the it's clear that more addresses will be needed. There are two responses to this. The first is that many of these devices share a single IP address (using NAT) which multiplies the number available significantly. THe second is a new standard called IPv6 (rather than IPv4 which I've described here) where addresses are 128 bits long. Most modern devices are able to use IPv6 addressing so the crisis is unlikely to hit us catastrophically.</p>\n<p>IP addresses give a unique identifier for each device but they aren't very easy to remember. We're used to giving the names of web-sites via names like www.nsw.gov.au or sales.example.com. These names are translated into numerical IP addresses via the Domain Name System (DNS) which works using a clever hierarchical algorithm. For example, to work out what sales.example.com means our local DNS server would look at the last part of the address and forward the query to a server that it knows is authoritative for all addresses ending in .com. The .com server may not know which IP address corresponds to sales.example.com so it sends the query on to the DNS server for example.com which will respond with the answer. As the result is passed back to the original DNS server, it is cached (remembered) so that it can be returned more quickly the next time it is requested.</p>\n<p>DNS allows an organisation to set up whatever names it needs and link those names to its servers. It's common to have the main web server called www.example.com but the same server could also be referred to as example.com, sales.example.com or test.example.com. We'll see later how this arrangement can be used to provide a lot of flexibility when setting up web servers.</p>\n<h2>HTTP</h2>\n<p>In 1991 Tim Berners-Lee invented the World Wide Web. He was building on the existing technology of the Internet that allowed computers to exchange information around the world. His invention consisted essentially of three things: the Hypertext Transfer Protocol (HTTP), the Universal Resource Locator (URL) and the Hypertext Markup Language (HTML). HTTP is the language that a web client (your browser) talks to a web server to ask for a page and get the response back. It's a protocol, just like TCP/IP, but it's a much higher level protocol and it's one that we need to understand very well as web programmers.</p>\n<p>HTTP requires that we first establish a point-to-point connection between a client (who is sending a request) and a server (who will fulfil the request if possible). This connection is usually via TCP/IP over the Internet but could also be over any other communication medium such as <a href=\"http://code.google.com/p/bt-http-server/\">bluetooth</a>. Once the connection is established, the conversation can begin.</p>\n<p>One of the important features of HTTP is that it is a simple, text based protocol. The request and response consist of a number of lines of text in a well defined format. Here is an example request that might be sent to a server:</p>\n<p>The first word in the request is always one of the defined <em>HTTP verbs</em> (most frequently GET, HEAD or POST, we'll explore these in more detail later). A GET request asks the server to return the given resource, in this case '/storefront.html' which is probably an HTML file stored somewhere on the server. The last part of the first line (HTTP/1.1) defines the version of the standard that we are using; there was a version 1.0 but most modern browsers will use 1.1. The remaining lines of the request include other <em>headers</em> that qualify the request in some way. The <em>Host</em> header is required and denotes the server that the request is being sent to. The Accept header defines what kinds of document we'd like in return; in this case, any kind of text document is ok. The request ends with a blank line, which is how the server knows that all headers have been received.</p>\n<p>The request is received and processed by the server and a response is sent back to the client containing the web page that was asked for. Again the format of the response is easy to understand:</p>\n<p>The first word of the response must be HTTP/1.1, the remainder of the first line contains a response code (200) and explanation (OK) in this case saying everything is fine, here's the page you asked for. The second header here defines the type of document being returned (it's an HTML page). There is then a blank line which ends the headers (as with the request) and the HTML content is then sent.</p>\n<p>A real request and response pair will have many more headers than this but their format follows this basic pattern: header lines followed by a blank line and an optional body. The point here is that HTTP is a very simple conversation between web client and server.</p>\n<p>One important feature of HTTP is that each request/response pair is independent of every other. This means that all the information about your request must be included in the request headers; the server doesn't remember anything you told it last time. This is one reason that HTTP and the web have been so successful. It is very easy to implement an HTTP server and it can be done on very small devices. This might be one of the reasons why the Web succeeded where other similar systems failed. Since the protocol is so simple, it was easy to write a web server and many people did. This meant that the web was used by many small groups to publish content, forming the groundswell that led to institutional and corporate adoption.</p>\n<p>We'll look at HTTP in more detail later, for now the take home message is:</p>\n<ul>\n<li>HTTP is a simple text based protocol</li>\n<li>The client (browser) sends a request to the server</li>\n<li>The server receives the request and returns a response</li>\n<li>The server doesn't need to remember the client - every request is independant.</li>\n<li>The simple nature of HTTP makes it easy to understand and makes writing web servers relatively easy.</li>\n</ul>\n<h2>Uniform Resource Locators: URL</h2>\n<p>Another part of Tim Berners-Lee's invention is the Uniform Resource Locator, URL. These days, URLs are ubiquitous. We see them on advertisments, on the TV, we send them to each other in email, even reference them in books and reports. Most organisations today will have at least one top-level URL for their website and often have many connected to particular services, departments or advertising campaigns.</p>\n<p>See <a href=\"https://pwp.stevecassidy.net/web/urls.html\">the URL chapter</a> for a detaile discussion.</p>\n<h2>Hypertext Markup Language: HTML</h2>\n<p>HTML is the last link in the chain that makes the Web. It is a language that allows authors to write Hypertext documents that include structure and formatting instructions. <em>Hypertext</em> describes the idea of linking one document to another via <em>hyperlinks</em> so that when you activate a link, you jump to a new document. There were hypertext systems before the birth of the web (<a href=\"http://www.xanadu.com/\">Project Xanadu</a>, <a href=\"http://en.wikipedia.org/wiki/HyperCard\">Hypercard</a>) but HTML has been much more successful than any other standard in this space.</p>\n<p>HTML is a <em>Markup Language</em> which means that it provides a way of adding additional information or markup to plain text. In this case, the markup defines the structure of the document - headers, paragraphs, lists, tables - as well as the hypertext features - links and anchors. There are other markup languages, for example LaTeX is used to write scientific papers by adding markup to text (e.g. \\textbf{bold text} or \\section{A heading}). All markup languages have some way of differentiating the text in a document from the markup instructions. In HTML this is via the angle brackets which surround tag names: &#x3C;tag>.</p>\n<p>HTML was invented by Tim Berners-Lee but it derives from an earlier standard called SGML (Standard Generalised Markup Language) that had been in use for some years as a language for writing technical documentation. It came out of work by IBM on their technical documentation and became an industry standard ratified by the ISO. SGML is in fact a meta-standard in that it defines a way of defining a markup language. HTML is one such markup language and can strictly be treated as such; however, since HTML is so much more common than any other SGML language, it is usually treated as a special case. So, for example, while we could use general purpose SGML authoring tools to write HTML, we generally use applications tailored to writing web pages that only understand HTML.</p>\n<p>Another related markup language is <a href=\"http://www.w3.org/XML/\">XML</a>, the eXtensible Markup Language. XML began as an attempt to streamline the SGML standard to make it more suitable for the web. Like SGML, XML is a meta-standard that defines how markup languages can be written. There is a version of HTML defined as an XML language called <a href=\"http://www.w3.org/MarkUp/\">XHTML</a> but this never really took off and the standardisation work around it was stopped in 2010. Instead, XML has become widely used to describe <em>data</em> rather than <em>documents</em> and we'll look at how it is used today on the web later in this book.</p>"},{"url":"/docs/articles/intro/","relativePath":"docs/articles/intro.md","relativeDir":"docs/articles","base":"intro.md","name":"intro","frontmatter":{"title":"Intro To Node","excerpt":"Web-Dev-Hubis a Unibit theme created for project documentations. You can use it for your project.","seo":{"title":"Intro To Node","description":"This is the Intro To Node page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Intro To Node","keyName":"property"},{"name":"og:description","value":"This is the Intro To Node page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Intro To Node"},{"name":"twitter:description","value":"This is the Intro To Node page"}]},"template":"docs"},"html":"<p>Node.js is an open-source and cross-platform JavaScript runtime environment. It is a popular tool for almost any kind of project!</p>\n<p>Node.js runs the V8 JavaScript engine, the core of Google Chrome, outside of the browser. This allows Node.js to be very performant.</p>\n<p>A Node.js app is run in a single process, without creating a new thread for every request. Node.js provides a set of asynchronous I/O primitives in its standard library that prevent JavaScript code from blocking and generally, libraries in Node.js are written using non-blocking paradigms, making blocking behavior the exception rather than the norm.</p>\n<p>When Node.js performs an I/O operation, like reading from the network, accessing a database or the filesystem, instead of blocking the thread and wasting CPU cycles waiting, Node.js will resume the operations when the response comes back.</p>\n<p>This allows Node.js to handle thousands of concurrent connections with a single server without introducing the burden of managing thread concurrency, which could be a significant source of bugs.</p>\n<p>Node.js has a unique advantage because millions of frontend developers that write JavaScript for the browser are now able to write the server-side code in addition to the client-side code without the need to learn a completely different language.</p>\n<p>In Node.js the new ECMAScript standards can be used without problems, as you don't have to wait for all your users to update their browsers - you are in charge of deciding which ECMAScript version to use by changing the Node.js version, and you can also enable specific experimental features by running Node.js with flags.</p>\n<h2>A Vast Number of Libraries</h2>\n<p>npm with its simple structure helped the ecosystem of Node.js proliferate, and now the npm registry hosts over 1,000,000 open source packages you can freely use.</p>\n<h2>An Example Node.js Application</h2>\n<p>The most common example Hello World of Node.js is a web server:</p>\n<iframe\n  title=\"Hello world web server\"\n  src=\"https://glitch.com/embed/#!/embed/nodejs-dev-0001-01?path=server.js&previewSize=30&attributionHidden=true&sidebarCollapsed=true\"\n  alt=\"nodejs-dev-0001-01 on Glitch\"\n  style=\"height: 400px; width: 100%; border: 0;\">\n</iframe>\n<!--```js\nconst http = require('http')\n\nconst hostname = '127.0.0.1'\nconst port = 3000\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200\n  res.setHeader('Content-Type', 'text/plain')\n  res.end('Hello World\\n')\n})\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`)\n})\n```\n\nTo run this snippet, save it as a `server.js` file and run `node server.js` in your terminal.-->\n<p>This code first includes the Node.js <a href=\"https://nodejs.org/api/http.html\"><code>http</code> module</a>.</p>\n<p>Node.js has a fantastic <a href=\"https://nodejs.org/api/\">standard library</a>, including first-class support for networking.</p>\n<p>The <code>createServer()</code> method of <code>http</code> creates a new HTTP server and returns it.</p>\n<p>The server is set to listen on the specified port and host name. When the server is ready, the callback function is called, in this case informing us that the server is running.</p>\n<p>Whenever a new request is received, the <a href=\"https://nodejs.org/api/http.html#http_event_request\"><code>request</code> event</a> is called, providing two objects: a request (an <a href=\"https://nodejs.org/api/http.html#http_class_http_incomingmessage\"><code>http.IncomingMessage</code></a> object) and a response (an <a href=\"https://nodejs.org/api/http.html#http_class_http_serverresponse\"><code>http.ServerResponse</code></a> object).</p>\n<p>Those 2 objects are essential to handle the HTTP call.</p>\n<p>The first provides the request details. In this simple example, this is not used, but you could access the request headers and request data.</p>\n<p>The second is used to return data to the caller.</p>\n<p>In this case with:</p>\n<pre><code class=\"language-js\">res.statusCode = 200;\n</code></pre>\n<p>we set the statusCode property to 200, to indicate a successful response.</p>\n<p>We set the Content-Type header:</p>\n<pre><code class=\"language-js\">res.setHeader('Content-Type', 'text/plain');\n</code></pre>\n<p>and we close the response, adding the content as an argument to <code>end()</code>:</p>\n<pre><code class=\"language-js\">res.end('Hello World\\n');\n</code></pre>\n<h2>Node.js Frameworks and Tools</h2>\n<p>Node.js is a low-level platform. In order to make things easy and exciting for developers, thousands of libraries were built upon Node.js by the community.</p>\n<p>Many of those established over time as popular options. Here is a non-comprehensive list of the ones worth learning:</p>\n<ul>\n<li><a href=\"https://adonisjs.com/\"><strong>AdonisJs</strong></a>: A full-stack framework highly focused on developer ergonomics, stability, and confidence. Adonis is one of the fastest Node.js web frameworks.</li>\n<li><a href=\"https://expressjs.com/\"><strong>Express</strong></a>: It provides one of the most simple yet powerful ways to create a web server. Its minimalist approach, unopinionated, focused on the core features of a server, is key to its success.</li>\n<li><a href=\"https://fastify.io/\"><strong>Fastify</strong></a>: A web framework highly focused on providing the best developer experience with the least overhead and a powerful plugin architecture. Fastify is one of the fastest Node.js web frameworks.</li>\n<li><a href=\"https://www.gatsbyjs.com/\"><strong>Gatsby</strong></a>: A <a href=\"https://reactjs.org/\">React</a>-based, <a href=\"https://graphql.org/\">GraphQL</a> powered, static site generator with a very rich ecosystem of plugins and starters.</li>\n<li><a href=\"https://hapijs.com\"><strong>hapi</strong></a>: A rich framework for building applications and services that enables developers to focus on writing reusable application logic instead of spending time building infrastructure.</li>\n<li><a href=\"http://koajs.com/\"><strong>koa</strong></a>: It is built by the same team behind Express, aims to be even simpler and smaller, building on top of years of knowledge. The new project born out of the need to create incompatible changes without disrupting the existing community.</li>\n<li><a href=\"https://loopback.io/\"><strong>Loopback.io</strong></a>: Makes it easy to build modern applications that require complex integrations.</li>\n<li><a href=\"https://meteor.com\"><strong>Meteor</strong></a>: An incredibly powerful full-stack framework, powering you with an isomorphic approach to building apps with JavaScript, sharing code on the client and the server. Once an off-the-shelf tool that provided everything, now integrates with frontend libs <a href=\"https://reactjs.org/\">React</a>, <a href=\"https://vuejs.org/\">Vue</a>, and <a href=\"https://angular.io\">Angular</a>. Can be used to create mobile apps as well.</li>\n<li><a href=\"https://github.com/zeit/micro\"><strong>Micro</strong></a>: It provides a very lightweight server to create asynchronous HTTP microservices.</li>\n<li><a href=\"https://nestjs.com/\"><strong>NestJS</strong></a>: A TypeScript based progressive Node.js framework for building enterprise-grade efficient, reliable and scalable server-side applications.</li>\n<li><a href=\"https://nextjs.org/\"><strong>Next.js</strong></a>: <a href=\"https://reactjs.org\">React</a> framework that gives you the best developer experience with all the features you need for production: hybrid static &#x26; server rendering, TypeScript support, smart bundling, route pre-fetching, and more.</li>\n<li><a href=\"https://nx.dev/\"><strong>Nx</strong></a>: A toolkit for full-stack monorepo development using NestJS, Express, <a href=\"https://reactjs.org/\">React</a>, <a href=\"https://angular.io\">Angular</a>, and more! Nx helps scale your development from one team building one application to many teams collaborating on multiple applications!</li>\n<li><a href=\"https://sapper.svelte.dev/\"><strong>Sapper</strong></a>: Sapper is a framework for building web applications of all sizes, with a beautiful development experience and flexible filesystem-based routing. Offers SSR and more!</li>\n<li><a href=\"https://socket.io/\"><strong>Socket.io</strong></a>: A real-time communication engine to build network applications.</li>\n<li><a href=\"https://strapi.io/\"><strong>Strapi</strong></a>: Strapi is a flexible, open-source Headless CMS that gives developers the freedom to choose their favorite tools and frameworks while also allowing editors to easily manage and distribute their content. By making the admin panel and API extensible through a plugin system, Strapi enables the world's largest companies to accelerate content delivery while building beautiful digital experiences.</li>\n</ul>"},{"url":"/docs/articles/module-exports/","relativePath":"docs/articles/module-exports.md","relativeDir":"docs/articles","base":"module-exports.md","name":"module-exports","frontmatter":{"title":"module-exports","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"page","image":"images/theme.png","subtitle":"how we introduce modularity into our code in the node ecosystem"},"html":"<p>Node.js has a built-in module system.</p>\n<p>A Node.js file can import functionality exposed by other Node.js files.</p>\n<p>When you want to import something you use</p>\n<p>to import the functionality exposed in the library.js file that resides in the current file folder.</p>\n<p>In this file, functionality must be exposed before it can be imported by other files.</p>\n<p>Any other object or variable defined in the file by default is private and not exposed to the outer world.</p>\n<p>This is what the module.exports API offered by the <a href=\"https://nodejs.org/api/modules.html\">module system</a> allows us to do.</p>\n<p>When you assign an object or a function as a new exports property, that is the thing that's being exposed, and as such, it can be imported in other parts of your app, or in other apps as well.</p>\n<p>You can do so in 2 ways.</p>\n<p>The first is to assign an object to module.exports, which is an object provided out of the box by the module system, and this will make your file export <em>just that object</em>:</p>\n<p>The second way is to add the exported object as a property of exports. This way allows you to export multiple objects, functions or data:</p>\n<p>or directly</p>\n<p>And in the other file, you'll use it by referencing a property of your import:</p>\n<p>or</p>\n<p>What's the difference between module.exports and exports?</p>\n<p>The first exposes the object it points to. The latter exposes <em>the properties</em> of the object it points to.</p>"},{"url":"/docs/articles/node-repl/","relativePath":"docs/articles/node-repl.md","relativeDir":"docs/articles","base":"node-repl.md","name":"node-repl","frontmatter":{"title":"The-package-lock.json-file","weight":1,"seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs","excerpt":"The package-lock.json file is automatically generated when installing node packages"},"html":"<p>The <code>node</code> command is the one we use to run our Node.js scripts:</p>\n<pre><code class=\"language-bash\">node script.js\n</code></pre>\n<p>If we omit the filename, we use it in REPL mode:</p>\n<pre><code class=\"language-bash\">node\n</code></pre>\n<blockquote>\n<p>Note: REPL also known as Read Evaluate Print Loop is a programming language environment(Basically a console window) that takes single expression as user input and returns the result back to the console after execution.</p>\n</blockquote>\n<p>If you try it now in your terminal, this is what happens:</p>\n<pre><code class=\"language-bash\">❯ node\n>\n</code></pre>\n<p>the command stays in idle mode and waits for us to enter something.</p>\n<blockquote>\n<p>Tip: if you are unsure how to open your terminal, google \"How to open terminal on &#x3C;your-operating-system>\".</p>\n</blockquote>\n<p>The REPL is waiting for us to enter some JavaScript code, to be more precise.</p>\n<p>Start simple and enter</p>\n<pre><code class=\"language-console\">> console.log('test')\ntest\nundefined\n>\n</code></pre>\n<p>The first value, <code>test</code>, is the output we told the console to print, then we get undefined which is the return value of running <code>console.log()</code>.</p>\n<p>We can now enter a new line of JavaScript.</p>\n<h2>Use the tab to autocomplete</h2>\n<p>The cool thing about the REPL is that it's interactive.</p>\n<p>As you write your code, if you press the <code>tab</code> key the REPL will try to autocomplete what you wrote to match a variable you already defined or a predefined one.</p>\n<h2>Exploring JavaScript objects</h2>\n<p>Try entering the name of a JavaScript class, like <code>Number</code>, add a dot and press <code>tab</code>.</p>\n<p>The REPL will print all the properties and methods you can access on that class:</p>\n<p><img src=\"tab.png\" alt=\"Pressing tab reveals object properties\"></p>\n<h2>Explore global objects</h2>\n<p>You can inspect the globals you have access to by typing <code>global.</code> and pressing <code>tab</code>:</p>\n<p><img src=\"globals.png\" alt=\"Globals\"></p>\n<h2>The _ special variable</h2>\n<p>If after some code you type <code>_</code>, that is going to print the result of the last operation.</p>\n<h2>Dot commands</h2>\n<p>The REPL has some special commands, all starting with a dot <code>.</code>. They are</p>\n<ul>\n<li><code>.help</code>: shows the dot commands help</li>\n<li><code>.editor</code>: enables editor mode, to write multiline JavaScript code with ease. Once you are in this mode, enter ctrl-D to run the code you wrote.</li>\n<li><code>.break</code>: when inputting a multi-line expression, entering the .break command will abort further input. Same as pressing ctrl-C.</li>\n<li><code>.clear</code>: resets the REPL context to an empty object and clears any multi-line expression currently being input.</li>\n<li><code>.load</code>: loads a JavaScript file, relative to the current working directory</li>\n<li><code>.save</code>: saves all you entered in the REPL session to a file (specify the filename)</li>\n<li><code>.exit</code>: exits the repl (same as pressing ctrl-C two times)</li>\n</ul>\n<p>The REPL knows when you are typing a multi-line statement without the need to invoke <code>.editor</code>.</p>\n<p>For example if you start typing an iteration like this:</p>\n<pre><code class=\"language-js\">[1, 2, 3].forEach(num => {\n</code></pre>\n<p>and you press <code>enter</code>, the REPL will go to a new line that starts with 3 dots, indicating you can now continue to work on that block.</p>\n<pre><code class=\"language-js\">... console.log(num)\n... })\n</code></pre>\n<p>If you type <code>.break</code> at the end of a line, the multiline mode will stop and the statement will not be executed.</p>"},{"url":"/docs/articles/node-package-manager/","relativePath":"docs/articles/node-package-manager.md","relativeDir":"docs/articles","base":"node-package-manager.md","name":"node-package-manager","frontmatter":{"title":"Sorting Algorithms","weight":0,"excerpt":"Sorting Algorithms","seo":{"title":"","description":"","robots":[],"extra":[{"name":"og:title","value":"Sorting Algorithms","keyName":"property","relativeUrl":false},{"name":"og:description","value":"We are creating the same number of variables with an exact size, independent of our input. No new arrays are created.","keyName":"property","relativeUrl":false},{"name":"og:type","value":"website","keyName":"property","relativeUrl":false},{"name":"twitter:image","value":"images/Classical-2D-floorplanning-data-structures-left-and-their-3D.png","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"sorting algos","keyName":"name","relativeUrl":false},{"name":"og:image","value":"images/image (9).png","keyName":"property","relativeUrl":true}],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h2>Sorting Algorithms</h2>\n<h3>Sorting Algorithms</h3>\n<ol>\n<li>Explain the complexity of and write a function that performs bubble sort on an array of numbers.</li>\n<li>\n<p>Time Complexity: O(n^2)</p>\n<ul>\n<li>In our worst case, our input is in the opposite order. We have to perform n swaps and loop through our input n times because a swap is made each time.</li>\n</ul>\n</li>\n<li>\n<p>Space Complexity: O(1)</p>\n<ul>\n<li>We are creating the same number of variables with an exact size, independent of our input. No new arrays are created.</li>\n</ul>\n</li>\n<li>Code example for bubbleSort:</li>\n</ol>\n<pre><code class=\"language-javascript\">function bubbleSort(array) {\n    // We could have also had a 'sorted = false' flag and flipped our logic below\n    let swapped = true;\n\n    while (swapped) {\n        swapped = false;\n\n        for (let i = 0; i &#x3C; array.length - 1; i++) {\n            if (array[i] > array[i + 1]) {\n                let temp = array[i];\n                array[i] = array[i + 1];\n                array[i + 1] = temp;\n                // The above three lines could also be in a helper swap function\n                // swap(array, i, i+1);\n                swapped = true;\n            }\n        }\n    }\n\n    return array;\n}\n</code></pre>\n<ol start=\"2\">\n<li>Explain the complexity of and write a function that performs selection sort on an array of numbers.</li>\n<li>\n<p>Time Complexity: O(n^2)</p>\n<ul>\n<li>Our nested loop structure is dependent on the size of our input.</li>\n<li>The outer loop always occurs n times.</li>\n<li>For each of those iterations, we have another loop that runs (n - i) times. This just means that the inner loop runs one less time each iteration, but this averages out to (n/2).</li>\n<li>Our nested structure is then T(n * n/2) = O(n^2)</li>\n</ul>\n</li>\n<li>\n<p>Space Complexity: O(1)</p>\n<ul>\n<li>We are creating the same number of variables with an exact size, independent of our input. No new arrays are created.</li>\n</ul>\n</li>\n<li>Code example for selectSort:</li>\n</ol>\n<pre><code class=\"language-javascript\">function selectionSort(arr) {\n    for (let i = 0; i &#x3C; arr.length; i++) {\n        let minIndex = i;\n\n        for (let j = i + 1; j &#x3C; arr.length; j++) {\n            if (arr[minIndex] > arr[j]) {\n                minIndex = j;\n            }\n        }\n\n        let temp = arr[i];\n        arr[i] = arr[minIndex];\n        arr[minIndex] = temp;\n        // The above three lines could also be in a helper swap function\n        // swap(arr, i, minIndex);\n    }\n    return arr;\n}\n</code></pre>\n<ol start=\"3\">\n<li>Explain the complexity of and write a function that performs insertion sort on an array of numbers.</li>\n<li>\n<p>Time Complexity: O(n^2)</p>\n<ul>\n<li>Our nested loop structure is dependent on the size of our input.</li>\n<li>The outer loop always occurs n times.</li>\n<li>For each of those iterations, we have another loop that runs a maximum of (i - 1) times. This just means that the inner loop runs one more time each iteration, but this averages out to (n/2).</li>\n<li>Our nested structure is then T(n * n/2) = O(n^2)</li>\n</ul>\n</li>\n<li>\n<p>Space Complexity: O(1)</p>\n<ul>\n<li>We are creating the same number of variables with an exact size, independent of our input. No new arrays are created.</li>\n</ul>\n</li>\n<li>Code example for insertionSort:</li>\n</ol>\n<pre><code class=\"language-javascript\">function insertionSort(arr) {\n    for (let i = 1; i &#x3C; arr.length; i++) {\n        let currElement = arr[i];\n        for (var j = i - 1; j >= 0 &#x26;&#x26; currElement &#x3C; arr[j]; j--) {\n            arr[j + 1] = arr[j];\n        }\n        arr[j + 1] = currElement;\n    }\n    return arr;\n}\n</code></pre>\n<ol start=\"4\">\n<li>Explain the complexity of and write a function that performs merge sort on an array of numbers.</li>\n<li>\n<p>Time Complexity: O(n log n)</p>\n<ul>\n<li>Our mergeSort function divides our input in half at each step, recursively calling itself with smaller and smaller input. This results in log n stack frames.</li>\n<li>On each stack frame, our worst case scenario is having to make n comparisons in our merge function in order to determine which element should come next in our sorted array.</li>\n<li>Since we have log n stack frames and n operations on each frame, we end up with an O(n log n) time complexity</li>\n</ul>\n</li>\n<li>\n<p>Space Complexity: O(n)</p>\n<ul>\n<li>We are ultimately creating n subarrays, making our space complexity linear to our input size.</li>\n</ul>\n</li>\n<li>Code example for mergeSort:</li>\n</ol>\n<pre><code class=\"language-javascript\">// The merge function is what is combining our sorted sub-arrays\nfunction merge(array1, array2) {\n    let merged = [];\n\n    // keep running while either array still contains elements\n    while (array1.length || array2.length) {\n        // if array1 is nonempty, take its the first element as ele1\n        // otherwise array1 is empty, so take Infinity as ele1\n        let ele1 = array1.length ? array1[0] : Infinity;\n\n        // do the same for array2, ele2\n        let ele2 = array2.length ? array2[0] : Infinity;\n\n        let next;\n        // remove the smaller of the eles from it's array\n        if (ele1 &#x3C; ele2) {\n            next = array1.shift();\n        } else {\n            next = array2.shift();\n        }\n\n        // and add that ele to the new array\n        merged.push(next);\n    }\n\n    return merged;\n}\n\n// The mergeSort function breaks apart our input into smaller sub-arrays until we have an input of length &#x3C;= 1, which is inherently sorted.\n// Once we have a left and right subarray that's sorted, we can merge them together to get our sorted result of this sub-problem, passing the sorted version back up the call stack.\nfunction mergeSort(array) {\n    if (array.length &#x3C;= 1) {\n        return array;\n    }\n\n    let midIdx = Math.floor(array.length / 2);\n    let leftHalf = array.slice(0, midIdx);\n    let rightHalf = array.slice(midIdx);\n\n    let sortedLeft = mergeSort(leftHalf);\n    let sortedRight = mergeSort(rightHalf);\n\n    return merge(sortedLeft, sortedRight);\n}\n</code></pre>\n<ol start=\"5\">\n<li>Explain the complexity of and write a function that performs quick sort on an array of numbers.</li>\n<li>\n<p>Time Complexity: Average O(n log n), Worst O(n^2)</p>\n<ul>\n<li>In our worst case, the pivot that we select results in every element going into either the left or right array. If this happens we end up making n recursive calls to quickSort, with n comparisons at each call.</li>\n<li>In our average case, we pick something that more evenly splits the arrays, resulting in approximately log n recursive calls and an overall complexity of O(n log n).</li>\n<li>Quick sort is unique in that the worst case is so exceedingly rare that it is often considered an O(n log n) complexity, even though this is not technically accurate.</li>\n</ul>\n</li>\n<li>\n<p>Space Complexity: Our implementation O(n), Possible implementation O(log n)</p>\n<ul>\n<li>The partition arrays that we create are directly proportional to the size of the input, resulting in O(n) space complexity.</li>\n<li>With some tweaking, we could implement an in-place quick sort, which would eliminate the creation of new arrays. In this case, the log n stack frames from the recursion are the only proportional amount of space that is used, resulting in O(log n) space complexity.</li>\n</ul>\n</li>\n<li>Code example for quickSort:</li>\n</ol>\n<pre><code class=\"language-javascript\">function quickSort(array) {\n    if (array.length &#x3C;= 1) {\n        return array;\n    }\n\n    let pivot = array.shift();\n    // This implementation uses filter, which returns a new array with any element that passes the criteria (ie the callback returns true).\n    // We also could have iterated over the array (array.forEach(el => ...)) and pushed each value into the appropriate left/right subarray as we encountered it.\n    let left = array.filter((el) => el &#x3C; pivot);\n    let right = array.filter((el) => el >= pivot);\n\n    let leftSorted = quickSort(left);\n    let rightSorted = quickSort(right);\n\n    return [...leftSorted, pivot, ...rightSorted];\n    // We also could have concatenated the arrays instead of spreading their contents\n    // return leftSorted.concat([pivot]).concat(rightSorted);\n}\n</code></pre>\n<ol start=\"6\">\n<li>Explain the complexity of and write a function that performs a binary search on a sorted array of numbers.</li>\n<li>\n<p>Time Complexity: O(log n)</p>\n<ul>\n<li>With each recursive call, we split our input in half. This means we have to make at most log n checks to know if the element is in our array.</li>\n</ul>\n</li>\n<li>\n<p>Space Complexity: Our implementation O(n), Possible implementation O(1)</p>\n<ul>\n<li>We have to make a subarray for each recursive call. In the worst case (we don't find the element), the total length of these arrays is approximately equal to the length of the original (n).</li>\n<li>If we kept references to the beginning and end index of the portion of the array that we are searching, we could eliminate the need for creating new subarrays. We could also use a while loop to perform this functionality until we either found our target or our beginning and end indices crossed. This would eliminate the space required for recursive calls (adding stack frames). Ultimately we would be using the same number of variables independent of input size, resulting in O(1).</li>\n</ul>\n</li>\n<li>Code example for binarySearch and binarySearchIndex:</li>\n</ol>\n<pre><code class=\"language-javascript\">// Returns simply true/false for presence\nfunction binarySearch(array, target) {\n    if (array.length === 0) {\n        return false;\n    }\n\n    let midIdx = Math.floor(array.length / 2);\n    let leftHalf = array.slice(0, midIdx);\n    let rightHalf = array.slice(midIdx + 1);\n\n    if (target &#x3C; array[midIdx]) {\n        return binarySearch(leftHalf, target);\n    } else if (target > array[midIdx]) {\n        return binarySearch(rightHalf, target);\n    } else {\n        return true;\n    }\n}\n\n// Returns the index or -1 if not found\nfunction binarySearchIndex(array, target) {\n    if (!array.length) return -1;\n\n    const midIdx = Math.floor(array.length / 2);\n    const midEl = array[midIdx];\n\n    if (target &#x3C; midEl) {\n        return binarySearchIndex(array.slice(0, midIdx), target);\n    } else if (target > midEl) {\n        // Since our recursive call will have new indices for the subarray, we have to adjust the return value to align it with the indices of our original array.\n        // If the recursive call returns -1, it was not found and we can immediately return -1\n        // If it was found in the subarray, we have to add on the number of elements that were removed from the beginning of our larger original array.\n        // For example, if we try to find 15 in an array of [5, 10, 15]:\n        // - Our first call to binarySearchIndex will check our middle element of 10\n        // - Since our target is greater, we will recursively call our search on elements to the right, being the subarray [15]\n        // - On our recursive call we found our target! It's index in this call is 0.\n        // - When we return 0 to where binarySearchIndex was called, we need to adjust it to line up with this larger array (the 0th element of this larger array is 5, but our target was at the 0th index of the subarray)\n        // - Since we sliced off 2 elements from the beginning before making our recursive call, we add 2 to the return value to adjust it back to line up with our original array.\n        const idxShift = binarySearchIndex(array.slice(midIdx + 1), target);\n        return idxShift === -1 ? -1 : idxShift + midIdx + 1;\n    } else {\n        return midIdx;\n    }\n}\n</code></pre>"},{"url":"/docs/articles/nodejs/","relativePath":"docs/articles/nodejs.md","relativeDir":"docs/articles","base":"nodejs.md","name":"nodejs","frontmatter":{"title":"Javascript and Node","excerpt":"Web-Dev-Hubis a Unibit theme created for project documentations. You can use it for your project.","seo":{"title":"Javascript and Node","description":"This is the Javascript and Node page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Javascript and Node","keyName":"property"},{"name":"og:description","value":"This is the Javascript and Node page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Javascript and Node"},{"name":"twitter:description","value":"This is the Javascript and Node page"}]},"template":"docs"},"html":"<p>As a beginner, it's hard to get to a point where you are confident enough in your programming abilities.</p>\n<p>While learning to code, you might also be confused at where does JavaScript end, and where Node.js begins, and vice versa.</p>\n<p>I would recommend you to have a good grasp of the main JavaScript concepts before diving into Node.js:</p>\n<ul>\n<li>Lexical Structure</li>\n<li>Expressions</li>\n<li>Types</li>\n<li>Variables</li>\n<li>Functions</li>\n<li>this</li>\n<li>Arrow Functions</li>\n<li>Loops</li>\n<li>Scopes</li>\n<li>Arrays</li>\n<li>Template Literals</li>\n<li>Semicolons</li>\n<li>Strict Mode</li>\n<li>ECMAScript 6, 2016, 2017</li>\n</ul>\n<p>With those concepts in mind, you are well on your road to become a proficient JavaScript developer, in both the browser and in Node.js.</p>\n<p>The following concepts are also key to understand asynchronous programming, which is one fundamental part of Node.js:</p>\n<ul>\n<li>Asynchronous programming and callbacks</li>\n<li>Timers</li>\n<li>Promises</li>\n<li>Async and Await</li>\n<li>Closures</li>\n<li>The Event Loop</li>\n</ul>"},{"url":"/docs/articles/node-run-cli/","relativePath":"docs/articles/node-run-cli.md","relativeDir":"docs/articles","base":"node-run-cli.md","name":"node-run-cli","frontmatter":{"title":"node-cli-args","weight":1,"excerpt":"How to accept arguments in a Node.js program passed from the command line","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<p>You can pass any number of arguments when invoking a Node.js application using</p>\n<p>Arguments can be standalone or have a key and a value.</p>\n<p>For example:</p>\n<p>or</p>\n<p>This changes how you will retrieve this value in the Node.js code.</p>\n<p>The way you retrieve it is using the process object built into Node.js.</p>\n<p>It exposes an argv property, which is an array that contains all the command line invocation arguments.</p>\n<p>The first element is the full path of the node command.</p>\n<p>The second element is the full path of the file being executed.</p>\n<p>All the additional arguments are present from the third position going forward.</p>\n<p>You can iterate over all the arguments (including the node path and the file path) using a loop:</p>\n<p>You can get only the additional arguments by creating a new array that excludes the first 2 params:</p>\n<p>If you have one argument without an index name, like this:</p>\n<p>you can access it using</p>\n<p>In this case:</p>\n<p>args[0] is name=joe, and you need to parse it. The best way to do so is by using the <a href=\"https://www.npmjs.com/package/minimist\">minimist</a> library, which helps dealing with arguments:</p>\n<p>This time you need to use double dashes before each argument name:</p>"},{"url":"/docs/articles/node-env-variables/","relativePath":"docs/articles/node-env-variables.md","relativeDir":"docs/articles","base":"node-env-variables.md","name":"node-env-variables","frontmatter":{"title":"Node Export Module","weight":1,"excerpt":"How to use the module.exports API to expose data to other files in your application, or to other applications as well","seo":{"title":"module.exports API ","description":"When you want to import something you use\n\nconst library = require('./library');","robots":[],"extra":[{"name":"og:image","value":"images/cool-comet.png","keyName":"property","relativeUrl":true}],"type":"stackbit_page_meta"},"template":"docs"},"html":"<p>Node.js has a built-in module system.</p>\n<p>A Node.js file can import functionality exposed by other Node.js files.</p>\n<p>When you want to import something you use</p>\n<p>to import the functionality exposed in the library.js file that resides in the current file folder.</p>\n<p>In this file, functionality must be exposed before it can be imported by other files.</p>\n<p>Any other object or variable defined in the file by default is private and not exposed to the outer world.</p>\n<p>This is what the module.exports API offered by the <a href=\"https://nodejs.org/api/modules.html\">module system</a> allows us to do.</p>\n<p>When you assign an object or a function as a new exports property, that is the thing that's being exposed, and as such, it can be imported in other parts of your app, or in other apps as well.</p>\n<p>You can do so in 2 ways.</p>\n<p>The first is to assign an object to module.exports, which is an object provided out of the box by the module system, and this will make your file export <em>just that object</em>:</p>\n<p>The second way is to add the exported object as a property of exports. This way allows you to export multiple objects, functions or data:</p>\n<p>or directly</p>\n<p>And in the other file, you'll use it by referencing a property of your import:</p>\n<p>or</p>\n<p>What's the difference between module.exports and exports?</p>\n<p>The first exposes the object it points to. The latter exposes <em>the properties</em> of the object it points to.</p>"},{"url":"/docs/articles/npx/","relativePath":"docs/articles/npx.md","relativeDir":"docs/articles","base":"npx.md","name":"npx","frontmatter":{"title":"The npx Node.js Package Runner","sections":[],"seo":{"title":"","description":"npx is a very cool way to run Node.js code, and provides many useful features","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>NPX:</h1>\n<p><code>npx</code> is a very powerful command that's been available in <strong>npm</strong> starting version 5.2, released in July 2017.</p>\n<blockquote>\n<p>If you don't want to install npm, you can <a href=\"https://www.npmjs.com/package/npx\">install npx as a standalone package</a></p>\n</blockquote>\n<p><code>npx</code> lets you run code built with Node.js and published through the npm registry.</p>\n<h2>Easily run local commands</h2>\n<p>Node.js developers used to publish most of the executable commands as global packages, in order for them to be in the path and executable immediately.</p>\n<p>This was a pain because you could not really install different versions of the same command.</p>\n<p>Running <code>npx commandname</code> automatically finds the correct reference of the command inside the <code>node_modules</code> folder of a project, without needing to know the exact path, and without requiring the package to be installed globally and in the user's path.</p>\n<h2>Installation-less command execution</h2>\n<p>There is another great feature of <code>npx</code>, which is allowing to run commands without first installing them.</p>\n<p>This is pretty useful, mostly because:</p>\n<ol>\n<li>you don't need to install anything</li>\n<li>you can run different versions of the same command, using the syntax @version</li>\n</ol>\n<p>A typical demonstration of using <code>npx</code> is through the <code>cowsay</code> command. <code>cowsay</code> will print a cow saying what you wrote in the command. For example:</p>\n<p><code>cowsay \"Hello\"</code> will print</p>\n<pre><code> _______\n&#x3C; Hello >\n -------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n</code></pre>\n<p>This only works if you have the <code>cowsay</code> command globally installed from npm previously. Otherwise you'll get an error when you try to run the command.</p>\n<p><code>npx</code> allows you to run that npm command without having it installed locally:</p>\n<pre><code class=\"language-bash\">npx cowsay \"Hello\"\n</code></pre>\n<p>will do the job.</p>\n<p>Now, this is a funny useless command.\nOther scenarios include:</p>\n<ul>\n<li>running the <code>vue</code> CLI tool to create new applications and run them: <code>npx @vue/cli create my-vue-app</code></li>\n<li>creating a new React app using <code>create-react-app</code>: <code>npx create-react-app my-react-app</code></li>\n</ul>\n<p>and many more.</p>\n<p>Once downloaded, the downloaded code will be wiped.</p>\n<h2>Run some code using a different Node.js version</h2>\n<p>Use the <code>@</code> to specify the version, and combine that with the <a href=\"https://www.npmjs.com/package/node\"><code>node</code> npm package</a>:</p>\n<pre><code class=\"language-bash\">npx node@10 -v #v10.18.1\nnpx node@12 -v #v12.14.1\n</code></pre>\n<p>This helps to avoid tools like <code>nvm</code> or the other Node.js version management tools.</p>\n<h2>Run arbitrary code snippets directly from a URL</h2>\n<p><code>npx</code> does not limit you to the packages published on the npm registry.</p>\n<p>You can run code that sits in a GitHub gist, for example:</p>\n<pre><code class=\"language-bash\">npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32\n</code></pre>\n<p>Of course, you need to be careful when running code that you do not control, as with great power comes great responsibility.</p>"},{"url":"/docs/articles/npm/","relativePath":"docs/articles/npm.md","relativeDir":"docs/articles","base":"npm.md","name":"npm","frontmatter":{"title":"Introduction to npm","weight":0,"excerpt":"npm is the standard package manager for nodejs","seo":{"title":"npm","description":"npm is the standard package manager for Node.js.\nIn January 2017 over 350000 packages were reported being listed in the npm registry.\n","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h2>Introduction to npm</h2>\n<p><code>npm</code> is the standard package manager for Node.js.</p>\n<p>In January 2017 over 350000 packages were reported being listed in the npm registry, making it the biggest single language code repository on Earth, and you can be sure there is a package for (almost!) everything.</p>\n<p>It started as a way to download and manage dependencies of Node.js packages, but it has since become a tool used also in frontend JavaScript.</p>\n<p>There are many things that <code>npm</code> does.</p>\n<blockquote>\n<p><a href=\"https://yarnpkg.com/en/\"><strong>Yarn</strong></a> is an alternative to npm. Make sure you check it out as well.</p>\n</blockquote>\n<h2>Downloads</h2>\n<p><code>npm</code> manages downloads of dependencies of your project.</p>\n<h3>Installing all dependencies</h3>\n<p>If a project has a <code>package.json</code> file, by running</p>\n<pre><code class=\"language-bash\">npm install\n</code></pre>\n<p>it will install everything the project needs, in the <code>node_modules</code> folder, creating it if it's not existing already.</p>\n<h3>Installing a single package</h3>\n<p>You can also install a specific package by running</p>\n<pre><code class=\"language-bash\">npm install &#x3C;package-name>\n</code></pre>\n<p>Often you'll see more flags added to this command:</p>\n<ul>\n<li><code>--save</code> installs and adds the entry to the <code>package.json</code> file <em>dependencies</em></li>\n<li><code>--save-dev</code> installs and adds the entry to the <code>package.json</code> file <em>devDependencies</em></li>\n</ul>\n<p>The difference is mainly that devDependencies are usually development tools, like a testing library, while <code>dependencies</code> are bundled with the app in production.</p>\n<h3>Updating packages</h3>\n<p>Updating is also made easy, by running</p>\n<pre><code class=\"language-console\">npm update\n</code></pre>\n<p><code>npm</code> will check all packages for a newer version that satisfies your versioning constraints.</p>\n<p>You can specify a single package to update as well:</p>\n<pre><code class=\"language-console\">npm update &#x3C;package-name>\n</code></pre>\n<h2>Versioning</h2>\n<p>In addition to plain downloads, <code>npm</code> also manages <strong>versioning</strong>, so you can specify any specific version of a package, or require a version higher or lower than what you need.</p>\n<p>Many times you'll find that a library is only compatible with a major release of another library.</p>\n<p>Or a bug in the latest release of a lib, still unfixed, is causing an issue.</p>\n<p>Specifying an explicit version of a library also helps to keep everyone on the same exact version of a package, so that the whole team runs the same version until the <code>package.json</code> file is updated.</p>\n<p>In all those cases, versioning helps a lot, and <code>npm</code> follows the semantic versioning (semver) standard.</p>\n<h2>Running Tasks</h2>\n<p>The package.json file supports a format for specifying command line tasks that can be run by using</p>\n<pre><code class=\"language-console\">npm run &#x3C;task-name>\n</code></pre>\n<p>For example:</p>\n<pre><code class=\"language-json\">{\n    \"scripts\": {\n        \"start-dev\": \"node lib/server-development\",\n        \"start\": \"node lib/server-production\"\n    }\n}\n</code></pre>\n<p>It's very common to use this feature to run Webpack:</p>\n<pre><code class=\"language-json\">{\n    \"scripts\": {\n        \"watch\": \"webpack --watch --progress --colors --config webpack.conf.js\",\n        \"dev\": \"webpack --progress --colors --config webpack.conf.js\",\n        \"prod\": \"NODE_ENV=production webpack -p --config webpack.conf.js\"\n    }\n}\n</code></pre>\n<p>So instead of typing those long commands, which are easy to forget or mistype, you can run</p>\n<pre><code class=\"language-console\">$ npm run watch\n$ npm run dev\n$ npm run prod\n</code></pre>"},{"url":"/docs/articles/nodevsbrowser/","relativePath":"docs/articles/nodevsbrowser.md","relativeDir":"docs/articles","base":"nodevsbrowser.md","name":"nodevsbrowser","frontmatter":{"title":"Node vs Browser","excerpt":"Web-Dev-Hubis a Unibit theme created for project documentations. You can use it for your project.","seo":{"title":"Node vs Browser","description":"Both the browser and Node.js use JavaScript as their programming language.You can pass any number of arguments when invoking a Node.js application using\n\n","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Node vs Browser","keyName":"property"},{"name":"og:description","value":"Both the browser and Node.js use JavaScript as their programming language.\nBuilding apps that run in the browser","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Node vs Browser"},{"name":"twitter:description","value":"This is the Node vs Browser page"},{"name":"og:image","value":"images/node.jpg","keyName":"property","relativeUrl":true}]},"template":"docs"},"html":"<p>Both the browser and Node.js use JavaScript as their programming language.</p>\n<p>Building apps that run in the browser is a completely different thing than building a Node.js application.</p>\n<p>Despite the fact that it's always JavaScript, there are some key differences that make the experience radically different.</p>\n<p>From the perspective of a frontend developer who extensively uses JavaScript, Node.js apps bring with them a huge advantage: the comfort of programming everything - the frontend and the backend - in a single language.</p>\n<p>You have a huge opportunity because we know how hard it is to fully, deeply learn a programming language, and by using the same language to perform all your work on the web - both on the client and on the server, you're in a unique position of advantage.</p>\n<p>What changes is the ecosystem.</p>\n<p>In the browser, most of the time what you are doing is interacting with the DOM, or other Web Platform APIs like Cookies. Those do not exist in Node.js, of course. You don't have the <code>document</code>, <code>window</code> and all the other objects that are provided by the browser.</p>\n<p>And in the browser, we don't have all the nice APIs that Node.js provides through its modules, like the filesystem access functionality.</p>\n<p>Another big difference is that in Node.js you control the environment. Unless you are building an open source application that anyone can deploy anywhere, you know which version of Node.js you will run the application on. Compared to the browser environment, where you don't get the luxury to choose what browser your visitors will use, this is very convenient.</p>\n<p>This means that you can write all the modern ES6-7-8-9 JavaScript that your Node.js version supports.</p>\n<p>Since JavaScript moves so fast, but browsers can be a bit slow and users a bit slow to upgrade, sometimes on the web, you are stuck with using older JavaScript / ECMAScript releases.</p>\n<p>You can use Babel to transform your code to be ES5-compatible before shipping it to the browser, but in Node.js, you won't need that.</p>\n<p>Another difference is that Node.js uses the CommonJS module system, while in the browser we are starting to see the ES Modules standard being implemented.</p>\n<p>In practice, this means that for the time being you use <code>require()</code> in Node.js and <code>import</code> in the browser.</p>"},{"url":"/docs/articles/reading-files/","relativePath":"docs/articles/reading-files.md","relativeDir":"docs/articles","base":"reading-files.md","name":"reading-files","frontmatter":{"title":"Reading Files","excerpt":"Web-Dev-Hubis a Unibit theme created for project documentations. You can use it for your project.","seo":{"title":"Reading files","description":"The simplest way to read a file in Node.js is to use the fs.readFile() method, passing it the file path, encoding and a callback function that will be called","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Reading files","keyName":"property"},{"name":"og:description","value":"This is the Reading files page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Reading files"},{"name":"twitter:description","value":"This is the Reading files page"}]},"template":"docs"},"html":"<p>The simplest way to read a file in Node.js is to use the <code>fs.readFile()</code> method, passing it the file path, encoding and a callback function that will be called with the file data (and the error):</p>\n<pre><code class=\"language-js\">const fs = require('fs');\n\nfs.readFile('/Users/joe/test.txt', 'utf8', (err, data) => {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(data);\n});\n</code></pre>\n<p>Alternatively, you can use the synchronous version <code>fs.readFileSync()</code>:</p>\n<pre><code class=\"language-js\">const fs = require('fs');\n\ntry {\n    const data = fs.readFileSync('/Users/joe/test.txt', 'utf8');\n    console.log(data);\n} catch (err) {\n    console.error(err);\n}\n</code></pre>\n<p>Both <code>fs.readFile()</code> and <code>fs.readFileSync()</code> read the full content of the file in memory before returning the data.</p>\n<p>This means that big files are going to have a major impact on your memory consumption and speed of execution of the program.</p>\n<p>In this case, a better option is to read the file content using streams.</p>"},{"url":"/docs/articles/node-common-modules/","relativePath":"docs/articles/node-common-modules.md","relativeDir":"docs/articles","base":"node-common-modules.md","name":"node-common-modules","frontmatter":{"title":"Common Modules","weight":2,"excerpt":"resources","seo":{"title":"","description":"This section is similar to a blog but is more technical in nature and time invariant with regard to content.","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h2>Modules: CommonJS modules<a href=\"https://nodejs.org/api/modules.html#modules_modules_commonjs_modules\">#</a></h2>\n<p><a href=\"https://nodejs.org/api/documentation.html#documentation_stability_index\">Stability: 2</a> - Stable</p>\n<p>In the Node.js module system, each file is treated as a separate module. For example, consider a file named <code>foo.js</code>:</p>\n<pre><code>const circle = require('./circle.js');\nconsole.log(`The area of a circle of radius 4 is ${circle.area(4)}`);\n</code></pre>\n<p>On the first line, <code>foo.js</code> loads the module <code>circle.js</code> that is in the same directory as <code>foo.js</code>.</p>\n<p>Here are the contents of <code>circle.js</code>:</p>\n<pre><code>const { PI } = Math;\n\nexports.area = (r) => PI * r ** 2;\n\nexports.circumference = (r) => 2 * PI * r;\n</code></pre>\n<p>The module <code>circle.js</code> has exported the functions <code>area()</code> and <code>circumference()</code>. Functions and objects are added to the root of a module by specifying additional properties on the special <code>exports</code> object.</p>\n<p>Variables local to the module will be private, because the module is wrapped in a function by Node.js (see <a href=\"https://nodejs.org/api/modules.html#modules_the_module_wrapper\">module wrapper</a>). In this example, the variable <code>PI</code> is private to <code>circle.js</code>.</p>\n<p>The <code>module.exports</code> property can be assigned a new value (such as a function or object).</p>\n<p>Below, <code>bar.js</code> makes use of the <code>square</code> module, which exports a Square class:</p>\n<pre><code>const Square = require('./square.js');\nconst mySquare = new Square(2);\nconsole.log(`The area of mySquare is ${mySquare.area()}`);\n</code></pre>\n<p>The <code>square</code> module is defined in <code>square.js</code>:</p>\n<pre><code>// Assigning to exports will not modify module, must use module.exports\nmodule.exports = class Square {\n  constructor(width) {\n    this.width = width;\n  }\n\n  area() {\n    return this.width ** 2;\n  }\n};\n</code></pre>\n<p>The module system is implemented in the <code>require('module')</code> module.</p>\n<h3>Accessing the main module<a href=\"https://nodejs.org/api/modules.html#modules_accessing_the_main_module\">#</a></h3>\n<p>When a file is run directly from Node.js, <code>require.main</code> is set to its <code>module</code>. That means that it is possible to determine whether a file has been run directly by testing <code>require.main === module</code>.</p>\n<p>For a file <code>foo.js</code>, this will be <code>true</code> if run via <code>node foo.js</code>, but <code>false</code> if run by <code>require('./foo')</code>.</p>\n<p>Because <code>module</code> provides a <code>filename</code> property (normally equivalent to <code>__filename</code>), the entry point of the current application can be obtained by checking <code>require.main.filename</code>.</p>\n<h3>Package manager tips<a href=\"https://nodejs.org/api/modules.html#modules_package_manager_tips\">#</a></h3>\n<p>The semantics of the Node.js <code>require()</code> function were designed to be general enough to support reasonable directory structures. Package manager programs such as <code>dpkg</code>, <code>rpm</code>, and <code>npm</code> will hopefully find it possible to build native packages from Node.js modules without modification.</p>\n<p>Below we give a suggested directory structure that could work:</p>\n<p>Let's say that we wanted to have the folder at <code>/usr/lib/node/&#x3C;some-package>/&#x3C;some-version></code> hold the contents of a specific version of a package.</p>\n<p>Packages can depend on one another. In order to install package <code>foo</code>, it may be necessary to install a specific version of package <code>bar</code>. The <code>bar</code> package may itself have dependencies, and in some cases, these may even collide or form cyclic dependencies.</p>\n<p>Because Node.js looks up the <code>realpath</code> of any modules it loads (that is, it resolves symlinks) and then <a href=\"https://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders\">looks for their dependencies in <code>node_modules</code> folders</a>, this situation can be resolved with the following architecture:</p>\n<ul>\n<li><code>/usr/lib/node/foo/1.2.3/</code>: Contents of the <code>foo</code> package, version 1.2.3.</li>\n<li><code>/usr/lib/node/bar/4.3.2/</code>: Contents of the <code>bar</code> package that <code>foo</code> depends on.</li>\n<li><code>/usr/lib/node/foo/1.2.3/node_modules/bar</code>: Symbolic link to <code>/usr/lib/node/bar/4.3.2/</code>.</li>\n<li><code>/usr/lib/node/bar/4.3.2/node_modules/*</code>: Symbolic links to the packages that <code>bar</code> depends on.</li>\n</ul>\n<p>Thus, even if a cycle is encountered, or if there are dependency conflicts, every module will be able to get a version of its dependency that it can use.</p>\n<p>When the code in the <code>foo</code> package does <code>require('bar')</code>, it will get the version that is symlinked into <code>/usr/lib/node/foo/1.2.3/node_modules/bar</code>. Then, when the code in the <code>bar</code> package calls <code>require('quux')</code>, it'll get the version that is symlinked into <code>/usr/lib/node/bar/4.3.2/node_modules/quux</code>.</p>\n<p>Furthermore, to make the module lookup process even more optimal, rather than putting packages directly in <code>/usr/lib/node</code>, we could put them in <code>/usr/lib/node_modules/&#x3C;name>/&#x3C;version></code>. Then Node.js will not bother looking for missing dependencies in <code>/usr/node_modules</code> or <code>/node_modules</code>.</p>\n<p>In order to make modules available to the Node.js REPL, it might be useful to also add the <code>/usr/lib/node_modules</code> folder to the <code>$NODE_PATH</code> environment variable. Since the module lookups using <code>node_modules</code> folders are all relative, and based on the real path of the files making the calls to <code>require()</code>, the packages themselves can be anywhere.</p>\n<h3>The <code>.mjs</code> extension<a href=\"https://nodejs.org/api/modules.html#modules_the_mjs_extension\">#</a></h3>\n<p>It is not possible to <code>require()</code> files that have the <code>.mjs</code> extension. Attempting to do so will throw <a href=\"https://nodejs.org/api/errors.html#errors_err_require_esm\">an error</a>. The <code>.mjs</code> extension is reserved for <a href=\"https://nodejs.org/api/esm.html\">ECMAScript Modules</a> which cannot be loaded via <code>require()</code>. See <a href=\"https://nodejs.org/api/esm.html\">ECMAScript Modules</a> for more details.</p>\n<h3>All together...<a href=\"https://nodejs.org/api/modules.html#modules_all_together\">#</a></h3>\n<p>To get the exact filename that will be loaded when <code>require()</code> is called, use the <code>require.resolve()</code> function.</p>\n<p>Putting together all of the above, here is the high-level algorithm in pseudocode of what <code>require()</code> does:</p>\n<p>require(X) from module at path Y</p>\n<ol>\n<li>If X is a core module,\na. return the core module\nb. STOP</li>\n<li>If X begins with '/'\na. set Y to be the filesystem root</li>\n<li>If X begins with './' or '/' or '../'\na. LOAD<em>AS</em>FILE(Y + X)\nb. LOAD<em>AS</em>DIRECTORY(Y + X)\nc. THROW \"not found\"</li>\n<li>If X begins with '#'\na. LOAD<em>PACKAGE</em>IMPORTS(X, dirname(Y))</li>\n<li>LOAD<em>PACKAGE</em>SELF(X, dirname(Y))</li>\n<li>LOAD<em>NODE</em>MODULES(X, dirname(Y))</li>\n<li>THROW \"not found\"</li>\n</ol>\n<p>LOAD<em>AS</em>FILE(X)</p>\n<ol>\n<li>If X is a file, load X as its file extension format. STOP</li>\n<li>If X.js is a file, load X.js as JavaScript text. STOP</li>\n<li>If X.json is a file, parse X.json to a JavaScript Object. STOP</li>\n<li>If X.node is a file, load X.node as binary addon. STOP</li>\n</ol>\n<p>LOAD_INDEX(X)</p>\n<ol>\n<li>If X/index.js is a file, load X/index.js as JavaScript text. STOP</li>\n<li>If X/index.json is a file, parse X/index.json to a JavaScript object. STOP</li>\n<li>If X/index.node is a file, load X/index.node as binary addon. STOP</li>\n</ol>\n<p>LOAD<em>AS</em>DIRECTORY(X)</p>\n<ol>\n<li>If X/package.json is a file,\na. Parse X/package.json, and look for \"main\" field.\nb. If \"main\" is a falsy value, GOTO 2.\nc. let M = X + (json main field)\nd. LOAD<em>AS</em>FILE(M)\ne. LOAD<em>INDEX(M)\nf. LOAD</em>INDEX(X) DEPRECATED\ng. THROW \"not found\"</li>\n<li>LOAD_INDEX(X)</li>\n</ol>\n<p>LOAD<em>NODE</em>MODULES(X, START)</p>\n<ol>\n<li>let DIRS = NODE<em>MODULES</em>PATHS(START)</li>\n<li>for each DIR in DIRS:\na. LOAD<em>PACKAGE</em>EXPORTS(X, DIR)\nb. LOAD<em>AS</em>FILE(DIR/X)\nc. LOAD<em>AS</em>DIRECTORY(DIR/X)</li>\n</ol>\n<p>NODE<em>MODULES</em>PATHS(START)</p>\n<ol>\n<li>let PARTS = path split(START)</li>\n<li>let I = count of PARTS - 1</li>\n<li>let DIRS = [GLOBAL_FOLDERS]</li>\n<li>while I >= 0,\na. if PARTS[I] = \"node<em>modules\" CONTINUE\nb. DIR = path join(PARTS[0 .. I] + \"node</em>modules\")\nc. DIRS = DIRS + DIR\nd. let I = I - 1</li>\n<li>return DIRS</li>\n</ol>\n<p>LOAD<em>PACKAGE</em>IMPORTS(X, DIR)</p>\n<ol>\n<li>Find the closest package scope SCOPE to DIR.</li>\n<li>If no scope was found, return.</li>\n<li>If the SCOPE/package.json \"imports\" is null or undefined, return.</li>\n<li>let MATCH = PACKAGE<em>IMPORTS</em>RESOLVE(X, pathToFileURL(SCOPE),\n[\"node\", \"require\"]) <a href=\"https://nodejs.org/api/esm.md#resolver-algorithm-specification\">defined in the ESM resolver</a>.</li>\n<li>RESOLVE<em>ESM</em>MATCH(MATCH).</li>\n</ol>\n<p>LOAD<em>PACKAGE</em>EXPORTS(X, DIR)</p>\n<ol>\n<li>Try to interpret X as a combination of NAME and SUBPATH where the name\nmay have a @scope/ prefix and the subpath begins with a slash (<code>/</code>).</li>\n<li>If X does not match this pattern or DIR/NAME/package.json is not a file,\nreturn.</li>\n<li>Parse DIR/NAME/package.json, and look for \"exports\" field.</li>\n<li>If \"exports\" is null or undefined, return.</li>\n<li>let MATCH = PACKAGE<em>EXPORTS</em>RESOLVE(pathToFileURL(DIR/NAME), \".\" + SUBPATH,\n<code>package.json</code> \"exports\", [\"node\", \"require\"]) <a href=\"https://nodejs.org/api/esm.md#resolver-algorithm-specification\">defined in the ESM resolver</a>.</li>\n<li>RESOLVE<em>ESM</em>MATCH(MATCH)</li>\n</ol>\n<p>LOAD<em>PACKAGE</em>SELF(X, DIR)</p>\n<ol>\n<li>Find the closest package scope SCOPE to DIR.</li>\n<li>If no scope was found, return.</li>\n<li>If the SCOPE/package.json \"exports\" is null or undefined, return.</li>\n<li>If the SCOPE/package.json \"name\" is not the first segment of X, return.</li>\n<li>let MATCH = PACKAGE<em>EXPORTS</em>RESOLVE(pathToFileURL(SCOPE),\n\".\" + X.slice(\"name\".length), <code>package.json</code> \"exports\", [\"node\", \"require\"])\n<a href=\"https://nodejs.org/api/esm.md#resolver-algorithm-specification\">defined in the ESM resolver</a>.</li>\n<li>RESOLVE<em>ESM</em>MATCH(MATCH)</li>\n</ol>\n<p>RESOLVE<em>ESM</em>MATCH(MATCH)</p>\n<ol>\n<li>let { RESOLVED, EXACT } = MATCH</li>\n<li>let RESOLVED_PATH = fileURLToPath(RESOLVED)</li>\n<li>If EXACT is true,\na. If the file at RESOLVED<em>PATH exists, load RESOLVED</em>PATH as its extension\nformat. STOP</li>\n<li>Otherwise, if EXACT is false,\na. LOAD<em>AS</em>FILE(RESOLVED<em>PATH)\nb. LOAD</em>AS<em>DIRECTORY(RESOLVED</em>PATH)</li>\n<li>THROW \"not found\"</li>\n</ol>\n<h3>Caching<a href=\"https://nodejs.org/api/modules.html#modules_caching\">#</a></h3>\n<p>Modules are cached after the first time they are loaded. This means (among other things) that every call to <code>require('foo')</code> will get exactly the same object returned, if it would resolve to the same file.</p>\n<p>Provided <code>require.cache</code> is not modified, multiple calls to <code>require('foo')</code> will not cause the module code to be executed multiple times. This is an important feature. With it, \"partially done\" objects can be returned, thus allowing transitive dependencies to be loaded even when they would cause cycles.</p>\n<p>To have a module execute code multiple times, export a function, and call that function.</p>\n<h4>Module caching caveats<a href=\"https://nodejs.org/api/modules.html#modules_module_caching_caveats\">#</a></h4>\n<p>Modules are cached based on their resolved filename. Since modules may resolve to a different filename based on the location of the calling module (loading from <code>node_modules</code> folders), it is not a <em>guarantee</em> that <code>require('foo')</code> will always return the exact same object, if it would resolve to different files.</p>\n<p>Additionally, on case-insensitive file systems or operating systems, different resolved filenames can point to the same file, but the cache will still treat them as different modules and will reload the file multiple times. For example, <code>require('./foo')</code> and <code>require('./FOO')</code> return two different objects, irrespective of whether or not <code>./foo</code> and <code>./FOO</code> are the same file.</p>\n<h3>Core modules<a href=\"https://nodejs.org/api/modules.html#modules_core_modules\">#</a></h3>\n<p>History</p>\n<p>Node.js has several modules compiled into the binary. These modules are described in greater detail elsewhere in this documentation.</p>\n<p>The core modules are defined within the Node.js source and are located in the <code>lib/</code> folder.</p>\n<p>Core modules are always preferentially loaded if their identifier is passed to <code>require()</code>. For instance, <code>require('http')</code> will always return the built in HTTP module, even if there is a file by that name.</p>\n<p>Core modules can also be identified using the <code>node:</code> prefix, in which case it bypasses the <code>require</code> cache. For instance, <code>require('node:http')</code> will always return the built in HTTP module, even if there is <code>require.cache</code> entry by that name.</p>\n<h3>Cycles<a href=\"https://nodejs.org/api/modules.html#modules_cycles\">#</a></h3>\n<p>When there are circular <code>require()</code> calls, a module might not have finished executing when it is returned.</p>\n<p>Consider this situation:</p>\n<p><code>a.js</code>:</p>\n<pre><code>console.log('a starting');\nexports.done = false;\nconst b = require('./b.js');\nconsole.log('in a, b.done = %j', b.done);\nexports.done = true;\nconsole.log('a done');\n</code></pre>\n<p><code>b.js</code>:</p>\n<pre><code>console.log('b starting');\nexports.done = false;\nconst a = require('./a.js');\nconsole.log('in b, a.done = %j', a.done);\nexports.done = true;\nconsole.log('b done');\n</code></pre>\n<p><code>main.js</code>:</p>\n<pre><code>console.log('main starting');\nconst a = require('./a.js');\nconst b = require('./b.js');\nconsole.log('in main, a.done = %j, b.done = %j', a.done, b.done);\n</code></pre>\n<p>When <code>main.js</code> loads <code>a.js</code>, then <code>a.js</code> in turn loads <code>b.js</code>. At that point, <code>b.js</code> tries to load <code>a.js</code>. In order to prevent an infinite loop, an unfinished copy of the <code>a.js</code> exports object is returned to the <code>b.js</code> module. <code>b.js</code> then finishes loading, and its <code>exports</code> object is provided to the <code>a.js</code> module.</p>\n<p>By the time <code>main.js</code> has loaded both modules, they're both finished. The output of this program would thus be:</p>\n<pre><code>$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done = true, b.done = true\n</code></pre>\n<p>Careful planning is required to allow cyclic module dependencies to work correctly within an application.</p>\n<h3>File modules<a href=\"https://nodejs.org/api/modules.html#modules_file_modules\">#</a></h3>\n<p>If the exact filename is not found, then Node.js will attempt to load the required filename with the added extensions: <code>.js</code>, <code>.json</code>, and finally <code>.node</code>.</p>\n<p><code>.js</code> files are interpreted as JavaScript text files, and <code>.json</code> files are parsed as JSON text files. <code>.node</code> files are interpreted as compiled addon modules loaded with <code>process.dlopen()</code>.</p>\n<p>A required module prefixed with <code>'/'</code> is an absolute path to the file. For example, <code>require('/home/marco/foo.js')</code> will load the file at <code>/home/marco/foo.js</code>.</p>\n<p>A required module prefixed with <code>'./'</code> is relative to the file calling <code>require()</code>. That is, <code>circle.js</code> must be in the same directory as <code>foo.js</code> for <code>require('./circle')</code> to find it.</p>\n<p>Without a leading <code>'/'</code>, <code>'./'</code>, or <code>'../'</code> to indicate a file, the module must either be a core module or is loaded from a <code>node_modules</code> folder.</p>\n<p>If the given path does not exist, <code>require()</code> will throw an <a href=\"https://nodejs.org/api/errors.html#errors_class_error\"><code>Error</code></a> with its <code>code</code> property set to <code>'MODULE_NOT_FOUND'</code>.</p>\n<h3>Folders as modules<a href=\"https://nodejs.org/api/modules.html#modules_folders_as_modules\">#</a></h3>\n<p>It is convenient to organize programs and libraries into self-contained directories, and then provide a single entry point to those directories. There are three ways in which a folder may be passed to <code>require()</code> as an argument.</p>\n<p>The first is to create a <a href=\"https://nodejs.org/api/packages.html#packages_node_js_package_json_field_definitions\"><code>package.json</code></a> file in the root of the folder, which specifies a <code>main</code> module. An example <a href=\"https://nodejs.org/api/packages.html#packages_node_js_package_json_field_definitions\"><code>package.json</code></a> file might look like this:</p>\n<pre><code>{ \"name\" : \"some-library\",\n  \"main\" : \"./lib/some-library.js\" }\n</code></pre>\n<p>If this was in a folder at <code>./some-library</code>, then <code>require('./some-library')</code> would attempt to load <code>./some-library/lib/some-library.js</code>.</p>\n<p>This is the extent of the awareness of <code>package.json</code> files within Node.js.</p>\n<p>If there is no <a href=\"https://nodejs.org/api/packages.html#packages_node_js_package_json_field_definitions\"><code>package.json</code></a> file present in the directory, or if the <a href=\"https://nodejs.org/api/packages.html#packages_main\"><code>\"main\"</code></a> entry is missing or cannot be resolved, then Node.js will attempt to load an <code>index.js</code> or <code>index.node</code> file out of that directory. For example, if there was no <a href=\"https://nodejs.org/api/packages.html#packages_node_js_package_json_field_definitions\"><code>package.json</code></a> file in the previous example, then <code>require('./some-library')</code> would attempt to load:</p>\n<ul>\n<li><code>./some-library/index.js</code></li>\n<li><code>./some-library/index.node</code></li>\n</ul>\n<p>If these attempts fail, then Node.js will report the entire module as missing with the default error:</p>\n<pre><code>Error: Cannot find module 'some-library'\n</code></pre>\n<h3>Loading from <code>node_modules</code> folders<a href=\"https://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders\">#</a></h3>\n<p>If the module identifier passed to <code>require()</code> is not a <a href=\"https://nodejs.org/api/modules.html#modules_core_modules\">core</a> module, and does not begin with <code>'/'</code>, <code>'../'</code>, or <code>'./'</code>, then Node.js starts at the parent directory of the current module, and adds <code>/node_modules</code>, and attempts to load the module from that location. Node.js will not append <code>node_modules</code> to a path already ending in <code>node_modules</code>.</p>\n<p>If it is not found there, then it moves to the parent directory, and so on, until the root of the file system is reached.</p>\n<p>For example, if the file at <code>'/home/ry/projects/foo.js'</code> called <code>require('bar.js')</code>, then Node.js would look in the following locations, in this order:</p>\n<ul>\n<li><code>/home/ry/projects/node_modules/bar.js</code></li>\n<li><code>/home/ry/node_modules/bar.js</code></li>\n<li><code>/home/node_modules/bar.js</code></li>\n<li><code>/node_modules/bar.js</code></li>\n</ul>\n<p>This allows programs to localize their dependencies, so that they do not clash.</p>\n<p>It is possible to require specific files or sub modules distributed with a module by including a path suffix after the module name. For instance <code>require('example-module/path/to/file')</code> would resolve <code>path/to/file</code> relative to where <code>example-module</code> is located. The suffixed path follows the same module resolution semantics.</p>\n<h3>Loading from the global folders<a href=\"https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders\">#</a></h3>\n<p>If the <code>NODE_PATH</code> environment variable is set to a colon-delimited list of absolute paths, then Node.js will search those paths for modules if they are not found elsewhere.</p>\n<p>On Windows, <code>NODE_PATH</code> is delimited by semicolons (<code>;</code>) instead of colons.</p>\n<p><code>NODE_PATH</code> was originally created to support loading modules from varying paths before the current <a href=\"https://nodejs.org/api/modules.html#modules_all_together\">module resolution</a> algorithm was defined.</p>\n<p><code>NODE_PATH</code> is still supported, but is less necessary now that the Node.js ecosystem has settled on a convention for locating dependent modules. Sometimes deployments that rely on <code>NODE_PATH</code> show surprising behavior when people are unaware that <code>NODE_PATH</code> must be set. Sometimes a module's dependencies change, causing a different version (or even a different module) to be loaded as the <code>NODE_PATH</code> is searched.</p>\n<p>Additionally, Node.js will search in the following list of GLOBAL_FOLDERS:</p>\n<ul>\n<li>1: <code>$HOME/.node_modules</code></li>\n<li>2: <code>$HOME/.node_libraries</code></li>\n<li>3: <code>$PREFIX/lib/node</code></li>\n</ul>\n<p>Where <code>$HOME</code> is the user's home directory, and <code>$PREFIX</code> is the Node.js configured <code>node_prefix</code>.</p>\n<p>These are mostly for historic reasons.</p>\n<p>It is strongly encouraged to place dependencies in the local <code>node_modules</code> folder. These will be loaded faster, and more reliably.</p>\n<h3>The module wrapper<a href=\"https://nodejs.org/api/modules.html#modules_the_module_wrapper\">#</a></h3>\n<p>Before a module's code is executed, Node.js will wrap it with a function wrapper that looks like the following:</p>\n<pre><code>(function(exports, require, module, __filename, __dirname) {\n// Module code actually lives in here\n});\n</code></pre>\n<p>By doing this, Node.js achieves a few things:</p>\n<ul>\n<li>It keeps top-level variables (defined with <code>var</code>, <code>const</code> or <code>let</code>) scoped to the module rather than the global object.</li>\n<li>\n<p>It helps to provide some global-looking variables that are actually specific to the module, such as:</p>\n<ul>\n<li>The <code>module</code> and <code>exports</code> objects that the implementor can use to export values from the module.</li>\n<li>The convenience variables <code>__filename</code> and <code>__dirname</code>, containing the module's absolute filename and directory path.</li>\n</ul>\n</li>\n</ul>\n<h3>The module scope<a href=\"https://nodejs.org/api/modules.html#modules_the_module_scope\">#</a></h3>\n<h4><code>__dirname</code><a href=\"https://nodejs.org/api/modules.html#modules_dirname\">#</a></h4>\n<p>Added in: v0.1.27</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\"><string></a></li>\n</ul>\n<p>The directory name of the current module. This is the same as the <a href=\"https://nodejs.org/api/path.html#path_path_dirname_path\"><code>path.dirname()</code></a> of the <a href=\"https://nodejs.org/api/modules.html#modules_filename\"><code>__filename</code></a>.</p>\n<p>Example: running <code>node example.js</code> from <code>/Users/mjr</code></p>\n<pre><code>console.log(__dirname);\n// Prints: /Users/mjr\nconsole.log(path.dirname(__filename));\n// Prints: /Users/mjr\n</code></pre>\n<h4><code>__filename</code><a href=\"https://nodejs.org/api/modules.html#modules_filename\">#</a></h4>\n<p>Added in: v0.0.1</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\"><string></a></li>\n</ul>\n<p>The file name of the current module. This is the current module file's absolute path with symlinks resolved.</p>\n<p>For a main program this is not necessarily the same as the file name used in the command line.</p>\n<p>See <a href=\"https://nodejs.org/api/modules.html#modules_dirname\"><code>__dirname</code></a> for the directory name of the current module.</p>\n<p>Examples:</p>\n<p>Running <code>node example.js</code> from <code>/Users/mjr</code></p>\n<pre><code>console.log(__filename);\n// Prints: /Users/mjr/example.js\nconsole.log(__dirname);\n// Prints: /Users/mjr\n</code></pre>\n<p>Given two modules: <code>a</code> and <code>b</code>, where <code>b</code> is a dependency of <code>a</code> and there is a directory structure of:</p>\n<ul>\n<li><code>/Users/mjr/app/a.js</code></li>\n<li><code>/Users/mjr/app/node_modules/b/b.js</code></li>\n</ul>\n<p>References to <code>__filename</code> within <code>b.js</code> will return <code>/Users/mjr/app/node_modules/b/b.js</code> while references to <code>__filename</code> within <code>a.js</code> will return <code>/Users/mjr/app/a.js</code>.</p>\n<h4><code>exports</code><a href=\"https://nodejs.org/api/modules.html#modules_exports\">#</a></h4>\n<p>Added in: v0.1.12</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><Object></a></li>\n</ul>\n<p>A reference to the <code>module.exports</code> that is shorter to type. See the section about the <a href=\"https://nodejs.org/api/modules.html#modules_exports_shortcut\">exports shortcut</a> for details on when to use <code>exports</code> and when to use <code>module.exports</code>.</p>\n<h4><code>module</code><a href=\"https://nodejs.org/api/modules.html#modules_module\">#</a></h4>\n<p>Added in: v0.1.16</p>\n<ul>\n<li><a href=\"https://nodejs.org/api/modules.html#modules_the_module_object\"><module></a></li>\n</ul>\n<p>A reference to the current module, see the section about the <a href=\"https://nodejs.org/api/modules.html#modules_the_module_object\"><code>module</code> object</a>. In particular, <code>module.exports</code> is used for defining what a module exports and makes available through <code>require()</code>.</p>\n<h4><code>require(id)</code><a href=\"https://nodejs.org/api/modules.html#modules_require_id\">#</a></h4>\n<p>Added in: v0.1.13</p>\n<ul>\n<li><code>id</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\"><string></a> module name or path</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types\"><any></a> exported module content</li>\n</ul>\n<p>Used to import modules, <code>JSON</code>, and local files. Modules can be imported from <code>node_modules</code>. Local modules and JSON files can be imported using a relative path (e.g. <code>./</code>, <code>./foo</code>, <code>./bar/baz</code>, <code>../foo</code>) that will be resolved against the directory named by <a href=\"https://nodejs.org/api/modules.html#modules_dirname\"><code>__dirname</code></a> (if defined) or the current working directory. The relative paths of POSIX style are resolved in an OS independent fashion, meaning that the examples above will work on Windows in the same way they would on Unix systems.</p>\n<pre><code>// Importing a local module with a path relative to the `__dirname` or current\n// working directory. (On Windows, this would resolve to .\\path\\myLocalModule.)\nconst myLocalModule = require('./path/myLocalModule');\n\n// Importing a JSON file:\nconst jsonData = require('./path/filename.json');\n\n// Importing a module from node_modules or Node.js built-in module:\nconst crypto = require('crypto');\n</code></pre>\n<h5><code>require.cache</code><a href=\"https://nodejs.org/api/modules.html#modules_require_cache\">#</a></h5>\n<p>Added in: v0.3.0</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><Object></a></li>\n</ul>\n<p>Modules are cached in this object when they are required. By deleting a key value from this object, the next <code>require</code> will reload the module. This does not apply to <a href=\"https://nodejs.org/api/addons.html\">native addons</a>, for which reloading will result in an error.</p>\n<p>Adding or replacing entries is also possible. This cache is checked before native modules and if a name matching a native module is added to the cache, only <code>node:</code>-prefixed require calls are going to receive the native module. Use with care!</p>\n<pre><code>const assert = require('assert');\nconst realFs = require('fs');\n\nconst fakeFs = {};\nrequire.cache.fs = { exports: fakeFs };\n\nassert.strictEqual(require('fs'), fakeFs);\nassert.strictEqual(require('node:fs'), realFs);\n</code></pre>\n<h5><code>require.extensions</code><a href=\"https://nodejs.org/api/modules.html#modules_require_extensions\">#</a></h5>\n<p>Added in: v0.3.0Deprecated since: v0.10.6</p>\n<p><a href=\"https://nodejs.org/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><Object></a></li>\n</ul>\n<p>Instruct <code>require</code> on how to handle certain file extensions.</p>\n<p>Process files with the extension <code>.sjs</code> as <code>.js</code>:</p>\n<pre><code>require.extensions['.sjs'] = require.extensions['.js'];\n</code></pre>\n<p>Deprecated. In the past, this list has been used to load non-JavaScript modules into Node.js by compiling them on-demand. However, in practice, there are much better ways to do this, such as loading modules via some other Node.js program, or compiling them to JavaScript ahead of time.</p>\n<p>Avoid using <code>require.extensions</code>. Use could cause subtle bugs and resolving the extensions gets slower with each registered extension.</p>\n<h5><code>require.main</code><a href=\"https://nodejs.org/api/modules.html#modules_require_main\">#</a></h5>\n<p>Added in: v0.1.17</p>\n<ul>\n<li><a href=\"https://nodejs.org/api/modules.html#modules_the_module_object\"><module></a></li>\n</ul>\n<p>The <code>Module</code> object representing the entry script loaded when the Node.js process launched. See <a href=\"https://nodejs.org/api/modules.html#modules_accessing_the_main_module\">\"Accessing the main module\"</a>.</p>\n<p>In <code>entry.js</code> script:</p>\n<pre><code>console.log(require.main);\n</code></pre>\n<pre><code>node entry.js\n</code></pre>\n<pre><code>Module {\n  id: '.',\n  path: '/absolute/path/to',\n  exports: {},\n  filename: '/absolute/path/to/entry.js',\n  loaded: false,\n  children: [],\n  paths:\n   [ '/absolute/path/to/node_modules',\n     '/absolute/path/node_modules',\n     '/absolute/node_modules',\n     '/node_modules' ] }\n</code></pre>\n<h5><code>require.resolve(request[, options])</code><a href=\"https://nodejs.org/api/modules.html#modules_require_resolve_request_options\">#</a></h5>\n<p>History</p>\n<ul>\n<li><code>request</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\"><string></a> The module path to resolve.</li>\n<li>\n<p><code>options</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><Object></a></p>\n<ul>\n<li><code>paths</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\">&#x3C;string[]></a> Paths to resolve module location from. If present, these paths are used instead of the default resolution paths, with the exception of <a href=\"https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders\">GLOBAL_FOLDERS</a> like <code>$HOME/.node_modules</code>, which are always included. Each of these paths is used as a starting point for the module resolution algorithm, meaning that the <code>node_modules</code> hierarchy is checked from this location.</li>\n</ul>\n</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\"><string></a></li>\n</ul>\n<p>Use the internal <code>require()</code> machinery to look up the location of a module, but rather than loading the module, just return the resolved filename.</p>\n<p>If the module can not be found, a <code>MODULE_NOT_FOUND</code> error is thrown.</p>\n<h6><code>require.resolve.paths(request)</code><a href=\"https://nodejs.org/api/modules.html#modules_require_resolve_paths_request\">#</a></h6>\n<p>Added in: v8.9.0</p>\n<ul>\n<li><code>request</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\"><string></a> The module path whose lookup paths are being retrieved.</li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\">&#x3C;string[]></a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\"><null></a></li>\n</ul>\n<p>Returns an array containing the paths searched during resolution of <code>request</code> or <code>null</code> if the <code>request</code> string references a core module, for example <code>http</code> or <code>fs</code>.</p>\n<h3>The <code>module</code> object<a href=\"https://nodejs.org/api/modules.html#modules_the_module_object\">#</a></h3>\n<p>Added in: v0.1.16</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><Object></a></li>\n</ul>\n<p>In each module, the <code>module</code> free variable is a reference to the object representing the current module. For convenience, <code>module.exports</code> is also accessible via the <code>exports</code> module-global. <code>module</code> is not actually a global but rather local to each module.</p>\n<h4><code>module.children</code><a href=\"https://nodejs.org/api/modules.html#modules_module_children\">#</a></h4>\n<p>Added in: v0.1.16</p>\n<ul>\n<li><a href=\"https://nodejs.org/api/modules.html#modules_the_module_object\">&#x3C;module[]></a></li>\n</ul>\n<p>The module objects required for the first time by this one.</p>\n<h4><code>module.exports</code><a href=\"https://nodejs.org/api/modules.html#modules_module_exports\">#</a></h4>\n<p>Added in: v0.1.16</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"><Object></a></li>\n</ul>\n<p>The <code>module.exports</code> object is created by the <code>Module</code> system. Sometimes this is not acceptable; many want their module to be an instance of some class. To do this, assign the desired export object to <code>module.exports</code>. Assigning the desired object to <code>exports</code> will simply rebind the local <code>exports</code> variable, which is probably not what is desired.</p>\n<p>For example, suppose we were making a module called <code>a.js</code>:</p>\n<pre><code>const EventEmitter = require('events');\n\nmodule.exports = new EventEmitter();\n\n// Do some work, and after some time emit\n// the 'ready' event from the module itself.\nsetTimeout(() => {\n  module.exports.emit('ready');\n}, 1000);\n</code></pre>\n<p>Then in another file we could do:</p>\n<pre><code>const a = require('./a');\na.on('ready', () => {\n  console.log('module \"a\" is ready');\n});\n</code></pre>\n<p>Assignment to <code>module.exports</code> must be done immediately. It cannot be done in any callbacks. This does not work:</p>\n<p><code>x.js</code>:</p>\n<pre><code>setTimeout(() => {\n  module.exports = { a: 'hello' };\n}, 0);\n</code></pre>\n<p><code>y.js</code>:</p>\n<pre><code>const x = require('./x');\nconsole.log(x.a);\n</code></pre>\n<h5><code>exports</code> shortcut<a href=\"https://nodejs.org/api/modules.html#modules_exports_shortcut\">#</a></h5>\n<p>Added in: v0.1.16</p>\n<p>The <code>exports</code> variable is available within a module's file-level scope, and is assigned the value of <code>module.exports</code> before the module is evaluated.</p>\n<p>It allows a shortcut, so that <code>module.exports.f = ...</code> can be written more succinctly as <code>exports.f = ...</code>. However, be aware that like any variable, if a new value is assigned to <code>exports</code>, it is no longer bound to <code>module.exports</code>:</p>\n<pre><code>module.exports.hello = true; // Exported from require of module\nexports = { hello: false };  // Not exported, only available in the module\n</code></pre>\n<p>When the <code>module.exports</code> property is being completely replaced by a new object, it is common to also reassign <code>exports</code>:</p>\n<pre><code>module.exports = exports = function Constructor() {\n  // ... etc.\n};\n</code></pre>\n<p>To illustrate the behavior, imagine this hypothetical implementation of <code>require()</code>, which is quite similar to what is actually done by <code>require()</code>:</p>\n<pre><code>function require(/* ... */) {\n  const module = { exports: {} };\n  ((module, exports) => {\n    // Module code here. In this example, define a function.\n    function someFunc() {}\n    exports = someFunc;\n    // At this point, exports is no longer a shortcut to module.exports, and\n    // this module will still export an empty default object.\n    module.exports = someFunc;\n    // At this point, the module will now export someFunc, instead of the\n    // default object.\n  })(module, module.exports);\n  return module.exports;\n}\n</code></pre>\n<h4><code>module.filename</code><a href=\"https://nodejs.org/api/modules.html#modules_module_filename\">#</a></h4>\n<p>Added in: v0.1.16</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\"><string></a></li>\n</ul>\n<p>The fully resolved filename of the module.</p>\n<h4><code>module.id</code><a href=\"https://nodejs.org/api/modules.html#modules_module_id\">#</a></h4>\n<p>Added in: v0.1.16</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\"><string></a></li>\n</ul>\n<p>The identifier for the module. Typically this is the fully resolved filename.</p>\n<h4><code>module.isPreloading</code><a href=\"https://nodejs.org/api/modules.html#modules_module_ispreloading\">#</a></h4>\n<p>Added in: v15.4.0</p>\n<ul>\n<li>Type: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\"><boolean></a> <code>true</code> if the module is running during the Node.js preload phase.</li>\n</ul>\n<h4><code>module.loaded</code><a href=\"https://nodejs.org/api/modules.html#modules_module_loaded\">#</a></h4>\n<p>Added in: v0.1.16</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type\"><boolean></a></li>\n</ul>\n<p>Whether or not the module is done loading, or is in the process of loading.</p>\n<h4><code>module.parent</code><a href=\"https://nodejs.org/api/modules.html#modules_module_parent\">#</a></h4>\n<p>Added in: v0.1.16Deprecated since: v14.6.0, v12.19.0</p>\n<p><a href=\"https://nodejs.org/api/documentation.html#documentation_stability_index\">Stability: 0</a> - Deprecated: Please use <a href=\"https://nodejs.org/api/modules.html#modules_require_main\"><code>require.main</code></a> and <a href=\"https://nodejs.org/api/modules.html#modules_module_children\"><code>module.children</code></a> instead.</p>\n<ul>\n<li><a href=\"https://nodejs.org/api/modules.html#modules_the_module_object\"><module></a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Null_type\"><null></a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type\"><undefined></a></li>\n</ul>\n<p>The module that first required this one, or <code>null</code> if the current module is the entry point of the current process, or <code>undefined</code> if the module was loaded by something that is not a CommonJS module (E.G.: REPL or <code>import</code>).</p>\n<h4><code>module.path</code><a href=\"https://nodejs.org/api/modules.html#modules_module_path\">#</a></h4>\n<p>Added in: v11.14.0</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\"><string></a></li>\n</ul>\n<p>The directory name of the module. This is usually the same as the <a href=\"https://nodejs.org/api/path.html#path_path_dirname_path\"><code>path.dirname()</code></a> of the <a href=\"https://nodejs.org/api/modules.html#modules_module_id\"><code>module.id</code></a>.</p>\n<h4><code>module.paths</code><a href=\"https://nodejs.org/api/modules.html#modules_module_paths\">#</a></h4>\n<p>Added in: v0.4.0</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\">&#x3C;string[]></a></li>\n</ul>\n<p>The search paths for the module.</p>\n<h4><code>module.require(id)</code><a href=\"https://nodejs.org/api/modules.html#modules_module_require_id\">#</a></h4>\n<p>Added in: v0.5.1</p>\n<ul>\n<li><code>id</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type\"><string></a></li>\n<li>Returns: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Data_types\"><any></a> exported module content</li>\n</ul>\n<p>The <code>module.require()</code> method provides a way to load a module as if <code>require()</code> was called from the original module.</p>\n<p>In order to do this, it is necessary to get a reference to the <code>module</code> object. Since <code>require()</code> returns the <code>module.exports</code>, and the <code>module</code> is typically <em>only</em> available within a specific module's code, it must be explicitly exported in order to be used.</p>\n<h3>The <code>Module</code> object<a href=\"https://nodejs.org/api/modules.html#modules_the_module_object_1\">#</a></h3>\n<p>This section was moved to <a href=\"https://nodejs.org/api/module.html#module_the_module_object\">Modules: <code>module</code> core module</a>.</p>\n<ul>\n<li><a href=\"https://nodejs.org/api/module.html#module_module_builtinmodules\"><code>module.builtinModules</code></a></li>\n<li><a href=\"https://nodejs.org/api/module.html#module_module_createrequire_filename\"><code>module.createRequire(filename)</code></a></li>\n<li><a href=\"https://nodejs.org/api/module.html#module_module_syncbuiltinesmexports\"></a></li>\n</ul>"},{"url":"/docs/articles/os-module/","relativePath":"docs/articles/os-module.md","relativeDir":"docs/articles","base":"os-module.md","name":"os-module","frontmatter":{"title":"OS-Module","sections":[],"seo":{"title":"","description":"OS-Module","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>This module provides many functions that you can use to retrieve information from the underlying operating system and the computer the program runs on, and interact with it.</h1>\n<pre><code class=\"language-js\">const os = require('os');\n</code></pre>\n<p>There are a few useful properties that tell us some key things related to handling files:</p>\n<p><code>os.EOL</code> gives the line delimiter sequence. It's <code>\\n</code> on Linux and macOS, and <code>\\r\\n</code> on Windows.</p>\n<p><code>os.constants.signals</code> tells us all the constants related to handling process signals, like SIGHUP, SIGKILL and so on.</p>\n<p><code>os.constants.errno</code> sets the constants for error reporting, like EADDRINUSE, EOVERFLOW and more.</p>\n<p>You can read them all on <a href=\"https://nodejs.org/api/os.html#os_signal_constants\">https://nodejs.org/api/os.html#os_signal_constants</a>.</p>\n<p>Let's now see the main methods that <code>os</code> provides:</p>\n<h2><code>os.arch()</code></h2>\n<p>Return the string that identifies the underlying architecture, like <code>arm</code>, <code>x64</code>, <code>arm64</code>.</p>\n<h2><code>os.cpus()</code></h2>\n<p>Return information on the CPUs available on your system.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">[\n    {\n        model: 'Intel(R) Core(TM)2 Duo CPU     P8600  @ 2.40GHz',\n        speed: 2400,\n        times: {\n            user: 281685380,\n            nice: 0,\n            sys: 187986530,\n            idle: 685833750,\n            irq: 0\n        }\n    },\n    {\n        model: 'Intel(R) Core(TM)2 Duo CPU     P8600  @ 2.40GHz',\n        speed: 2400,\n        times: {\n            user: 282348700,\n            nice: 0,\n            sys: 161800480,\n            idle: 703509470,\n            irq: 0\n        }\n    }\n];\n</code></pre>\n<h2><code>os.endianness()</code></h2>\n<p>Return <code>BE</code> or <code>LE</code> depending if Node.js was compiled with <a href=\"https://en.wikipedia.org/wiki/Endianness\">Big Endian or Little Endian</a>.</p>\n<h2><code>os.freemem()</code></h2>\n<p>Return the number of bytes that represent the free memory in the system.</p>\n<h2><code>os.homedir()</code></h2>\n<p>Return the path to the home directory of the current user.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">'/Users/joe';\n</code></pre>\n<h2><code>os.hostname()</code></h2>\n<p>Return the host name.</p>\n<h2><code>os.loadavg()</code></h2>\n<p>Return the calculation made by the operating system on the load average.</p>\n<p>It only returns a meaningful value on Linux and macOS.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">[3.68798828125, 4.00244140625, 11.1181640625];\n</code></pre>\n<h2><code>os.networkInterfaces()</code></h2>\n<p>Returns the details of the network interfaces available on your system.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">{ lo0:\n   [ { address: '127.0.0.1',\n       netmask: '255.0.0.0',\n       family: 'IPv4',\n       mac: 'fe:82:00:00:00:00',\n       internal: true },\n     { address: '::1',\n       netmask: 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff',\n       family: 'IPv6',\n       mac: 'fe:82:00:00:00:00',\n       scopeid: 0,\n       internal: true },\n     { address: 'fe80::1',\n       netmask: 'ffff:ffff:ffff:ffff::',\n       family: 'IPv6',\n       mac: 'fe:82:00:00:00:00',\n       scopeid: 1,\n       internal: true } ],\n  en1:\n   [ { address: 'fe82::9b:8282:d7e6:496e',\n       netmask: 'ffff:ffff:ffff:ffff::',\n       family: 'IPv6',\n       mac: '06:00:00:02:0e:00',\n       scopeid: 5,\n       internal: false },\n     { address: '192.168.1.38',\n       netmask: '255.255.255.0',\n       family: 'IPv4',\n       mac: '06:00:00:02:0e:00',\n       internal: false } ],\n  utun0:\n   [ { address: 'fe80::2513:72bc:f405:61d0',\n       netmask: 'ffff:ffff:ffff:ffff::',\n       family: 'IPv6',\n       mac: 'fe:80:00:20:00:00',\n       scopeid: 8,\n       internal: false } ] }\n</code></pre>\n<h2><code>os.platform()</code></h2>\n<p>Return the platform that Node.js was compiled for:</p>\n<ul>\n<li><code>darwin</code></li>\n<li><code>freebsd</code></li>\n<li><code>linux</code></li>\n<li><code>openbsd</code></li>\n<li><code>win32</code></li>\n<li>...more</li>\n</ul>\n<h2><code>os.release()</code></h2>\n<p>Returns a string that identifies the operating system release number</p>\n<h2><code>os.tmpdir()</code></h2>\n<p>Returns the path to the assigned temp folder.</p>\n<h2><code>os.totalmem()</code></h2>\n<p>Returns the number of bytes that represent the total memory available in the system.</p>\n<h2><code>os.type()</code></h2>\n<p>Identifies the operating system:</p>\n<ul>\n<li><code>Linux</code></li>\n<li><code>Darwin</code> on macOS</li>\n<li><code>Windows_NT</code> on Windows</li>\n</ul>\n<h2><code>os.uptime()</code></h2>\n<p>Returns the number of seconds the computer has been running since it was last rebooted.</p>\n<h2><code>os.userInfo()</code></h2>\n<p>Returns an object that contains the current <code>username</code>, <code>uid</code>, <code>gid</code>, <code>shell</code>, and <code>homedir</code></p>"},{"url":"/docs/articles/semantic/","relativePath":"docs/articles/semantic.md","relativeDir":"docs/articles","base":"semantic.md","name":"semantic","frontmatter":{"title":"Semantic Versioning","sections":[],"seo":{"title":"","description":"Semantic Versioning using npm","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<p>If there's one great thing in Node.js packages, it's that they all agreed on using Semantic Versioning for their version numbering.</p>\n<p>The Semantic Versioning concept is simple: all versions have 3 digits: <code>x.y.z</code>.</p>\n<ul>\n<li>the first digit is the major version</li>\n<li>the second digit is the minor version</li>\n<li>the third digit is the patch version</li>\n</ul>\n<p>When you make a new release, you don't just up a number as you please, but you have rules:</p>\n<ul>\n<li>you up the major version when you make incompatible API changes</li>\n<li>you up the minor version when you add functionality in a backward-compatible manner</li>\n<li>you up the patch version when you make backward-compatible bug fixes</li>\n</ul>\n<p>The convention is adopted all across programming languages, and it is very important that every <code>npm</code> package adheres to it, because the whole system depends on that.</p>\n<p>Why is that so important?</p>\n<p>Because <code>npm</code> set some rules we can use in the <code>package.json</code> file to choose which versions it can update our packages to, when we run <code>npm update</code>.</p>\n<p>The rules use those symbols:</p>\n<ul>\n<li><code>^</code></li>\n<li><code>~</code></li>\n<li><code>></code></li>\n<li><code>>=</code></li>\n<li><code>&#x3C;</code></li>\n<li><code>&#x3C;=</code></li>\n<li><code>=</code></li>\n<li><code>-</code></li>\n<li><code>||</code></li>\n</ul>\n<p>Let's see those rules in detail:</p>\n<ul>\n<li><code>^</code>: It will only do updates that do not change the leftmost non-zero number. If you write <code>^0.13.0</code>, when running <code>npm update</code>, it can update to <code>0.13.1</code>, <code>0.13.2</code>, and so on, but not to <code>0.14.0</code> or above. If you write <code>^1.13.0</code>, when running <code>npm update</code>, it can update to <code>1.13.1</code>, <code>1.14.0</code> and so on, but will not update to <code>2.0.0</code> or above.</li>\n<li><code>~</code>: if you write <code>~0.13.0</code>, when running <code>npm update</code> it can update to patch releases: <code>0.13.1</code> is ok, but <code>0.14.0</code> is not.</li>\n<li><code>></code>: you accept any version higher than the one you specify</li>\n<li><code>>=</code>: you accept any version equal to or higher than the one you specify</li>\n<li><code>&#x3C;=</code>: you accept any version equal or lower to the one you specify</li>\n<li><code>&#x3C;</code>: you accept any version lower to the one you specify</li>\n<li><code>=</code>: you accept that exact version</li>\n<li><code>-</code>: you accept a range of versions. Example: <code>2.1.0 - 2.6.2</code></li>\n<li><code>||</code>: you combine sets. Example: <code>&#x3C; 2.1 || > 2.6</code></li>\n</ul>\n<p>You can combine some of those notations, for example use <code>1.0.0 || >=1.1.0 &#x3C;1.2.0</code> to either use 1.0.0 or one release from 1.1.0 up, but lower than 1.2.0.</p>\n<p>There are other rules, too:</p>\n<ul>\n<li>no symbol: you accept only that specific version you specify (<code>1.2.1</code>)</li>\n<li><code>latest</code>: you want to use the latest version available</li>\n</ul>"},{"url":"/docs/articles/v8/","relativePath":"docs/articles/v8.md","relativeDir":"docs/articles","base":"v8.md","name":"v8","frontmatter":{"title":"npm global or local packages","weight":1,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<p>The main difference between local and global packages is this:</p>\n<ul>\n<li><strong>local packages</strong> are installed in the directory where you run npm install &#x3C;package-name>, and they are put in the node_modules folder under this directory</li>\n<li><strong>global packages</strong> are all put in a single place in your system (exactly where depends on your setup), regardless of where you run npm install -g &#x3C;package-name></li>\n</ul>\n<p>In your code you can only require local packages:</p>\n<p>so when should you install in one way or another?</p>\n<p>In general, <strong>all packages should be installed locally</strong>.</p>\n<p>This makes sure you can have dozens of applications in your computer, all running a different version of each package if needed.</p>\n<p>Updating a global package would make all your projects use the new release, and as you can imagine this might cause nightmares in terms of maintenance, as some packages might break compatibility with further dependencies, and so on.</p>\n<p>All projects have their own local version of a package, even if this might appear like a waste of resources, it's minimal compared to the possible negative consequences.</p>\n<p>A package <strong>should be installed globally</strong> when it provides an executable command that you run from the shell (CLI), and it's reused across projects.</p>\n<p>You can also install executable commands locally and run them using npx, but some packages are just better installed globally.</p>\n<p>Great examples of popular global packages which you might know are</p>\n<ul>\n<li>npm</li>\n<li>create-react-app</li>\n<li>vue-cli</li>\n<li>grunt-cli</li>\n<li>mocha</li>\n<li>react-native-cli</li>\n<li>gatsby-cli</li>\n<li>forever</li>\n<li>nodemon</li>\n</ul>\n<p>You probably have some packages installed globally already on your system. You can see them by running</p>\n<p>on your command line.</p>"},{"url":"/docs/articles/understanding-firebase/","relativePath":"docs/articles/understanding-firebase.md","relativeDir":"docs/articles","base":"understanding-firebase.md","name":"understanding-firebase","frontmatter":{"title":"Firebase","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h1>Understand Firebase projects</h1>\n<p><strong>Note:</strong> If you're using the <a href=\"https://firebase.google.com/docs/projects/api/reference/rest?authuser=0\">Firebase Management REST API</a> to programmatically create a Firebase project, you must first <a href=\"https://cloud.google.com/resource-manager/reference/rest/v1/projects?authuser=0\">create a Google Cloud project</a>, then <a href=\"https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects/addFirebase?authuser=0\">add Firebase services</a> to the existing project.<strong>Note:</strong> The <a href=\"https://firebase.google.com/docs/projects/learn-more?authuser=0#project-number\">project number</a> and the <a href=\"https://firebase.google.com/docs/projects/learn-more?authuser=0#project-id\">project ID</a> are the truly <em>unique identifiers</em> for a project across all of Firebase and Google Cloud.<strong>After Firebase provisions resources for a Firebase project, you cannot change its project ID.</strong> To use a specific identifier for Firebase resources, you must edit the project ID during the initial creation of the project.<strong>Caution:</strong> We do not recommend manually modifying an app's Firebase config file or object. If you initialize an app with invalid or missing values for any of these required \"Firebase options\", then your end users may experience serious issues.<strong>Note:</strong> For each Android app, if you provide a SHA-1 key for the app, you need to provide a package name and SHA-1 key combination that is globally unique across all of Google Cloud.</p>\n<p>This page offers brief overviews of several important concepts about Firebase projects. When available, follow the links to find more detailed information about features, services, and even other platforms. At the bottom of this page, find a listing of <a href=\"https://firebase.google.com/docs/projects/learn-more?authuser=0#best-practices\">general best practices</a> for Firebase projects.</p>\n<h2>Relationship between Firebase projects, apps, and products</h2>\n<p>A Firebase project is the top-level entity for Firebase. In a project, you create Firebase apps by registering your iOS, Android, or web apps. After you register your apps with Firebase, you can add the Firebase SDKs for any number of <a href=\"https://firebase.google.com/products/?authuser=0\">Firebase products</a>, like Analytics, Cloud Firestore, Performance Monitoring, or Remote Config.</p>\n<p>Learn more detailed information about this process in the Getting Started guides (<a href=\"https://firebase.google.com/docs/ios/setup?authuser=0\">iOS</a> | <a href=\"https://firebase.google.com/docs/android/setup?authuser=0\">Android</a> | <a href=\"https://firebase.google.com/docs/web/setup?authuser=0\">web</a> | <a href=\"https://firebase.google.com/docs/unity/setup?authuser=0\">Unity</a> | <a href=\"https://firebase.google.com/docs/cpp/setup?authuser=0\">C++</a>).</p>\n<h2>Relationship between Firebase projects and Google Cloud</h2>\n<p>When you create a new Firebase project in the Firebase console, you're actually creating a <a href=\"https://cloud.google.com/docs/overview/?authuser=0#projects\">Google Cloud project</a> behind the scenes. You can think of a Google Cloud project as a virtual container for data, code, configuration, and services. <strong>A Firebase project is a Google Cloud project that has additional Firebase-specific configurations and services.</strong> You can even create a Google Cloud project first, then add Firebase to the project later.</p>\n<p>Since a Firebase project <strong><em>is</em></strong> a Google Cloud project:</p>\n<ul>\n<li>Projects that appear in the <a href=\"https://console.firebase.google.com/?authuser=0\">Firebase console</a> also appear in the <a href=\"https://cloud.google.com/docs/overview/?authuser=0#google-cloud-console\">Google Cloud Console</a> and <a href=\"https://console.cloud.google.com/apis/?authuser=0\">Google APIs console</a>.</li>\n<li><a href=\"https://firebase.google.com/pricing/?authuser=0\">Billing</a> and <a href=\"https://firebase.google.com/docs/projects/iam/overview?authuser=0\">permissions</a> for projects are shared across Firebase and Google Cloud.</li>\n<li>Unique identifiers for a project (like the <a href=\"https://firebase.google.com/docs/projects/learn-more?authuser=0#project-number\">project number</a> and the <a href=\"https://firebase.google.com/docs/projects/learn-more?authuser=0#project-id\">project ID</a>) are shared across Firebase and Google Cloud.</li>\n<li>You can use products and APIs from both Firebase and Google Cloud in a project.</li>\n<li>Deleting a project deletes it across Firebase and Google Cloud.</li>\n</ul>\n<h2>Setting up a Firebase project and registering apps</h2>\n<p>You can set up a Firebase project and register apps in the <a href=\"https://console.firebase.google.com/?authuser=0\">Firebase console</a> (or, for advanced use cases, via the <a href=\"https://firebase.google.com/docs/projects/api/reference/rest?authuser=0\">Firebase Management REST API</a> or the <a href=\"https://firebase.google.com/docs/cli?authuser=0#management-commands\">Firebase CLI</a>). When you set up a project and register apps, you need to make some organizational decisions and add Firebase-specific configuration information to your local projects.</p>\n<p>Make sure to review some <a href=\"https://firebase.google.com/docs/projects/learn-more?authuser=0#best-practices\">general project-level best practices</a> (at the bottom of this page) before setting up a project and registering apps.</p>\n<h3>The project name</h3>\n<p>When you create a project, you provide a <strong>project name</strong>. This identifier is the <em>internal-only name</em> for a project in the <a href=\"https://firebase.google.com/docs/projects/learn-more?authuser=0#manage-console\">Firebase console</a>, the <a href=\"https://cloud.google.com/docs/overview/?authuser=0#google-cloud-console\">Google Cloud Console</a>, and the <a href=\"https://firebase.google.com/docs/projects/learn-more?authuser=0#manage-cli\">Firebase CLI</a>. The project name is not exposed in any publicly visible Firebase or Google Cloud product, service, or resource; it simply serves to help you more easily distinguish among multiple projects.</p>\n<p>You can edit a project name at any time in the settings <a href=\"https://console.firebase.google.com/project/_/settings/general/?authuser=0\"><strong>Project settings</strong></a> of the Firebase console. The project name is displayed in the top pane.</p>\n<h3>The project number</h3>\n<p>A Firebase project (and its <a href=\"https://firebase.google.com/docs/projects/learn-more?authuser=0#firebase-cloud-relationship\">associated Google Cloud project</a>) has a <strong>project number</strong>. This is the Google-assigned globally unique canonical identifier for the project. Use this identifier when configuring integrations and/or making API calls to Firebase, Google, or third-party services.</p>\n<h4>API calls and the project number</h4>\n<p>For many API calls, you need to include a unique identifier for a project. Although many APIs accept the <a href=\"https://firebase.google.com/docs/projects/learn-more?authuser=0#project-id\">project ID</a>, it's recommended that you use the <strong>project number</strong> for making API calls to Firebase, Google, or third-party services.</p>\n<p>Learn more about using project identifiers, especially the project number, in Google's <a href=\"https://google.aip.dev/cloud/2510\">AIP 2510 standard</a>.</p>\n<h4>Find the project number</h4>\n<ul>\n<li>Firebase console: Click settings <a href=\"https://console.firebase.google.com/project/_/settings/general/?authuser=0\"><strong>Project settings</strong></a>. The project number is displayed in the top pane.</li>\n<li>Firebase CLI: Run firebase projects:list. The project number is displayed along with all the Firebase projects associated with your account.</li>\n<li>Firebase Management REST API: Call <a href=\"https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects/list?authuser=0\">projects.list</a>. The response body contains the project number in the <a href=\"https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects?authuser=0#FirebaseProject\">FirebaseProject</a> object.</li>\n</ul>\n<h3>The project ID</h3>\n<p>A Firebase project (and its <a href=\"https://firebase.google.com/docs/projects/learn-more?authuser=0#firebase-cloud-relationship\">associated Google Cloud project</a>) has a <strong>project ID</strong>. This is a user-defined unique identifier for the project across all of Firebase and Google Cloud. When you create a Firebase project, Firebase automatically assigns a unique ID to the project, but you can edit it during project setup. This identifier should generally be treated as a convenience alias to reference the project.</p>\n<p>If you delete a project, the project ID is also deleted and can never be used again by any other project.</p>\n<h4>Firebase resources and the project ID</h4>\n<p>The project ID displays in publicly visible Firebase resources, for example:</p>\n<ul>\n<li>Default Hosting subdomain — <strong>PROJECT_ID</strong>.web.app and <strong>PROJECT_ID</strong>.firebaseapp.com</li>\n<li>Default Realtime Database URL — <strong>PROJECT_ID</strong>-default-rtdb.firebaseio.com or <strong>PROJECT_ID</strong>-default-rtdb.<strong>REGION_CODE</strong>.firebasedatabase.app</li>\n<li>Default Cloud Storage bucket name — <strong>PROJECT_ID</strong>.appspot.com</li>\n</ul>\n<p>For all of the aforementioned resources, you can create non-default instances. The publicly visible names of non-defaults are fully-customizable. You can <a href=\"https://firebase.google.com/docs/hosting/custom-domain?authuser=0\">connect custom domains</a> to a Firebase-hosted site, <a href=\"https://firebase.google.com/docs/database/usage/sharding?authuser=0\">shard the Realtime Database</a>, and <a href=\"https://firebase.google.com/docs/storage?authuser=0\">create multiple Cloud Storage buckets</a> (visit the platform-specific Get Started page).</p>\n<h4>The Firebase CLI and the project ID</h4>\n<p>For some use cases, you might have multiple Firebase projects associated with the same local app directory. In these situations, when you use the <a href=\"https://firebase.google.com/docs/projects/learn-more?authuser=0#manage-cli\">Firebase CLI</a>, you need to pass the --project flag with the firebase commands to communicate which Firebase project you want to interact with.</p>\n<p>You can also set up a <a href=\"https://firebase.google.com/docs/cli?authuser=0#project_aliases\">project alias</a> for each Firebase project so that you don't have to remember project IDs.</p>\n<h4>API calls and the project ID</h4>\n<p>For many API calls, you need to include a unique identifier for a project. Although many APIs accept the project ID, it's recommended that you use the <a href=\"https://firebase.google.com/docs/projects/learn-more?authuser=0#project-number\"><strong>project number</strong></a> for making API calls to Firebase, Google, or third-party services.</p>\n<p>Learn more about using project identifiers, especially the project number, in Google's <a href=\"https://google.aip.dev/cloud/2510\">AIP 2510 standard</a>.</p>\n<h4>Find the project ID</h4>\n<ul>\n<li>Firebase console: Click settings <a href=\"https://console.firebase.google.com/project/_/settings/general/?authuser=0\"><strong>Project settings</strong></a>. The project ID is displayed in the top pane.</li>\n<li>Firebase CLI: Run firebase projects:list. The project ID is displayed along with all the Firebase projects associated with your account.</li>\n<li>Firebase Management REST API: Call <a href=\"https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects/list?authuser=0\">projects.list</a>. The response body contains the project ID in the <a href=\"https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects?authuser=0#FirebaseProject\">FirebaseProject</a> object.</li>\n</ul>\n<h3>Firebase config files and objects</h3>\n<p>When you register an app with a Firebase project, the Firebase console provides a Firebase configuration file (iOS/Android apps) or a configuration object (web apps) that you add directly to your local app directory.</p>\n<ul>\n<li>For iOS apps, you add a GoogleService-Info.plist configuration file.</li>\n<li>For Android apps, you add a google-services.json configuration file.</li>\n<li>For web apps, you add a Firebase configuration object.</li>\n</ul>\n<p>At any time, you can <a href=\"https://support.google.com/firebase/answer/7015592?authuser=0\">obtain an app's Firebase config file or object</a>.</p>\n<p>A Firebase config file or object associates an app with a specific Firebase project and its resources (databases, storage buckets, etc.). The configuration includes \"Firebase options\", which are parameters required by Firebase and Google services to communicate with Firebase server APIs and to associate client data with the Firebase project and Firebase app. Here are the required, minimum \"Firebase options\":</p>\n<ul>\n<li><a href=\"https://cloud.google.com/docs/authentication/api-keys?authuser=0\"><strong>API key</strong></a>: a simple encrypted string used when calling certain APIs that don't need to access private user data (example value: AIzaSyDOCAbC123dEf456GhI789jKl012-MnO)</li>\n<li><a href=\"https://firebase.google.com/docs/projects/learn-more?authuser=0#project-id\"><strong>Project ID</strong></a>: a user-defined unique identifier for the project across all of Firebase and Google Cloud. This identifier may appear in URLs or names for some Firebase resources, but it should generally be treated as a convenience alias to reference the project. (example value: myapp-project-123)</li>\n<li>\n<p><strong>Application ID (\"AppID\")</strong>: the unique identifier for the Firebase app across all of Firebase with a platform-specific format:</p>\n<ul>\n<li>Firebase iOS apps: GOOGLE<em>APP</em>ID (example value: 1:1234567890:ios:321abc456def7890)\nThis is <em>not</em> an Apple bundle ID.</li>\n<li>Firebase Android apps: mobilesdk<em>app</em>id (example value: 1:1234567890:android:321abc456def7890)\nThis is <em>not</em> an Android package name or Android application ID.</li>\n<li>Firebase Web apps: appId (example value: 1:65211879909:web:3ae38ef1cdcb2e01fe5f0c)</li>\n</ul>\n</li>\n</ul>\n<p>The content of the Firebase config file or object is considered public, including the app's platform-specific ID (iOS bundle ID or Android package name) and the Firebase project-specific values, like the API Key, project ID, Realtime Database URL, and Cloud Storage bucket name. Given this, <strong>use Firebase Security Rules</strong> to protect your data and files in <a href=\"https://firebase.google.com/docs/database/security?authuser=0\">Realtime Database</a>, <a href=\"https://firebase.google.com/docs/firestore/security/get-started?authuser=0\">Cloud Firestore</a>, and <a href=\"https://firebase.google.com/docs/storage/security?authuser=0\">Cloud Storage</a>.</p>\n<p>For open source projects, we generally do not recommend including the app's Firebase config file or object in source control because, in most cases, your users should create their own Firebase projects and point their apps to their own Firebase resources (via their own Firebase config file or object).</p>\n<h2>Managing a Firebase project</h2>\n<p>Make sure to review the <a href=\"https://firebase.google.com/docs/projects/learn-more?authuser=0#best-practices\">general project-level best practices</a> (at the bottom of this page) for considerations that might affect how you manage a Firebase project.</p>\n<h3>Tools to manage a project</h3>\n<h4>Firebase console</h4>\n<p>The <a href=\"https://console.firebase.google.com/?authuser=0\">Firebase console</a> offers the richest environment for managing Firebase products, apps, and project-level settings.</p>\n<p><img src=\"https://firebase.google.com/docs/projects/images/firebase_console_overview.png?authuser=0\"></p>\n<p>The left-side panel of the console lists the Firebase products, organized by top-level categories. At the top of the left-side panel, access a project's settings by clicking settings. A project's settings include <a href=\"https://firebase.google.com/integrations?authuser=0\">integrations</a>, <a href=\"https://firebase.google.com/docs/projects/iam/overview?authuser=0\">access permissions</a>, and <a href=\"https://firebase.google.com/pricing?authuser=0\">billing</a>.</p>\n<p>The middle of the console displays buttons that launch setup workflows to register various types of apps. After you start using Firebase, the main area of the console changes into a dashboard that displays stats on the products you use.</p>\n<h4>Firebase CLI (a command line tool)</h4>\n<p>Firebase also offers the <a href=\"https://firebase.google.com/docs/cli?authuser=0\">Firebase CLI</a> for configuring and managing specific Firebase products, like Firebase Hosting and Cloud Functions for Firebase.</p>\n<p>After installing the CLI, you have access to the <a href=\"https://firebase.google.com/docs/cli?authuser=0#command_reference\">global firebase command</a>. Use the CLI to <a href=\"https://firebase.google.com/docs/cli?authuser=0#initialize_a_firebase_project\">link your local app directory to a Firebase project</a>, then <a href=\"https://firebase.google.com/docs/cli?authuser=0#deployment\">deploy</a> new versions of Firebase-hosted content or updates to functions.</p>\n<h4>Firebase Management REST API</h4>\n<p>Using the <a href=\"https://firebase.google.com/docs/projects/api/reference/rest?authuser=0\">Firebase Management REST API</a>, you can programmatically manage a Firebase project. For example, you can programmatically register an app with a project or list the apps that are already registered (<a href=\"https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.iosApps?authuser=0#methods\">iOS</a> | <a href=\"https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.androidApps?authuser=0#methods\">Android</a> | <a href=\"https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.webApps?authuser=0#methods\">web</a>).</p>\n<h2>General best practices</h2>\n<h3>Adding apps to a project</h3>\n<p><strong>Ensure that all apps within a project are platform variants of the same application</strong> from an end-user perspective. It's advisable to register the iOS, Android, and web versions of the same app or game with the same Firebase project. All the apps in a project generally share the same Firebase resources (database, storage buckets, etc.).</p>\n<p>If you have <strong><em>multiple build variants</em></strong> with different iOS bundle IDs or Android package names defined, you can register each variant with a separate Firebase project. However, if you have variants that share the <em>same</em> Firebase resources, register them with the <em>same</em> Firebase project.</p>\n<p>Here are some general limits for Firebase projects, apps, and sites:</p>\n<ul>\n<li>\n<p><strong>Number of projects per account</strong></p>\n<ul>\n<li>Spark pricing plan — Project-creation quota is limited to a lower count of projects (usually around 5-10).</li>\n<li>Blaze pricing plan — Project-creation quota per account increases substantially as long as the associated Cloud Billing account is in good standing.</li>\n</ul>\n<p>The limit on project-creation quota is rarely a concern for most developers, but if needed, you can <a href=\"https://support.google.com/cloud/answer/6330231?authuser=0\">request an increase in project quota</a>.</p>\n<p>Be aware that the complete deletion of a project requires 30 days and counts toward project quota until the project is fully deleted.</p>\n</li>\n<li>\n<p><strong>Number of apps per project</strong></p>\n<p>Firebase restricts the total number of Firebase Apps within a Firebase project to 30.</p>\n<p>You should ensure that all Firebase Apps within a single Firebase project are platform variants of the same application from an end-user perspective. Read more about best practices for <a href=\"https://firebase.google.com/docs/projects/learn-more?authuser=0#multi-tenancy\">multi-tenancy</a> below.</p>\n<p>Learn more about the <a href=\"https://firebase.google.com/support/faq?authuser=0#apps-per-project\">limit on apps per project</a> in the FAQ.</p>\n</li>\n<li>\n<p><strong>Number of Hosting sites per project</strong></p>\n<p>The <a href=\"https://firebase.google.com/docs/hosting/multisites?authuser=0\">Firebase Hosting multisite feature</a> supports a maximum of 36 sites per project.</p>\n</li>\n</ul>\n<h3>Multi-tenancy</h3>\n<p>Connecting several different logically independent apps and/or web sites to a single Firebase project (often called \"multi-tenancy\") is not recommended. Multi-tenancy can lead to serious configuration and data privacy concerns problems, including unintended issues with analytics aggregation, shared authentication, overly-complex database structures, and difficulties with security rules.</p>\n<p>Generally, <strong>if a set of apps don't share the same data and configurations, strongly consider registering each app with a different Firebase project.</strong></p>\n<p>For example, if you develop a white label application, each independently labelled app should have its own Firebase project, but the iOS and Android versions of that label can be in the same project. Each independently labeled app shouldn't (for privacy reasons) share data with the others.</p>\n<h2>Launching your app</h2>\n<ul>\n<li>Set up <a href=\"https://firebase.google.com/docs/projects/billing/avoid-surprise-bills?authuser=0#set-up-budget-alert-emails\">budget alerts</a> for your project in the Google Cloud Console.</li>\n<li>Monitor the <a href=\"https://console.firebase.google.com/project/_/usage?authuser=0\"><em>Usage and billing</em> dashboard</a> in the Firebase console to get an overall picture of your project's usage across multiple Firebase services.</li>\n<li>Review the <a href=\"https://firebase.google.com/support/guides/launch-checklist?authuser=0\">Firebase launch checklist</a>.</li>\n</ul>"},{"url":"/docs/articles/the-uniform-resource-locator-(url)/","relativePath":"docs/articles/the-uniform-resource-locator-(url).md","relativeDir":"docs/articles","base":"the-uniform-resource-locator-(url).md","name":"the-uniform-resource-locator-(url)","frontmatter":{"title":"The Uniform Resource Locator (URL)","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h3>Let's look at the anatomy of a URL:\n\n</h3>\n<p>The first part of the URL is http://, this is often left out when URLs are written, so we might see the above as www.mq.edu.au/about/profile/history.html. This will work when you type it into your web browser because the browser will assume you meant this as an HTTP URL. However, if we are being pedantic, the prefix is required as it tells us something about the web address - that we should use the HTTP protocol to access it.</p>\n<p>URLs are not only useful for HTTP addresses. Other <em>schemes</em> are allowed and they tell the client how to get access to the content that the URL describes. The most common you will see is https:// which is the secure variant of HTTP (we'll find out about that later). HTTPS uses the same protocol as HTTP but over a secure connection so that information that is exchanged can't be intercepted. Another scheme is ftp:// which tells the browser to use the older FTP protocol to access the content. Finally, you might see a mailto URL which allows us to write a link that triggers the browser to start composing an email message. This has a slightly different form: <a href=\"mailto:Steve.Cassidy@mq.edu.au\">Steve.Cassidy@mq.edu.au</a> but it's still a URL. In fact, the pattern looks like this:</p>\n<p>For the HTTP scheme the pattern is:</p>\n<p>The first part &#x3C;net_loc> is the network location of the resource: the domain name of the web server that holds the web page we want. This is preceded by two forward slashes and followed by a single forward slash. Then follows the &#x3C;path> which the server will use to identify which page we want. The ;&#x3C;params>?&#x3C;query>#&#x3C;fragment> are used to further qualify the resource that we want; we'll see some examples of how they are used later in the book.</p>\n<p>The URL is a unique form of identifier in that it has two roles. First, it identifies a document, video or music file that's out on the web (we call these things <em>resources</em>). Each resource has a unique URL and you can refer to them via the URL. If we two people refer to the same URL, then they know they have read the same document. Secondly, the URL contains enough information for a web client to retrieve a copy of the resource. The client can use the scheme defined (HTTP) to connect to the server and send an HTTP request for the path part of the URL.</p>\n<p>There are other kinds of formal identifier that don't have this second property. For example, every book has an ISBN (International Standard Book Number) which uniquely identifies it. However, the ISBN contains no information about how to get a copy of the book. To do so, you'd need to look up the ISBN in a catalogue which might tell you who the publisher was and then contact them for a copy. Alternately you could go to a book-shop or library and use their catalogue to find the book. With a URL, there's no need for a catalogue or third party service to decode the identifier. The information on how to retrieve the resource is right there in the Uniform Resource Locator.</p>\n<p>The <a href=\"http://www.ietf.org/\">Internet Engineering Task Force (IETF)</a> is as close as we get to a governing body for the Internet and it's home to many of the standards that define how the Internet and the Web work. The standards documents are called <em>Request for Comments</em> or RFC, a name which reflects the democratic nature of the early Internet. <a href=\"http://datatracker.ietf.org/doc/rfc2068/\">RFC2068</a> defines HTTP version 1.1 and <a href=\"http://datatracker.ietf.org/doc/rfc1738/\">RFC1738</a> defines the URL. Look out also for <a href=\"http://datatracker.ietf.org/doc/rfc2324/\">RFC2324</a> which can be relevant after a long coding session.</p>\n<h2>Uniform Resource Identifiers</h2>\n<p>There's another similar term that is sometimes used instead of URL: Uniform Resource Identifier (URI). URI is actually a more general term that includes URLs and Universal Resource Names (URNs). URNs are identifiers that don't contain any locator information such as the ISBN. They have a formal syntax so I can cite a particular ISBN as a URN as URN:ISBN:978-0-395-36341-6 (an example from the <a href=\"http://tools.ietf.org/html/draft-ietf-urnbis-rfc3187bis-isbn-urn-01\">IETF RFC3187</a> document that defines the standard). As explained above, we need a third party service to resolve a URN into a real location (a URL). You might see the term URI used in discussions of web technologies; it is often used instead of URL but generally means the same thing if we're talking about HTTP based services.</p>\n<p>Since URLs are both names and addresses it becomes important that once you put a resource on the web, it stays there. This is discussed in Tim Berners-Lee's paper called \"<a href=\"http://www.w3.org/Provider/Style/URI\">Cool URIs don't change</a>\". It's a principle that all web designers should bear in mind as it is easy to violate as we re-build old web-sites.</p>\n<h2>Absolute and relative URLs</h2>\n<p>When we include a URL in a web page there are a number of choices about how it can be written. The first option is to include the full URL:</p>\n<p>This is clearly a link to a resource on the server at <em>example.org</em> using the http protocol. However, if this page is being served by the server at <em>example.org</em> then we could also write this link as:</p>\n<p>This is known as a <em>relative URL</em> and is interpreted relative to the URL of the page that is currently being viewed. Let's assume that this page is at the URL <a href=\"http://example.org/about/info.html\">http://example.org/about/info.html</a>. Note that the URL above starts with a / character, in this case, the browser will interpret this URL by adding the protocol (http) and domain (example.org) parts of the page URL to this one to get <a href=\"http://example.org/static/style.css\">http://example.org/static/style.css</a>.</p>\n<p>Another way to write a URL is:</p>\n<p>In this case there is no / at the start of the URL and so this is interpreted relative to the page URL by removing everything but the last part of the URL <a href=\"http://example.org/about/\">http://example.org/about/</a> and then adding the new URL text to get <a href=\"http://example.org/about/static/style.css\">http://example.org/about/static/style.css</a>. Note that this is different to the previous example. If the intention was to reference the same URL as before, you could use the URL:</p>\n<p>Here the .. path refers to the parent directory (thinking of these paths as filenames) so the path becomes /about/../static/style.css which can be shortened to /static/style.css.</p>\n<p>The different URL styles have different uses. If you are writing a static HTML page that you will view on your local computer and perhaps host on the web somewhere (but you're not sure where) then you might put all of your files in one directory and use a relative URL like static/style.css to refer to linked resources. This ensures that your directory of files could be dropped anywhere into a web server file system and it would be self-contained and the links would work.</p>\n<p>However, if you are writing a web application that will be hosted on some domain (like example.org) you know that you have control of all URLs on that site and so would more likely use a relative URL starting with a / (like /static/style.css). This is important if your web application has complex routes (eg. pages like /users/steve/profile/edit) and you want to ensure that whatever the page URL being served, the links to stylesheets and other resources will work. The application can be deployed on different servers (like example.org and example.com) and the links will still work because they don't mention the domain name at all.</p>\n<p>Finally, absolute URLs (like <a href=\"http://example.org/static/style.css\">http://example.org/static/style.css</a>) will be used when we know that this URL is fixed at this location. It may be something external to our own site, or something that we know will be hosted at this URL on our site. There is an argument from a Search Engine Optimisation (SEO) viewpoint that all URLs in a website should be absolute urls even when they refer to assets on the same site. The reasons relate to the way that search engines crawl sites and the possible duplication of content if two URLs point to the same page (eg. <a href=\"https://example.org/\">https://example.org/</a> and <a href=\"http://example.org\">http://example.org</a>).</p>\n<p>One final form of relative URL looks like this:</p>\n<p>This URL is only missing the protocol part and is turned into an absolute URL by adding the protocol part of the current page URL. So if the current page was requested over http or https, this URL will use the same protocol. This is often useful if a site can be served over both protocols although it is increasingly the case that https is being used everywhere so this may become less common as time progresses.</p>\n<p><a href=\"https://www.facebook.com/sharer/sharer.php?u=https://bgoonz-blog.netlify.app/\">Share To Facebook:</a></p>"},{"url":"/docs/articles/writing-files/","relativePath":"docs/articles/writing-files.md","relativeDir":"docs/articles","base":"writing-files.md","name":"writing-files","frontmatter":{"title":"Writing Files","excerpt":"Web-Dev-Hubis a Unibit theme created for project documentations. You can use it for your project.","seo":{"title":"Writing Files","description":"This is the Writing Files page. The easiest way to write to files in Node.js is to use the fs.writeFile() API. const fs = require('fs');","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Writing Files","keyName":"property"},{"name":"og:description","value":"This is the Writing Files page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Writing Files"},{"name":"twitter:description","value":"This is the Writing Files page"}]},"template":"docs"},"html":"<p>The easiest way to write to files in Node.js is to use the <code>fs.writeFile()</code> API.</p>\n<p>Example:</p>\n<pre><code class=\"language-js\">const fs = require('fs');\n\nconst content = 'Some content!';\n\nfs.writeFile('/Users/joe/test.txt', content, (err) => {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    //file written successfully\n});\n</code></pre>\n<p>Alternatively, you can use the synchronous version <code>fs.writeFileSync()</code>:</p>\n<pre><code class=\"language-js\">const fs = require('fs');\n\nconst content = 'Some content!';\n\ntry {\n    const data = fs.writeFileSync('/Users/joe/test.txt', content);\n    //file written successfully\n} catch (err) {\n    console.error(err);\n}\n</code></pre>\n<p>By default, this API will <strong>replace the contents of the file</strong> if it does already exist.</p>\n<p>You can modify the default by specifying a flag:</p>\n<pre><code class=\"language-js\">fs.writeFile('/Users/joe/test.txt', content, { flag: 'a+' }, (err) => {});\n</code></pre>\n<p>The flags you'll likely use are</p>\n<ul>\n<li><code>r+</code> open the file for reading and writing</li>\n<li><code>w+</code> open the file for reading and writing, positioning the stream at the beginning of the file. The file is created if not existing</li>\n<li><code>a</code> open the file for writing, positioning the stream at the end of the file. The file is created if not existing</li>\n<li><code>a+</code> open the file for reading and writing, positioning the stream at the end of the file. The file is created if not existing</li>\n</ul>\n<p>(you can find more flags at <a href=\"https://nodejs.org/api/fs.html#fs_file_system_flags\">https://nodejs.org/api/fs.html#fs_file_system_flags</a>)</p>\n<h2>Append to a file</h2>\n<p>A handy method to append content to the end of a file is <code>fs.appendFile()</code> (and its <code>fs.appendFileSync()</code> counterpart):</p>\n<pre><code class=\"language-js\">const content = 'Some content!';\n\nfs.appendFile('file.log', content, (err) => {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    //done!\n});\n</code></pre>\n<h2>Using streams</h2>\n<p>All those methods write the full content to the file before returning the control back to your program (in the async version, this means executing the callback)</p>\n<p>In this case, a better option is to write the file content using streams.</p>"},{"url":"/docs/articles/semantic-html/","relativePath":"docs/articles/semantic-html.md","relativeDir":"docs/articles","base":"semantic-html.md","name":"semantic-html","frontmatter":{"title":"lorem-ipsum","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<p>Three different aspects of web site production:</p>\n<ul>\n<li>Content -- the text, images, etc. What the user wants to read.</li>\n<li>Style -- how the content is arranged on the page, fonts, colours, page style.</li>\n<li>Behaviour -- how users interact with the site, data processing, dynamic page elements.</li>\n</ul>\n<p>Since each requires different skills, a good (software) design would seperate them.</p>\n<p>Each of these areas has a different associated technology in the web world: HTML, Cascading Style Sheets (CSS) and Javascript.</p>\n<p>Note that it hasn't always been this way, HTML can do a bunch of Style things (eg. the &#x3C;font> tag) but now that we have good standards compliant browser we don't need to use them.</p>\n<h2>Document Production</h2>\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/a/ae/Metal_movable_type.jpg/640px-Metal_movable_type.jpg\"></p>\n<p>Moveable type, source <a href=\"http://commons.wikimedia.org/wiki/File:Metal_movable_type.jpg\">Wikimedia Commons</a></p>\n<p>Many years ago, when printed pages were made with moveable type, the printer who assembled the page of type was responsible for all aspects of the page design. They would choose the typeface, and in the early days even make the matrix and cast the type themselves. They would lay out the lines of text, choosing suitable spacing in each line, deciding where to break the line and adding hyphens to improve the overall look of the page while maintaining readability. The page was then set in the press and pages were printed.</p>\n<p>Even before that, the monks who copied manuscripts did everything themselves, copying the text and adding beautiful illuminations to each page to add to the value of the book.</p>\n<p>As the industry developed though, the task of type-setter became more mechanical. Other people became expert in how to best lay out pages, what visual design elements would best communicate the desired message etc. The type-setter still made the technical choices to achieve the desired goals, but didn't have to be an expert in design. The production of a printed document would involve a number of people who were expert in their given area, from author to visual designer to type-setter.</p>\n<p>This team based approach to document production means that each person can develop their own expertise and to a certain extent, doesn't need to worry about what the people later in the chain will do. The author doesn't worry about how to place figures or images in the page, just that they will be there; the designer doesn't need to be concerned about kerning and the use of em-spaces in type-setting; the type-setter isn't an expert in the content of the text. All can work together to produce a superior printed document.</p>\n<p>The world of document production worked like this for a long time until the invention of the personal computer and <em>Desktop Publishing</em> software. Suddenly, authors became designers and type-setters through easy to use computer software. They could choose fonts, set margins, force hyphenation and make minute decisions about the layout and look and feel of each page. Not surprisingly, this becomes a significant distraction from the task of creating content, but it also means that the expertise of the specialist designer or type-setter isn't used any more. This might lead to more productivity as the production process is compressed, but it doesn't usually lead to more readable, better presented documents; many of the early self-produced documents were an unsightly mix of fonts, colours and sizes.</p>\n<p>If we fast-forward to the software tools we have today for document production, it's interesting to note that the expertise of the designer and typesetter has crept back in to the process. Rather than being involved in the production of every document, these people are now able to write stylesheets and templates as well as contribute to the algorithms used in the software to lay out the text on a page. Most companies will have a standard document template that is used for reports or letters, this has usually been designed by a professional and all the author needs to do is enter the text in the right place. Stylesheets in word processors mean that there will be a consistency of font use throughout the document and importantly, that the decisions on which fonts and how they are used doesn't need to be made by the author.</p>\n<p>So, to summarise this little discussion of history, there have always been people who's expertise is the way that a text is rendered on the page. With the onset of desktop publishing software, there has been a tendency for the author to spend time in document design, meaning that the relevant expertise was not being applied. However, modern software now allows for the designer's voice to be heard again through the use of stylesheets and document templates. This leaves the author to concentrate on the text meaning they will be more productive and should produce better looking documents as well.</p>\n<h2>Web Document Production</h2>\n<p>Fundamentally, the web is a technology for delivering content to readers through a document based interface (the web browser). So, producing web content is a document production process and as such, should parallel the ideas discussed above. It's interesting to look at the development of HTML and see how it parallels the developments described above.</p>\n<p>Early HTML was a language for encoding content. It included tags for headings, paragraphs, lists etc. but didn't provide any way to change the way these things were rendered by the browser. The browser made sensible decisions and web documents all looked about the same. The focus was on the content. Soon, <a href=\"http://www.ncsa.illinois.edu/Projects/mosaic.html\">graphical browsers</a> started to appear that allowed images to be included in pages and people started to want to have some control over the appearance of their pages.</p>\n<p>The growth of the web into the commercial arena and the wider range of documents being published led to the 'browser wars' between Netscape and Microsoft. One of the features of this war was the arms race of features in each browser designed to make web pages look better. Each vendor would introduce new ways to control the look and feel of pages, for example the &#x3C;FONT> tag was introduced by Netscape to allow control of the font used to display text while Microsoft included the &#x3C;MARQUEE> tag that displayed text scrolling across the page. Eventually, some of these tags were standardised into a later version of HTML and were implemented by most of the browsers. These tags encouraged authors to get involved in page design, in fact they had to since the only way to control the appearance of a page was to insert codes into the text.</p>\n<p>While the &#x3C;FONT> tag allowed some control over the appearance of text, there was still a problem of laying out a page as a whole. The solution that became standard practice was to mis-use the &#x3C;TABLE> tag and construct the whole page as a table with rows and columns for the different page elements such as header, menu, content and footer. This worked really well, but again meant that the HTML code that an author was writing had to contain a lot of information about the layout of the page. In addition, it was common for people to mis-use tags just for the sake of appearance, for example to have more control over the appearance of headings, one might just encode them using &#x3C;B> or &#x3C;FONT> tags rather than header tags.</p>\n<p>All of these additions to HTML and the mis-use of existing tags meant that a language that was originally designed to allow authors to concentrate on content had turned into a page layout language. Luckily, sense has prevailed and we have now developed ways to control page layout without adding special instructions into the HTML code - that is, we have the Cascading Stylesheet language (CSS). Once again, we can let the author concentrate on content in HTML while all (or most) design decisions are encoded in the stylesheet.</p>\n<p>The current suite of web languages understood by your browser (HTML, CSS and Javascript) each serve different roles in the web development process:</p>\n<ul>\n<li>HTML - Content</li>\n<li>CSS - Style</li>\n<li>Javascript - Behaviour</li>\n</ul>\n<p>The third of these - Javascript and Behaviour - refer to the way that Javascript can be used to change the way that the user interacts with the page. This doesn't really have an analogue in the print document production world but it's an important aspect of modern web content production. It fits into this framework because the behavioural changes that Javascript can introduce should not be the concern of the content author or the visual designer (though both might have opinions on what they'd like to see).</p>\n<p>It is useful to think of these three aspects of web design as independent things. The same web content could be presented using alternate stylesheets and have a completely different impact. Similarly, Javascript can be used to change the way that a user interacts with content, making it more usable. We can see the Style and Behaviour aspects as layers that are applied to the core Content to enhance it for the user.</p>\n<h2>The Separation of Concerns</h2>\n<p>From a Computer Science/Software Engineering point of view there is a very important principle called the <a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\">Separation of Concerns</a> (SoC) that is illustrated perfectly by the way that the various web languages have evolved. The SoC principle is about partitioning the work that we do in software development into parts that can be considered separately. This is achieved by <em>modularisation</em> within a software project and is helped by things like classes and interface descriptions between modules</p>\n<ul>\n<li>in fact these things have been developed to support SoC.</li>\n</ul>\n<p>The SoC principle allows us to develop large complex software by allowing us to concentrate on different aspects of the solution. It could be that we do that alone, spending time on one aspect and then another, or as a team with different people assigned to different aspects. Either way, being able to work on part of the problem makes it manageable and improves the overall quality of the solution.</p>\n<p>In web development, the separation of concerns is supported by the different languages that work together to build a modern web application. It is important to recognise this and make sure that we use each of these tools in such a way as to respect their roles and capabilities. So, while it is possible to use HTML structures to make text large and bold for a heading, we don't, we use one of the header tags and rely on the stylesheet to apply the appropriate settings. Having the author respect good HTML usage means that the designer can make assumptions about the page structure in the stylesheet and ensure that the document appearance is consistent for the user.</p>\n<h2>Semantic HTML Markup</h2>\n<p>One corollary of this kind of thinking is that each component that we use should be used as it was designed and according to it's role in the overall picture. In particular for HTML this implies that the markup we use should encode only the <em>structure</em> of the document rather than aspects of the <em>appearance</em> which is properly dealt with using CSS. Further, this means that we should use markup in a way that imparts useful <em>meaning</em> to the document structure. This is generally known as using <em>Semantic HTML</em> (<a href=\"http://en.wikipedia.org/wiki/Semantic_HTML\">Wikipedia</a>, <a href=\"http://microformats.org/wiki/posh\">POSH</a> on Microformats.org) and is the current best practice in HTML authoring.</p>\n<p>To clarify this point we can look at some examples. Writing semantic HTML means using the HTML tags as they were designed to be used - to convey the meaning of a particular document structure or textual element. So a good example is when we want to encode the main heading in a page I would use the H1 tag:</p>\n<p>This seems obvious, but in some cases, an author might decide that the default rendering of the H1 tag is too big, so rather than using CSS to define an alternate style, they use the H2 tag instead.</p>\n<p>This may seem harmless, after all we've still marked up this text as a heading. The problem is that we've lost the information that this is the main heading in the page that was conveyed by the H1 tag.</p>\n<p>Even worse, I could use the B (bold) tag and the now deprecated FONT tag to make my text look like a heading:</p>\n<p>In this case the appearance might be ok but the markup is not appropriate for the task. The author's focus has been on the appearance rather than the meaning of the markup; we could say that the author is overstepping their responsibilities a little - the appearance of the text should be the domain of the designer. If the heading is encoded as in this example, the designer will not be able to re-style the headings in a robust way (we could apply a style to bold paragraphs but that would also apply to any other use of this markup in the text).</p>\n<p>The example illustrates the importance of using an appropriate markup tag where one exists. In the case of a heading, this is pretty clear but other parts of the document might need a bit of thought to see what markup is appropriate. One common issue is whether to use a TABLE for some information that you want to appear as a list or array. TABLE is meant for data that has columns and rows, for example, the results of a survey or test scores for a class of students.</p>\n<p>While it is less common these days, the most frequent mis-use of tables is as a means of laying out all or part of a page as a rectangular grid. You may still see this in the navigation links on a page which the designer might want to appear in a row near the top of the page or a column down the side. Semantically this is a list and should really be marked up as such. If a table-like appearance is needed then CSS rules can be used to acheive this (eg. display: table-row).</p>\n<p>TABLE is sometimes used for things that might be more appropriately marked up as lists, eg. using UL (unordered list), OL (ordered list) or DL (description list) tags. An example might be the list of ingredients for a recipe; you might be tempted to encode it as a table because you want the quantities to be lined up in a column on the left. It might be appropriate to use TABLE here but a bit of reflection might tell you that it's really an unordered list - for example you might note that while there's usually a quantity for each ingredient it's not always the case ('salt to taste') so this isn't really columns of data, just list items that might have a distinguished field.</p>\n<p>A final example might be the description of a staff member in an online directory, the commonly contains entries for name, office, phone number, email address etc and it might seem natural to encode this as a table if you want a nice neat layout. However, in this case there is more appropriate markup in the DL (description list) tag. Each entry in a description list contains two parts DT (description title) and DD (description data) which are used to mark up the property name and value:</p>\n<p>Some authors are put off the description list because of the default style that is associated with it which puts the DT and DD parts on different lines. However, changing this is very easy with CSS so it really should be used for information that is structured in this way.</p>\n<p>Using the right semantic markup <em>adds</em> information to the text that can be used by the designer to enhance the communicative power of the web page. Using a consistent style for headings makes it easier for a reader to see the structure of a page and understand it. Similarly, I can use inline tags for things like <em>emphasis</em> (EM), Abbrv. (abbreviations, ABBR), “a quotation” (Q) or <strong>a strongly emphasised point</strong> (STRONG). Each of these has a default style (or in some cases like ABBR, is just the same as the default text style) but can be re-styled by the designer to achieve a particular look and feel. If these elements are used consistently throughout a text, the overall readability of the text can be greatly improved.</p>\n<p>Another motivation for using semantic markup is for users who cannot read via a normal web browser. Blind people make use software that reads out the content of a web page; if the page uses the appropriate semantic markup then the software can make use of this to present the content more appropriately to the user. This might include using the headings to provide a summary of the page or the emphasis tags to generate an appropriate intonation pattern. You might also think about the difference in reading out a list vs. a table of data - that might be a useful way of choosing between the two for a particular part of your page.</p>\n<h3>Exercises</h3>\n<ol>\n<li>\n<p>Find an appropriate HTML tag to mark up the following items:</p>\n<ul>\n<li>the name of a book that you are citing in an essay</li>\n<li>a fragment of computer code, eg. a bit of Python</li>\n<li>an abbreviation or acronym and it's expansion (e.g. HTML - Hypertext Markup language)</li>\n</ul>\n</li>\n</ol>\n<h2>Extending the Semantics of HTML</h2>\n<p>The tag set defined by the HTML standard supports a wide range of content and was designed to cover the most common document structures and entities that appear on the web. However, the designers of HTML couldn't forsee everything that you might want to mark in your documents and so an extension mechanism is included such that you can effectively add new semantics to existing tags. This is the HTML class attribute which allows you to enter a user defined class for any tag. It is effectively a specialisation of any tag that can be used to encode special meanings for your documents.</p>\n<p>The class attribute is meant to contain one or more class identifiers which are single words that mean something to your application. They can be applied to any HTML tag. An example might be the use of the class important to mark something as important in some way. I can add this to a paragraph or a list item:</p>\n<p>In this example, the class attribute is specialising the meaning of the main HTML tag so that we can differentiate important paragraphs and list items from others. We might want to do this so that we can highlight them in some way in the final presentation of the text. In this way, the designer can make the decision about how to emphasise this text (maybe differently on desktop and mobile devices) and the author is free just to decide which things are important. The alternative in this case might have been to use an emphasis EM tag around the text we wanted to emphasise. The advantage of the class attribute is that we identify the whole paragraph or list item as important and we are able to differentiate different kinds of emphasis. This might be useful where, for example, there are some things that are 'important' and others that are 'critical' in a set of instructions. The use of class attributes means that we can transfer the concepts that mean something in the domain of the document directly into the HTML code and then allow the designer to make decisions about how the different ideas are expressed visually.</p>\n<p>Sometimes there isn't an HTML tag that really fits what you are trying to express; in these cases you can use the generic DIV and SPAN tags along with a class attribute. For example, it has been common to use a series of DIV tags to denote the overall structure of a web page:</p>\n<p>This pattern allows the designer to write a stylesheet that places each section at the right place on the page with the right fonts, colours etc. This pattern has become so common that the new HTML5 standard has included new tags named after some of these classes, so you can now write:</p>\n<p>This is part of the evolution of the HTML language; the observation that some kinds of structure are being used very widely leading to the introduction of new elements that properly convey the semantics that are required.</p>\n<p>One final note about the use of classes to convey new semantics. It is possible to use more than one class name where that is appropriate to convey more specialisations. For example, all of the code examples in this text are marked up as PRE tags with the class code and another class to denote the language the code is written in, so on this page I have examples like:</p>\n<p>Note that I have to encode the HTML markup as entity references using the &#x26; notation so that they appear correctly when you view them in the web browser (view source to check this out). Having more than one class name means that I can apply standard styling to code examples and special style for different languages. It also means that I could write a script to pull out all of the examples in a given language if I wanted to check their syntax etc.</p>\n<h1>A View of HTML\n\n</h1>\n<p>Rather than being a chapter that will teach you the HTML language this will be a chapter about the language, how it works, why it has the structures it does and what you should and shouldn't do with it.</p>\n<p>Most people will know some HTML by now (assuming you've been studying computing for a while or have a general interest in the web). My task here is not to teach you HTML or act as a reference for the language, there are plenty of resources around that will do this. Some examples are:</p>\n<ul>\n<li><a href=\"http://www.w3schools.com/html/default.asp\">w3schools HTML tutorial</a> w3schools is one of the most widely used tutorial and reference sites on the web for HTML and other web technologies.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/learn/html\">Learn HTML</a> from the Mozilla Developer Network, the organisation that produces the Firefox browser. This page has pointers to a number of HTML tutorials and resources.</li>\n</ul>\n<h2>About HTML</h2>\n<p>HTML is a <em>markup language</em>, which is a formal language used to add encode structured documents, often by mixing formal elements and plain text. Another example is the LaTeX language used to typeset scientific and technical documents. Here's a fragment of LaTeX that shows the use of commands preceded by a backslash character and curly braces to enclose text:</p>\n<p>These commands are interpreted by the LaTeX system which uses then to produce nicely typeset PDF output. Markup can also be used to identify regions of text for analysis. Here's an example from a language corpus used to study human interaction:</p>\n<p>In this example, special character sequences are used to mark things like speaker turns, pauses, phrases and overlapping speech. This markup can be used to help analyse the language and find examples of certain linguistic phenomena (for example, find me examples of <em>'you know'</em> and show me what the next person says in response).</p>\n<p>HTML is the <em>Hypertext</em> Markup Language, meaning that it is designed to encode hypertext documents - that is, documents containing links to other documents on the World Wide Web. In fact, the hyperlink is just a small part of HTML and much more interesting are all the other parts of the language that allows us to produce useful documents for the web.</p>\n<p>HTML is based on an earlier standard called SGML (Standard Generalised Markup language) which had a successor called XML (eXtensible Markup Language). SGML and XML are both languages for defining markup languages, that is they define the syntax of a markup language but allow you to develop your own language for a specific purpose. The syntax is the angle brackets containing start and end tags &#x3C;p> and &#x3C;/p> that you will be familiar with (and a number of other rules). SGML and XML based languages all use this same syntax but allow the language designer to make up their own tags and define how they should be used together. HTML was designed originally by Tim Berners-Lee and later by the W3C as a language to encode pages of content for the web.</p>\n<p>Importantly, HTML is a <em>markup language</em> not a <em>programming language</em>. The job of a markup language is to record the structure of a document; that structure can then be interpreted by a program to generate some output. A programming language contains instructions that will be executed (or interpreted) to carry out some action or compute some result.</p>\n<h2>Versions of HTML</h2>\n<p>The first version of HTML was developed by Tim Berners-Lee as part of his World Wide Web project along with the HTTP protocol and the URL syntax. At first it was a very simple language for encoding articles and so had tags for headings, paragraphs, lists etc. Later, the language evolved to encompas new features in the browser such as the ability to display images, tables and modify the font that text was displayed in. The evolution of HTML has been quite gradual and at times part of intense competition between browser vendors (look up the <a href=\"http://en.wikipedia.org/wiki/Browser_wars\">Browser Wars</a> to get the full story). The Internet Engineering Task Force (IETF) and later the World Wide Web Consortium (W3C) tried to standardise the language but it took some time for industry practice to align with the W3C standards. Luckily now we are in a period of relative stability where the standards process aligns well with what the major browsers are able to understand.</p>\n<p>A version of HTML is defined by a Document Type Definintion (DTD) - a formal definition of the allowed tags and attributes and the allowed structure of an HTML document. The DTD says that you can have a &#x3C;p> tag and that it can contain a &#x3C;strong> tag but that a &#x3C;li> has to be inside a &#x3C;ul> or &#x3C;ol> tag and so on. If a document conforms to the DTD (follows the rules) we say that it is <em>valid</em>, if it contains errors such as having an unknown tag or a tag in the wrong place it is invalid.</p>\n<p>Early versions of HTML were subject to a lot of change and it wasn't until HTML version 4.0.1, released in 1999 that there was a bit of stability in the language and consensus about what should be included and what should be left out. Before then, HTML had grown to contain a lot of <em>visual</em> markup that had been developed by the browser vendors (Netscape and Microsoft) to try to make their browser look better than the competition. An example is the &#x3C;font> tag introduced by Microsoft (and copied by Netscape) which could change the font used to render some text. By the time HTML 4.01 was published, Cascading Style Sheets (CSS) were becoming more widely adopted and the use of markup that explicitly referred to the visual appearance of the content was discouraged.</p>\n<p>HTML 4.0.1 is still the latest version of the official W3C standard although there have been a large number of changes implemented by the browser vendors since the time it was released.</p>\n<p>In 1997 the XML standard was introduced. XML was intended to generalise the use of markup on the web and allow developers to design thier own markup languages for specific purposes. XML is an evolution of the earlier SGML standard on which HTML had been based; it simplified the syntax rules a lot and made it easier to write parsers for XML. One of the early applications of XML was to develop XHTML - a version of HTML converted to adhere to the XML standard. XHTML 1.0 retained almost all of the tags in HTML 4.0.1 but introduced the constraints of XML. For example in an XML document every opening tag must have a corresponding close tag; in HTML, many close tags are optional (e.g. you can leave out the closing &#x3C;p> tag for a paragraph since it is implied by the next opening &#x3C;p> tag) and many tags never have a close tag because they never contain any text (e.g. &#x3C;img> or &#x3C;br>). In XHTML then, paragraphs always require a close tag and empty tags are written with the new XML syntax: &#x3C;br />.</p>\n<p>One of the motivations for introducing XHTML was to try to encourage web developers to adhere more closely to the published standards. The web had grown up with a culture of view-source where people would learn how to encode web pages by looking at the source HTML of other web pages rather than by reading the standard. They would then write their own pages and if they looked ok in the browser, they would publish them. To cope with the amount of badly formed HTML content on the web, the browser vendors built thier HTML parsers to be very forgiving. If you put a paragraph inside an image tag or a header inside a paragraph it would have a go at rendering the content. As a consequence, very few web publishers cared about generating proper HTML and anyone who wanted to parse web content had to make very few assumptions about HTML structure.</p>\n<p>Around this time there was a move towards having more automated clients consuming web content. One group was the search engine developers who were just interested in the textual content of pages but other groups were trying to glean real data from the web. For example, price comparison services were starting up which tried to extract pricing information from store listings. Other services might try to find event information from web pages. All of these services needed to parse the HTML structure and had problems when the HTML was badly structured; this became known as <a href=\"http://essaysfromexodus.scripting.com/whatIsTagSoup\">Tag Soup</a> since one could not rely on proper HTML structure it was just treated as an unstructured collection of tagged text. Permissive parsers such as <a href=\"http://www.crummy.com/software/BeautifulSoup/\">Beautiful Soup</a> (Python) and <a href=\"http://home.ccil.org/~cowan/XML/tagsoup/\">Tagsoup</a> (Java) were developed to cope with the messy markup and give the developer as much detail as possible from the page.</p>\n<h1>HTML5</h1>\n<p>The most recent version of HTML is HTML5 - note the name with no spaces which is quite different to earlier versions. HTML5 was a big change in the way that the standard was put together and followed a long break in the development of standards for HTML: HTML 4.0.1 was last updated in 2000, HTML5 was finally released in 2012. The goal of HTML5 was to standardise current practice in browsers, rather than to define new structures or limit what was possible. The W3C worked with the browser developers to agree on standards for new technologies that they had introduced. For example, being able to include audio and video elements in HTML had been possible in some browsers; HTML5 defined a standard for these that all browser vendors could agree on and implement.</p>"},{"url":"/docs/audio/audio-feature-extraction/","relativePath":"docs/audio/audio-feature-extraction.md","relativeDir":"docs/audio","base":"audio-feature-extraction.md","name":"audio-feature-extraction","frontmatter":{"title":"Audio Feature Extraction","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h2>Lorem ipsum</h2>\n<p>Lorem ipsum dolor sit amet, <strong>consectetur adipiscing elit</strong>, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n<ul>\n<li>Lorem ipsum</li>\n<li>dolor sit amet</li>\n</ul>"},{"url":"/docs/articles/node-js-language/","relativePath":"docs/articles/node-js-language.md","relativeDir":"docs/articles","base":"node-js-language.md","name":"node-js-language","frontmatter":{"title":"packagejson","weight":1,"excerpt":"The package.json file is a key element in lots of app codebases based on the Node.js ecosystem.","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<p>If you work with JavaScript, or you've ever interacted with a JavaScript project, Node.js or a frontend project, you surely met the package.json file.</p>\n<p>What's that for? What should you know about it, and what are some of the cool things you can do with it?</p>\n<p>The package.json file is kind of a manifest for your project. It can do a lot of things, completely unrelated. It's a central repository of configuration for tools, for example. It's also where npm and yarn store the names and versions for all the installed packages.</p>\n<h2>The file structure</h2>\n<p>Here's an example package.json file:</p>\n<p>It's empty! There are no fixed requirements of what should be in a package.json file, for an application. The only requirement is that it respects the JSON format, otherwise it cannot be read by programs that try to access its properties programmatically.</p>\n<p>If you're building a Node.js package that you want to distribute over npm things change radically, and you must have a set of properties that will help other people use it. We'll see more about this later on.</p>\n<p>This is another package.json:</p>\n<p>It defines a name property, which tells the name of the app, or package, that's contained in the same folder where this file lives.</p>\n<p>Here's a much more complex example, which was extracted from a sample Vue.js application:</p>\n<p>there are <em>lots</em> of things going on here:</p>\n<ul>\n<li>version indicates the current version</li>\n<li>name sets the application/package name</li>\n<li>description is a brief description of the app/package</li>\n<li>main set the entry point for the application</li>\n<li>private if set to true prevents the app/package to be accidentally published on npm</li>\n<li>scripts defines a set of node scripts you can run</li>\n<li>dependencies sets a list of npm packages installed as dependencies</li>\n<li>devDependencies sets a list of npm packages installed as development dependencies</li>\n<li>engines sets which versions of Node.js this package/app works on</li>\n<li>browserslist is used to tell which browsers (and their versions) you want to support</li>\n</ul>\n<p>All those properties are used by either npm or other tools that we can use.</p>\n<h2>Properties breakdown</h2>\n<p>This section describes the properties you can use in detail. We refer to \"package\" but the same thing applies to local applications which you do not use as packages.</p>\n<p>Most of those properties are only used on <a href=\"https://www.npmjs.com/\">https://www.npmjs.com/</a>, others by scripts that interact with your code, like npm or others.</p>\n<h3>name</h3>\n<p>Sets the package name.</p>\n<p>Example:</p>\n<p>The name must be less than 214 characters, must not have spaces, it can only contain lowercase letters, hyphens (-) or underscores (_).</p>\n<p>This is because when a package is published on npm, it gets its own URL based on this property.</p>\n<p>If you published this package publicly on GitHub, a good value for this property is the GitHub repository name.</p>\n<h3>author</h3>\n<p>Lists the package author name</p>\n<p>Example:</p>\n<p>Can also be used with this format:</p>\n<h3>contributors</h3>\n<p>As well as the author, the project can have one or more contributors. This property is an array that lists them.</p>\n<p>Example:</p>\n<p>Can also be used with this format:</p>\n<h3>bugs</h3>\n<p>Links to the package issue tracker, most likely a GitHub issues page</p>\n<p>Example:</p>\n<h3>homepage</h3>\n<p>Sets the package homepage</p>\n<p>Example:</p>\n<h3>version</h3>\n<p>Indicates the current version of the package.</p>\n<p>Example:</p>\n<p>This property follows the semantic versioning (semver) notation for versions, which means the version is always expressed with 3 numbers: x.x.x.</p>\n<p>The first number is the major version, the second the minor version and the third is the patch version.</p>\n<p>There is a meaning in these numbers: a release that only fixes bugs is a patch release, a release that introduces backward-compatible changes is a minor release, a major release can have breaking changes.</p>\n<h3>license</h3>\n<p>Indicates the license of the package.</p>\n<p>Example:</p>\n<h3>keywords</h3>\n<p>This property contains an array of keywords that associate with what your package does.</p>\n<p>Example:</p>\n<p>This helps people find your package when navigating similar packages, or when browsing the <a href=\"https://www.npmjs.com/\">https://www.npmjs.com/</a> website.</p>\n<h3>description</h3>\n<p>This property contains a brief description of the package</p>\n<p>Example:</p>\n<p>This is especially useful if you decide to publish your package to npm so that people can find out what the package is about.</p>\n<h3>repository</h3>\n<p>This property specifies where this package repository is located.</p>\n<p>Example:</p>\n<p>Notice the github prefix. There are other popular services baked in:</p>\n<p>You can explicitly set the version control system:</p>\n<p>You can use different version control systems:</p>\n<h3>main</h3>\n<p>Sets the entry point for the package.</p>\n<p>When you import this package in an application, that's where the application will search for the module exports.</p>\n<p>Example:</p>\n<h3>private</h3>\n<p>if set to true prevents the app/package to be accidentally published on npm</p>\n<p>Example:</p>\n<h3>scripts</h3>\n<p>Defines a set of node scripts you can run</p>\n<p>Example:</p>\n<p>These scripts are command line applications. You can run them by calling npm run XXXX or yarn XXXX, where XXXX is the command name. Example: npm run dev.</p>\n<p>You can use any name you want for a command, and scripts can do literally anything you want.</p>\n<h3>dependencies</h3>\n<p>Sets a list of npm packages installed as dependencies.</p>\n<p>When you install a package using npm or yarn:</p>\n<p>that package is automatically inserted in this list.</p>\n<p>Example:</p>\n<h3>devDependencies</h3>\n<p>Sets a list of npm packages installed as development dependencies.</p>\n<p>They differ from dependencies because they are meant to be installed only on a development machine, not needed to run the code in production.</p>\n<p>When you install a package using npm or yarn:</p>\n<p>that package is automatically inserted in this list.</p>\n<p>Example:</p>\n<h3>engines</h3>\n<p>Sets which versions of Node.js and other commands this package/app work on</p>\n<p>Example:</p>\n<h3>browserslist</h3>\n<p>Is used to tell which browsers (and their versions) you want to support. It's referenced by Babel, Autoprefixer, and other tools, to only add the polyfills and fallbacks needed to the browsers you target.</p>\n<p>Example:</p>\n<p>This configuration means you want to support the last 2 major versions of all browsers with at least 1% of usage (from the <a href=\"https://caniuse.com/\">CanIUse.com</a> stats), except IE8 and lower.</p>\n<p>(<a href=\"https://www.npmjs.com/package/browserslist\">see more</a>)</p>\n<h3>Command-specific properties</h3>\n<p>The package.json file can also host command-specific configuration, for example for Babel, ESLint, and more.</p>\n<p>Each has a specific property, like eslintConfig, babel and others. Those are command-specific, and you can find how to use those in the respective command/project documentation.</p>\n<h2>Package versions</h2>\n<p>You have seen in the description above version numbers like these: ~3.0.0 or ^0.13.0. What do they mean, and which other version specifiers can you use?</p>\n<p>That symbol specifies which updates your package accepts, from that dependency.</p>\n<p>Given that using semver (semantic versioning) all versions have 3 digits, the first being the major release, the second the minor release and the third is the patch release, you have these \"<a href=\"https://nodejs.dev/learn/semantic-versioning-using-npm/\">Rules</a>\".</p>\n<p>You can combine most of the versions in ranges, like this: 1.0.0 || >=1.1.0 &#x3C;1.2.0, to either use 1.0.0 or one release from 1.1.0 up, but lower than 1.2.0.</p>\n<h1>Cheat Sheet:</h1>\n<pre><code class=\"language-js\">/* *******************************************************************************************\n * SYNOPSIS\n * http://nodejs.org/api/synopsis.html\n * ******************************************************************************************* */\n\n\nvar http = require('http');\n\n// An example of a web server written with Node which responds with 'Hello World'.\n// To run the server, put the code into a file called example.js and execute it with the node program.\nhttp.createServer(function (request, response) {\n  response.writeHead(200, {'Content-Type': 'text/plain'});\n  response.end('Hello World\\n');\n}).listen(8124);\n\nconsole.log('Server running at http://127.0.0.1:8124/');\n\n\n/* *******************************************************************************************\n * GLOBAL OBJECTS\n * http://nodejs.org/api/globals.html\n * ******************************************************************************************* */\n\n\n// In browsers, the top-level scope is the global scope.\n// That means that in browsers if you're in the global scope var something will define a global variable.\n// In Node this is different. The top-level scope is not the global scope; var something inside a Node module will be local to that module.\n\n__filename;  // The filename of the code being executed. (absolute path)\n__dirname;   // The name of the directory that the currently executing script resides in. (absolute path)\nmodule;      // A reference to the current module. In particular module.exports is used for defining what a module exports and makes available through require().\nexports;     // A reference to the module.exports that is shorter to type.\nprocess;     // The process object is a global object and can be accessed from anywhere. It is an instance of EventEmitter.\nBuffer;      // The Buffer class is a global type for dealing with binary data directly.\n\n\n/* *******************************************************************************************\n * CONSOLE\n * http://nodejs.org/api/console.html\n * ******************************************************************************************* */\n\n\nconsole.log([data], [...]);             // Prints to stdout with newline.\nconsole.info([data], [...]);            // Same as console.log.\nconsole.error([data], [...]);           // Same as console.log but prints to stderr.\nconsole.warn([data], [...]);            // Same as console.error.\nconsole.dir(obj);                       // Uses util.inspect on obj and prints resulting string to stdout.\nconsole.time(label);                    // Mark a time.\nconsole.timeEnd(label);                 // Finish timer, record output.\nconsole.trace(label);                   // Print a stack trace to stderr of the current position.\nconsole.assert(expression, [message]);  // Same as assert.ok() where if the expression evaluates as false throw an AssertionError with message.\n\n\n/* *******************************************************************************************\n * TIMERS\n * http://nodejs.org/api/timers.html\n * ******************************************************************************************* */\n\n\nsetTimeout(callback, delay, [arg], [...]);   // To schedule execution of a one-time callback after delay milliseconds. Optionally you can also pass arguments to the callback.\nclearTimeout(t);                             // Stop a timer that was previously created with setTimeout().\nsetInterval(callback, delay, [arg], [...]);  // To schedule the repeated execution of callback every delay milliseconds. Optionally you can also pass arguments to the callback.\nclearInterval(t);                            // Stop a timer that was previously created with setInterval().\nsetImmediate(callback, [arg], [...]);        // To schedule the \"immediate\" execution of callback after I/O events callbacks and before setTimeout and setInterval.\nclearImmediate(immediateObject);             // Stop a timer that was previously created with setImmediate().\n\nunref();  // Allow you to create a timer that is active but if it is the only item left in the event loop, node won't keep the program running.\nref();    // If you had previously unref()d a timer you can call ref() to explicitly request the timer hold the program open.\n\n\n/* *******************************************************************************************\n * MODULES\n * http://nodejs.org/api/modules.html\n * ******************************************************************************************* */\n\n\nvar module = require('./module.js');    // Loads the module module.js in the same directory.\nmodule.require('./another_module.js');  // load another_module as if require() was called from the module itself.\n\nmodule.id;        // The identifier for the module. Typically this is the fully resolved filename.\nmodule.filename;  // The fully resolved filename to the module.\nmodule.loaded;    // Whether or not the module is done loading, or is in the process of loading.\nmodule.parent;    // The module that required this one.\nmodule.children;  // The module objects required by this one.\n\nexports.area = function (r) {\n  return Math.PI * r * r;\n};\n\n// If you want the root of your module's export to be a function (such as a constructor)\n// or if you want to export a complete object in one assignment instead of building it one property at a time,\n// assign it to module.exports instead of exports.\nmodule.exports = function(width) {\n  return {\n    area: function() {\n      return width * width;\n    }\n  };\n}\n\n\n/* *******************************************************************************************\n * PROCESS\n * http://nodejs.org/api/process.html\n * ******************************************************************************************* */\n\n\nprocess.on('exit', function(code) {});              // Emitted when the process is about to exit\nprocess.on('uncaughtException', function(err) {});  // Emitted when an exception bubbles all the way back to the event loop. (should not be used)\n\nprocess.stdout;           // A writable stream to stdout.\nprocess.stderr;           // A writable stream to stderr.\nprocess.stdin;            // A readable stream for stdin.\n\nprocess.argv;             // An array containing the command line arguments.\nprocess.env;              // An object containing the user environment.\nprocess.execPath;         // This is the absolute pathname of the executable that started the process.\nprocess.execArgv;         // This is the set of node-specific command line options from the executable that started the process.\n\nprocess.arch;             // What processor architecture you're running on: 'arm', 'ia32', or 'x64'.\nprocess.config;           // An Object containing the JavaScript representation of the configure options that were used to compile the current node executable.\nprocess.pid;              // The PID of the process.\nprocess.platform;         // What platform you're running on: 'darwin', 'freebsd', 'linux', 'sunos' or 'win32'.\nprocess.title;            // Getter/setter to set what is displayed in 'ps'.\nprocess.version;          // A compiled-in property that exposes NODE_VERSION.\nprocess.versions;         // A property exposing version strings of node and its dependencies.\n\nprocess.abort();          // This causes node to emit an abort. This will cause node to exit and generate a core file.\nprocess.chdir(dir);       // Changes the current working directory of the process or throws an exception if that fails.\nprocess.cwd();            // Returns the current working directory of the process.\nprocess.exit([code]);     // Ends the process with the specified code. If omitted, exit uses the 'success' code 0.\nprocess.getgid();         // Gets the group identity of the process.\nprocess.setgid(id);       // Sets the group identity of the process.\nprocess.getuid();         // Gets the user identity of the process.\nprocess.setuid(id);       // Sets the user identity of the process.\nprocess.getgroups();      // Returns an array with the supplementary group IDs.\nprocess.setgroups(grps);  // Sets the supplementary group IDs.\n\nprocess.initgroups(user, extra_grp);  // Reads /etc/group and initializes the group access list, using all groups of which the user is a member.\nprocess.kill(pid, [signal]);          // Send a signal to a process. pid is the process id and signal is the string describing the signal to send.\nprocess.memoryUsage();                // Returns an object describing the memory usage of the Node process measured in bytes.\nprocess.nextTick(callback);           // On the next loop around the event loop call this callback.\nprocess.maxTickDepth;                 // Callbacks passed to process.nextTick will usually be called at the end of the current flow of execution, and are thus approximately as fast as calling a function synchronously.\nprocess.umask([mask]);                // Sets or reads the process's file mode creation mask.\nprocess.uptime();                     // Number of seconds Node has been running.\nprocess.hrtime();                     // Returns the current high-resolution real time in a [seconds, nanoseconds] tuple Array.\n\n\n/* *******************************************************************************************\n * CHILD PROCESS\n * http://nodejs.org/api/child_process.html\n * ******************************************************************************************* */\n\n\n// Node provides a tri-directional popen facility through the child_process module.\n// It is possible to stream data through a child's stdin, stdout, and stderr in a fully non-blocking way.\n\nChildProcess;                                                 // Class. ChildProcess is an EventEmitter.\n\nchild.stdin;                                                  // A Writable Stream that represents the child process's stdin\nchild.stdout;                                                 // A Readable Stream that represents the child process's stdout\nchild.stderr;                                                 // A Readable Stream that represents the child process's stderr.\nchild.pid;                                                    // The PID of the child process\nchild.connected;                                              // If .connected is false, it is no longer possible to send messages\nchild.kill([signal]);                                         // Send a signal to the child process\nchild.send(message, [sendHandle]);                            // When using child_process.fork() you can write to the child using child.send(message, [sendHandle]) and messages are received by a 'message' event on the child.\nchild.disconnect();                                           // Close the IPC channel between parent and child, allowing the child to exit gracefully once there are no other connections keeping it alive.\nchild_process.spawn(command, [args], [options]);              // Launches a new process with the given command, with command line arguments in args. If omitted, args defaults to an empty Array.\nchild_process.exec(command, [options], callback);             // Runs a command in a shell and buffers the output.\nchild_process.execFile(file, [args], [options], [callback]);  // Runs a command in a shell and buffers the output.\nchild_process.fork(modulePath, [args], [options]);            // This is a special case of the spawn() functionality for spawning Node processes. In addition to having all the methods in a normal ChildProcess instance, the returned object has a communication channel built-in.\n\n\n/* *******************************************************************************************\n * UTIL\n * http://nodejs.org/api/util.html\n * ******************************************************************************************* */\n\n\n// These functions are in the module 'util'. Use require('util') to access them.\n\nutil.format(format, [...]);    // Returns a formatted string using the first argument as a printf-like format. (%s, %d, %j)\nutil.debug(string);            // A synchronous output function. Will block the process and output string immediately to stderr.\nutil.error([...]);             // Same as util.debug() except this will output all arguments immediately to stderr.\nutil.puts([...]);              // A synchronous output function. Will block the process and output all arguments to stdout with newlines after each argument.\nutil.print([...]);             // A synchronous output function. Will block the process, cast each argument to a string then output to stdout. (no newlines)\nutil.log(string);              // Output with timestamp on stdout.\nutil.inspect(object, [opts]);  // Return a string representation of object, which is useful for debugging. (options: showHidden, depth, colors, customInspect)\nutil.isArray(object);          // Returns true if the given \"object\" is an Array. false otherwise.\nutil.isRegExp(object);         // Returns true if the given \"object\" is a RegExp. false otherwise.\nutil.isDate(object);           // Returns true if the given \"object\" is a Date. false otherwise.\nutil.isError(object);          // Returns true if the given \"object\" is an Error. false otherwise.\nutil.promisify(fn)             // Takes a function whose last argument is a callback and returns a version that returns promises.\n\nutil.inherits(constructor, superConstructor);  // Inherit the prototype methods from one constructor into another.\n\n\n/* *******************************************************************************************\n * EVENTS\n * http://nodejs.org/api/events.html\n * ******************************************************************************************* */\n\n\n// All objects which emit events are instances of events.EventEmitter. You can access this module by doing: require(\"events\");\n// To access the EventEmitter class, require('events').EventEmitter.\n// All EventEmitters emit the event 'newListener' when new listeners are added and 'removeListener' when a listener is removed.\n\nemitter.addListener(event, listener);        // Adds a listener to the end of the listeners array for the specified event.\nemitter.on(event, listener);                 // Same as emitter.addListener().\nemitter.once(event, listener);               // Adds a one time listener for the event. This listener is invoked only the next time the event is fired, after which it is removed.\nemitter.removeListener(event, listener);     // Remove a listener from the listener array for the specified event.\nemitter.removeAllListeners([event]);         // Removes all listeners, or those of the specified event.\nemitter.setMaxListeners(n);                  // By default EventEmitters will print a warning if more than 10 listeners are added for a particular event.\nemitter.listeners(event);                    // Returns an array of listeners for the specified event.\nemitter.emit(event, [arg1], [arg2], [...]);  // Execute each of the listeners in order with the supplied arguments. Returns true if event had listeners, false otherwise.\n\nEventEmitter.listenerCount(emitter, event);  // Return the number of listeners for a given event.\n\n\n/* *******************************************************************************************\n * STREAM\n * http://nodejs.org/api/stream.html\n * ******************************************************************************************* */\n\n\n// A stream is an abstract interface implemented by various objects in Node. For example a request to an HTTP server is a stream, as is stdout.\n// Streams are readable, writable, or both. All streams are instances of EventEmitter.\n\n// The Readable stream interface is the abstraction for a source of data that you are reading from.\n// In other words, data comes out of a Readable stream.\n// A Readable stream will not start emitting data until you indicate that you are ready to receive it.\n// Examples of readable streams include: http responses on the client, http requests on the server, fs read streams\n// zlib streams, crypto streams, tcp sockets, child process stdout and stderr, process.stdin.\n\nvar readable = getReadableStreamSomehow();\n\nreadable.on('readable', function() {});   // When a chunk of data can be read from the stream, it will emit a 'readable' event.\nreadable.on('data', function(chunk) {});  // If you attach a data event listener, then it will switch the stream into flowing mode, and data will be passed to your handler as soon as it is available.\nreadable.on('end', function() {});        // This event fires when there will be no more data to read.\nreadable.on('close', function() {});      // Emitted when the underlying resource (for example, the backing file descriptor) has been closed. Not all streams will emit this.\nreadable.on('error', function() {});      // Emitted if there was an error receiving data.\n\n// The read() method pulls some data out of the internal buffer and returns it. If there is no data available, then it will return null.\n// This method should only be called in non-flowing mode. In flowing-mode, this method is called automatically until the internal buffer is drained.\nreadable.read([size]);\n\nreadable.setEncoding(encoding);           // Call this function to cause the stream to return strings of the specified encoding instead of Buffer objects.\nreadable.resume();                        // This method will cause the readable stream to resume emitting data events.\nreadable.pause();                         // This method will cause a stream in flowing-mode to stop emitting data events.\nreadable.pipe(destination, [options]);    // This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.\nreadable.unpipe([destination]);           // This method will remove the hooks set up for a previous pipe() call. If the destination is not specified, then all pipes are removed.\nreadable.unshift(chunk);                  // This is useful in certain cases where a stream is being consumed by a parser, which needs to \"un-consume\" some data that it has optimistically pulled out of the source, so that the stream can be passed on to some other party.\n\n\n// The Writable stream interface is an abstraction for a destination that you are writing data to.\n// Examples of writable streams include: http requests on the client, http responses on the server, fs write streams,\n// zlib streams, crypto streams, tcp sockets, child process stdin, process.stdout, process.stderr.\n\nvar writer = getWritableStreamSomehow();\n\nwritable.write(chunk, [encoding], [callback]);  // This method writes some data to the underlying system, and calls the supplied callback once the data has been fully handled.\nwriter.once('drain', write);                    // If a writable.write(chunk) call returns false, then the drain event will indicate when it is appropriate to begin writing more data to the stream.\n\nwritable.end([chunk], [encoding], [callback]);  // Call this method when no more data will be written to the stream.\nwriter.on('finish', function() {});             // When the end() method has been called, and all data has been flushed to the underlying system, this event is emitted.\nwriter.on('pipe', function(src) {});            // This is emitted whenever the pipe() method is called on a readable stream, adding this writable to its set of destinations.\nwriter.on('unpipe', function(src) {});          // This is emitted whenever the unpipe() method is called on a readable stream, removing this writable from its set of destinations.\nwriter.on('error', function(src) {});           // Emitted if there was an error when writing or piping data.\n\n\n// Duplex streams are streams that implement both the Readable and Writable interfaces. See above for usage.\n// Examples of Duplex streams include: tcp sockets, zlib streams, crypto streams.\n\n// Transform streams are Duplex streams where the output is in some way computed from the input. They implement both the Readable and Writable interfaces. See above for usage.\n// Examples of Transform streams include: zlib streams, crypto streams.\n\n\n/* *******************************************************************************************\n * FILE SYSTEM\n * http://nodejs.org/api/fs.html\n * ******************************************************************************************* */\n\n\n// To use this module do require('fs').\n// All the methods have asynchronous and synchronous forms.\n\nfs.rename(oldPath, newPath, callback);  // Asynchronous rename. No arguments other than a possible exception are given to the completion callback.Asynchronous ftruncate. No arguments other than a possible exception are given to the completion callback.\nfs.renameSync(oldPath, newPath);        // Synchronous rename.\n\nfs.ftruncate(fd, len, callback);        // Asynchronous ftruncate. No arguments other than a possible exception are given to the completion callback.\nfs.ftruncateSync(fd, len);              // Synchronous ftruncate.\nfs.truncate(path, len, callback);       // Asynchronous truncate. No arguments other than a possible exception are given to the completion callback.\nfs.truncateSync(path, len);             // Synchronous truncate.\n\nfs.chown(path, uid, gid, callback);     // Asynchronous chown. No arguments other than a possible exception are given to the completion callback.\nfs.chownSync(path, uid, gid);           // Synchronous chown.\nfs.fchown(fd, uid, gid, callback);      // Asynchronous fchown. No arguments other than a possible exception are given to the completion callback.\nfs.fchownSync(fd, uid, gid);            // Synchronous fchown.\nfs.lchown(path, uid, gid, callback);    // Asynchronous lchown. No arguments other than a possible exception are given to the completion callback.\nfs.lchownSync(path, uid, gid);          // Synchronous lchown.\n\nfs.chmod(path, mode, callback);         // Asynchronous chmod. No arguments other than a possible exception are given to the completion callback.\nfs.chmodSync(path, mode);               // Synchronous chmod.\nfs.fchmod(fd, mode, callback);          // Asynchronous fchmod. No arguments other than a possible exception are given to the completion callback.\nfs.fchmodSync(fd, mode);                // Synchronous fchmod.\nfs.lchmod(path, mode, callback);        // Asynchronous lchmod. No arguments other than a possible exception are given to the completion callback.\nfs.lchmodSync(path, mode);              // Synchronous lchmod.\n\nfs.stat(path, callback);                // Asynchronous stat. The callback gets two arguments (err, stats) where stats is a fs.Stats object.\nfs.statSync(path);                      // Synchronous stat. Returns an instance of fs.Stats.\nfs.lstat(path, callback);               // Asynchronous lstat. The callback gets two arguments (err, stats) where stats is a fs.Stats object. lstat() is identical to stat(), except that if path is a symbolic link, then the link itself is stat-ed, not the file that it refers to.\nfs.lstatSync(path);                     // Synchronous lstat. Returns an instance of fs.Stats.\nfs.fstat(fd, callback);                 // Asynchronous fstat. The callback gets two arguments (err, stats) where stats is a fs.Stats object. fstat() is identical to stat(), except that the file to be stat-ed is specified by the file descriptor fd.\nfs.fstatSync(fd);                       // Synchronous fstat. Returns an instance of fs.Stats.\n\nfs.link(srcpath, dstpath, callback);             // Asynchronous link. No arguments other than a possible exception are given to the completion callback.\nfs.linkSync(srcpath, dstpath);                   // Synchronous link.\nfs.symlink(srcpath, dstpath, [type], callback);  // Asynchronous symlink. No arguments other than a possible exception are given to the completion callback. The type argument can be set to 'dir', 'file', or 'junction' (default is 'file') and is only available on Windows (ignored on other platforms)\nfs.symlinkSync(srcpath, dstpath, [type]);        // Synchronous symlink.\nfs.readlink(path, callback);                     // Asynchronous readlink. The callback gets two arguments (err, linkString).\nfs.readlinkSync(path);                           // Synchronous readlink. Returns the symbolic link's string value.\nfs.unlink(path, callback);                       // Asynchronous unlink. No arguments other than a possible exception are given to the completion callback.\nfs.unlinkSync(path);                             // Synchronous unlink.\n\nfs.realpath(path, [cache], callback);     // Asynchronous realpath. The callback gets two arguments (err, resolvedPath).\nfs.realpathSync(path, [cache]);           // Synchronous realpath. Returns the resolved path.\n\nfs.rmdir(path, callback);                 // Asynchronous rmdir. No arguments other than a possible exception are given to the completion callback.\nfs.rmdirSync(path);                       // Synchronous rmdir.\nfs.mkdir(path, [mode], callback);         // Asynchronous mkdir. No arguments other than a possible exception are given to the completion callback. mode defaults to 0777.\nfs.mkdirSync(path, [mode]);               // Synchronous mkdir.\nfs.readdir(path, callback);               // Asynchronous readdir. Reads the contents of a directory. The callback gets two arguments (err, files) where files is an array of the names of the files in the directory excluding '.' and '..'.\nfs.readdirSync(path);                     // Synchronous readdir. Returns an array of filenames excluding '.' and '..'.\nfs.close(fd, callback);                   // Asynchronous close. No arguments other than a possible exception are given to the completion callback.\nfs.closeSync(fd);                         // Synchronous close.\nfs.open(path, flags, [mode], callback);   // Asynchronous file open.\nfs.openSync(path, flags, [mode]);         // Synchronous version of fs.open().\nfs.utimes(path, atime, mtime, callback);  // Change file timestamps of the file referenced by the supplied path.\nfs.utimesSync(path, atime, mtime);        // Synchronous version of fs.utimes().\nfs.futimes(fd, atime, mtime, callback);   // Change the file timestamps of a file referenced by the supplied file descriptor.\nfs.futimesSync(fd, atime, mtime);         // Synchronous version of fs.futimes().\nfs.fsync(fd, callback);                   // Asynchronous fsync. No arguments other than a possible exception are given to the completion callback.\nfs.fsyncSync(fd);                         // Synchronous fsync.\n\nfs.write(fd, buffer, offset, length, position, callback);  // Write buffer to the file specified by fd.\nfs.writeSync(fd, buffer, offset, length, position);        // Synchronous version of fs.write(). Returns the number of bytes written.\nfs.read(fd, buffer, offset, length, position, callback);   // Read data from the file specified by fd.\nfs.readSync(fd, buffer, offset, length, position);         // Synchronous version of fs.read. Returns the number of bytesRead.\nfs.readFile(filename, [options], callback);                // Asynchronously reads the entire contents of a file.\nfs.readFileSync(filename, [options]);                      // Synchronous version of fs.readFile. Returns the contents of the filename. If the encoding option is specified then this function returns a string. Otherwise it returns a buffer.\n\nfs.writeFile(filename, data, [options], callback);   // Asynchronously writes data to a file, replacing the file if it already exists. data can be a string or a buffer.\nfs.writeFileSync(filename, data, [options]);         // The synchronous version of fs.writeFile.\nfs.appendFile(filename, data, [options], callback);  // Asynchronously append data to a file, creating the file if it not yet exists. data can be a string or a buffer.\nfs.appendFileSync(filename, data, [options]);        // The synchronous version of fs.appendFile.\nfs.watch(filename, [options], [listener]);           // Watch for changes on filename, where filename is either a file or a directory. The returned object is a fs.FSWatcher. The listener callback gets two arguments (event, filename). event is either 'rename' or 'change', and filename is the name of the file which triggered the event.\nfs.exists(path, callback);                           // Test whether or not the given path exists by checking with the file system. Then call the callback argument with either true or false. (should not be used)\nfs.existsSync(path);                                 // Synchronous version of fs.exists. (should not be used)\n\n// fs.Stats: objects returned from fs.stat(), fs.lstat() and fs.fstat() and their synchronous counterparts are of this type.\nstats.isFile();\nstats.isDirectory()\nstats.isBlockDevice()\nstats.isCharacterDevice()\nstats.isSymbolicLink()  // (only valid with fs.lstat())\nstats.isFIFO()\nstats.isSocket()\n\nfs.createReadStream(path, [options]);   // Returns a new ReadStream object.\nfs.createWriteStream(path, [options]);  // Returns a new WriteStream object.\n\n\n/* *******************************************************************************************\n * PATH\n * http://nodejs.org/api/fs.html\n * ******************************************************************************************* */\n\n\n// Use require('path') to use this module.\n// This module contains utilities for handling and transforming file paths.\n// Almost all these methods perform only string transformations.\n// The file system is not consulted to check whether paths are valid.\n\npath.normalize(p);                    // Normalize a string path, taking care of '..' and '.' parts.\npath.join([path1], [path2], [...]);   // Join all arguments together and normalize the resulting path.\npath.resolve([from ...], to);         // Resolves 'to' to an absolute path.\npath.relative(from, to);              // Solve the relative path from 'from' to 'to'.\npath.dirname(p);                      // Return the directory name of a path. Similar to the Unix dirname command.\npath.basename(p, [ext]);              // Return the last portion of a path. Similar to the Unix basename command.\npath.extname(p);                      // Return the extension of the path, from the last '.' to end of string in the last portion of the path.\n\npath.sep;                             // The platform-specific file separator. '\\\\' or '/'.\npath.delimiter;                       // The platform-specific path delimiter, ';' or ':'.\n\n\n/* *******************************************************************************************\n * HTTP\n * http://nodejs.org/api/http.html\n * ******************************************************************************************* */\n\n\n// To use the HTTP server and client one must require('http').\n\nhttp.STATUS_CODES;                                             // A collection of all the standard HTTP response status codes, and the short description of each.\nhttp.request(options, [callback]);                             // This function allows one to transparently issue requests.\nhttp.get(options, [callback]);                                 // Set the method to GET and calls req.end() automatically.\n\nserver = http.createServer([requestListener]);                 // Returns a new web server object. The requestListener is a function which is automatically added to the 'request' event.\nserver.listen(port, [hostname], [backlog], [callback]);        // Begin accepting connections on the specified port and hostname.\nserver.listen(path, [callback]);                               // Start a UNIX socket server listening for connections on the given path.\nserver.listen(handle, [callback]);                             // The handle object can be set to either a server or socket (anything with an underlying _handle member), or a {fd: &#x3C;n>} object.\nserver.close([callback]);                                      // Stops the server from accepting new connections.\nserver.setTimeout(msecs, callback);                            // Sets the timeout value for sockets, and emits a 'timeout' event on the Server object, passing the socket as an argument, if a timeout occurs.\n\nserver.maxHeadersCount;  // Limits maximum incoming headers count, equal to 1000 by default. If set to 0 - no limit will be applied.\nserver.timeout;          // The number of milliseconds of inactivity before a socket is presumed to have timed out.\n\nserver.on('request', function (request, response) { });        // Emitted each time there is a request.\nserver.on('connection', function (socket) { });                // When a new TCP stream is established.\nserver.on('close', function () { });                           // Emitted when the server closes.\nserver.on('checkContinue', function (request, response) { });  // Emitted each time a request with an http Expect: 100-continue is received.\nserver.on('connect', function (request, socket, head) { });    // Emitted each time a client requests a http CONNECT method.\nserver.on('upgrade', function (request, socket, head) { });    // Emitted each time a client requests a http upgrade.\nserver.on('clientError', function (exception, socket) { });    // If a client connection emits an 'error' event - it will forwarded here.\n\nrequest.write(chunk, [encoding]);                              // Sends a chunk of the body.\nrequest.end([data], [encoding]);                               // Finishes sending the request. If any parts of the body are unsent, it will flush them to the stream.\nrequest.abort();                                               // Aborts a request.\nrequest.setTimeout(timeout, [callback]);                       // Once a socket is assigned to this request and is connected socket.setTimeout() will be called.\nrequest.setNoDelay([noDelay]);                                 // Once a socket is assigned to this request and is connected socket.setNoDelay() will be called.\nrequest.setSocketKeepAlive([enable], [initialDelay]);          // Once a socket is assigned to this request and is connected socket.setKeepAlive() will be called.\n\nrequest.on('response', function(response) { });                // Emitted when a response is received to this request. This event is emitted only once.\nrequest.on('socket', function(socket) { });                    // Emitted after a socket is assigned to this request.\nrequest.on('connect', function(response, socket, head) { });   // Emitted each time a server responds to a request with a CONNECT method. If this event isn't being listened for, clients receiving a CONNECT method will have their connections closed.\nrequest.on('upgrade', function(response, socket, head) { });   // Emitted each time a server responds to a request with an upgrade. If this event isn't being listened for, clients receiving an upgrade header will have their connections closed.\nrequest.on('continue', function() { });                        // Emitted when the server sends a '100 Continue' HTTP response, usually because the request contained 'Expect: 100-continue'. This is an instruction that the client should send the request body.\n\nresponse.write(chunk, [encoding]);                             // This sends a chunk of the response body. If this merthod is called and response.writeHead() has not been called, it will switch to implicit header mode and flush the implicit headers.\nresponse.writeContinue();                                      // Sends a HTTP/1.1 100 Continue message to the client, indicating that the request body should be sent.\nresponse.writeHead(statusCode, [reasonPhrase], [headers]);     // Sends a response header to the request.\nresponse.setTimeout(msecs, callback);                          // Sets the Socket's timeout value to msecs. If a callback is provided, then it is added as a listener on the 'timeout' event on the response object.\nresponse.setHeader(name, value);                               // Sets a single header value for implicit headers. If this header already exists in the to-be-sent headers, its value will be replaced. Use an array of strings here if you need to send multiple headers with the same name.\nresponse.getHeader(name);                                      // Reads out a header that's already been queued but not sent to the client. Note that the name is case insensitive.\nresponse.removeHeader(name);                                   // Removes a header that's queued for implicit sending.\nresponse.addTrailers(headers);                                 // This method adds HTTP trailing headers (a header but at the end of the message) to the response.\nresponse.end([data], [encoding]);                              // This method signals to the server that all of the response headers and body have been sent; that server should consider this message complete. The method, response.end(), MUST be called on each response.\n\nresponse.statusCode;                                           // When using implicit headers (not calling response.writeHead() explicitly), this property controls the status code that will be sent to the client when the headers get flushed.\nresponse.headersSent;                                          // Boolean (read-only). True if headers were sent, false otherwise.\nresponse.sendDate;                                             // When true, the Date header will be automatically generated and sent in the response if it is not already present in the headers. Defaults to true.\n\nresponse.on('close', function () { });  // Indicates that the underlying connection was terminated before response.end() was called or able to flush.\nresponse.on('finish', function() { });  // Emitted when the response has been sent.\n\nmessage.httpVersion;                    // In case of server request, the HTTP version sent by the client. In the case of client response, the HTTP version of the connected-to server.\nmessage.headers;                        // The request/response headers object.\nmessage.trailers;                       // The request/response trailers object. Only populated after the 'end' event.\nmessage.method;                         // The request method as a string. Read only. Example: 'GET', 'DELETE'.\nmessage.url;                            // Request URL string. This contains only the URL that is present in the actual HTTP request.\nmessage.statusCode;                     // The 3-digit HTTP response status code. E.G. 404.\nmessage.socket;                         // The net.Socket object associated with the connection.\n\nmessage.setTimeout(msecs, callback);    // Calls message.connection.setTimeout(msecs, callback).\n\n\n/* *******************************************************************************************\n * URL\n * http://nodejs.org/api/url.html\n * ******************************************************************************************* */\n\n\n// This module has utilities for URL resolution and parsing. Call require('url') to use it.\n\nurl.parse(urlStr, [parseQueryString], [slashesDenoteHost]);  // Take a URL string, and return an object.\nurl.format(urlObj);                                          // Take a parsed URL object, and return a formatted URL string.\nurl.resolve(from, to);                                       // Take a base URL, and a href URL, and resolve them as a browser would for an anchor tag.\n\n\n/* *******************************************************************************************\n * QUERY STRING\n * http://nodejs.org/api/querystring.html\n * ******************************************************************************************* */\n\n\n// This module provides utilities for dealing with query strings. Call require('querystring') to use it.\n\nquerystring.stringify(obj, [sep], [eq]);         // Serialize an object to a query string. Optionally override the default separator ('&#x26;') and assignment ('=') characters.\nquerystring.parse(str, [sep], [eq], [options]);  // Deserialize a query string to an object. Optionally override the default separator ('&#x26;') and assignment ('=') characters.\n\n\n/* *******************************************************************************************\n * ASSERT\n * http://nodejs.org/api/assert.html\n * ******************************************************************************************* */\n\n\n// This module is used for writing unit tests for your applications, you can access it with require('assert').\n\nassert.fail(actual, expected, message, operator);     // Throws an exception that displays the values for actual and expected separated by the provided operator.\nassert(value, message); assert.ok(value, [message]);  // Tests if value is truthy, it is equivalent to assert.equal(true, !!value, message);\nassert.equal(actual, expected, [message]);            // Tests shallow, coercive equality with the equal comparison operator ( == ).\nassert.notEqual(actual, expected, [message]);         // Tests shallow, coercive non-equality with the not equal comparison operator ( != ).\nassert.deepEqual(actual, expected, [message]);        // Tests for deep equality.\nassert.notDeepEqual(actual, expected, [message]);     // Tests for any deep inequality.\nassert.strictEqual(actual, expected, [message]);      // Tests strict equality, as determined by the strict equality operator ( === )\nassert.notStrictEqual(actual, expected, [message]);   // Tests strict non-equality, as determined by the strict not equal operator ( !== )\nassert.throws(block, [error], [message]);             // Expects block to throw an error. error can be constructor, RegExp or validation function.\nassert.doesNotThrow(block, [message]);                // Expects block not to throw an error, see assert.throws for details.\nassert.ifError(value);                                // Tests if value is not a false value, throws if it is a true value. Useful when testing the first argument, error in callbacks.\n\n\n/* *******************************************************************************************\n * OS\n * http://nodejs.org/api/os.html\n * ******************************************************************************************* */\n\n\n// Provides a few basic operating-system related utility functions.\n// Use require('os') to access this module.\n\nos.tmpdir();             // Returns the operating system's default directory for temp files.\nos.endianness();         // Returns the endianness of the CPU. Possible values are \"BE\" or \"LE\".\nos.hostname();           // Returns the hostname of the operating system.\nos.type();               // Returns the operating system name.\nos.platform();           // Returns the operating system platform.\nos.arch();               // Returns the operating system CPU architecture.\nos.release();            // Returns the operating system release.\nos.uptime();             // Returns the system uptime in seconds.\nos.loadavg();            // Returns an array containing the 1, 5, and 15 minute load averages.\nos.totalmem();           // Returns the total amount of system memory in bytes.\nos.freemem();            // Returns the amount of free system memory in bytes.\nos.cpus();               // Returns an array of objects containing information about each CPU/core installed: model, speed (in MHz), and times (an object containing the number of milliseconds the CPU/core spent in: user, nice, sys, idle, and irq).\nos.networkInterfaces();  // Get a list of network interfaces.\nos.EOL;                  // A constant defining the appropriate End-of-line marker for the operating system.\n\n\n/* *******************************************************************************************\n * BUFFER\n * http://nodejs.org/api/buffer.html\n * ******************************************************************************************* */\n\n\n// Buffer is used to dealing with binary data\n// Buffer is similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap\n\nBuffer.from(size);                                                  // Allocates a new buffer of size octets.\nBuffer.from(array);                                                 // Allocates a new buffer using an array of octets.\nBuffer.from(str, [encoding]);                                       // Allocates a new buffer containing the given str. encoding defaults to 'utf8'.\n\nBuffer.isEncoding(encoding);                                        // Returns true if the encoding is a valid encoding argument, or false otherwise.\nBuffer.isBuffer(obj);                                               // Tests if obj is a Buffer\nBuffer.concat(list, [totalLength]);                                 // Returns a buffer which is the result of concatenating all the buffers in the list together.\nBuffer.byteLength(string, [encoding]);                              // Gives the actual byte length of a string.\n\nbuf.write(string, [offset], [length], [encoding]);                  // Writes string to the buffer at offset using the given encoding\nbuf.toString([encoding], [start], [end]);                           // Decodes and returns a string from buffer data encoded with encoding (defaults to 'utf8') beginning at start (defaults to 0) and ending at end (defaults to buffer.length).\nbuf.toJSON();                                                       // Returns a JSON-representation of the Buffer instance, which is identical to the output for JSON Arrays\nbuf.copy(targetBuffer, [targetStart], [sourceStart], [sourceEnd]);  // Does copy between buffers. The source and target regions can be overlapped\nbuf.slice([start], [end]);                                          // Returns a new buffer which references the same memory as the old, but offset and cropped by the start (defaults to 0) and end (defaults to buffer.length) indexes. Negative indexes start from the end of the buffer.\nbuf.fill(value, [offset], [end]);                                   // Fills the buffer with the specified value\nbuf[index];                                                         // Get and set the octet at index\nbuf.length;                                                         // The size of the buffer in bytes, Note that this is not necessarily the size of the contents\n\nbuffer.INSPECT_MAX_BYTES;                                           // How many bytes will be returned when buffer.inspect() is called. This can be overridden by user modules.\n</code></pre>"},{"url":"/docs/audio/audio/","relativePath":"docs/audio/audio.md","relativeDir":"docs/audio","base":"audio.md","name":"audio","frontmatter":{"title":"Audio","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h2>Lorem ipsum</h2>\n<p>Lorem ipsum dolor sit amet, <strong>consectetur adipiscing elit</strong>, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n<ul>\n<li>Lorem ipsum</li>\n<li>dolor sit amet</li>\n</ul>"},{"url":"/docs/articles/web-standards-checklist/","relativePath":"docs/articles/web-standards-checklist.md","relativeDir":"docs/articles","base":"web-standards-checklist.md","name":"web-standards-checklist","frontmatter":{"title":"Web Standards Checklist","weight":0,"excerpt":"(HTML, XHTML, XML, CSS, XSLT, DOM, MathML, SVG etc) and *pursue best practices* (valid code, accessible code, semantically correct code, user-friendly URLs etc).","seo":{"title":"Web Standards Checklist","description":"as an aid for developers who are interested in moving towards web standards","robots":[],"extra":[]},"template":"docs"},"html":"<h2>Web Standards Checklist</h2>\n<p>The term web standards can mean different things to different people. For some, it is '<em>table-free sites</em>', for others it is '<em>using valid code</em>'. However, web standards are much broader than that. A site built to web standards should <em>adhere to standards</em> (HTML, XHTML, XML, CSS, XSLT, DOM, MathML, SVG etc) and <em>pursue best practices</em> (valid code, accessible code, semantically correct code, user-friendly URLs etc).</p>\n<p>In other words, a site built to web standards should ideally be <em>lean, clean, CSS-based, accessible, usable and search engine friendly</em>.</p>\n<h3>About the checklist</h3>\n<p>This is a guide that can be used:</p>\n<ul>\n<li>to show the breadth of web standards</li>\n<li>as a handy tool for developers during the production phase of websites</li>\n<li>as an aid for developers who are interested in moving towards web standards</li>\n</ul>\n<h3>The checklist</h3>\n<ol>\n<li>\n<p><a href=\"http://maxdesign.com.au/news/checklist/#quality\">Quality of code</a></p>\n<ol>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section1-1\">Does the site use a correct Doctype?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section1-2\">Does the site use a Character set?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section1-3\">Does the site use Valid (X)HTML?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section1-4\">Does the site use Valid CSS?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section1-5\">Does the site use any CSS hacks?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section1-6\">Does the site use unnecessary classes or ids?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section1-7\">Is the code well structured?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section1-8\">Does the site have any broken links?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section1-9\">How does the site perform in terms of speed/page size?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section1-10\">Does the site have JavaScript errors?</a></li>\n</ol>\n</li>\n<li>\n<p><a href=\"http://maxdesign.com.au/news/checklist/#degree\">Degree of separation between content and presentation</a></p>\n<ol>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section2-1\">Does the site use CSS for all presentation aspects (fonts, colour, padding, borders etc)?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section2-2\">Are all decorative images in the CSS, or do they appear in the (X)HTML?</a></li>\n</ol>\n</li>\n<li>\n<p><a href=\"http://maxdesign.com.au/news/checklist/#users\">Accessibility for users</a></p>\n<ol>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section3-1\">Are \"alt\" attributes used for all descriptive images?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section3-2\">Does the site use relative units rather than absolute units for text size?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section3-3\">Do any aspects of the layout break if font size is increased?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section3-4\">Does the site use visible skip menus?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section3-5\">Does the site use accessible forms?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section3-6\">Does the site use accessible tables?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section3-7\">Is there sufficient colour brightness/contrasts?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section3-8\">Is colour alone used for critical information?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section3-9\">Is there delayed responsiveness for dropdown menus (for users with reduced motor skills)?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section3-10\">Are all links descriptive (for blind users)?</a></li>\n</ol>\n</li>\n<li>\n<p><a href=\"http://maxdesign.com.au/news/checklist/#devices\">Accessibility for devices</a></p>\n<ol>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section4-1\">Does the site work acceptably across modern and older browsers?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section4-2\">Is the content accessible with CSS switched off or not supported?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section4-3\">Is the content accessible with images switched off or not supported?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section4-4\">Does the site work in text browsers such as Lynx?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section4-5\">Does the site work well when printed?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section4-6\">Does the site work well in Hand Held devices?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section4-7\">Does the site include detailed metadata?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section4-8\">Does the site work well in a range of browser window sizes?</a></li>\n</ol>\n</li>\n<li>\n<p><a href=\"http://maxdesign.com.au/news/checklist/#usability\">Basic Usability</a></p>\n<ol>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section5-1\">Is there a clear visual hierarchy?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section5-2\">Are heading levels easy to distinguish?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section5-3\">Is the site's navigation easy to understand?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section5-4\">Is the site's navigation consistent?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section5-5\">Does the site use consistent and appropriate language?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section5-6\">Does the site have a sitemap page and contact page? Are they easy to find?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section5-7\">For large sites, is there a search tool?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section5-8\">Is there a link to the home page on every page in the site?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section5-9\">Are links underlined?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section5-10\">Are visited links clearly defined?</a></li>\n</ol>\n</li>\n<li>\n<p><a href=\"http://maxdesign.com.au/news/checklist/#site\">Site management</a></p>\n<ol>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section6-1\">Does the site have a meaningful and helpful 404 error page that works from any depth in the site?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section6-2\">Does the site use friendly URLs?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section6-3\">Do your URLs work without \"www\"?</a></li>\n<li><a href=\"http://maxdesign.com.au/news/checklist/#section6-4\">Does the site have a favicon?</a></li>\n</ol>\n</li>\n</ol>\n<h3>1. Quality of code</h3>\n<h4>1.1 Does the site use a correct Doctype?</h4>\n<blockquote>\n<p>A doctype (short for 'document type declaration') informs the validator which version of (X)HTML you're using, and must appear at the very top of every web page. Doctypes are a key component of compliant web pages: your markup and CSS won't validate without them.</p>\n<p><em><a href=\"http://www.alistapart.com/articles/doctype/\">Fix your site with the right doctype</a></em></p>\n</blockquote>\n<p>More:</p>\n<ul>\n<li><a href=\"http://www.w3.org/QA/2002/04/valid-dtd-list.html\">http://www.w3.org/QA/2002/04/valid-dtd-list.html</a></li>\n<li><a href=\"http://css.maxdesign.com.au/listamatic/about-boxmodel.htm\">http://css.maxdesign.com.au/listamatic/about-boxmodel.htm</a></li>\n<li><a href=\"http://gutfeldt.ch/matthias/articles/doctypeswitch.html\">http://gutfeldt.ch/matthias/articles/doctypeswitch.html</a></li>\n</ul>\n<h4>1.2 Does the site use a Character set?</h4>\n<blockquote>\n<p>If a user agent (eg. a browser) is unable to detect the character encoding used in a Web document, the user may be presented with unreadable text. This information is particularly important for those maintaining and extending a multilingual site, but  declaring the character encoding of the document is important for anyone producing XHTML/HTML or CSS.</p>\n<p><em><a href=\"http://www.w3.org/International/tutorials/tutorial-char-enc/\">Tutorial: Character sets &#x26; encodings in XHTML, HTML and CSS</a></em></p>\n</blockquote>\n<p>More:</p>\n<ul>\n<li><a href=\"http://www.w3.org/International/O-charset.html\">Character encodings</a></li>\n</ul>\n<h4>1.3 Does the site use Valid (X)HTML?</h4>\n<blockquote>\n<p>Valid code will render faster than code with errors. Valid code will render better than invalid code. Browsers are becoming more standards compliant, and it is becoming increasingly necessary to write valid and standards compliant HTML</p>\n</blockquote>\n<p>More:</p>\n<ul>\n<li><a href=\"http://validator.w3.org/\">W3C Markup Validation Service</a></li>\n</ul>\n<h4>1.4 Does the site use Valid CSS?</h4>\n<blockquote>\n<p>You need to make sure that there aren't any errors in either your HTML or your CSS, since mistakes in either place can result in botched document appearance.</p>\n<p><em><a href=\"http://www.meyerweb.com/eric/articles/webrev/199904.html\">Help! My CSS Isn't Working!</a></em></p>\n</blockquote>\n<p>More:</p>\n<ul>\n<li><a href=\"http://jigsaw.w3.org/css-validator/\">W3C CSS Validation Service</a></li>\n</ul>\n<h4>1.5 Does the site use any CSS hacks?</h4>\n<blockquote>\n<p>Basically, hacks come down to personal choice, the amount of knowledge you have of workarounds, the specific design you are trying to achieve.</p>\n<p><em><a href=\"http://www.mail-archive.com/wsg@webstandardsgroup.org/msg05823.html\">Standard Hacks?</a></em></p>\n</blockquote>\n<p>More:</p>\n<ul>\n<li><a href=\"http://css-discuss.incutio.com/?page=CssHack\">CSS Hacks</a></li>\n<li><a href=\"http://css-discuss.incutio.com/?page=ToHackOrNotToHack\">To hack or not to hack</a></li>\n<li><a href=\"http://centricle.com/ref/css/filters/\">CSS filters</a></li>\n</ul>\n<h4>1.6 Does the site use unnecessary classes or ids?</h4>\n<blockquote>\n<p>I've noticed that developers learning new skills often end up with good CSS but poor XHTML. Specifically, the HTML code tends to be full of unnecessary divs and ids. This results in fairly meaningless HTML and bloated style sheets.</p>\n<p><em><a href=\"http://www.clagnut.com/blog/228/\">Markup tactics</a></em></p>\n</blockquote>\n<h4>1.7 Is the code well structured?</h4>\n<blockquote>\n<p>Semantically correct markup uses html elements for their given purpose. Well structured HTML has semantic meaning for a wide range of user agents (browsers without style sheets, text browsers, PDAs, search engines etc.)</p>\n</blockquote>\n<p>More:</p>\n<ul>\n<li><a href=\"http://www.w3.org/2003/12/semantic-extractor.html\">Semantic data extractor</a></li>\n</ul>\n<h4>1.8 Does the site have any broken links?</h4>\n<p>Broken links can frustrate users and potentially drive customers away. Broken links can also keep search engines from properly indexing your site.</p>\n<p>More:</p>\n<ul>\n<li><a href=\"http://validator.w3.org/checklink\">W3C Link checker</a></li>\n</ul>\n<h4>1.9 How does the site perform in terms of speed/page size?</h4>\n<blockquote>\n<p>Don't make me wait... That's the message users give us in survey after survey. Even broadband users can suffer the slow-loading blues.</p>\n<p><em><a href=\"http://www.websiteoptimization.com/speed/\">Speed Up Your Site: Web Site Optimization</a></em></p>\n</blockquote>\n<h4>1.10 Does the site have JavaScript errors?</h4>\n<p>Internet Explore for Windows allows you to turn on a debugger that will pop up a new window and let you know there are javascript errors on your site. This is available under 'Internet Options' on the Advanced tab. Uncheck 'Disable script debugging'.</p>\n<h3>2. Degree of separation between content and presentation</h3>\n<h4>2.1 Does the site use CSS for all presentation aspects (fonts, colour, padding, borders etc)?</h4>\n<blockquote>\n<p>Use style sheets to control layout and presentation</p>\n<p><em><a href=\"http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-style-sheets\">Web Content Accessibility Guidelines 1.0 -- checkpoint 3.3</a></em></p>\n</blockquote>\n<h4>2.2 Are all decorative images in the CSS, or do they appear in the (X)HTML?</h4>\n<blockquote>\n<p>The aim for web developers is to remove all presentation from the html code, leaving it clean and semantically correct.</p>\n</blockquote>\n<h3>3. Accessibility for users</h3>\n<h4>3.1 Are \"alt\" attributes used for all descriptive images?</h4>\n<blockquote>\n<p>Provide a text equivalent for every non-text element</p>\n<p><em><a href=\"http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-text-equivalent\">Web Content Accessibility Guidelines -- checkpoint 1.1</a></em></p>\n</blockquote>\n<h4>3.2 Does the site use relative units rather than absolute units for text size?</h4>\n<blockquote>\n<p>Use relative rather than absolute units in markup language attribute values and style sheet property values'</p>\n<p><em><a href=\"http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-relative-units\">Web Content Accessibility Guidelines -- checkpoint 3.4</a></em></p>\n</blockquote>\n<p>More:</p>\n<ul>\n<li><a href=\"http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-relative-units\">Web Content Accessibility Guidelines -- checkpoint 3.4</a></li>\n<li><a href=\"http://www.clagnut.com/blog/348/\">How to size text using ems</a></li>\n</ul>\n<h4>3.3 Do any aspects of the layout break if font size is increased?</h4>\n<p>Try this simple test. Look at your website in a browser that supports easy incrementation of font size. Now increase your browser's font size. And again. And again... Look at your site. Does the page layout still hold together? It is dangerous for developers to assume that everyone browses using default font sizes.</p>\n<h4>3.4 Does the site use visible skip menus?</h4>\n<blockquote>\n<p>A method shall be provided that permits users to skip repetitive navigation links.</p>\n<p><em><a href=\"http://www.section508.gov/index.cfm?FuseAction=Content&#x26;ID=12\">Section 508</a></em></p>\n</blockquote>\n<blockquote>\n<p>Group related links, identify the group (for user agents), and, until user agents do so, provide a way to bypass the group</p>\n<p><em><a href=\"http://www.w3.org/TR/WCAG10-TECHS/#tech-group-links\">Web Content Accessibility Guidelines -- checkpoint 13.6</a></em></p>\n</blockquote>\n<blockquote>\n<p>...blind visitors are not the only ones inconvenienced by too many links in a navigation area. Recall that a mobility-impaired person with poor adaptive technology might be stuck tabbing through that morass.</p>\n<p><em><a href=\"http://joeclark.org/book/sashay/serialization/Chapter08.html#h4-2020\">Keep them visible!</a></em></p>\n</blockquote>\n<h4>3.5 Does the site use accessible forms?</h4>\n<blockquote>\n<p>Forms aren't the easiest of things to use for people with disabilities. Navigating around a page with written content is one thing, hopping between form fields and inputting information is another</p>\n<p><em><a href=\"http://www.htmldog.com/guides/htmladvanced/forms/\">Accessible forms</a></em></p>\n</blockquote>\n<p>More:</p>\n<ul>\n<li><a href=\"http://www.webstandards.org/learn/tutorials/accessible-forms/01-accessible-forms.html\">Accessible html/xhtml forms</a></li>\n<li><a href=\"http://www.accessify.com/tools-and-wizards/accessible-form-builder.asp\">Accessible form builder</a></li>\n</ul>\n<h4>3.6 Does the site use accessible tables?</h4>\n<blockquote>\n<p>For data tables, identify row and column headers... For data tables that have two or more logical levels of row or column headers, use markup to associate data cells and header cells.</p>\n<p><em><a href=\"http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-table-headers\">Web Content Accessiblity Guidelines -- checkpoint 5.1</a></em></p>\n</blockquote>\n<p>More:</p>\n<ul>\n<li><a href=\"http://bellevuecollege.edu/webpublishing/tips/accessibility/tables.asp\">How to create accessible tables</a></li>\n<li><a href=\"http://www.accessify.com/tools-and-wizards/accessibility-tools/table-builder/\">Accessible table builder</a></li>\n<li><a href=\"http://www.webaim.org/techniques/tables/\">Creating accessible tables</a></li>\n</ul>\n<h4>3.7 Is there sufficient colour brightness/contrasts?</h4>\n<blockquote>\n<p>Ensure that foreground and background colour combinations provide sufficient contrast when viewed by someone having colour deficits</p>\n<p><em><a href=\"http://www.w3.org/TR/WAI-WEBCONTENT-TECHS/#tech-color-contrast\">Web Content Accessibilty Guidelines -- checkpoint 2.2</a></em></p>\n</blockquote>\n<p>More:</p>\n<ul>\n<li><a href=\"http://www.juicystudio.com/services/colourcontrast.asp\">Colour Contrast Analyser</a></li>\n</ul>\n<h4>3.8 Is colour alone used for critical information?</h4>\n<blockquote>\n<p>Ensure that all information conveyed with colour is also available without colour, for example from context or markup</p>\n<p><em><a href=\"http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-color-convey\">Web Content Accessibilty Guidelines -- checkpoint 2.1</a></em></p>\n</blockquote>\n<p>There are basically three types of colour deficiency; Deuteranope (a form of red/green colour deficit), Protanope (another form of red/green colour deficit) and Tritanope (a blue/yellow deficit- very rare).</p>\n<p>More:</p>\n<ul>\n<li><a href=\"http://colorfilter.wickline.org/\">Colourblind Webpage filter</a></li>\n<li><a href=\"http://www.vischeck.com/vischeck/vischeckURL.php\">Vischeck</a></li>\n</ul>\n<h4>3.9 Is there delayed responsiveness for dropdown menus?</h4>\n<p>Users with reduced motor skills may find dropdown menus hard to use if responsiveness is set too fast.</p>\n<h4>3.10 Are all links descriptive?</h4>\n<blockquote>\n<p>Link text should be meaningful enough to make sense when read out of context -- either on its own or as part of a sequence of links. Link text should also be terse.</p>\n<p><em><a href=\"http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-meaningful-links\">Web Content Accessibility Guidelines 1.0 -- checkpoint 13.1</a></em></p>\n</blockquote>\n<h3>4. Accessibility for devices</h3>\n<h4>4.1 Does the site work acceptably across modern and older browsers?</h4>\n<blockquote>\n<p>Before starting to build a CSS-based layout, you should decide which browsers to support and to what level you intend to support them.</p>\n</blockquote>\n<h4>4.2 Is the content accessible with CSS switched off or not supported?</h4>\n<p>Some people may visit your site with either a browser that does not support CSS or a browser with CSS switched off. In content is structured well, this will not be an issue.</p>\n<h4>4.3 Is the content accessible with images switched off or not supported?</h4>\n<p>Some people browse websites with images switched off -- especially people on very slow connections. Content should still be accessible for these people.</p>\n<h4>4.4 Does the site work in text browsers such as Lynx?</h4>\n<p>This is like a combination of images and CSS switched off. A text-based browser will rely on well structured content to provide meaning.</p>\n<p>More:</p>\n<ul>\n<li><a href=\"http://www.delorie.com/web/lynxview\">Lynx Viewer</a></li>\n</ul>\n<h4>4.5 Does the site work well when printed?</h4>\n<blockquote>\n<p>You can take any (X)HTML document and simply style it for print, without having to touch the markup.</p>\n<p><em><a href=\"http://www.alistapart.com/articles/goingtoprint/\">Going to print</a></em></p>\n</blockquote>\n<p>More:</p>\n<ul>\n<li><a href=\"http://www.d.umn.edu/itss/support/Training/Online/webdesign/css.html#print\">Web Design References -- Print</a></li>\n</ul>\n<h4>4.6 Does the site work well in Hand Held devices?</h4>\n<p>This is a hard one to deal with until hand held devices consistently support their correct media type. However, some layouts work better in current hand-held devices. The importance of supporting hand held devices will depend on target audiences.</p>\n<h4>4.7 Does the site include detailed metadata?</h4>\n<blockquote>\n<p>Metadata is machine understandable information for the web</p>\n<p><em><a href=\"http://www.w3.org/Metadata/\">W3C -- Metadata and Resource Description</a></em></p>\n</blockquote>\n<p>Metadata is structured information that is created specifically to describe another resource. In other words, metadata is 'data about data'.</p>\n<h4>4.8 Does the site work well in a range of browser window sizes?</h4>\n<p>It is a common assumption amongst developers that average screen sizes are increasing. Some developers assume that the average screen size is now 1024px wide. But what about users with smaller screens and users with hand held devices? Are they part of your target audience and are they being disadvantaged?</p>\n<h3>5. Basic Usability</h3>\n<h4>5.1 Is there a clear visual hierarchy?</h4>\n<blockquote>\n<p>Organise and prioritise the contents of a page by using size, prominence and content relationships</p>\n<p><em><a href=\"http://www.great-web-design-tips.com/web-site-design/165.html\">Create a Clear Visual Hierarchy</a></em></p>\n</blockquote>\n<h4>5.2 Are heading levels easy to distinguish?</h4>\n<blockquote>\n<p>Use header elements to convey document structure and use them according to specification</p>\n<p><em><a href=\"http://www.w3.org/TR/WCAG10/wai-pageauth.html#tech-logical-headings\">Web Content Accessibility Guidelines 1.0 -- checkpoint 3.5</a></em></p>\n</blockquote>\n<h4>5.3 Is the site's navigation easy to understand?</h4>\n<blockquote>\n<p>Your navigation system should give your visitor a clue as to what page of the site they are currently on and where they can go next.</p>\n<p><em>[Design Tutorial -- Navigation](<a href=\"http://www.1stsitefree.com/design\">http://www.1stsitefree.com/design</a></em>nav.htm)_</p>\n</blockquote>\n<h4>5.4 Is the site's navigation consistent?</h4>\n<blockquote>\n<p>If each page on your site has a consistent style of presentation, visitors will find it easier to navigate between pages and find information</p>\n<p><em><a href=\"http://www.juicystudio.com/tutorial/accessibility/navigation.asp\">Juicy studios -- Navigation</a></em></p>\n</blockquote>\n<h4>5.5 Does the site use consistent and appropriate language?</h4>\n<blockquote>\n<p>The use of clear and simple language promotes effective communication. Trying to come across as articulate can be as difficult to read as poorly written grammar, especially if the language used isn't the visitor's primary language.</p>\n<p><em><a href=\"http://www.juicystudio.com/tutorial/accessibility/clear.asp\">Clear language</a></em></p>\n</blockquote>\n<h4>5.6 Does the site have a sitemap page and contact page? Are they  easy to find?</h4>\n<blockquote>\n<p>Most site maps fail to convey multiple levels of the site's information architecture. In usability tests, users often overlook site maps or can't find them. Complexity is also a problem: a map should be a map, not a navigational challenge of its own.</p>\n<p><em><a href=\"http://www.useit.com/alertbox/20020106.html\">Site Map Usability</a></em></p>\n</blockquote>\n<h4>5.7 For large sites, is there a search tool?</h4>\n<p>While search tools are not needed on smaller sites, and some people will not ever use them, site-specific search tools allow users a choice of navigation options.</p>\n<h4>5.8 Is there a link to the home page on every page in the site?</h4>\n<p>Some users like to go back to a site's home page after navigating to content within a site. The home page becomes a base camp for these users, allowing them to regroup before exploring new content.</p>\n<h4>5.9 Are links underlined?</h4>\n<blockquote>\n<p>To maximise the <a href=\"http://www.jnd.org/dn.mss/affordances-and-design.html\">perceived affordance</a> of clickability, colour and underline the link text. Users shouldn't have to guess or scrub the page to find out where they can click.</p>\n<p><em><a href=\"http://www.useit.com/alertbox/20040510.html\">Guidelines for Visualizing Links</a></em></p>\n</blockquote>\n<h4>5.10 Are visited links clearly defined?</h4>\n<blockquote>\n<p>Most important, knowing which pages they've already visited frees users from unintentionally revisiting the same pages over and over again.</p>\n<p><em><a href=\"http://www.useit.com/alertbox/20040503.html\">Change the Color of Visited Links</a></em></p>\n</blockquote>\n<h3>6. Site management</h3>\n<h4>6.1 Does the site have a meaningful and helpful 404 error page that works from any depth in the site?</h4>\n<blockquote>\n<p>You've requested a page -- either by typing a URL directly into the address bar or clicking on an out-of-date link and you've found yourself in the middle of cyberspace nowhere. A user-friendly website will give you a helping hand while many others will simply do nothing, relying on the browser's built-in ability to explain what the problem is.</p>\n<p><em><a href=\"http://www.alistapart.com/articles/perfect404/\">The perfect 404</a></em></p>\n</blockquote>\n<h4>6.2 Does the site use friendly URLs?</h4>\n<blockquote>\n<p>Most search engines (with a few exceptions -- namely Google) will not index any pages that have a question mark or other character (like an ampersand or equals sign) in the URL... what good is a site if no one can find it?</p>\n<p><em><a href=\"http://www.sitepoint.com/article/search-engine-friendly-urls\">Search Engine-Friendly URLs</a></em></p>\n</blockquote>\n<blockquote>\n<p>One of the worst elements of the web from a user interface standpoint is the URL. However, if they're short, logical, and self-correcting, URLs can be acceptably usable</p>\n<p><em><a href=\"http://www.merges.net/theory/20010305.html\">How to make URLs user-friendly</a></em></p>\n</blockquote>\n<p>More:</p>\n<ul>\n<li><a href=\"http://www.websitegoodies.com/article/32\">Creating Search Engine Friendly URLs</a></li>\n<li><a href=\"http://www.merges.net/theory/20010305.html\">How to make URLs user-friendly</a></li>\n</ul>\n<h4>6.3 Does the site's URL work without \"www\"?</h4>\n<p>While this is not critical, and in some cases is not even possible, it is always good to give people the choice of both options. If a user types your domain name without the www and gets no site, this could disadvantage both the user and you.</p>\n<h4>6.4 Does the site have a favicon?</h4>\n<blockquote>\n<p>A Favicon is a multi-resolution image included on nearly all professionally developed sites. The Favicon allows the webmaster to further promote their site, and to create a more customized appearance within a visitor's browser</p>\n<p><em><a href=\"http://www.favicon.com/\">Favicon.com</a></em></p>\n</blockquote>\n<p>Favicons are definitely not critical. However, if they are not present, they can cause 404 errors in your logs (site statistics). Browsers like IE will request them from the server when a site is bookmarked. If a favicon isn't available, a 404 error may be generated. Therefore, having a favicon could cut down on favicon specific 404 errors. The same is true of a 'robots.txt' file.</p>"},{"url":"/docs/audio/discrete-fft/","relativePath":"docs/audio/discrete-fft.md","relativeDir":"docs/audio","base":"discrete-fft.md","name":"discrete-fft","frontmatter":{"title":"Fast Fourier Transform","weight":1,"excerpt":"Visualizing the Discrete Fourier Transform","seo":{"title":"Fast Fourier Transform","description":"Visualizing the Discrete Fourier Transform","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h2>Visualizing the Discrete Fourier Transform</h2>\n<p>A couple of years ago I suggested a way of thinking about <a href=\"https://blog.revolutionanalytics.com/2014/01/the-fourier-transform-explained-in-one-sentence.html\">how the Discrete Fourier Transform works</a>, based on Stuart Riffle's elegant colour-coding of the equation:</p>\n<p><a href=\"http://revolution-computing.typepad.com/.a/6a010534b1db25970b019b0172129c970c-pi\"><img src=\"https://revolution-computing.typepad.com/.a/6a010534b1db25970b019b0172129c970c-800wi\" alt=\"The fourier transform, explained in one color-coded sentence\" title=\"The fourier transform, explained in one color-coded sentence\"></a></p>\n<p>(Sadly, Stuart's <a href=\"http://www.altdevblogaday.com/2011/05/17/understanding-the-fourier-transform/\">original post</a> describing the equation has been lost to bitrot, and can't even be found in the Wayback Machine.) My contribution was the following analogy:</p>\n<blockquote>\n<p>Imagine an enormous speaker, mounted on a pole, playing a repeating sound. The speaker is so large, you can see the cone move back and forth with the sound. Mark a point on the cone, and now rotate the pole. Trace the point from an above-ground view, if the resulting squiggly curve is off-center, then there is frequency corresponding the pole's rotational frequency represented in the sound.</p>\n</blockquote>\n<p>Dr Bill Connelly from Australia National University has created an interactive simulation of the analogy. Here, the sound from the speaker is a chord of two tones: just enter their frequency and amplitude, and see how the DFT is calculated from the analysis of the rotation:</p>\n<p><a href=\"http://www.billconnelly.net/?p=276\"><img src=\"https://revolution-computing.typepad.com/.a/6a010534b1db25970b01bb08743789970d-800wi\" alt=\"DFT\" title=\"DFT\"></a></p>"},{"url":"/docs/audio/dynamic-time-warping/","relativePath":"docs/audio/dynamic-time-warping.md","relativeDir":"docs/audio","base":"dynamic-time-warping.md","name":"dynamic-time-warping","frontmatter":{"title":"dynamic-time-warping","weight":0,"excerpt":"dynamic-time-warping","seo":{"title":"dynamic-time-warping","description":"dynamic-time-warping","robots":[],"extra":[]},"template":"docs"},"html":"<h1>Dynamic Time Warping Triggered Guitar Effects Project:</h1>\n<h1>DTW Algorithm:</h1>\n<iframe src=\"https://onedrive.live.com/embed?cid=D21009FDD967A241&amp;resid=D21009FDD967A241%21634692&amp;authkey=AHfsGpj1Un3UNuE&amp;em=2&amp;wdAr=1.7777777777777777\" width=\"962px\" height=\"565px\" frameborder=\"0\">This is an embedded <a target=\"_blank\" href=\"https://office.com\">Microsoft Office</a> presentation, powered by <a target=\"_blank\" href=\"https://office.com/webapps\">Office</a>.</iframe>\n<hr>\n<h1>Project:</h1>\n<iframe src=\"https://onedrive.live.com/embed?resid=D21009FDD967A241%21608188&amp;authkey=%21AL1vMFzOuqvFbUY&amp;em=2&amp;wdAr=1.7777777777777777\" width=\"962px\" height=\"565px\" frameborder=\"0\">This is an embedded <a target=\"_blank\" href=\"https://office.com\">Microsoft Office</a> presentation, powered by <a target=\"_blank\" href=\"https://office.com/webapps\">Office</a>.</iframe>"},{"url":"/docs/audio/dtw-python-explained/","relativePath":"docs/audio/dtw-python-explained.md","relativeDir":"docs/audio","base":"dtw-python-explained.md","name":"dtw-python-explained","frontmatter":{"title":"Dynamic Time Warping Algorithm Explained (Python)","weight":0,"excerpt":"Dynamic Time Warping Algorithm Explained (Python)","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h1>Dynamic Time Warping Algorithm Explained (Python)</h1>\n<p>In this world which is getting dominated by Internet of Things (IoT), there is an increasing need to understand signals from devices installed in households, shopping malls, factories and offices. For example, any voice assistant detects, authenticates and interprets commands from humans even if it is slow or fast. Our voice tone tends to be different during different times of the day. In the early morning after we get up from bed, we interact with a slower, heavier and lazier tone compared to other times of the day. These devices treat the signals as time series and compare the peaks, troughs and slopes by taking into account the varying lags and phases in the signals to come up with a similarity score. One of the most common algorithms used to accomplish this is <em>Dynamic Time Warping (DTW)</em>. It is a very robust technique to compare two or more Time Series by ignoring any shifts and speed.</p>\n<p>As part of Walmart Real Estate team, I am working on understanding the energy consumption pattern of different assets like refrigeration units, dehumidifiers, lighting, etc. installed in the retail stores.This will help in improving quality of data collected from IoT sensors, detect and prevent faults in the systems and improve energy consumption forecasting and planning. This analysis involves time series of energy consumption during different times of a day i.e. different days of a week, weeks of a month and months of a year. Time series forecasting often gives bad predictions when there is sudden shift in phase of the energy consumption due to unknown factors. For example if the defrost schedule, items refresh routine for a refrigeration unit, or weather changes suddenly and are not captured to explain the phase shifts of energy consumption, it is important to detect these change points.</p>\n<p>In the example below, the items refresh routine of a store has shifted by 2 hours on Tuesday leading the shift in peak energy consumption of refrigeration units and this information was not available to us for many such stores.</p>\n<p><img src=\"https://miro.medium.com/max/60/1*WEe7LQivzU4YOvDCe0_P_A.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*WEe7LQivzU4YOvDCe0_P_A.png\"></p>\n<p>The peak at 2 am got shifted to 4 am. DTW when run recursively for consecutive days can identify the cases for which phase shift occurred without much change in shape of signals.</p>\n<p><img src=\"https://miro.medium.com/max/52/1*jDuu7XE8XitCTBSythQICw.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*jDuu7XE8XitCTBSythQICw.png\"></p>\n<p>The training data can be restricted to Tuesday onwards to improve the prediction of energy consumption in future in this case as phase shift was detected on Tuesday. The setup improved the predictions substantially ( > 50%) for the stores for which the reason of shift was not known. This was not possible by traditional ways of one to one comparison of signals.</p>\n<p>In this blog, I will explain how DTW algorithm works and throw some light on the calculation of the similarity score between two time series and its implementation in python. Most of the contents in this blog have been sourced from this <a href=\"https://ieeexplore.ieee.org/document/1163055\">paper</a>, also mentioned in the references section below.</p>\n<p>2. Why do we need DTW ?</p>\n<p>Any two time series can be compared using euclidean distance or other similar distances on a one to one basis on time axis. The amplitude of first time series at time T will be compared with amplitude of second time series at time T. This will result into a very poor comparison and similarity score even if the two time series are very similar in shape but out of phase in time.</p>\n<p><img src=\"https://miro.medium.com/max/60/1*HQleh0-1HlGsLkVlcaFRLw.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*HQleh0-1HlGsLkVlcaFRLw.png\"></p>\n<p>DTW compares amplitude of first signal at time T with amplitude of second signal at time T+1 and T-1 or T+2 and T-2. This makes sure it does not give low similarity score for signals with similar shape and different phase.</p>\n<p><img src=\"https://miro.medium.com/max/60/1*6Yzt8SiQ-kTRx8pFqDZXkw.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*6Yzt8SiQ-kTRx8pFqDZXkw.png\"></p>\n<p>3. How it works?</p>\n<p>Let us take two time series signals P and Q</p>\n<p>Series 1 (P) : 1,4,5,10,9,3,2,6,8,4</p>\n<p>Series 2 (Q): 1,7,3,4,1,10,5,4,7,4</p>\n<p><img src=\"https://miro.medium.com/max/60/1*x8-vv9W3cfmdd0mW_1MLTg.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*x8-vv9W3cfmdd0mW_1MLTg.png\"></p>\n<p><em>Step 1 :</em> Empty Cost Matrix Creation</p>\n<p>Create an empty cost matrix M with x and y labels as amplitudes of the two series to be compared.</p>\n<p><img src=\"https://miro.medium.com/max/60/1*MrjHYFHyeeE3aiBEA-E5cw.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*MrjHYFHyeeE3aiBEA-E5cw.png\"></p>\n<p><em>Step 2: Cost Calculation</em></p>\n<p>Fill the cost matrix using the formula mentioned below starting from left and bottom corner.</p>\n<p>M(i, j) = |P(i) --- Q(j)| + min ( M(i-1,j-1), M(i, j-1), M(i-1,j) )</p>\n<p>where</p>\n<p>M is the matrix</p>\n<p>i is the iterator for series P</p>\n<p>j is the iterator for series Q</p>\n<p><img src=\"https://miro.medium.com/max/60/1*hhpagt7BEeFU22X83Q76yQ.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*hhpagt7BEeFU22X83Q76yQ.png\"></p>\n<p>Let us take few examples (11,3 and 8 ) to illustrate the calculation as highlighted in the below table.</p>\n<p><img src=\"https://miro.medium.com/max/60/1*bHaMHM9eBfLc6q166iiI9g.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*bHaMHM9eBfLc6q166iiI9g.png\"></p>\n<p>for 11,</p>\n<p><img src=\"https://miro.medium.com/max/60/1*dzBbhICP6wqwtmW-GGwGmg.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*dzBbhICP6wqwtmW-GGwGmg.png\"></p>\n<p>|10 --4| + min( 5, 12, 5 )</p>\n<p>= 6 + 5</p>\n<p>= 11</p>\n<p>Similarly for 3,</p>\n<p>|4 --1| + min( 0 )</p>\n<p>= 3+ 0</p>\n<p>= 3</p>\n<p>and for 8,</p>\n<p>|1 --3| + min( 6)</p>\n<p>= 2 + 6</p>\n<p>= 8</p>\n<p>The full table will look like this:</p>\n<p><img src=\"https://miro.medium.com/max/60/1*7pphf0WWYElhtohnQPFPNA.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*7pphf0WWYElhtohnQPFPNA.png\"></p>\n<p><em>Step 3:</em> Warping Path Identification</p>\n<p>Identify the warping path starting from top right corner of the matrix and traversing to bottom left. The traversal path is identified based on the neighbour with minimum value.</p>\n<p>In our example it starts with 15 and looks for minimum value i.e. 15 among its neighbours 18, 15 and 18.</p>\n<p><img src=\"https://miro.medium.com/max/60/1*p6hJxIcUjOzgpTINBHLdmQ.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*p6hJxIcUjOzgpTINBHLdmQ.png\"></p>\n<p><img src=\"https://miro.medium.com/max/60/1*RnqvEKdMmWklx5m59YiP3g.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*RnqvEKdMmWklx5m59YiP3g.png\"></p>\n<p>The next number in the warping traversal path is 14. This process continues till we reach the bottom or the left axis of the table.</p>\n<p><img src=\"https://miro.medium.com/max/60/1*mjtlGiB44Zz2pALmMiYNLQ.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*mjtlGiB44Zz2pALmMiYNLQ.png\"></p>\n<p>The final path will look like this:</p>\n<p><img src=\"https://miro.medium.com/max/60/1*WaC_xFSpJi-2GlF7OG37CA.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*WaC_xFSpJi-2GlF7OG37CA.png\"></p>\n<p>Let this warping path series be called as d.</p>\n<p>d = [15,15,14,13,11,9,8,8,4,4,3,0]</p>\n<p><em>Step 4:</em> Final Distance Calculation</p>\n<p>Time normalised distance , D</p>\n<p><img src=\"https://miro.medium.com/max/60/1*6M_cotyKNao7xo03zsMLZQ.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/385/1*6M_cotyKNao7xo03zsMLZQ.png\"></p>\n<p>where k is the length of the series d.</p>\n<p>k = 12 in our case.</p>\n<p>D = ( 15 + 15 + 14 + 13 + 11 + 9 + 8 + 8 + 4 + 4 + 3 + 0 ) /12</p>\n<p>= 104/12</p>\n<p>= 8.63</p>\n<p>Let us take another example with two very similar time series with unit time shift difference.</p>\n<p><img src=\"https://miro.medium.com/max/60/1*CLSlk3qD0Hil2H4XBBeE3Q.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*CLSlk3qD0Hil2H4XBBeE3Q.png\"></p>\n<p>Cost matrix and warping path will look like this.</p>\n<p><img src=\"https://miro.medium.com/max/60/1*Wx823zTAqUkrSbX1ivMAlg.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*Wx823zTAqUkrSbX1ivMAlg.png\"></p>\n<p>DTW distance ,D =</p>\n<p>( 0 + 0 + 0 + 0 + 0 +0 +0 +0 +0 +0 +0 ) /11</p>\n<p>= 0</p>\n<p>Zero DTW distance implies that the time series are very similar and that is indeed the case as observed in the plot.</p>\n<h1>Resummation (Spaced Repitition)</h1>\n<p>Dynamic Time Warping (DTW) is a way to compare two -usually temporal- sequences that do not sync up perfectly. It is a method to calculate the optimal matching between two sequences. DTW is useful in many domains such as speech recognition, data mining, financial markets, etc. It's commonly used in data mining to measure the distance between two time-series.</p>\n<p>In this post, we will go over the mathematics behind DTW. Then, two illustrative examples are provided to better understand the concept. If you are not interested in the math behind it, please jump to examples.</p>\n<h1>Formulation</h1>\n<p>Let's assume we have two sequences like the following:</p>\n<p><em>𝑋=𝑥[1], 𝑥[2], ..., x[i], ..., x[n]</em></p>\n<p><em>Y=y[1], y[2], ..., y[j], ..., y[m]</em></p>\n<p>The sequences 𝑋 and 𝑌 can be arranged to form an 𝑛-by-𝑚 grid, where each point (𝑖, j) is the alignment between 𝑥[𝑖] and 𝑦[𝑗].</p>\n<p>A warping path 𝑊 maps the elements of 𝑋 and 𝑌 to minimize the <em>distance</em> between them. 𝑊 is a sequence of grid points (𝑖, 𝑗). We will see an example of the warping path later.</p>\n<h2>Warping Path and DTW distance</h2>\n<p>The Optimal path to (𝑖<em>𝑘, 𝑗</em>𝑘) can be computed by:</p>\n<p><img src=\"https://miro.medium.com/max/60/1*8hJEJWuxrccwCMuUG_aPbQ.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*8hJEJWuxrccwCMuUG_aPbQ.png\"></p>\n<p>where 𝑑 is the Euclidean distance. Then, the overall path cost can be calculated as</p>\n<p><img src=\"https://miro.medium.com/max/60/1*2OGDOJ-a0zTO_9T1FIGejQ.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/272/1*2OGDOJ-a0zTO_9T1FIGejQ.png\"></p>\n<h1>Restrictions on the Warping function</h1>\n<p>The warping path is found using a dynamic programming approach to align two sequences. Going through all possible paths is \"combinatorically explosive\" [1]. Therefore, for efficiency purposes, it's important to limit the number of possible warping paths, and hence the following constraints are outlined:</p>\n<ul>\n<li>Boundary Condition: This constraint ensures that the warping path begins with the start points of both signals and terminates with their endpoints.</li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/60/1*SHsmQu2TqpaDyIArn2snzg.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/452/1*SHsmQu2TqpaDyIArn2snzg.png\"></p>\n<ul>\n<li>Monotonicity condition: This constraint preserves the time-order of points (not going back in time).</li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/60/1*RNg2VENGaWoyvGrvyeg61A.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/311/1*RNg2VENGaWoyvGrvyeg61A.png\"></p>\n<ul>\n<li>Continuity (step size) condition: This constraint limits the path transitions to adjacent points in time (not jumping in time).</li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/60/1*lU99pFyomdPeaHuR26bDyA.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/418/1*lU99pFyomdPeaHuR26bDyA.png\"></p>\n<p>In addition to the above three constraints, there are other less frequent conditions for an allowable warping path:</p>\n<ul>\n<li>Warping window condition: Allowable points can be restricted to fall within a given warping window of width 𝜔 (a positive integer).</li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/60/1*9apgwkXeU3gOHLudFsIosA.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/168/1*9apgwkXeU3gOHLudFsIosA.png\"></p>\n<ul>\n<li>Slope condition: The warping path can be constrained by restricting the slope, and consequently avoiding extreme movements in one direction.</li>\n</ul>\n<p>An acceptable warping path has combinations of chess king moves that are:</p>\n<ul>\n<li>Horizontal moves: (𝑖, 𝑗) → (𝑖, 𝑗+1)</li>\n<li>Vertical moves: (𝑖, 𝑗) → (𝑖+1, 𝑗)</li>\n<li>Diagonal moves: (𝑖, 𝑗) → (𝑖+1, 𝑗+1)</li>\n</ul>\n<h1>Implementation</h1>\n<p>Let's import all python packages we need.</p>\n<p>import pandas as pd<br>\nimport numpy as np# Plotting Packages<br>\nimport matplotlib.pyplot as plt<br>\nimport seaborn as sbn# Configuring Matplotlib<br>\nimport matplotlib as mpl<br>\nmpl.rcParams['figure.dpi'] = 300<br>\nsavefig<em>options = dict(format=\"png\", dpi=300, bbox</em>inches=\"tight\")# Computation packages<br>\nfrom scipy.spatial.distance import euclidean<br>\nfrom fastdtw import fastdtw</p>\n<p>Let's define a method to compute the accumulated cost matrix <em>D</em> for the warp path. The cost matrix uses the Euclidean distance to calculate the distance between every two points. The methods to compute the Euclidean distance matrix and accumulated cost matrix are defined below:</p>\n<h1>Example 1</h1>\n<p>In this example, we have two sequences <em>x</em> and <em>y</em> with different lengths.</p>\n<h1>Create two sequences\\</h1>\n<p>x = [3, 1, 2, 2, 1]<br>\ny = [2, 0, 0, 3, 3, 1, 0]</p>\n<p>We cannot calculate the Euclidean distance between <em>x</em> and <em>y</em> since they don't have equal lengths.</p>\n<p><img src=\"https://miro.medium.com/max/60/1*ADzLGLGGq13onO72EO_ZpQ.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*ADzLGLGGq13onO72EO_ZpQ.png\"></p>\n<p>Example 1: Euclidean distance between x and y (is it possible? 🤔) (Image by Author)</p>\n<h1>Compute DTW distance and warp path</h1>\n<p>Many Python packages calculate the DTW by just providing the sequences and the type of distance (usually Euclidean). Here, we use a popular Python implementation of DTW that is <a href=\"https://github.com/slaypni/fastdtw\">FastDTW</a> which is an approximate DTW algorithm with lower time and memory complexities [2].</p>\n<p>dtw<em>distance, warp</em>path = fastdtw(x, y, dist=euclidean)</p>\n<p>Note that we are using <a href=\"https://pypi.org/project/scipy/\">SciPy</a>'s distance function <em>Euclidean</em> that we imported earlier. For a better understanding of the warp path, let's first compute the accumulated cost matrix and then visualize the path on a grid. The following code will plot a heatmap of the accumulated cost matrix.</p>\n<p>cost<em>matrix = compute</em>accumulated<em>cost</em>matrix(x, y)</p>\n<p>Example 1: Python code to plot (and save) the heatmap of the accumulated cost matrix</p>\n<p><img src=\"https://miro.medium.com/max/54/1*PIKZAwsV15NBvqkh9N1KMg.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/375/1*PIKZAwsV15NBvqkh9N1KMg.png\"></p>\n<p>Example 1: Accumulated cost matrix and warping path (Image by Author)</p>\n<p>The color bar shows the cost of each point in the grid. As can be seen, the warp path (blue line) is going through the lowest cost on the grid. Let's see the DTW distance and the warping path by printing these two variables.</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>DTW distance: 6.0<br>\nWarp path: [(0, 0), (1, 1), (1, 2), (2, 3), (3, 4), (4, 5), (4, 6)]</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>The warping path starts at point (0, 0) and ends at (4, 6) by 6 moves. Let's also calculate the accumulated cost most using the functions we defined earlier and compare the values with the heatmap.</p>\n<p>cost<em>matrix = compute</em>accumulated<em>cost</em>matrix(x, y)<br>\nprint(np.flipud(cost_matrix)) # Flipping the cost matrix for easier comparison with heatmap values!>>> [[32. 12. 10. 10.  6.]<br>\n[23. 11.  6.  6.  5.]<br>\n[19. 11.  5.  5.  9.]<br>\n[19.  7.  4.  5.  8.]<br>\n[19.  3.  6. 10.  4.]<br>\n[10.  2.  6.  6.  3.]<br>\n[ 1.  2.  2.  2.  3.]]</p>\n<p>The cost matrix is printed above has similar values to the heatmap.</p>\n<p>Now let's plot the two sequences and connect the mapping points. The code to plot the DTW distance between <em>x</em> and <em>y</em> is given below.</p>\n<p>Example 1: Python code to plot (and save) the DTW distance between x and y</p>\n<p><img src=\"https://miro.medium.com/max/60/1*bF9I-49iVW9b2MvDbRBZxA.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*bF9I-49iVW9b2MvDbRBZxA.png\"></p>\n<p>Example 1: DTW distance between x and y (Image by Author)</p>\n<h1>Example 2</h1>\n<p>In this example, we will use two sinusoidal signals and see how they will be matched by calculating the DTW distance between them.</p>\n<p>Example 2: Generate two sinusoidal signals (x1 and x2) with different lengths</p>\n<p>Just like Example 1, let's calculate the DTW distance and the warp path for *x1 *and *x2 *signals using FastDTW package.</p>\n<p>distance, warp_path = fastdtw(x1, x2, dist=euclidean)</p>\n<p>Example 2: Python code to plot (and save) the DTW distance between x1 and x2</p>\n<p><img src=\"https://miro.medium.com/max/60/1*Bzubc5uGFXd_-Sj7W_QFjg.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*Bzubc5uGFXd_-Sj7W_QFjg.png\"></p>\n<p>Example 2: DTW distance between x1 and x2 (Image by Author)</p>\n<p>As can be seen in above figure, the DTW distance between the two signals is particularly powerful when the signals have similar patterns. The extrema (maximum and minimum points) between the two signals are correctly mapped. Moreover, unlike Euclidean distance, we may see many-to-one mapping when DTW distance is used, particularly if the two signals have different lengths.</p>\n<p>You may spot an issue with dynamic time warping from the figure above. Can you guess what it is?</p>\n<p>The issue is around the head and tail of time-series that do not properly match. This is because the DTW algorithm cannot afford the warping invariance for at the endpoints. In short, the effect of this is that a small difference at the sequence endpoints will tend to contribute disproportionately to the estimated similarity[3].</p>\n<h1>Conclusion</h1>\n<p>DTW is an algorithm to find an optimal alignment between two sequences and a useful distance metric to have in our toolbox. This technique is useful when we are working with two non-linear sequences, particularly if one sequence is a non-linear stretched/shrunk version of the other. The warping path is a combination of \"chess king\" moves that starts from the head of two sequences and ends with their tails.</p>\n<p>You can find the Jupyter notebook for this blog post <a href=\"https://github.com/e-alizadeh/medium/blob/master/notebooks/intro_to_dtw.ipynb\">here</a>. Thanks for reading!</p>\n<h1>References</h1>\n<p>[1] Donald J. Berndt and James Clifford, <a href=\"https://www.aaai.org/Papers/Workshops/1994/WS-94-03/WS94-03-031.pdf\">Using Dynamic Time Warping to Find Patterns in Time Series</a>, 3rd International Conference on Knowledge Discovery and Data Mining</p>\n<p>[2] Salvador, S. and P. Chan, <a href=\"https://cs.fit.edu/~pkc/papers/tdm04.pdf\">FastDTW: Toward accurate dynamic time warping in linear time and space</a>(2007), Intelligent Data Analysis</p>\n<p>[3] Diego Furtado Silva, <em>et al.</em>, <a href=\"https://core.ac.uk/display/147806669\">On the effect of endpoints on dynamic time warping</a> (2016), SIGKDD Workshop on Mining and Learning from Time Series</p>\n<h1>Useful Links</h1>\n<p>[1] <a href=\"https://nipunbatra.github.io/blog/ml/2014/05/01/dtw.html\">https://nipunbatra.github.io/blog/ml/2014/05/01/dtw.html</a></p>\n<p>[2] <a href=\"https://databricks.com/blog/2019/04/30/understanding-dynamic-time-warping.html\">https://databricks.com/blog/2019/04/30/understanding-dynamic-time-warping.html</a></p>\n<p>Sounds like time traveling or some kind of future technic, however, it is not. Dynamic Time Warping is used to compare the similarity or calculate the distance between two arrays or time series with different length.</p>\n<p>Suppose we want to calculate the distance of two equal-length arrays:</p>\n<p>a = [1, 2, 3]<br>\nb = [3, 2, 2]</p>\n<p>How to do that? One obvious way is to match up <code>a</code> and <code>b</code> in 1-to-1 fashion and sum up the total distance of each component. This sounds easy, but what if <code>a</code> and <code>b</code> have different lengths?</p>\n<p>a = [1, 2, 3]<br>\nb = [2, 2, 2, 3, 4]</p>\n<p>How to match them up? Which should map to which? To solve the problem, there comes dynamic time warping. Just as its name indicates, to warp the series so that they can match up.</p>\n<h1>Use Cases</h1>\n<p>Before digging into the algorithm, you might have the question that is it useful? Do we really need to compare the distance between two unequal-length time series?</p>\n<p>Yes, in a lot of scenarios DTW is playing a key role.</p>\n<h2>Sound Pattern Recognition</h2>\n<p>One use case is to detect the sound pattern of the same kind. Suppose we want to recognise the voice of a person by analysing his sound track, and we are able to collect his sound track of saying <code>Hello</code> in one scenario. However, people speak in the same word in different ways, what if he speaks hello in a much slower pace like <code>Heeeeeeelloooooo</code> , we will need an algorithm to match up the sound track of different lengths and be able to identify they come from the same person.</p>\n<p><img src=\"https://miro.medium.com/max/60/1*gi1TtOqFCsb2M_U7iAUAag.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*gi1TtOqFCsb2M_U7iAUAag.png\"></p>\n<h2>Stock Market</h2>\n<p>In a stock market, people always hope to be able to predict the future, however using general machine learning algorithms can be exhaustive, as most prediction task requires test and training set to have the same dimension of features. However, if you ever speculate in the stock market, you will know that even the same pattern of a stock can have very different length reflection on klines and indicators.</p>\n<p><img src=\"https://miro.medium.com/max/60/1*4QUO4Tqm_z-8ydMBGgqmPg.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*4QUO4Tqm_z-8ydMBGgqmPg.png\"></p>\n<h1>Definition &#x26; Idea</h1>\n<p>A concise explanation of DTW from wiki,</p>\n<blockquote>\n<p>In time series analysis, dynamic time warping (DTW) is one of the algorithms for measuring similarity between two temporal sequences, which may vary in speed. DTW has been applied to temporal sequences of video, audio, and graphics data --- indeed, any data that can be turned into a linear sequence can be analysed with DTW.</p>\n</blockquote>\n<p><em>The idea to compare arrays with different length is to build one-to-many and many-to-one matches so that the total distance can be minimised between the two.</em></p>\n<p>Suppose we have two different arrays red and blue with different length:</p>\n<p><img src=\"https://miro.medium.com/max/42/1*uFicSZjqkNBfsyrsJw7J9g.jpeg?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/612/1*uFicSZjqkNBfsyrsJw7J9g.jpeg\"></p>\n<p>Clearly these two series follow the same pattern, but the blue curve is longer than the red. If we apply the one-to-one match, shown in the top, the mapping is not perfectly synced up and the tail of the blue curve is being left out.</p>\n<p>DTW overcomes the issue by developing a one-to-many match so that the troughs and peaks with the same pattern are perfectly matched, and there is no left out for both curves(shown in the bottom top).</p>\n<h1>Rules</h1>\n<p>In general, DTW is a method that calculates an optimal match between two given sequences (e.g. time series) with certain restriction and rules(comes from wiki):</p>\n<ul>\n<li>Every index from the first sequence must be matched with one or more indices from the other sequence and vice versa</li>\n<li>The first index from the first sequence must be matched with the first index from the other sequence (but it does not have to be its only match)</li>\n<li>The last index from the first sequence must be matched with the last index from the other sequence (but it does not have to be its only match)</li>\n<li>The mapping of the indices from the first sequence to indices from the other sequence must be monotonically increasing, and vice versa, i.e. if <code>j > i</code> are indices from the first sequence, then there must not be two indices <code>l > k</code> in the other sequence, such that index <code>i</code> is matched with index <code>l</code> and index <code>j</code> is matched with index <code>k</code> , and vice versa</li>\n</ul>\n<p>The optimal match is denoted by the match that satisfies all the restrictions and the rules and that has the minimal cost, where the cost is computed as the sum of absolute differences, for each matched pair of indices, between their values.</p>\n<p>To summarise is that <em>head and tail must be positionally matched, no cross-match and no left out.</em></p>\n<h1>Implementation</h1>\n<p>The implementation of the algorithm looks extremely concise:</p>\n<p><img src=\"https://miro.medium.com/max/60/1*fGr2Mj7fEB7tEyqAzcp2LA.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*fGr2Mj7fEB7tEyqAzcp2LA.png\"></p>\n<p>where <code>DTW[i, j]</code> is the distance between <code>s[1:i]</code> and <code>t[1:j]</code> with the best alignment.</p>\n<p>The key lies in:</p>\n<p>DTW[i, j] := cost + minimum(DTW[i-1, j ],<br>\nDTW[i , j-1],<br>\nDTW[i-1, j-1])</p>\n<p>Which is saying that the cost of between two arrays with length <code>i and j</code> equals <em>the distance between the tails + the minimum of cost in arrays with length *`</em>i-1, j<em><code>_ , _</code></em>i, j-1<em><code>_ , and _</code></em>i-1, j-1*`_ ._</p>\n<p>Put it in python would be:</p>\n<p>Example:</p>\n<p><img src=\"https://miro.medium.com/max/60/1*eogOkXkOUzi6Cq7U9BgiLg.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*eogOkXkOUzi6Cq7U9BgiLg.png\"></p>\n<p>The distance between <code>a and b</code> would be the last element of the matrix, which is 2.</p>\n<h2>Add Window Constraint</h2>\n<p>One issue of the above algorithm is that we allow one element in an array to match an unlimited number of elements in the other array(as long as the tail can match in the end), this would cause the mapping to bent over a lot, for example, the following array:</p>\n<p>a = [1, 2, 3]<br>\nb = [1, 2, 2, 2, 2, 2, 2, 2, ..., 5]</p>\n<p>To minimise the distance, the element 2 in array <code>a</code> would match all the 2 in array <code>b</code> , which causes an array <code>b</code> to bent severely. To avoid this, we can add a window constraint to limit the number of elements one can match:</p>\n<p><img src=\"https://miro.medium.com/max/60/1*0_xypte7FHDWJuuBexEvHg.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*0_xypte7FHDWJuuBexEvHg.png\"></p>\n<p>The key difference is that now each element is confined to match elements in range <code>i --- w</code> and <code>i + w</code> . The <code>w := max(w, abs(n-m))</code> guarantees all indices can be matched up.</p>\n<p>The implementation and example would be:</p>\n<p><img src=\"https://miro.medium.com/max/60/1*2K6C-3QrRmbbhpe-jt9UQA.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*2K6C-3QrRmbbhpe-jt9UQA.png\"></p>\n<h1>Apply a Package</h1>\n<p>There is also contributed packages available on Pypi to use directly. Here I demonstrate an example using <a href=\"https://pypi.org/project/fastdtw/\">fastdtw</a>:</p>\n<p>It gives you the distance of two lists and index mapping(the example can extend to a multi-dimension array).</p>"},{"url":"/docs/articles/webdev-tools/","relativePath":"docs/articles/webdev-tools.md","relativeDir":"docs/articles","base":"webdev-tools.md","name":"webdev-tools","frontmatter":{"title":"Web Developer Tools","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<ol>\n<li>What Are Web Development Tools?</li>\n</ol>\n<h5><strong>Client-side</strong>Otherwise known as front-end web development, this refers to anything a user can see or engage with—an app or website are good examples. This is about providing a top-notch user experience and smooth interface (usually with a combination of HTML, CSS and various JavaScript libraries.<strong>Server-side</strong>Otherwise known as back-end web development, this refers to the stuff behind the scenes of apps and websites that users can't see. It's the frameworks, servers and databases that keep things running.Image Source: Paperform\n\n</h5>\n<p>When people speak about web development tools (or devtools in the biz), they're usually referring to the apps and software that allows web developers to test and debug the code and interface of a website or web application.</p>\n<p>Technically, the term doesn't refer to tools that *actually help you <em>build a webpage or app</em>. *But that distinction isn't helpful. Web developers require a range of tools that go beyond debugging and testing—whether it be a remote collaboration tool like Slack, a design tool like Figma, or even just an online forum like <a href=\"https://stackoverflow.com/\">StackOverflow</a>.</p>\n<p>For that reason, we've gone beyond the traditional definition of devtools with the aim of giving a  realistic view of the kind of apps and software devs use in their day to day workflows. We think you'll find some familiar favourites, as well as some useful tools to add to your tech stack.</p>\n<h2>What To Consider When Choosing Web Development Tools</h2>\n<p>Whether you're <a href=\"https://www.templatemonster.com/bootstrap-website-templates/\">bootstrapping a website</a> from scratch or developing a simple web application, there are few things to keep in mind. Foremost is something that applies to any tool: pick the <em>right option for your specific needs.</em></p>\n<blockquote>\n<p><em>What works for one project might not work for the next. As a web developer, you constantly need to investigate new tools and ways of doing things. Of course, we all have our favourites, but as a general rule, your tech stack should never be stagnant.</em></p>\n</blockquote>\n<p>There's one other general principle to keep in mind. Tech should simplify your workflow—not complicate it. We know how easy it is to get bogged down in the nerdy details, but when in doubt, ask yourself: <em>does this tool actually make my job easier?</em></p>\n<p>Here are a few things to think about beyond these broader considerations:</p>\n<p><strong>Functionality:</strong> Simply, what does each tool help achieve? Does it have a single purpose and can it be replaced by a more feature-rich option?</p>\n<p><strong>Ease of use:</strong> Ensure that the tools that you have control over balance comprehensive features with actually being useable.</p>\n<p><strong>Scalability:</strong> At least some of the tools that you use should be scalable to both small and large projects.</p>\n<p><strong>Portability:</strong> This may not be a gamechanger in the age of remote work, but often web devs travel between clients, the office, home and the local cafe.</p>\n<p><strong>Customisation:</strong> Whether it's a theme on Google Chrome or an add-on for your development environment, we all like to make tools feel unique to us.</p>\n<p><strong>Security:</strong> The security of users, your employer and the sites or apps you are working on always has to be looked after.</p>\n<p><strong>Cost:</strong> If you work for a fancy startup with cash to splash this may not be an issue, but most folks will have to shell out for their own web development tools. Make sure you are getting bang for your buck.</p>\n<h3>A Note On Web Dev Tech Stacks</h3>\n<p>Web development is an all-encompassing term that refers to a bunch of roles. You can split web development into two parts: client-side and server-side.</p>\n<p>Most of the time, web developers specialise in one of the two. However, there are a few show-offs that can do both—they’re referred to as full-stack developers.</p>\n<blockquote>\n<p>The term stack is used because the tools that websites and apps use  'stack' on top of each other to build the final product.</p>\n</blockquote>\n<p>Check out this example of Paperform's tech stack for example.</p>\n<h2>The 50 Best Web Development Tools In 2021</h2>\n<p>Alright, as we Antipodeans say, no more beating around the bush. Let's get into the list of the best web development tools we recommend using in 2021.</p>\n<p><strong>📚 Read our guide on **[</strong>how to get web design clients fast<strong>](<a href=\"https://paperform.co/blog/how-to-get-web-design-clients/\">https://paperform.co/blog/how-to-get-web-design-clients/</a>)</strong>.**</p>\n<h2>Code and Text Editors</h2>\n<p>Web developers wouldn’t be able to do their jobs fast and efficiently without text editors. A dev's text editor of choice is kind of a holy thing—once devs find a text editor they love, they tend to stick with it for the long haul.</p>\n<p>Which is why it's such an important decision. It's like a carpenter choosing his hammer, or a Jedi Knight choosing his lightsaber. The good news is you can't go wrong with any listed below:</p>\n<h3>1. Atom</h3>\n<p>The creators of <a href=\"https://atom.io/\">Atom</a> describe it as a \"hackable text editor for the 21st Century\". This is in reference to the insane levels of customisation it offers that allow you to make it uniquely yours.</p>\n<p>Choose from thousands of open-source packages that add new functionality, tweak the look and feel with CSS, or even add your own major features with HTML and JavaScript.</p>\n<p>Using Atom really is a smooth experience. It works with Mac, Windows or Linux and has all the features you would expect. Plus, there is a nice suite of real-time collaboration tools to help you work with a team.</p>\n<h3>2. Sublime Text</h3>\n<p><a href=\"https://www.sublimetext.com/\">Sublime Text</a> is going to be at the top of any list of the best text editors. It doesn't have all the advanced features other solutions do, but what it lacks in power, it more than makes up for with its beautiful appearance and overall ease of use.</p>\n<blockquote>\n<p>With handy keyboard shortcuts, a Command Palette that you won't be able to live without once you use it and a UX to die for, it’s an absolute pleasure to use.</p>\n</blockquote>\n<p>The context-aware auto-completion feature is particularly useful. It suggests code based on your text, meaning you can cut down on repetitive typing. Add to that an updated Python API, syntax definitions and hyper-fast load times, Sublime Text is hard to go past.</p>\n<h3>3. Notepad++</h3>\n<p><a href=\"https://notepad-plus-plus.org/\">Notepad++</a> is for those of you who don’t care about themes and minimalist design and all that fancy stuff. From an aesthetic viewpoint, it’s not going to win any awards, but it’s still a powerful open-source text editor that has most of your needs covered.</p>\n<p>Created by a talented software engineer web dev named Don Ho, Notepad++ is a user friendly text editing solution for Windows users. It supports 27 programming languages, synchronised edits and views, and uses Win32 API to produce a tiny program size and faster execution speed.</p>\n<p><strong>💡Pro Tip:</strong> This is also a good option for energy conscious users. By optimising as much as possible, Ho aims to use less CPU power and reduce power consumption, leading to a greener environment.</p>\n<h3>4. Vim</h3>\n<p>If you’re after a highly configurable text editor to build your perfect programming environment, then <a href=\"https://www.vim.org/\">Vim</a> is the way to go. While it does work out of the box, for the most part, it’s a tool that you have to learn to conquer.</p>\n<p>The cool thing about Vim is that it can be used for any type of text editing—from writing an email to posting blogs in Markup, or of course, editing HTML code. It comes with 200+ syntax files, a comprehensive tag system and integrations with Perl, TCL and Python, and can even act as an OLE automation server in Windows.</p>\n<h3>5. Visual Code Studio</h3>\n<p><a href=\"https://code.visualstudio.com/\">Visual Studio Code</a> (or VS Code) is an open-source code editing program built by Microsoft. It runs everywhere and allows you to do anything from debugging code to inputting Git commands or creating Sass code.</p>\n<p>There is a bevy of appearance options, including the ability to customise fonts, icons, layout and colour scheme. But the remote development features are what set it apart—you can use a container or a remote machine as a full-featured dev environment.</p>\n<p>VS Code is the text editor of choice for Dean McPherson, Paperform’s co-founder and resident code-geek. He uses the remote plugins for version control and to keep our global dev team working in the same virtual environment.</p>\n<h2>Web Application Frameworks</h2>\n<p>Web application frameworks (or just web frameworks) are software libraries that are designed to help you build web services, resources and APIs.</p>\n<p>Choosing the right framework for your project is super important. Why? Because it’s difficult, time-consuming and expensive to switch to a different solution. It’s much easier to stick with one.</p>\n<p>Below we’ve curated a list of the <a href=\"https://www.appypie.com/top-web-development-frameworks\">best web frameworks</a> in 2021—both front-end and back-end to cover all the bases. This is a big decision and this is only meant as an overview of options, so be sure to do further research before deciding on one.</p>\n<h3>6. Django</h3>\n<p><a href=\"https://www.djangoproject.com/\">Django</a> is a high-level <a href=\"https://www.educba.com/python-frameworks/\">Python framework</a> built by expert developers and used by giant web apps like Reddit, Instagram and Uber. It’s secure and scalable, which means it’s suitable for a small side hustle or enterprise-scale projects.</p>\n<p>In a nutshell, Django makes it easier to build great web apps. Fast. The focus here is on enabling devs to create sites and apps with less code (to get nerdy, Django’s server-side processing speed is super fast and the file structure is feather-light).</p>\n<blockquote>\n<p>Django’s goal is to support devs to go from concept to completion as quickly as possible. They achieve this by encouraging clean design and swift development.</p>\n</blockquote>\n<p>One of the greatest strengths of Django is its community. They contribute a tonne of useful packages and utilities—a search on PyPI brings up 4,000+ packages free and ready to use.</p>\n<h3>7. Ruby On Rails</h3>\n<p><a href=\"https://rubyonrails.org/\">Ruby on Rails</a> is a favourite in the dev community. While it requires a certain quality of code, as a general rule it’s easy to read, write, monkey patch, test, maintain and deploy, making it any web developer’s dream.</p>\n<p>Rails, as it’s called in the biz, is used in a bunch of server-side web apps, including big names like Square, Hulu, Twitch and Shopify. It’s a popular framework because straight out of the box you get structures for web services, pages and a database, requiring far less groundwork than other options.</p>\n<p>So why choose Rails? Well, it’s an excellent choice if you’re after a robust tool that’s simple to use. It has a clean design language, an intuitive workflow, and seamlessly integrates with third-party applications.</p>\n<p><strong>💡Pro Tip:</strong> If you are starting to build your product, Ruby on Rails is an ideal solution to get your MVP up and running. It allows solo web developers to swiftly get projects off the ground and make changes on the fly.</p>\n<h3>8. Angular</h3>\n<p><a href=\"https://angular.io/\">Angular</a> (or Angularjs) is a popular Javascript framework created and maintained by Google. It’s a cross-platform solution with a cohesive ecosystem of third-party components, meaning you can add a bunch of your own unique functionality improvements.</p>\n<p>You’ll find all the relevant features you’d expect for each stage of the development process, from code generation and splitting to complex animation timelines.</p>\n<p>The Command-line Interface (CLI) is probably the most notable feature though. it allows you to initialise, develop, scaffold and maintain Angular apps right from the command shell.</p>\n<p><strong>💡Pro Tip:</strong> A JavaScript library is a collection or “library” of prewritten code snippets that can be used to repeat common JavaScript functions. It's also important to note, that which JavaScript framework you use often depends on your client's/business' stack.</p>\n<h3>9. React</h3>\n<p>React (<a href=\"https://reactjs.org/\">React.js</a>) is another great Javascript library built by another ultra-powerful tech company: in this case, Facebook. Made specifically for building user interfaces, it makes it painless to create interactive UIs in a visual way.</p>\n<p>A component-based system means that individual components manage their own state, and can then be composed to build complex UIs. React can also render on a server using Node, and with <a href=\"https://facebook.github.io/react-native/\">React Native</a> you can power mobile apps as well.</p>\n<p>React is one of the most popular of the many JavaScript frameworks available. Used by WordPress for their backend and Block Editor, it’s a platform to consider for any web developer working with user interfaces.</p>\n<h3>10. Vue</h3>\n<p>Yet another JavaScript library, like React, <a href=\"https://vuejs.org/\">Vue</a> (or Vue.js) is built for working with user interfaces. Labelling itself as a more “approachable, versatile and performant” alternative, it helps you create a more maintainable and testable codebase.</p>\n<p>As with other leading frameworks, Vue allows you to take a webpage and split it up into reusable components. Each component then has its own HTML, CSS and JS needed to render that piece of the page—making it faster to make granular changes.</p>\n<p>Vue offers a more “batteries-included” approach to web application development. It’s simple to use and comes with <a href=\"https://vuejs.org/v2/guide/\">comprehensive documentation</a> and templates to guide you along.</p>\n<h3>11. Meteor</h3>\n<p><a href=\"https://www.meteor.com/\">Meteor.js</a> is a free and open-source full-stack isomorphic framework (meaning you can run it both on the client and server side). It might not be as popular as React or Vue, but it’s still considered one of the best solutions to enable devs to swiftly build and deploy web, mobile or desktop apps.</p>\n<p>One of Meteor’s biggest selling points is that it seamlessly integrates with the rest of your tech stack—allowing you to focus on building rather than configuring tools to work together. Meteor APM also provides real-time metrics so you can monitor how your app is running.</p>\n<p>Boasting almost 14,000 packages, over half a million unique installs and used by companies like Ikea, Qualcomm and Honeywell, Meteor is a strong option.</p>\n<h3>12. ASP.NET</h3>\n<p>Alright, by now this is a familiar story. Prepare for the buzzwords and giant tech companies. <a href=\"https://dotnet.microsoft.com/apps/aspnet\">ASP.NET</a> is a free, cross-platform framework for <a href=\"https://www.techcronus.com/asp-net-application-development/\">building web apps</a> and services developed by Microsoft.</p>\n<p>What sets it apart from other frameworks is that it uses C# instead of JavaScript. C# supports reference-type (class) and value-type (struct) user-defined types, which can unlock significant performance benefits over JavaScript if you’re a more advanced web developer.</p>\n<p>If you’re looking to learn NET then there are plenty of resources. Microsoft has plenty of <a href=\"https://dotnet.microsoft.com/learn/aspnet\">learning materials</a> and there’s an active <a href=\"https://github.com/dotnet?WT.mc_id=dotnet-35129-website\">community on GitHub</a> with over 100,000 people and 3,700 companies contributing.</p>\n<h2>Front-End Frameworks</h2>\n<p>Front-end frameworks (or “CSS frameworks”) are packages containing pre-written, standardised code for easy application. It’s kind of like a coding dictionary to help you quickly complete actions without having to come up with code yourself.</p>\n<p>Keep in mind that there is some crossover with tools we’ve previously covered. For example, according to the <a href=\"https://2020.stateofjs.com/en-US/technologies/javascript-flavors/\">State of JavaScript 2020</a>*, in the US, React, Angular and Vue *are the three most popular front-end frameworks.</p>\n<p>Here are some other viable options:</p>\n<h3>13. Bootstrap</h3>\n<p><a href=\"http://getbootstrap.com/\">Bootstrap</a> is a leading open-source CSS framework created by a bunch of the developers behind Twitter (ever heard of it?). Released back in 2011, it’s a full-scale tool designed to help you quickly create and customise responsive mobile-first sites.</p>\n<p>It features Sass variables and mixins (so you can assign variables to a name and refer to it rather than the value itself), extensive prebuilt components and comprehensive JavaScript plugins. In a first for front-end frameworks, it also comes with its own SVG icon library designed to work with your Bootstrap sites.</p>\n<h3>14. Semantic UI</h3>\n<p><a href=\"https://semantic-ui.com/\">Semantic UI</a> is a component framework for theming websites using what they call “human-friendly HTML” (sorry dogs). What they mean by this is that the tool uses words and classes as exchangeable concepts, giving you the same benefits as BEM without the headache.</p>\n<p>But the real strength here is the breadth of Semantic UI’s components. Whether it’s elements, collections, views, modules of behaviours, the whole gamut of interface design is covered.</p>\n<h3>15. Foundation</h3>\n<p>The folks at <a href=\"https://foundation.zurb.com/\">Foundation</a> refer to their tool as \"the most advanced responsive front-end framework in the world\", which is certainly setting the bar high. Though it really is suitable for any device, medium and level of accessibility.</p>\n<p>Foundation is packed with features to help build content-focused websites, even providing users with HTML, CSS &#x26; Javascript templates to speed up the process. You can also use Foundation For Emails to craft HTML emails that look a million bucks on any platform.</p>\n<h3><strong>16. Materialize</strong></h3>\n<p><a href=\"https://materializecss.com/\">Materialize</a> is a modern framework based on Google's Material Design language, combining the classic <a href=\"https://paperform.co/blog/principles-of-design/\">principles of design</a> with innovation and tech. As a language its goal is to help unify user experience across any platform, which is fitting, as this is a focus at Materialize as well.</p>\n<p>From the animations to UI elements and everything between, there's a real focus on <a href=\"https://paperform.co/blog/ux-design-portfolio/\">user experience</a> above all else. That's not to say the technical tools aren't there. They are. It's fast, robust and has a low learning curve.</p>\n<h3>17. ChromeDevTools</h3>\n<p><a href=\"https://developer.chrome.com/docs/devtools/\">Chrome DevTools</a> is the name for the web development tools built into the Google Chrome web browser. No need to download any programs or check if it’s got MacOS compatibility—just right click in the browser, choose “Inspect” and get stuck in.</p>\n<p>It doesn’t have as many features as the other options on this list, but it does let you edit pages and diagnose problems with your sites. View and manipulate the DOM, change a page’s style sheets (CSS) or use it as a JavaScript debugger.</p>\n<h3>18. Svelte</h3>\n<p>We love <a href=\"https://svelte.dev/\">Svelte</a> for two reasons. One, it just sounds awesome and two, it’s all about empowering folks to build their projects with *way less code, *which is something we’re passionate about here at Paperform.</p>\n<p>Technically, Svelte isn’t a framework or a library. It’s a “compiler”, and it’s gained quite a reputation in the web dev community for being one of the best frontend frameworks on the market. It’s lightweight, SEO-optimised and unlike tools like React or Vue, doesn’t require heavy browser processing.</p>\n<p>Svelte’s “killer app” is that is has no virtual Dom. This means there’s considerably less re-renders of the UI, leading to a lightning fast experience. Some devs will be put off by this, but it makes it an ideal option for beginners or smaller projects.</p>\n<h3>19. Ember</h3>\n<p><a href=\"https://emberjs.com/\">Ember.js</a> is an open-source JavaScript web framework released back in 2011. Since then it’s been adopted by a large chunk of the web dev community and it’s easy to see why—using it's simple and, whether you’re creating feature-rich apps or client-side websites, the user experience is seamless.</p>\n<p>Working with Ember is a “batteries included” experience. Out of the box you have all the tools to start building UIs that work on any device. The built-in development environment comes with fast rebuilds, auto-reload and a test runner. Ember Data also lets you set up asynchronous relationships and keep models up to date across your app, which is perfect for remote work.</p>\n<p>Not sold? Some of the biggest and best development teams in the world use Ember to iterate on their products, including Netflix, Intercom and Apple. Convinced?</p>\n<h2>Package Managers</h2>\n<p>If you’ve ever installed a bunch of programs on your computer you’ll know it’s a tedious process. You’ve got to visit each individual website, download the installer, then set each one up individually.</p>\n<p>This is fine if all you’re doing is downloading Spotify. But back- and front-end developers work with hundreds of programs. Which is why package managers exist. These tools automate the process of installing, upgrading, configuring and removing programs from a computer’s operating system.</p>\n<h3>20. Yarn</h3>\n<p><a href=\"https://yarnpkg.com/lang/en/\">Yarn</a> is a relatively new package manager built by Facebook. It's known for its speed and stability—about the only two things you need from a package manager. But what sets it apart from similar tools is that it doubles as a project management tool.</p>\n<p>Installation is a breeze, and if you get stuck, the documentation is comprehensive. The Workspace feature allows you to split your project into sub-components, which is handy for keeping multiple versions of your project live. There is also a (small) plugin library to extend functionality.</p>\n<h3>21. Node Package Manager (npm)</h3>\n<p><a href=\"https://www.npmjs.com/\">Node Package Manager</a> is a package manager for NodeJS, created in 2009 as an open-source project to give JavaScript devs an easy way to share code modules. The npm Registry consists of more than a million packages—making it the largest software registry in the world.</p>\n<p>With a quick search you’ll find everything from front-end web apps to robots and routers. There is hardly a working web developer out there that wouldn’t have used npm at some point. And, now that it’s moved to GitHub, npm’s already vibrant community is only going to grow.</p>\n<h3>22. DPKG - Package Manager for Debian</h3>\n<p>Debian is a stable and secure Linux-based operating system extremely popular with web devs. <a href=\"https://man7.org/linux/man-pages/man1/dpkg.1.html\">Dpkg</a> is a tool built specifically to manage Debian packages. While dpkg does have a more user-friendly front-end alternative called <a href=\"https://wiki.debian.org/Aptitude\">aptitude</a>, dpkg itself runs entirely via the command line.</p>\n<p>In terms of functionality, it’s definitely a more low-level solution. But if you’re trying to handle the installation and removal of Debian software, it’s the place to start. For a more advanced tool try <a href=\"https://wiki.archlinux.org/title/pacman\">Pacman</a> or <a href=\"https://wiki.debian.org/Apt\">APT</a> (literally, Advanced Package Tool). Both fetch packages from remote locations and deal with more complex functions.</p>\n<h2>Git Clients</h2>\n<p>In Britain, 'Git' is slang for someone you think is a bit stupid. But in the world of web development, Git is the name for the software used to track changes in file sets. Most of the time it’s used to help devs collaborate during software development.</p>\n<p>A Git *client *is the software you use to work with Git repositories, which can be either remote or locally stored. These allow you to make changes to your Git project (e.g. pushing changes and staging). There are a bunch of different Git clients available across various operating systems.</p>\n<p><strong>💡Pro Tip:</strong> Git is a command line interface and Git clients aren’t strictly necessary. It’s kind of like using a translator versus learning a language natively. GUIs don’t have all the same functionality that a command line client offers, which is why many web devs go that route instead.</p>\n<h3><strong>23. Github Desktop</strong></h3>\n<p>Built by GitHub, the authority when it comes to all things Git, <a href=\"https://desktop.github.com/\">Github Desktop</a> is a tool that allows you to interact with GitHub from your desktop. It’s all about giving you a beautiful interface to cut down on distraction and let you focus on what matters.</p>\n<p>Whether you’re a seasoned veteran or a Git newbie, GitHub Desktop has you covered. Quickly add commits with collaborators, see all open pull requests from your repositories, and easily see before and after shots of your work in progress with expanded image diff support.</p>\n<p>On top of that there’s a heap of automated testing tools to play with. Open-source and available on MacOS and Windows, GitHub is pretty much the default option.</p>\n<h3>24. GitKraken</h3>\n<p><a href=\"https://www.gitkraken.com/\">GitKraken</a> bills itself as the “easiest, safest and most powerful” way to use Git. They understand that Git can be difficult to learn, which is why they offer exhaustive docs, as well as integrations with GitHub, GitLab and Azure DevOps to make adding remotes easy.</p>\n<p>The UI is equal parts gorgeous and intuitive. One particularly helpful feature is the ability to map complicated commands to a single button or click of the keyboard. If you’re working with a team, the visual commit graph also assists you to quickly view who made code changes and when.</p>\n<p>Other notable features include syntax highlighting, a nifty built-in code editor, interactive rebase and light and dark mode for those late-night coding sessions.</p>\n<h3>25. SourceTree</h3>\n<p><a href=\"https://www.sourcetreeapp.com/\">Sourcetree</a> is a Graphical User Interface (GUI for the cool kids) used to manage Git repository hosts. Built by Atlassian (go Aussies!) it allows you to visualise and manage your repos so you can focus purely on coding.</p>\n<p>Whether you’re just starting out as a web developer or  are an old pro, Sourcetree has all the tools you need. Leave the command line behind, or delve deeper to review change-sets, stash or cherry-pick between branches—built-in smart branching keeps development clean and efficient.</p>\n<p>Sourcetree is available to download for free on both MacOS and Windows. They’ve got a huge range of <a href=\"https://support.atlassian.com/bitbucket-cloud/docs/tutorial-learn-bitbucket-with-sourcetree/\">tutorials</a> that’ll have you up and running in no time. After some initial hiccups, it’s now more powerful and reliable than almost any other Git client.</p>\n<h2>API and Testing Cloud Tools</h2>\n<p>Web APIs are a crucial part of web development these days. APIs allow devs to access specific features or data within an application, service or other system.</p>\n<p>For example, the tech world recently went nuts when Notion announced the beta for their API. By accessing the API devs can now connect other apps with Notion pages and databases.</p>\n<p><strong>📚 Learn more about **[</strong>Paperform’s Notion integration<strong>](<a href=\"https://paperform.co/integrations/notion/\">https://paperform.co/integrations/notion/</a>)</strong>.**</p>\n<p>When testing and building with web APIs it’s crucial to have reliable tools. Here are some of the best:</p>\n<h3>26. Postman</h3>\n<p><a href=\"https://www.postman.com/\">Postman</a> is an API platform for building using APIs (duh) with features centred around simplifying the process and streamlining team collaboration. <a href=\"https://www.postman.com/api-platform/\">They promise</a> 5x faster development, 4x faster bug fixes and a whopping 10x more effective team collaboration.</p>\n<p>Do they back it up? The *15 million *developers that use Postman would say so. There are integrated tools for every stage of the API lifecycle, from design, mocking, testing and deploying all the way through to maintenance and deprecation.</p>\n<h3>27. REST Assured</h3>\n<p><a href=\"https://rest-assured.io/\">REST Assured</a> is the tool of choice for most web devs working with Java. Made so you don’t have to be a HTTP expert to use it, REST Assured enables you to test and validate REST services with the simplicity of more dynamic languages like Ruby.</p>\n<p>It saves you time and effort through automating part of the boilerplate code required to set up HTTP connections, send and receive requests and parse responses. There are also Given/When/Then test notations to help make tests easily comprehensible.</p>\n<h3>28. HoppScotch</h3>\n<p><a href=\"https://hoppscotch.io/\">HoppScotch</a> is a lightweight open source API development tool that runs smoothly and looks beautiful. Over the last few months it’s gained popularity with the dev community, largely thanks to its balance of advanced functionality and gorgeous design.</p>\n<p>Whether you need to establish full-duplex communication channels or execute queries with GraphQL, Hoppscotch can handle just about anything you throw at it. You can even add your own translations if English isn’t your preferred language.</p>\n<p>Other features include collections to keep API requests organised, the ability to sync and restore request entries with a click, and real-time connections with WebSocket, MQTT and more.</p>\n<h3><strong>29. LambdaTest</strong></h3>\n<p>It’s crucial that web applications and services work the same way no matter what browser folks use to access them. But you can’t check how your HTML, CSS and JavaScript looks on every web browser and operating system on the planet.</p>\n<p><a href=\"https://www.lambdatest.com/\">LambaTest</a> can. This tool performs automated and live interactive testing on 2,000+ real browsers and operating systems to help ensure your web apps look spiffy wherever they appear.</p>\n<p>It also has the ability to auto-generate full page screenshots across any browser, OS, device or resolution. And with integrated debugging, geolocation testing and seamless collaboration via Asana, Slack and Trello integrations, Lambdatest is a must-have.</p>\n<h2>Web Design and Prototyping Tools</h2>\n<p>It’s not enough just to know how to code. Part of being a web designer is understanding what goes into good UI and <a href=\"https://paperform.co/blog/in-conversation-kyro-samaan/\">UX design</a>—from prototyping and wire-framing to creating a visual language for your app. These <a href=\"https://paperform.co/blog/ux-design-tools/\">design tools</a> are vital.</p>\n<h3>30. Figma</h3>\n<p>Only a few years ago, if you wanted a professional design tool you’d need to spend a whole lot of cash and download complex software. Not anymore.</p>\n<p>With <a href=\"https://www.figma.com/ui-design-tool/\">Figma</a>, you get everything you need to design for the web, completely free and accessible from any browser. From UI, UX and <a href=\"https://paperform.co/blog/graphic-design-tools/\">graphic design</a> to wire-framing and diagramming, Figma truly is the all-in-one platform for your design needs.</p>\n<p>It’s like LEGO for web devs. Need to mock up a mobile app? Design an entire UI? Build your client’s dream website from scratch? Just use the drag-and-drop editor and away you go. With version history you can even collaborate in real-time and not worry about breaking things.</p>\n<p>There’s a reason the whole internet is raving about it—Figma’s a rare tool that you will find yourself actively looking for reasons to use. It’s not hyperbole when we say that it’s seriously the only design tool you’ll need.</p>\n<h3>31. Adobe XD</h3>\n<p><a href=\"https://www.adobe.com/products/xd.html\">Adobe XD</a> is just the latest in a long range of excellent design tools from Adobe. With XD you can sketch wireframes and mockups, build interactive prototypes and create high-fidelity designs for any screen, thanks to their vector-based system.</p>\n<p>Flat images not enough? 3D transform allows you to turn static objects into dynamic, three dimensional designs in a click. Move or rotate objects, add the appearance of depth, or even build unique immersive AR/VR experiences.</p>\n<p>Above all, Adobe XD succeeds at making your prototypes feel like the real thing—with no coding required. Add user flows, interactions and motion, and save time by using reusable buttons and components.</p>\n<p>Of course, Adobe XD works seamlessly with the rest of the Adobe suite (editing .PSD files from Photoshop is a particularly handy feature). There are a range of co-editing tools to aid real-time collaboration and 200+ plugins to extend functionality.</p>\n<h3>32. Sketch</h3>\n<p><a href=\"https://www.sketch.com/\">Sketch</a> vs Figma is kind of like Apple vs Android: both offer very similar tools, and which one you prefer comes down to preference and your individual workflow.</p>\n<p>Sketch happens to be the app of choice for companies like Google, Facebook and Xbox. It's easy to use, offers a host of useful keyboard shortcuts, and is lightning fast no matter what you throw at it, from <a href=\"https://paperform.co/blog/social-media-design/\">social media designs</a> to working prototypes or fancy new icon sets.</p>\n<p>Having said that, most web developers agree that Figma's prototyping capabilities are superior to Sketch. They also cite the built-in version history, collaboration features and the way Figma handles colour and text styling. The Auto-Layout is also preferred over Sketch's Smart layout.</p>\n<p>But. That's not the whole story. Sketch is regarded as being more stable (Figma can be on the buggy side sometimes), having clearer layer organisation, and being faster to load large files. There's also a dark mode, which we all know, is music to any web developer's ear.</p>\n<p><strong>💡Pro Tip:</strong> The Figma vs Sketch battle isn't going to be decided in this blog post. Luckily, Figma is free to use and Sketch has a generous free trial. If you're unsure which is the right choice for you, just try them both.</p>\n<h3>33. ProtoPie</h3>\n<p><a href=\"https://www.protopie.io/\">ProtoPie</a> bill themselves as the \"easiest way to turn your interaction design ideas into realistic prototypes\". It's a no-code creation tool used to create interactive prototypes for mobile, web, desktop or the 'Internet of Things' (IoT).</p>\n<p>What sets ProtoPie apart is one thing: simplicity. Their goal isn't to be the most complex tool on the market—they want to take the pain out of building workable prototypes, fast. As with any no-code tool, the emphasis is on replacing code with simple buttons and keyboard commands to simplify your workflow.</p>\n<p>There's a gradual learning curve which makes it great for beginners. Prototypes also interact with each other, meaning you can make interactions across devices. It's not as popular as the big players, but it's certainly a powerful tool.</p>\n<h3>34. Framer</h3>\n<p>If you're comfortable with code, then <a href=\"https://framer.com/\">Framer</a> is an awesome tool to empower you to create interactive, highly-customisable prototypes. Web devs around the world use it to build apps, websites, design systems and even slick new video game interfaces.</p>\n<p>What sets it apart from something like Figma? Well, with Framer the idea is that you can work with designs that can *realistically be implemented *with code. It's a bridge for UX designers and developers to collaborate and rapidly experiment in a shared workspace.</p>\n<p>📚 **Related reading: **<a href=\"https://paperform.co/blog/in-conversation-kyro-samaan/\"><strong>How to stand out as a UX Designer</strong></a></p>\n<p>Even if code isn't your thing, Framer is great. The GUI and design elements are on part with Sketch (or at least in the same ballpark) and the built-in prototyping is a breeze to use. There are also plenty of third-party packages to add new elements.</p>\n<h3>35. Toolset</h3>\n<p>Sick of doing everything with code? <a href=\"https://toolset.com/\">Toolset</a> is a WordPress page builder which lets you build custom sites without any code. This is a great option for web developers and designers looking to complete complex projects quickly.</p>\n<p>Use Toolset to design from within WordPress. Create rich sites that look great on any device and load quickly for the SEO gods. It's got everything you could require to set up custom post types, fields, templates, searches, front-end forms and more.</p>\n<p>The biggest benefit of Toolset is that it saves you from having to use a bunch of different tools to build WordPress sites—all for a reasonable price of $69.</p>\n<h3>36. Animator By Haiku</h3>\n<p>Animation is difficult but <a href=\"https://www.haikuforteams.com/animator/\">Animator by Haiku</a> makes it a little bit more palatable. It lets you bring motion design to production, from your initial design tools like Figma to your final codebase.</p>\n<p>Animator uses an interface called Timeline to choreograph animations in a visual way. You can sequence and animate elements using the built-in curves library, or delve deeper with the custom editor. If you're more comfortable with code, use any code editor of your choice to animate directly from your code.</p>\n<h3>37. Affinity Designer</h3>\n<p>Adobe Illustrator has long been the industry standard when it comes to creating vector graphics. However, the new kid on the block, <a href=\"https://affinity.serif.com/en-gb/designer/\">Affinity Designer</a>, is certainly giving Adobe a run for its money.</p>\n<p>You'll find Affinity evangelists all over the net—and for good reason. It offers a silky-smooth experience at a much more affordable price, custom-built with professional illustrators, web designers, game devs and other creatives in mind.</p>\n<p>Affinity offers many of the same tools as Adobe Illustrator in a beautifully designed (and not bloated) package. Work with vectors and rasters to create concept art, print projects, logos, icons, UIs or just about anything else you can imagine.</p>\n<p>The biggest drawcard? There's no monthly fee. You can own Affinity Designer for a one-off payment of $84.99 on Windows or Mac or $34.99 on iPad.</p>\n<h2>Collaboration Tools</h2>\n<p>We've covered just about all the technical tools you could possibly need to be a web developer. But whether you're working in-house, at an agency or going it alone as a freelancer, <a href=\"https://unito.io/features/\">collaboration tools</a> are equally as important as your text editor of choice.</p>\n<p>Often the success of a project isn't simply down to technical brilliance—it relies on clear and efficient communication. The tools below will help you achieve it.</p>\n<h3>38. ClickUp</h3>\n<p>Product management tools should do two things: simplify your processes and help you ship products faster. <a href=\"https://clickup.com/\">ClickUp</a> does both. With an expansive suite of tools, it is truly “one app to replace them all”, covering tasks, docs, chat, goals and more.</p>\n<p>Whether you’re working solo or in a team, ClickUp lets you map out tasks, better plan your work and see your overall product vision. The major benefit here is the dizzying versatility of the platform. From building mind maps to planning tasks on a Kanban board, you can build out your own custom product management setup.</p>\n<h3>39. Asana</h3>\n<p><a href=\"https://asana.com/\">Asana</a> is probably the single most well-known and popular project management and collaboration tool on the market. It’s a tool built to stop you shuffling between emails, spreadsheets and other apps to keep organised—from brainstorming to meeting that deadline, you can manage everything with Asana.</p>\n<p>At Paperform we use Asana to assign tasks to team members, create projects split among our Product, Marketing and Content teams, and monitor deadlines to ensure we’re hitting our goals. It’s simple and visual, and is particularly excellent for keeping remote teams on the same page.</p>\n<h3>40. JIRA</h3>\n<p><a href=\"https://www.atlassian.com/software/jira\">JIRA</a> is the go-to project management platform for software teams to plan, track and release their products. From creating user stories and planning sprints to the final stages of shipping and data analysis, JIRA is *the *way to take any product to launch and beyond.</p>\n<p>One big advantage JIRA has over other similar tools is that it’s so customisable. It is possible to build the perfect workflow for your specific product or team—this is also a slight drawback, as it results in a slightly steeper learning curve upfront.</p>\n<p>As you’d expect, it’s built with trademark Atlassian polish. And with the Atlassian Marketplace you can connect with over 3,000 first and third-party apps like Slack, Google Drive and GitHub, to extend functionality.</p>\n<h3>41. Slack</h3>\n<p>If you work online in any capacity and haven’t heard of <a href=\"https://slack.com/intl/en-au/\">Slack</a>, you must be living under a rock, at the bottom of the ocean, next to a starfish named Patrick. In the last few years, Slack has become synonymous with remote team communication.</p>\n<p>At its core Slack is a team messaging platform. It cuts down on the need for email by separating conversations into distinct Channels, so you can track topics, ideas and projects without long email threads. This makes it the virtual headquarters for your business.</p>\n<p>Of course, there’s much more to it than simple text chat. Jump on video calls, add integrations with your favourite tools, and even communicate with external clients or folks in other companies</p>\n<p>Slack isn’t just for teams, either. Communities allow you to connect with people in your niche—<a href=\"https://http//www.javaspecialists.eu/slack/\">Java Specialists</a>, <a href=\"https://rubydevs.herokuapp.com/\">Ruby Developers</a> and <a href=\"https://pyslackers.com/web\">Python Developers</a> are just a few of the most active.</p>\n<h3>42. Zoom</h3>\n<p>Occasionally an app or program hits levels of popularity so high that it becomes the noun for what it’s used for. This happened to Google long ago (“I’ll Google it”) and it happened to video chat tool <a href=\"https://zoom.us/\">Zoom</a> in the last year and a half (RIP Skype).</p>\n<p>This happened for a reason: Zoom is awesome. While nothing replaces the feeling of face-to-face communication, it’s the next best thing. Whether you want to chat to your family across the country or liaise with web design clients, it makes video calls ridiculously easy.</p>\n<p>Zoom is free for 40-minute calls, meaning your meetings come with a convenient end timer. Plus you can record any calls (with your companion’s permission), which has become a popular way to record <a href=\"https://paperform.co/blog/how-to-record-a-webinar/\">webinars</a> and podcasts.</p>\n<p>**📚 Related reading: **<a href=\"https://paperform.co/blog/how-to-be-a-good-interviewer/\"><strong>How to be a good interviewer</strong></a></p>\n<h2>Miscellaneous Web Development Tools</h2>\n<h3>43. TypeScript</h3>\n<p>TypeScript is an insanely popular open-source language that builds extra features on top of JavaScript. Essentially, think of regular Java as Clark Kent and TypeScript as Superman—bigger, better, faster and all-round more capable.</p>\n<p>Devs love Typescript because it makes their job easier. It catches both code and type errors, as well as bugs that can easily be missed. This reduces troubleshooting time, while also saving you the effort of having to track down mistakes manually.</p>\n<p>The only real downside is that once you try TypeScript you'll find it hard to return to vanilla Java. The good thing is that you don't need to make a binary choice—all valid JavaScript code is also TypeScript code, and TypeScript can be transformed into Java too.</p>\n<p>If you want clean, simple code with excellent documentation and tools that save you hours of time, TypeScript might be worth a try. Just don't think you can master it in a few minutes, as most devs find there's a steep (albeit worthwhile) learning curve.</p>\n<h3>44. Sass</h3>\n<p>You might've seen the term <a href=\"https://sass-lang.com/guide\">Sass</a> mentioned in web dev circles. But what is it? Well, Sass is a CSS preprocessor that extends what you can do with regular CSS, adding special features like variables, nested rules, inheritance (not the monetary type) and mixins.</p>\n<p>The benefit is that it speeds up your workflow and modularises your code, making edits easier and more efficient to make. It allows you to achieve the same end result as regular CSS, with a fraction of the effort.</p>\n<p>For example, let's say you're working with a theme colour that you keep having to reuse in your CSS code. Rather than having to retype it every time, you can specify the colour once and save the variable. Then, every time you want to use that colour you just refer to the variable instead of hard-coding it.</p>\n<p><strong>💡Pro Tip:</strong> Sass is compatible with any version of CSS, the only requirement being you need Ruby installed for it to work. Just make sure you don't start using Sass before you have CSS mastered—it's important to get a firm grip of the basics first.</p>\n<h3>45. Stack Overflow</h3>\n<p>Okay, so this isn’t technically a tool. However, it’s not hyperbole on the <a href=\"https://stackoverflow.com/\">Stack Overflow</a> website when it says, “every developer has a tab open to Stack Overflow”. Ask around—they do. It’s the most popular and comprehensive web development community on the internet.</p>\n<p>Stack Overflow is a public platform that aims to build the single most definitive collection of coding questions and answers. Developers, system admins and data scientists of every shape and size rely on it for accurate information to difficult technical challenges.</p>\n<p>We’re talking the real nitty gritty. If you want to know why InvokeAsync shows an an error in a Blazor component, how to undo the most recent local commits in Git, or why HTML thinks the tag “chucknorris” is a colour, this is the place for you.</p>\n<p>While it’s undoubtedly a gold mine of useful resources, it’s important to note that the community can be a bit toxic when it comes to welcoming new web developers. Stack Overflow mods are aware of this (and have added new guidelines in response) but do be wary—and look for existing answers before asking a query of your own.</p>\n<p><strong>💡Pro Tip:</strong> More broadly it would be remiss not to mention your other best friend: Google! Not even the most seasoned web developer knows how to fix everything and you can almost guarantee that you’ll find someone out there who’s had the same problem as you at some point.</p>\n<h3>46. Squoosh Image Optimiser\n</h3>\n<p>Assets. Content. Media. Even the simplest web design project will need basic images and icons. Image optimisation apps allow you to compress image file sizes without affecting quality, which means your sites will stay as fast and responsive as possible.</p>\n<p>Now, there’s no shortage of great image optimisation apps but we love <a href=\"https://squoosh.app/\">Squoosh</a>. It’s a no-frills experience that does exactly what you need it to. Just drag and drop your image into the editor and Squoosh does its thing.</p>\n<p>You aren’t limited to compression either. With the simple interface you can resize, compress or change the image format. The changes are almost instant and the finished product can be downloaded with a click.</p>\n<p>One drawback is that you can only work with one image at a time. So, if you’re working on a large project requiring lots of images, <a href=\"https://shortpixel.com/\">ShortPixel</a> may better suit your needs.</p>\n<h3>47. ColorPick Eyedropper Chrome Extension</h3>\n<p>Whether you're designing a website, putting together a UI or creating a <a href=\"https://paperform.co/blog/canva-alternatives/\">Canva design</a>, colour is serious business for web developers and designers. Colours are crucial for brand awareness, evoking certain emotions and, most importantly, accessibility.</p>\n<p>Colour picking tools allow you to identify the Hex codes of elements on the web to gain inspiration or keep designs consistent. There are thousands of tools in this space, but you won't find one easier than <a href=\"https://chrome.google.com/webstore/detail/colorpick-eyedropper/ohcpnigalekghcmgcdcenkpelffpdolg?hl=en\">ColorPick Eyedropper for Chrome</a>.</p>\n<p>Just click the extension and hover over <em>any</em> element on *any *webpage. A small box appears with the Hex code and RGB model. These are automatically copied to the clipboard for you to use. If your only experience working with colours was using crayons in kindergarten, Material.io has a great to the <a href=\"https://material.io/design/color/the-color-system.html#color-usage-and-palettes\">Material Design system</a>.</p>\n<h3>48. Google Lighthouse</h3>\n<p>Technically a part of Chrome Developer Tools, <a href=\"https://developers.google.com/web/tools/lighthouse/\">Google Lighthouse</a> deserves its own dedicated entry. It’s an open-source, automated tool for improving the quality of web pages. You can run it on any existing web page to audit overall performance, accessibility, best practices and SEO.</p>\n<p>While you can run it from the command line, or as a Node module, the visual interface within Chrome DevTools is useful for getting actionable insight into what’s working (and what is not working) about any given site.</p>\n<p>There are two new features that extend the functionality somewhat too. Stack Packs allow Lighthouse to detect what platform your site is built on and display more specific guidance based on your unique tools.</p>\n<p><strong>💡Pro Tip:</strong> New Lighthouse plugins also allow you to use the data you’ve collected to create new audits and reports. Used in tandem with PageSpeed Insights, it’s a surefire way to make sure your website is in good shape.</p>\n<h3>49. A Second Monitor</h3>\n<p>No guide to web development tools would be complete without recommending you treat yourself to a second monitor. The extra screen real estate makes life <em>so much easier</em> and development <em>so much faster.</em></p>\n<p>Just think of a world where you can have IDE and terminal open on one screen, and the app that you're debugging on the other. Or Slack on the first, your browser and Stack Overflow on the second, maybe Spotify in the corner for some Lo-Fi beats.</p>\n<p>With one screen you're constantly cycling through open applications. Half the time you lose a tab, or forget what you're looking for altogether. This takes time, and as we all know, time is money. Treat yourself to a second monitor—it's a whole new world.</p>\n<h3>50. Paperform</h3>\n<p>For all the advances we’ve made in the world—sending billionaires to the moon, having the power of a supercomputer in our pockets—it’s still weirdly difficult to code beautiful online forms (seriously, PHP is a pain.) That’s where <a href=\"https://paperform.co/\">Paperform</a> comes in.</p>\n<p>Paperform empowers you to create beautiful <a href=\"https://paperform.co/blog/best-online-form-builders/\">online forms</a> and landing pages without any code. Just use our free-text editor to build anything from basic <a href=\"https://paperform.co/templates/contact-us-form/\">contact forms</a> to complex <a href=\"https://paperform.co/templates/apparel-order-form/\">eCommerce pages</a> that can be embedded anywhere on the internet.</p>\n<p>Use our theme tools to get started, then add your own unique tweaks with support for custom HTML and CSS. Developing on WordPress? We’ve even got a plugin that makes <a href=\"https://paperform.co/blog/wordpress-form-builder-plugins/\">embedding forms on WordPress</a> a breeze—and makes life way easier for you and your clients.</p>\n<p>But that’s not all you can do. Want to collect feedback from <a href=\"https://paperform.co/blog/customer-satisfaction-survey/\">satisfied customers</a>? Send a <a href=\"https://paperform.co/templates/new-client-onboarding-form/\">client questionnaire</a> for each new project? Or maybe you want to set up a <a href=\"https://paperform.co/blog/one-page-website/\">landing page</a> where you can sell <a href=\"https://paperform.co/blog/online-course-ideas/\">online courses</a>, schedule appointments and <a href=\"https://paperform.co/blog/email-list-sign-ups/\">grow a mailing list</a>?</p>\n<p>With Paperform you can do all that and more. And with our 3,000+ Direct and Zapier integrations, connecting with the rest of your tech stack to streamline your web development workflow is so easy your grandma could do it</p>\n<p><img src=\"https://img.paperform.co/fetch/f_webp,w_1500/https://s3.amazonaws.com/paperform-blog/2021/08/PF-STACK.jpg\"><img src=\"https://lh4.googleusercontent.com/TGU36vvkMGBvyuV-3moKfrSXGILBOwxz43E7jYdef4p2Vqeb2P90yFchj_RYj3OpvgAZxYQ9MRYpNwuSLFo3NIYD6p96Rb8uw4QXOsribEx_JjDoxTUWE1dSBMTJ17aC4ZH70E25\">Image Source: <a href=\"https://atom.io/\">Atom</a><img src=\"https://lh5.googleusercontent.com/me7eP6zI6TqSg-oyEJyqTAoveecqRgW9NNFHRIfuAVvbIJzl9af3yArn0QMuVXH51E-MeZv6BFNk3P1qKl4eJlsaMFWAIT0z2jUWFaVCvD_GDfro_GJbe9srCT299c8Aa2yg2oO9\">Image Source: <a href=\"https://www.sublimetext.com/\">Sublime Text</a><img src=\"https://lh6.googleusercontent.com/D44i98NM_KaAxB0vloVdqpkW3QQrOeh-gahRhYT_FT1wGaN9o4BOkV4bDecBTXQRqgSmXNf8emg5FEDMjvievgGr4_UADd6xGReiBqKVEi0FvfauKVDmYOOlEA4XSqmL9ND8EMk9\">Image Source: <a href=\"https://notepad-plus-plus.org/\">Notepad++</a><img src=\"https://lh5.googleusercontent.com/D-ZILznlMZ64gUXl3ODwXyyLvJOOV6Tgem2e7Nzt8p02Yz3v4JCA5tmyFKlz7JczYh_CpJcUAN0wHxf_Z5rzVxCX50EHbctJQ2iyaMAhtARmoJqYF3Ikl-G0g_4XILXJaF62b60S\">Source: <a href=\"https://commons.wikimedia.org/wiki/File:Vim-(logiciel)-console.png\">Wikipedia Commons</a><img src=\"https://lh6.googleusercontent.com/252gQ1IpAEUNr3lCHi-MvLrULiBMFo56aGsb47nNy6W6ZshOFQgk4FFYaKRn8Fyy4fOBJrcVBIDBEHQU9zg59G8XbmNxkcot4zMf28sJDQWNwxBCjv-UaH8weY6BKQU6ErDlmzu5\">Image Source: <a href=\"https://www.google.com/imgres?imgurl=https%3A%2F%2Fcode.visualstudio.com%2Fassets%2Fupdates%2F1_37%2Ficons.gif&#x26;imgrefurl=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_37&#x26;tbnid=FK_-tkfGX0bzmM&#x26;vet=12ahUKEwjznbKQ2YfyAhXUnUsFHULwDJQQMygAegUIARDOAQ..i&#x26;docid=xSPl9orBLj6FKM&#x26;w=1930&#x26;h=1282&#x26;q=vs%20code&#x26;ved=2ahUKEwjznbKQ2YfyAhXUnUsFHULwDJQQMygAegUIARDOAQ\">Visual Studio</a><img src=\"https://lh5.googleusercontent.com/sMHy-q3-qu13ZaFwDwrHy6sKhDnR_K5GdFtsL3J7Wknw9lUFNDOLx8LtRq7owH4GJIQ2bsxePWLN-CrMAdmE0TmsK71mrvaF-7pBlFqwXNMKzNhpdLYre9YmSuqpCP_URy7NxUJx\">Image Source: <a href=\"https://www.djangoproject.com/\">Django</a><img src=\"https://lh5.googleusercontent.com/mxpPHMijc7hvVz5LGZYx-QA9knoI7o3F4inDBERqyXqT7sFOqXky2R2WoyponK1WcZXMc6K5-5s3LYc1iedDCjOpu67Go6uEaTUKMc_CHfzMxFOFr_yN1TbnyTcfg7DhiKUirO9S\">Image Source: <a href=\"https://rubyonrails.org/\">Ruby on Rails</a><img src=\"https://lh4.googleusercontent.com/Xddm--wmths99nAn-_6kEFm_nwZxr1LHX-e585zbH9DVsCUMeMNYnfp2zSNVk7AZ7FvjZ4FTA_Qt23_cL4_HD6pqq5EqiVTjziFQAHgU9fbnFp0d42au3FA-LqLTRe7vORIbR8oB\">Image Source: <a href=\"https://angular.io/\">Angular</a><img src=\"https://lh5.googleusercontent.com/SF8F6NLYMhdsbjPY8lYimBA1R-A39nC2JEmDQIQAxQP0zjcVM5Cn-VBFxlKx2mNCFZY0R6E61BmeKuT6_MN5OZ5EKgIqQ6hRLkFi5pQIy0yeiNmJ_z861aE8txtAnFix2stdDPXf\">Image Source: <a href=\"https://reactjs.org/\">React</a><img src=\"https://lh4.googleusercontent.com/pdrGHJeVHJujGzs9PFtJY7E1s0aiDruAGdUquFd0iHKTIXhUaxnECP9GMwYpzmWgsejhmj0TGi6h9ej6FqI-ogSuNcYFDZqiTiGFy13PAFxVXJHKeT2PCD1lIQabE4uaLRFeeCX6\">Image Source: <a href=\"https://vuejs.org/\">Vue</a> <img src=\"https://lh6.googleusercontent.com/Vwun5FAge-Hh-IB-O2tJ9qMPuoLaSos0GRH1GxS-FD_F_EDuKJZNZk0hlOpB4Xv2gauE1vjC4sY38Ik19s0KtqgeR4IHivFcPCnDFMlAJ8EgfbGdA6fg9K8zOuiFF1GNR4mAwnes\">Image Source: <a href=\"https://www.meteor.com/\">Meteor</a><img src=\"https://lh3.googleusercontent.com/Zi7hE50XUZBiBZf9G9Jd8-gdp5GMeQ8ymf5XvkPX0wHKdC60ZlKf_uNeqcDoZo9iOaXFRMsFszhHl3Gy4N1XB7d7U1bfwCtlKXu4TJRYzh_206wQRBSK4eeAs_jatl2qyp4Rjv-m\">Image Source: <a href=\"https://dotnet.microsoft.com/apps/aspnet\">ASP.NET</a><img src=\"https://lh6.googleusercontent.com/NXYMRFbspS4M_OKEtx4AywW_r5xJdkgfIvGNYUcQhp5D5ocZYMdWKLzjMFGyVVENpsaK66j77qX8PhKXV2D1xFEPhUClwppQml00ehBAWCkt6Pzimu4EqS8A37QmxzzEKrAGznqD\">Image Source: <a href=\"http://getbootstrap.com/\">Bootstrap</a><img src=\"https://lh6.googleusercontent.com/yxo-yyVy5TmurN540Ka207_sQbyGKBqd00nvilE-fqtqYZv33OkE8jWRpBjNWO3tIxKtoi7ujMYfNS6Mbc9MCI3Fw18tjIRLo0kWosD9FRMd7t99nHbKcE_p1ArhMWppx65u0A9U\">Image Source: <a href=\"https://semantic-ui.com/\">Semantic UI</a><img src=\"https://img.paperform.co/fetch/f_webp,w_1500/https://s3.amazonaws.com/paperform-blog/2021/08/screely-1628736193378.png\">Image Source: <a href=\"https://foundation.zurb.com/\">Foundation</a><img src=\"https://lh4.googleusercontent.com/_-hHtXVr3_H96K1TcXksh7ZrmhMucG7eIZ97alh5H-2z7ZDiWVnD6XKOAbOE-jOsgxPubVhcHNvfNPfVZq9SVbeB134GJom3h5HWbLikVv5i3SxQObohCtfqPq71JoSG1YfkUNA_\">Image Source: <a href=\"https://materializecss.com/\">Materialize</a><img src=\"https://lh5.googleusercontent.com/Xh6Lar3pQSSFHp6yhyU2ZLzuw77eVd-kqYgluxW0qLZ3KpO5_J3OTINaHVta53n5rOrcl3vjwUIupb6YaFcalhXxV0eFSpANCcczX5wjefmRMsHv6YmRzg3Xo3mUvW_WzN-lmX-B\">Image Source: <a href=\"https://developer.chrome.com/docs/devtools/\">ChromeDevTools</a><img src=\"https://lh3.googleusercontent.com/pEMKE5gpTl7SHgXBCl1r6gyGDHBeIyuoerr5dsSETZqyavGRu1VOghqgu-ZPodrZJ1QS1pBDwBHHcxDLczWZg6303oektGn-ttIjmnr_2RzXbsKwYwRbJ-nQ7NvvXOvoU7Bs-HgD\">Image Source: <a href=\"https://svelte.dev/\">Svelte</a><img src=\"https://lh6.googleusercontent.com/FdOwMdbWSLMXcnJ2gyj2NtGs5l5ShVxOPxRdw1Qj6OEeDiEXw-JPxYoN7Sbi8QLR_EquaOxyT_jey2R6JQXaqhDC_zbpMwy45PoMLjNZrk_QI6IJ3gCjBvCbA_rQl1Dabf0kX2nD\">Image Source: <a href=\"https://emberjs.com/\">Ember</a><img src=\"https://lh3.googleusercontent.com/7scAnAsMX-TlzJ6PLimPYY2Tb6aH6p1EtjLbBdz5M8SX3bIk78Q6sr1-mdc9LUgttgj2Ks_EVPP9XD6fb5LyMHK6-A8A1O-dFnVXW52AG5ZGurdFDe3AvIzO0ddGZ5DGWdE1k2mA\">Image Source: <a href=\"https://yarnpkg.com/lang/en/\">Yarn</a><img src=\"https://lh5.googleusercontent.com/6kCFq5M0LzWPsqts2sa5HMCU7NVeAG2HfaqQKmbe_sAuwH4fh_reNO1lkqn2Aq_FQO9BMNrXPv-8lTsTBhgaNIVPBy-l-hXqaHURRvhTlXdRChL6f0n2j0J0ZvnvjzUrtzubpK4D\">Image Source: <a href=\"https://www.npmjs.com/\">npm</a><img src=\"https://lh6.googleusercontent.com/sihMGTxUb8BieGKwjsMZSHtErIikM2B3ioRYAQ-U8RnRYkN9xdfYjLCA_dTbVuSxFoXFgjZsd7ljFMeBzZOcs5lSih1SJO1SLR5mTtcVGioSvOdjrUJCF20a6so4aNxnbQobt0hv\">Image Source: <a href=\"https://man7.org/linux/man-pages/man1/dpkg.1.html\">DPKG</a><img src=\"https://lh3.googleusercontent.com/9huTvL7gtUbXzzwMaYxE8GwC5Nh6RBD1984zLAbB3sx2ES98MqooBO9EN1UyTXr8uyANfcKfdWdGP2hwe3JdmdbjyK-XWkeJxymmpJd7HTKqU3QFPBXm3siMkEC9pB5sIw1RWiCi\">Image Source: <a href=\"https://desktop.github.com/\">Github Desktop</a><img src=\"https://lh4.googleusercontent.com/vEhY-y601AhXiD9FedJhwwwkd66UeRQQeyaHw9SL7LsyqUJCm7Vc4n5p0dLgQrCPJWUhiZmbFRugcKOfIlJYT3ah9W0lHjcMd3B4Pdh5kHx4yKdTOrmx709i4SYRuosO3L40_y0Y\">Image Source: <a href=\"https://www.gitkraken.com/\">GitKraken</a><img src=\"https://lh6.googleusercontent.com/IhG5Y6dLenofqcIvTY5sOrZoy7rf3f1CagwBeit_m0QZU_QZ5eoMpsWENAU2y4DB93nHq25dgX3WnTVKNNWnnYmoFaEIyT4WYE_JAi5OsjG1przlD9KLSX5-ar1CpXu1_wEhq2SY\">Image Source: <a href=\"https://www.sourcetreeapp.com/\">Sourcetree</a><img src=\"https://lh6.googleusercontent.com/1hWg3CPX-XkaeJXPECAninfnozi2o3p3RSk57Y7B8WdvZKsMODbZi3rxR5gyLORQyxbARj2-VoESeqwtWthttAZAItVnheneivMIG0ZTbPludRnzq6rMtzN2eTlEHeODaxrqmRIa\">Image Source: <a href=\"https://www.postman.com/\">Postman</a><img src=\"https://lh4.googleusercontent.com/Qg-U_I4ZNgtaun616Nlky0T5ram5v_kZ3h-F33Zmai5t9QoNqutJruPxl2yybA1elIk7J_Qs21_G4wpUR32-TYVP6bx7wCmtOIvIZaTZ3BxI1EqoIVklH-6KRRtnQT8deRXOWSZl\"><img src=\"https://lh5.googleusercontent.com/XROFNSk7cll32bNRftZzEeL9VDSS3IiLRIgZ4QRhMfadnJ_LLnohR_SMSGQW_CPbiqklUkOutHhK3yRICKp4b9OMb6nLn1M1i76COiDIv_9CTTm0XgxCRt7ZH_VKIgIawnWXskPm\">Image Source: <a href=\"https://hoppscotch.io/\">HoppScotch</a><img src=\"https://lh5.googleusercontent.com/cUod2uM6ebt50jQq4JtQ7SPMfAy8Xp8Ad05fe7bSREmHxh-kiJT5el1czMEqBfjEUiPiPTUQCqOZU8Ylw386MW3G0E2jQ35T_FKsksw_cieFbsmY8ubbmMNqwWwTLwXI1z8qtfvo\">Image Source: <a href=\"https://www.lambdatest.com/\">LambdaTest</a><img src=\"https://lh5.googleusercontent.com/qlIEiSqu53w7iAu9a6DbOtf6Mhpw1PFBKQHDhr1Fpoyq5Z8md6ctRU-mZcltNt3L6o1NZw29ibT7PvOmGMj4G0t0VbU_2y5Qvs0Nd3dykkA7fyVZkYij-qcHqveR-jMrwemNP4JQ\">Image Source: <a href=\"https://www.figma.com/ui-design-tool/\">Figma</a><img src=\"https://img.paperform.co/fetch/f_webp,w_1500/https://s3.amazonaws.com/paperform-blog/2021/08/screely-1628742272023.png\">Image Source: <a href=\"https://www.adobe.com/products/xd.html\">Adobe XD</a><img src=\"https://img.paperform.co/fetch/f_webp,w_1500/https://s3.amazonaws.com/paperform-blog/2021/08/screely-1628743157849.png\">Image Source: <a href=\"https://www.sketch.com/\">Sketch</a><img src=\"https://img.paperform.co/fetch/f_webp,w_1500/https://s3.amazonaws.com/paperform-blog/2021/08/screely-1628752045112.png\">Image Source: <a href=\"https://www.protopie.io/\">ProtoPie</a><img src=\"https://img.paperform.co/fetch/f_webp,w_1500/https://s3.amazonaws.com/paperform-blog/2021/08/screely-1628749998307.png\">Image Source: <a href=\"https://framer.com/\">Framer</a><img src=\"https://img.paperform.co/fetch/f_webp,w_1500/https://s3.amazonaws.com/paperform-blog/2021/08/screely-1628747997257.png\">Image Source: <a href=\"https://toolset.com/\">Toolset</a><img src=\"https://img.paperform.co/fetch/f_webp,w_1500/https://s3.amazonaws.com/paperform-blog/2021/08/screely-1628748611285.png\">Image Source: <a href=\"https://www.haikuforteams.com/animator/\">Animator by Haiku</a><img src=\"https://img.paperform.co/fetch/f_webp,w_1500/https://s3.amazonaws.com/paperform-blog/2021/08/screely-1628751023068.png\">Image Source: <a href=\"https://affinity.serif.com/en-gb/designer/\">Affinity Designer</a><img src=\"https://lh6.googleusercontent.com/zSjT3K_KLXPwq32-5oA8RLQMAXmjNSBfTUXgxxJir7KQ6fOdd1yRYd0jzBxo7O42N3mNv5UQgIzgGmCvFb_Cc18h17DAED2ShKiPvl6qpn2LFWVogn9QcEMIX6DgHCvopX0pFB_1\">Image Source: <a href=\"https://clickup.com/\">ClickUp</a><img src=\"https://lh6.googleusercontent.com/8gm_048J2wEJ_WD_9vXB7esjB0bzTnj7hNPyhIewLbQSyEeqtuRhsYzUz7jE_n0E3GylWvamewgWYkbWSawAkAo3t5ZD-bM10TT-ZkSRSrEc3Fmib7Y7L_XTWe-OGOfdIT5zAOn1\">Image Source: <a href=\"https://asana.com/\">Asana</a><img src=\"https://lh4.googleusercontent.com/DOfqKLR_ON8XzgdLDjTuVMSa_bTKVSm9tZ3lbx3CW03AX8Q3Y9qYbP17d1EhH4F7KGNFbYRciB-NUFM775UhBHWkJbfPuhahhroh9P4EDUf714Zc-zBrXtKK644je6G8n589jewp\">Image Source: <a href=\"https://www.atlassian.com/software/jira\">JIRA</a><img src=\"https://lh4.googleusercontent.com/ES8WaJ_R9ZY9kYtfAlc-Wt28uUDmTMoRvA1zQLp2ijGfTvhVEuBYFYAS7FHSspYMokpuIv9VLqwhtxYxlnrImdxTLwFqnS_k6AqvXhPWSwqpNGc5lpfcHcbglV-I3Imcz1yOI2c_\">Image Source: <a href=\"https://slack.com/intl/en-au/\">Slack</a><img src=\"https://lh3.googleusercontent.com/9MTbGgNToiS4BrnLGuDkrIykZFtGbDE9g6khzKy7w52VnFQqnXwi2mlYjRFA9EI_49dmEyD53M3WFOxuR49RcAu_yQi3qxGI3NGs79qVKM4HJyDsQF6-5YH-hUDHrqvxnG_b_EUI\">Image Source: <a href=\"https://zoom.us/\">Zoom</a><img src=\"https://img.paperform.co/fetch/f_webp,w_1500/https://s3.amazonaws.com/paperform-blog/2021/08/screely-1628831608408.png\">Image Source: <a href=\"https://www.typescriptlang.org/\">TypeScript</a><img src=\"https://img.paperform.co/fetch/f_webp,w_1500/https://s3.amazonaws.com/paperform-blog/2021/08/screely-1628828564183-1.png\">Image Source: <a href=\"https://sass-lang.com/guide\">Sass</a><img src=\"https://lh6.googleusercontent.com/GVUZo-jhQxvyTfdhcC0SIpT7yTjtXiVUFDzhtxc-NuVtF5AXqQcgpCSEIZyWdLZs7rPtUYvu-lIHvY-eKymaFAT5sprEffolutJJ1gGAWJB9s37ZmGUlH6UIqleVpfciapcMvAR7\">Image Source: <a href=\"https://stackoverflow.com/\">Stack Overflow</a><img src=\"https://lh4.googleusercontent.com/VkP8y5mQdyGHN36GWELx53tup1fhCQiOPMmce1-wCGTBF18UTLrXnEa2KmDy6Op9QfwU00frx_xQBnRLIYJx7TERs0SwTNeufbMnM3RTIRS2ZDcrynUlQSEaEzoPTO7jD94kvtzr\">Image Source: <a href=\"https://squoosh.app/\">Squoosh</a><img src=\"https://img.paperform.co/fetch/f_webp,w_1500/https://s3.amazonaws.com/paperform-blog/2021/08/screely-1628823617932.png\">Image Source: Paperform<img src=\"https://lh6.googleusercontent.com/ALDwwi8tDvEmnWjsFJlyzFwWQ4p4V4uuS7egg1DNcbRWG0B02BeYbXO2o7aiRIHuSzTdStodCMJh7dSyT-L6XoyGhQArSNJam0_6HqDiEEkx4H7YkJ5fvOHy0sU3dUEE9UzqdPEa\">Image Source: <a href=\"https://developers.google.com/web/tools/lighthouse/\">Google Lighthouse</a><img src=\"https://img.paperform.co/fetch/f_webp,w_1500/https://s3.amazonaws.com/paperform-blog/2021/08/Facebook-post---5--2-.png\">Image Source: Stack Overflow<img src=\"https://lh3.googleusercontent.com/-B-6-8bBUycMywsPV65wJs1vKrkW3QCCo_Bd4eXovfkHh3uMkLyGdvBTYNDOj05o97iTVm7M4B9rLjINH8PZ9NLsIzJ7peSOcf3T2yJ9_8Efz5Rn5jMUv4xLpetCt3zF1PDs8iiU\"></p>"},{"url":"/docs/audio/","relativePath":"docs/audio/index.md","relativeDir":"docs/audio","base":"index.md","name":"index","frontmatter":{"title":"Audio","weight":0,"excerpt":"Audio Projects","seo":{"title":"Audio Projects","description":"A collection of web audio projects","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<br>\n<br>\n<br>\n<iframe width=\"100%\" height=\"500\" frameborder=\"0\"\nsrc=\"https://bgoonz.github.io/extracting-features-from-audio/\"></iframe>\n<hr>\n<br>\n<iframe width=\"100%\" height=\"500\" frameborder=\"0\"\nsrc=\"https://observablehq.com/embed/@bgoonz/mode-lighting/2?cell=*\"></iframe>\n<br>\n<br>\n<br>\n<hr>\n<br>\n    <iframe\n      width=\"100%\"\n      height=\"1000\"\n      frameborder=\"0\"\n      src=\"https://observablehq.com/embed/@bgoonz/determining-the-key-of-bwv1001-1st-movement-adagio?cell=*\"\n    ></iframe>\n<br>\n<br>\n<br>\n<hr>\n<br>\n    <iframe\n      width=\"100%\"\n      height=\"784\"\n      frameborder=\"0\"\n      src=\"https://observablehq.com/embed/@bgoonz/can-sound-add-value-to-data-visualizations?cells=viewof+chart\"\n    ></iframe>\n<br>\n<br>\n<br>\n<hr>\n<br>"},{"url":"/docs/community/video-chat/","relativePath":"docs/community/video-chat.md","relativeDir":"docs/community","base":"video-chat.md","name":"video-chat","frontmatter":{"title":"Video Chat","weight":1,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>Zumzi Instant Messenger</h1>\n<iframe src=\"https://zumzi-chat-messenger.vercel.app/web/login.html\" height=\"275px\" width=\"17%\" style=\"zoom:0.69; align-self:center;display:auto;display: block;border:12px solid gold;\"> </iframe>\n<p><a class=\"github-corner\" href=\"https://github.com/bgoonz/zumzi-chat-messenger\" aria-label=\"View source on Github\"><svg aria-hidden=\"true\" width=\"40\" height=\"40\" viewBox=\"0 0 250 250\" style=\"z-index: 100000; fill: black; color: rgb(255, 255, 255); position: fixed; top: 0px; border: 0px; left: 0px; transform: scale(-1.5, 1.5);\"><path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path><path class=\"octo-arm\" d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\" fill=\"currentColor\" style=\"transform-origin: 130px 106px;\"></path><path class=\"octo-body\" d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\" fill=\"currentColor\"></path></svg></a></p>"},{"url":"/docs/community/","relativePath":"docs/community/index.md","relativeDir":"docs/community","base":"index.md","name":"index","frontmatter":{"title":"Community","excerpt":"We'd love it if you participate in the Libris community. Find out how to get connected.","seo":{"title":"Connect ","description":"This is the community page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Where To Get Support","keyName":"property"},{"name":"og:description","value":"This is the community page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Where To Get Support"},{"name":"twitter:description","value":"This is the community page"}]},"template":"docs"},"html":"<div align=\"center\">\n<h2>➤ Connect with me:</h2>\n<p align=\"center\">\n  <a href=\"mailto:bryan.guner@gmail.com\"><img src=\"https://img.icons8.com/color/96/000000/gmail.png\" alt=\"email\"/></a><a href=\"https://www.facebook.com/bryan.guner/\"><img src=\"https://img.icons8.com/color/96/000000/facebook.png\" alt=\"facebook\"/></a><a href=\"https://twitter.com/bgooonz\"><img src=\"https://img.icons8.com/color/96/000000/twitter-squared.png\" alt=\"twitter\"/></a><a href=\"https://www.youtube.com/channel/UC9-rYyUMsnEBK8G8fCyrXXA/videos\"><img src=\"https://img.icons8.com/color/96/000000/youtube.png\" alt=\"youtube\"/></a><a href=\"https://www.instagram.com/bgoonz/?hl=en\"><img src=\"https://img.icons8.com/color/96/000000/instagram-new.png\" alt=\"instagram\"/></a><a href=\"https://www.pinterest.com/bryanguner/_saved/\"><img src=\"https://img.icons8.com/color/96/000000/pinterest--v1.png\" alt=\"pinterest\"/></a><a href=\"https://www.linkedin.com/in/bryan-guner-046199128/\"><img src=\"https://img.icons8.com/color/96/000000/linkedin.png\" alt=\"linkedin\"/></a>\n  <a href=\"https://bryanguner.medium.com/\"><img src=\"https://img.icons8.com/color/96/000000/medium-logo.png\" alt=\"medium\"/></a><a href=\"https://open.spotify.com/user/bgoonz?si=ShH9wYbIQWab5Jz_30BKFw\"><img src=\"https://img.icons8.com/color/96/000000/spotify--v1.png\" alt=\"spotify\"/></a>\n  </p>\n</div>\n<div align=\"center\">\n<table>\n<thead>\n<tr>\n<th><a href=\"https://github.com/bgoonz\">GitHub</a></th>\n<th><a href=\"https://gitlab.com/bryan.guner.dev\">Gitlab</a></th>\n<th><a href=\"https://bitbucket.org/bgoonz/\">Bitbucket</a></th>\n<th><a href=\"https://bryanguner.medium.com/\">Medium</a></th>\n<th><a href=\"https://codepen.io/bgoonz\">code pen</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://repl.it/@bgoonz/\">Replit</a></td>\n<td><a href=\"https://www.quora.com/q/webdevresourcehub?invite_code=qwZOqbpAhgQ6hjjGl8NN\">Quora</a></td>\n<td><a href=\"https://www.reddit.com/user/bgoonz1\">Redit</a></td>\n<td><a href=\"https://webcomponents.dev/user/bgoonz\">webcomponents.dev</a></td>\n<td><a href=\"https://dev.to/bgoonz\">dev.to</a></td>\n</tr>\n<tr>\n<td><a href=\"https://runkit.com/bgoonz\">runkit</a></td>\n<td><a href=\"https://observablehq.com/@bgoonz?tab=profile\">Observable Notebooks</a></td>\n<td><a href=\"https://www.npmjs.com/~bgoonz11\">npm</a></td>\n<td><a href=\"https://meta.stackexchange.com/users/936785/bryan-guner\">stack-exchange</a></td>\n<td><a href=\"https://observablehq.com/@bgoonz?tab=profile\">Observable Notebooks</a></td>\n</tr>\n<tr>\n<td><a href=\"https://www.upwork.com/freelancers/~01bb1a3627e1e9c630?viewMode=1&#x26;s=1110580755057594368\">Upwork</a></td>\n<td><a href=\"https://www.notion.so/Overview-Of-Css-5d88b0bc9a73422a9be1481d599a56ba\">Notion</a></td>\n<td><a href=\"https://angel.co/u/bryan-guner\">AngelList</a></td>\n<td><a href=\"https://stackshare.io/bryanguner\">StackShare</a></td>\n<td><a href=\"http://plnkr.co/account/plunks\">Plunk</a></td>\n</tr>\n<tr>\n<td><a href=\"https://giphy.com/channel/bryanguner\">giphy</a></td>\n<td><a href=\"https://ko-fi.com/bgoonz\">kofi</a></td>\n<td><a href=\"https://www.codewars.com/users/bgoonz\">Codewars</a></td>\n<td><a href=\"https://dribbble.com/bgoonz4242?onboarding=true\">Dribble</a></td>\n<td><a href=\"https://glitch.com/@bgoonz\">Glitch</a></td>\n</tr>\n<tr>\n<td><a href=\"https://app.contentful.com/spaces/lelpu0ihaz11/assets?id=MocOPmmNliLn6PPv\">contentful</a></td>\n<td><a href=\"https://app.netlify.com/user/settings#profile\">Netlify</a></td>\n<td><a href=\"https://stackblitz.com/@bgoonz\">Stackblitz</a></td>\n<td><a href=\"https://vercel.com/bgoonz\">Vercel</a></td>\n<td><a href=\"https://www.youtube.com/channel/UC9-rYyUMsnEBK8G8fCyrXXA/featured\">Youtube</a></td>\n</tr>\n<tr>\n<td><a href=\"https://web-dev-hub.com/\">wordpress</a></td>\n<td><a href=\"https://edabit.com/user/dsRcx6yCwAgYwZbRB\">Edabit</a></td>\n<td><a href=\"https://vimeo.com/user128661018\">Vinmeo</a></td>\n<td><a href=\"https://jsfiddle.net/user/bgoonz/\">js fiddle</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://developers.google.com/profile/u/100803355943326309646?utm_source=developers.google.com\">Google Developer Profile</a></td>\n<td><a href=\"https://gitee.com/bgoonz\">Gittee</a></td>\n<td><a href=\"https://wakatime.com/@bgoonz42\">Wakatime</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p><a href=\"https://twitter.com/messages/compose?recipient_id=3805104374\"\n  class=\"twitter-dm-button\" data-screen-name=\"@furni\">\nMessage @bgooonz</a></p>\n<p><a class=\"twitter-follow-button\"\n  href=\"https://twitter.com/bgooonz\">\nFollow @bgooonz</a></p>\n<br>\n<a class=\"twitter-timeline\" href=\"https://twitter.com/bgooonz?ref_src=twsrc%5Etfw\">Tweets by bgooonz</a> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>"},{"url":"/docs/content/data-structures-algo/","relativePath":"docs/content/data-structures-algo.md","relativeDir":"docs/content","base":"data-structures-algo.md","name":"data-structures-algo","frontmatter":{"title":"RECENT PROJECTS","weight":0,"excerpt":"embedded utilities","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<br>\n<br>\n<br>\n<br>\n<h1>  Potluck Planner </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://potluck-landing.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<h1>Meditation App </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://meditate42app.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<h1>  Web Audio DAW      </h1>\n<br>\n<iframe src=\"https://mihirbeg28.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<h1>React & Shopify Ecommerce Site (Norwex)     </h1>\n<br>\n<iframe src=\"https://friendly-amaranth-51833.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<h1>Bgoonz Bookmarks   </h1>\n<br>\n<iframe src=\"https://bgoonzbookmarks.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<h1>Goal Tracker  </h1>\n<br>\n<iframe src=\"https://splendid-onion-b0ec3.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>"},{"url":"/docs/content/history-api/","relativePath":"docs/content/history-api.md","relativeDir":"docs/content","base":"history-api.md","name":"history-api","frontmatter":{"title":"History API","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h1>History Api</h1>\n<h1>\n\n</h1>\n<p>The DOM <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window\">Window</a> object provides access to the browser's session history (not to be confused for <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/history\">WebExtensions history</a>) through the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/history\">history</a> object. It exposes useful methods and properties that let you navigate back and forth through the user's history, and manipulate the contents of the history stack.</p>\n<h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API#concepts_and_usage\">Concepts and usage</a></h2>\n<p>Moving backward and forward through the user's history is done using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/back\">back()</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/forward\">forward()</a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/go\">go()</a> methods.</p>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API#moving_forward_and_backward\">Moving forward and backward</a></h3>\n<p>To move backward through history:</p>\n<p>This acts exactly as if the user clicked on the <strong>Back</strong> button in their browser toolbar.</p>\n<p>Similarly, you can move forward (as if the user clicked the <strong>Forward</strong> button), like this:</p>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API#moving_to_a_specific_point_in_history\">Moving to a specific point in history</a></h3>\n<p>You can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/go\">go()</a> method to load a specific page from session history, identified by its relative position to the current page. (The current page's relative position is 0.)</p>\n<p>To move back one page (the equivalent of calling <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/back\">back()</a>):</p>\n<p>To move forward a page, just like calling <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/forward\">forward()</a>:</p>\n<p>Similarly, you can move forward 2 pages by passing 2, and so forth.</p>\n<p>Another use for the go() method is to refresh the current page by either passing 0, or by invoking it without an argument:</p>\n<p>You can determine the number of pages in the history stack by looking at the value of the length property:</p>\n<h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API#interfaces\">Interfaces</a></h2>\n<p>Allows manipulation of the browser <em>session history</em> (that is, the pages visited in the tab or frame that the current page is loaded in).</p>\n<h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API#examples\">Examples</a></h2>\n<p>The following example assigns a listener to the onpopstate property. And then illustrates some of the methods of the history object to add, replace, and move within the browser history for the current tab.</p>\n<h1>Working with the History API\n</h1>\n<p>HTML5 introduced the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/pushState\">pushState()</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\">replaceState()</a> methods for add and modifying history entries, respectively. These methods work in conjunction with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate\">onpopstate</a> event.</p>\n<h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API#adding_and_modifying_history_entries\">Adding and modifying history entries</a></h2>\n<p>Using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/pushState\">pushState()</a> changes the referrer that gets used in the HTTP header for <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a> objects created after you change the state. The referrer will be the URL of the document whose window is this at the time of creation of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a> object.</p>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API#example_of_pushstate_method\">Example of pushState() method</a></h3>\n<p>Suppose <a href=\"https://mozilla.org/foo.html\">https://mozilla.org/foo.html</a> executes the following JavaScript:</p>\n<p>This will cause the URL bar to display <a href=\"https://mozilla.org/bar.html\">https://mozilla.org/bar.html</a>, but won't cause the browser to load bar.html or even check that bar.html exists.</p>\n<p>Suppose now that the user navigates to <a href=\"https://google.com\">https://google.com</a>, then clicks the <strong>Back</strong> button. At this point, the URL bar will display <a href=\"https://mozilla.org/bar.html\">https://mozilla.org/bar.html</a> and history.state will contain the stateObj. The popstate event won't be fired because the page has been reloaded. The page itself will look like bar.html.</p>\n<p>If the user clicks <strong>Back</strong> once again, the URL will change to <a href=\"https://mozilla.org/foo.html\">https://mozilla.org/foo.html</a>, and the document will get a popstate event, this time with a null state object. Here too, going back doesn't change the document's contents from what they were in the previous step, although the document might update its contents manually upon receiving the popstate event.</p>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API#the_pushstate_method\">The pushState() method</a></h3>\n<p>pushState() takes three parameters: a <strong>state object</strong>; a <strong>title</strong> (currently ignored); and (optionally), a <strong>URL</strong>.</p>\n<p>Let's examine each of these three parameters in more detail.</p>\n<p>The state object is a JavaScript object which is associated with the new history entry created by pushState(). Whenever the user navigates to the new state, a popstate event is fired, and the state property of the event contains a copy of the history entry's state object. The state object can be anything that can be serialized. Because Firefox saves state objects to the user's disk so they can be restored after the user restarts the browser, we impose a size limit of 640k characters on the serialized representation of a state object. If you pass a state object whose serialized representation is larger than this to pushState(), the method will throw an exception. If you need more space than this, you're encouraged to use sessionStorage and/or localStorage.</p>\n<p><a href=\"https://github.com/whatwg/html/issues/2174\">All browsers but Safari currently ignore this parameter</a>, although they may use it in the future. Passing the empty string here should be safe against future changes to the method. Alternatively, you could pass a short title for the state to which you're moving.</p>\n<p>The new history entry's URL is given by this parameter. Note that the browser won't attempt to load this URL after a call to pushState(), but it might attempt to load the URL later, for instance after the user restarts the browser. The new URL does not need to be absolute; if it's relative, it's resolved relative to the current URL. The new URL must be of the same origin as the current URL; otherwise, pushState() will throw an exception. This parameter is optional; if it isn't specified, it's set to the document's current URL.</p>\n<p><strong>Note:</strong> In Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1) through Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2), the passed object is serialized using JSON. Starting in Gecko 6.0 (Firefox 6.0 / Thunderbird 6.0 / SeaMonkey 2.3), the object is serialized using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\">the structured clone algorithm</a>. This allows a wider variety of objects to be safely passed.</p>\n<p>In a sense, calling pushState() is similar to setting window.location = \"#foo\", in that both will also create and activate another history entry associated with the current document.</p>\n<p>But pushState() has a few advantages:</p>\n<ul>\n<li>The new URL can be any URL in the same origin as the current URL. In contrast, setting window.location keeps you at the same <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document\">document</a> only if you modify only the hash.</li>\n<li>You don't have to change the URL if you don't want to. In contrast, setting window.location = \"#foo\"; creates a new history entry only if the current hash isn't #foo.</li>\n<li>You can associate arbitrary data with your new history entry. With the hash-based approach, you need to encode all of the relevant data into a short string.</li>\n<li>If title is subsequently used by browsers, this data can be utilized (independent of, say, the hash).</li>\n</ul>\n<p>Note that pushState() never causes a hashchange event to be fired, even if the new URL differs from the old URL only in its hash.</p>\n<p>In other documents, it creates an element with a null namespace URI.</p>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API#the_replacestate_method\">The replaceState() method</a></h3>\n<p>history.replaceState() operates exactly like history.pushState(), except that replaceState() modifies the current history entry instead of creating a new one. Note that this doesn't prevent the creation of a new entry in the global browser history.</p>\n<p>replaceState() is particularly useful when you want to update the state object or URL of the current history entry in response to some user action.</p>\n<p><strong>Note:</strong> In Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1) through Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2), the passed object is serialized using JSON. Starting in Gecko 6.0 (Firefox 6.0 / Thunderbird 6.0 / SeaMonkey 2.3), the object is serialized using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\">the structured clone algorithm</a>. This allows a wider variety of objects to be safely passed.</p>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API#example_of_replacestate_method\">Example of replaceState() method</a></h3>\n<p>Suppose <a href=\"https://mozilla.org/foo.html\">https://mozilla.org/foo.html</a> executes the following JavaScript:</p>\n<p>The explanation of these two lines above can be found at the above section <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API#example_of_pushstate_method\"><em>Example of pushState() method</em></a> section.</p>\n<p>Next, suppose <a href=\"https://mozilla.org/bar.html\">https://mozilla.org/bar.html</a> executes the following JavaScript:</p>\n<p>This will cause the URL bar to display <a href=\"https://mozilla.org/bar2.html\">https://mozilla.org/bar2.html</a>, but won't cause the browser to load bar2.html or even check that bar2.html exists.</p>\n<p>Suppose now that the user navigates to <a href=\"https://www.microsoft.com\">https://www.microsoft.com</a>, then clicks the <strong>Back</strong> button. At this point, the URL bar will display <a href=\"https://mozilla.org/bar2.html\">https://mozilla.org/bar2.html</a>. If the user now clicks <strong>Back</strong> again, the URL bar will display <a href=\"https://mozilla.org/foo.html\">https://mozilla.org/foo.html</a>, and totally bypass bar.html.</p>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API#the_popstate_event\">The popstate event</a></h3>\n<p>A popstate event is dispatched to the window every time the active history entry changes. If the history entry being activated was created by a call to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/pushState\">pushState</a> or affected by a call to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\">replaceState</a>, the popstate event's state property contains a copy of the history entry's state object.</p>\n<p>See <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate\">WindowEventHandlers.onpopstate</a> for sample usage.</p>\n<h3><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API#reading_the_current_state\">Reading the current state</a></h3>\n<p>When your page loads, it might have a non-null state object.  This can happen, for example, if the page sets a state object (using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/pushState\">pushState()</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\">replaceState()</a>) and then the user restarts their browser. When the page reloads, the page will receive an onload event, but no popstate event. However, if you read the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/state\">history.state</a> property, you'll get back the state object you would have gotten if a popstate had fired.</p>\n<p>You can read the state of the current history entry without waiting for a popstate event using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/state\">history.state</a> property like this:</p>\n<h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API/Working_with_the_History_API#see_also\">See also</a></h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API\">History API</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API/Example\">Ajax navigation example</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/history\">window.history</a></li>\n</ul>\n<h1>Window.historyCopy to Clipboard\n\n</h1>\n<p>The Window.history read-only property returns a reference to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History\">History</a> object, which provides an interface for manipulating the browser <em>session history</em> (pages visited in the tab or frame that the current page is loaded in).</p>\n<p>See <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API\">Manipulating the browser history</a> for examples and details. In particular, that article explains security features of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/pushState\">pushState()</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\">replaceState()</a> methods that you should be aware of before using them.</p>\n<h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/history#example\">Example</a></h2>\n<h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/history#notes\">Notes</a></h2>\n<p>For top-level pages you can see the list of pages in the session history, accessible via the History object, in the browser's dropdowns next to the back and forward buttons.</p>\n<p>For security reasons the History object doesn't allow the non-privileged code to access the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/URL\">URLs</a> of other pages in the session history, but it does allow it to navigate the session history.</p>\n<p>There is no way to clear the session history or to disable the back/forward navigation from unprivileged code. The closest available solution is the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Location/replace\">location.replace()</a> method, which replaces the current item of the session history with the provided URL.</p>"},{"url":"/docs/content/archive/","relativePath":"docs/content/archive.md","relativeDir":"docs/content","base":"archive.md","name":"archive","frontmatter":{"title":"Archive","weight":1,"seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h1>Archives:</h1>\n<br>\n<br>\n<br>\n<br>\n<h1> Text Tools     </h1>\n<br>\n<iframe src=\"https://devtools42.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1> Ternary Converter   </h1>\n<br>\n<iframe src=\"https://ternary42.netlify.app/\" height=\"800px\" width=\"600px!important\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1>  Github HTML Render from link </h1>\n<br>\n<iframe src=\"https://githtmlpreview.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1> Form Builder GUI </h1>\n<br>\n<iframe  src=\"https://fourm-builder-gui.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<h1> Border Builder </h1>\n<br>\n<iframe  src=\"https://codepen.io/bgoonz/embed/zYwLVmb?default-tab=html%2Cresult\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<h2>Archives</h2>\n<br>\n<br>\n<br>\n<h1> Original Blog Site </h1>\n<br>\n<iframe src=\"https://web-dev-resource-hub.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<table>\n<thead>\n<tr>\n<th>****</th>\n<th>****</th>\n<th>****</th>\n<th>****</th>\n<th>****</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>5</td>\n</tr>\n<tr>\n<td>leonardomso/33-js-concepts<em>This repository was created with the intention of helping developers master their concepts in JavaScript. It is not a…</em>github.com</td>\n<td>Call stack - MDN Web Docs Glossary: Definitions of Web-related terms MDN<em>A call stack is a mechanism for an interpreter (like the JavaScript interpreter in a web browser) to keep track of its…</em>developer.mozilla.org</td>\n<td>Understanding Javascript Function Executions — Call Stack, Event Loop , Tasks &#x26; more<em>Web developers or Front end engineers, as that’s what we like to be called, nowadays do everything right from acting as…</em>medium.com</td>\n<td>Understanding the JavaScript call stack<em>The JavaScript engine (which is found in a hosting environment like the browser), is a single-threaded interpreter…</em>medium.freecodecamp.org Javascript: What Is The Execution Context? What Is The Call Stack?<em>What is the Execution Context in Javascript? I bet you don’t know the answer. What are the most basic components of a…</em>web.archive.org</td>\n<td>Understanding Execution Context and Execution Stack in Javascript<em>Understanding execution context and stack to become a better Javascript developer.</em>blog.bitsrc.io</td>\n</tr>\n<tr>\n<td>JavaScript data types and data structures - JavaScript MDN<em>Programming languages all have built-in data structures, but these often differ from one language to another. This…</em>developer.mozilla.org</td>\n<td>How numbers are encoded in JavaScript<em>Edit description</em>2ality.com</td>\n<td>Here is what you need to know about JavaScript’s Number type<em>Why 0.1+0.2 IS NOT equal to 0.3 and 9007199254740992 IS equal to 9007199254740993</em>medium.com</td>\n<td>What Every JavaScript Developer Should Know About Floating Point Numbers<em>After I gave my talk on JavaScript (really, I was there trying to shamelessly plug my book - Underhanded JavaScript and…</em>blog.chewxy.com</td>\n<td>The Secret Life of JavaScript Primitives<em>You may not know it but, in JavaScript, whenever you interact with string, number or boolean primitives you enter a…</em>javascriptweblog.wordpress.com</td>\n</tr>\n<tr>\n<td>JavaScript Reference and Copy Variables Hacker Noon<em>Each programming language has its own peculiarities (and JavaScript has a lot), and today I’m going to talk about…</em>hackernoon.com</td>\n<td>JavaScript Primitive vs. Reference Values<em>Summary: in this tutorial, you will learn the differences between primitive and reference values. In JavaScript, a…</em>www.javascripttutorial.net</td>\n<td>JavaScript by reference vs. by value<em>I’m looking for some good comprehensive reading material on when JavaScript passes something by value and when by…</em>stackoverflow.com</td>\n<td>JavaScript Interview Prep: Primitive vs. Reference Types<em>original article In a JavaScript interview, they might ask if you understand the difference between primitive and…</em>dev.to</td>\n<td>What you need to know about Javascript’s Implicit Coercion<em>Javascript’s implicit coercion simply refers to Javascript attempting to coerce an unexpected value type to the…</em>dev.to</td>\n</tr>\n<tr>\n<td>Javascript Coercion Explained<em>Along with some practical examples</em>hackernoon.com</td>\n<td>What exactly is Type Coercion in Javascript?<em>Let’s start with a short intro to type systems which I think will help you understand the general idea of type…</em>stackoverflow.com</td>\n<td><a href=\"https://thedevs.network/*Weak\">https://thedevs.network/*Weak</a> dynamic typing is arguably one of those things everybody likes to pick at about JavaScript. For an elegant dynamic…*thedevs.network</td>\n<td>getify/You-Dont-Know-JS<em>A book series on JavaScript. @YDKJS on twitter. Contribute to getify/You-Dont-Know-JS development by creating an…</em>github.com</td>\n<td>JavaScript — Double Equals vs. Triple Equals<em>Learn equality in JavaScript in 3 minutes</em>codeburst.io</td>\n</tr>\n<tr>\n<td>Why Use the Triple-Equals Operator in JavaScript? - Impressive Webs<em>“Determining whether two variables are equivalent is one of the most important operations in programming.” That’s…</em>www.impressivewebs.com</td>\n<td>What is the difference between == and === in JavaScript?<em>On the surface == and === appear to be functionally the same, so why bother typing an extra character? In this video…</em>www.oreilly.com</td>\n<td>Why javascript’s typeof always return “object”?<em>To add in with the others, typeof returns both objects and primitives. There are 5 primitive types in javascript…</em>stackoverflow.com</td>\n<td>Checking Types in Javascript<em>Have you ever wondered: what is the correct way to check if a Javascript variable is an Array? Do a Google search and…</em>tobyho.com</td>\n<td>How to better check data types in javascript - Webbjocke<em>To check what data type something has in javascript is not always the easiest. The language itself provides an operator…</em>webbjocke.com</td>\n</tr>\n<tr>\n<td>A JavaScript Fundamentals Cheat Sheet: Scope, Context, and “this”<em>Scope Scope refers to where a variable can be accessed within a program. Some variables can be accessed from anywhere…</em>dev.to</td>\n<td>Quick Tip: Function Expressions vs Function Declarations - SitePoint<em>This article was peer reviewed by Jeff Mott. Thanks to all of SitePoint’s peer reviewers for making SitePoint content…</em>www.sitepoint.com</td>\n<td>JavaScript Function — Declaration vs Expression<em>Functions are considered as First Class citizen in JavaScript and it is really important to be clear with the concept…</em>medium.com</td>\n<td>Function Declarations vs. Function Expressions<em>What is Function Statement/Declarations in JavaScript?</em>medium.com</td>\n<td>Function Declarations vs. Function Expressions<em>Lets start with a short quiz. What is alerted in each case?: Question 1: Question 2: Question 3: Question 4: If you…</em>javascriptweblog.wordpress.com</td>\n</tr>\n<tr>\n<td>16. Modules<em>Edit description</em>exploringjs.com</td>\n<td>ES modules: A cartoon deep-dive - Mozilla Hacks - the Web developer blog<em>ES modules bring an official, standardized module system to JavaScript. With the release of Firefox 60 in May, all…</em>hacks.mozilla.org</td>\n<td>Understanding ES6 Modules - SitePoint<em>Almost every language has a concept of modules - a way to include functionality declared in one file within another…</em>www.sitepoint.com</td>\n<td>An overview of ES6 Modules in JavaScript<em>Introduction Until recently if you wanted to take full advantage of modules in JavaScript you needed to make use of…</em>blog.cloud66.com</td>\n<td>ES6 Modules in Depth<em>Welcome back to ES6 - “Oh, good. It’s not another article about Unicode” - in Depth series. If you’ve never been around…</em>ponyfoo.com</td>\n</tr>\n<tr>\n<td>How JavaScript works: Event loop and the rise of Async programming + 5 ways to better coding with…<em>Welcome to post # 4 of the series dedicated to exploring JavaScript and its building components. In the process of…</em>blog.sessionstack.com</td>\n<td>Tasks, microtasks, queues and schedules<em>Edit description</em>jakearchibald.com</td>\n<td>Visualising the JavaScript Event Loop with a Pizza Restaurant analogy<em>Consider a pizza restaurant. There are two types of orders that we currently have from a single customer - one is an…</em>dev.to</td>\n<td>✨♻️ JavaScript Visualized: Event Loop<em>Oh boi the event loop. It’s one of those things that every JavaScript developer has to deal with in one way or another…</em>dev.to</td>\n<td>Scheduling: setTimeout and setInterval<em>Edit description</em>javascript.info</td>\n</tr>\n<tr>\n<td>Understanding How the Chrome V8 Engine Translates JavaScript into Machine Code<em>Before diving deep into the core of Chrome’s V8, first, let’s get our fundamentals down. All of our systems consist of…</em>medium.freecodecamp.org</td>\n<td>Understanding V8’s Bytecode<em>V8 is Google’s open source JavaScript engine. Chrome, Node.js, and many other applications use V8. This article…</em>medium.com</td>\n<td>A Brief History of Google’s V8 JavaScript Engine<em>Javascript has a reputation in developer circles as a terrible language. It’s classless, loosely typed, and plagued by…</em>www.mediacurrent.com</td>\n<td>JavaScript essentials: why you should know how the engine works<em>This article is also available in Spanish.</em>medium.freecodecamp.org</td>\n<td>JavaScript engine fundamentals: Shapes and Inline Caches<em>This article describes some key fundamentals that are common to all JavaScript engines - and not just V8, the engine…</em>mathiasbynens.be</td>\n</tr>\n<tr>\n<td>JavaScript engine fundamentals: optimizing prototypes<em>This article describes some key fundamentals that are common to all JavaScript engines - and not just V8, the engine…</em>mathiasbynens.be</td>\n<td>Elements kinds in V8<em>Note: If you prefer watching a presentation over reading articles, then enjoy the video below! JavaScript objects can…</em>v8.dev</td>\n<td>Programming with JS: Bitwise Operations<em>In this series of articles we take a look at different Computer Science topics from the prism of JavaScript. We’ve…</em>hackernoon.com</td>\n<td>Using JavaScript’s Bitwise Operators in Real Life<em>Let’s pretend we’re machine code programmers!</em>codeburst.io</td>\n<td>JavaScript Bitwise Operators - w3resource<em>Bitwise operators perform an operation on the bitwise (0,1) representation of their arguments, rather than as decimal…</em>www.w3resource.com</td>\n</tr>\n<tr>\n<td>JavaScript DOM Tutorial with Example<em>Details JavaScript can access all the elements in a webpage making use of Document Object Model (DOM). In fact, the web…</em>www.guru99.com</td>\n<td>What is the DOM?<em>A reader recently wrote in asking me what the DOM was. They said they’ve heard it mentioned and alluded to, but aren’t…</em>css-tricks.com</td>\n<td>Traversing the DOM with JavaScript<em>A good JavaScript developer needs to know how to traverse the DOM-it’s the act of selecting an element from another…</em>zellwk.com</td>\n<td>DOM tree<em>The backbone of an HTML document is tags. According to the Document Object Model (DOM), every HTML tag is an object…</em>javascript.info</td>\n<td>How to traverse the DOM in JavaScript<em>Learn how to navigate your way through the DOM tree.</em>javascript.plainenglish.io</td>\n</tr>\n<tr>\n<td>A Vanilla JS Guide On Mastering the DOM<em>Note: The contents of this post are intended to be introductory and does not include use of any libraries like jQuery…</em>dev.to</td>\n<td>How To Use Classes in JavaScript DigitalOcean<em>JavaScript is a prototype-based language, and every object in JavaScript has a hidden internal property called…</em>www.digitalocean.com</td>\n<td>Javascript Classes — Under The Hood<em>Javascript classes are nothing but a syntactic sugar over existing prototype based inheritance and constructor…</em>medium.com</td>\n<td>ES6 Classes - JavaScript January<em>Object-Oriented Programming (OOP) can be a great way to organize your projects. Introduced with ES6, the javascript…</em>www.javascriptjanuary.com</td>\n<td>Practical Ways to Write Better JavaScript<em>Solid methods of improving your JS. Tagged with javascript, webdev, beginners, react.</em>dev.to</td>\n</tr>\n<tr>\n<td>Better JavaScript with ES6, Pt. II: A Deep Dive into Classes<em>Out with the Old, In with the new Let’s be clear about one thing from the start: Under the hood, ES6 classes are not…</em>scotch.io</td>\n<td>Understand the Factory Design Pattern in plain javascript<em>The simplest way to understand Factory Design Pattern</em>medium.com</td>\n<td>Factory Functions in JavaScript Aten Design Group<em>As we move from an age of jQuery plugins and script drop-ins to a world of CommonJS and modular architectures it’s…</em>atendesigngroup.com</td>\n<td>The Factory Pattern in JS ES6<em>I’m trying to get the most out of all the new things in ES6 (ES2015). And I’m writing a new library where I need a…</em>medium.com</td>\n<td>Class vs Factory function: exploring the way forward<em>ECMAScript 2015 (aka ES6) comes with the class syntax, so now we have two competing patterns for creating objects. In…</em>medium.freecodecamp.org</td>\n</tr>\n<tr>\n<td>Prototype in Javascript Codementor<em>By default every function has a property name as prototype which is EMPTY ( by default). We can add properties and…</em>www.codementor.io</td>\n<td>Prototypes in JavaScript<em>In this post, we will discuss what are prototypes in JavaScript, how they help JavaScript in achieving the concepts of…</em>betterprogramming.pub</td>\n<td>Prototype in JavaScript: it’s quirky, but here’s how it works<em>The following four lines are enough to confuse most JavaScript developers:</em>medium.freecodecamp.org</td>\n<td>Understanding JavaScript: Prototype and Inheritance<em>Due to the amazing quantity of libraries, tools and all kinds of things that make your development easier, a lot of…</em>hackernoon.com</td>\n<td>Understanding Classes (ES5) and Prototypal Inheritance in JavaScript<em>In a nutshell the above snippet creates a Person class that can have multiple instances. By convention functional…</em>dev.to</td>\n</tr>\n<tr>\n<td>_Master JavaScript Prototypes &#x26; _Inheritance__\\ Inheritancecodeburst.io</td>\n<td>JavaScript’s Prototypal Inheritance Explained Using CSS<em>Prototypal inheritance is arguably the least understood aspect of JavaScript. Well the good news is that if you…</em>medium.freecodecamp.org</td>\n<td>Demystifying ES6 Classes And Prototypal Inheritance<em>In the early history of the JavaScript language, a cloud of animosity formed over the lack of a proper syntax for…</em>scotch.io</td>\n<td>Intro To Prototypal Inheritance - JS<em>In this article I will try to give an introduction to protypal inheritance. As an “optional” pre-requisite, you can…</em>dev.to</td>\n<td>Let’s Build Prototypal Inheritance in JS<em>The idea for this post is pretty simple. I want to some extent build and with that, illustrate how prototypes work in…</em>dev.to</td>\n</tr>\n<tr>\n<td>Understanding Prototypal Inheritance In JavaScript<em>What Is Object-oriented Programming (OOP) Classical vs Prototypal Inheritance The Prototype Object And The Prototype…</em>dev.to</td>\n<td>Object.create() - JavaScript MDN<em>The Object.create() method creates a new object, using an existing object as the prototype of the newly created object…</em>developer.mozilla.org</td>\n<td>Object.assign() - JavaScript MDN<em>The Object.assign() method copies all enumerable own properties from one or more source objects to a target object. It…</em>developer.mozilla.org</td>\n<td>Object.create in JavaScript<em>The Object.create method is one of the methods to create a new object in JavaScript.</em>medium.com</td>\n<td>Javascript Objects A New Way to Create Objects HTML Goodies<em>There are a lot of ways to create Objects in JavaScript, perhaps even more to integrate inheritance into them. Just…</em>www.htmlgoodies.com</td>\n</tr>\n<tr>\n<td>JavaScript Object Creation: Patterns and Best Practices - SitePoint<em>Jeff Mott guides you through a step-by-step approach to JavaScript object creation - from object literals to factory…</em>www.sitepoint.com</td>\n<td>Dealing With Objects in JavaScript With Object.assign, Object.keys and hasOwnProperty …<em>This post is a sort of grab bag to help you explore a few very useful methods to help you manage your objects in…</em>alligator.io</td>\n<td>Copying Objects in JavaScript DigitalOcean<em>Objects are the fundamental blocks of JavaScript. An object is a collection of properties, and a property is an…</em>scotch.io</td>\n<td>JavaScript: Object.assign()<em>Veja nesse artigo como utilizar o Object.assign() do ECMAScript 6</em>codeburst.io</td>\n<td>How to deep clone a JavaScript object<em>Copying objects in JavaScript can be tricky. Some ways perform a shallow copy, which is the default behavior in most of…</em>flaviocopes.com</td>\n</tr>\n<tr>\n<td>How to Use Map, Filter, and Reduce in JavaScript<em>Functional programming has been making quite a splash in the development world these days. And for good reason…</em>code.tutsplus.com</td>\n<td>JavaScript — Learn to Chain Map, Filter, and Reduce<em>Learn how to chain map, filter, and reduce in JavaScript</em>codeburst.io</td>\n<td>Understanding map, filter and reduce in Javascript<em>When working on Javascript projects you inevitably come across situations where you have to do some data manipulation…</em>hackernoon.com</td>\n<td>Functional Programming in JS: map, filter, reduce (Pt. 5)<em>Note: This is part of the “Javascript and Functional Programming” series on learning functional programming techniques…</em>hackernoon.com</td>\n<td>JavaScript: Map, Filter, Reduce<em>JavaScript’s built-in map, filter, and reduce array methods are invaluable to a modern JavaScript developer. First…</em>wsvincent.com</td>\n</tr>\n<tr>\n<td>A simple guide to help you understand closures in JavaScript<em>Closures in JavaScript are one of those concepts that many struggle to get their heads around. In the following…</em>medium.freecodecamp.org</td>\n<td>Understanding JavaScript Closures: A Practical Approach<em>Learning a new language involves a series of steps, whereas its mastery is a product of patience, practice, mistakes…</em>scotch.io</td>\n<td>Understanding JavaScript: Closures<em>Why learn JavaScript in depth?</em>hackernoon.com</td>\n<td>How to use JavaScript closures with confidence<em>Using closures will be a piece of (chocolate) cake</em>hackernoon.com</td>\n<td>JavaScript Closures by Example<em>At some point you may have run into a problem when executing functions from within a for loop. The first time it…</em>howchoo.com</td>\n</tr>\n<tr>\n<td>Higher-Order Functions :: Eloquent JavaScript<em>Tzu-li and Tzu-ssu were boasting about the size of their latest programs. ‘Two-hundred thousand lines,’ said Tzu-li…</em>eloquentjavascript.net</td>\n<td>Higher-Order Functions in JavaScript - SitePoint<em>Continuing his look at functional programming in JavaScript, M. David Green examines higher-order functions and how…</em>www.sitepoint.com</td>\n<td>Higher Order Functions: Using Filter, Map and Reduce for More Maintainable Code<em>Higher order functions can help you to step up your JavaScript game by making your code more declarative. That is…</em>medium.freecodecamp.org</td>\n<td>First-class and Higher Order Functions: Effective Functional JavaScript<em>Functions: the killer JavaScript feature we never talk about.</em>hackernoon.com</td>\n<td>Higher Order Functions in JavaScript<em>Higher-order functions can be intimidating at first, but they’re not that hard to learn. A higher-order function is…</em>www.lullabot.com</td>\n</tr>\n<tr>\n<td>ES6 Promises: Patterns and Anti-Patterns<em>When I first got started with NodeJS a few years ago, I was mortified by what is now affectionately known as \"callback…</em>medium.com</td>\n<td>A Simple Guide to ES6 Promises<em>The woods are lovely, dark and deep. But I have promises to keep, and miles to go before I sleep. — Robert Frost</em>codeburst.io</td>\n<td>The ES6 Promises<em>A very helpful feature in ES6</em>codeburst.io</td>\n<td>ES6 Promises in Depth<em>Promises are a very involved paradigm, so we’ll take it slow. Here’s a table of contents with the topics we’ll cover in…</em>ponyfoo.com</td>\n<td>Javascript Promises: An In-Depth Approach<em>“Write down the syntax for promises on this sheet of paper”, is enough to give nightmares to a lot of junior and even…</em>codeburst.io</td>\n</tr>\n<tr>\n<td>Promises - JavaScript concepts<em>This is part of a series where I try to explain through each of 33 JS Concepts. This part corresponds to Promises…</em>dev.to</td>\n<td>Javascript Promise 101<em>Knowing how Promise works in javascript will boost your development skill exponentially. Here I will share: I promise…</em>dev.to</td>\n<td>Simplify JavaScript Promises<em>I love promises. Not from people, but from JavaScript. Tweet Quote I love promises. Not from people, but from…</em>dev.to</td>\n<td>The Lowdown on Promises<em>A quick and concise guide on how Promises work in JavaScript</em>medium.com</td>\n<td>⭐️🎀 JavaScript Visualized: Promises &#x26; Async/Await<em>Ever had to deal with JS code that just… didn’t run the way you expected it to? Maybe it seemed like functions got…</em>dev.to</td>\n</tr>\n<tr>\n<td>How to escape async/await hell<em>async/await freed us from callback hell, but people have started abusing it — leading to the birth of async/await hell.</em>medium.freecodecamp.org</td>\n<td>Understanding JavaScript’s async await<em>Let’s suppose we had code like the following. Here I’m wrapping an HTTP request in a Promise. The promise fulfills with…</em>ponyfoo.com</td>\n<td>JavaScript Async/Await: Serial, Parallel and Complex Flow - TechBrij<em>If you have experience on ASP.NET MVC then probably you are familiar with async/await keywords in C#. The same thing is…</em>techbrij.com</td>\n<td>From JavaScript Promises to Async/Await: why bother?<em>In this tutorial, we will cover why we need async/await when we could achieve the same fit with JavaScript Promises, to…</em>blog.pusher.com</td>\n<td>Flow Control in Modern JS: Callbacks to Promises to Async/Await - SitePoint<em>JavaScript is regularly claimed to be asynchronous. What does that mean? How does it affect development? How has the…</em>www.sitepoint.com</td>\n</tr>\n<tr>\n<td>Time Complexity Analysis in JavaScript<em>An algorithm is a self-contained step-by-step set of instructions to solve a problem. It takes time for these steps to…</em>www.jenniferbland.com</td>\n<td>Algorithms in plain English: time complexity and Big-O notation<em>Every good developer has time on their mind. They want to give their users more of it, so they can do all those things…</em>medium.freecodecamp.org</td>\n<td>An Introduction to Big O Notation<em>Big O notation is a big topic, and its universal importance stems from the fact that it describes the efficiency of…</em>dev.to</td>\n<td>[Crizstian/data-structure-and-algorithms-with-ES6<em>Num Type Exercises Description 10.- Graph Data Structure 2 A graph consists of a set of vertices and a set of edges. A…</em>github.com](<a href=\"https://github.com/Crizstian/data-structure-and-algorithms-with-ES6\">https://github.com/Crizstian/data-structure-and-algorithms-with-ES6</a> \"<a href=\"https://github.com/Crizs\">https://github.com/Crizs</a></td>\n<td></td>\n</tr>\n</tbody>\n</table>"},{"url":"/docs/audio/dfft/","relativePath":"docs/audio/dfft.md","relativeDir":"docs/audio","base":"dfft.md","name":"dfft","frontmatter":{"title":"Discrete Fast Fourier Transform","weight":0,"excerpt":"Fast Fourier Transform","seo":{"title":"fft","description":"The discrete Fourier transform operates on sampled data,\nin contrast to the standard Fourier transform which is\ndefined for continuous functions.","robots":[],"extra":[{"name":"og:description","value":"The discrete Fourier transform operates on sampled data,\nin contrast to the standard Fourier transform which is\ndefined for continuous functions.","keyName":"property","relativeUrl":false},{"name":"og:image","value":"images/fft.jpg","keyName":"property","relativeUrl":true},{"name":"og:title","value":"Fast Fourier Transform","keyName":"property","relativeUrl":false}],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>Frequency and the fast Fourier transform</h1>\n<blockquote>\n<p>If you want to find the secrets of the universe, think in terms of energy,\nfrequency and vibration.</p>\n<p>— Nikola Tesla</p>\n</blockquote>\n<p><em>This chapter was written in collaboration with SW's father, PW van der Walt.</em></p>\n<h2>Introducing frequency</h2>\n<p>We'll start by setting up some plotting styles and importing the usual\nsuspects:</p>\n<pre><code class=\"language-python\"># Make plots appear inline, set custom plotting style\n%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.style.use('style/elegant.mplstyle')\n</code></pre>\n<pre><code class=\"language-python\">import numpy as np\n</code></pre>\n<p>The discrete<sup id=\"fnref-discrete\"><a href=\"#fn-discrete\" class=\"footnote-ref\">discrete</a></sup> Fourier transform (DFT) is a mathematical technique\nto convert temporal or spatial data into <em>frequency domain</em> data.\n<em>Frequency</em> is a familiar concept, due to its colloquial occurrence in\nthe English language: the lowest notes your headphones can rumble out\nare around 20 Hertz, whereas middle C on a piano lies around 261.6\nHertz. Hertz (Hz), or oscillations per second, in this case literally\nrefers to the number of times per second at which the membrane inside\nthe headphone moves to-and-fro. That, in turn, creates compressed\npulses of air which, upon arrival at your eardrum, induces a vibration\nat the same frequency. So, if you take a simple periodic function, $\\sin(10 \\times 2 \\pi t)$, you can view it as a wave:</p>\n<pre><code class=\"language-python\">f = 10  # Frequency, in cycles per second, or Hertz\nf_s = 100  # Sampling rate, or number of measurements per second\n\nt = np.linspace(0, 2, 2 * f_s, endpoint=False)\nx = np.sin(f * 2 * np.pi * t)\n\nfig, ax = plt.subplots()\nax.plot(t, x)\nax.set_xlabel('Time [s]')\nax.set_ylabel('Signal amplitude');\n</code></pre>\n<!-- caption text=\"A simple periodic function in time\" -->\n<p>Or you can equivalently think of it as a repeating signal of\n<em>frequency</em> 10 Hertz (it repeats once every $1/10$ seconds—a length of\ntime we call its <em>period</em>). Although we naturally associate frequency\nwith time, it can equally well be applied to space. E.g., a\nphoto of a textile patterns exhibits high <em>spatial frequency</em>, whereas\nthe sky or other smooth objects have low spatial frequency.</p>\n<p>Let us now examine our sinusoid through application of the discrete Fourier\ntransform:</p>\n<pre><code class=\"language-python\">from scipy import fftpack\n\nX = fftpack.fft(x)\nfreqs = fftpack.fftfreq(len(x)) * f_s\n\nfig, ax = plt.subplots()\n\nax.stem(freqs, np.abs(X))\nax.set_xlabel('Frequency in Hertz [Hz]')\nax.set_ylabel('Frequency Domain (Spectrum) Magnitude')\nax.set_xlim(-f_s / 2, f_s / 2)\nax.set_ylim(-5, 110)\n</code></pre>\n<!-- caption text=\"Frequencies that make up our periodic signal above\" -->\n<p>We see that the output of the FFT is a one-dimensional array of the\nsame shape as the input, containing complex values. All values are\nzero, except for two entries. Traditionally, we visualize the\nmagnitude of the result as a <em>stem plot</em>, in which the height of each\nstem corresponds to the underlying value.</p>\n<p>(We explain why you see positive and negative frequencies later on\nin the sidebox titled \"Discrete Fourier transforms\". You may also\nrefer to that section for a more in-depth overview of the underlying\nmathematics.)</p>\n<p>The Fourier transform takes us from the <em>time</em> to the <em>frequency</em>\ndomain, and this turns out to have a massive number of applications.\nThe <em>fast Fourier transform</em> is an algorithm for computing the\ndiscrete Fourier transform; it achieves its high speed by storing and\nre-using results of computations as it progresses.</p>\n<p>In this chapter, we examine a few applications of the discrete Fourier\ntransform to demonstrate that the FFT can be applied to\nmultidimensional data (not just 1D measurements) to achieve a variety\nof goals.</p>\n<h2>Illustration: a birdsong spectrogram</h2>\n<p>Let's start with one of the most common applications, converting a sound signal (consisting of variations of air pressure over time) to a <em>spectrogram</em>.\nYou might have seen spectrograms on your music player's equalizer view, or even on an old-school stereo.</p>\n<p><img src=\"../images/sergey_gerasimuk_numark-eq-2600-IMG_0236.JPG\" alt=\"The Numark EQ2600 Stereo Equalizer; image used with permission from the author, Sergey Gerasimuk. Source: http://sgerasimuk.blogspot.com/2014/06/numark-eq-2600-10-band-stereo-graphic.html\"></p>\n<p>Listen to the following snippet of nightingale birdsong (released under CC BY 4.0 at\n<a href=\"http://www.orangefreesounds.com/nightingale-sound/\">http://www.orangefreesounds.com/nightingale-sound/</a>):</p>\n<pre><code class=\"language-python\">from IPython.display import Audio\nAudio('data/nightingale.wav')\n</code></pre>\n<p>If you are reading the paper version of this book, you'll have to use\nyour imagination! It goes something like this:\nchee-chee-woorrrr-hee-hee cheet-wheet-hoorrr-chi\nrrr-whi-wheo-wheo-wheo-wheo-wheo-wheo.</p>\n<p>Since we realise that not everyone is fluent in bird-speak, perhaps\nit's best if we visualize the measurements—better known as \"the\nsignal\"—instead.</p>\n<p>We load the audio file, which gives us\nthe sampling rate (number of measurements per second) as well as audio\ndata as an <code>(N, 2)</code> array—two columns because this is a stereo\nrecording.</p>\n<pre><code class=\"language-python\">from scipy.io import wavfile\n\nrate, audio = wavfile.read('data/nightingale.wav')\n</code></pre>\n<p>We convert to mono by averaging the left and right channels.</p>\n<pre><code class=\"language-python\">audio = np.mean(audio, axis=1)\n</code></pre>\n<p>Then, calculate the length of the snippet and plot the audio.</p>\n<pre><code class=\"language-python\">N = audio.shape[0]\nL = N / rate\n\nprint(f'Audio length: {L:.2f} seconds')\n\nf, ax = plt.subplots()\nax.plot(np.arange(N) / rate, audio)\nax.set_xlabel('Time [s]')\nax.set_ylabel('Amplitude [unknown]');\n</code></pre>\n<!-- caption text=\"Audio waveform plot of birdsong\" -->\n<p>Well, that's not very satisfying, is it? If I sent this voltage to a\nspeaker, I might hear a bird chirping, but I can't very well imagine\nhow it would sound like in my head. Is there a better way of <em>seeing</em>\nwhat is going on?</p>\n<p>There is, and it is called the discrete Fourier transform, where\ndiscrete refers to the recording consisting of time-spaced sound\nmeasurements, in contrast to a continual recording as, e.g., on\nmagnetic tape (remember casettes?). The discrete Fourier\ntransform is often computed using the <em>fast Fourier transform</em> (FFT)\nalgorithm, a name informally used to refer to the DFT itself. The\nDFT tells us which frequencies or \"notes\" to expect in our signal.</p>\n<p>Of course, a bird sings many notes throughout the song, so we'd also\nlike to know <em>when</em> each note occurs. The Fourier transform takes a\nsignal in the time domain (i.e., a set of measurements over time) and\nturns it into a spectrum—a set of frequencies with corresponding\n(complex<sup id=\"fnref-complex\"><a href=\"#fn-complex\" class=\"footnote-ref\">complex</a></sup>) values. The spectrum does not contain any information about\ntime! <sup id=\"fnref-time\"><a href=\"#fn-time\" class=\"footnote-ref\">time</a></sup></p>\n<p>So, to find both the frequencies and the time at which they were sung,\nwe'll need to be somewhat clever. Our strategy is as follows:\ntake the audio signal, split it into small, overlapping slices, and\napply the Fourier transform to each (a technique known as the Short\nTime Fourier Transform).</p>\n<p>We'll split the signal into slices of 1024 samples—that's about 0.02\nseconds of audio. Why we choose 1024 and not 1000 we'll explain in a\nsecond when we examine performance. The slices will overlap by 100\nsamples as shown here:</p>\n<p><img src=\"../figures/generated/sliding_window.png\" alt=\"A sliding window operation\"></p>\n<p>Start by chopping up the signal into slices of 1024 samples, each\nslice overlapping the previous by 100 samples. The resulting <code>slices</code>\nobject contains one slice per row.</p>\n<pre><code class=\"language-python\">from skimage import util\n\nM = 1024\n\nslices = util.view_as_windows(audio, window_shape=(M,), step=100)\nprint(f'Audio shape: {audio.shape}, Sliced audio shape: {slices.shape}')\n</code></pre>\n<p>Generate a windowing function (see the section on windowing for a\ndiscussion of the underlying assumptions and interpretations of each)\nand multiply it with the signal:</p>\n<pre><code class=\"language-python\">win = np.hanning(M + 1)[:-1]\nslices = slices * win\n</code></pre>\n<p>It's more convenient to have one slice per column, so we take the transpose:</p>\n<pre><code class=\"language-python\">slices = slices.T\nprint('Shape of `slices`:', slices.shape)\n</code></pre>\n<p>For each slice, calculate the discrete Fourier transform. The DFT\nreturns both positive and negative frequencies (more on that in\n\"Frequencies and their ordering\"), so we slice out the positive M / 2\nfrequencies for now.</p>\n<pre><code class=\"language-python\">spectrum = np.fft.fft(slices, axis=0)[:M // 2 + 1:-1]\nspectrum = np.abs(spectrum)\n</code></pre>\n<p>(As a quick aside, you'll note that we use <code>scipy.fftpack.fft</code> and\n<code>np.fft</code> interchangeably. NumPy provides basic FFT functionality,\nwhich SciPy extends further, but both include an <code>fft</code> function, based\non the Fortran FFTPACK.)</p>\n<p>The spectrum can contain both very large and very small values.\nTaking the log compresses the range significantly.</p>\n<p>Here we do a log plot of the ratio of the signal divided by the maximum signal.\nThe specific unit used for the ratio is the decibel, $20\nlog_{10}\\left(\\mathrm{amplitude ratio}\\right)$.</p>\n<pre><code class=\"language-python\">f, ax = plt.subplots(figsize=(4.8, 2.4))\n\nS = np.abs(spectrum)\nS = 20 * np.log10(S / np.max(S))\n\nax.imshow(S, origin='lower', cmap='viridis',\n          extent=(0, L, 0, rate / 2 / 1000))\nax.axis('tight')\nax.set_ylabel('Frequency [kHz]')\nax.set_xlabel('Time [s]');\n</code></pre>\n<!-- caption text=\"Birdsong spectrogram\" -->\n<p>Much better! We can now see the frequencies vary over time, and it\ncorresponds to the way the audio sounds. See if you can match my\nearlier description: chee-chee-woorrrr-hee-hee cheet-wheet-hoorrr-chi\nrrr-whi-wheo-wheo-wheo-wheo-wheo-wheo (I didn't transcribe the section\nfrom 3 to 5 seconds—that's another bird).</p>\n<p>SciPy already includes an implementation of this\nprocedure as <code>scipy.signal.spectrogram</code>, which can be invoked as\nfollows:</p>\n<pre><code class=\"language-python\">from scipy import signal\n\nfreqs, times, Sx = signal.spectrogram(audio, fs=rate, window='hanning',\n                                      nperseg=1024, noverlap=M - 100,\n                                      detrend=False, scaling='spectrum')\n\nf, ax = plt.subplots(figsize=(4.8, 2.4))\nax.pcolormesh(times, freqs / 1000, 10 * np.log10(Sx), cmap='viridis')\nax.set_ylabel('Frequency [kHz]')\nax.set_xlabel('Time [s]');\n</code></pre>\n<!-- caption text=\"SciPy built-in rendition of birdsong spectrogram\" -->\n<p>The only differences are that SciPy returns the spectrum magnitude\nsquared (which turns measured voltage into measured energy), and\nmultiplies it by some normalization factors<sup id=\"fnref-scaling\"><a href=\"#fn-scaling\" class=\"footnote-ref\">scaling</a></sup>.</p>\n<h2>History</h2>\n<p>Tracing the exact origins of the Fourier transform is tricky. Some\nrelated procedures go as far back as Babylonian times, but it was the\nhot topics of calculating asteroid orbits and solving the heat (flow)\nequation that led to several breakthroughs in the early 1800s. Whom\nexactly among Clairaut, Lagrange, Euler, Gauss and D'Alembert we\nshould thank is not exactly clear, but Gauss was the first to describe\nthe fast Fourier transform (an algorithm for computing the discrete\nFourier transform, popularized by Cooley and Tukey in 1965). Joseph\nFourier, after whom the transform is named, first claimed that\n<em>arbitrary</em> periodic <sup id=\"fnref-periodic\"><a href=\"#fn-periodic\" class=\"footnote-ref\">periodic</a></sup> functions can be expressed as a sum of\ntrigonometric functions.</p>\n<h2>Implementation</h2>\n<p>The discrete Fourier transform functionality in SciPy lives in the\n`scipy.fftpack<code></code> module. Among other things, it provides the\nfollowing DFT-related functionality:</p>\n<ul>\n<li><code>fft</code>, <code>fft2</code>, <code>fftn</code>: Compute the discrete Fourier transform using\nthe Fast Fourier Transform algorithm in 1, 2, or <code>n</code> dimensions.</li>\n<li><code>ifft</code>, <code>ifft2</code>, <code>ifftn</code>: Compute the inverse of the DFT</li>\n<li><code>dct</code>, <code>idct</code>, <code>dst</code>, <code>idst</code>: Compute the cosine and sine transforms, and their inverses.</li>\n<li><code>fftshift</code>, <code>ifftshift</code>: Shift the zero-frequency component to the center of the spectrum and back, respectively (more about that soon).</li>\n<li><code>fftfreq</code>: Return the discrete Fourier transform sample frequencies.</li>\n<li><code>rfft</code>: Compute the DFT of a real sequence, exploiting the symmetry of the resulting spectrum for increased performance. Also used by <code>fft</code> internally when applicable.</li>\n</ul>\n<p>This is complemented by the following functions in NumPy:</p>\n<ul>\n<li><code>np.hanning</code>, <code>np.hamming</code>, <code>np.bartlett</code>, <code>np.blackman</code>,\n<code>np.kaiser</code>: Tapered windowing functions.</li>\n</ul>\n<p>It is also used to perform fast convolutions of large inputs by\n<code>scipy.signal.fftconvolve</code>.</p>\n<p>SciPy wraps the Fortran FFTPACK library—it is not the fastest out\nthere, but unlike packages such as FFTW, it has a permissive free\nsoftware license.</p>\n<h2>Choosing the length of the discrete Fourier transform (DFT)</h2>\n<p>A naive calculation of the DFT takes $\\mathcal{O}\\left(N^2\\right)$ operations <sup id=\"fnref-big_o\"><a href=\"#fn-big_o\" class=\"footnote-ref\">big_o</a></sup>.\nHow come? Well, you have $N$\n(complex) sinusoids of different frequencies ($2 \\pi f \\times 0, 2 \\pi f \\times\n1, 2 \\pi f \\times 3, ..., 2 \\pi f \\times (N - 1)$), and you want to see how\nstrongly your signal corresponds to each. Starting with the first,\nyou take the dot product with the signal (which, in itself, entails $N$\nmultiplication operations). Repeating this operation $N$ times, once\nfor each sinusoid, then gives $N^2$ operations.</p>\n<p>Now, contrast that with the fast Fourier transform, which is $\\mathcal{O}\\left(N \\log N\\right)$ in\nthe ideal case due to the clever re-use of\ncalculations—a great improvement! However, the classical Cooley-Tukey\nalgorithm implemented in FFTPACK (and used by SciPy) recursively breaks up the transform\ninto smaller (prime-sized) pieces and only shows this improvement for\n\"smooth\" input lengths (an input length is considered smooth when its\nlargest prime factor is small). For large prime-sized pieces, the\nBluestein or Rader algorithms can be used in conjunction with the\nCooley-Tukey algorithm, but this optimization is not implemented in\nFFTPACK.<sup id=\"fnref-fast\"><a href=\"#fn-fast\" class=\"footnote-ref\">fast</a></sup></p>\n<p>Let us illustrate:</p>\n<pre><code class=\"language-python\">import time\n\nfrom scipy import fftpack\nfrom sympy import factorint\n\nK = 1000\nlengths = range(250, 260)\n\n# Calculate the smoothness for all input lengths\nsmoothness = [max(factorint(i).keys()) for i in lengths]\n\n\nexec_times = []\nfor i in lengths:\n    z = np.random.random(i)\n\n    # For each input length i, execute the FFT K times\n    # and store the execution time\n\n    times = []\n    for k in range(K):\n        tic = time.monotonic()\n        fftpack.fft(z)\n        toc = time.monotonic()\n        times.append(toc - tic)\n\n    # For each input length, remember the *minimum* execution time\n    exec_times.append(min(times))\n\n\nf, (ax0, ax1) = plt.subplots(2, 1, sharex=True)\nax0.stem(lengths, np.array(exec_times) * 10**6)\nax0.set_ylabel('Execution time (µs)')\n\nax1.stem(lengths, smoothness)\nax1.set_ylabel('Smoothness of input length\\n(lower is better)')\nax1.set_xlabel('Length of input');\n</code></pre>\n<!-- caption text=\"FFT execution time vs smoothness for different input lengths\" -->\n<p>The intuition is that, for smooth input lengths, the FFT can be broken up\ninto many small pieces. After performing the FFT on the first piece,\nthose results can be reused in subsequent computations. This explains\nwhy we chose a length of 1024 for our audio slices earlier—it has a\nsmoothness of only 2, resulting in the optimal \"radix-2 Cooley-Tukey\"\nalgorithm, which computes the FFT using only $(N/2) \\log_2 N = 5120$ complex\nmultiplications, instead of $N^2 = 1048576$. Choosing $N = 2^m$\nalways ensures a maximally smooth $N$ (and, thus, the fastest FFT).</p>\n<h2>More discrete Fourier transform concepts</h2>\n<p>Next, we present a couple of common concepts worth knowing before\noperating heavy Fourier transform machinery, whereafter we tackle\nanother real-world problem: analyzing target detection in radar data.</p>\n<h3>Frequencies and their ordering</h3>\n<p>For historical reasons, most implementations return an array where\nfrequencies vary from low-to-high-to-low (see the box \"Discrete\nFourier transforms\" for further explanation of frequencies). E.g., when we do the real\nFourier transform of a signal of all ones, an input that has no\nvariation and therefore only has the slowest, constant Fourier\ncomponent (also known as the \"DC\" or Direct Current component—just\nelectronics jargon for \"mean of the signal\"), we see this DC component\nappearing as the first entry:</p>\n<pre><code class=\"language-python\">from scipy import fftpack\nN = 10\n\nfftpack.fft(np.ones(N))  # The first component is np.mean(x) * N\n</code></pre>\n<p>When we try the FFT on a rapidly changing signal, we see a high\nfrequency component appear:</p>\n<pre><code class=\"language-python\">z = np.ones(10)\nz[::2] = -1\n\nprint(f'Applying FFT to {z}')\nfftpack.fft(z)\n</code></pre>\n<p>Note that the FFT returns a complex spectrum which, in the case of\nreal inputs, is conjugate symmetrical (i.e., symmetric in the real\npart, and anti-symmetric in the imaginary part):</p>\n<pre><code class=\"language-python\">x = np.array([1, 5, 12, 7, 3, 0, 4, 3, 2, 8])\nX = fftpack.fft(x)\n\nwith np.printoptions(precision=2):\n    print(\"Real part:     \", X.real)\n    print(\"Imaginary part:\", X.imag)\n</code></pre>\n<p>(And, again, recall that the first component is <code>np.mean(x) * N</code>.)</p>\n<p>The <code>fftfreq</code> function tells us which frequencies we are looking at\nspecifically:</p>\n<pre><code class=\"language-python\">fftpack.fftfreq(10)\n</code></pre>\n<p>The result tells us that our maximum component occured at a frequency\nof 0.5 cycles per sample. This agrees with the input, where a\nminus-one-plus-one cycle repeated every second sample.</p>\n<p>Sometimes, it is convenient to view the spectrum organized slightly\ndifferently, from high-negative to low to-high-positive (for now, we\nwon't dive too deeply into the concept of negative frequency, other\nthan saying a real-world sine wave is produced by a combination of\npositive and negative frequencies). We re-shuffle the spectrum using\nthe <code>fftshift</code> function.</p>\n<blockquote>\n<p><strong>Discrete Fourier transforms {.callout}</strong></p>\n<p>The Discrete Fourier Transform (DFT) converts a sequence of $N$\nequally spaced real or complex samples $x<em>{0},x</em>{1},\\ldots, x<em>{N-1}$ of\na function $x(t)$ of time (or another variable, depending on the\napplication) into a sequence of $N$ complex numbers $X</em>{k}$ by the\nsummation</p>\n<p>$$\nX<em>{k}=\\sum</em>{n=0}^{N-1}x_{n}e^{-j2\\pi kn/N},;k=0,1,\\ldots,\nN-1.\n$$</p>\n<p>With the numbers $X<em>{k}$ known, the inverse DFT _exactly</em> recovers the\nsample values $x_{n}$ through the summation</p>\n<p>$$x<em>{n}=\\frac{1}{N}\\sum</em>{k=0}^{N-1}X_{k}e^{j2\\pi kn/N}.$$</p>\n<p>Keeping in mind that $e^{j\\theta}=\\cos\\theta+j\\sin\\theta,$ the last\nequation shows that the DFT has decomposed the sequence $x<em>{n}$ into a\ncomplex discrete Fourier series with coefficients $X</em>{k}$. Comparing\nthe DFT with a continuous complex Fourier series</p>\n<p>$$x(t)=\\sum<em>{n=-\\infty}^{\\infty}c</em>{n}e^{jn\\omega_{0}t},$$</p>\n<p>the DFT is a <em>finite</em> series with $N$ terms defined at the equally\nspaced discrete instances of the <em>angle</em> $(\\omega<em>{0}t</em>{n})=2\\pi\\frac{k}{N}$\nin the interval $[0,2\\pi)$,\ni.e. <em>including</em> $0$ and <em>excluding</em> $2\\pi$.\nThis automatically normalizes the DFT so that time does\nnot appear explicitly in the forward or inverse transform.</p>\n<p>If the original function $x(t)$ is limited in frequency to less than\nhalf of the sampling frequency (the so-called <em>Nyquist frequency</em>),\ninterpolation between sample values produced by the inverse DFT will\nusually give a faithful reconstruction of $x(t)$. If $x(t)$ is <em>not</em>\nlimited as such, the inverse DFT can, in general, not be used to\nreconstruct $x(t)$ by interpolation. Note that this limit does not\nimply that there are <em>no</em> methods that can do such a\nreconstruction—see, e.g., compressed sensing, or finite rate of\ninnovation sampling.</p>\n<p>The function $e^{j2\\pi k/N}=\\left(e^{j2\\pi/N}\\right)^{k}=w^{k}$ takes on\ndiscrete values between $0$ and $2\\pi\\frac{N-1}{N}$ on the unit circle in\nthe complex plane. The function $e^{j2\\pi kn/N}=w^{kn}$ encircles the\norigin $n\\frac{N-1}{N}$ times, thus generating harmonics of the fundamental\nsinusoid for which $n=1$.</p>\n<p>The way in which we defined the DFT leads to a few subtleties\nwhen $n>\\frac{N}{2}$, for even $N$ <sup id=\"fnref-odd_n\"><a href=\"#fn-odd_n\" class=\"footnote-ref\">odd_n</a></sup>. The function $e^{j2\\pi kn/N}$ is plotted\nfor increasing values of $k$ in the figure below,\nfor the cases $n=1$ to $n=N-1$ for $N=16$. When $k$ increases from $k$\nto $k+1$, the angle increases by $\\frac{2\\pi n}{N}$. When $n=1$,\nthe step is $\\frac{2\\pi}{N}$. When $n=N-1$, the angle\nincreases by $2\\pi\\frac{N-1}{N}=2\\pi-\\frac{2\\pi}{N}$. Since $2\\pi$\nis precisely once around the circle, the step equates to $-\\frac{2\\pi}{N}$,\ni.e. in the direction of a negative\nfrequency. The components up to $N/2$ represent <em>positive</em> frequency\ncomponents, those above $N/2$ up to $N-1$ represent <em>negative</em>\nfrequencies. The angle increment for the component $N/2$\nfor $N$ even advances precisely halfway around the circle for\neach increment in $k$ and can therefore be interpreted as either a\npositive or a negative frequency. This component of the DFT represents\nthe Nyquist Frequency, i.e. half of the sampling frequency, and is\nuseful to orientate oneself when looking at DFT graphics.</p>\n<p>The FFT in turn is simply a special and highly efficient algorithm for\ncalculating the DFT. Whereas a straightforward calculation of the DFT\ntakes of the order of $N^{2}$ calculations to compute, the FFT\nalgorithm requires of the order $N\\log N$ calculations. The FFT was\nthe key to the wide-spread use of the DFT in real-time applications\nand was included in a list of the top $10$ algorithms of the $20^{th}$\ncentury by the IEEE journal Computing in Science &#x26; Engineering in the\nyear $2000$.</p>\n<p><img src=\"../figures/unit_circle_samples.png\" alt=\"Unit circle samples\"></p>\n</blockquote>\n<p>Let's examine the frequency components in a noisy image. Note that,\nwhile a static image has no time-varying component, its values do vary\nacross <em>space</em>. The DFT applies equally to either case.</p>\n<p>First, load and display the image:</p>\n<pre><code class=\"language-python\">from skimage import io\nimage = io.imread('images/moonlanding.png')\nM, N = image.shape\n\nf, ax = plt.subplots(figsize=(4.8, 4.8))\nax.imshow(image)\n\nprint((M, N), image.dtype)\n</code></pre>\n<!-- caption text=\"A noisy image of the moon landing\" -->\n<p>Do not adjust your monitor! The image you are seeing is real,\nalthough clearly distorted by either the measurement or transmission\nequipment.</p>\n<p>To examine the spectrum of the image, we use <code>fftn</code> (instead of <code>fft</code>)\nto compute the DFT, since it has more than one dimension. The\ntwo-dimensional FFT is equivalent to taking the 1-D FFT across rows\nand then across columns (or vice versa).</p>\n<pre><code class=\"language-python\">F = fftpack.fftn(image)\n\nF_magnitude = np.abs(F)\nF_magnitude = fftpack.fftshift(F_magnitude)\n</code></pre>\n<p>Again, we take the log of the spectrum to compress the range of\nvalues, before displaying:</p>\n<pre><code class=\"language-python\">f, ax = plt.subplots(figsize=(4.8, 4.8))\n\nax.imshow(np.log(1 + F_magnitude), cmap='viridis',\n          extent=(-N // 2, N // 2, -M // 2, M // 2))\nax.set_title('Spectrum magnitude');\n</code></pre>\n<!-- caption text=\"Spectrum of the noisy moon landing image (magnitude)\" -->\n<p>Note the high values around the origin (middle) of the spectrum—these\ncoefficients describe the low frequencies or smooth parts of the\nimage; a vague canvas of the photo. Higher frequency components,\nspread throughout the spectrum, fill in the edges and detail. Peaks\naround higher frequencies correspond to the periodic noise.</p>\n<p>From the photo, we can see that the noise (measurement artifacts) is\nhighly periodic, so we hope to remove it by zeroing out the\ncorresponding parts of the spectrum.</p>\n<p>The image with those peaks suppressed indeed looks quite different!</p>\n<pre><code class=\"language-python\"># Set block around center of spectrum to zero\nK = 40\nF_magnitude[M // 2 - K: M // 2 + K, N // 2 - K: N // 2 + K] = 0\n\n# Find all peaks higher than the 98th percentile\npeaks = F_magnitude &#x3C; np.percentile(F_magnitude, 98)\n\n# Shift the peaks back to align with the original spectrum\npeaks = fftpack.ifftshift(peaks)\n\n# Make a copy of the original (complex) spectrum\nF_dim = F.copy()\n\n# Set those peak coefficients to zero\nF_dim = F_dim * peaks.astype(int)\n\n# Do the inverse Fourier transform to get back to an image\n# Since we started with a real image, we only look at the real part of\n# the output.\nimage_filtered = np.real(fftpack.ifft2(F_dim))\n\nf, (ax0, ax1) = plt.subplots(2, 1, figsize=(4.8, 7))\nax0.imshow(fftpack.fftshift(np.log10(1 + np.abs(F_dim))), cmap='viridis')\nax0.set_title('Spectrum after suppression')\n\nax1.imshow(image_filtered)\nax1.set_title('Reconstructed image');\n</code></pre>\n<!-- caption text=\"Filtered moon landing image and its spectrum\" -->\n<h3>Windowing</h3>\n<p>If we examine the Fourier transform of a rectangular pulse, we see\nsignificant sidelobes in the spectrum:</p>\n<pre><code class=\"language-python\">x = np.zeros(500)\nx[100:150] = 1\n\nX = fftpack.fft(x)\n\nf, (ax0, ax1) = plt.subplots(2, 1, sharex=True)\n\nax0.plot(x)\nax0.set_ylim(-0.1, 1.1)\n\nax1.plot(fftpack.fftshift(np.abs(X)))\nax1.set_ylim(-5, 55);\n</code></pre>\n<!-- caption text=\"Spectrum of a rectangular pulse (magnitude)\" -->\n<p>In theory, you would need a combination of infinitely many sinusoids\n(frequencies) to represent any abrupt transition; the coefficients would\ntypically have the same sidelobe structure as seen here for the pulse.</p>\n<p>Importantly, the discrete Fourier transform assumes that the input\nsignal is periodic. If the signal is not, the assumption is simply\nthat, right at the end of the signal, it jumps back to its beginning\nvalue. Consider the function, $x(t)$, shown here:</p>\n<img src=\"../figures/periodic.png\"/>\n<!-- caption text=\"Eight samples have been taken of a given\n function with effective length $T_{eff}$.  With the discrete Fourier\n transform assuming periodicity, it creates a step discontinuity\n between the first and last samples.\" -->\n<p>We only measure the signal for a short time, labeled $T_{eff}$. The\nFourier transform assumes that $x(8) = x(0)$, and that the signal is\ncontinued as the dashed, rather than the solid line. This introduces\na big jump at the edge, with the expected oscillation in the spectrum:</p>\n<pre><code class=\"language-python\">t = np.linspace(0, 1, 500)\nx = np.sin(49 * np.pi * t)\n\nX = fftpack.fft(x)\n\nf, (ax0, ax1) = plt.subplots(2, 1)\n\nax0.plot(x)\nax0.set_ylim(-1.1, 1.1)\n\nax1.plot(fftpack.fftfreq(len(t)), np.abs(X))\nax1.set_ylim(0, 190);\n</code></pre>\n<!-- caption text=\"Spectrum oscillation due to signal edge discontinuity\" -->\n<p>Instead of the expected two lines, the peaks are spread out in the\nspectrum.</p>\n<p>We can counter this effect by a process called <em>windowing</em>. The\noriginal function is multiplied with a window function such as the\nKaiser window $K(N,\\beta)$. Here we visualize it for $\\beta$ ranging\nfrom 0 to 100:</p>\n<pre><code class=\"language-python\">f, ax = plt.subplots()\n\nN = 10\nbeta_max = 5\ncolormap = plt.cm.plasma\n\nnorm = plt.Normalize(vmin=0, vmax=beta_max)\n\nlines = [\n    ax.plot(np.kaiser(100, beta), color=colormap(norm(beta)))\n    for beta in np.linspace(0, beta_max, N)\n    ]\n\nsm = plt.cm.ScalarMappable(cmap=colormap, norm=norm)\n\nsm._A = []\n\nplt.colorbar(sm).set_label(r'Kaiser $\\beta$');\n</code></pre>\n<!-- caption text=\"The Kaiser window for various values of $\\beta$\" -->\n<p>By changing the parameter $\\beta$, the shape of the window can be\nchanged from rectangular ($\\beta=0$, no windowing) to a window that\nproduces signals that smoothly increase from zero and decrease to zero\nat the endpoints of the sampled interval, producing very low side\nlobes ($\\beta$ typically between 5 and 10) <sup id=\"fnref-choosing_a_window\"><a href=\"#fn-choosing_a_window\" class=\"footnote-ref\">choosing_a_window</a></sup>.</p>\n<!--\n*For online notebook, use something like:*\n\n#```\n# @interact(beta=(0, 20.))\n# def window(beta):\n#    x = np.kaiser(1000, beta)\n#    f, axes = plt.subplots(1, 2, figsize=(4.8, 2.4))\n#    axes[0].plot(x)\n#    axes[1].plot(fftpack.fftshift(np.abs(np.fft.fft(x, 10000))))\n#    axes[1].set_xlim(2*2480, 2*2520)\n#    plt.show()\n#```\n-->\n<p>The effect of windowing our previous example is noticeable:</p>\n<pre><code class=\"language-python\">win = np.kaiser(len(t), 5)\nx_win = x * win\n\nX_win = fftpack.fft(x_win)\n\nf, (ax0, ax1) = plt.subplots(2, 1)\n\nax0.plot(x_win)\nax0.set_ylim(-1.1, 1.1)\n\nax1.plot(fftpack.fftfreq(len(t)), np.abs(X_win))\nax1.set_ylim(0, 190);\n</code></pre>\n<!-- caption text=\"Spectrum of a windowed signal (magnitude)\" -->\n<h2>Real-world Application: Analyzing Radar Data</h2>\n<p>Linearly modulated FMCW (Frequency-Modulated Continuous-Wave) radars\nmake extensive use of the FFT algorithm for signal processing and\nprovide examples of various applications of the FFT. We will use actual\ndata from an FMCW radar to demonstrate one such an application: target\ndetection.</p>\n<p>Roughly, an FMCW radar works like this (see box \"A\nsimple FMCW radar system\" for more detail):</p>\n<p>A signal with changing frequency is generated. This signal is\ntransmitted by an antenna, after which it travels outwards, away from the\nradar. When it hits an object, part of the signal is reflected back\nto the radar, where it is received, multiplied by a copy of the\ntransmitted signal, and sampled, turning it into\nnumbers that are packed into an array. Our challenge is to interpret\nthose numbers to form meaningful results.</p>\n<p>The multiplication step above is important. From school, recall the\ntrigonometric identity:</p>\n<p>$\n\\sin(xt) \\sin(yt) = \\frac{1}{2}\n\\left[ \\sin \\left( (x - y)t + \\frac{\\pi}{2} \\right) - \\sin \\left( (x + y)t + \\frac{\\pi}{2} \\right) \\right]\n$</p>\n<p>Thus, if we multiply the received signal by the transmitted signal, we\nexpect two frequency components to appear in the spectrum: one that is\nthe difference in frequencies between the received and transmitted\nsignal, and one that is the sum of their frequencies.</p>\n<p>We are particularly interested in the first, since that gives us some\nindication of how long it took the signal to reflect back to the radar\n(in other words, how far away the object is from us!). We discard the\nother by applying a low-pass filter to the signal (i.e., a filter that\ndiscards any high frequencies).</p>\n<blockquote>\n<p><strong>A simple FMCW radar system</strong> {.callout}</p>\n<p><img src=\"../figures/FMCW_Block.png\" alt=\"The block diagram of a simple FMCW radar system\"></p>\n<p>A block diagram of a simple FMCW radar that uses separate\ntransmit and receive antennas is shown above. The radar consists of a waveform generator\nthat generates a sinusoidal signal of which the frequency varies\nlinearly around the required transmit frequency. The generated signal\nis amplified to the required power level by the transmit amplifier\nand routed to the transmit antenna via a coupler circuit where a copy\nof the transmit signal is tapped off. The transmit antenna radiates\nthe transmit signal as an electromagnetic wave in a narrow beam\ntowards the target to be detected. When the wave encounters an object\nthat reflects electromagnetic waves, a fraction of of the energy\nirradiating the target is reflected back to the receiver as a second\nelectromagnetic wave that propagates in the direction of the radar\nsystem. When this wave encounters the receive antenna, the antenna\ncollects the energy in the wave energy impinging on it and converts\nit to a fluctuating voltage that is fed to the mixer. The mixer\nmultiplies the received signal with a replica of the transmit signal\nand produces a sinusoidal signal with a frequency equal to the\ndifference in frequency between the transmitted and received\nsignals. The low-pass filter ensures that the received signal is band\nlimited (i.e., does not contain frequencies that we don't care about)\nand the receive amplifier strengthens the signal to a suitable\namplitude for the analog to digital converter (ADC) that feeds data\nto the computer.</p>\n</blockquote>\n<p>To summarize, we should note that:</p>\n<ul>\n<li>The data that reaches the computer consists of $N$ samples sampled\n(from the multiplied, filtered signal) at a sample frequency of\n$f_{s}$.</li>\n<li>The <strong>amplitude</strong> of the returned signal varies depending on the\n<strong>strength of the reflection</strong> (i.e., is a property of the target\nobject and the distance between the target and the radar).</li>\n<li>The <strong>frequency measured</strong> is an indication of the <strong>distance</strong> of the\ntarget object from the radar.</li>\n</ul>\n<!--\n\n### Signal properties in the time domain\n\nThe transmit signal is a sinusoidal signal with an instantaneous\nfrequency that increases linearly with time, as shown in\nFig. [fig:FMCW waveform](a).\n\nStarting at $f_{min}$, the frequency increases at a rate $S$ Hz/s to $f_{max}.$\nThe frequency is then decreased rapidly back to $f_{min}$\nafter which a next frequency sweep occurs.\n\nThis signal is radiated by a directional transmit antenna. When the\nwave with propagation velocity $v\\approx300\\times10^{6}$ m/s (the\npropagation speed of electromagnetic waves in air is ever-so-slightly\nslower than the speed of light in a vacuum) hits a target at a range $R$,\nthe echo will reach the radar after a time\n\n$$t_{d}=\\frac{2R}{v}.$$\n\nHere it is collected by the receive antenna and converted to a\nsinusoidally fluctuating voltage. The received signal is a replica of\nthe transmitted signal, delayed by the transit time $t_{d}$ and is\nshown dashed in Fig. [fig:FMCW waveform](b).\n\nA radar is designed to detect targets up to a maximum range $R_{max}$.\nEchoes from maximum range reach the radar after a transit\ntime $t_{dm}$ as shown in Fig. [fig:FMCW waveform](c).\n\nWe note that there is a constant difference in frequency between the\ntransmitted and received signals and this will be true for all targets\nafter time $t_{s}$ until $t_{e}$. We conclude from\nFig. [fig:FMCW waveform] that the frequency difference is given by\n\n$$f_{d}=S\\times t_{d}=\\frac{2SR}{v},$$\n\nwhere $T_{eff}=t_{e}-t_{s}=\\frac{N}{f_{s}}$ is the effective sweep duration\nof the radar. The frequency excursion of the sweep during $T_{eff}$ is\nthe effective bandwidth of the radar, given by\n\n$$B_{eff}=f_{max}-f_{1}=ST_{eff}.$$\n\nWe will see that the range resolution of the radar is determined by\nthe effective bandwidth.\n\n\nReturning to Fig. [fig: block-diagram], the signal produced by the\nreceiver at the input to the Analog to Digital Converter (ADC) when\nthere is a single target is a sinusoid with constant amplitude,\nproportional to the amplitude of the echo, and constant frequency,\nproportional to the range to the target.\n\n-->\n<p><img src=\"../figures/FMCW_waveform.png\" alt=\"The frequency relationships in an FMCW radar with\n linear frequency modulation\"></p>\n<p>To start off, we'll generate some synthetic signals, after which we'll\nturn our focus to the output of an actual radar.</p>\n<p>Recall that the radar is increasing its frequency as it transmits at a\nrate of $S$ Hz/s. After a certain amount of time, $t$, has passed,\nthe frequency will now be $t S$ higher. In that same time span, the\nradar signal has traveled $d = t / v$ meters, where $v$ is the speed of\nthe transmitted wave through air (roughly the same as the speed of\nlight, $3 \\times 10^8$ m/s).</p>\n<p>Combining the above observations, we can calculate the amount of time\nit would take the signal to travel to, bounce off, and return from a\ntarget that is distance $R$ away:</p>\n<p>$$ t_R = 2R / v $$</p>\n<p>Therefore, the change in frequency for a target at range $R$ will be:</p>\n<p>$$ f_{d}= t_R S = \\frac{2RS}{v}$$</p>\n<pre><code class=\"language-python\">pi = np.pi\n\n# Radar parameters\nfs = 78125          # Sampling frequency in Hz, i.e. we sample 78125\n                    # times per second\n\nts = 1 / fs         # Sampling time, i.e. one sample is taken each\n                    # ts seconds\n\nTeff = 2048.0 * ts  # Total sampling time for 2048 samples\n                    # (AKA effective sweep duration) in seconds.\n\nBeff = 100e6        # Range of transmit signal frequency during the time the\n                    # radar samples, known as the \"effective bandwidth\"\n                    # (given in Hz)\n\nS = Beff / Teff     # Frequency sweep rate in Hz/s\n\n# Specification of targets.  We made these targets up, imagining they\n# are objects seen by the radar with the specified range and size\n\nR = np.array([100, 137, 154, 159,  180])  # Ranges (in meter)\nM = np.array([0.33, 0.2, 0.9, 0.02, 0.1])  # Target size\nP = np.array([0, pi / 2, pi / 3, pi / 5, pi / 6])  # Randomly chosen phase offsets\n\nt = np.arange(2048) * ts  # Sample times\n\nfd = 2 * S * R / 3E8      # Frequency differences for these targets\n\n# Generate five targets\nsignals = np.cos(2 * pi * fd * t[:, np.newaxis] + P)\n\n# Save the signal associated with the first target as an example for\n# later inspection\nv_single = signals[:, 0]\n\n# Weigh the signals, according to target size, and sum, to generate\n# the combined signal seen by the radar\nv_sim = np.sum(M * signals, axis=1)\n\n## The above code is equivalent to:\n#\n# v0 = np.cos(2 * pi * fd[0] * t)\n# v1 = np.cos(2 * pi * fd[1] * t + pi / 2)\n# v2 = np.cos(2 * pi * fd[2] * t + pi / 3)\n# v3 = np.cos(2 * pi * fd[3] * t + pi / 5)\n# v4 = np.cos(2 * pi * fd[4] * t + pi / 6)\n#\n## Blend them together\n# v_single = v0\n# v_sim = (0.33 * v0) + (0.2 * v1) + (0.9 * v2) + (0.02 * v3) + (0.1 * v4)\n</code></pre>\n<p>Above, we generate a synthetic signal, $v_\\mathrm{single}$, received when\nlooking at a single target (see figure below). By counting the number\nof cycles seen in a given time period, we can compute the frequency of\nthe signal and thus the distance to the target.</p>\n<p>A real radar will rarely receive only a single echo, though. The\nsimulated signal $v<em>\\mathrm{sim}$ shows what a radar signal will look\nlike with five targets at different ranges (including two close to one\nanother at 154 and 159 meters), and $v</em>\\mathrm{actual}(t)$ shows the\noutput signal obtained with an actual radar. When multiple echoes add\ntogether, the result makes little intuitive sense; until, that is, we\nlook at it more carefully through the lens of the discrete Fourier\ntransform.</p>\n<!--\nA synthetic radar signal is shown as $v_{1}(t)$ in Fig. [fig:radar time signals]\nfor a radar with parameters $B_{eff}=100$ MHz, sampling frequency\n28125 Hz and N=2048 samples. The effective sweep time is\n$T_{eff}=\\frac{2048}{28125}=26.214$ ms. We can interpret this signal\nby counting the number of cycles in the graph — about\n$66\\frac{1}{2}$. The difference frequency is approximately\n$\\frac{66.5}{26.214E-3}=6.35$ kHz. With\n$S=\\frac{B_{eff}}{T_{eff}}=\\frac{100E6}{26.214E-3}=3.815\\times10^{9}$\nHz/s, we can calculate the range to the target as\n$R=\\frac{vf_{d}}{2S}=\\frac{3\\times10^{8}\\times6.35\\times10^{3}}{2\\times3.815\\times10^{9}}=249.7$\nm.\n-->\n<p><img src=\"../figures/generated/radar_time_signals.png\" alt=\"Receiver output signals: (a) single simulated target\n (b) five simulated targets (c) actual radar data\"></p>\n<p>The real-world radar data is read from a NumPy-format <code>.npz</code> file (a\nlight-weight, cross-platform and cross-version compatible storage\nformat). These files can be saved with the <code>np.savez</code> or\n<code>np.savez_compressed</code> functions. Note that SciPy's <code>io</code> submodule\ncan also easily read other formats, such as MATLAB(R) and NetCDF\nfiles.</p>\n<pre><code class=\"language-python\">data = np.load('data/radar_scan_0.npz')\n\n# Load variable 'scan' from 'radar_scan_0.npz'\nscan = data['scan']\n\n# The dataset contains multiple measurements, each taken with the\n# radar pointing in a different direction.  Here we take one such as\n# measurement, at a specified azimuth (left-right position) and elevation\n# (up-down position).  The measurement has shape (2048,).\n\nv_actual = scan['samples'][5, 14, :]\n\n# The signal amplitude ranges from -2.5V to +2.5V.  The 14-bit\n# analogue-to-digital converter in the radar gives out integers\n# between -8192 to 8192.  We convert back to voltage by multiplying by\n# $(2.5 / 8192)$.\n\nv_actual = v_actual * (2.5 / 8192)\n</code></pre>\n<p>Since <code>.npz</code>-files can store multiple variables, we have to select\nthe one we want: <code>data['scan']</code>. That returns a\n<em>structured NumPy array</em> with the following fields:</p>\n<ul>\n<li><strong>time</strong> : unsigned 64-bit (8 byte) integer (<code>np.uint64</code>)</li>\n<li><strong>size</strong> : unsigned 32-bit (4 byte) integer (<code>np.uint32</code>)</li>\n<li>\n<p><strong>position</strong></p>\n<ul>\n<li><strong>az</strong> : 32-bit float (<code>np.float32</code>)</li>\n<li><strong>el</strong> : 32-bit float (<code>np.float32</code>)</li>\n<li><strong>region_type</strong> : unsigned 8-bit (1 byte) integer (<code>np.uint8</code>)</li>\n<li><strong>region_ID</strong> : unsigned 16-bit (2 byte) integer (<code>np.uint16</code>)</li>\n<li><strong>gain</strong> : unsigned 8-bit (1 byte) integer (<code>np.uin8</code>)</li>\n<li><strong>samples</strong> : 2048 unsigned 16-bit (2 byte) integers (<code>np.uint16</code>)</li>\n</ul>\n</li>\n</ul>\n<p>While it is true that NumPy arrays are <em>homogeneous</em> (i.e., all the\nelements inside are the same), it does not mean that those elements\ncannot be compound elements, as is the case here.</p>\n<p>An individual field is accessed using dictionary syntax:</p>\n<pre><code class=\"language-python\">azimuths = scan['position']['az']  # Get all azimuth measurements\n</code></pre>\n<p>To summarize what we've seen so far: the shown measurements\n($v<em>\\mathrm{sim}$ and $v</em>\\mathrm{actual}$) are the sum of sinusoidal\nsignals reflected by each of several objects. We need to determine\neach of the constituent components of these composite radar\nsignals. The FFT is the tool that will do this for us.</p>\n<h3>Signal properties in the frequency domain</h3>\n<p>First, we take the FFTs of our three signals (synthetic single target,\nsynthetic multi-target, and real) and then display the\npositive frequency components (i.e., components $0$ to $N/2$). These\nare called the <em>range traces</em> in radar terminology.</p>\n<pre><code class=\"language-python\">fig, axes = plt.subplots(3, 1, sharex=True, figsize=(4.8, 2.4))\n\n# Take FFTs of our signals.  Note the convention to name FFTs with a\n# capital letter.\n\nV_single = np.fft.fft(v_single)\nV_sim = np.fft.fft(v_sim)\nV_actual = np.fft.fft(v_actual)\n\nN = len(V_single)\n\nwith plt.style.context('style/thinner.mplstyle'):\n    axes[0].plot(np.abs(V_single[:N // 2]))\n    axes[0].set_ylabel(\"$|V_\\mathrm{single}|$\")\n    axes[0].set_xlim(0, N // 2)\n    axes[0].set_ylim(0, 1100)\n\n    axes[1].plot(np.abs(V_sim[:N // 2]))\n    axes[1].set_ylabel(\"$|V_\\mathrm{sim} |$\")\n    axes[1].set_ylim(0, 1000)\n\n    axes[2].plot(np.abs(V_actual[:N // 2]))\n    axes[2].set_ylim(0, 750)\n    axes[2].set_ylabel(\"$|V_\\mathrm{actual}|$\")\n\n    axes[2].set_xlabel(\"FFT component $n$\")\n\n    for ax in axes:\n        ax.grid()\n</code></pre>\n<!-- caption text=\"Range traces for: (a) single simulated target, (b) mutiple simulated targets, (c) real-world targets\" -->\n<p>Suddenly, the information makes sense!</p>\n<p>The plot for $|V<em>\\mathrm{single}|$ clearly shows a target at component 67, and\nfor $|V</em>\\mathrm{sim}|$ shows the targets that produced the signal that was\nuninterpretable in the time domain. The real radar\nsignal, $|V_\\mathrm{actual}|$ shows a large number of targets between\ncomponent 400 and 500 with a large peak in component 443. This happens\nto be an echo return from a radar illuminating the high wall of an\nopen-cast mine.</p>\n<p>To get useful information from the plot, we must determine the range!\nAgain, we use the formula:</p>\n<p>$$R<em>{n}=\\frac{nv}{2B</em>{eff}}$$</p>\n<p>In radar terminology, each DFT component is known as a <em>range bin</em>.</p>\n<!--\nThe sinusoid associated with the first component of the DFT has a\nperiod exactly equal to the duration $T_{eff}$ of the time domain\nsignal, so $f_{1}=\\frac{1}{T_{eff}}$. The other sinusoids in the\nFourier series are harmonics of this, $f_{n}=\\frac{n}{T_{eff}}$.\n\nThe ranges associated with the DFT components follow from\nEqs. ([eq:difference frequency]) and ([eq:Effective bandwidth]) as\n\n$$R_{n}=\\frac{nv}{2B_{eff}}$$\n\nand the associated DFT components are known as *range bins* in radar\nterminology.\n\n-->\n<p>This equation also defines the range resolution of the radar: targets\nwill only be distinguishable if they are separated by more than two\nrange bins, i.e.</p>\n<p>$$\\Delta R>\\frac{1}{B_{eff}}.$$</p>\n<p>This is a fundamental property of all types of radar.</p>\n<!--\nThe plot in Fig. ([fig:FFT range traces]) has a fundamental\nshortcoming. The observable dynamic range is the signal is very\nlimited! We could easily have missed one of the targets in the trace\nfor $V_{5}$!  To ameliorate the problem, we plot the same FFTs but\nthis time against a logarithmic y-axis.  The traces were all\nnormalized by dividing the amplitudes with the maximum value.\n-->\n<p>This result is quite satisfying—but the dynamic range is so large\nthat we could very easily miss some peaks. Let's take the $\\log$ as\nbefore with the spectrogram:</p>\n<pre><code class=\"language-python\">c = 3e8  # Approximately the speed of light and of\n         # electromagnetic waves in air\n\nfig, (ax0, ax1, ax2) = plt.subplots(3, 1)\n\n\ndef dB(y):\n    \"Calculate the log ratio of y / max(y) in decibel.\"\n\n    y = np.abs(y)\n    y /= y.max()\n\n    return 20 * np.log10(y)\n\n\ndef log_plot_normalized(x, y, ylabel, ax):\n    ax.plot(x, dB(y))\n    ax.set_ylabel(ylabel)\n    ax.grid()\n\n\nrng = np.arange(N // 2) * c / 2 / Beff\n\nwith plt.style.context('style/thinner.mplstyle'):\n    log_plot_normalized(rng, V_single[:N // 2], \"$|V_0|$ [dB]\", ax0)\n    log_plot_normalized(rng, V_sim[:N // 2], \"$|V_5|$ [dB]\", ax1)\n    log_plot_normalized(rng, V_actual[:N // 2], \"$|V_{\\mathrm{actual}}|$ [dB]\", ax2)\n\nax0.set_xlim(0, 300)  # Change x limits for these plots so that\nax1.set_xlim(0, 300)  # we are better able to see the shape of the peaks.\nax2.set_xlim(0, len(V_actual) // 2)\nax2.set_xlabel('range')\n</code></pre>\n<!-- caption text=\"Logarithm of range traces\" -->\n<p>The observable dynamic range is much improved in these plots. For\ninstance, in the real radar signal the <em>noise floor</em> of the radar has\nbecome visible (i.e., the level where electronic noise in the system\nstarts to limit the radar's ability to detect a target).</p>\n<!-- The noise floor is ultimately caused by a phenomenon\ncalled thermal noise that is produced by all conducting elements that\nhave resistance at temperatures above absolute zero, as well as by\nshot noise, a noise mechanism inherent in all the electronic devices\nthat are used for processing the radar signal. The noise floor of a\nradar limits its ability to detect weak echoes. -->\n<h3>Windowing, applied</h3>\n<p>We're getting there, but in the spectrum of the simulated signal, we\nstill cannot distinguish the peaks at 154 and 159 meters. Who knows\nwhat we're missing in the real-world signal! To sharpen the peaks,\nwe'll return to our toolbox and make use of <em>windowing</em>.</p>\n<!--\n\nThe range traces in Fig. ([fig:Log range traces]) display a further\nserious shortcoming. The signals $v_{1}$ and $v_{5}$ are composed of\npure sinusoids and we would ideally expect the FFT to produce line\nspectra for these signals. The logarithmic plots show steadily\nincreasing values as the peaks are approached from both sides, to such\nan extent that one of the targets in the plot for $|v_{5}|$ can hardly\nbe distinguished even though it is separated by several range bins\nfrom the large target. The broadening is caused by *side lobes* in the\nDFT. These are caused by an inherent clash between the properties of\nthe signal we analyzed and the signal produced by the inverse DFT.\n\n-->\n<p>Here are the signals used thus far in this example, windowed with a\nKaiser window with $\\beta=6.1$:</p>\n<pre><code class=\"language-python\">f, axes = plt.subplots(3, 1, sharex=True, figsize=(4.8, 2.8))\n\nt_ms = t * 1000  # Sample times in milli-second\n\nw = np.kaiser(N, 6.1)  # Kaiser window with beta = 6.1\n\nfor n, (signal, label) in enumerate([(v_single, r'$v_0 [V]$'),\n                                     (v_sim, r'$v_5 [V]$'),\n                                     (v_actual, r'$v_{\\mathrm{actual}} [V]$')]):\n    with plt.style.context('style/thinner.mplstyle'):\n        axes[n].plot(t_ms, w * signal)\n        axes[n].set_ylabel(label)\n        axes[n].grid()\n\naxes[2].set_xlim(0, t_ms[-1])\naxes[2].set_xlabel('Time [ms]');\n</code></pre>\n<!-- caption text=\"Windowed signals for: (a) single simulated target, (b) multiple simulated targets, (c) real targets\" -->\n<p>And the corresponding FFTs (or \"range traces\", in radar terms):</p>\n<pre><code class=\"language-python\">V_single_win = np.fft.fft(w * v_single)\nV_sim_win = np.fft.fft(w * v_sim)\nV_actual_win = np.fft.fft(w * v_actual)\n\nfig, (ax0, ax1,ax2) = plt.subplots(3, 1)\n\nwith plt.style.context('style/thinner.mplstyle'):\n    log_plot_normalized(rng, V_single_win[:N // 2],\n                        r\"$|V_{0,\\mathrm{win}}|$ [dB]\", ax0)\n    log_plot_normalized(rng, V_sim_win[:N // 2],\n                        r\"$|V_{5,\\mathrm{win}}|$ [dB]\", ax1)\n    log_plot_normalized(rng, V_actual_win[:N // 2],\n                        r\"$|V_\\mathrm{actual,win}|$ [dB]\", ax2)\n\nax0.set_xlim(0, 300)  # Change x limits for these plots so that\nax1.set_xlim(0, 300)  # we are better able to see the shape of the peaks.\n\nax1.annotate(\"New, previously unseen!\", (160, -35), xytext=(10, 15),\n             textcoords=\"offset points\", color='red', size='x-small',\n             arrowprops=dict(width=0.5, headwidth=3, headlength=4,\n                             fc='k', shrink=0.1));\n</code></pre>\n<!-- caption text=\"Range traces (spectrum) of windowed signals\" -->\n<p>Compare these with the earlier range traces. There is a dramatic\nlowering in side lobe level, but at a price: the peaks have changed in\nshape, widening and becoming less peaky, thus lowering the radar\nresolution, that is, the ability of the radar to distinguish between\ntwo closely space targets. The choice of window is a compromise\nbetween side lobe level and resolution. Even so, referring to the\ntrace for $V_\\mathrm{sim}$, windowing has dramatically increased our\nability to distinguish the small target from its large neighbor.</p>\n<p>In the real radar data range trace windowing has also reduced the side\nlobes. This is most visible in the depth of the notch between the two\ngroups of targets.</p>\n<h3>Radar Images</h3>\n<p>Knowing how to analyze a single trace, we can expand to looking at\nradar images.</p>\n<p>The data is produced by a radar with a parabolic reflector antenna. It\nproduces a highly directive round pencil beam with a $2^\\circ$\nspreading angle between half-power points. When directed with normal\nincidence at a plane, the radar will illuminate a spot of about $2$ meters in\ndiameter at a distance of 60 meters.\nOutside this spot, the power drops off quite rapidly, but strong\nechoes from outside the spot will nevertheless still be visible.</p>\n<p>By varying the pencil beam's azimuth (left-right position) and\nelevation (up-down position), we can sweep it across the target area\nof interest. When reflections are picked up, we can calculate the\ndistance to the reflector (the object hit by the radar signal).\nTogether with the current pencil beam azimuth and elevation, this\ndefines the reflector's position in 3D.</p>\n<p>A rock slope consists of thousands of reflectors. A range bin can be\nthought of as a large sphere with the radar at its center that\nintersects the slope along a ragged line. The scatterers on this line\nwill produce reflections in this range bin. The wavelength of the\nradar (distance the transmitted wave travels in one oscillation\nsecond) is about 30 mm. The reflections from scatterers separated by\nodd multiples of a quarter wavelength in range, about 7.5 mm, will\ntend to interfere destructively, while those from scatterers separated\nby multiples of a half wavelength will tend to interfere\nconstructively at the radar. The reflections combine to produce\napparent spots of strong reflections. This specific radar moves its\nantenna in order to scan small regions consisting of $20^\\circ$\nazimuth and $30^\\circ$ elevation bins scanned in steps of $0.5^\\circ$.</p>\n<p>We will now draw some contour plots of the resulting radar data.\nPlease refer to the diagram below to see how the different slices are\ntaken. A first slice at fixed range shows the strength of echoes\nagainst elevation and azimuth. Another two slices at fixed elevation\nand azimuth respectively shows the slope. The stepped construction of\nthe high wall in an opencast mine is visible in the azimuth plane.</p>\n<p><img src=\"../figures/axes_slices.png\"\n     alt=\"Diagram showing azimuth, elevation and range slices through data volume\"/></p>\n<pre><code class=\"language-python\">data = np.load('data/radar_scan_1.npz')\nscan = data['scan']\n\n# The signal amplitude ranges from -2.5V to +2.5V.  The 14-bit\n# analogue-to-digital converter in the radar gives out integers\n# between -8192 to 8192.  We convert back to voltage by multiplying by\n# $(2.5 / 8192)$.\n\nv = scan['samples'] * 2.5 / 8192\nwin = np.hanning(N + 1)[:-1]\n\n# Take FFT for each measurement\nV = np.fft.fft(v * win, axis=2)[::-1, :, :N // 2]\n\ncontours = np.arange(-40, 1, 2)\n\n# ignore MPL layout warnings\nimport warnings\nwarnings.filterwarnings('ignore', '.*Axes.*compatible.*tight_layout.*')\n\nf, axes = plt.subplots(2, 2, figsize=(4.8, 4.8), tight_layout=True)\n\nlabels = ('Range', 'Azimuth', 'Elevation')\n\ndef plot_slice(ax, radar_slice, title, xlabel, ylabel):\n    ax.contourf(dB(radar_slice), contours, cmap='magma_r')\n    ax.set_title(title)\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n    ax.set_facecolor(plt.cm.magma_r(-40))\n\nwith plt.style.context('style/thinner.mplstyle'):\n    plot_slice(axes[0, 0], V[:, :, 250], 'Range=250', 'Azimuth', 'Elevation')\n    plot_slice(axes[0, 1], V[:, 3, :], 'Azimuth=3', 'Range', 'Elevation')\n    plot_slice(axes[1, 0], V[6, :, :].T, 'Elevation=6', 'Azimuth', 'Range')\n    axes[1, 1].axis('off')\n</code></pre>\n<!-- caption text=\"Contour plots of range traces along various axes (see diagram)\" -->\n<h4>3D visualization</h4>\n<p>We can also visualize the volume in three dimensions.</p>\n<p>We first compute the argmax (the index of the maximum value) in the\nrange direction. This should give an indication of the range at which\nthe radar beam hit the rock slope. Each argmax index is converted to\na three-dimensional (elevation-azimuth-range) coordinate:</p>\n<pre><code class=\"language-python\">r = np.argmax(V, axis=2)\n\nel, az = np.meshgrid(*[np.arange(s) for s in r.shape], indexing='ij')\n\naxis_labels = ['Elevation', 'Azimuth', 'Range']\ncoords = np.column_stack((el.flat, az.flat, r.flat))\n</code></pre>\n<p>Taking these coordinates, we project them onto the plane (by dropping\nthe range coordinate), and perform a Delaunay tesselation. The\ntesselation returns a set of indices into our coordinates that define\ntriangles (or simplices). While the triangles are strictly speaking\ndefined on the projected coordinates, we use our original coordinates\nfor the reconstruction, thereby adding back the range component:</p>\n<pre><code class=\"language-python\">from scipy import spatial\n\nd = spatial.Delaunay(coords[:, :2])\nsimplexes = coords[d.vertices]\n</code></pre>\n<p>For display purposes, we swap the range axis to be the first:</p>\n<pre><code class=\"language-python\">coords = np.roll(coords, shift=-1, axis=1)\naxis_labels = np.roll(axis_labels, shift=-1)\n</code></pre>\n<p>Now, Matplotlib's <code>trisurf</code> can be used to visualize the result:</p>\n<pre><code class=\"language-python\"># This import initializes Matplotlib's 3D machinery\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Set up the 3D axis\nf, ax = plt.subplots(1, 1, figsize=(4.8, 4.8),\n                     subplot_kw=dict(projection='3d'))\n\nwith plt.style.context('style/thinner.mplstyle'):\n    ax.plot_trisurf(*coords.T, triangles=d.vertices, cmap='magma_r')\n\n    ax.set_xlabel(axis_labels[0])\n    ax.set_ylabel(axis_labels[1])\n    ax.set_zlabel(axis_labels[2], labelpad=-3)\n    ax.set_xticks([0, 5, 10, 15])\n\n# Adjust the camera position to match our diagram above\nax.view_init(azim=-50);\n</code></pre>\n<!-- caption text=\"3-D visualization of estimated rock slope position\" -->\n<h3>Further applications of the FFT</h3>\n<p>The examples above show just one of the uses of the FFT in\nradar. There are many others, such as movement (Doppler) measurement\nand target recognition. The fast Fourier transform is pervasive, and is\nseen anywhere from Magnetic Resonance Imaging (MRI) to statistics.\nWith the basic techniques that this chapter outlines in hand, you\nshould be well equipped to use it!</p>\n<h3>Further reading</h3>\n<p>On the Fourier transform:</p>\n<ul>\n<li>A. Papoulis, <em>The Fourier Integral and Its Applications</em>,\nMcGraw-Hill, 1960.</li>\n<li>Ronald A. Bracewell, <em>The Fourier Transform and Its Applications</em>,\nMcGraw-Hill, 1986.</li>\n</ul>\n<p>On radar signal processing:</p>\n<ul>\n<li>Mark A. Richards, <em>Principles of Modern Radar: Basic Principles</em>,\nSciTech, 2010</li>\n<li>Mark A. Richards, <em>Fundamentals of Radar Signal Processing</em>,\nMcGraw-Hill, 2014.</li>\n</ul>\n<!-- exercise begin -->\n<p><strong>Exercise:</strong> The FFT is often used to speed up image convolution\n(convolution is the application of a moving filter mask). Convolve an\nimage with <code>np.ones((5, 5))</code>, using a) numpy's <code>np.convolve</code> and\nb) <code>np.fft.fft2</code>. Confirm that the results are identical.</p>\n<p>Hints:</p>\n<ul>\n<li>The convolution of <code>x</code> and <code>y</code> is equivalent to <code>ifft2(X * Y)</code>, where\n<code>X</code> and <code>Y</code> are the FFTs of x and y respectively.</li>\n<li>In order to multiply <code>X</code> and <code>Y</code>, they have to be the same size.\nUse <code>np.pad</code> to extend <code>x</code> and <code>y</code> with zeros (toward the right and\nbottom) <em>before</em> taking their FFT.</li>\n<li>You may see some edge effects. These can be removed by increasing\nthe padding size, so that both <code>x</code> and <code>y</code> have dimensions\n<code>shape(x) + shape(y) - 1</code>.</li>\n</ul>\n<!-- solution begin -->\n<p><strong>Solution:</strong></p>\n<pre><code class=\"language-python\">from scipy import signal\n\nx = np.random.random((50, 50))\ny = np.ones((5, 5))\n\nL = x.shape[0] + y.shape[0] - 1\nPx = L - x.shape[0]\nPy = L - y.shape[0]\n\nxx = np.pad(x, ((0, Px), (0, Px)), mode='constant')\nyy = np.pad(y, ((0, Py), (0, Py)), mode='constant')\n\nzz = np.fft.ifft2(np.fft.fft2(xx) * np.fft.fft2(yy)).real\nprint('Resulting shape:', zz.shape, ' &#x3C;-- Why?')\n\nz = signal.convolve2d(x, y)\n\nprint('Results are equal?', np.allclose(zz, z))\n</code></pre>\n<!-- solution end -->\n<!-- exercise end -->\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-discrete\">\n<p>The discrete Fourier transform operates on sampled data,\nin contrast to the standard Fourier transform which is\ndefined for continuous functions.</p>\n<a href=\"#fnref-discrete\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-complex\">\n<p>The Fourier transform essentially tells us how to combine\na set of sinusoids of varying frequency to form the input\nsignal. The spectrum consists of complex numbers—one for\neach sinusoid. A complex number encodes two things: a\nmagnitude and an angle. The magnitude is the strength of\nthe sinusoid in the signal, and the angle how much it is\nshifted in time. At this point, we only care about the\nmagnitude, which we calculate using <code>np.abs</code>.</p>\n<a href=\"#fnref-complex\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-time\">\n<p>For more on techniques for calculating both (approximate) frequencies\nand time of occurrence, read up on wavelet analysis.</p>\n<a href=\"#fnref-time\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-scaling\">\n<p>SciPy goes to some effort to preserve the energy in the\nspectrum. Therefore, when taking only half the components\n(for N even), it multiplies the remaining components,\napart from the first and last components, by two (those\ntwo components are \"shared\" by the two halves of the\nspectrum). It also normalizes the window by dividing it\nby its sum.</p>\n<a href=\"#fnref-scaling\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-periodic\">\n<p>The period can, in fact, also be infinite! The general\ncontinuous Fourier transform provides for this\npossibility. Discrete Fourier transforms are generally\ndefined over a finite interval, and this is implicitly\nthe period of the time domain function that is\ntransformed. In other words, if you do the inverse\ndiscrete Fourier transform, you <em>always</em> get a periodic\nsignal out.</p>\n<a href=\"#fnref-periodic\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-big_o\">\n<p>In computer science, the computational cost of an algorithm\nis often expressed in \"Big O\" notation. The notation gives\nus an indication of how an algorithm's execution time scales\nwith an increasing number of elements. If an algorithm is $\\mathcal{O}(N)$,\nit means its execution time increases linearly with\nthe number of input elements (for example, searching for a\ngiven value in an unsorted list is $\\mathcal{O}\\left(N\\right)$). Bubble sort is\nan example of an $O\\left(N^2\\right)$ algorithm; the exact number of\noperations performed may, hypothetically, be $N + \\frac{1}{2} N^2$,\nmeaning that the computational cost grows quadratically with\nthe number of input elements.</p>\n<a href=\"#fnref-big_o\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-fast\">\n<p>While ideally we don't want to reimplement existing\nalgorithms, sometimes it becomes necessary in order to obtain\nthe best execution speeds possible, and tools\nlike <a href=\"http://cython.org\">Cython</a>—which compiles Python to\nC—and <a href=\"http://numba.pydata.org\">Numba</a>—which does\njust-in-time compilation of Python code—make life a lot\neasier (and faster!). If you are able to use GPL-licenced\nsoftware, you may consider\nusing <a href=\"https://github.com/hgomersall/pyFFTW\">PyFFTW</a> for\nfaster FFTs.</p>\n<a href=\"#fnref-fast\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-odd_n\">\n<p>We leave it as an exercise for the reader to picture the\nsituation for $N$ odd. In this chapter, all examples use\neven-order DFTs.</p>\n<a href=\"#fnref-odd_n\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-choosing_a_window\">\n<p>The classical windowing functions include Hann,\nHamming, and Blackman. They differ in their\nsidelobe levels and in the broadening of the\nmain lobe (in the Fourier domain). A modern and\nflexible window function that is close to\noptimal for most applications is the Kaiser\nwindow—a good approximation to the optimal\nprolate spheroid window, which concentrates the\nmost energy into the main lobe. The Kaiser\nwindow can be tuned to suit the particular\napplication, as illustrated in the main text, by\nadjusting the parameter $\\beta$.</p>\n<a href=\"#fnref-choosing_a_window\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>"},{"url":"/docs/content/algo/","relativePath":"docs/content/algo.md","relativeDir":"docs/content","base":"algo.md","name":"algo","frontmatter":{"title":"Algorithms & Data Structures","subtitle":"The Algorithms & Data Structures provides you with a blueprint of default post and page styles.","image":"images/5.jpg","seo":{"title":"Algorithms & Data Structures","description":"A reference for suggested typographic treatment and styles for your content","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Algorithms & Data Structures","keyName":"property"},{"name":"og:description","value":"A reference for suggested typographic treatment and styles for your content","keyName":"property"},{"name":"og:image","value":"images/5.jpg","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Algorithms & Data Structures"},{"name":"twitter:description","value":"A reference for suggested typographic treatment and styles for your content"},{"name":"twitter:image","value":"images/5.jpg","relativeUrl":true}]},"template":"docs"},"html":"<h1>Fundamental Data Structures In JavaScript</h1>\n<br>\n<br>\n<br>\n<h1>   Algorithms </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://bgoonz-branch-the-algos.vercel.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1>  The Algos Bgoonz Branch </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://thealgorithms.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<iframe  height=\"1400\" src=\"https://ds-algo-official.netlify.app/\" frameborder=\"0\" allowfullscreen style=\"zoom:0.7;\"></iframe>\n<p>Fundamental Data Structures In JavaScript</p>\n<h2>Data structures in JavaScript</h2>\n<p>Here's a website I created to practice data structures!\n<a href=\"https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/\"><strong>directory</strong>\n<em>Edit description</em>ds-algo-official-c3dw6uapg-bgoonz.vercel.app</a></p>\n<p>Here's the repo that the website is built on:\n<a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\"><strong>bgoonz/DS-ALGO-OFFICIAL</strong>\n<em>Navigation ####Author:Bryan Guner Big O notation is the language we use for talking about how long an algorithm takes…</em>github.com</a></p>\n<h2>Resources (article content below):</h2>\n<h3>Videos</h3>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=0IAPZzGSbME&#x26;list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&#x26;index=2&#x26;t=0s\">Abdul Bari: YouTubeChannel for Algorithms</a></li>\n</ul>\n<iframe width=\"700\" height=\"515\" src=\"https://www.youtube.com/embed/0IAPZzGSbME\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=lxja8wBwN0k&#x26;list=PLKKfKV1b9e8ps6dD3QA5KFfHdiWj9cB1s\">Data Structures and algorithms</a></li>\n</ul>\n<iframe width=\"700\" height=\"515\" src=\"https://www.youtube.com/embed/lxja8wBwN0k\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<ul>\n<li><a href=\"https://www.youtube.com/playlist?list=PLmGElG-9wxc9Us6IK6Qy-KHlG_F3IS6Q9\">Data Structures and algorithms Course</a></li>\n</ul>\n<iframe width=\"700\" height=\"515\" src=\"https://www.youtube.com/embed/videoseries?list=PLmGElG-9wxc9Us6IK6Qy-KHlG_F3IS6Q9\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<ul>\n<li><a href=\"https://www.khanacademy.org/computing/computer-science/algorithms\">Khan Academy</a></li>\n</ul>\n<iframe width=\"714\" height=\"401\" src=\"https://www.youtube.com/embed/CvSOaYi89B4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<ul>\n<li><a href=\"https://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\">Data structures by mycodeschool</a>Pre-requisite for this lesson is good understanding of pointers in C.</li>\n</ul>\n<iframe width=\"700\" height=\"515\" src=\"https://www.youtube.com/embed/videoseries?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=HtSuA80QTyo&#x26;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\">MIT 6.006: Intro to Algorithms(2011)</a></li>\n</ul>\n<iframe width=\"700\" height=\"515\" src=\"https://www.youtube.com/embed/HtSuA80QTyo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=5_5oE5lgrhw&#x26;list=PLu0W_9lII9ahIappRPN0MCAgtOu3lQjQi\">Data Structures and Algorithms by Codewithharry</a></li>\n</ul>\n<iframe width=\"700\" height=\"515\" src=\"https://www.youtube.com/embed/5_5oE5lgrhw\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h3>Books</h3>\n<ul>\n<li><a href=\"https://edutechlearners.com/download/Introduction_to_algorithms-3rd%20Edition.pdf\">Introduction to Algorithms</a> by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein</li>\n<li><a href=\"http://www.sso.sy/sites/default/files/competitive%20programming%203_1.pdf\">Competitive Programming 3</a> by Steven Halim and Felix Halim</li>\n<li><a href=\"https://cses.fi/book/book.pdf\">Competitive Programmers Hand Book</a> Beginner friendly hand book for competitive programmers.</li>\n<li><a href=\"https://github.com/Amchuz/My-Data-Structures-and-Algorithms-Resources/raw/master/Books/Data%20Structures%20and%20Algorithms%20-%20Narasimha%20Karumanchi.pdf\">Data Structures and Algorithms Made Easy</a> by Narasimha Karumanchi</li>\n<li><a href=\"https://github.com/Amchuz/My-Data-Structures-and-Algorithms-Resources/raw/master/Books/Learning%20Algorithms%20Through%20Programming%20and%20Puzzle%20Solving.pdf\">Learning Algorithms Through Programming and Puzzle Solving</a> by Alexander Kulikov and Pavel Pevzner</li>\n</ul>\n<h3>Coding practice</h3>\n<ul>\n<li><a href=\"https://leetcode.com/\">LeetCode</a></li>\n<li><a href=\"https://www.interviewbit.com/\">InterviewBit</a></li>\n<li><a href=\"https://codility.com/\">Codility</a></li>\n<li><a href=\"https://www.hackerrank.com/\">HackerRank</a></li>\n<li><a href=\"https://projecteuler.net/\">Project Euler</a></li>\n<li><a href=\"https://spoj.com/\">Spoj</a></li>\n<li><a href=\"https://code.google.com/codejam/contests.html\">Google Code Jam practice problems</a></li>\n<li><a href=\"https://www.hackerearth.com/\">HackerEarth</a></li>\n<li><a href=\"https://www.topcoder.com/\">Top Coder</a></li>\n<li><a href=\"https://www.codechef.com/\">CodeChef</a></li>\n<li><a href=\"https://www.codewars.com/\">Codewars</a></li>\n<li><a href=\"https://codesignal.com/\">CodeSignal</a></li>\n<li><a href=\"http://codekata.com/\">CodeKata</a></li>\n<li><a href=\"https://www.firecode.io/\">Firecode</a></li>\n</ul>\n<h3>Courses</h3>\n<ul>\n<li><a href=\"https://academy.zerotomastery.io/p/master-the-coding-interview-faang-interview-prep\">Master the Coding Interview: Big Tech (FAANG) Interviews</a> Course by Andrei and his team.</li>\n<li><a href=\"https://realpython.com/python-data-structures\">Common Python Data Structures</a> Data structures are the fundamental constructs around which you build your programs. Each data structure provides a particular way of organizing data so it can be accessed efficiently, depending on your use case. Python ships with an extensive set of data structures in its standard library.</li>\n<li><a href=\"https://www.geeksforgeeks.org/fork-cpp-course-structure\">Fork CPP</a> A good course for beginners.</li>\n<li><a href=\"https://codeforces.com/edu/course/2\">EDU</a> Advanced course.</li>\n<li><a href=\"https://www.udacity.com/course/c-for-programmers--ud210\">C++ For Programmers</a> Learn features and constructs for C++.</li>\n</ul>\n<h3>Guides</h3>\n<ul>\n<li><a href=\"http://www.geeksforgeeks.org/\">GeeksForGeeks — A CS portal for geeks</a></li>\n<li><a href=\"https://www.learneroo.com/subjects/8\">Learneroo — Algorithms</a></li>\n<li><a href=\"http://www.topcoder.com/tc?d1=tutorials&#x26;d2=alg_index&#x26;module=Static\">Top Coder tutorials</a></li>\n<li><a href=\"http://www.infoarena.ro/training-path\">Infoarena training path</a> (RO)</li>\n<li>Steven &#x26; Felix Halim — <a href=\"https://uva.onlinejudge.org/index.php?option=com_onlinejudge&#x26;Itemid=8&#x26;category=118\">Increasing the Lower Bound of Programming Contests</a> (UVA Online Judge)</li>\n</ul>\n<h2><strong><em>space</em></strong></h2>\n<blockquote>\n<p><em>The space complexity represents the memory consumption of a data structure. As for most of the things in life, you can't have it all, so it is with the data structures. You will generally need to trade some time for space or the other way around.</em></p>\n</blockquote>\n<h2><em>time</em></h2>\n<blockquote>\n<p><em>The time complexity for a data structure is in general more diverse than its space complexity.</em></p>\n</blockquote>\n<h2><em>Several operations</em></h2>\n<blockquote>\n<p><em>In contrary to algorithms, when you look at the time complexity for data structures you need to express it for several operations that you can do with data structures. It can be adding elements, deleting elements, accessing an element or even searching for an element.</em></p>\n</blockquote>\n<h2><em>Dependent on data</em></h2>\n<blockquote>\n<p><em>Something that data structure and algorithms have in common when talking about time complexity is that they are both dealing with data. When you deal with data you become dependent on them and as a result the time complexity is also dependent of the data that you received. To solve this problem we talk about 3 different time complexity.</em></p>\n</blockquote>\n<ul>\n<li><strong>The best-case complexity: when the data looks the best</strong></li>\n<li><strong>The worst-case complexity: when the data looks the worst</strong></li>\n<li><strong>The average-case complexity: when the data looks average</strong></li>\n</ul>\n<h2>Big O notation</h2>\n<p>The complexity is usually expressed with the Big O notation. The wikipedia page about this subject is pretty complex but you can find here a good summary of the different complexity for the most famous data structures and sorting algorithms.</p>\n<h2>The Array data structure</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*Qk3UYgeqXamRrFLR.gif\"></p>\n<h2>Definition</h2>\n<p>An Array data structure, or simply an Array, is a data structure consisting of a collection of elements (values or variables), each identified by at least one array index or key. The simplest type of data structure is a linear array, also called one-dimensional array. From Wikipedia</p>\n<p>Arrays are among the oldest and most important data structures and are used by every program. They are also used to implement many other data structures.</p>\n<p><em>Complexity</em>\n<em>Average</em>\n<em>Access Search Insertion Deletion</em></p>\n<p>O(1) O(n) O(1) O(n)</p>\n<pre><code class=\"language-js\">class ArrayADT {\n    constructor() {\n        this.array = [];\n    }\n\n    add(data) {\n        this.array.push(data);\n    }\n\n    remove(data) {\n        this.array = this.array.filter((current) => current !== data);\n    }\n\n    search(data) {\n        const foundIndex = this.array.indexOf(data);\n        if (foundIndex === -1) {\n            return foundIndex;\n        }\n\n        return null;\n    }\n\n    getAtIndex(index) {\n        return this.array[index];\n    }\n\n    length() {\n        return this.array.length;\n    }\n\n    print() {\n        console.log(this.array.join(' '));\n    }\n}\n\nconst array = new ArrayADT();\nconsole.log('const array = new ArrayADT();: ', array);\nconsole.log('-------------------------------');\n\nconsole.log('array.add(1): ', array.add(1));\narray.add(3);\narray.add(4);\nconsole.log('array.add(2);: ', array.add(2), 'array.add(3);', array.add(3), 'array.add(4); ', array.add(4));\n\nconsole.log('-------------------------------');\narray.print();\nconsole.log('-------------------------------');\n\nconsole.log('search 3 gives index 2:', array.search(3));\nconsole.log('-------------------------------');\n\nconsole.log('getAtIndex 2 gives 3:', array.getAtIndex(2));\nconsole.log('-------------------------------');\n\nconsole.log('length is 4:', array.length());\nconsole.log('-------------------------------');\n\narray.remove(3);\narray.print();\nconsole.log('-------------------------------');\n\narray.add(5);\narray.add(5);\narray.print();\nconsole.log('-------------------------------');\n\narray.remove(5);\narray.print();\nconsole.log('-------------------------------');\n/*\n     ~ final : (master) node 01-array.js \n    const array = new ArrayADT();:  ArrayADT { array: [] }\n    -------------------------------\n    array.add(1):  undefined\n    array.add(2);:  undefined array.add(3); undefined array.add(4);  undefined\n    -------------------------------\n    1 3 4 2 3 4\n    -------------------------------\n    search 3 gives index 2: null\n    -------------------------------\n    getAtIndex 2 gives 3: 4\n    -------------------------------\n    length is 4: 6\n    -------------------------------\n    1 4 2 4\n    -------------------------------\n    1 4 2 4 5 5\n    -------------------------------\n    1 4 2 4\n    -------------------------------\n     ~ final : (master) \n     */\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*-BJ2hU-CZO2kuzu4x5a53g.png\"></p>\n<p>indexvalue0 … this is the first value, stored at zero position</p>\n<ol>\n<li>The index of an array <strong>runs in sequence</strong></li>\n<li>This could be useful for storing data that are required to be ordered, such as rankings or queues</li>\n<li>In JavaScript, array's value could be mixed; meaning value of each index could be of different data, be it String, Number or even Objects</li>\n</ol>\n<pre><code class=\"language-js\">    // 1. Creating Arrays\n    let firstArray = [\"a\",\"b\",\"c\"];\n    let secondArray = [\"d\",\"e\",\"f\"];\n\n    // 2. Access an Array Item\n    console.log(firstArray[0]); // Results: \"a\"\n\n    // 3. Loop over an Array\n    firstArray.forEach(function(item, index, array){\n        console.log(item, index);\n    });\n    // Results:\n    // a 0\n    // b 1\n    // c 2\n\n    // 4. Add new item to END of array\n    secondArray.push('g');\n    console.log(secondArray);\n    // Results: [\"d\",\"e\",\"f\", \"g\"]\n\n    // 5. Remove item from END of array\n    secondArray.pop();\n    console.log(secondArray);\n    // Results: [\"d\",\"e\",\"f\"]\n\n    // 6. Remove item from FRONT of array\n    secondArray.shift();\n    console.log(secondArray);\n    // Results: [\"e\",\"f\"]\n\n    // 7. Add item to FRONT of array\n    secondArray.unshift(\"d\");\n    console.log(secondArray);\n    // Results: [\"d\",\"e\",\"f\"]\n\n    // 8. Find INDEX of an item in array\n    let position = secondArray.indexOf('f');\n    // Results: 2\n\n    // 9. Remove Item by Index Position\n    secondArray.splice(position, 1);\n    console.log(secondArray);\n    // Note, the second argument, in this case \"1\",\n    // represent the number of array elements to be removed\n    // Results:  [\"d\",\"e\"]\n\n    // 10. Copy an Array\n    let shallowCopy = secondArray.slice();\n    console.log(secondArray);\n    console.log(shallowCopy);\n    // Results: ShallowCopy === [\"d\",\"e\"]\n\n    // 11. JavaScript properties that BEGIN with a digit MUST be accessed using bracket notation\n    renderer.3d.setTexture(model, 'character.png');     // a syntax error\n    renderer['3d'].setTexture(model, 'character.png');  // works properly\n\n\n    // 12. Combine two Arrays\n    let thirdArray = firstArray.concat(secondArray);\n    console.log(thirdArray);\n    // [\"a\",\"b\",\"c\", \"d\", \"e\"];\n\n    // 13. Combine all Array elements into a string\n    console.log(thirdArray.join()); // Results: a,b,c,d,e\n    console.log(thirdArray.join('')); // Results: abcde\n    console.log(thirdArray.join('-')); // Results: a-b-c-d-e\n\n    // 14. Reversing an Array (in place, i.e. destructive)\n    console.log(thirdArray.reverse()); // [\"e\", \"d\", \"c\", \"b\", \"a\"]\n\n    // 15. sort\n    let unsortedArray = [\"Alphabet\", \"Zoo\", \"Products\", \"Computer Science\", \"Computer\"];\n    console.log(unsortedArray.sort());\n    // Results: [\"Alphabet\", \"Computer\", \"Computer Science\", \"Products\", \"Zoo\" ]\n</code></pre>\n<h2>2. Objects</h2>\n<p>Think of objects as a logical grouping of a bunch of properties.</p>\n<p>Properties could be some variable that it's storing or some methods that it's using.</p>\n<p>I also visualize an object as a table.</p>\n<p>The main difference is that object's \"index\" need not be numbers and is not necessarily sequenced.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2572/1*KVZkD2zrgEa_47igW8Hq8g.png\"></p>\n<pre><code class=\"language-js\">// 16. Creating an Object\n\nlet newObj = {\n    name: \"I'm an object\",\n    values: [1, 10, 11, 20],\n    others: '',\n    '1property': 'example of property name starting with digit'\n};\n\n// 17. Figure out what keys/properties are in an object\nconsole.log(Object.keys(newObj));\n// Results: [ 'name', 'values', 'others', '1property' ]\n\n// 18. Show all values stored in the object\nconsole.log(Object.values(newObj));\n\n// Results:\n// [ 'I\\'m an object',\n//   [ 1, 10, 11, 20 ],\n//   '',\n//   'example of property name starting with digit' ]\n\n// 19. Show all key and values of the object\nfor (let [key, value] of Object.entries(newObj)) {\n    console.log(`${key}: ${value}`);\n}\n// Results:\n// name: I'm an object\n// values: 1,10,11,20\n// others:\n// 1property: example of property name starting with digit\n\n// 20. Accessing Object's Properties\n// Two different ways to access properties, both produce same results\nconsole.log(newObj.name);\nconsole.log(newObj['name']);\n\n// But if the property name starts with a digit,\n// we CANNOT use dot notation\nconsole.log(newObj['1property']);\n\n// 21. Adding a Method to an Object\nnewObj.helloWorld = function () {\n    console.log('Hello World from inside an object!');\n};\n\n// 22. Invoking an Object's Method\nnewObj.helloWorld();\n</code></pre>\n<h2>The Hash Table</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*avbxLAFocSV6vsl5.gif\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2048/0*3GJiRoLyEoZ_aIlO\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Hash Table (Hash Map) is a data structure used to implement an associative array, a structure that can map keys to values. A Hash Table uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found. From Wikipedia</em></p>\n</blockquote>\n<p>Hash Tables are considered the more efficient data structure for lookup and for this reason, they are widely used.</p>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion</p>\n<ul>\n<li>\n<p>O(1) O(1) O(1)</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n</li>\n</ul>\n<p>Note, here I am storing another object for every hash in my Hash Table.</p>\n<pre><code class=\"language-js\">class HashTable {\n    constructor(size) {\n        this.values = {};\n        this.numberOfValues = 0;\n        this.size = size;\n    }\n    add(key, value) {\n        let hash = this.calculateHash(key);\n        if (!this.values.hasOwnProperty(hash)) {\n            this.values[hash] = {};\n        }\n        if (!this.values[hash].hasOwnProperty(key)) {\n            this.numberOfValues++;\n        }\n        this.values[hash][key] = value;\n    }\n    remove(key) {\n        let hash = this.calculateHash(key);\n        if (this.values.hasOwnProperty(hash) &#x26;&#x26; this.values[hash].hasOwnProperty(key)) {\n            delete this.values[hash][key];\n            this.numberOfValues--;\n        }\n    }\n    calculateHash(key) {\n        return key.toString().length % this.size;\n    }\n    search(key) {\n        let hash = this.calculateHash(key);\n        if (this.values.hasOwnProperty(hash) &#x26;&#x26; this.values[hash].hasOwnProperty(key)) {\n            return this.values[hash][key];\n        } else {\n            return null;\n        }\n    }\n    length() {\n        return this.numberOfValues;\n    }\n    print() {\n        let string = '';\n        for (let value in this.values) {\n            for (let key in this.values[value]) {\n                string += this.values[value][key] + ' ';\n            }\n        }\n        console.log(string.trim());\n    }\n}\nlet hashTable = new HashTable(3);\nhashTable.add('first', 1);\nhashTable.add('second', 2);\nhashTable.add('third', 3);\nhashTable.add('fourth', 4);\nhashTable.add('fifth', 5);\nhashTable.print(); // => 2 4 1 3 5\nconsole.log('length gives 5:', hashTable.length()); // => 5\nconsole.log('search second gives 2:', hashTable.search('second')); // => 2\nhashTable.remove('fourth');\nhashTable.remove('first');\nhashTable.print(); // => 2 3 5\nconsole.log('length gives 3:', hashTable.length()); // => 3\n/*\n       ~ js-files : (master) node hash.js \n    2 4 1 3 5\n    length gives 5: 5\n    search second gives 2: 2\n    2 3 5\n    length gives 3: 3\n    */\n</code></pre>\n<h2>The Set</h2>\n<h2>Sets</h2>\n<p>Sets are pretty much what it sounds like. It's the same intuition as Set in Mathematics. I visualize Sets as Venn Diagrams.</p>\n<pre><code class=\"language-js\">// 23. Creating a new Set\nlet newSet = new Set();\n\n// 24. Adding new elements to a set\nnewSet.add(1); // Set[1]\nnewSet.add('text'); // Set[1, \"text\"]\n\n// 25. Check if element is in set\nnewSet.has(1); // true\n\n// 24. Check size of set\nconsole.log(newSet.size); // Results: 2\n\n// 26. Delete element from set\nnewSet.delete(1); // Set[\"text\"]\n\n// 27. Set Operations: isSuperSet\nfunction isSuperset(set, subset) {\n    for (let elem of subset) {\n        if (!set.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n// 28. Set Operations: union\nfunction union(setA, setB) {\n    let _union = new Set(setA);\n    for (let elem of setB) {\n        _union.add(elem);\n    }\n    return _union;\n}\n\n// 29. Set Operations: intersection\nfunction intersection(setA, setB) {\n    let _intersection = new Set();\n    for (let elem of setB) {\n        if (setA.has(elem)) {\n            _intersection.add(elem);\n        }\n    }\n    return _intersection;\n}\n// 30. Set Operations: symmetricDifference\nfunction symmetricDifference(setA, setB) {\n    let _difference = new Set(setA);\n    for (let elem of setB) {\n        if (_difference.has(elem)) {\n            _difference.delete(elem);\n        } else {\n            _difference.add(elem);\n        }\n    }\n    return _difference;\n}\n// 31. Set Operations: difference\nfunction difference(setA, setB) {\n    let _difference = new Set(setA);\n    for (let elem of setB) {\n        _difference.delete(elem);\n    }\n    return _difference;\n}\n\n// Examples\nlet setA = new Set([1, 2, 3, 4]);\nlet setB = new Set([2, 3]);\nlet setC = new Set([3, 4, 5, 6]);\n\nconsole.log(isSuperset(setA, setB)); // => true\nconsole.log(union(setA, setC)); // => Set [1, 2, 3, 4, 5, 6]\nconsole.log(intersection(setA, setC)); // => Set [3, 4]\nconsole.log(symmetricDifference(setA, setC)); // => Set [1, 2, 5, 6]\nconsole.log(difference(setA, setC)); // => Set [1, 2]\n</code></pre>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*gOE33ANZP2ujbjIG\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Set is an abstract data type that can store certain values, without any particular order, and no repeated values. It is a computer implementation of the mathematical concept of a finite Set. From Wikipedia</em></p>\n</blockquote>\n<p>The Set data structure is usually used to test whether elements belong to set of values. Rather then only containing elements, Sets are more used to perform operations on multiple values at once with methods such as union, intersect, etc…</p>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion</p>\n<ul>\n<li>\n<p>O(n) O(n) O(n)</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"language-js\">function Set() {\n    this.values = [];\n    this.numberOfValues = 0;\n}\n\nSet.prototype.add = function (value) {\n    if (!~this.values.indexOf(value)) {\n        this.values.push(value);\n        this.numberOfValues++;\n    }\n};\nSet.prototype.remove = function (value) {\n    let index = this.values.indexOf(value);\n    if (~index) {\n        this.values.splice(index, 1);\n        this.numberOfValues--;\n    }\n};\nSet.prototype.contains = function (value) {\n    return this.values.indexOf(value) !== -1;\n};\nSet.prototype.union = function (set) {\n    let newSet = new Set();\n    set.values.forEach(function (value) {\n        newSet.add(value);\n    });\n    this.values.forEach(function (value) {\n        newSet.add(value);\n    });\n    return newSet;\n};\nSet.prototype.intersect = function (set) {\n    let newSet = new Set();\n    this.values.forEach(function (value) {\n        if (set.contains(value)) {\n            newSet.add(value);\n        }\n    });\n    return newSet;\n};\nSet.prototype.difference = function (set) {\n    let newSet = new Set();\n    this.values.forEach(function (value) {\n        if (!set.contains(value)) {\n            newSet.add(value);\n        }\n    });\n    return newSet;\n};\nSet.prototype.isSubset = function (set) {\n    return set.values.every(function (value) {\n        return this.contains(value);\n    }, this);\n};\nSet.prototype.length = function () {\n    return this.numberOfValues;\n};\nSet.prototype.print = function () {\n    console.log(this.values.join(' '));\n};\n\nlet set = new Set();\nset.add(1);\nset.add(2);\nset.add(3);\nset.add(4);\nset.print(); // => 1 2 3 4\nset.remove(3);\nset.print(); // => 1 2 4\nconsole.log('contains 4 is true:', set.contains(4)); // => true\nconsole.log('contains 3 is false:', set.contains(3)); // => false\nconsole.log('---');\nlet set1 = new Set();\nset1.add(1);\nset1.add(2);\nlet set2 = new Set();\nset2.add(2);\nset2.add(3);\nlet set3 = set2.union(set1);\nset3.print(); // => 1 2 3\nlet set4 = set2.intersect(set1);\nset4.print(); // => 2\nlet set5 = set.difference(set3); // 1 2 4 diff 1 2 3\nset5.print(); // => 4\nlet set6 = set3.difference(set); // 1 2 3 diff 1 2 4\nset6.print(); // => 3\nconsole.log('set1 subset of set is true:', set.isSubset(set1)); // => true\nconsole.log('set2 subset of set is false:', set.isSubset(set2)); // => false\nconsole.log('set1 length gives 2:', set1.length()); // => 2\nconsole.log('set3 length gives 3:', set3.length()); // => 3\n</code></pre>\n<h2>The Singly Linked List</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2048/0*fLs64rV-Xq19aVCA.gif\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Singly Linked List is a linear collection of data elements, called nodes pointing to the next node by means of pointer. It is a data structure consisting of a group of nodes which together represent a sequence. Under the simplest form, each node is composed of data and a reference (in other words, a link) to the next node in the sequence.</em></p>\n</blockquote>\n<p>Linked Lists are among the simplest and most common data structures because it allows for efficient insertion or removal of elements from any position in the sequence.</p>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n<pre><code class=\"language-js\">function Node(data) {\n    this.data = data;\n    this.next = null;\n}\n\nfunction SinglyLinkedList() {\n    this.head = null;\n    this.tail = null;\n    this.numberOfValues = 0;\n}\n\nSinglyLinkedList.prototype.add = function (data) {\n    let node = new Node(data);\n    if (!this.head) {\n        this.head = node;\n        this.tail = node;\n    } else {\n        this.tail.next = node;\n        this.tail = node;\n    }\n    this.numberOfValues++;\n};\nSinglyLinkedList.prototype.remove = function (data) {\n    let previous = this.head;\n    let current = this.head;\n    while (current) {\n        if (current.data === data) {\n            if (current === this.head) {\n                this.head = this.head.next;\n            }\n            if (current === this.tail) {\n                this.tail = previous;\n            }\n            previous.next = current.next;\n            this.numberOfValues--;\n        } else {\n            previous = current;\n        }\n        current = current.next;\n    }\n};\nSinglyLinkedList.prototype.insertAfter = function (data, toNodeData) {\n    let current = this.head;\n    while (current) {\n        if (current.data === toNodeData) {\n            let node = new Node(data);\n            if (current === this.tail) {\n                this.tail.next = node;\n                this.tail = node;\n            } else {\n                node.next = current.next;\n                current.next = node;\n            }\n            this.numberOfValues++;\n        }\n        current = current.next;\n    }\n};\nSinglyLinkedList.prototype.traverse = function (fn) {\n    let current = this.head;\n    while (current) {\n        if (fn) {\n            fn(current);\n        }\n        current = current.next;\n    }\n};\nSinglyLinkedList.prototype.length = function () {\n    return this.numberOfValues;\n};\nSinglyLinkedList.prototype.print = function () {\n    let string = '';\n    let current = this.head;\n    while (current) {\n        string += current.data + ' ';\n        current = current.next;\n    }\n    console.log(string.trim());\n};\n\nlet singlyLinkedList = new SinglyLinkedList();\nsinglyLinkedList.print(); // => ''\nsinglyLinkedList.add(1);\nsinglyLinkedList.add(2);\nsinglyLinkedList.add(3);\nsinglyLinkedList.add(4);\nsinglyLinkedList.print(); // => 1 2 3 4\nconsole.log('length is 4:', singlyLinkedList.length()); // => 4\nsinglyLinkedList.remove(3); // remove value\nsinglyLinkedList.print(); // => 1 2 4\nsinglyLinkedList.remove(9); // remove non existing value\nsinglyLinkedList.print(); // => 1 2 4\nsinglyLinkedList.remove(1); // remove head\nsinglyLinkedList.print(); // => 2 4\nsinglyLinkedList.remove(4); // remove tail\nsinglyLinkedList.print(); // => 2\nconsole.log('length is 1:', singlyLinkedList.length()); // => 1\nsinglyLinkedList.add(6);\nsinglyLinkedList.print(); // => 2 6\nsinglyLinkedList.insertAfter(3, 2);\nsinglyLinkedList.print(); // => 2 3 6\nsinglyLinkedList.insertAfter(4, 3);\nsinglyLinkedList.print(); // => 2 3 4 6\nsinglyLinkedList.insertAfter(5, 9); // insertAfter a non existing node\nsinglyLinkedList.print(); // => 2 3 4 6\nsinglyLinkedList.insertAfter(5, 4);\nsinglyLinkedList.insertAfter(7, 6); // insertAfter the tail\nsinglyLinkedList.print(); // => 2 3 4 5 6 7\nsinglyLinkedList.add(8); // add node with normal method\nsinglyLinkedList.print(); // => 2 3 4 5 6 7 8\nconsole.log('length is 7:', singlyLinkedList.length()); // => 7\nsinglyLinkedList.traverse(function (node) {\n    node.data = node.data + 10;\n});\nsinglyLinkedList.print(); // => 12 13 14 15 16 17 18\nsinglyLinkedList.traverse(function (node) {\n    console.log(node.data);\n}); // => 12 13 14 15 16 17 18\nconsole.log('length is 7:', singlyLinkedList.length()); // => 7\n</code></pre>\n<h2>The Doubly Linked List</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*TQXiR-L_itiG3WP-.gif\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Doubly Linked List is a linked data structure that consists of a set of sequentially linked records called nodes. Each node contains two fields, called links, that are references to the previous and to the next node in the sequence of nodes. From Wikipedia</em></p>\n</blockquote>\n<p>Having two node links allow traversal in either direction but adding or removing a node in a doubly linked list requires changing more links than the same operations on a Singly Linked List.</p>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n<pre><code>class Node {\n    constructor(data) {\n        this.data = data;\n        this.previous = null;\n        this.next = null;\n    }\n}\nclass DoublyLinkedList {\n    constructor() {\n        this.head = null;\n        this.tail = null;\n        this.numberOfValues = 0;\n    }\n\n    add(data) {\n        let node = new Node(data);\n        if (!this.head) {\n            this.head = node;\n            this.tail = node;\n        } else {\n            node.previous = this.tail;\n            this.tail.next = node;\n            this.tail = node;\n        }\n        this.numberOfValues++;\n    }\n    remove(data) {\n        let current = this.head;\n        while (current) {\n            if (current.data === data) {\n                if (current === this.head &#x26;&#x26; current === this.tail) {\n                    this.head = null;\n                    this.tail = null;\n                } else if (current === this.head) {\n                    this.head = this.head.next;\n                    this.head.previous = null;\n                } else if (current === this.tail) {\n                    this.tail = this.tail.previous;\n                    this.tail.next = null;\n                } else {\n                    current.previous.next = current.next;\n                    current.next.previous = current.previous;\n                }\n                this.numberOfValues--;\n            }\n            current = current.next;\n        }\n    }\n    insertAfter(data, toNodeData) {\n        let current = this.head;\n        while (current) {\n            if (current.data === toNodeData) {\n                let node = new Node(data);\n                if (current === this.tail) {\n                    this.add(data);\n                } else {\n                    current.next.previous = node;\n                    node.previous = current;\n                    node.next = current.next;\n                    current.next = node;\n                    this.numberOfValues++;\n                }\n            }\n            current = current.next;\n        }\n    }\n    traverse(fn) {\n        let current = this.head;\n        while (current) {\n            if (fn) {\n                fn(current);\n            }\n            current = current.next;\n        }\n    }\n    traverseReverse(fn) {\n        let current = this.tail;\n        while (current) {\n            if (fn) {\n                fn(current);\n            }\n            current = current.previous;\n        }\n    }\n    length() {\n        return this.numberOfValues;\n    }\n    print() {\n        let string = \"\";\n        let current = this.head;\n        while (current) {\n            string += current.data + \" \";\n            current = current.next;\n        }\n        console.log(string.trim());\n    }\n}\n\nlet doublyLinkedList = new DoublyLinkedList();\ndoublyLinkedList.print(); // => ''\ndoublyLinkedList.add(1);\ndoublyLinkedList.add(2);\ndoublyLinkedList.add(3);\ndoublyLinkedList.add(4);\ndoublyLinkedList.print(); // => 1 2 3 4\nconsole.log(\"length is 4:\", doublyLinkedList.length()); // => 4\ndoublyLinkedList.remove(3); // remove value\ndoublyLinkedList.print(); // => 1 2 4\ndoublyLinkedList.remove(9); // remove non existing value\ndoublyLinkedList.print(); // => 1 2 4\ndoublyLinkedList.remove(1); // remove head\ndoublyLinkedList.print(); // => 2 4\ndoublyLinkedList.remove(4); // remove tail\ndoublyLinkedList.print(); // => 2\nconsole.log(\"length is 1:\", doublyLinkedList.length()); // => 1\ndoublyLinkedList.remove(2); // remove tail, the list should be empty\ndoublyLinkedList.print(); // => ''\nconsole.log(\"length is 0:\", doublyLinkedList.length()); // => 0\ndoublyLinkedList.add(2);\ndoublyLinkedList.add(6);\ndoublyLinkedList.print(); // => 2 6\ndoublyLinkedList.insertAfter(3, 2);\ndoublyLinkedList.print(); // => 2 3 6\ndoublyLinkedList.traverseReverse(function (node) {\n    console.log(node.data);\n});\ndoublyLinkedList.insertAfter(4, 3);\ndoublyLinkedList.print(); // => 2 3 4 6\ndoublyLinkedList.insertAfter(5, 9); // insertAfter a non existing node\ndoublyLinkedList.print(); // => 2 3 4 6\ndoublyLinkedList.insertAfter(5, 4);\ndoublyLinkedList.insertAfter(7, 6); // insertAfter the tail\ndoublyLinkedList.print(); // => 2 3 4 5 6 7\ndoublyLinkedList.add(8); // add node with normal method\ndoublyLinkedList.print(); // => 2 3 4 5 6 7 8\nconsole.log(\"length is 7:\", doublyLinkedList.length()); // => 7\ndoublyLinkedList.traverse(function (node) {\n    node.data = node.data + 10;\n});\ndoublyLinkedList.print(); // => 12 13 14 15 16 17 18\ndoublyLinkedList.traverse(function (node) {\n    console.log(node.data);\n}); // => 12 13 14 15 16 17 18\nconsole.log(\"length is 7:\", doublyLinkedList.length()); // => 7\ndoublyLinkedList.traverseReverse(function (node) {\n    console.log(node.data);\n}); // => 18 17 16 15 14 13 12\ndoublyLinkedList.print(); // => 12 13 14 15 16 17 18\nconsole.log(\"length is 7:\", doublyLinkedList.length()); // => 7\n/*\n   ~ js-files : (master) node double-linked-list.js\n\n1 2 3 4\nlength is 4: 4\n1 2 4\n1 2 4\n2 4\n2\nlength is 1: 1\n\nlength is 0: 0\n2 6\n2 3 6\n6\n3\n2\n2 3 4 6\n2 3 4 6\n2 3 4 5 6 7\n2 3 4 5 6 7 8\nlength is 7: 7\n12 13 14 15 16 17 18\n12\n13\n14\n15\n16\n17\n18\nlength is 7: 7\n18\n17\n16\n15\n14\n13\n12\n12 13 14 15 16 17 18\nlength is 7: 7\n ~ js-files : (master)\n*/\n</code></pre>\n<h2>The Stack</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/4050/0*qsjYW-Lvfo22ecLE.gif\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Stack is an abstract data type that serves as a collection of elements, with two principal operations: push, which adds an element to the collection, and pop, which removes the most recently added element that was not yet removed. The order in which elements come off a Stack gives rise to its alternative name, LIFO (for last in, first out). From Wikipedia</em></p>\n</blockquote>\n<p>A Stack often has a third method peek which allows to check the last pushed element without popping it.</p>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n<pre><code>function Stack() {\n  this.stack = [];\n}\n\nStack.prototype.push = function(value) {\n  this.stack.push(value);\n};\nStack.prototype.pop = function() {\n  return this.stack.pop();\n};\nStack.prototype.peek = function() {\n  return this.stack[this.stack.length - 1];\n};\nStack.prototype.length = function() {\n  return this.stack.length;\n};\nStack.prototype.print = function() {\n  console.log(this.stack.join(' '));\n};\n\nlet stack = new Stack();\nstack.push(1);\nstack.push(2);\nstack.push(3);\nstack.print(); // => 1 2 3\nconsole.log('length is 3:', stack.length()); // => 3\nconsole.log('peek is 3:', stack.peek()); // => 3\nconsole.log('pop is 3:', stack.pop()); // => 3\nstack.print(); // => 1 2\nconsole.log('pop is 2:', stack.pop());  // => 2\nconsole.log('length is 1:', stack.length()); // => 1\nconsole.log('pop is 1:', stack.pop()); // => 1\nstack.print(); // => ''\nconsole.log('peek is undefined:', stack.peek()); // => undefined\nconsole.log('pop is undefined:', stack.pop()); // => undefined\n</code></pre>\n<h2>The Queue</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/4050/0*YvfuX5tKP7-V0p7v.gif\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Queue is a particular kind of abstract data type or collection in which the entities in the collection are kept in order and the principal operations are the addition of entities to the rear terminal position, known as enqueue, and removal of entities from the front terminal position, known as dequeue. This makes the Queue a First-In-First-Out (FIFO) data structure. In a FIFO data structure, the first element added to the Queue will be the first one to be removed.</em></p>\n</blockquote>\n<p>As for the Stack data structure, a peek operation is often added to the Queue data structure. It returns the value of the front element without dequeuing it.</p>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(n)</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n<pre><code>function Queue() {\n  this.queue = [];\n}\n\nQueue.prototype.enqueue = function(value) {\n  this.queue.push(value);\n};\nQueue.prototype.dequeue = function() {\n  return this.queue.shift();\n};\nQueue.prototype.peek = function() {\n  return this.queue[0];\n};\nQueue.prototype.length = function() {\n  return this.queue.length;\n};\nQueue.prototype.print = function() {\n  console.log(this.queue.join(' '));\n};\n\nlet queue = new Queue();\nqueue.enqueue(1);\nqueue.enqueue(2);\nqueue.enqueue(3);\nqueue.print(); // => 1 2 3\nconsole.log('length is 3:', queue.length()); // => 3\nconsole.log('peek is 1:', queue.peek()); // => 3\nconsole.log('dequeue is 1:', queue.dequeue()); // => 1\nqueue.print(); // => 2 3\nconsole.log('dequeue is 2:', queue.dequeue());  // => 2\nconsole.log('length is 1:', queue.length()); // => 1\nconsole.log('dequeue is 3:', queue.dequeue()); // => 3\nqueue.print(); // => ''\nconsole.log('peek is undefined:', queue.peek()); // => undefined\nconsole.log('dequeue is undefined:', queue.dequeue()); // => undefined\n</code></pre>\n<h2>The Tree</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*yUiQ-NaPKeLQnN7n\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Tree is a widely used data structure that simulates a hierarchical tree structure, with a root value and subtrees of children with a parent node. A tree data structure can be defined recursively as a collection of nodes (starting at a root node), where each node is a data structure consisting of a value, together with a list of references to nodes (the \"children\"), with the constraints that no reference is duplicated, and none points to the root node. From Wikipedia</em></p>\n</blockquote>\n<p>Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(n) O(n)\nTo get a full overview of the time and space complexity of the Tree data structure, have a look to this excellent Big O cheat sheet.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*DCdQiB6XqBJCrFRz12BwqA.png\"></p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n<pre><code>function Node(data) {\n  this.data = data;\n  this.children = [];\n}\n\nfunction Tree() {\n  this.root = null;\n}\n\nTree.prototype.add = function(data, toNodeData) {\n  let node = new Node(data);\n  let parent = toNodeData ? this.findBFS(toNodeData) : null;\n  if(parent) {\n    parent.children.push(node);\n  } else {\n    if(!this.root) {\n      this.root = node;\n    } else {\n      return 'Root node is already assigned';\n    }\n  }\n};\nTree.prototype.remove = function(data) {\n  if(this.root.data === data) {\n    this.root = null;\n  }\n\n  let queue = [this.root];\n  while(queue.length) {\n    let node = queue.shift();\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      if(node.children[i].data === data) {\n        node.children.splice(i, 1);\n      } else {\n        queue.push(node.children[i]);\n      }\n    }\n  }\n};\nTree.prototype.contains = function(data) {\n  return this.findBFS(data) ? true : false;\n};\nTree.prototype.findBFS = function(data) {\n  let queue = [this.root];\n  while(queue.length) {\n    let node = queue.shift();\n    if(node.data === data) {\n      return node;\n    }\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n  return null;\n};\nTree.prototype._preOrder = function(node, fn) {\n  if(node) {\n    if(fn) {\n      fn(node);\n    }\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      this._preOrder(node.children[i], fn);\n    }\n  }\n};\nTree.prototype._postOrder = function(node, fn) {\n  if(node) {\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      this._postOrder(node.children[i], fn);\n    }\n    if(fn) {\n      fn(node);\n    }\n  }\n};\nTree.prototype.traverseDFS = function(fn, method) {\n  let current = this.root;\n  if(method) {\n    this['_' + method](current, fn);\n  } else {\n    this._preOrder(current, fn);\n  }\n};\nTree.prototype.traverseBFS = function(fn) {\n  let queue = [this.root];\n  while(queue.length) {\n    let node = queue.shift();\n    if(fn) {\n      fn(node);\n    }\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n};\nTree.prototype.print = function() {\n  if(!this.root) {\n    return console.log('No root node found');\n  }\n  let newline = new Node('|');\n  let queue = [this.root, newline];\n  let string = '';\n  while(queue.length) {\n    let node = queue.shift();\n    string += node.data.toString() + ' ';\n    if(node === newline &#x26;&#x26; queue.length) {\n      queue.push(newline);\n    }\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n  console.log(string.slice(0, -2).trim());\n};\nTree.prototype.printByLevel = function() {\n  if(!this.root) {\n    return console.log('No root node found');\n  }\n  let newline = new Node('\\n');\n  let queue = [this.root, newline];\n  let string = '';\n  while(queue.length) {\n    let node = queue.shift();\n    string += node.data.toString() + (node.data !== '\\n' ? ' ' : '');\n    if(node === newline &#x26;&#x26; queue.length) {\n      queue.push(newline);\n    }\n    for(let i = 0; i &#x3C; node.children.length; i++) {\n      queue.push(node.children[i]);\n    }\n  }\n  console.log(string.trim());\n};\n\nlet tree = new Tree();\ntree.add('ceo');\ntree.add('cto', 'ceo');\ntree.add('dev1', 'cto');\ntree.add('dev2', 'cto');\ntree.add('dev3', 'cto');\ntree.add('cfo', 'ceo');\ntree.add('accountant', 'cfo');\ntree.add('cmo', 'ceo');\ntree.print(); // => ceo | cto cfo cmo | dev1 dev2 dev3 accountant\ntree.printByLevel();  // => ceo \\n cto cfo cmo \\n dev1 dev2 dev3 accountant\nconsole.log('tree contains dev1 is true:', tree.contains('dev1')); // => true\nconsole.log('tree contains dev4 is false:', tree.contains('dev4')); // => false\nconsole.log('--- BFS');\ntree.traverseBFS(function(node) { console.log(node.data); }); // => ceo cto cfo cmo dev1 dev2 dev3 accountant\nconsole.log('--- DFS preOrder');\ntree.traverseDFS(function(node) { console.log(node.data); }, 'preOrder'); // => ceo cto dev1 dev2 dev3 cfo accountant cmo\nconsole.log('--- DFS postOrder');\ntree.traverseDFS(function(node) { console.log(node.data); }, 'postOrder'); // => dev1 dev2 dev3 cto accountant cfo cmo ceo\ntree.remove('cmo');\ntree.print(); // => ceo | cto cfo | dev1 dev2 dev3 accountant\ntree.remove('cfo');\ntree.print(); // => ceo | cto | dev1 dev2 dev3\n</code></pre>\n<h2>The Graph</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*q31mL1kjFWlIzw3l.gif\"></p>\n<h2><em>Definition</em></h2>\n<blockquote>\n<p><em>A Graph data structure consists of a finite (and possibly mutable) set of vertices or nodes or points, together with a set of unordered pairs of these vertices for an undirected Graph or a set of ordered pairs for a directed Graph. These pairs are known as edges, arcs, or lines for an undirected Graph and as arrows, directed edges, directed arcs, or directed lines for a directed Graph. The vertices may be part of the Graph structure, or may be external entities represented by integer indices or references. From Wikipedia</em></p>\n</blockquote>\n<p>A Graph data structure may also associate to each edge some edge value, such as a symbolic label or a numeric attribute (cost, capacity, length, etc.).</p>\n<p>Representation\nThere are different ways of representing a graph, each of them with its own advantages and disadvantages. Here are the main 2:</p>\n<p>Adjacency list: For every vertex a list of adjacent vertices is stored. This can be viewed as storing the list of edges. This data structure allows the storage of additional data on the vertices and edges.\nAdjacency matrix: Data are stored in a two-dimensional matrix, in which the rows represent source vertices and columns represent destination vertices. The data on the edges and vertices must be stored externally.\nComplexity\nAdjacency list\nStorage Add Vertex Add Edge Query\nO( V + E\nAdjacency matrix\nStorage Add Vertex Add Edge Query\nO( V ^2) O(</p>\n<p>Graph</p>\n<blockquote>\n<p><em>The code</em></p>\n</blockquote>\n<pre><code>//below uses the adjacency list representation.\n</code></pre>\n<pre><code class=\"language-js\">        function Graph() {\n          this.vertices = [];\n          this.edges = [];\n          this.numberOfEdges = 0;\n        }\n\n        Graph.prototype.addVertex = function(vertex) {\n          this.vertices.push(vertex);\n          this.edges[vertex] = [];\n        };\n        Graph.prototype.removeVertex = function(vertex) {\n          let index = this.vertices.indexOf(vertex);\n          if(~index) {\n            this.vertices.splice(index, 1);\n          }\n          while(this.edges[vertex].length) {\n            let adjacentVertex = this.edges[vertex].pop();\n            this.removeEdge(adjacentVertex, vertex);\n          }\n        };\n        Graph.prototype.addEdge = function(vertex1, vertex2) {\n          this.edges[vertex1].push(vertex2);\n          this.edges[vertex2].push(vertex1);\n          this.numberOfEdges++;\n        };\n        Graph.prototype.removeEdge = function(vertex1, vertex2) {\n          let index1 = this.edges[vertex1] ? this.edges[vertex1].indexOf(vertex2) : -1;\n          let index2 = this.edges[vertex2] ? this.edges[vertex2].indexOf(vertex1) : -1;\n          if(~index1) {\n            this.edges[vertex1].splice(index1, 1);\n            this.numberOfEdges--;\n          }\n          if(~index2) {\n            this.edges[vertex2].splice(index2, 1);\n          }\n        };\n        Graph.prototype.size = function() {\n          return this.vertices.length;\n        };\n        Graph.prototype.relations = function() {\n          return this.numberOfEdges;\n        };\n        Graph.prototype.traverseDFS = function(vertex, fn) {\n          if(!~this.vertices.indexOf(vertex)) {\n            return console.log('Vertex not found');\n          }\n          let visited = [];\n          this._traverseDFS(vertex, visited, fn);\n        };\n        Graph.prototype._traverseDFS = function(vertex, visited, fn) {\n          visited[vertex] = true;\n          if(this.edges[vertex] !== undefined) {\n            fn(vertex);\n          }\n          for(let i = 0; i &#x3C; this.edges[vertex].length; i++) {\n            if(!visited[this.edges[vertex][i]]) {\n              this._traverseDFS(this.edges[vertex][i], visited, fn);\n            }\n          }\n        };\n        Graph.prototype.traverseBFS = function(vertex, fn) {\n          if(!~this.vertices.indexOf(vertex)) {\n            return console.log('Vertex not found');\n          }\n          let queue = [];\n          queue.push(vertex);\n          let visited = [];\n          visited[vertex] = true;\n\n          while(queue.length) {\n            vertex = queue.shift();\n            fn(vertex);\n            for(let i = 0; i &#x3C; this.edges[vertex].length; i++) {\n              if(!visited[this.edges[vertex][i]]) {\n                visited[this.edges[vertex][i]] = true;\n                queue.push(this.edges[vertex][i]);\n              }\n            }\n          }\n        };\n        Graph.prototype.pathFromTo = function(vertexSource, vertexDestination) {\n          if(!~this.vertices.indexOf(vertexSource)) {\n            return console.log('Vertex not found');\n          }\n          let queue = [];\n          queue.push(vertexSource);\n          let visited = [];\n          visited[vertexSource] = true;\n          let paths = [];\n\n          while(queue.length) {\n            let vertex = queue.shift();\n            for(let i = 0; i &#x3C; this.edges[vertex].length; i++) {\n              if(!visited[this.edges[vertex][i]]) {\n                visited[this.edges[vertex][i]] = true;\n                queue.push(this.edges[vertex][i]);\n                // save paths between vertices\n                paths[this.edges[vertex][i]] = vertex;\n              }\n            }\n          }\n          if(!visited[vertexDestination]) {\n            return undefined;\n          }\n\n          let path = [];\n          for(let j = vertexDestination; j != vertexSource; j = paths[j]) {\n            path.push(j);\n          }\n          path.push(j);\n          return path.reverse().join('-');\n        };\n        Graph.prototype.print = function() {\n          console.log(this.vertices.map(function(vertex) {\n            return (vertex + ' -> ' + this.edges[vertex].join(', ')).trim();\n          }, this).join(' | '));\n        };\n        ```\n        let graph = new Graph();\n        graph.addVertex(1);\n        graph.addVertex(2);\n        graph.addVertex(3);\n        graph.addVertex(4);\n        graph.addVertex(5);\n        graph.addVertex(6);\n        graph.print(); // 1 -> | 2 -> | 3 -> | 4 -> | 5 -> | 6 ->\n        graph.addEdge(1, 2);\n        graph.addEdge(1, 5);\n        graph.addEdge(2, 3);\n        graph.addEdge(2, 5);\n        graph.addEdge(3, 4);\n        graph.addEdge(4, 5);\n        graph.addEdge(4, 6);\n        graph.print(); // 1 -> 2, 5 | 2 -> 1, 3, 5 | 3 -> 2, 4 | 4 -> 3, 5, 6 | 5 -> 1, 2, 4 | 6 -> 4\n        console.log('graph size (number of vertices):', graph.size()); // => 6\n        console.log('graph relations (number of edges):', graph.relations()); // => 7\n        graph.traverseDFS(1, function(vertex) { console.log(vertex); }); // => 1 2 3 4 5 6\n        console.log('---');\n        graph.traverseBFS(1, function(vertex) { console.log(vertex); }); // => 1 2 5 3 4 6\n        graph.traverseDFS(0, function(vertex) { console.log(vertex); }); // => 'Vertex not found'\n        graph.traverseBFS(0, function(vertex) { console.log(vertex); }); // => 'Vertex not found'\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-5-1\n        console.log('path from 3 to 5:', graph.pathFromTo(3, 5)); // => 3-2-5\n        graph.removeEdge(1, 2);\n        graph.removeEdge(4, 5);\n        graph.removeEdge(10, 11);\n        console.log('graph relations (number of edges):', graph.relations()); // => 5\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-3-2-5-1\n        graph.addEdge(1, 2);\n        graph.addEdge(4, 5);\n        console.log('graph relations (number of edges):', graph.relations()); // => 7\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-5-1\n        graph.removeVertex(5);\n        console.log('graph size (number of vertices):', graph.size()); // => 5\n        console.log('graph relations (number of edges):', graph.relations()); // => 4\n        console.log('path from 6 to 1:', graph.pathFromTo(6, 1)); // => 6-4-3-2-1\n</code></pre>"},{"url":"/docs/content/gatsby-Queries-Mutations/","relativePath":"docs/content/gatsby-Queries-Mutations.md","relativeDir":"docs/content","base":"gatsby-Queries-Mutations.md","name":"gatsby-Queries-Mutations","frontmatter":{"title":"Queries and Mutations (Gatsby)","weight":1,"excerpt":"Queries and Mutations","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>Querying Data in Components using StaticQuery</h1>\n<h2>TABLE OF CONTENTS</h2>\n<ul>\n<li>\n<p><a href=\"https://www.gatsbyjs.com/docs/how-to/querying-data/static-query/#how-to-use-staticquery-in-components\">How to use StaticQuery in components</a></p>\n<ul>\n<li><a href=\"https://www.gatsbyjs.com/docs/how-to/querying-data/static-query/#basic-example\">Basic example</a></li>\n<li><a href=\"https://www.gatsbyjs.com/docs/how-to/querying-data/static-query/#usestaticquery\">useStaticQuery</a></li>\n<li><a href=\"https://www.gatsbyjs.com/docs/how-to/querying-data/static-query/#typechecking\">Typechecking</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.gatsbyjs.com/docs/how-to/querying-data/static-query/#how-staticquery-differs-from-page-query\">How StaticQuery differs from page query</a></li>\n</ul>\n<p>Gatsby v2 introduces <code>StaticQuery</code>, a new API that allows components to retrieve data via a GraphQL query.</p>\n<p>In this guide, you'll see an example using <code>StaticQuery</code>, and learn about <a href=\"https://www.gatsbyjs.com/docs/how-to/querying-data/static-query/#how-staticquery-differs-from-page-query\">the difference between a StaticQuery and a page query</a>.</p>\n<h2><a href=\"https://www.gatsbyjs.com/docs/how-to/querying-data/static-query/#how-to-use-staticquery-in-components\"></a>How to use <code>StaticQuery</code> in components</h2>\n<p><em>Video hosted on <a href=\"https://egghead.io/lessons/gatsby-load-data-using-graphql-queries-directly-in-a-gatsby-v2-component-with-staticquery\">egghead.io</a></em>.</p>\n<h3><a href=\"https://www.gatsbyjs.com/docs/how-to/querying-data/static-query/#basic-example\"></a>Basic example</h3>\n<p>Here is an example of a <code>Header</code> component using <code>StaticQuery</code>:</p>\n<p>src/components/header.js</p>\n<p>Copysrc/components/header.js: copy code to clipboard`</p>\n<p>import React from \"react\"</p>\n<p>import { StaticQuery, graphql } from \"gatsby\"</p>\n<p>export default function Header() {</p>\n<p>return (</p>\n<p>&#x3C;StaticQuery</p>\n<p>query={graphql`</p>\n<p>query HeadingQuery {</p>\n<p>site {</p>\n<p>siteMetadata {</p>\n<p>title</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>`}</p>\n<p>render={data => (</p>\n  <header>\n  <h1>{data.site.siteMetadata.title}</h1>\n  </header>\n<p>)}</p>\n<p>/></p>\n<p>)</p>\n<p>}</p>\n<p>`</p>\n<p>By using <code>StaticQuery</code>, you can colocate a component with its data. It is no longer required to, say, pass data down from <code>Layout</code> to <code>Header</code>.</p>\n<h3><a href=\"https://www.gatsbyjs.com/docs/how-to/querying-data/static-query/#usestaticquery\"></a>useStaticQuery</h3>\n<p>There's also a React hooks version of StaticQuery: check out the documentation on <a href=\"https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\"><code>useStaticQuery</code></a></p>\n<h3><a href=\"https://www.gatsbyjs.com/docs/how-to/querying-data/static-query/#typechecking\"></a>Typechecking</h3>\n<p>With the above pattern, you lose the ability to typecheck with PropTypes. To regain typechecking while achieving the same result, you can change the component to:</p>\n<p>src/components/header.js</p>\n<p>Copysrc/components/header.js: copy code to clipboard`</p>\n<p>import React from \"react\"</p>\n<p>import { StaticQuery, graphql } from \"gatsby\"</p>\n<p>import PropTypes from \"prop-types\"</p>\n<p>const Header = ({ data }) => (</p>\n  <header>\n  <h1>{data.site.siteMetadata.title}</h1>\n  </header>\n<p>)</p>\n<p>export default function MyHeader(props) {</p>\n<p>return (</p>\n<p>&#x3C;StaticQuery</p>\n<p>query={graphql`</p>\n<p>query {</p>\n<p>site {</p>\n<p>siteMetadata {</p>\n<p>title</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>`}</p>\n<p>render={data => &#x3C;Header data={data} {...props} />}</p>\n<p>/></p>\n<p>)</p>\n<p>}</p>\n<p>Header.propTypes = {</p>\n<p>data: PropTypes.shape({</p>\n<p>site: PropTypes.shape({</p>\n<p>siteMetadata: PropTypes.shape({</p>\n<p>title: PropTypes.string.isRequired,</p>\n<p>}).isRequired,</p>\n<p>}).isRequired,</p>\n<p>}).isRequired,</p>\n<p>}</p>\n<p>`</p>\n<h2><a href=\"https://www.gatsbyjs.com/docs/how-to/querying-data/static-query/#how-staticquery-differs-from-page-query\"></a>How StaticQuery differs from page query</h2>\n<p>StaticQuery can do most of the things that page query can, including fragments. The main differences are:</p>\n<ul>\n<li>page queries can accept variables (via <code>pageContext</code>) but can only be added to <em>page</em> components</li>\n<li>StaticQuery does not accept variables (hence the name \"static\"), but can be used in <em>any</em> component, including pages</li>\n<li>StaticQuery does not work with raw React.createElement calls; please use JSX, e.g. <code>&#x3C;StaticQuery /></code></li>\n</ul>\n<h1>GraphQL</h1>\n<h1>Queries and Mutations</h1>\n<p>On this page, you'll learn in detail about how to query a GraphQL server.</p>\n<h2>Fields<a href=\"https://graphql.org/learn/queries/#fields\"></a></h2>\n<p>At its simplest, GraphQL is about asking for specific fields on objects. Let's start by looking at a very simple query and the result we get when we run it:</p>\n<p>{</p>\n<p>hero {</p>\n<p>name</p>\n<p>}</p>\n<p>}</p>\n<p>{</p>\n<p>\"data\": {</p>\n<p>\"hero\": {</p>\n<p>\"name\": \"R2-D2\"</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>You can see immediately that the query has exactly the same shape as the result. This is essential to GraphQL, because you always get back what you expect, and the server knows exactly what fields the client is asking for.</p>\n<p>The field <code>name</code> returns a <code>String</code> type, in this case the name of the main hero of Star Wars, <code>\"R2-D2\"</code>.</p>\n<blockquote>\n<p>Oh, one more thing - the query above is <em>interactive</em>. That means you can change it as you like and see the new result. Try adding an <code>appearsIn</code> field to the <code>hero</code> object in the query, and see the new result.</p>\n</blockquote>\n<p>In the previous example, we just asked for the name of our hero which returned a String, but fields can also refer to Objects. In that case, you can make a <em>sub-selection</em> of fields for that object. GraphQL queries can traverse related objects and their fields, letting clients fetch lots of related data in one request, instead of making several roundtrips as one would need in a classic REST architecture.</p>\n<p>{</p>\n<p>hero {</p>\n<p>name</p>\n<h1>Queries can have comments!</h1>\n<p>friends {</p>\n<p>name</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>{</p>\n<p>\"data\": {</p>\n<p>\"hero\": {</p>\n<p>\"name\": \"R2-D2\",</p>\n<p>\"friends\": [</p>\n<p>{</p>\n<p>\"name\": \"Luke Skywalker\"</p>\n<p>},</p>\n<p>{</p>\n<p>\"name\": \"Han Solo\"</p>\n<p>},</p>\n<p>{</p>\n<p>\"name\": \"Leia Organa\"</p>\n<p>}</p>\n<p>]</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>Note that in this example, the <code>friends</code> field returns an array of items. GraphQL queries look the same for both single items or lists of items, however we know which one to expect based on what is indicated in the schema.</p>\n<h2>Arguments<a href=\"https://graphql.org/learn/queries/#arguments\"></a></h2>\n<p>If the only thing we could do was traverse objects and their fields, GraphQL would already be a very useful language for data fetching. But when you add the ability to pass arguments to fields, things get much more interesting.</p>\n<p>{</p>\n<p>human(id: \"1000\") {</p>\n<p>name</p>\n<p>height</p>\n<p>}</p>\n<p>}</p>\n<p>{</p>\n<p>\"data\": {</p>\n<p>\"human\": {</p>\n<p>\"name\": \"Luke Skywalker\",</p>\n<p>\"height\": 1.72</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>In a system like REST, you can only pass a single set of arguments - the query parameters and URL segments in your request. But in GraphQL, every field and nested object can get its own set of arguments, making GraphQL a complete replacement for making multiple API fetches. You can even pass arguments into scalar fields, to implement data transformations once on the server, instead of on every client separately.</p>\n<p>{</p>\n<p>human(id: \"1000\") {</p>\n<p>name</p>\n<p>height(unit: FOOT)</p>\n<p>}</p>\n<p>}</p>\n<p>{</p>\n<p>\"data\": {</p>\n<p>\"human\": {</p>\n<p>\"name\": \"Luke Skywalker\",</p>\n<p>\"height\": 5.6430448</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>Arguments can be of many different types. In the above example, we have used an Enumeration type, which represents one of a finite set of options (in this case, units of length, either <code>METER</code> or <code>FOOT</code>). GraphQL comes with a default set of types, but a GraphQL server can also declare its own custom types, as long as they can be serialized into your transport format.</p>\n<p><a href=\"https://graphql.org/learn/schema\">Read more about the GraphQL type system here.</a></p>\n<h2>Aliases<a href=\"https://graphql.org/learn/queries/#aliases\"></a></h2>\n<p>If you have a sharp eye, you may have noticed that, since the result object fields match the name of the field in the query but don't include arguments, you can't directly query for the same field with different arguments. That's why you need <em>aliases</em> - they let you rename the result of a field to anything you want.</p>\n<p>{</p>\n<p>empireHero: hero(episode: EMPIRE) {</p>\n<p>name</p>\n<p>}</p>\n<p>jediHero: hero(episode: JEDI) {</p>\n<p>name</p>\n<p>}</p>\n<p>}</p>\n<p>{</p>\n<p>\"data\": {</p>\n<p>\"empireHero\": {</p>\n<p>\"name\": \"Luke Skywalker\"</p>\n<p>},</p>\n<p>\"jediHero\": {</p>\n<p>\"name\": \"R2-D2\"</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>In the above example, the two <code>hero</code> fields would have conflicted, but since we can alias them to different names, we can get both results in one request.</p>\n<h2>Fragments<a href=\"https://graphql.org/learn/queries/#fragments\"></a></h2>\n<p>Let's say we had a relatively complicated page in our app, which lets us look at two heroes side by side, along with their friends. You can imagine that such a query could quickly get complicated, because we would need to repeat the fields at least once - one for each side of the comparison.</p>\n<p>That's why GraphQL includes reusable units called <em>fragments</em>. Fragments let you construct sets of fields, and then include them in queries where you need to. Here's an example of how you could solve the above situation using fragments:</p>\n<p>{</p>\n<p>leftComparison: hero(episode: EMPIRE) {</p>\n<p>...comparisonFields</p>\n<p>}</p>\n<p>rightComparison: hero(episode: JEDI) {</p>\n<p>...comparisonFields</p>\n<p>}</p>\n<p>}</p>\n<p>​</p>\n<p>fragment comparisonFields on Character {</p>\n<p>name</p>\n<p>appearsIn</p>\n<p>friends {</p>\n<p>name</p>\n<p>}</p>\n<p>}</p>\n<p>{</p>\n<p>\"data\": {</p>\n<p>\"leftComparison\": {</p>\n<p>\"name\": \"Luke Skywalker\",</p>\n<p>\"appearsIn\": [</p>\n<p>\"NEWHOPE\",</p>\n<p>\"EMPIRE\",</p>\n<p>\"JEDI\"</p>\n<p>],</p>\n<p>\"friends\": [</p>\n<p>{</p>\n<p>\"name\": \"Han Solo\"</p>\n<p>},</p>\n<p>{</p>\n<p>\"name\": \"Leia Organa\"</p>\n<p>},</p>\n<p>{</p>\n<p>\"name\": \"C-3PO\"</p>\n<p>},</p>\n<p>{</p>\n<p>\"name\": \"R2-D2\"</p>\n<p>}</p>\n<p>]</p>\n<p>},</p>\n<p>\"rightComparison\": {</p>\n<p>\"name\": \"R2-D2\",</p>\n<p>\"appearsIn\": [</p>\n<p>\"NEWHOPE\",</p>\n<p>\"EMPIRE\",</p>\n<p>\"JEDI\"</p>\n<p>],</p>\n<p>\"friends\": [</p>\n<p>{</p>\n<p>\"name\": \"Luke Skywalker\"</p>\n<p>},</p>\n<p>{</p>\n<p>\"name\": \"Han Solo\"</p>\n<p>},</p>\n<p>{</p>\n<p>\"name\": \"Leia Organa\"</p>\n<p>}</p>\n<p>]</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>You can see how the above query would be pretty repetitive if the fields were repeated. The concept of fragments is frequently used to split complicated application data requirements into smaller chunks, especially when you need to combine lots of UI components with different fragments into one initial data fetch.</p>\n<h3>Using variables inside fragments<a href=\"https://graphql.org/learn/queries/#using-variables-inside-fragments\"></a></h3>\n<p>It is possible for fragments to access variables declared in the query or mutation. See <a href=\"https://graphql.org/learn/queries/#variables\">variables</a>.</p>\n<p>query HeroComparison($first: Int = 3) {</p>\n<p>leftComparison: hero(episode: EMPIRE) {</p>\n<p>...comparisonFields</p>\n<p>}</p>\n<p>rightComparison: hero(episode: JEDI) {</p>\n<p>...comparisonFields</p>\n<p>}</p>\n<p>}</p>\n<p>​</p>\n<p>fragment comparisonFields on Character {</p>\n<p>name</p>\n<p>friendsConnection(first: $first) {</p>\n<p>totalCount</p>\n<p>edges {</p>\n<p>node {</p>\n<p>name</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>​</p>\n<p>{</p>\n<p>\"errors\": [</p>\n<p>{</p>\n<p>\"message\": \"Buffer is not defined\",</p>\n<p>\"locations\": [</p>\n<p>{</p>\n<p>\"line\": 12,</p>\n<p>\"column\": 3</p>\n<p>}</p>\n<p>],</p>\n<p>\"path\": [</p>\n<p>\"leftComparison\",</p>\n<p>\"friendsConnection\"</p>\n<p>]</p>\n<p>},</p>\n<p>{</p>\n<p>\"message\": \"Buffer is not defined\",</p>\n<p>\"locations\": [</p>\n<p>{</p>\n<p>\"line\": 12,</p>\n<p>\"column\": 3</p>\n<p>}</p>\n<p>],</p>\n<p>\"path\": [</p>\n<p>\"rightComparison\",</p>\n<p>\"friendsConnection\"</p>\n<p>]</p>\n<p>}</p>\n<p>],</p>\n<p>\"data\": {</p>\n<p>\"leftComparison\": null,</p>\n<p>\"rightComparison\": null</p>\n<p>}</p>\n<p>}</p>\n<h2>Operation name<a href=\"https://graphql.org/learn/queries/#operation-name\"></a></h2>\n<p>Up until now, we have been using a shorthand syntax where we omit both the <code>query</code> keyword and the query name, but in production apps it's useful to use these to make our code less ambiguous.</p>\n<p>Here's an example that includes the keyword <code>query</code> as <em>operation type</em> and <code>HeroNameAndFriends</code> as <em>operation name</em> :</p>\n<p>query HeroNameAndFriends {</p>\n<p>hero {</p>\n<p>name</p>\n<p>friends {</p>\n<p>name</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>{</p>\n<p>\"data\": {</p>\n<p>\"hero\": {</p>\n<p>\"name\": \"R2-D2\",</p>\n<p>\"friends\": [</p>\n<p>{</p>\n<p>\"name\": \"Luke Skywalker\"</p>\n<p>},</p>\n<p>{</p>\n<p>\"name\": \"Han Solo\"</p>\n<p>},</p>\n<p>{</p>\n<p>\"name\": \"Leia Organa\"</p>\n<p>}</p>\n<p>]</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>The <em>operation type</em> is either <em>query</em>, <em>mutation</em>, or <em>subscription</em> and describes what type of operation you're intending to do. The operation type is required unless you're using the query shorthand syntax, in which case you can't supply a name or variable definitions for your operation.</p>\n<p>The <em>operation name</em> is a meaningful and explicit name for your operation. It is only required in multi-operation documents, but its use is encouraged because it is very helpful for debugging and server-side logging. When something goes wrong (you see errors either in your network logs, or in the logs of your GraphQL server) it is easier to identify a query in your codebase by name instead of trying to decipher the contents. Think of this just like a function name in your favorite programming language. For example, in JavaScript we can easily work only with anonymous functions, but when we give a function a name, it's easier to track it down, debug our code, and log when it's called. In the same way, GraphQL query and mutation names, along with fragment names, can be a useful debugging tool on the server side to identify different GraphQL requests.</p>\n<h2>Variables<a href=\"https://graphql.org/learn/queries/#variables\"></a></h2>\n<p>So far, we have been writing all of our arguments inside the query string. But in most applications, the arguments to fields will be dynamic: For example, there might be a dropdown that lets you select which Star Wars episode you are interested in, or a search field, or a set of filters.</p>\n<p>It wouldn't be a good idea to pass these dynamic arguments directly in the query string, because then our client-side code would need to dynamically manipulate the query string at runtime, and serialize it into a GraphQL-specific format. Instead, GraphQL has a first-class way to factor dynamic values out of the query, and pass them as a separate dictionary. These values are called <em>variables</em>.</p>\n<p>When we start working with variables, we need to do three things:</p>\n<ol>\n<li>Replace the static value in the query with <code>$variableName</code></li>\n<li>Declare <code>$variableName</code> as one of the variables accepted by the query</li>\n<li>Pass <code>variableName: value</code> in the separate, transport-specific (usually JSON) variables dictionary</li>\n</ol>\n<p>Here's what it looks like all together:</p>\n<p>query HeroNameAndFriends($episode: Episode) {</p>\n<p>hero(episode: $episode) {</p>\n<p>name</p>\n<p>friends {</p>\n<p>name</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>{</p>\n<p>\"episode\": \"JEDI\"</p>\n<p>}</p>\n<p>{</p>\n<p>\"data\": {</p>\n<p>\"hero\": {</p>\n<p>\"name\": \"R2-D2\",</p>\n<p>\"friends\": [</p>\n<p>{</p>\n<p>\"name\": \"Luke Skywalker\"</p>\n<p>},</p>\n<p>{</p>\n<p>\"name\": \"Han Solo\"</p>\n<p>},</p>\n<p>{</p>\n<p>\"name\": \"Leia Organa\"</p>\n<p>}</p>\n<p>]</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>Now, in our client code, we can simply pass a different variable rather than needing to construct an entirely new query. This is also in general a good practice for denoting which arguments in our query are expected to be dynamic - we should never be doing string interpolation to construct queries from user-supplied values.</p>\n<h3>Variable definitions<a href=\"https://graphql.org/learn/queries/#variable-definitions\"></a></h3>\n<p>The variable definitions are the part that looks like <code>($episode: Episode)</code> in the query above. It works just like the argument definitions for a function in a typed language. It lists all of the variables, prefixed by <code>$</code>, followed by their type, in this case <code>Episode</code>.</p>\n<p>All declared variables must be either scalars, enums, or input object types. So if you want to pass a complex object into a field, you need to know what input type that matches on the server. Learn more about input object types on the Schema page.</p>\n<p>Variable definitions can be optional or required. In the case above, since there isn't an <code>!</code> next to the <code>Episode</code> type, it's optional. But if the field you are passing the variable into requires a non-null argument, then the variable has to be required as well.</p>\n<p>To learn more about the syntax for these variable definitions, it's useful to learn the GraphQL schema language. The schema language is explained in detail on the Schema page.</p>\n<h3>Default variables<a href=\"https://graphql.org/learn/queries/#default-variables\"></a></h3>\n<p>Default values can also be assigned to the variables in the query by adding the default value after the type declaration.</p>\n<p>query HeroNameAndFriends($episode: Episode = JEDI) {</p>\n<p>hero(episode: $episode) {</p>\n<p>name</p>\n<p>friends {</p>\n<p>name</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>When default values are provided for all variables, you can call the query without passing any variables. If any variables are passed as part of the variables dictionary, they will override the defaults.</p>\n<h2>Directives<a href=\"https://graphql.org/learn/queries/#directives\"></a></h2>\n<p>We discussed above how variables enable us to avoid doing manual string interpolation to construct dynamic queries. Passing variables in arguments solves a pretty big class of these problems, but we might also need a way to dynamically change the structure and shape of our queries using variables. For example, we can imagine a UI component that has a summarized and detailed view, where one includes more fields than the other.</p>\n<p>Let's construct a query for such a component:</p>\n<p>query Hero($episode: Episode, $withFriends: Boolean!) {</p>\n<p>hero(episode: $episode) {</p>\n<p>name</p>\n<p>friends @include(if: $withFriends) {</p>\n<p>name</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>{</p>\n<p>\"episode\": \"JEDI\",</p>\n<p>\"withFriends\": false</p>\n<p>}</p>\n<p>{</p>\n<p>\"data\": {</p>\n<p>\"hero\": {</p>\n<p>\"name\": \"R2-D2\"</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>Try editing the variables above to instead pass <code>true</code> for <code>withFriends</code>, and see how the result changes.</p>\n<p>We needed to use a new feature in GraphQL called a <em>directive</em>. A directive can be attached to a field or fragment inclusion, and can affect execution of the query in any way the server desires. The core GraphQL specification includes exactly two directives, which must be supported by any spec-compliant GraphQL server implementation:</p>\n<ul>\n<li><code>@include(if: Boolean)</code> Only include this field in the result if the argument is <code>true</code>.</li>\n<li><code>@skip(if: Boolean)</code> Skip this field if the argument is <code>true</code>.</li>\n</ul>\n<p>Directives can be useful to get out of situations where you otherwise would need to do string manipulation to add and remove fields in your query. Server implementations may also add experimental features by defining completely new directives.</p>\n<h2>Mutations<a href=\"https://graphql.org/learn/queries/#mutations\"></a></h2>\n<p>Most discussions of GraphQL focus on data fetching, but any complete data platform needs a way to modify server-side data as well.</p>\n<p>In REST, any request might end up causing some side-effects on the server, but by convention it's suggested that one doesn't use <code>GET</code> requests to modify data. GraphQL is similar - technically any query could be implemented to cause a data write. However, it's useful to establish a convention that any operations that cause writes should be sent explicitly via a mutation.</p>\n<p>Just like in queries, if the mutation field returns an object type, you can ask for nested fields. This can be useful for fetching the new state of an object after an update. Let's look at a simple example mutation:</p>\n<p>mutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) {</p>\n<p>createReview(episode: $ep, review: $review) {</p>\n<p>stars</p>\n<p>commentary</p>\n<p>}</p>\n<p>}</p>\n<p>{</p>\n<p>\"ep\": \"JEDI\",</p>\n<p>\"review\": {</p>\n<p>\"stars\": 5,</p>\n<p>\"commentary\": \"This is a great movie!\"</p>\n<p>}</p>\n<p>}</p>\n<p>{</p>\n<p>\"data\": {</p>\n<p>\"createReview\": {</p>\n<p>\"stars\": 5,</p>\n<p>\"commentary\": \"This is a great movie!\"</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>Note how <code>createReview</code> field returns the <code>stars</code> and <code>commentary</code> fields of the newly created review. This is especially useful when mutating existing data, for example, when incrementing a field, since we can mutate and query the new value of the field with one request.</p>\n<p>You might also notice that, in this example, the <code>review</code> variable we passed in is not a scalar. It's an <em>input object type</em>, a special kind of object type that can be passed in as an argument. Learn more about input types on the Schema page.</p>\n<h3>Multiple fields in mutations<a href=\"https://graphql.org/learn/queries/#multiple-fields-in-mutations\"></a></h3>\n<p>A mutation can contain multiple fields, just like a query. There's one important distinction between queries and mutations, other than the name:</p>\n<p><strong>While query fields are executed in parallel, mutation fields run in series, one after the other.</strong></p>\n<p>This means that if we send two <code>incrementCredits</code> mutations in one request, the first is guaranteed to finish before the second begins, ensuring that we don't end up with a race condition with ourselves.</p>\n<h2>Inline Fragments<a href=\"https://graphql.org/learn/queries/#inline-fragments\"></a></h2>\n<p>Like many other type systems, GraphQL schemas include the ability to define interfaces and union types. <a href=\"https://graphql.org/learn/schema/#interfaces\">Learn about them in the schema guide.</a></p>\n<p>If you are querying a field that returns an interface or a union type, you will need to use <em>inline fragments</em> to access data on the underlying concrete type. It's easiest to see with an example:</p>\n<p>query HeroForEpisode($ep: Episode!) {</p>\n<p>hero(episode: $ep) {</p>\n<p>name</p>\n<p>... on Droid {</p>\n<p>primaryFunction</p>\n<p>}</p>\n<p>... on Human {</p>\n<p>height</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>{</p>\n<p>\"ep\": \"JEDI\"</p>\n<p>}</p>\n<p>{</p>\n<p>\"data\": {</p>\n<p>\"hero\": {</p>\n<p>\"name\": \"R2-D2\",</p>\n<p>\"primaryFunction\": \"Astromech\"</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>In this query, the <code>hero</code> field returns the type <code>Character</code>, which might be either a <code>Human</code> or a <code>Droid</code> depending on the <code>episode</code> argument. In the direct selection, you can only ask for fields that exist on the <code>Character</code> interface, such as <code>name</code>.</p>\n<p>To ask for a field on the concrete type, you need to use an <em>inline fragment</em> with a type condition. Because the first fragment is labeled as <code>... on Droid</code>, the <code>primaryFunction</code> field will only be executed if the <code>Character</code> returned from <code>hero</code> is of the <code>Droid</code> type. Similarly for the <code>height</code> field for the <code>Human</code> type.</p>\n<p>Named fragments can also be used in the same way, since a named fragment always has a type attached.</p>\n<h3>Meta fields<a href=\"https://graphql.org/learn/queries/#meta-fields\"></a></h3>\n<p>Given that there are some situations where you don't know what type you'll get back from the GraphQL service, you need some way to determine how to handle that data on the client. GraphQL allows you to request <code>__typename</code>, a meta field, at any point in a query to get the name of the object type at that point.</p>\n<p>{</p>\n<p>search(text: \"an\") {</p>\n<p>__typename</p>\n<p>... on Human {</p>\n<p>name</p>\n<p>}</p>\n<p>... on Droid {</p>\n<p>name</p>\n<p>}</p>\n<p>... on Starship {</p>\n<p>name</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>{</p>\n<p>\"data\": {</p>\n<p>\"search\": [</p>\n<p>{</p>\n<p>\"__typename\": \"Human\",</p>\n<p>\"name\": \"Han Solo\"</p>\n<p>},</p>\n<p>{</p>\n<p>\"__typename\": \"Human\",</p>\n<p>\"name\": \"Leia Organa\"</p>\n<p>},</p>\n<p>{</p>\n<p>\"__typename\": \"Starship\",</p>\n<p>\"name\": \"TIE Advanced x1\"</p>\n<p>}</p>\n<p>]</p>\n<p>}</p>\n<p>}</p>\n<p>In the above query, <code>search</code> returns a union type that can be one of three options. It would be impossible to tell apart the different types from the client without the <code>__typename</code> field.</p>\n<p>GraphQL services provide a few meta fields, the rest of which are used to expose the <a href=\"https://graphql.org/learn/introspection/\">Introspection</a> system.****</p>"},{"url":"/docs/content/lambda-projects/","relativePath":"docs/content/lambda-projects.md","relativeDir":"docs/content","base":"lambda-projects.md","name":"lambda-projects","frontmatter":{"title":"Lambda School Projects","weight":0,"excerpt":"family promise web app","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h1>Family Promise Project:</h1>\n<h1>Table of contents</h1>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/README\">Home</a></li>\n</ul>\n<h2>navigation</h2>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/navigation/navigation\">NAVIGATION</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/navigation/calendar\">Calendar</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/navigation/youtube\">Youtube:</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/navigation/roadmap\">Roadmap:</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/navigation/team-members\">TEAM MEMBERS</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/navigation/running-list-of-notes-links-and-pertinent-info-from-meetings\">Running List Of Notes Links &#x26; Pertinent Info From Meetings</a></li>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/navigation/trello/README\">Trello</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/navigation/trello/github-trello-integration\">Github/Trello Integration</a></li>\n</ul>\n</li>\n</ul>\n<h2>UX</h2>\n<ul>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/ux/untitled/README\">UX_TOPICS</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/ux/untitled/action-items\">Action Items:</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/ux/untitled/accessibility\">Accessibility</a></li>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/ux/untitled/figma-notes/README\">Figma Notes</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/ux/untitled/figma-notes/notes\">Notes</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/ux/untitled/figma-notes/prototyping-in-figma\">Prototyping In Figma</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/ux/untitled/figma-notes/more-notes\">More Notes</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/ux/untitled/ux-design/README\">UX-Design</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/ux/untitled/ux-design/facebook-graph-api\">Facebook Graph API</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/ux/untitled/ant-design/README\">Ant Design</a></p>\n<ul>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/ux/untitled/ant-design/ant-components/README\">ANT Components</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/ux/untitled/ant-design/ant-components/buttons\">Buttons</a></li>\n</ul>\n</li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/ux/untitled/ant-design/ant-docs\">ANT DOCS</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/ux/untitled/ant-design/application-codesandbox\">Application (Codesandbox)</a></li>\n</ul>\n</li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/ux/untitled/examples\">Examples</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/ux/untitled/how-to-add-external-url-links-to-your-prototype\">How to add external URL links to your prototype</a></li>\n</ul>\n</li>\n</ul>\n<h2>CANVAS</h2>\n<ul>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/canvas/design/README\">Design</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/canvas/design/whats-inclusive-design\">What's Inclusive Design?</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/canvas/design/accessibility\">Accessibility</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/canvas/design/what-are-design-systems\">What are Design Systems?</a></li>\n</ul>\n</li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/canvas/canvas\">Canvas</a></li>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/canvas/notes/README\">Notes</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/canvas/notes/user-experience-design\">User Experience Design</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/canvas/notes/user-research\">User Research</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/canvas/notes/interaction-design\">Interaction Design</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/canvas/ux-engineer/README\">UX-Engineer</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/canvas/ux-engineer/patterns\">Patterns</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/canvas/ux-engineer/design-tools\">Design Tools</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/canvas/ux-engineer/design-critiques\">Design Critiques</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/canvas/ux-engineer/product-review\">Product Review</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/canvas/ux-engineer/quiz\">Quiz</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/canvas/ux-engineer/seven-principles-of-design\">Seven Principles of Design</a></li>\n</ul>\n</li>\n</ul>\n<h2>Front End</h2>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/front-end/untitled\">Frontend:</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/front-end/redux\">Redux</a></li>\n</ul>\n<h2>Back End</h2>\n<ul>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/back-end/untitled/README\">Backend:</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/back-end/untitled/api\">API</a></li>\n</ul>\n</li>\n</ul>\n<h2>Research</h2>\n<ul>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/research/untitled/README\">Research Navigation</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/research/untitled/front-end\">Front End</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/research/untitled/back-end\">Back End</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/research/untitled/ux\">UX</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/research/untitled/ptm\">PTM</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/research/untitled/general\">General</a></li>\n</ul>\n</li>\n</ul>\n<h2>DS_API</h2>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/ds_api/untitled\">Data Science API</a></li>\n</ul>\n<h2>ROLES</h2>\n<ul>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/roles/untitled/README\">TEAM ROLES</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/roles/untitled/bryan-guner\">Bryan Guner</a></li>\n</ul>\n</li>\n</ul>\n<h2>Action Items</h2>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/action-items/untitled\">Trello</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/action-items/maps\">Maps</a></li>\n</ul>\n<h2>ARCHITECTURE</h2>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/architecture/dns\">DNS</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/architecture/aws\">AWS</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/architecture/heroku\">Heroku</a></li>\n</ul>\n<h2>Questions</h2>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/questions/from-previous-cohort\">From Previous Cohort</a></li>\n</ul>\n<h2>Standup Notes</h2>\n<ul>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/standup-notes/meeting-notes/README\">Meeting Notes</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/standup-notes/meeting-notes/overview\">Stakeholder Meeting 1</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/standup-notes/meeting-notes/9-29-2021\">9/29/2021</a></li>\n</ul>\n</li>\n</ul>\n<h2>GitHub &#x26; Project Practice</h2>\n<ul>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/github-and-project-practice/untitled/README\">GitHub</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/github-and-project-practice/untitled/untitled\">Github Guide</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/github-and-project-practice/untitled/github-actions\">Github Actions:</a></li>\n</ul>\n</li>\n</ul>\n<h2>MISC</h2>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/misc/untitled\">MISCELLANEOUS</a></li>\n</ul>\n<h2>Background Information</h2>\n<ul>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/background-information/background-info/README\">Background Info</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/background-information/background-info/swagger-open-api-specification\">Swagger OPEN API SPECIFICATION</a></li>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/background-information/background-info/github/README\">GITHUB:</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/background-information/background-info/github/git-bash\">Git Bash</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/background-information/background-info/github/git-prune\">Git Prune:</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>DOCS</h2>\n<ul>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/coding/README\">Coding</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/coding/environment-variables\">Environment Variables</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/coding/git-rebase\">Git Rebase:</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/coding/git-workflow\">Git Workflow:</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/coding/linting-and-formatting\">Linting and Formatting</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/project-docs/README\">Project Docs</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/project-docs/eng-docs-home\">Eng-Docs-Home</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/project-docs/basic-node-api\">Basic Node API</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/project-docs/contributing-to-this-scaffold-project\">Contributing to this scaffold project</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/project-docs/examples\">Examples:</a></li>\n</ul>\n</li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/project-description\">PROJECT DESCRIPTION (Feature List)</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/labs-learners-guide\">Labs Learners Guide</a></li>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/react/README\">REACT</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/react/untitled\">Create React App</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/react/awesome-react\">Awesome React</a></li>\n</ul>\n</li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/untitled\">Links</a></li>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/labs-engineering-docs/README\">Labs Engineering Docs</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/labs-engineering-docs/okta-basics\">Okta Basics</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/labs-engineering-docs/roadmap\">Roadmap</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/docs/labs-engineering-docs/repositories\">Repositories</a></li>\n</ul>\n</li>\n</ul>\n<h2>Workflow</h2>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/workflow/workflow\">Workflow</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/workflow/advice\">Advice</a></li>\n</ul>\n<h2>AWS</h2>\n<ul>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/aws/aws/README\">AWS</a></p>\n<ul>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/aws/aws/elastic-beanstalk/README\">Elastic Beanstalk</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/aws/aws/elastic-beanstalk/elastic-beanstalk-dns\">Elastic Beanstalk DNS</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://bryan-guner.gitbook.io/lambda-labs/aws/aws/amplify/README\">Amplify:</a></p>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/aws/aws/amplify/amplify-dns\">Amplify-DNS</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/aws/untitled-1\">Account Basics</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/aws/aws-networking\">AWS-Networking</a></li>\n</ul>\n<h2>Career &#x26; Job Hunt</h2>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/career-and-job-hunt/career\">Career</a></li>\n</ul>\n<h2>Group 1</h2>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/lambda-labs/group-1/live-implementation\">Live Implementation</a></li>\n</ul>\n<iframe src=\"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Ffile%2FbOwyinWBikQ5jdEpSx5WcI%2FFamily-Promise-Copy\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"Family_Promise_embed\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n<iframe src=\"https://codesandbox.io/embed/family-promise-embed-b434z?autoresize=1&fontsize=12&hidenavigation=1&theme=dark&view=preview\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"Family_Promise_embed\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>"},{"url":"/docs/content/","relativePath":"docs/content/index.md","relativeDir":"docs/content","base":"index.md","name":"index","frontmatter":{"title":"Content","excerpt":"In this section you'll learn how to add syntax highlighting, examples, callouts and much more.","seo":{"title":"Manage Content","description":"This is the manage content page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Manage Content","keyName":"property"},{"name":"og:description","value":"This is the manage content page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Manage Content"},{"name":"twitter:description","value":"This is the manage content page"}]},"template":"docs","weight":1},"html":"<div class=\"note\">\n \n # My Repos:\n<table>\n<thead>\n<tr>\n<th><a href=\"https://github.com/bgoonz/03-fetch-data\">https://github.com/bgoonz/03-fetch-data</a></th>\n<th><a href=\"https://github.com/bgoonz/gatsby-netlify-cms-norwex\">https://github.com/bgoonz/gatsby-netlify-cms-norwex</a></th>\n<th></th>\n<th><a href=\"https://hub.com/bgoonz/React-movie-app\">https://hub.com/bgoonz/React-movie-app</a></th>\n<th><a href=\"https://github.com/bgoonz/Exploring-Promises\">https://github.com/bgoonz/Exploring-Promises</a></th>\n<th><a href=\"https://hub.com/bgoonz/vscode-customized-config\">https://hub.com/bgoonz/vscode-customized-config</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/bgoonz/a-whole-bunch-o-gatsby-templates\">https://github.com/bgoonz/a-whole-bunch-o-gatsby-templates</a></td>\n<td><a href=\"https://github.com/bgoonz/gatsby-react-portfolio\">https://github.com/bgoonz/gatsby-react-portfolio</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/react-redux-medium-clone\">https://hub.com/bgoonz/react-redux-medium-clone</a></td>\n<td><a href=\"https://github.com/bgoonz/express-API-template\">https://github.com/bgoonz/express-API-template</a></td>\n<td><a href=\"https://hub.com/bgoonz/vscode-Extension-readmes\">https://hub.com/bgoonz/vscode-Extension-readmes</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/activity-box\">https://github.com/bgoonz/activity-box</a></td>\n<td><a href=\"https://github.com/bgoonz/GIT-CDN-FILES\">https://github.com/bgoonz/GIT-CDN-FILES</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/react-redux-notes-v5\">https://hub.com/bgoonz/react-redux-notes-v5</a></td>\n<td><a href=\"https://github.com/bgoonz/Express-basic-server-template\">https://github.com/bgoonz/Express-basic-server-template</a></td>\n<td><a href=\"https://hub.com/bgoonz/web-crawler-node\">https://hub.com/bgoonz/web-crawler-node</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/All-Undergrad-Archive\">https://github.com/bgoonz/All-Undergrad-Archive</a></td>\n<td><a href=\"https://github.com/bgoonz/GIT-HTML-PREVIEW-TOOL\">https://github.com/bgoonz/GIT-HTML-PREVIEW-TOOL</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/react-redux-registration-login-example\">https://hub.com/bgoonz/react-redux-registration-login-example</a></td>\n<td><a href=\"https://github.com/bgoonz/express-knex-postgres-boilerplate\">https://github.com/bgoonz/express-knex-postgres-boilerplate</a></td>\n<td><a href=\"https://hub.com/bgoonz/web-dev-interview-prep-quiz-website\">https://hub.com/bgoonz/web-dev-interview-prep-quiz-website</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/alternate-blog-theme\">https://github.com/bgoonz/alternate-blog-theme</a></td>\n<td><a href=\"https://github.com/bgoonz/gitbook\">https://github.com/bgoonz/gitbook</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/React_Notes_V3\">https://hub.com/bgoonz/React<em>Notes</em>V3</a></td>\n<td><a href=\"https://github.com/bgoonz/EXPRESS-NOTES\">https://github.com/bgoonz/EXPRESS-NOTES</a></td>\n<td><a href=\"https://hub.com/bgoonz/web-dev-notes-resource-site\">https://hub.com/bgoonz/web-dev-notes-resource-site</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/anki-cards\">https://github.com/bgoonz/anki-cards</a></td>\n<td><a href=\"https://github.com/bgoonz/github-readme-stats\">https://github.com/bgoonz/github-readme-stats</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/Recursion-Practice-Website\">https://hub.com/bgoonz/Recursion-Practice-Website</a></td>\n<td><a href=\"https://github.com/bgoonz/fast-fourier-transform-\">https://github.com/bgoonz/fast-fourier-transform-</a></td>\n<td><a href=\"https://hub.com/bgoonz/web-dev-setup-checker\">https://hub.com/bgoonz/web-dev-setup-checker</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/ask-me-anything\">https://github.com/bgoonz/ask-me-anything</a></td>\n<td><a href=\"https://github.com/bgoonz/github-reference-repo\">https://github.com/bgoonz/github-reference-repo</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/Regex-and-Express-JS\">https://hub.com/bgoonz/Regex-and-Express-JS</a></td>\n<td><a href=\"https://github.com/bgoonz/form-builder-vanilla-js\">https://github.com/bgoonz/form-builder-vanilla-js</a></td>\n<td><a href=\"https://hub.com/bgoonz/WEB-DEV-TOOLS-HUB\">https://hub.com/bgoonz/WEB-DEV-TOOLS-HUB</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/atlassian-templates\">https://github.com/bgoonz/atlassian-templates</a></td>\n<td><a href=\"https://github.com/bgoonz/GoalsTracker\">https://github.com/bgoonz/GoalsTracker</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/repo-utils\">https://hub.com/bgoonz/repo-utils</a></td>\n<td><a href=\"https://github.com/bgoonz/Front-End-Frameworks-Practice\">https://github.com/bgoonz/Front-End-Frameworks-Practice</a></td>\n<td><a href=\"https://hub.com/bgoonz/web-dev-utils-package\">https://hub.com/bgoonz/web-dev-utils-package</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/Authentication-Notes\">https://github.com/bgoonz/Authentication-Notes</a></td>\n<td><a href=\"https://github.com/bgoonz/graphql-experimentation\">https://github.com/bgoonz/graphql-experimentation</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/resume-cv-portfolio-samples\">https://hub.com/bgoonz/resume-cv-portfolio-samples</a></td>\n<td><a href=\"https://github.com/bgoonz/full-stack-react-redux\">https://github.com/bgoonz/full-stack-react-redux</a></td>\n<td><a href=\"https://hub.com/bgoonz/WebAudioDaw\">https://hub.com/bgoonz/WebAudioDaw</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/bash-commands-walkthrough\">https://github.com/bgoonz/bash-commands-walkthrough</a></td>\n<td><a href=\"https://github.com/bgoonz/https___mihirbeg.com_\">https://github.com/bgoonz/https<em>__mihirbeg.com</em></a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/Revamped-Automatic-Guitar-Effect-Triggering\">https://hub.com/bgoonz/Revamped-Automatic-Guitar-Effect-Triggering</a></td>\n<td><a href=\"https://github.com/bgoonz/Full-Text-Search\">https://github.com/bgoonz/Full-Text-Search</a></td>\n<td><a href=\"https://hub.com/bgoonz/website\">https://hub.com/bgoonz/website</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/bash-config-backup\">https://github.com/bgoonz/bash-config-backup</a></td>\n<td><a href=\"https://github.com/bgoonz/iframe-showcase\">https://github.com/bgoonz/iframe-showcase</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/scope-closure-context\">https://hub.com/bgoonz/scope-closure-context</a></td>\n<td><a href=\"https://github.com/bgoonz/Games\">https://github.com/bgoonz/Games</a></td>\n<td><a href=\"https://github.com/bgoonz/Data-Structures-Algos-Codebase\">https://github.com/bgoonz/Data-Structures-Algos-Codebase</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/bash-shell-utility-functions\">https://github.com/bgoonz/bash-shell-utility-functions</a></td>\n<td><a href=\"https://github.com/bgoonz/Image-Archive-Traning-Data\">https://github.com/bgoonz/Image-Archive-Traning-Data</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/Shell-Script-Practice\">https://hub.com/bgoonz/Shell-Script-Practice</a></td>\n<td><a href=\"https://github.com/bgoonz/MihirBegMusicV3\">https://github.com/bgoonz/MihirBegMusicV3</a></td>\n<td><a href=\"https://github.com/bgoonz/DATA_STRUC_PYTHON_NOTES\">https://github.com/bgoonz/DATA<em>STRUC</em>PYTHON_NOTES</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/bass-station\">https://github.com/bgoonz/bass-station</a></td>\n<td><a href=\"https://github.com/bgoonz/Independent-Blog-Entries\">https://github.com/bgoonz/Independent-Blog-Entries</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/site-analysis\">https://hub.com/bgoonz/site-analysis</a></td>\n<td><a href=\"https://github.com/bgoonz/Mihir_Beg_Final\">https://github.com/bgoonz/Mihir<em>Beg</em>Final</a></td>\n<td><a href=\"https://github.com/bgoonz/design-home-page-with-routes-bq5v7k\">https://github.com/bgoonz/design-home-page-with-routes-bq5v7k</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/bgoonz\">https://github.com/bgoonz/bgoonz</a></td>\n<td><a href=\"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE\">https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/sorting-algorithms\">https://hub.com/bgoonz/sorting-algorithms</a></td>\n<td><a href=\"https://github.com/bgoonz/mini-project-showcase\">https://github.com/bgoonz/mini-project-showcase</a></td>\n<td><a href=\"https://github.com/bgoonz/docs-collection\">https://github.com/bgoonz/docs-collection</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/BGOONZBLOG2.0STABLE\">https://github.com/bgoonz/BGOONZBLOG2.0STABLE</a></td>\n<td><a href=\"https://github.com/bgoonz/JAMSTACK-TEMPLATES\">https://github.com/bgoonz/JAMSTACK-TEMPLATES</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/sorting-algos\">https://hub.com/bgoonz/sorting-algos</a></td>\n<td><a href=\"https://github.com/bgoonz/Music-Theory-n-Web-Synth-Keyboard\">https://github.com/bgoonz/Music-Theory-n-Web-Synth-Keyboard</a></td>\n<td><a href=\"https://github.com/bgoonz/Documentation-site-react\">https://github.com/bgoonz/Documentation-site-react</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/BGOONZ_BLOG_2.0\">https://github.com/bgoonz/BGOONZ<em>BLOG</em>2.0</a></td>\n<td><a href=\"https://github.com/bgoonz/Javascript-Best-Practices_--Tools\">https://github.com/bgoonz/Javascript-Best-Practices_--Tools</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/sqlite3-nodejs-demo\">https://hub.com/bgoonz/sqlite3-nodejs-demo</a></td>\n<td><a href=\"https://github.com/bgoonz/my-gists\">https://github.com/bgoonz/my-gists</a></td>\n<td><a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\">https://github.com/bgoonz/DS-ALGO-OFFICIAL</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/Binary-Search\">https://github.com/bgoonz/Binary-Search</a></td>\n<td><a href=\"https://github.com/bgoonz/jsanimate\">https://github.com/bgoonz/jsanimate</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/stalk-photos-web-assets\">https://hub.com/bgoonz/stalk-photos-web-assets</a></td>\n<td><a href=\"https://github.com/bgoonz/My-Medium-Blog\">https://github.com/bgoonz/My-Medium-Blog</a></td>\n<td><a href=\"https://github.com/bgoonz/DS-AND-ALGO-Notes-P2\">https://github.com/bgoonz/DS-AND-ALGO-Notes-P2</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/blog-2.o-versions\">https://github.com/bgoonz/blog-2.o-versions</a></td>\n<td><a href=\"https://github.com/bgoonz/Jupyter-Notebooks\">https://github.com/bgoonz/Jupyter-Notebooks</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/Standalone-Metranome\">https://hub.com/bgoonz/Standalone-Metranome</a></td>\n<td><a href=\"https://github.com/bgoonz/nextjs-netlify-blog-template\">https://github.com/bgoonz/nextjs-netlify-blog-template</a></td>\n<td><a href=\"https://github.com/bgoonz/ecommerce-interactive\">https://github.com/bgoonz/ecommerce-interactive</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/blog-templates\">https://github.com/bgoonz/blog-templates</a></td>\n<td><a href=\"https://github.com/bgoonz/Lambda\">https://github.com/bgoonz/Lambda</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/Star-wars-API-Promise-take2\">https://hub.com/bgoonz/Star-wars-API-Promise-take2</a></td>\n<td><a href=\"https://github.com/bgoonz/norwex-coff-ecom\">https://github.com/bgoonz/norwex-coff-ecom</a></td>\n<td><a href=\"https://github.com/bgoonz/embedable-repl-and-integrated-code-space-playground\">https://github.com/bgoonz/embedable-repl-and-integrated-code-space-playground</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/blog-w-comments\">https://github.com/bgoonz/blog-w-comments</a></td>\n<td><a href=\"https://github.com/bgoonz/Lambda-Resource-Static-Assets\">https://github.com/bgoonz/Lambda-Resource-Static-Assets</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/Static-Study-Site\">https://hub.com/bgoonz/Static-Study-Site</a></td>\n<td><a href=\"https://github.com/bgoonz/old-c-and-cpp-repos-from-undergrad\">https://github.com/bgoonz/old-c-and-cpp-repos-from-undergrad</a></td>\n<td><a href=\"https://github.com/bgoonz/excel2html-table\">https://github.com/bgoonz/excel2html-table</a></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/Blog2.0-August-Super-Stable\">https://github.com/bgoonz/Blog2.0-August-Super-Stable</a></td>\n<td><a href=\"https://github.com/bgoonz/learning-nextjs\">https://github.com/bgoonz/learning-nextjs</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/styling-templates\">https://hub.com/bgoonz/styling-templates</a></td>\n<td><a href=\"https://github.com/bgoonz/old-code-from-undergrad\">https://github.com/bgoonz/old-code-from-undergrad</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/bootstrap-sidebar-template\">https://github.com/bgoonz/bootstrap-sidebar-template</a></td>\n<td><a href=\"https://github.com/bgoonz/Learning-Redux\">https://github.com/bgoonz/Learning-Redux</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/supertemp\">https://hub.com/bgoonz/supertemp</a></td>\n<td><a href=\"https://github.com/bgoonz/picture-man-bob-v2\">https://github.com/bgoonz/picture-man-bob-v2</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/callbacks\">https://github.com/bgoonz/callbacks</a></td>\n<td><a href=\"https://github.com/bgoonz/Links-Shortcut-Site\">https://github.com/bgoonz/Links-Shortcut-Site</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/Ternary-converter\">https://hub.com/bgoonz/Ternary-converter</a></td>\n<td><a href=\"https://github.com/bgoonz/Project-Showcase\">https://github.com/bgoonz/Project-Showcase</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/Comments\">https://github.com/bgoonz/Comments</a></td>\n<td><a href=\"https://github.com/bgoonz/live-examples\">https://github.com/bgoonz/live-examples</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/TetrisJS\">https://hub.com/bgoonz/TetrisJS</a></td>\n<td><a href=\"https://github.com/bgoonz/promises-with-async-and-await\">https://github.com/bgoonz/promises-with-async-and-await</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/commercejs-nextjs-demo-store\">https://github.com/bgoonz/commercejs-nextjs-demo-store</a></td>\n<td><a href=\"https://github.com/bgoonz/live-form\">https://github.com/bgoonz/live-form</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/TexTools\">https://hub.com/bgoonz/TexTools</a></td>\n<td><a href=\"https://github.com/bgoonz/psql-practice\">https://github.com/bgoonz/psql-practice</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/Common-npm-Readme-Compilation\">https://github.com/bgoonz/Common-npm-Readme-Compilation</a></td>\n<td><a href=\"https://github.com/bgoonz/loadash-es6-refactor\">https://github.com/bgoonz/loadash-es6-refactor</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/The-Algorithms\">https://hub.com/bgoonz/The-Algorithms</a></td>\n<td><a href=\"https://github.com/bgoonz/python-playground-embed\">https://github.com/bgoonz/python-playground-embed</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/Comparing-Web-Development-Bootcamps-2021\">https://github.com/bgoonz/Comparing-Web-Development-Bootcamps-2021</a></td>\n<td><a href=\"https://github.com/bgoonz/markdown-css\">https://github.com/bgoonz/markdown-css</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/TRASH\">https://hub.com/bgoonz/TRASH</a></td>\n<td><a href=\"https://github.com/bgoonz/python-practice-notes\">https://github.com/bgoonz/python-practice-notes</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/Connect-Four-Final-Version\">https://github.com/bgoonz/Connect-Four-Final-Version</a></td>\n<td><a href=\"https://github.com/bgoonz/Markdown-Templates\">https://github.com/bgoonz/Markdown-Templates</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/Triggered-Guitar-Effects-Platform\">https://hub.com/bgoonz/Triggered-Guitar-Effects-Platform</a></td>\n<td><a href=\"https://github.com/bgoonz/python-scripts\">https://github.com/bgoonz/python-scripts</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/convert-folder-contents-2-website\">https://github.com/bgoonz/convert-folder-contents-2-website</a></td>\n<td><a href=\"https://github.com/bgoonz/meditation-app\">https://github.com/bgoonz/meditation-app</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/Useful-Snippets-js\">https://hub.com/bgoonz/Useful-Snippets-js</a></td>\n<td><a href=\"https://github.com/bgoonz/PYTHON_PRAC\">https://github.com/bgoonz/PYTHON_PRAC</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/bgoonz/Copy-2-Clipboard-jQuery\">https://github.com/bgoonz/Copy-2-Clipboard-jQuery</a></td>\n<td><a href=\"https://github.com/bgoonz/MihirBegMusicLab\">https://github.com/bgoonz/MihirBegMusicLab</a></td>\n<td></td>\n<td><a href=\"https://hub.com/bgoonz/UsefulResourceRepo2.0\">https://hub.com/bgoonz/UsefulResourceRepo2.0</a></td>\n<td><a href=\"https://github.com/bgoonz/random-list-of-embedable-content\">https://github.com/bgoonz/random-list-of-embedable-content</a></td>\n<td></td>\n</tr>\n</tbody>\n</table>"},{"url":"/docs/content/recent-projects/","relativePath":"docs/content/recent-projects.md","relativeDir":"docs/content","base":"recent-projects.md","name":"recent-projects","frontmatter":{"title":"Embeded Websites & Projects","weight":2,"seo":{"title":"Gatsby Plugins For This Sites Content Model","description":"This is my markdown notes tempate","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Gatsby Plugins For This Sites Content Model","keyName":"property"},{"name":"og:description","value":"This is the Gatsby Plugins For This Sites Content Model page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Gatsby Plugins For This Sites Content Model"},{"name":"twitter:description","value":"This is the Gatsby Plugins For This Sites Content Model page"}]},"template":"docs"},"html":"<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<h1>   Family-Promise Application</h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://a.familypromiseservicetracker.dev/dashboard\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<h1>   Speach Recognition api </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://random-static-html-deploys.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<h1>   Paste To Markdown </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://euangoddard.github.io/clipboard2markdown/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n        \n        \n        \n<br>\n<br>\n<h1>   Paste Excel Tabel To Markdown </h1>\n<iframe  class=\"block-content\" src=\"https://codepen.io/bgoonz/embed/JjNaPpL?default-tab=result&theme-id=light\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1>Paste excel to HTML</h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://pedantic-wing-adbf82.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<h1>  Cloud Storage </h1>\n<br>\n<h2> Up to 1TB of cloud Storage for file sharing!</h2>\n<iframe src=\"https://onedrive.live.com/embed?cid=D21009FDD967A241&resid=D21009FDD967A241%21538729&authkey=AHSDSyoYqzg2K2E\" height=\"275px\" width=\"17%\" style=\"zoom:0.69; align-self:center;display:auto;display: block;border:12px solid gold;\">\n</iframe>\n<br>\n<br>\n<br>\n<h1>     Resource Archive           </h1>\n<br>\n<iframe src=\"https://resourcerepo2.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<h1>   Lambda Student Site </h1>\n<br>\n<iframe class=\"inner\" src=\"https://lambda-resources.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<h1> Text Tools     </h1>\n<br>\n<iframe src=\"https://devtools42.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1> Ternary Converter   </h1>\n<br>\n<iframe src=\"https://ternary42.netlify.app/\" height=\"800px\" width=\"600px!important\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1>  Github HTML Render from link </h1>\n<br>\n<iframe src=\"https://githtmlpreview.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1> Data Structures</h1>\n<br>\n<iframe src=\"https://determined-dijkstra-ee7390.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1>  Interview     </h1>\n<br>\n<iframe  src=\"https://web-dev-interview-prep-quiz-website.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<h1> Form Builder GUI </h1>\n<br>\n<iframe  src=\"https://fourm-builder-gui.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<h1> Border Builder </h1>\n<br>\n<iframe  src=\"https://codepen.io/bgoonz/embed/zYwLVmb?default-tab=html%2Cresult\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<h1>                </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://ds-algo-official.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n        \n        \n        \n<br>\n<br>\n<br>\n<h1>                </h1>\n<br>\n        \n        \n <iframe height=\"800\" style=\"width: 100%;\" scrolling=\"yes\" title=\"Simple Typing Carousel \" src=\"https://codepen.io/bgoonz/embed/ExZvGoZ?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/bgoonz/pen/ExZvGoZ\">\n  Simple Typing Carousel </a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<br>\n<br>\n<br>\n<br>\n <iframe height=\"300\" style=\"width: 90%;\" scrolling=\"no\" title=\"Fibonacci Carousel\"\n      src=\"https://codepen.io/bgoonz/embed/JjNagJo?default-tab=result&theme-id=dark\" frameborder=\"no\" loading=\"lazy\"\n      allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen <a href=\"https://codepen.io/bgoonz/pen/JjNagJo\">\n        Fibonacci Carousel</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n      on <a href=\"https://codepen.io\">CodePen</a>.\n    </iframe>\n    <br>\n    <br>\n    <br>\n    <iframe height=\"300\" style=\"width: 90%;\" scrolling=\"no\" title=\"embed-twitter-feed\"\n      src=\"https://codepen.io/bgoonz/embed/poPOqEO?default-tab=result&theme-id=dark\" frameborder=\"no\" loading=\"lazy\"\n      allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen <a href=\"https://codepen.io/bgoonz/pen/poPOqEO\">\n        embed-twitter-feed</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n      on <a href=\"https://codepen.io\">CodePen</a>.\n    </iframe>\n    <br>\n    <br>\n    <br>\n    <iframe height=\"300\" style=\"width: 90%;\" scrolling=\"no\" src=\"//jsfiddle.net/bgoonz/j4xt839d/embedded/result/\"\n      allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n    <br>\n    <br>\n    <br>\n    <iframe height=\"300\" style=\"width: 90%;\" scrolling=\"no\" src=\"//jsfiddle.net/bgoonz/76osauer/1/embedded/result/\"\n      allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n    <br>\n    <br>\n    <br>\n    <iframe height=\"300\" style=\"width: 90%;\" scrolling=\"no\" src=\"//jsfiddle.net/bgoonz/vtz7820m/embedded/result/dark/\"\n      allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n    <br>\n    <br>\n    <br>\n    <iframe height=\"300\" style=\"width: 90%;\" scrolling=\"no\"\n      src=\"//jsfiddle.net/bgoonz/1dye9uws/2/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\"\n      frameborder=\"0\"></iframe>\n    <br>\n    <br>\n    <br>\n    <iframe height=\"300\" style=\"width: 90%;\" scrolling=\"no\" src=\"//jsfiddle.net/bgoonz/3mpgzkx7/1/embedded/\"\n      allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe> \n    <br>\n    <br>\n    <br>\n    <iframe loading=\"lazy\" src=\"https://codepen.io/bgoonz/embed/zYwJQaw?default-tab=html%2Cresult\"\n      style=\"width:90%; height:575px; border:0; border-radius: 4px; overflow:hidden;\" title=\"hvbrd-sockets (forked)\"\n      sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n    <br>\n    <br>\n    <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->\n    <br>\n    <iframe loading=\"lazy\" src=\"https://codesandbox.io/embed/bigo-3wqy4?fontsize=14&hidenavigation=1&theme=dark\"\n      style=\"width:90%; height:575px; border:0; border-radius: 4px; overflow:hidden;\" title=\"hvbrd-sockets (forked)\"\n      sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n    <br>\n    <br>\n    <br>\n    <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->\n    <iframe loading=\"lazy\"\n      src=\"https://codesandbox.io/embed/hvbrd-sockets-forked-vsi2o?fontsize=14&hidenavigation=1&theme=dark\"\n      style=\"width:90%; height:575px; border:0; border-radius: 4px; overflow:hidden;\" title=\"hvbrd-sockets (forked)\"\n      sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n    <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->\n    <br>\n    <br>\n    <iframe loading=\"lazy\" src=\"https://codesandbox.io/embed/summer-surf-p6dei?fontsize=14&hidenavigation=1&theme=dark\"\n      style=\"width:90%; height:575px; border:0; border-radius: 4px; overflow:hidden;\" title=\"summer-surf-p6dei\"\n      sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n    <br>\n    <br>\n    <br>\n    <br>\n    <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->\n    <br> <br>\n    <br>\n    <iframe loading=\"lazy\"\n      src=\"https://codesandbox.io/embed/sharp-feistel-x8bvv?fontsize=14&hidenavigation=1&theme=dark\"\n      style=\"width:90%; height:575px; border:0; border-radius: 4px; overflow:hidden;\" title=\"sharp-feistel-x8bvv\"\n      sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n    <br>\n    <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->\n    <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->\n    <center>\n      <br>\n      <br>\n      <br>\n      <br>\n      <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\"\n        title=\"3D Cover Flow in React! | @keyframers 3.7\"\n        src=\"https://codepen.io/bgoonz/embed/ExZvGoZ?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\"\n        allowtransparency=\"true\" allowfullscreen=\"true\">\n        See the Pen <a href='https://codepen.io/bgoonz42/pen/RwpeaWr'>3D Cover Flow in React! | @keyframers\n          3.7</a> by Bryan\n        C Guner\n        (<a href='https://codepen.io/bgoonz42'>@bgoonz42</a>) on <a href='https://codepen.io'>CodePen</a>.\n      </iframe>\n      <br>\n      <br>\n      <br>\n      <br>\n      <br>\n      <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"Simple Typing Carousel \"\n        src=\"https://codepen.io/bgoonz/embed/ExZvGoZ?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\"\n        allowtransparency=\"true\" allowfullscreen=\"true\">\n        See the Pen <a href=\"https://codepen.io/bgoonz/pen/ExZvGoZ\">\n          Simple Typing Carousel </a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n        on <a href=\"https://codepen.io\">CodePen</a>.\n      </iframe>\n      <br>\n      <br>\n      <br>\n      <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\"\n        title=\"3D Cover Flow in React! | @keyframers 3.7\"\n        src=\"https://codepen.io/bgoonz42/embed/RwpeaWr?height=375&theme=dark&default-tab=js,result\" frameborder=\"no\"\n        loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n        See the Pen <a href='https://codepen.io/bgoonz42/pen/RwpeaWr'>3D Cover Flow in React! | @keyframers\n          3.7</a> by Bryan\n        C Guner\n        (<a href='https://codepen.io/bgoonz42'>@bgoonz42</a>) on <a href='https://codepen.io'>CodePen</a>.\n      </iframe>\n      <br>\n      <br>\n      <br>\n      <br>\n      <!-------------------------------------------------------------------------------------->\n      <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"Video Background 1\"\n        src=\"https://codesandbox.io/embed/bgoonzblog20-oo3x5?fontsize=14&hidenavigation=1&theme=dark\"\n        style=\"width:90%; height:575px; border:0; border-radius: 4px; overflow:hidden;\" title=\"bgoonzblog2.0\"\n        sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n      <br>\n      <br>\n      <br>\n      <!-------------------------------------------------------------------------------------->\n      <br>\n      <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"Video Background 1\"\n        src=\"https://codepen.io/bgoonz/embed/BaRLKBd?default-tab=html%2Cresult&theme-id=dark\" frameborder=\"no\"\n        loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n        See the Pen <a href=\"https://codepen.io/bgoonz/pen/BaRLKBd\">\n          Video Background 1</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n        on <a href=\"https://codepen.io\">CodePen</a>.\n      </iframe>\n      <!-------------------------------------------------------------------------------------->\n      <br><br>\n      <!-------------------------------------------------------------------------------------->\n      <br><br>\n      <center>\n        <br>\n        <br>\n        <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\"\n          title=\"CSS-only Colorful Calendar Concept\" src=\"https://documentation-site-react2.vercel.app/\"\n          frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n          See the Pen <a href=\"https://codepen.io/bgoonz/pen/vYmKQYj\">\n            CSS-only Colorful Calendar Concept</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n          on <a href=\"https://codepen.io\">CodePen</a>.\n        </iframe>\n        <br>\n        <br>\n        <br>\n        <!-------------------------------------------------------------------------------------->\n        <br><br>\n        <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"FullTextSearchjs\"\n          src=\"https://codepen.io/bgoonz/embed/QWvMWoQ?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\"\n          allowtransparency=\"true\" allowfullscreen=\"true\">\n          See the Pen <a href=\"https://codepen.io/bgoonz/pen/QWvMWoQ\">\n            FullTextSearchjs</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n          on <a href=\"https://codepen.io\">CodePen</a>.\n        </iframe>\n        <br>\n        <br>\n        <br>\n        <!-------------------------------------------------------------------------------------->\n        <br>\n        <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"CSS Grid: Info Card\"\n          src=\"https://codepen.io/bgoonz42/embed/MWmpjmy?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\"\n          allowtransparency=\"true\" allowfullscreen=\"true\">\n          See the Pen <a href=\"https://codepen.io/bgoonz42/pen/MWmpjmy\">\n            CSS Grid: Info Card</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz42\">@bgoonz42</a>)\n          on <a href=\"https://codepen.io\">CodePen</a>.\n        </iframe>\n        <br>\n        <br>\n        <br>\n        <br>\n        <!-------------------------------------------------------------------------------------->\n        <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\"\n          title=\"CSS-only Colorful Calendar Concept\"\n          src=\"https://codepen.io/bgoonz/embed/vYmKQYj?default-tab=html%2Cresult&theme-id=dark\" frameborder=\"no\"\n          loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n          See the Pen <a href=\"https://codepen.io/bgoonz/pen/vYmKQYj\">\n            CSS-only Colorful Calendar Concept</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n          on <a href=\"https://codepen.io\">CodePen</a>.\n        </iframe>\n        <br>\n        <br>\n        <br>"},{"url":"/docs/content/trouble-shooting/","relativePath":"docs/content/trouble-shooting.md","relativeDir":"docs/content","base":"trouble-shooting.md","name":"trouble-shooting","frontmatter":{"title":"Trouble Shooting","weight":0,"excerpt":"Here I will save details of problems I have been troubleshooting.","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<br>\n<h1>  Trouble Shooting Log </h1>\n<br>\n<iframe width=\"900\" height=\"1400\" frameborder=\"0\" scrolling=\"no\" src=\"https://onedrive.live.com/embed?resid=D21009FDD967A241%21538628&authkey=%21AB8fPL3wSKz3AxU&em=2&AllowTyping=True&wdHideGridlines=True&wdHideHeaders=True&wdDownloadButton=True&wdInConfigurator=True\"></iframe>\n<br>"},{"url":"/docs/content/js-async-n-callbacks/","relativePath":"docs/content/js-async-n-callbacks.md","relativeDir":"docs/content","base":"js-async-n-callbacks.md","name":"js-async-n-callbacks","frontmatter":{"title":"JavaScript Asynchronous Programming and Callbacks","weight":0,"excerpt":"Computers are asynchronous by design.Asynchronous means that things can happen independently of the main program flow.","seo":{"title":"JavaScript Asynchronous Programming and Callbacks","description":"JavaScript is synchronous by default, and is single threaded. This means that code cannot create new threads and run in parallel. Find out what asynchronous code means and how it looks like","robots":[],"extra":[]},"template":"docs"},"html":"<h2>Asynchronicity in Programming Languages</h2>\n<iframe src=\"https://web-dev-interview-prep-quiz-website.netlify.app/promises-async.html\" height=\"100%\" width=\"100%\"></iframe>\n<p>Computers are asynchronous by design.</p>\n<p>Asynchronous means that things can happen independently of the main program flow.</p>\n<p>In the current consumer computers, every program runs for a specific time slot and then it stops its execution to let another program continue their execution. This thing runs in a cycle so fast that it's impossible to notice. We think our computers run many programs simultaneously, but this is an illusion (except on multiprocessor machines).</p>\n<p>Programs internally use <em>interrupts</em>, a signal that's emitted to the processor to gain the attention of the system.</p>\n<p>I won't go into the internals of this, but just keep in mind that it's normal for programs to be asynchronous and halt their execution until they need attention, allowing the computer to execute other things in the meantime. When a program is waiting for a response from the network, it cannot halt the processor until the request finishes.</p>\n<p>Normally, programming languages are synchronous and some provide a way to manage asynchronicity in the language or through libraries. C, Java, C#, PHP, Go, Ruby, Swift, and Python are all synchronous by default. Some of them handle async by using threads, spawning a new process.</p>\n<h2>JavaScript</h2>\n<p>JavaScript is <strong>synchronous</strong> by default and is single threaded. This means that code cannot create new threads and run in parallel.</p>\n<p>Lines of code are executed in series, one after another, for example:</p>\n<pre><code class=\"language-js\">const a = 1;\nconst b = 2;\nconst c = a * b;\nconsole.log(c);\ndoSomething();\n</code></pre>\n<p>But JavaScript was born inside the browser, its main job, in the beginning, was to respond to user actions, like <code>onClick</code>, <code>onMouseOver</code>, <code>onChange</code>, <code>onSubmit</code> and so on. How could it do this with a synchronous programming model?</p>\n<p>The answer was in its environment. The <strong>browser</strong> provides a way to do it by providing a set of APIs that can handle this kind of functionality.</p>\n<p>More recently, Node.js introduced a non-blocking I/O environment to extend this concept to file access, network calls and so on.</p>\n<h2>Callbacks</h2>\n<p>You can't know when a user is going to click a button. So, you <strong>define an event handler for the click event</strong>. This event handler accepts a function, which will be called when the event is triggered:</p>\n<pre><code class=\"language-js\">document.getElementById('button').addEventListener('click', () => {\n    //item clicked\n});\n</code></pre>\n<p>This is the so-called <strong>callback</strong>.</p>\n<p>A callback is a simple function that's passed as a value to another function, and will only be executed when the event happens. We can do this because JavaScript has first-class functions, which can be assigned to variables and passed around to other functions (called <strong>higher-order functions</strong>)</p>\n<p>It's common to wrap all your client code in a <code>load</code> event listener on the <code>window</code> object, which runs the callback function only when the page is ready:</p>\n<pre><code class=\"language-js\">window.addEventListener('load', () => {\n    //window loaded\n    //do what you want\n});\n</code></pre>\n<p>Callbacks are used everywhere, not just in DOM events.</p>\n<p>One common example is by using timers:</p>\n<pre><code class=\"language-js\">setTimeout(() => {\n    // runs after 2 seconds\n}, 2000);\n</code></pre>\n<p>XHR requests also accept a callback, in this example by assigning a function to a property that will be called when a particular event occurs (in this case, the state of the request changes):</p>\n<pre><code class=\"language-js\">const xhr = new XMLHttpRequest();\nxhr.onreadystatechange = () => {\n    if (xhr.readyState === 4) {\n        xhr.status === 200 ? console.log(xhr.responseText) : console.error('error');\n    }\n};\nxhr.open('GET', 'https://yoursite.com');\nxhr.send();\n</code></pre>\n<h2>Handling errors in callbacks</h2>\n<p>How do you handle errors with callbacks? One very common strategy is to use what Node.js adopted: the first parameter in any callback function is the error object: <strong>error-first callbacks</strong></p>\n<p>If there is no error, the object is <code>null</code>. If there is an error, it contains some description of the error and other information.</p>\n<pre><code class=\"language-js\">fs.readFile('/file.json', (err, data) => {\n    if (err !== null) {\n        //handle error\n        console.log(err);\n        return;\n    }\n\n    //no errors, process data\n    console.log(data);\n});\n</code></pre>\n<h2>The problem with callbacks</h2>\n<p>Callbacks are great for simple cases!</p>\n<p>However every callback adds a level of nesting, and when you have lots of callbacks, the code starts to be complicated very quickly:</p>\n<pre><code class=\"language-js\">window.addEventListener('load', () => {\n    document.getElementById('button').addEventListener('click', () => {\n        setTimeout(() => {\n            items.forEach((item) => {\n                //your code here\n            });\n        }, 2000);\n    });\n});\n</code></pre>\n<p>This is just a simple 4-levels code, but I've seen much more levels of nesting and it's not fun.</p>\n<p>How do we solve this?</p>\n<h2>Alternatives to callbacks</h2>\n<p>Starting with ES6, JavaScript introduced several features that help us with asynchronous code that do not involve using callbacks: Promises (ES6) and Async/Await (ES2017).</p>\n<p>We all know that JavaScript is a *Single Threaded *language, this means, things happen one at a time. Consider the below code:</p>\n<p>Here, the action is performed one line at a time. So, line 1 and 2 will be executed before line 3. At Line 3, we have a function call, so the actions at line 4 won't be executed until and unless the function is returned. This is called as <em>Synchronous Programming model</em>. These type of statements are also known as *Blocking, *as no other statement will execute before the current statement is finished. This model makes use of a <em>stack</em> called as <em>\"Call Stack\"</em>.</p>\n<h2>What is a Call Stack?</h2>\n<p><img src=\"https://miro.medium.com/freeze/max/27/1*fOsu7oCcYn-HpVREkMD8sg.gif?q=20\" alt=\"A GIF explaining the working of a Stack Data Structure.\"></p>\n<p><img src=\"https://miro.medium.com/max/360/1*fOsu7oCcYn-HpVREkMD8sg.gif\" alt=\"A GIF explaining the working of a Stack Data Structure.\"></p>\n<p>A Stack Data Structure</p>\n<p>A Call Stack is a data structure which keeps the record of which statement is currently being executed. We know how a stack works, which is basically *\"Last In, First Out\" *approach i.e. the last element pushed in will be the first to be popped out.</p>\n<p>So, when we encounter any statement, it is pushed to the top of the stack and is executed. Once the execution is completed, it is then popped out of the stack. If one of those statement is a Function, we push it on to the top of the stack and it is popped off only when we return from the function.</p>\n<p>Let's understand it with an example.</p>\n<p>Output:<br>\n125</p>\n<p>In the beginning of the execution of the code by the engine, the call stack will be empty. Then, the following will happen:</p>\n<p><img src=\"https://miro.medium.com/max/27/1*CrYp7k87He63XLd0qLYrCw.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*CrYp7k87He63XLd0qLYrCw.png\"></p>\n<p>Working of the Call Stack during program execution.</p>\n<p>Since these all are <em>Blocking Statements</em>, the are pushed into the stack and are popped out once they are executed. The next statement has to wait till the previous statement is popped out of the stack.</p>\n<blockquote>\n<p>Fun Fact: The above explained process is how a stack trace is constructed. It is basically the snapshot of the stack at the time of any exception. Also, this is the same reason why the \"RangeError: Maximum call stack size exceeded\" error is also thrown. This happens when the number of function calls in the Call Stack exceeds the size of the stack.</p>\n</blockquote>\n<p>To further understand the working of a Call Stack, observe the execution of the below code:</p>\n<p><img src=\"https://miro.medium.com/freeze/max/27/1*FB2VAMUAMVJpzxMBkGDR7Q.gif?q=20\" alt=\"Using animation to explain how the Call Stack actually executes the code one statement at a time.\"></p>\n<p><img src=\"https://miro.medium.com/max/360/1*FB2VAMUAMVJpzxMBkGDR7Q.gif\" alt=\"Using animation to explain how the Call Stack actually executes the code one statement at a time.\"></p>\n<h2>Why is having Single Thread considered a problem then?</h2>\n<p>To answer this, imagine a complex algorithm, maybe one which involves such a function which takes user's data and sends it on a network for processing. Once the data is processed then only the function returns some value and the user is allowed to proceed ahead. Keep in mind that this algorithm is running on a browser. Can you guess the problem now?</p>\n<p>Yes, having a single thread executing this algorithm will involve *Blocking Statements. *These statements will be pushed into the Call Stack, one at a time. The next statement has to wait for the previous statement to finish to start it's own execution. So, if the Call Stack is blocked by this complex function, then the Browser will be stuck as it can't execute anything else and has to wait for the function to be popped from the call stack.</p>\n<p>Most of the browsers will not wait for much long and will give a pop up saying that the Page is Unresponsive, asking whether you want to terminate the web page.</p>\n<h2>What is the Solution to this problem?</h2>\n<p>The solution is simple, we need to use *Asynchronous Programming model. *When any asynchronous action is started, the rest of the program continues to execute normally. Then, as soon as the asynchronous action is completed, the program is informed about it and it accesses that particular result. In short, this model allows multiple things to happen at the same time.</p>\n<p>This is clear from the above explanation, that the rest of the code is not *\"blocked\" *when any asynchronous code is executed. This is the reason these statements are also known <em>\"Non-Blocking Statements\"</em>.</p>\n<h2>Let's try to understand how are Non-Blocking Statements executed in JavaScript</h2>\n<p>Consider the code below,</p>\n<p>Output:<br>\n10<br>\n20<br>\n200 (after 1 second)</p>\n<p>How did this happen? We saw that each statement is executed one at a time using the Call Stack, and the next statement waits for the previous one to complete it's execution, right? Well, this is nothing but the magic of Asynchronous code.</p>\n<p>As mentioned a few paragraphs above, an Asynchronous statement is *\"Non-Blocking\". <em>This means, this type of statements do not block the normal execution of other statements</em>. *This clearly points to the fact that there is actually some difference in the way the Synchronous and Asynchronous statements are processed. So what's the secret behind JavaScript's Asynchronous programming? The answer to this question is <em>\"Event Loop\".</em></p>\n<h2>Understanding JavaScript Event Loop</h2>\n<p>If you are able to follow till now, this means you are aware about something known as a JavaScript Engine or Runtime. Most popular of them is Google's V8 engine (it is used inside Chrome, Node.js, etc). It consists of a Memory Heap and a Call Stack (Yes, the same Call Stack that we discussed above). But when you try to dig into the V8 code base and try to find things like *\"DOM\", \"HttpRequest\", *etc, you wont find them anywhere as they do not exist in V8. Then how is JavaScript able to handle Asynchronous operations? Just kind of statements are traditionally performed by <em>Threads</em> in languages like *Ruby *or <em>Java</em>.</p>\n<p>The reason is, that the browser is more than just the runtime. To support the Runtime, the browser also provides WebAPIs, which are effectively like threads but we can't access them like normal threads, instead we can make calls to them to achieve some functionality. In case of Node.js, instead of WebAPIs, we have C++ APIs where all the threading and stuff is hidden from us at C++ side. Along with WebAPIs, there is another thing involved in this process, which is called <em>\"Event (or Callback) Queue\"</em>. Collectively, all these components with the help of *\"Event Loop\" *helps JavaScript perform asynchronous opetations. Consider the below diagram:</p>\n<p><img src=\"https://miro.medium.com/max/630/1*eiYb9y9q_dODrq3XLNEZMQ.png\" alt=\"A Diagram explaining the structure of the Event Loop.\"></p>\n<p>Event Loop in JavaScript--- <a href=\"https://medium.com/@aditya.shukla278\">https://medium.com/@aditya.shukla278</a></p>\n<ol>\n<li>Javascript Engine/Runtime: Javascript engines like Google V8, SpiderMonkey, Chakra etc. provide the JavaScript Runtime. It consists of two components, <em>Call Stack</em> and <em>Memory Heap</em>. The Heap is basically used to maintain object and function references which are required by call stack.</li>\n<li>WebAPIs: The Browser provides the APIs like setTimeout, setInterval, document etc. So, while executing the code if a statement with callback is pushed into the stack, that statement is directly popped out of the stack and then these APIs are responsible to add those callbacks into the <em>event queue</em>. For eg. <code>setTimeout(cb1, 2000)</code> will add the callback function <code>cb1</code> in event queue after the 2 seconds.</li>\n<li>Event Queue: Event queue basically contains callback functions which are to be added back into the call stack by event loop. This is the reason they are also called as <em>\"Callback Queue\"</em>.</li>\n<li>Event Loop: Now, the Event Queue has the callback function which is needed to be pushed back to the Call Stack, here this *Event loop *comes into picture. It is responsible to push the callbacks available in event queue to the call stack. Event loop pushes a callback function only when the call stack is empty.</li>\n</ol>\n<p>That is too much of words, I bet you must be sleepy by now. Consider the below code to understand the working of the Event Loop.</p>\n<p><img src=\"https://miro.medium.com/freeze/max/27/1*IneExnDz3O-NAk40aY3vKQ.gif?q=20\" alt=\"Explaining the working of the Event Loop using Animated GIF.\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*IneExnDz3O-NAk40aY3vKQ.gif\" alt=\"Explaining the working of the Event Loop using Animated GIF.\"></p>\n<blockquote>\n<p>Point to be noted here: Event loop will only add the callback from the event queue to the call stack when it finds the call stack empty. If JavaScript's main thread is busy executing a long running function, it would keep the callback in the event queue. That is why it is important that we make sure that the main call stack does not have long running functions which may block it, as that time browser would not be able to respond to user events as they would be stuck in event queue.</p>\n</blockquote>\n<p><img src=\"https://miro.medium.com/max/612/1*yfN8N5u3n2z9-dD6cxUpaw.jpeg\"></p>\n<h2>To Summarize the above topics ---</h2>\n<ul>\n<li>We understood that JavaScript is a *Single Threaded *language, which basically means that the statements are executed one at a time.</li>\n<li>These statements block the execution of the immediate next statements until they are completed executed. Because of this reason they are also known as <em>Blocking Statements.</em></li>\n<li>The statements are executed using a *Call Stack. *A statement which has to be executed, it is pushed into the stack, executed, and then popped out of the stack. All the nested/recurring function calls are stacked on top of each other.</li>\n<li>An <em>Event loop</em> is browser's mechanism to perform <em>non-blocking</em> operations by providing WebAPIs (setTimeout, setInterval, etc.) which are capable of maintaining callback references in memory.</li>\n<li>The callbacks are then added to event queue.</li>\n<li>Finally. the <em>Event loop</em> pushes the callback back to the *Call Stack <em>from the E</em>vent queue *when the call stack is empty. Here the callback is executed.</li>\n</ul>"},{"url":"/docs/docs/appendix/","relativePath":"docs/docs/appendix.md","relativeDir":"docs/docs","base":"appendix.md","name":"appendix","frontmatter":{"title":"Apendix","weight":0,"excerpt":"resources","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>index</h1>\n<p>This appendix is a non-exhaustive list of new syntactic features and methods that were added to JavaScript in ES6. These features are the most commonly used and most helpful.</p>\n<p>While this appendix doesn't cover ES6 classes, we go over the basics while learning about components in the book. In addition, this appendix doesn't include descriptions of some larger new features like promises and generators. If you'd like more info on those or on any topic below, we encourage you to reference the <a href=\"https://developer.mozilla.org/\">Mozilla Developer Network's website</a> (MDN).</p>\n<h2>Prefer <code>const</code> and <code>let</code> over <code>var</code></h2>\n<p>If you've worked with ES5 JavaScript before, you're likely used to seeing variables declared with <code>var</code>:</p>\n<pre><code class=\"language-text\">ar myVariable = 5;\n</code></pre>\n<p>Both the <code>const</code> and <code>let</code> statements also declare variables. They were introduced in ES6.</p>\n<p>Use <code>const</code> in cases where a variable is never re-assigned. Using <code>const</code> makes this clear to whoever is reading your code. It refers to the \"constant\" state of the variable in the context it is defined within.</p>\n<p>If the variable will be re-assigned, use <code>let</code>.</p>\n<p>We encourage the use of <code>const</code> and <code>let</code> instead of <code>var</code>. In addition to the restriction introduced by <code>const</code>, both <code>const</code> and <code>let</code> are <em>block scoped</em> as opposed to <em>function scoped</em>. This scoping can help avoid unexpected bugs.</p>\n<h2>Arrow functions</h2>\n<p>There are three ways to write arrow function bodies. For the examples below, let's say we have an array of city objects:</p>\n<pre><code class=\"language-text\">onst cities = [\n  { name: 'Cairo', pop: 7764700 },\n  { name: 'Lagos', pop: 8029200 },\n];\n</code></pre>\n<p>If we write an arrow function that spans multiple lines, we must use braces to delimit the function body like this:</p>\n<pre><code class=\"language-text\">const formattedPopulations = cities.map((city) => {\n  const popMM = (city.pop / 1000000).toFixed(2);\n  return popMM + ' million';\n});\nconsole.log(formattedPopulations);\n</code></pre>\n<p>Note that we must also explicitly specify a <code>return</code> for the function.</p>\n<p>However, if we write a function body that is only a single line (or single expression) we can use parentheses to delimit it:</p>\n<pre><code class=\"language-text\">const formattedPopulations2 = cities.map((city) => (\n  (city.pop / 1000000).toFixed(2) + ' million'\n));\n</code></pre>\n<p>Notably, we don't use <code>return</code> as it's implied.</p>\n<p>Furthermore, if your function body is terse you can write it like so:</p>\n<pre><code class=\"language-text\">const pops = cities.map(city => city.pop);\nconsole.log(pops);\n</code></pre>\n<p>The terseness of arrow functions is one of two reasons that we use them. Compare the one-liner above to this:</p>\n<pre><code class=\"language-text\">const popsNoArrow = cities.map(function(city) { return city.pop });\n</code></pre>\n<p>Of greater benefit, though, is how arrow functions bind the <code>this</code> object.</p>\n<p>The traditional JavaScript function declaration syntax (<code>function () {}</code>) will bind <code>this</code> in anonymous functions to the global object. To illustrate the confusion this causes, consider the following example:</p>\n<pre><code class=\"language-text\">unction printSong() {\n  console.log(\"Oops - The Global Object\");\n}\n\nconst jukebox = {\n  songs: [\n    {\n      title: \"Wanna Be Startin' Somethin'\",\n      artist: \"Michael Jackson\",\n    },\n    {\n      title: \"Superstar\",\n      artist: \"Madonna\",\n    },\n  ],\n  printSong: function (song) {\n    console.log(song.title + \" - \" + song.artist);\n  },\n  printSongs: function () {\n\n    this.songs.forEach(function(song) {\n\n      this.printSong(song);\n    });\n  },\n}\n\njukebox.printSongs();\n</code></pre>\n<p>The method <code>printSongs()</code> iterates over <code>this.songs</code> with <code>forEach()</code>. In this context, <code>this</code> is bound to the object (<code>jukebox</code>) as expected. However, the anonymous function passed to <code>forEach()</code> binds its internal <code>this</code> to the global object. As such, <code>this.printSong(song)</code> calls the function declared at the top of the example, <em>not</em> the method on <code>jukebox</code>.</p>\n<p>JavaScript developers have traditionally used workarounds for this behavior, but arrow functions solve the problem by <strong>capturing the <code>this</code> value of the enclosing context</strong>. Using an arrow function for <code>printSongs()</code> has the expected result:</p>\n<pre><code class=\"language-text\">  printSongs: function () {\n    this.songs.forEach((song) => {\n\n      this.printSong(song);\n    });\n  },\n}\n\njukebox.printSongs();\n</code></pre>\n<p>For this reason, throughout the book we use arrow functions for all anonymous functions.</p>\n<h2>Modules</h2>\n<p>ES6 formally supports modules using the <code>import</code>/<code>export</code> syntax.</p>\n<p><strong>Named exports</strong></p>\n<p>Inside any file, you can use <code>export</code> to specify a variable the module should expose. Here's an example of a file that exports two functions:</p>\n<pre><code class=\"language-text\">export const sayHi = () => (console.log('Hi!'));\nexport const sayBye = () => (console.log('Bye!'));\n\nconst saySomething = () => (console.log('Something!'));\n</code></pre>\n<p>Now, anywhere we wanted to use these functions we could use <code>import</code>. We need to specify which functions we want to import. A common way of doing this is using ES6's destructuring assignment syntax to list them out like this:</p>\n<pre><code class=\"language-text\">import { sayHi, sayBye } from './greetings';\n\nsayHi();\nsayBye();\n</code></pre>\n<p>Importantly, the function that was <em>not</em> exported (<code>saySomething</code>) is unavailable outside of the module.</p>\n<p>Also note that we supply a <strong>relative path</strong> to <code>from</code>, indicating that the ES6 module is a local file as opposed to an npm package.</p>\n<p>Instead of inserting an <code>export</code> before each variable you'd like to export, you can use this syntax to list off all the exposed variables in one area:</p>\n<pre><code class=\"language-text\">const sayHi = () => (console.log('Hi!'));\nconst sayBye = () => (console.log('Bye!'));\n\nconst saySomething = () => (console.log('Something!'));\n\nexport { sayHi, sayBye };\n</code></pre>\n<p>We can also specify that we'd like to import all of a module's functionality underneath a given namespace with the <code>import * as &#x3C;Namespace></code> syntax:</p>\n<pre><code class=\"language-text\">import * as Greetings from './greetings';\n\nGreetings.sayHi();\n\nGreetings.sayBye();\n\nGreetings.saySomething();\n</code></pre>\n<p><strong>Default export</strong></p>\n<p>The other type of export is a default export. A module can only contain one default export:</p>\n<pre><code class=\"language-text\">const sayHi = () => (console.log('Hi!'));\nconst sayBye = () => (console.log('Bye!'));\n\nconst saySomething = () => (console.log('Something!'));\n\nconst Greetings = { sayHi, sayBye };\n\nexport default Greetings;\n</code></pre>\n<p>This is a common pattern for libraries. It means you can easily import the library wholesale without specifying what individual functions you want:</p>\n<pre><code class=\"language-text\">import Greetings from './greetings';\n\nGreetings.sayHi();\nGreetings.sayBye();\n</code></pre>\n<p>It's not uncommon for a module to use a mix of both named exports and default exports. For instance, with <code>react-dom</code>, you can import <code>ReactDOM</code> (a default export) like this:</p>\n<pre><code class=\"language-text\">import ReactDOM from 'react-dom';\n\nReactDOM.render(\n\n);\n</code></pre>\n<p>Or, if you're only going to use the <code>render()</code> function, you can import the named <code>render()</code> function like this:</p>\n<pre><code class=\"language-text\">import { render } from 'react-dom';\n\nrender(\n\n);\n</code></pre>\n<p>To achieve this flexibility, the export implementation for <code>react-dom</code> looks something like this:</p>\n<pre><code class=\"language-text\">export const render = (component, target) => {\n\n};\n\nconst ReactDOM = {\n  render,\n\n};\n\nexport default ReactDOM;\n</code></pre>\n<p>If you want to play around with the module syntax, check out the folder <code>code/webpack/es6-modules</code>.</p>\n<p>For more reading on ES6 modules, see this article from Mozilla: \"<a href=\"https://hacks.mozilla.org/2015/08/es6-in-depth-modules/\">ES6 in Depth: Modules</a>\".</p>\n<h2><code>Object.assign()</code></h2>\n<p>We use <code>Object.assign()</code> often throughout the book. We use it in areas where we want to create a modified version of an existing object.</p>\n<p><code>Object.assign()</code> accepts any number of objects as arguments. When the function receives two arguments, it <em>copies</em> the properties of the second object onto the first, like so:</p>\n<pre><code class=\"language-text\">onst coffee = { };\nconst noCream = { cream: false };\nconst noMilk = { milk: false };\nObject.assign(coffee, noCream);\n</code></pre>\n<p>It is idiomatic to pass in three arguments to <code>Object.assign()</code>. The first argument is a new JavaScript object, the one that <code>Object.assign()</code> will ultimately return. The second is the object whose properties we'd like to build off of. The last is the changes we'd like to apply:</p>\n<pre><code class=\"language-text\">const coffeeWithMilk = Object.assign({}, coffee, { milk: true });\n</code></pre>\n<p><code>Object.assign()</code> is a handy method for working with \"immutable\" JavaScript objects.</p>\n<h2>Template literals</h2>\n<p>In ES5 JavaScript, you'd interpolate variables into strings like this:</p>\n<pre><code class=\"language-text\">var greeting = 'Hello, ' + user + '! It is ' + degF + ' degrees outside.';\n</code></pre>\n<p>With ES6 template literals, we can create the same string like this:</p>\n<pre><code class=\"language-text\">const greeting = `Hello, ${user}! It is ${degF} degrees outside.`;\n</code></pre>\n<h2>The spread operator (<code>...</code>)</h2>\n<p>In arrays, the ellipsis <code>...</code> operator will <em>expand</em> the array that follows into the parent array. The spread operator enables us to succinctly construct new arrays as a composite of existing arrays.</p>\n<p>Here is an example:</p>\n<pre><code class=\"language-text\">onst a = [ 1, 2, 3 ];\nconst b = [ 4, 5, 6 ];\nconst c = [ ...a, ...b, 7, 8, 9 ];\n\nconsole.log(c);\n</code></pre>\n<p>Notice how this is different than if we wrote:</p>\n<pre><code class=\"language-text\">const d = [ a, b, 7, 8, 9 ];\nconsole.log(d);\n</code></pre>\n<h2>Enhanced object literals</h2>\n<p>In ES5, all objects were required to have explicit key and value declarations:</p>\n<pre><code class=\"language-text\">const explicit = {\n  getState: getState,\n  dispatch: dispatch,\n};\n</code></pre>\n<p>In ES6, you can use this terser syntax whenever the property name and variable name are the same:</p>\n<pre><code class=\"language-text\">const implicit = {\n  getState,\n  dispatch,\n};\n</code></pre>\n<p>Lots of open source libraries use this syntax, so it's good to be familiar with it. But whether you use it in your own code is a matter of stylistic preference.</p>\n<h2>Default arguments</h2>\n<p>With ES6, you can specify a default value for an argument in the case that it is <code>undefined</code> when the function is called.</p>\n<p>This:</p>\n<pre><code class=\"language-text\">unction divide(a, b) {\n\n  const divisor = typeof b === 'undefined' ? 1 : b;\n\n  return a / divisor;\n}\n</code></pre>\n<p>Can be written as this:</p>\n<pre><code class=\"language-text\">function divide(a, b = 1) {\n  return a / b;\n}\n</code></pre>\n<p>In both cases, using the function looks like this:</p>\n<pre><code class=\"language-text\">divide(14, 2);\n\ndivide(14, undefined);\n\ndivide(14);\n</code></pre>\n<p>Whenever the argument <code>b</code> in the example above is <code>undefined</code>, the default argument is used. Note that <code>null</code> will not use the default argument:</p>\n<pre><code class=\"language-text\">divide(14, null);\n</code></pre>\n<h2>Destructuring assignments</h2>\n<h3>For arrays</h3>\n<p>In ES5, extracting and assigning multiple elements from an array looked like this:</p>\n<pre><code class=\"language-text\">ar fruits = [ 'apples', 'bananas', 'oranges' ];\nvar fruit1 = fruits[0];\nvar fruit2 = fruits[1];\n</code></pre>\n<p>In ES6, we can use the destructuring syntax to accomplish the same task like this:</p>\n<pre><code class=\"language-text\">const [ veg1, veg2 ] = [ 'asparagus', 'broccoli', 'onion' ];\nconsole.log(veg1);\nconsole.log(veg2);\n</code></pre>\n<p>The variables in the array on the left are \"matched\" and assigned to the corresponding elements in the array on the right. Note that <code>'onion'</code> is ignored and has no variable bound to it.</p>\n<h3>For objects</h3>\n<p>We can do something similar for extracting object properties into variables:</p>\n<pre><code class=\"language-text\">const smoothie = {\n  fats: [ 'avocado', 'peanut butter', 'greek yogurt' ],\n  liquids: [ 'almond milk' ],\n  greens: [ 'spinach' ],\n  fruits: [ 'blueberry', 'banana' ],\n};\n\nconst { liquids, fruits } = smoothie;\n\nconsole.log(liquids);\nconsole.log(fruits);\n</code></pre>\n<h3>Parameter context matching</h3>\n<p>We can use these same principles to bind arguments inside a function to properties of an object supplied as an argument:</p>\n<pre><code class=\"language-text\">const containsSpinach = ({ greens }) => {\n  if (greens.find(g => g === 'spinach')) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\ncontainsSpinach(smoothie);\n</code></pre>\n<p>We do this often with functional React components:</p>\n<pre><code class=\"language-text\">const IngredientList = ({ ingredients, onClick }) => (\n  &#x3C;ul className='IngredientList'>\n    {\n      ingredients.map(i => (\n        &#x3C;li\n          key={i.id}\n          onClick={() => onClick(i.id)}\n          className='item'\n        >\n          {i.name}\n        &#x3C;/li>\n      ))\n    }\n  &#x3C;/ul>\n)\n</code></pre>\n<p>Here, we use destructuring to extract the props into variables (<code>ingredients</code> and <code>onClick</code>) that we then use inside the component's function body.</p>"},{"url":"/docs/docs/await-keyword/","relativePath":"docs/docs/await-keyword.md","relativeDir":"docs/docs","base":"await-keyword.md","name":"await-keyword","frontmatter":{"title":"Await ","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>await</h1>\n<p>The <code>await</code> operator is used to wait for a <a href=\"../global_objects/promise\"><code>Promise</code></a>. It can only be used inside an <a href=\"../statements/async_function\"><code>async function</code></a> within regular JavaScript code; however it can be used on its own with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">JavaScript modules.</a></p>\n<h2>Syntax</h2>\n<pre><code>[rv] = await expression;\n</code></pre>\n<p><code>expression</code><br>\nA <a href=\"../global_objects/promise\"><code>Promise</code></a> or any value to wait for.</p>\n<p><code>rv</code><br>\nReturns the fulfilled value of the promise, or the value itself if it's not a <code>Promise</code>.</p>\n<h2>Description</h2>\n<p>The <code>await</code> expression causes <code>async</code> function execution to pause until a <code>Promise</code> is settled (that is, fulfilled or rejected), and to resume execution of the <code>async</code> function after fulfillment. When resumed, the value of the <code>await</code> expression is that of the fulfilled <code>Promise</code>.</p>\n<p>If the <code>Promise</code> is rejected, the <code>await</code> expression throws the rejected value.</p>\n<p>If the value of the <em>expression</em> following the <code>await</code> operator is not a <code>Promise</code>, it's converted to a <a href=\"../global_objects/promise/resolve\">resolved Promise</a>.</p>\n<p>An <code>await</code> splits execution flow, allowing the caller of the async function to resume execution. After the <code>await</code> defers the continuation of the async function, execution of subsequent statements ensues. If this <code>await</code> is the last expression executed by its function, execution continues by returning to the function's caller a pending <code>Promise</code> for completion of the <code>await</code>'s function and resuming execution of that caller.</p>\n<h2>Examples</h2>\n<h3>Awaiting a promise to be fulfilled</h3>\n<p>If a <code>Promise</code> is passed to an <code>await</code> expression, it waits for the <code>Promise</code> to be fulfilled and returns the fulfilled value.</p>\n<pre><code>function resolveAfter2Seconds(x) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(x);\n    }, 2000);\n  });\n}\n\nasync function f1() {\n  var x = await resolveAfter2Seconds(10);\n  console.log(x); // 10\n}\n\nf1();\n</code></pre>\n<h3>Thenable objects</h3>\n<p><a href=\"../global_objects/promise/then\"><code>Thenable objects</code></a> will be fulfilled just the same.</p>\n<pre><code>async function f2() {\n  const thenable = {\n    then: function(resolve, _reject) {\n      resolve('resolved!')\n    }\n  };\n  console.log(await thenable); // resolved!\n}\n\nf2();\n</code></pre>\n<h3>Conversion to promise</h3>\n<p>If the value is not a <code>Promise</code>, it converts the value to a resolved <code>Promise</code>, and waits for it.</p>\n<pre><code>async function f3() {\n  var y = await 20;\n  console.log(y); // 20\n}\n\nf3();\n</code></pre>\n<h3>Promise rejection</h3>\n<p>If the <code>Promise</code> is rejected, the rejected value is thrown.</p>\n<pre><code>async function f4() {\n  try {\n    var z = await Promise.reject(30);\n  } catch(e) {\n    console.error(e); // 30\n  }\n}\n\nf4();\n</code></pre>\n<h3>Handling rejected promises</h3>\n<p>Handle rejected <code>Promise</code> without try block.</p>\n<pre><code>var response = await promisedFunction().catch((err) => { console.error(err); });\n// response will be undefined if the promise is rejected\n</code></pre>\n<h3>Top level await</h3>\n<p>You can use the <code>await</code> keyword on its own (outside of an async function) within a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">JavaScript module</a>. This means modules, with child modules that use <code>await</code>, wait for the child module to execute before they themselves run. All while not blocking other child modules from loading.</p>\n<p>Here is an example of a simple module using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">Fetch API</a> and specifying await within the <code>export statement</code>. Any modules that include this will wait for the fetch to resolve before running any code.</p>\n<pre><code>// fetch request\nconst colors = fetch('../data/colors.json')\n  .then(response => response.json());\n\nexport default await colors;\n</code></pre>"},{"url":"/docs/docs/git-reference/","relativePath":"docs/docs/git-reference.md","relativeDir":"docs/docs","base":"git-reference.md","name":"git-reference","frontmatter":{"title":"Git Reference","weight":0,"excerpt":"Git Reference","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h2>Git Reference</h2>\n<iframe src=\"https://bgoonz.github.io/GIT_GUIDE_Bgoonz/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<p>Git is a distributed version control and source code management system.</p>\n<p>It does this through a series of snapshots of your project, and it works\nwith those snapshots to provide you with functionality to version and\nmanage your source code.</p>\n<h2>Versioning Concepts</h2>\n<h3>What is version control?</h3>\n<p>Version control is a system that records changes to a file(s), over time.</p>\n<h3>Centralized Versioning vs. Distributed Versioning</h3>\n<ul>\n<li>Centralized version control focuses on synchronizing, tracking, and backing\nup files.</li>\n<li>Distributed version control focuses on sharing changes. Every change has a\nunique id.</li>\n<li>Distributed systems have no defined structure. You could easily have a SVN\nstyle, centralized system, with git.</li>\n</ul>\n<p><a href=\"http://git-scm.com/book/en/Getting-Started-About-Version-Control\">Additional Information</a></p>\n<h3>Why Use Git?</h3>\n<ul>\n<li>Can work offline.</li>\n<li>Collaborating with others is easy!</li>\n<li>Branching is easy!</li>\n<li>Branching is fast!</li>\n<li>Merging is easy!</li>\n<li>Git is fast.</li>\n<li>Git is flexible.</li>\n</ul>\n<h2>Git Architecture</h2>\n<h3>Repository</h3>\n<p>A set of files, directories, historical records, commits, and heads. Imagine it\nas a source code data structure, with the attribute that each source code\n\"element\" gives you access to its revision history, among other things.</p>\n<p>A git repository is comprised of the .git directory &#x26; working tree.</p>\n<h3>.git Directory (component of repository)</h3>\n<p>The .git directory contains all the configurations, logs, branches, HEAD, and\nmore.\n<a href=\"http://gitready.com/advanced/2009/03/23/whats-inside-your-git-directory.html\">Detailed List.</a></p>\n<h3>Working Tree (component of repository)</h3>\n<p>This is basically the directories and files in your repository. It is often\nreferred to as your working directory.</p>\n<h3>Index (component of .git dir)</h3>\n<p>The Index is the staging area in git. It's basically a layer that separates\nyour working tree from the Git repository. This gives developers more power\nover what gets sent to the Git repository.</p>\n<h3>Commit</h3>\n<p>A git commit is a snapshot of a set of changes, or manipulations to your\nWorking Tree. For example, if you added 5 files, and removed 2 others, these\nchanges will be contained in a commit (or snapshot). This commit can then be\npushed to other repositories, or not!</p>\n<h3>Branch</h3>\n<p>A branch is essentially a pointer to the last commit you made. As you go on\ncommitting, this pointer will automatically update to point to the latest commit.</p>\n<h3>Tag</h3>\n<p>A tag is a mark on specific point in history. Typically people use this\nfunctionality to mark release points (v1.0, and so on).</p>\n<h3>HEAD and head (component of .git dir)</h3>\n<p>HEAD is a pointer that points to the current branch. A repository only has 1\n<em>active</em> HEAD.\nhead is a pointer that points to any commit. A repository can have any number\nof heads.</p>\n<h3>Stages of Git</h3>\n<ul>\n<li>Modified - Changes have been made to a file but file has not been committed\nto Git Database yet</li>\n<li>Staged - Marks a modified file to go into your next commit snapshot</li>\n<li>Committed - Files have been committed to the Git Database</li>\n</ul>\n<h3>Conceptual Resources</h3>\n<ul>\n<li><a href=\"http://eagain.net/articles/git-for-computer-scientists/\">Git For Computer Scientists</a></li>\n<li><a href=\"http://hoth.entp.com/output/git_for_designers.html\">Git For Designers</a></li>\n</ul>\n<h2>Commands</h2>\n<h3>init</h3>\n<p>Create an empty Git repository. The Git repository's settings, stored\ninformation, and more is stored in a directory (a folder) named \".git\".</p>\n<pre><code class=\"language-bash\">$ git init\n</code></pre>\n<h3>config</h3>\n<p>To configure settings. Whether it be for the repository, the system itself,\nor global configurations ( global config file is <code>~/.gitconfig</code> ).</p>\n<pre><code class=\"language-bash\"># Print &#x26; Set Some Basic Config Variables (Global)\n$ git config --global user.email \"MyEmail@Zoho.com\"\n$ git config --global user.name \"My Name\"\n</code></pre>\n<p><a href=\"http://git-scm.com/docs/git-config\">Learn More About git config.</a></p>\n<h3>help</h3>\n<p>To give you quick access to an extremely detailed guide of each command. Or to\njust give you a quick reminder of some semantics.</p>\n<pre><code class=\"language-bash\"># Quickly check available commands\n$ git help\n\n# Check all available commands\n$ git help -a\n\n# Command specific help - user manual\n# git help &#x3C;command_here>\n$ git help add\n$ git help commit\n$ git help init\n# or git &#x3C;command_here> --help\n$ git add --help\n$ git commit --help\n$ git init --help\n</code></pre>\n<h3>ignore files</h3>\n<p>To intentionally untrack file(s) &#x26; folder(s) from git. Typically meant for\nprivate &#x26; temp files which would otherwise be shared in the repository.</p>\n<pre><code class=\"language-bash\">$ echo \"temp/\" >> .gitignore\n$ echo \"private_key\" >> .gitignore\n</code></pre>\n<h3>status</h3>\n<p>To show differences between the index file (basically your working copy/repo)\nand the current HEAD commit.</p>\n<pre><code class=\"language-bash\"># Will display the branch, untracked files, changes and other differences\n$ git status\n\n# To learn other \"tid bits\" about git status\n$ git help status\n</code></pre>\n<h3>add</h3>\n<p>To add files to the staging area/index. If you do not <code>git add</code> new files to\nthe staging area/index, they will not be included in commits!</p>\n<pre><code class=\"language-bash\"># add a file in your current working directory\n$ git add HelloWorld.java\n\n# add a file in a nested dir\n$ git add /path/to/file/HelloWorld.c\n\n# Regular Expression support!\n$ git add ./*.java\n\n# You can also add everything in your working directory to the staging area.\n$ git add -A\n</code></pre>\n<p>This only adds a file to the staging area/index, it doesn't commit it to the\nworking directory/repo.</p>\n<h3>branch</h3>\n<p>Manage your branches. You can view, edit, create, delete branches using this\ncommand.</p>\n<pre><code class=\"language-bash\"># list existing branches &#x26; remotes\n$ git branch -a\n\n# create a new branch\n$ git branch myNewBranch\n\n# delete a branch\n$ git branch -d myBranch\n\n# rename a branch\n# git branch -m &#x3C;oldname> &#x3C;newname>\n$ git branch -m myBranchName myNewBranchName\n\n# edit a branch's description\n$ git branch myBranchName --edit-description\n</code></pre>\n<h3>tag</h3>\n<p>Manage your tags</p>\n<pre><code class=\"language-bash\"># List tags\n$ git tag\n\n# Create a annotated tag\n# The -m specifies a tagging message, which is stored with the tag.\n# If you don’t specify a message for an annotated tag,\n# Git launches your editor so you can type it in.\n$ git tag -a v2.0 -m 'my version 2.0'\n\n# Show info about tag\n# That shows the tagger information, the date the commit was tagged,\n# and the annotation message before showing the commit information.\n$ git show v2.0\n\n# Push a single tag to remote\n$ git push origin v2.0\n\n# Push a lot of tags to remote\n$ git push origin --tags\n</code></pre>\n<h3>checkout</h3>\n<p>Updates all files in the working tree to match the version in the index, or\nspecified tree.</p>\n<pre><code class=\"language-bash\"># Checkout a repo - defaults to master branch\n$ git checkout\n\n# Checkout a specified branch\n$ git checkout branchName\n\n# Create a new branch &#x26; switch to it\n# equivalent to \"git branch &#x3C;name>; git checkout &#x3C;name>\"\n\n$ git checkout -b newBranch\n</code></pre>\n<h3>clone</h3>\n<p>Clones, or copies, an existing repository into a new directory. It also adds\nremote-tracking branches for each branch in the cloned repo, which allows you\nto push to a remote branch.</p>\n<pre><code class=\"language-bash\"># Clone learnxinyminutes-docs\n$ git clone https://github.com/adambard/learnxinyminutes-docs.git\n\n# shallow clone - faster cloning that pulls only latest snapshot\n$ git clone --depth 1 https://github.com/adambard/learnxinyminutes-docs.git\n\n# clone only a specific branch\n$ git clone -b master-cn https://github.com/adambard/learnxinyminutes-docs.git --single-branch\n</code></pre>\n<h3>commit</h3>\n<p>Stores the current contents of the index in a new \"commit.\" This commit\ncontains the changes made and a message created by the user.</p>\n<pre><code class=\"language-bash\"># commit with a message\n$ git commit -m \"Added multiplyNumbers() function to HelloWorld.c\"\n\n# signed commit with a message (user.signingkey must have been set\n# with your GPG key e.g. git config --global user.signingkey 5173AAD5)\n$ git commit -S -m \"signed commit message\"\n\n# automatically stage modified or deleted files, except new files, and then commit\n$ git commit -a -m \"Modified foo.php and removed bar.php\"\n\n# change last commit (this deletes previous commit with a fresh commit)\n$ git commit --amend -m \"Correct message\"\n</code></pre>\n<h3>diff</h3>\n<p>Shows differences between a file in the working directory, index and commits.</p>\n<pre><code class=\"language-bash\"># Show difference between your working dir and the index\n$ git diff\n\n# Show differences between the index and the most recent commit.\n$ git diff --cached\n\n# Show differences between your working dir and the most recent commit\n$ git diff HEAD\n</code></pre>\n<h3>grep</h3>\n<p>Allows you to quickly search a repository.</p>\n<p>Optional Configurations:</p>\n<pre><code class=\"language-bash\"># Thanks to Travis Jeffery for these\n# Set line numbers to be shown in grep search results\n$ git config --global grep.lineNumber true\n\n# Make search results more readable, including grouping\n$ git config --global alias.g \"grep --break --heading --line-number\"\n</code></pre>\n<pre><code class=\"language-bash\"># Search for \"variableName\" in all java files\n$ git grep 'variableName' -- '*.java'\n\n# Search for a line that contains \"arrayListName\" and, \"add\" or \"remove\"\n$ git grep -e 'arrayListName' --and \\( -e add -e remove \\)\n</code></pre>\n<p>Google is your friend; for more examples\n<a href=\"http://travisjeffery.com/b/2012/02/search-a-git-repo-like-a-ninja\">Git Grep Ninja</a></p>\n<h3>log</h3>\n<p>Display commits to the repository.</p>\n<pre><code class=\"language-bash\"># Show all commits\n$ git log\n\n# Show only commit message &#x26; ref\n$ git log --oneline\n\n# Show merge commits only\n$ git log --merges\n\n# Show all commits represented by an ASCII graph\n$ git log --graph\n</code></pre>\n<h3>merge</h3>\n<p>\"Merge\" in changes from external commits into the current branch.</p>\n<pre><code class=\"language-bash\"># Merge the specified branch into the current.\n$ git merge branchName\n\n# Always generate a merge commit when merging\n$ git merge --no-ff branchName\n</code></pre>\n<h3>mv</h3>\n<p>Rename or move a file</p>\n<pre><code class=\"language-bash\"># Renaming a file\n$ git mv HelloWorld.c HelloNewWorld.c\n\n# Moving a file\n$ git mv HelloWorld.c ./new/path/HelloWorld.c\n\n# Force rename or move\n# \"existingFile\" already exists in the directory, will be overwritten\n$ git mv -f myFile existingFile\n</code></pre>\n<h3>pull</h3>\n<p>Pulls from a repository and merges it with another branch.</p>\n<pre><code class=\"language-bash\"># Update your local repo, by merging in new changes\n# from the remote \"origin\" and \"master\" branch.\n# git pull &#x3C;remote> &#x3C;branch>\n$ git pull origin master\n\n# By default, git pull will update your current branch\n# by merging in new changes from its remote-tracking branch\n$ git pull\n\n# Merge in changes from remote branch and rebase\n# branch commits onto your local repo, like: \"git fetch &#x3C;remote> &#x3C;branch>, git\n# rebase &#x3C;remote>/&#x3C;branch>\"\n$ git pull origin master --rebase\n</code></pre>\n<h3>push</h3>\n<p>Push and merge changes from a branch to a remote &#x26; branch.</p>\n<pre><code class=\"language-bash\"># Push and merge changes from a local repo to a\n# remote named \"origin\" and \"master\" branch.\n# git push &#x3C;remote> &#x3C;branch>\n$ git push origin master\n\n# By default, git push will push and merge changes from\n# the current branch to its remote-tracking branch\n$ git push\n\n# To link up current local branch with a remote branch, add -u flag:\n$ git push -u origin master\n# Now, anytime you want to push from that same local branch, use shortcut:\n$ git push\n</code></pre>\n<h3>stash</h3>\n<p>Stashing takes the dirty state of your working directory and saves it on a\nstack of unfinished changes that you can reapply at any time.</p>\n<p>Let's say you've been doing some work in your git repo, but you want to pull\nfrom the remote. Since you have dirty (uncommitted) changes to some files, you\nare not able to run <code>git pull</code>. Instead, you can run <code>git stash</code> to save your\nchanges onto a stack!</p>\n<pre><code class=\"language-bash\">$ git stash\nSaved working directory and index state \\\n  \"WIP on master: 049d078 added the index file\"\n  HEAD is now at 049d078 added the index file\n  (To restore them type \"git stash apply\")\n</code></pre>\n<p>Now you can pull!</p>\n<pre><code class=\"language-bash\">git pull\n</code></pre>\n<p><code>...changes apply...</code></p>\n<p>Now check that everything is OK</p>\n<pre><code class=\"language-bash\">$ git status\n# On branch master\nnothing to commit, working directory clean\n</code></pre>\n<p>You can see what \"hunks\" you've stashed so far using <code>git stash list</code>.\nSince the \"hunks\" are stored in a Last-In-First-Out stack, our most recent\nchange will be at top.</p>\n<pre><code class=\"language-bash\">$ git stash list\nstash@{0}: WIP on master: 049d078 added the index file\nstash@{1}: WIP on master: c264051 Revert \"added file_size\"\nstash@{2}: WIP on master: 21d80a5 added number to log\n</code></pre>\n<p>Now let's apply our dirty changes back by popping them off the stack.</p>\n<pre><code class=\"language-bash\">$ git stash pop\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add &#x3C;file>...\" to update what will be committed)\n#\n#      modified:   index.html\n#      modified:   lib/simplegit.rb\n#\n</code></pre>\n<p><code>git stash apply</code> does the same thing</p>\n<p>Now you're ready to get back to work on your stuff!</p>\n<p><a href=\"http://git-scm.com/book/en/v1/Git-Tools-Stashing\">Additional Reading.</a></p>\n<h3>rebase (caution)</h3>\n<p>Take all changes that were committed on one branch, and replay them onto\nanother branch.\n<em>Do not rebase commits that you have pushed to a public repo</em>.</p>\n<pre><code class=\"language-bash\"># Rebase experimentBranch onto master\n# git rebase &#x3C;basebranch> &#x3C;topicbranch>\n$ git rebase master experimentBranch\n</code></pre>\n<p><a href=\"http://git-scm.com/book/en/Git-Branching-Rebasing\">Additional Reading.</a></p>\n<h3>reset (caution)</h3>\n<p>Reset the current HEAD to the specified state. This allows you to undo merges,\npulls, commits, adds, and more. It's a great command but also dangerous if you\ndon't know what you are doing.</p>\n<pre><code class=\"language-bash\"># Reset the staging area, to match the latest commit (leaves dir unchanged)\n$ git reset\n\n# Reset the staging area, to match the latest commit, and overwrite working dir\n$ git reset --hard\n\n# Moves the current branch tip to the specified commit (leaves dir unchanged)\n# all changes still exist in the directory.\n$ git reset 31f2bb1\n\n# Moves the current branch tip backward to the specified commit\n# and makes the working dir match (deletes uncommitted changes and all commits\n# after the specified commit).\n$ git reset --hard 31f2bb1\n</code></pre>\n<h3>reflog (caution)</h3>\n<p>Reflog will list most of the git commands you have done for a given time period,\ndefault 90 days.</p>\n<p>This give you the chance to reverse any git commands that have gone wrong\n(for instance, if a rebase has broken your application).</p>\n<p>You can do this:</p>\n<ol>\n<li><code>git reflog</code> to list all of the git commands for the rebase</li>\n</ol>\n<pre><code>38b323f HEAD@{0}: rebase -i (finish): returning to refs/heads/feature/add_git_reflog\n38b323f HEAD@{1}: rebase -i (pick): Clarify inc/dec operators\n4fff859 HEAD@{2}: rebase -i (pick): Update java.html.markdown\n34ed963 HEAD@{3}: rebase -i (pick): [yaml/en] Add more resources (#1666)\ned8ddf2 HEAD@{4}: rebase -i (pick): pythonstatcomp spanish translation (#1748)\n2e6c386 HEAD@{5}: rebase -i (start): checkout 02fb96d\n</code></pre>\n<ol start=\"2\">\n<li>Select where to reset to, in our case its <code>2e6c386</code>, or <code>HEAD@{5}</code></li>\n<li>'git reset --hard HEAD@{5}' this will reset your repo to that head</li>\n<li>You can start the rebase again or leave it alone.</li>\n</ol>\n<p><a href=\"https://git-scm.com/docs/git-reflog\">Additional Reading.</a></p>\n<h3>revert</h3>\n<p>Revert can be used to undo a commit. It should not be confused with reset which\nrestores the state of a project to a previous point. Revert will add a new\ncommit which is the inverse of the specified commit, thus reverting it.</p>\n<pre><code class=\"language-bash\"># Revert a specified commit\n$ git revert &#x3C;commit>\n</code></pre>\n<h3>rm</h3>\n<p>The opposite of git add, git rm removes files from the current working tree.</p>\n<pre><code class=\"language-bash\"># remove HelloWorld.c\n$ git rm HelloWorld.c\n\n# Remove a file from a nested dir\n$ git rm /pather/to/the/file/HelloWorld.c\n</code></pre>\n<h2>Further Information</h2>\n<ul>\n<li><a href=\"http://try.github.io/levels/1/challenges/1\">tryGit - A fun interactive way to learn Git.</a></li>\n<li><a href=\"http://learngitbranching.js.org/\">Learn Git Branching - the most visual and interactive way to learn Git on the web</a></li>\n<li><a href=\"https://blog.udemy.com/git-tutorial-a-comprehensive-guide/\">Udemy Git Tutorial: A Comprehensive Guide</a></li>\n<li><a href=\"http://gitimmersion.com/\">Git Immersion - A Guided tour that walks through the fundamentals of git</a></li>\n<li><a href=\"http://git-scm.com/videos\">git-scm - Video Tutorials</a></li>\n<li><a href=\"http://git-scm.com/docs\">git-scm - Documentation</a></li>\n<li><a href=\"https://www.atlassian.com/git/\">Atlassian Git - Tutorials &#x26; Workflows</a></li>\n<li><a href=\"http://res.cloudinary.com/hy4kyit2a/image/upload/SF_git_cheatsheet.pdf\">SalesForce Cheat Sheet</a></li>\n<li><a href=\"http://www.gitguys.com/\">GitGuys</a></li>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.html\">Git - the simple guide</a></li>\n<li><a href=\"http://www.git-scm.com/book/en/v2\">Pro Git</a></li>\n<li><a href=\"http://product.hubspot.com/blog/git-and-github-tutorial-for-beginners\">An introduction to Git and GitHub for Beginners (Tutorial)</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PL6gx4Cwl9DGAKWClAD_iKpNC0bGHxGhcx\">The New Boston tutorial to Git covering basic commands and workflow</a></li>\n</ul>"},{"url":"/docs/docs/data-structures-docs/","relativePath":"docs/docs/data-structures-docs.md","relativeDir":"docs/docs","base":"data-structures-docs.md","name":"data-structures-docs","frontmatter":{"title":"Data Structures Docs","weight":0,"excerpt":"Data Structures Docs","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1><strong>Data Structures</strong> are a specialized means of organizing and storing data in computers in such a way that we can perform operations on the stored data more efficiently. Data structures have a wide and diverse scope of usage across the fields of Computer Science and Software Engineering.Image by author</h1>\n<p><img src=\"https://miro.medium.com/max/473/1*KpDOKMFAgDWaGTQHL0r70g.png\"></p>\n<p>Data structures are being used in almost every program or software system that has been developed. Moreover, data structures come under the fundamentals of Computer Science and Software Engineering. It is a key topic when it comes to Software Engineering interview questions. Hence as developers, we must have good knowledge about data structures.</p>\n<p>In this article, I will be briefly explaining 8 commonly used data structures every programmer must know.</p>\n<p>{% embed url=\"<a href=\"https://replit.com/@bgoonz/DATASTRUCTURES-NOTES%5C#sorting/insertion%5C_sort/insertion.py\">https://replit.com/@bgoonz/DATASTRUCTURES-NOTES\\#sorting/insertion\\_sort/insertion.py</a>\" %}</p>\n<h2>1. Arrays <a id=\"31ab\"></a></h2>\n<p>An <strong>array</strong> is a structure of fixed-size, which can hold items of the same data type. It can be an array of integers, an array of floating-point numbers, an array of strings or even an array of arrays (such as <em>2-dimensional arrays</em>). Arrays are indexed, meaning that random access is possible.<img src=\"https://miro.medium.com/max/60/1*pYIKtQYbX8vgCWrwe1YOyg.png?q=20\">Fig 1. Visualization of basic Terminology of Arrays (Image by author)</p>\n<p><img src=\"https://miro.medium.com/max/473/1*pYIKtQYbX8vgCWrwe1YOyg.png\"></p>\n<h3>Array operations <a id=\"6504\"></a></h3>\n<ul>\n<li><strong>Traverse</strong>: Go through the elements and print them.</li>\n<li><strong>Search</strong>: Search for an element in the array. You can search the element by its value or its index</li>\n<li><strong>Update</strong>: Update the value of an existing element at a given index</li>\n</ul>\n<p><strong>Inserting</strong> elements to an array and <strong>deleting</strong> elements from an array cannot be done straight away as arrays are fixed in size. If you want to insert an element to an array, first you will have to create a new array with increased size (current size + 1), copy the existing elements and add the new element. The same goes for the deletion with a new array of reduced size.</p>\n<h3><strong>Applications of arrays</strong> <a id=\"edcd\"></a></h3>\n<ul>\n<li>Used as the building blocks to build other data structures such as array lists, heaps, hash tables, vectors and matrices.</li>\n<li>Used for different sorting algorithms such as insertion sort, quick sort, bubble sort and merge sort.</li>\n</ul>\n<h2>2. Linked Lists <a id=\"d965\"></a></h2>\n<p>A <strong>linked list</strong> is a sequential structure that consists of a sequence of items in linear order which are linked to each other. Hence, you have to access data sequentially and random access is not possible. Linked lists provide a simple and flexible representation of dynamic sets.</p>\n<p>Let’s consider the following terms regarding linked lists. You can get a clear idea by referring to Figure 2.</p>\n<ul>\n<li>Elements in a linked list are known as <strong>nodes</strong>.</li>\n<li>Each node contains a <strong>key</strong> and a pointer to its successor node, known as <strong>next</strong>.</li>\n<li>The attribute named <strong>head</strong> points to the first element of the linked list.</li>\n<li>The last element of the linked list is known as the <strong>tail</strong>.</li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/60/1*4fuF6lHXOSmoVNcOV8aaJA.png?q=20\">Fig 2. Visualization of basic Terminology of Linked Lists (Image by author)</p>\n<p><img src=\"https://miro.medium.com/max/473/1*4fuF6lHXOSmoVNcOV8aaJA.png\"></p>\n<p>Following are the various types of linked lists available.</p>\n<ul>\n<li><strong>Singly linked list</strong> — Traversal of items can be done in the forward direction only.</li>\n<li><strong>Doubly linked list</strong> — Traversal of items can be done in both forward and backward directions. Nodes consist of an additional pointer known as <strong>prev</strong>, pointing to the previous node.</li>\n<li><strong>Circular linked lists</strong> — Linked lists where the prev pointer of the head points to the tail and the next pointer of the tail points to the head.</li>\n</ul>\n<h3>Linked list operations <a id=\"d683\"></a></h3>\n<ul>\n<li><strong>Search</strong>: Find the first element with the key <strong>k</strong> in the given linked list by a simple linear search and returns a pointer to this element</li>\n<li><strong>Insert</strong>: Insert a key to the linked list. An insertion can be done in 3 different ways; insert at the beginning of the list, insert at the end of the list and insert in the middle of the list.</li>\n<li><strong>Delete</strong>: Removes an element <strong>x</strong> from a given linked list. You cannot delete a node by a single step. A deletion can be done in 3 different ways; delete from the beginning of the list, delete from the end of the list and delete from the middle of the list.</li>\n</ul>\n<h3><strong>Applications of linked lists</strong> <a id=\"1da5\"></a></h3>\n<ul>\n<li>Used for <em>symbol table management</em> in compiler design.</li>\n<li>Used in switching between programs using Alt + Tab (implemented using Circular Linked List).</li>\n</ul>\n<h2>3. Stacks <a id=\"ca20\"></a></h2>\n<p>A <strong>stack</strong> is a <strong>LIFO</strong> (Last In First Out — the element placed at last can be accessed at first) structure which can be commonly found in many programming languages. This structure is named as “stack” because it resembles a real-world stack — a stack of plates.Image by <a href=\"https://pixabay.com/users/congerdesign-509903/?utm_source=link-attribution&#x26;utm_medium=referral&#x26;utm_campaign=image&#x26;utm_content=629987\">congerdesign</a> from <a href=\"https://pixabay.com/?utm_source=link-attribution&#x26;utm_medium=referral&#x26;utm_campaign=image&#x26;utm_content=629987\">Pixabay</a></p>\n<p><img src=\"https://miro.medium.com/max/473/1*e4XWkyzxdOreblbPlbOCyw.jpeg\"></p>\n<h3>Stack operations <a id=\"4b54\"></a></h3>\n<p>Given below are the 2 basic operations that can be performed on a stack. Please refer to Figure 3 to get a better understanding of the stack operations.</p>\n<ul>\n<li><strong>Push</strong>: Insert an element on to the top of the stack.</li>\n<li><strong>Pop</strong>: Delete the topmost element and return it.</li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/60/1*QMifqahZm4DGQ91GkOhu4g.png?q=20\">Fig 3. Visualization of basic Operations of Stacks (Image by author)</p>\n<p><img src=\"https://miro.medium.com/max/473/1*QMifqahZm4DGQ91GkOhu4g.png\"></p>\n<p>Furthermore, the following additional functions are provided for a stack in order to check its status.</p>\n<ul>\n<li><strong>Peek</strong>: Return the top element of the stack without deleting it.</li>\n<li><strong>isEmpty</strong>: Check if the stack is empty.</li>\n<li><strong>isFull</strong>: Check if the stack is full.</li>\n</ul>\n<h3>Applications of stacks <a id=\"f7fc\"></a></h3>\n<ul>\n<li>Used for expression evaluation (e.g.: <em>shunting-yard algorithm</em> for parsing and evaluating mathematical expressions).</li>\n<li>Used to implement function calls in recursion programming.</li>\n</ul>\n<h2>4. Queues <a id=\"0e94\"></a></h2>\n<p>A <strong>queue</strong> is a <strong>FIFO</strong> (First In First Out — the element placed at first can be accessed at first) structure which can be commonly found in many programming languages. This structure is named as “queue” because it resembles a real-world queue — people waiting in a queue.<img src=\"https://miro.medium.com/max/60/1*GbtPRh9OWh1jtCtCa9czIg.jpeg?q=20\">Image by <a href=\"https://pixabay.com/users/sheadquarters-5187/?utm_source=link-attribution&#x26;utm_medium=referral&#x26;utm_campaign=image&#x26;utm_content=50119\">Sabine Felidae</a> from <a href=\"https://pixabay.com/?utm_source=link-attribution&#x26;utm_medium=referral&#x26;utm_campaign=image&#x26;utm_content=50119\">Pixabay</a></p>\n<p><img src=\"https://miro.medium.com/max/473/1*GbtPRh9OWh1jtCtCa9czIg.jpeg\"></p>\n<h3>Queue operations <a id=\"9bcd\"></a></h3>\n<p>Given below are the 2 basic operations that can be performed on a queue. Please refer to Figure 4 to get a better understanding of the queue operations.</p>\n<ul>\n<li><strong>Enqueue</strong>: Insert an element to the end of the queue.</li>\n<li><strong>Dequeue</strong>: Delete the element from the beginning of the queue.</li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/60/1*K4-7c0lyUcSGRPmv3_9uqw.png?q=20\">Fig 4. Visualization of Basic Operations of Queues (Image by author)</p>\n<p><img src=\"https://miro.medium.com/max/473/1*K4-7c0lyUcSGRPmv3_9uqw.png\" alt=\"Fig 4. Visualization of Basic Operations of Queues (Image by author)\"></p>\n<h3>Applications of queues <a id=\"07fd\"></a></h3>\n<ul>\n<li>Used to manage threads in multithreading.</li>\n<li>Used to implement queuing systems (e.g.: priority queues).</li>\n</ul>\n<h2>5. Hash Tables <a id=\"4690\"></a></h2>\n<p>A <strong>Hash Table</strong> is a data structure that stores values which have keys associated with each of them. Furthermore, it supports lookup efficiently if we know the key associated with the value. Hence it is very efficient in inserting and searching, irrespective of the size of the data.</p>\n<p><strong>Direct Addressing</strong> uses the one-to-one mapping between the values and keys when storing in a table. However, there is a problem with this approach when there is a large number of key-value pairs. The table will be huge with so many records and may be impractical or even impossible to be stored, given the memory available on a typical computer. To avoid this issue we use <strong>hash tables</strong>.</p>\n<h3>Hash Function <a id=\"9052\"></a></h3>\n<p>A special function named as the <strong>hash function</strong> (<strong>h</strong>) is used to overcome the aforementioned problem in direct addressing.</p>\n<p>In direct accessing, a value with key <strong>k</strong> is stored in the slot <strong>k</strong>. Using the hash function, we calculate the index of the table (slot) to which each value goes. The value calculated using the hash function for a given key is called the <strong>hash value</strong> which indicates the index of the table to which the value is mapped.</p>\n<blockquote>\n<p><strong>h(k) = k % m</strong></p>\n</blockquote>\n<ul>\n<li><strong>h:</strong> Hash function</li>\n<li><strong>k:</strong> Key of which the hash value should be determined</li>\n<li><strong>m:</strong> Size of the hash table (number of slots available). A prime value that is not close to an exact power of 2 is a good choice for <strong>m</strong>.</li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/60/1*xOmBfzMxLLldy1ll4w7esg.png?q=20\">Fig 5. Representation of a Hash Function (Image by author)</p>\n<p><img src=\"https://miro.medium.com/max/473/1*xOmBfzMxLLldy1ll4w7esg.png\"></p>\n<p>Consider the hash function <strong>h(k) = k % 20</strong>, where the size of the hash table is 20. Given a set of keys, we want to calculate the hash value of each to determine the index where it should go in the hash table. Consider we have the following keys, the hash and the hash table index.</p>\n<ul>\n<li>1 → 1%20 → 1</li>\n<li>5 → 5%20 → 5</li>\n<li>23 → 23%20 → 3</li>\n<li>63 → 63%20 → 3</li>\n</ul>\n<p>From the last two examples given above, we can see that <strong>collision</strong> can arise when the hash function generates the same index for more than one key. We can resolve collisions by selecting a suitable hash function h and use techniques such as <strong>chaining</strong> and <strong>open addressing</strong>.</p>\n<h3>Applications of hash tables <a id=\"0328\"></a></h3>\n<ul>\n<li>Used to implement database indexes.</li>\n<li>Used to implement associative arrays.</li>\n<li>Used to implement the “set” data structure.</li>\n</ul>\n<h2>6. Trees <a id=\"1c0f\"></a></h2>\n<p>A <strong>tree</strong> is a hierarchical structure where data is organized hierarchically and are linked together. This structure is different from a linked list whereas, in a linked list, items are linked in a linear order.</p>\n<p>Various types of trees have been developed throughout the past decades, in order to suit certain applications and meet certain constraints. Some examples are binary search tree, B tree, treap, red-black tree, splay tree, AVL tree and n-ary tree.</p>\n<h3>Binary Search Trees <a id=\"ba6b\"></a></h3>\n<p>A <strong>binary search tree (BST)</strong>, as the name suggests, is a binary tree where data is organized in a hierarchical structure. This data structure stores values in sorted order.</p>\n<p>Every node in a binary search tree comprises the following attributes.</p>\n<ol>\n<li><strong>key</strong>: The value stored in the node.</li>\n<li><strong>left</strong>: The pointer to the left child.</li>\n<li><strong>right</strong>: The pointer to the right child.</li>\n<li><strong>p</strong>: The pointer to the parent node.</li>\n</ol>\n<p>A binary search tree exhibits a unique property that distinguishes it from other trees. This property is known as the <strong>binary-search-tree property</strong>.</p>\n<p>Let <strong>x</strong> be a node in a binary search tree.</p>\n<ul>\n<li>If <strong>y</strong> is a node in the <strong>left</strong> subtree of x, then <strong>y.key ≤ x.key</strong></li>\n<li>If <strong>y</strong> is a node in the <strong>right</strong> subtree of x, then <strong>y.key ≥ x.key</strong></li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/60/1*TMn800emvMuqwY3AZpfwCg.png?q=20\">Fig 6. Visualization of Basic Terminology of Trees (Image by author)</p>\n<p><img src=\"https://miro.medium.com/max/473/1*TMn800emvMuqwY3AZpfwCg.png\"></p>\n<h3>Applications of trees <a id=\"3ea1\"></a></h3>\n<ul>\n<li><strong>Binary Trees</strong>: Used to implement expression parsers and expression solvers.</li>\n<li><strong>Binary Search Tree</strong>: used in many search applications where data are constantly entering and leaving.</li>\n<li><strong>Heaps</strong>: used by JVM (Java Virtual Machine) to store Java objects.</li>\n<li><strong>Treaps</strong>: used in wireless networking.</li>\n</ul>\n<p>Check my articles below on 8 useful tree data structures and self-balancing binary search trees.<a href=\"https://towardsdatascience.com/8-useful-tree-data-structures-worth-knowing-8532c7231e8c\">8 Useful Tree Data Structures Worth KnowingAn overview of 8 different tree data structurestowardsdatascience.com</a><a href=\"https://towardsdatascience.com/self-balancing-binary-search-trees-101-fc4f51199e1d\">Self-Balancing Binary Search Trees 101Introduction to Self-Balancing Binary Search Treestowardsdatascience.com</a></p>\n<h2>7. Heaps <a id=\"9e26\"></a></h2>\n<p>A <strong>Heap</strong> is a special case of a binary tree where the parent nodes are compared to their children with their values and are arranged accordingly.</p>\n<p>Let us see how we can represent heaps. Heaps can be represented using trees as well as arrays. Figures 7 and 8 show how we can represent a binary heap using a binary tree and an array.<img src=\"https://miro.medium.com/max/60/1*BEq4aj8K7u4LbIaIEtHNmQ.png?q=20\">Fig 7. Binary Tree Representation of a Heap (Image by author)<img src=\"https://miro.medium.com/max/60/1*N7R4banKc1NG5KqdXmJnkA.png?q=20\">Fig 8. Array Representation of a Heap (Image by author)</p>\n<p><img src=\"https://miro.medium.com/max/473/1*N7R4banKc1NG5KqdXmJnkA.png\"></p>\n<p><img src=\"https://miro.medium.com/max/473/1*BEq4aj8K7u4LbIaIEtHNmQ.png\"></p>\n<p>Heaps can be of 2 types.</p>\n<ol>\n<li><strong>Min Heap</strong> — the key of the parent is less than or equal to those of its children. This is called the <strong>min-heap property</strong>. The root will contain the minimum value of the heap.</li>\n<li><strong>Max Heap</strong> — the key of the parent is greater than or equal to those of its children. This is called the <strong>max-heap property</strong>. The root will contain the maximum value of the heap.</li>\n</ol>\n<h3>Applications of heaps <a id=\"6986\"></a></h3>\n<ul>\n<li>Used in <strong>heapsort algorithm</strong>.</li>\n<li>Used to implement priority queues as the priority values can be ordered according to the heap property where the heap can be implemented using an array.</li>\n<li>Queue functions can be implemented using heaps within <strong>O(log n)</strong> time.</li>\n<li>Used to find the kᵗʰ smallest (or largest) value in a given array.</li>\n</ul>\n<p>Check my article below on implementing a heap using the python heapq module.<a href=\"https://towardsdatascience.com/introduction-to-python-heapq-module-53534feda625\">Introduction to Python Heapq ModuleA simple introduction on how to use Python’s heapq moduletowardsdatascience.com</a></p>\n<h2>8. Graphs <a id=\"e0c7\"></a></h2>\n<p>A <strong>graph</strong> consists of a finite set of <strong>vertices</strong> or nodes and a set of <strong>edges</strong> connecting these vertices.</p>\n<p>The <strong>order</strong> of a graph is the number of vertices in the graph. The <strong>size</strong> of a graph is the number of edges in the graph.</p>\n<p>Two nodes are said to be <strong>adjacent</strong> if they are connected to each other by the same edge.</p>\n<h3>Directed Graphs <a id=\"3763\"></a></h3>\n<p>A graph <strong>G</strong> is said to be a <strong>directed graph</strong> if all its edges have a direction indicating what is the start vertex and what is the end vertex.</p>\n<p>We say that <strong>(u, v)</strong> is <strong>incident from</strong> or <strong>leaves</strong> vertex <strong>u</strong> and is <strong>incident to</strong> or <strong>enters</strong> vertex <strong>v</strong>.</p>\n<p><strong>Self-loops</strong>: Edges from a vertex to itself.</p>\n<h3>Undirected Graphs <a id=\"9fe9\"></a></h3>\n<p>A graph <strong>G</strong> is said to be an <strong>undirected graph</strong> if all its edges have no direction. It can go in both ways between the two vertices.</p>\n<p>If a vertex is not connected to any other node in the graph, it is said to be <strong>isolated</strong>.<img src=\"https://miro.medium.com/max/60/1*bgRmFfnYXHYXSv1pbNea0A.png?q=20\">Fig 9. Visualization of Terminology of Graphs (Image by author)</p>\n<p><img src=\"https://miro.medium.com/max/473/1*bgRmFfnYXHYXSv1pbNea0A.png\"></p>\n<p>You can read more about graph algorithms from my article <a href=\"https://medium.com/@vijinimallawaarachchi/10-graph-algorithms-visually-explained-e57faa1336f3\">10 Graph Algorithms Visually Explained</a>.<a href=\"https://medium.com/@vijinimallawaarachchi/10-graph-algorithms-visually-explained-e57faa1336f3\">10 Graph Algorithms Visually ExplainedA quick introduction to 10 basic graph algorithms with examples and visualisationsmedium.com</a></p>\n<h3>Applications of graphs <a id=\"888d\"></a></h3>\n<ul>\n<li>Used to represent social media networks. Each user is a vertex, and when users connect they create an edge.</li>\n<li>Used to represent web pages and links by search engines. Web pages on the internet are linked to each other by hyperlinks. Each page is a vertex and the hyperlink between two pages is an edge. Used for Page Ranking in Google.</li>\n<li>Used to represent locations and routes in GPS. Locations are vertices and the routes connecting locations are edges. Used to calculate the shortest route between two locations.</li>\n</ul>"},{"url":"/docs/docs/bash/","relativePath":"docs/docs/bash.md","relativeDir":"docs/docs","base":"bash.md","name":"bash","frontmatter":{"title":"Bash Commands That Save Me Time and Frustration","weight":0,"excerpt":"Bash Commands That Save Me Time and Frustration","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h1>Bash Commands</h1>\n<h1>Bash Commands That Save Me Time and Frustration</h1>\n<p>Here’s a list of bash commands that stand between me and insanity.</p>\n<hr>\n<h3>Bash Commands That Save Me Time and Frustration</h3>\n<h4>Here’s a list of bash commands that stand between me and insanity.</h4>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*w0J8u6jWTikYVZzW.jpg\" class=\"graf-image\" /></figure><a href=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\" class=\"markup--anchor markup--p-anchor\">https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b</a>\n<blockquote>\n<p><strong>This article will be accompanied by the following</strong> <a href=\"https://github.com/bgoonz/bash-commands-walkthrough\" class=\"markup--anchor markup--pullquote-anchor\"><strong>github repository</strong></a> <strong>which will contain all the commands listed as well as folders that demonstrate before and after usage!</strong></p>\n</blockquote>\n<p><a href=\"https://github.com/bgoonz/bash-commands-walkthrough\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz/bash-commands-walkthrough\"><strong>bgoonz/bash-commands-walkthrough</strong><br />\n<em>to accompany the medium article I am writing. Contribute to bgoonz/bash-commands-walkthrough development by creating an…</em>github.com</a><a href=\"https://github.com/bgoonz/bash-commands-walkthrough\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<blockquote>\n<p>The <a href=\"https://github.com/bgoonz/bash-commands-walkthrough#readme\" class=\"markup--anchor markup--pullquote-anchor\">readme</a> for this git repo will provide a much more condensed list… whereas this article will break up the commands with explanations… images &#x26; links!</p>\n</blockquote>\n<p><strong>I will include the code examples as both github gists (for proper syntax highlighting) and as code snippets adjacent to said gists so that they can easily be copied and pasted… or … if you’re like me for instance; and like to use an extension to grab the markdown content of a page… the code will be included rather than just a link to the gist!</strong></p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/1200/1*3m_UcQOAyKtIpHQ6j9JzZw.gif\" class=\"graf-image\" /></figure>\n<h3>Here’s a Cheatsheet:</h3>\n<h3>Getting Started (Advanced Users Skip Section):</h3>\n<hr>\n<h4>✔ Check the Current Directory ➡ <code>pwd</code>:</h4>\n<p>On the command line, it’s important to know the directory we are currently working on. For that, we can use <code>pwd</code> command.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*dimzLUrmDI4Ufev6.gif\" class=\"graf-image\" /></figure>It shows that I’m working on my Desktop directory.\n<h4>✔ Display List of Files ➡ <code>ls</code>:</h4>\n<p>To see the list of files and directories in the current directory use <code>ls</code> command in your CLI.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*HHzVrK2CtTPwTdYT.gif\" class=\"graf-image\" /></figure>Shows all of my files and directories of my Desktop directory.\n<ul>\n<li><span id=\"20cb\">To show the contents of a directory pass the directory name to the <code>ls</code> command i.e. <code>ls directory_name</code>.</span></li>\n<li><span id=\"5cd8\">Some useful <code>ls</code> command options:-</span></li>\n</ul>\n<p>OptionDescriptionls -alist all files including hidden file starting with ‘.’ls -llist with the long formatls -lalist long format including hidden files</p>\n<h4>✔ Create a Directory ➡ <code>mkdir</code>:</h4>\n<p>We can create a new folder using the <code>mkdir</code> command. To use it type <code>mkdir folder_name</code>.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*m3dDyC9vRJBUZSxR.gif\" class=\"graf-image\" /></figure>Use `ls` command to see the directory is created or not.\n<p>I created a cli-practice directory in my working directory i.e. Desktop directory.</p>\n<h4>✔ Move Between Directories ➡ <code>cd</code>:</h4>\n<p>It’s used to change directory or to move other directories. To use it type <code>cd directory_name</code>.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*34KGxT2G8oNMDnIc.gif\" class=\"graf-image\" /></figure>Can use `pwd` command to confirm your directory name.\n<p>Changed my directory to the cli-practice directory. And the rest of the tutorial I’m gonna work within this directory.</p>\n<h4>✔ Parent Directory ➡ <code>..</code>:</h4>\n<p>We have seen <code>cd</code> command to change directory but if we want to move back or want to move to the parent directory we can use a special symbol <code>..</code> after <code>cd</code> command, like <code>cd ..</code></p>\n<h4>✔ Create Files ➡ <code>touch</code>:</h4>\n<p>We can create an empty file by typing <code>touch file_name</code>. It's going to create a new file in the current directory (the directory you are currently in) with your provided name.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*xu1wtv7gJ2NMvP60.gif\" class=\"graf-image\" /></figure>I created a hello.txt file in my current working directory. Again you can use `ls` command to see the file is created or not.\n<p>Now open your hello.txt file in your text editor and write <em>Hello Everyone!</em> into your hello.txt file and save it.</p>\n<h4>✔ Display the Content of a File ➡ <code>cat</code>:</h4>\n<p>We can display the content of a file using the <code>cat</code> command. To use it type <code>cat file_name</code>.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*iKf5w9QFNCeLRv8a.gif\" class=\"graf-image\" /></figure>Shows the content of my hello.txt file.\n<h4>✔ Move Files &#x26; Directories ➡ <code>mv</code>:</h4>\n<p>To move a file and directory, we use <code>mv</code> command.</p>\n<p>By typing <code>mv file_to_move destination_directory</code>, you can move a file to the specified directory.</p>\n<p>By entering <code>mv directory_to_move destination_directory</code>, you can move all the files and directories under that directory.</p>\n<p>Before using this command, we are going to create two more directories and another txt file in our cli-practice directory.</p>\n<p><code>mkdir html css touch bye.txt</code></p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*piaAQz_MQpzo7DPH.gif\" class=\"graf-image\" /></figure>Yes, we can use multiple directories & files names one after another to create multiple directories & files in one command.\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*5jmj_ZyNz46GuQKz.gif\" class=\"graf-image\" /></figure>Moved my bye.txt file into my css directory and then moved my css directory into my html directory.\n<h4>✔ Rename Files &#x26; Directories ➡ <code>mv</code>:</h4>\n<p><code>mv</code> command can also be used to rename a file and a directory.</p>\n<p>You can rename a file by typing <code>mv old_file_name new_file_name</code> &#x26; also rename a directory by typing <code>mv old_directory_name new_directory_name</code>.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*WTVu1dd6gr-nmWhD.gif\" class=\"graf-image\" /></figure>Renamed my hello.txt file to the hi.txt file and html directory to the folder directory.\n<h4>✔ Copy Files &#x26; Directories ➡ <code>cp</code>:</h4>\n<p>To do this, we use the <code>cp</code> command.</p>\n<ul>\n<li><span id=\"62fa\">You can copy a file by entering <code>cp file_to_copy new_file_name</code>.</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*kCLVtKN9oKPbHfRF.gif\" class=\"graf-image\" /></figure>Copied my hi.txt file content into hello.txt file. For confirmation open your hello.txt file in your text editor.\n<ul>\n<li><span id=\"9bfc\">You can also copy a directory by adding the <code>-r</code> option, like <code>cp -r directory_to_copy new_directory_name</code>.</span></li>\n</ul>\n<p><em>The</em> <code>-r</code> <em>option for \"recursive\" means that it will copy all of the files including the files inside of subfolders.</em></p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*MnmzMiioIYCuK92B.gif\" class=\"graf-image\" /></figure>Here I copied all of the files from the folder to folder-copy.\n<h4>✔ Remove Files &#x26; Directories ➡ <code>rm</code>:</h4>\n<p>To do this, we use the <code>rm</code> command.</p>\n<ul>\n<li><span id=\"487a\">To remove a file, you can use the command like <code>rm file_to_remove</code>.</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*ohCmdthd92_HA6Ze.gif\" class=\"graf-image\" /></figure>Here I removed my hi.txt file.\n<ul>\n<li><span id=\"0e9a\">To remove a directory, use the command like <code>rm -r directory_to_remove</code>.</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*voDbzwSpw24A2RjQ.gif\" class=\"graf-image\" /></figure>I removed my folder-copy directory from my cli-practice directory i.e. current working directory.\n<h4>✔ Clear Screen ➡ <code>clear</code>:</h4>\n<p>Clear command is used to clear the terminal screen.</p>\n<h4>✔ Home Directory ➡ <code>~</code>:</h4>\n<p>The Home directory is represented by <code>~</code>. The Home directory refers to the base directory for the user. If we want to move to the Home directory we can use <code>cd ~</code> command. Or we can only use <code>cd</code> command.</p>\n<hr>\n<h3>MY COMMANDS:</h3>\n<h3>1.) Recursively unzip zip files and then delete the archives when finished:</h3>\n<p><strong>here is a</strong> <a href=\"https://github.com/bgoonz/bash-commands-walkthrough/tree/master/steps/1-recursive-unzip\" class=\"markup--anchor markup--p-anchor\"><strong>folde</strong></a><strong>r containing the before and after… I had to change folder names slightly due to a limit on the length of file-paths in a github repo.</strong></p>\n<pre><code>find . -name \"*.zip\" | while read filename; do unzip -o -d \"`dirname \"$filename\"`\" \"$filename\"; done;    \n\nfind . -name \"*.zip\" -type f -print -delete\n</code></pre>\n<hr>\n<h3>2.) Install node modules recursively:</h3>\n<pre><code>npm i -g recursive-install  \n\nnpm-recursive-install\n</code></pre>\n<hr>\n<h3>3.) Clean up unnecessary files/folders in git repo:</h3>\n<pre><code>find . -empty -type f -print -delete #Remove empty files\n\n# -------------------------------------------------------\nfind . -empty -type d -print -delete #Remove empty folders\n\n# -------------------------------------------------------\n\n# This will remove .git folders...    .gitmodule files as well as .gitattributes and .gitignore files. \n\nfind . \\( -name \".git\" -o -name \".gitignore\" -o -name \".gitmodules\" -o -name \".gitattributes\" \\) -exec rm -rf -- {} + \n\n# -------------------------------------------------------\n\n# This will remove the filenames you see listed below that just take up space if a repo has been downloaded for use exclusively in your personal file system (in which case the following files just take up space)# Disclaimer... you should not use this command in a repo that you intend to use with your work as it removes files that attribute the work to their original creators!\n\nfind . \\( -name \"*SECURITY.txt\" -o -name \"*RELEASE.txt\" -o -name \"*CHANGELOG.txt\" -o -name \"*LICENSE.txt\" -o -name \"*CONTRIBUTING.txt\" -name \"*HISTORY.md\" -o -name \"*LICENSE\" -o -name \"*SECURITY.md\" -o -name \"*RELEASE.md\" -o -name \"*CHANGELOG.md\" -o -name \"*LICENSE.md\" -o -name \"*CODE_OF_CONDUCT.md\" -o -name \"\\*CONTRIBUTING.md\" \\) -exec rm -rf -- {} +\n</code></pre>\n<h4>In Action:</h4>\n<p>The following output from my bash shell corresponds to the directory:</p>\n<p><a href=\"https://github.com/bgoonz/bash-commands-walkthrough/tree/master/steps/3-clean-up-fluf/DS-ALGO-OFFICIAL-master\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz/bash-commands-walkthrough/tree/master/steps/3-clean-up-fluf/DS-ALGO-OFFICIAL-master\"><strong>bgoonz/bash-commands-walkthrough</strong><br />\n<em>Deployment github-pages Navigation Big O notation is the language we use for talking about how long an algorithm takes…</em>github.com</a><a href=\"https://github.com/bgoonz/bash-commands-walkthrough/tree/master/steps/3-clean-up-fluf/DS-ALGO-OFFICIAL-master\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<h4>which was created by running the aforementioned commands in in a perfect copy of this directory:</h4>\n<p><a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\"><strong>bgoonz/DS-ALGO-OFFICIAL</strong><br />\n<em>Deployment github-pages Navigation Big O notation is the language we use for talking about how long an algorithm takes…</em>github.com</a><a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<blockquote>\n<p><strong>…..below is the terminal output for the following commands:</strong></p>\n</blockquote>\n<pre><code>pwd\n/mnt/c/Users/bryan/Downloads/bash-commands/steps/3-clean-up-fluf/DS-ALGO-OFFICIAL-master\n</code></pre>\n<blockquote>\n<p><strong>After printing the working directory for good measure:</strong></p>\n</blockquote>\n<pre><code>find . -empty -type f -print -delete\n</code></pre>\n<blockquote>\n<p><strong>The above command deletes empty files recursively starting from the directory in which it was run:</strong></p>\n</blockquote>\n<pre><code>./CONTENT/DS-n-Algos/File-System/file-utilities/node_modules/line-reader/test/data/empty_file.txt\n./CONTENT/DS-n-Algos/_Extra-Practice/free-code-camp/nodejs/http-collect.js\n./CONTENT/Resources/Comments/node_modules/mime/.npmignore\n./markdown/tree2.md\n./node_modules/loadashes6/lodash/README.md\n./node_modules/loadashes6/lodash/release.md\n./node_modules/web-dev-utils/Markdown-Templates/Markdown-Templates-master/filled-out-readme.md\n|01:33:16|bryan@LAPTOP-9LGJ3JGS:[DS-ALGO-OFFICIAL-master] DS-ALGO-OFFICIAL-master_exitstatus:0[╗___________o>\n</code></pre>\n<blockquote>\n<p><strong>The command seen below deletes empty folders recursively starting from the directory in which it was run:</strong></p>\n</blockquote>\n<pre><code>find . -empty -type d -print -delete\n</code></pre>\n<blockquote>\n<p>The resulting directories….</p>\n</blockquote>\n<pre><code>|01:33:16|bryan@LAPTOP-9LGJ3JGS:[DS-ALGO-OFFICIAL-master] DS-ALGO-OFFICIAL-master_exitstatus:0[╗___________o>\n\nfind . -empty -type d -print -delete\n./.git/branches\n./.git/objects/info\n./.git/refs/tags\n|01:33:31|bryan@LAPTOP-9LGJ3JGS:[DS-ALGO-OFFICIAL-master] DS-ALGO-OFFICIAL-master_exitstatus:0[╗___________o>\n</code></pre>\n<blockquote>\n<p><strong>The command seen below deletes .git folders as well as .gitignore, .gitattributes, .gitmodule files</strong></p>\n</blockquote>\n<pre><code>find . \\( -name \".git\" -o -name \".gitignore\" -o -name \".gitmodules\" -o -name \".gitattributes\" \\) -exec rm -rf -- {} +\n</code></pre>\n<p><strong>The command seen below deletes most SECURITY, RELEASE, CHANGELOG, LICENSE, CONTRIBUTING, &#x26; HISTORY files that take up pointless space in repo’s you wish to keep exclusively for your own reference.</strong></p>\n<h3>!!!Use with caution as this command removes the attribution of the work from it’s original authors!!!!!</h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*r5dGhtbeZ4VdO54U\" alt=\"!!!Use with caution as this command removes the attribution of the work from it’s original authors!!!!!\" class=\"graf-image\" /><figcaption>!!!Use with caution as this command removes the attribution of the work from it’s original authors!!!!!</figcaption></figure>find . \\( -name \"*SECURITY.txt\" -o -name \"*RELEASE.txt\" -o  -name \"*CHANGELOG.txt\" -o -name \"*LICENSE.txt\" -o -name \"*CONTRIBUTING.txt\" -name \"*HISTORY.md\" -o -name \"*LICENSE\" -o -name \"*SECURITY.md\" -o -name \"*RELEASE.md\" -o  -name \"*CHANGELOG.md\" -o -name \"*LICENSE.md\" -o -name \"*CODE_OF_CONDUCT.md\" -o -name \"*CONTRIBUTING.md\" \\) -exec rm -rf -- {} +\n<hr>\n<h3>4.) Generate index.html file that links to all other files in working directory:</h3>\n<pre><code>#!/bin/sh\n# find ./ | grep -i \"\\.*$\" >files\nfind ./ | sed -E -e 's/([^ ]+[ ]+){8}//' | grep -i \"\\.*$\">files\nlisting=\"files\"\nout=\"\"\nhtml=\"index.html\"\nout=\"basename $out.html\"\nhtml=\"index.html\"\ncmd() {\n  echo '  &#x3C;!DOCTYPE html>'\n  echo '&#x3C;html>'\n  echo '&#x3C;head>'\n  echo '  &#x3C;meta http-equiv=\"Content-Type\" content=\"text/html\">'\n  echo '  &#x3C;meta name=\"Author\" content=\"Bryan Guner\">'\n  echo '&#x3C;link rel=\"stylesheet\" href=\"./assets/prism.css\">'\n  echo ' &#x3C;link rel=\"stylesheet\" href=\"./assets/style.css\">'\n  echo ' &#x3C;script async defer src=\"./assets/prism.js\">&#x3C;/script>'\n  echo \"  &#x3C;title> directory &#x3C;/title>\"\n  echo \"\"\n  echo '&#x3C;style>'\necho '    a {'\necho '      color: black;'\necho '    }'\necho ''\necho '    li {'\necho '      border: 1px solid black !important;'\necho '      font-size: 20px;'\necho '      letter-spacing: 0px;'\necho '      font-weight: 700;'\necho '      line-height: 16px;'\necho '      text-decoration: none !important;'\necho '      text-transform: uppercase;'\necho '      background: #194ccdaf !important;'\necho '      color: black !important;'\necho '      border: none;'\necho '      cursor: pointer;'\necho '      justify-content: center;'\necho '      padding: 30px 60px;'\necho '      height: 48px;'\necho '      text-align: center;'\necho '      white-space: normal;'\necho '      border-radius: 10px;'\necho '      min-width: 45em;'\necho '      padding: 1.2em 1em 0;'\necho '      box-shadow: 0 0 5px;'\necho '      margin: 1em;'\necho '      display: grid;'\necho '      -webkit-border-radius: 10px;'\necho '      -moz-border-radius: 10px;'\necho '      -ms-border-radius: 10px;'\necho '      -o-border-radius: 10px;'\necho '    }'\necho '  &#x3C;/style>'\n  echo '&#x3C;/head>'\n  echo '&#x3C;body>'\n  echo \"\"\n  # continue with the HTML stuff\n  echo \"\"\n  echo \"\"\n  echo \"&#x3C;ul>\"\n  awk '{print \"&#x3C;li>&#x3C;a href=\\\"\"$1\"\\\">\",$1,\"&#x26;nbsp;&#x3C;/a>&#x3C;/li>\"}' $listing\n  # awk '{print \"&#x3C;li>\"};\n  #  {print \" &#x3C;a href=\\\"\"$1\"\\\">\",$1,\"&#x3C;/a>&#x3C;/li>&#x26;nbsp;\"}' \\ $listing\n  echo \"\"\n  echo \"&#x3C;/ul>\"\n  echo \"&#x3C;/body>\"\n  echo \"&#x3C;/html>\"\n}\ncmd $listing --sort=extension >>$html\n</code></pre>\n<h4>In Action:</h4>\n<p><strong>I will use this copy of my Data Structures Practice Site to demonstrate the result:</strong></p>\n<p><a href=\"https://github.com/side-projects-42/DS-Bash-Examples-Deploy\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/side-projects-42/DS-Bash-Examples-Deploy\"><strong>side-projects-42/DS-Bash-Examples-Deploy</strong><br />\n<em>Deployment github-pages Navigation Big O notation is the language we use for talking about how long an algorithm takes…</em>github.com</a><a href=\"https://github.com/side-projects-42/DS-Bash-Examples-Deploy\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*PuuDTUviX5G6mja-5eKUIw.png\" class=\"graf-image\" /></figure>#### The result is a index.html file that contains a list of links to each file in the directory:\n<blockquote>\n<p>here is a link to and photo of the resulting html file:</p>\n</blockquote>\n<p><a href=\"https://quirky-meninsky-4181b5.netlify.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://quirky-meninsky-4181b5.netlify.app/\"><strong>index.html</strong><br />\n<em>CONTENT/DS-n-Algos/</em>quirky-meninsky-4181b5.netlify.app</a><a href=\"https://quirky-meninsky-4181b5.netlify.app/\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*AOYbWvUGN9yJ4ceNzAGGsw.png\" class=\"graf-image\" /></figure>\n<hr>\n<h3>5.) Download all links to a files of a specified extension on a user provided (url) webpage:</h3>\n<pre><code>wget -r -A.pdf https://overapi.com/gitwget --wait=2 --level=inf --limit-rate=20K --recursive --page-requisites --user-agent=Mozilla --no-parent --convert-links --adjust-extension --no-clobber -e robots=off\n</code></pre>\n<blockquote>\n<p>The result is stored in <a href=\"https://github.com/bgoonz/bash-commands-walkthrough/tree/master/steps/5-download-all-pdf\" class=\"markup--anchor markup--blockquote-anchor\">this directory:</a></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/1200/1*8evVPO_z-_TATzkcDTp15Q.png\" class=\"graf-image\" /></figure>\n<hr>\n<h3>6.)Recursively remove lines of text containing the string badFolder from files in the working directory.</h3>\n<pre><code>find . -type f -exec sed -i '/badFolder/d' ./* {} \\;\n\n# OR\n\nfind . -name 'result.md'  -type f -exec sed -i '/badFolder/d' ./* {} \\;\n</code></pre>\n<p><strong>As an example I will run this command on a file containing the text:</strong></p>\n<pre><code>Hacks Blog\n\nRead more at hacks.mozilla.org\n\nbadFolder\n\nbadFolder Implementing Private Fields for JavaScript\n\nWhen implementing a language feature for JavaScript, an implementer must make decisions about how the language in the specification maps to the implementation. Private fields is an example of where the specification language and implementation reality diverge, at least in SpiderMonkey– the JavaScript engine which powers Firefox. To understand more, I’ll explain what private fields are, a couple of models for thinking about them, and explain why our implementation diverges from the specification language.The post Implementing Private Fields for JavaScript appeared first on Mozilla Hacks - the Web developer blog.\n\nPosted Tuesday, June 8, 2021 by Matthew Gaudet\n\nLooking fine with Firefox 89\n\nFirefox 89 has smartened up and brings with it a slimmed-down, slightly more minimalist interface.badFolder Along with this new look, we get some great styling features including a force-colours feature for media queries and better control over how fonts are displayed. The long-awaited top-level await keyword for JavaScript modules is now enabled, as well as the PerformanceEventTiming interface, which is another addition to the performance suite of APIs: 89 really has been working out!The post Looking fine with Firefox 89 appeared first on Mozilla Hacks - the Web developer blog.\n\nbadFolder\n\nPosted Tuesday, June 1, 2021 by Chris Mills\n\nbadFolder\n\nImproving Firefox stability on Linux\n\nRoughly a year ago at Mozilla we started an effort to improve Firefox stability on Linux. This effort quickly became an example of good synergies between FOSS projects.The post Improving Firefox stability on Linux appeared first on Mozilla Hacks - the Web developer blog.\n\nPosted Wednesday, May 19, 2021 by Gabriele Svelto badFolder\n\nIntroducing Firefox’s new Site Isolation Security Architecture\n\nLike any web browser, Firefox loads code from untrusted and potentially hostile websites and runs it on your computer. To protect you against new types of attacks from malicious sites and to meet the security principles of Mozilla, we set out to redesign Firefox on desktop.The post Introducing Firefox’s new Site Isolation Security Architecture appeared first on Mozilla Hacks - the Web developer blog.\n\nPosted Tuesday, May 18, 2021 by Anny Gakhokidze\n\nPyodide Spin Out and 0.17 Release\n\nWe are happy to announce that Pyodide has become an independent and community-driven project. We are also pleased to announce the 0.17 release for Pyodide with many new features and improvements. Pyodide consists of the CPython 3.8 interpreter compiled to WebAssembly which allows Python to run in the browser.The post Pyodide Spin Out and 0.17 Release appeared first on Mozilla Hacks - the Web developer blog. badFolder\n\nPosted Thursday, April 22, 2021 by Teon Brooks\n</code></pre>\n<p><strong><em>I modified the command slightly to apply only to files called ‘result.md’:</em></strong></p>\n<blockquote>\n<p>The result is :</p>\n</blockquote>\n<pre><code>Hacks Blog\n\nRead more at hacks.mozilla.org\n\nWhen implementing a language feature for JavaScript, an implementer must make decisions about how the language in the specification maps to the implementation. Private fields is an example of where the specification language and implementation reality diverge, at least in SpiderMonkey– the JavaScript engine which powers Firefox. To understand more, I’ll explain what private fields are, a couple of models for thinking about them, and explain why our implementation diverges from the specification language.The post Implementing Private Fields for JavaScript appeared first on Mozilla Hacks - the Web developer blog.\n\nPosted Tuesday, June 8, 2021 by Matthew Gaudet\n\nLooking fine with Firefox 89\n\nPosted Tuesday, June 1, 2021 by Chris Mills\n\nImproving Firefox stability on Linux\n\nRoughly a year ago at Mozilla we started an effort to improve Firefox stability on Linux. This effort quickly became an example of good synergies between FOSS projects.The post Improving Firefox stability on Linux appeared first on Mozilla Hacks - the Web developer blog.\n\nIntroducing Firefox’s new Site Isolation Security Architecture\n\nLike any web browser, Firefox loads code from untrusted and potentially hostile websites and runs it on your computer. To protect you against new types of attacks from malicious sites and to meet the security principles of Mozilla, we set out to redesign Firefox on desktop.The post Introducing Firefox’s new Site Isolation Security Architecture appeared first on Mozilla Hacks - the Web developer blog.\n\nPosted Tuesday, May 18, 2021 by Anny Gakhokidze\n\nPyodide Spin Out and 0.17 Release\n\nPosted Thursday, April 22, 2021 by Teon Brooks\n</code></pre>\n<figure><img src=\"https://cdn-images-1.medium.com/max/1200/1*Up5as-MkHcHbvI_qX1AqPw.png\" class=\"graf-image\" /></figure>\n<p><strong>the test.txt and result.md files can be found here:</strong></p>\n<p><a href=\"https://github.com/bgoonz/bash-commands-walkthrough/tree/master/steps/6-remove-lines-contaning-bad-text\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz/bash-commands-walkthrough/tree/master/steps/6-remove-lines-contaning-bad-text\"><strong>bgoonz/bash-commands-walkthrough</strong><br />\n<em>to accompany the medium article I am writing. Contribute to bgoonz/bash-commands-walkthrough development by creating an…</em>github.com</a><a href=\"https://github.com/bgoonz/bash-commands-walkthrough/tree/master/steps/6-remove-lines-contaning-bad-text\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<hr>\n<h3>7.) Execute command recursively:</h3>\n<p><strong>Here I have modified the command I wish to run recursively to account for the fact that the ‘find’ command already works recursively, by appending the -maxdepth 1 flag…</strong></p>\n<blockquote>\n<p><strong>I am essentially removing the recursive action of the find command…</strong></p>\n</blockquote>\n<p><strong>That way, if the command affects the more deeply nested folders we know the outer RecurseDirs function we are using to run the <em>find/pandoc</em> line once in every subfolder of the working directory… is working properly!</strong></p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/600/1*5C_uzLnuCSlTiioi2EtnUA.png\" class=\"graf-image\" /></figure>**Run in the folder shown to the left… we would expect every .md file to be accompanied by a newly generated html file by the same name.**\n<p><strong>The results of said operation can be found in the</strong> <a href=\"https://github.com/bgoonz/bash-commands-walkthrough/tree/master/steps/7-recursive-run\" class=\"markup--anchor markup--p-anchor\"><strong>following directory</strong></a></p>\n<h4>In Action:</h4>\n<p>🢃 Below 🢃</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/1200/1*k9c1QRKY07TLJnp9Se89lQ.gif\" class=\"graf-image\" /></figure>\n<h4>The final result is:</h4>\n<figure><img src=\"https://cdn-images-1.medium.com/max/1200/1*jqrjNeBuRmTrDt3vmQ50LQ.png\" class=\"graf-image\" /></figure>\n<p><em>If you want to run any bash script recursively all you have to do is substitue out line #9 with the command you want to run once in every sub-folder.</em></p>\n<pre><code>function RecurseDirs ()\n{\n    oldIFS=$IFS\n    IFS=$'\\n'\n    for f in \"$@\"\n    do\n\n#Replace the line below with your own command!\n\n#find ./ -iname \"*.md\" -maxdepth 1 -type f -exec sh -c 'pandoc --standalone \"${0}\" -o \"${0%.md}.html\"' {} \\;\n\n#####################################################\n# YOUR CODE BELOW!\n\n#####################################################\n\nif [[ -d \"${f}\" ]]; then\n            cd \"${f}\"\n            RecurseDirs $(ls -1 \".\")\n            cd ..\n        fi\n    done\n    IFS=$oldIFS\n}\nRecurseDirs \"./\"\n</code></pre>\n<hr>\n<h3>TBC….</h3>\n<p><strong>Here are some of the other commands I will cover in greater detail… at a later time:</strong></p>\n<h3>9. Copy any text between &#x3C;script> tags in a file called example.html to be inserted into a new file: out.js</h3>\n<pre><code>sed -n -e '/&#x3C;script>/,/&#x3C;\\/script>/p' example.html >out.js\n</code></pre>\n<hr>\n<h3>10. Recursively Delete node_modules folders</h3>\n<pre><code>find . -name 'node_modules' -type d -print -prune -exec rm -rf '{}' +\n</code></pre>\n<hr>\n<h3>11. Sanatize file and folder names to remove illegal characters and reserved words.</h3>\n<pre><code>sanitize() {\n  shopt -s extglob;\n\n  filename=$(basename \"$1\")\n  directory=$(dirname \"$1\")\n\n  filename_clean=$(echo \"$filename\" | sed -e 's/[\\\\/:\\*\\?\"&#x3C;>\\|\\x01-\\x1F\\x7F]//g' -e 's/^\\(nul\\|prn\\|con\\|lpt[0-9]\\|com[0-9]\\|aux\\)\\(\\.\\|$\\)//i' -e 's/^\\.*$//' -e 's/^$/NONAME/')\n\n  if (test \"$filename\" != \"$filename_clean\")\n  then\n    mv -v \"$1\" \"$directory/$filename_clean\"\n  fi\n}\n\nexport -f sanitize\n\nsanitize_dir() {\n  find \"$1\" -depth -exec bash -c 'sanitize \"$0\"' {} \\;\n\n}\n\nsanitize_dir '/path/to/somewhere'\n</code></pre>\n<hr>\n<h3>12. Start postgresql in terminal</h3>\n<pre><code>sudo -u postgres psql\n</code></pre>\n<hr>\n<h3>13. Add closing body and script tags to each html file in working directory.</h3>\n<pre><code>for f in * ; do\n  mv \"$f\" \"$f.html\"\ndoneecho \"&#x3C;form>\n &#x3C;input type=\"button\" value=\"Go back!\" onclick=\"history.back()\">\n&#x3C;/form>\n  &#x3C;/body>&#x3C;/html>\" | tee -a *.html\n</code></pre>\n<hr>\n<h3>14. Batch Download Videos</h3>\n<pre><code>#!/bin/bash\n\nlink=\"#insert url here#\"\n#links were a set of strings with just the index of the video as the variable\n\nnum=3\n#first video was numbered 3 - weird.\n\next=\".mp4\"\n\nwhile [ $num -le 66 ]\ndo\n      wget $link$num$ext -P ~/Downloads/\n      num=$(($num+1))\ndone\n</code></pre>\n<hr>\n<h3>15. Change File Extension from ‘.txt’ to .doc for all files in working directory.</h3>\n<pre><code>sudo apt install rename\n\nrename 's/\\.txt$/.doc/' *.txt\n</code></pre>\n<h3>16. Recursivley change any file with extension .js.download to .js</h3>\n<pre><code>find . -name \"*.\\.js\\.download\" -exec rename 's/\\.js\\.download$/.js/' '{}' +\n</code></pre>\n<hr>\n<h3>17. Copy folder structure including only files of a specific extension into an ouput Folder</h3>\n<pre><code>find . -name '*.md' | cpio -pdm './../outputFolder'\n</code></pre>\n<hr>\n<h3>Discover More:</h3>\n<p><a href=\"https://bgoonz-blog.netlify.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bgoonz-blog.netlify.app/\"><strong>Web-Dev-Hub</strong><br />\n<em>Memoization, Tabulation, and Sorting Algorithms by Example Why is looking at runtime not a reliable method of…</em>bgoonz-blog.netlify.app</a><a href=\"https://bgoonz-blog.netlify.app/\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<h3>Part 2 of this series:</h3>\n<p><a href=\"https://medium.com/@bryanguner/life-saving-bash-scripts-part-2-b40c8ee22682\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/@bryanguner/life-saving-bash-scripts-part-2-b40c8ee22682\"><strong>Medium</strong><br />\n<em>Continued!!!medium.com</em></a><a href=\"https://medium.com/@bryanguner/life-saving-bash-scripts-part-2-b40c8ee22682\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<hr>\n<p>By <a href=\"https://medium.com/@bryanguner\" class=\"p-author h-card\">Bryan Guner</a> on <a href=\"https://medium.com/p/920fb6ab9d0a\">June 29, 2021</a>.</p>\n<p><a href=\"https://medium.com/@bryanguner/bash-commands-that-save-time-920fb6ab9d0a\" class=\"p-canonical\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on August 31, 2021.</p>"},{"url":"/docs/content/projects/","relativePath":"docs/content/projects.md","relativeDir":"docs/content","base":"projects.md","name":"projects","frontmatter":{"title":"Projects","weight":0,"excerpt":"These are some of my active projects.","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<br>\n<h1>  Search Awesome Lists      </h1>\n<br>\n<iframe src=\"https://bgoonz.github.io/searchAwesome/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1>  Useful Resource Archive #3   </h1>\n<br>\n<iframe src=\"https://useful-resource-repo3-0.vercel.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1>  Project Image Portfolio   </h1>\n<br>\n<iframe src=\"https://project-portfolio42.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<h1>  Web Audio DAW      </h1>\n<br>\n<iframe src=\"https://mihirbeg28.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<h1>React & Shopify Ecommerce Site (Norwex)     </h1>\n<br>\n<iframe src=\"https://friendly-amaranth-51833.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<h1>Bgoonz Bookmarks   </h1>\n<br>\n<iframe src=\"https://bgoonzbookmarks.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1>Portfolio </h1>\n<br>\n<iframe src=\"https://bg-portfolio.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<h1>Goal Tracker  </h1>\n<br>\n<iframe src=\"https://splendid-onion-b0ec3.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1>  Potluck Planner </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://potluck-landing.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<h1>Meditation App </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://meditate42app.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<h1>Fancy Portfolio</h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://bg-portfolio.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n   <iframe height=\"300\" style=\"width: 90%;\" scrolling=\"no\" title=\"searchblog2.0\"\n      src=\"https://codepen.io/bgoonz/embed/LYyBwEp?default-tab=result&theme-id=dark\" frameborder=\"no\" loading=\"lazy\"\n      allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen <a href=\"https://codepen.io/bgoonz/pen/LYyBwEp\">\n        searchblog2.0</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n      on <a href=\"https://codepen.io\">CodePen</a>.\n    </iframe>\n    <br>\n    <br>\n    <br>\n    <iframe height=\"300\" style=\"width: 90%;\" scrolling=\"no\" title=\"Fibonacci Carousel\" src=\"\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen <a href=\"https://replit.com/@bgoonz/Comments-1#index.html\">\n        Fibonacci Carousel</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n      on <a href=\"https://codepen.io\">CodePen</a>.\n    </iframe>\n    <br>\n    <br>\n  \n     <br>\n    <br>\n    <br>\n  <iframe scrolling=\"yes\" src=\"https://goonlinetools.com/covid19/global\" style=\"border: 0px none;height: 540px; margin-top: -110px; margin-bottom: -220px; width: 100%;\"> </iframe>\n  \n      <br>\n    <br>\n  \n  \n  <br>\n    <iframe height=\"300\" style=\"width: 90%;\" scrolling=\"no\" title=\"Fibonacci Carousel\"\n      src=\"https://codepen.io/bgoonz/embed/JjNagJo?default-tab=result&theme-id=dark\" frameborder=\"no\" loading=\"lazy\"\n      allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen <a href=\"https://codepen.io/bgoonz/pen/JjNagJo\">\n        Fibonacci Carousel</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n      on <a href=\"https://codepen.io\">CodePen</a>.\n    </iframe>\n    <br>\n    <br>\n    <br>\n    <iframe height=\"300\" style=\"width: 90%;\" scrolling=\"no\" title=\"embed-twitter-feed\"\n      src=\"https://codepen.io/bgoonz/embed/poPOqEO?default-tab=result&theme-id=dark\" frameborder=\"no\" loading=\"lazy\"\n      allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen <a href=\"https://codepen.io/bgoonz/pen/poPOqEO\">\n        embed-twitter-feed</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n      on <a href=\"https://codepen.io\">CodePen</a>.\n    </iframe>\n    <br>\n    <br>\n    <br>\n    <iframe height=\"300\" style=\"width: 90%;\" scrolling=\"no\" src=\"//jsfiddle.net/bgoonz/j4xt839d/embedded/result/\"\n      allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n    <br>\n    <br>\n    <br>\n    <iframe height=\"300\" style=\"width: 90%;\" scrolling=\"no\" src=\"//jsfiddle.net/bgoonz/76osauer/1/embedded/result/\"\n      allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n    <br>\n    <br>\n    <br>\n    <iframe height=\"300\" style=\"width: 90%;\" scrolling=\"no\" src=\"//jsfiddle.net/bgoonz/vtz7820m/embedded/result/dark/\"\n      allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n    <br>\n    <br>\n    <br>\n    <iframe height=\"300\" style=\"width: 90%;\" scrolling=\"no\"\n      src=\"//jsfiddle.net/bgoonz/1dye9uws/2/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\"\n      frameborder=\"0\"></iframe>\n    <br>\n    <br>\n    <br>\n    <iframe height=\"300\" style=\"width: 90%;\" scrolling=\"no\" src=\"//jsfiddle.net/bgoonz/3mpgzkx7/1/embedded/\"\n      allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe> \n    <br>\n    <br>\n    <br>\n    <iframe loading=\"lazy\" src=\"https://codepen.io/bgoonz/embed/zYwJQaw?default-tab=html%2Cresult\"\n      style=\"width:90%; height:575px; border:0; border-radius: 4px; overflow:hidden;\" title=\"hvbrd-sockets (forked)\"\n      sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n    <br>\n    <br>\n    <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->\n    <br>\n    <iframe loading=\"lazy\" src=\"https://codesandbox.io/embed/bigo-3wqy4?fontsize=14&hidenavigation=1&theme=dark\"\n      style=\"width:90%; height:575px; border:0; border-radius: 4px; overflow:hidden;\" title=\"hvbrd-sockets (forked)\"\n      sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n    <br>\n    <br>\n    <br>\n    <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->\n    <iframe loading=\"lazy\"\n      src=\"https://codesandbox.io/embed/hvbrd-sockets-forked-vsi2o?fontsize=14&hidenavigation=1&theme=dark\"\n      style=\"width:90%; height:575px; border:0; border-radius: 4px; overflow:hidden;\" title=\"hvbrd-sockets (forked)\"\n      sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n    <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->\n    <br>\n    <br>\n    <iframe loading=\"lazy\" src=\"https://codesandbox.io/embed/summer-surf-p6dei?fontsize=14&hidenavigation=1&theme=dark\"\n      style=\"width:90%; height:575px; border:0; border-radius: 4px; overflow:hidden;\" title=\"summer-surf-p6dei\"\n      sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n    <br>\n    <br>\n    <br>\n    <br>\n    <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->\n    <br> <br>\n    <br>\n    <iframe loading=\"lazy\"\n      src=\"https://codesandbox.io/embed/sharp-feistel-x8bvv?fontsize=14&hidenavigation=1&theme=dark\"\n      style=\"width:90%; height:575px; border:0; border-radius: 4px; overflow:hidden;\" title=\"sharp-feistel-x8bvv\"\n      sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n    <br>\n    <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->\n    <!----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------->\n    <center>\n      <br>\n      <br>\n      <br>\n      <br>\n      <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\"\n        title=\"3D Cover Flow in React! | @keyframers 3.7\"\n        src=\"https://codepen.io/bgoonz/embed/ExZvGoZ?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\"\n        allowtransparency=\"true\" allowfullscreen=\"true\">\n        See the Pen <a href='https://codepen.io/bgoonz42/pen/RwpeaWr'>3D Cover Flow in React! | @keyframers\n          3.7</a> by Bryan\n        C Guner\n        (<a href='https://codepen.io/bgoonz42'>@bgoonz42</a>) on <a href='https://codepen.io'>CodePen</a>.\n      </iframe>\n      <br>\n      <br>\n      <br>\n      <br>\n      <br>\n      <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"Simple Typing Carousel \"\n        src=\"https://codepen.io/bgoonz/embed/ExZvGoZ?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\"\n        allowtransparency=\"true\" allowfullscreen=\"true\">\n        See the Pen <a href=\"https://codepen.io/bgoonz/pen/ExZvGoZ\">\n          Simple Typing Carousel </a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n        on <a href=\"https://codepen.io\">CodePen</a>.\n      </iframe>\n      <br>\n      <br>\n      <br>\n      <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\"\n        title=\"3D Cover Flow in React! | @keyframers 3.7\"\n        src=\"https://codepen.io/bgoonz42/embed/RwpeaWr?height=375&theme=dark&default-tab=js,result\" frameborder=\"no\"\n        loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n        See the Pen <a href='https://codepen.io/bgoonz42/pen/RwpeaWr'>3D Cover Flow in React! | @keyframers\n          3.7</a> by Bryan\n        C Guner\n        (<a href='https://codepen.io/bgoonz42'>@bgoonz42</a>) on <a href='https://codepen.io'>CodePen</a>.\n      </iframe>\n      <br>\n      <br>\n      <br>\n      <br>\n      <!-------------------------------------------------------------------------------------->\n      <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"Video Background 1\"\n        src=\"https://codesandbox.io/embed/bgoonzblog20-oo3x5?fontsize=14&hidenavigation=1&theme=dark\"\n        style=\"width:90%; height:575px; border:0; border-radius: 4px; overflow:hidden;\" title=\"bgoonzblog2.0\"\n        sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n      <br>\n      <br>\n      <br>\n      <!-------------------------------------------------------------------------------------->\n      <br>\n      <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"Video Background 1\"\n        src=\"https://codepen.io/bgoonz/embed/BaRLKBd?default-tab=html%2Cresult&theme-id=dark\" frameborder=\"no\"\n        loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n        See the Pen <a href=\"https://codepen.io/bgoonz/pen/BaRLKBd\">\n          Video Background 1</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n        on <a href=\"https://codepen.io\">CodePen</a>.\n      </iframe>\n      <!-------------------------------------------------------------------------------------->\n      <br><br>\n      <!-------------------------------------------------------------------------------------->\n      <br><br>\n      <center>\n        <br>\n        <br>\n        <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\"\n          title=\"CSS-only Colorful Calendar Concept\" src=\"https://documentation-site-react2.vercel.app/\"\n          frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n          See the Pen <a href=\"https://codepen.io/bgoonz/pen/vYmKQYj\">\n            CSS-only Colorful Calendar Concept</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n          on <a href=\"https://codepen.io\">CodePen</a>.\n        </iframe>\n        <br>\n        <br>\n        <br>\n        <!-------------------------------------------------------------------------------------->\n        <br><br>\n        <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"FullTextSearchjs\"\n          src=\"https://codepen.io/bgoonz/embed/QWvMWoQ?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\"\n          allowtransparency=\"true\" allowfullscreen=\"true\">\n          See the Pen <a href=\"https://codepen.io/bgoonz/pen/QWvMWoQ\">\n            FullTextSearchjs</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n          on <a href=\"https://codepen.io\">CodePen</a>.\n        </iframe>\n        <br>\n        <br>\n        <br>\n        <!-------------------------------------------------------------------------------------->\n        <br>\n        <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"CSS Grid: Info Card\"\n          src=\"https://codepen.io/bgoonz42/embed/MWmpjmy?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\"\n          allowtransparency=\"true\" allowfullscreen=\"true\">\n          See the Pen <a href=\"https://codepen.io/bgoonz42/pen/MWmpjmy\">\n            CSS Grid: Info Card</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz42\">@bgoonz42</a>)\n          on <a href=\"https://codepen.io\">CodePen</a>.\n        </iframe>\n        <br>\n        <br>\n        <br>\n        <br>\n        <!-------------------------------------------------------------------------------------->\n        <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\"\n          title=\"CSS-only Colorful Calendar Concept\"\n          src=\"https://codepen.io/bgoonz/embed/vYmKQYj?default-tab=html%2Cresult&theme-id=dark\" frameborder=\"no\"\n          loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n          See the Pen <a href=\"https://codepen.io/bgoonz/pen/vYmKQYj\">\n            CSS-only Colorful Calendar Concept</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n          on <a href=\"https://codepen.io\">CodePen</a>.\n        </iframe>\n        <br>\n        <br>\n        <br>\n        <!-------------------------------------------------------------------------------------->\n        <br><br>\n        <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"Dashed Border Generator\"\n          src=\"https://codepen.io/bgoonz/embed/wvdgypd?default-tab=html%2Cresult&theme-id=dark\" frameborder=\"no\"\n          loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n          See the Pen <a href=\"https://codepen.io/bgoonz/pen/wvdgypd\">\n            Dashed Border Generator</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n          on <a href=\"https://codepen.io\">CodePen</a>.\n        </iframe>\n        <!-------------------------------------------------------------------------------------->\n        <br>\n        <br>\n        <br>\n        <br>\n        <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"Particle tornado\"\n          src=\"https://codepen.io/bgoonz/embed/VwPwRvr?height=375&theme-id=dark&default-tab=js,result\" frameborder=\"no\"\n          loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n          See the Pen <a href='https://codepen.io/bgoonz/pen/VwPwRvr'>Particle tornado</a> by Bryan C Guner\n          (<a href='https://codepen.io/bgoonz'>@bgoonz</a>) on <a href='https://codepen.io'>CodePen</a>.\n        </iframe>\n        <br>\n        <!-------------------------------------------------------------------------------------->\n        <br>\n        <br>\n        <br>\n        <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"A Simple Fade Effect on Scroll\"\n          src=\"https://codepen.io/bgoonz/embed/OJWzbRa?height=375&theme-id=dark&default-tab=html,result\"\n          frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n          See the Pen <a href='https://codepen.io/bgoonz/pen/OJWzbRa'>A Simple Fade Effect on Scroll</a> by Bryan C\n          Guner\n          (<a href='https://codepen.io/bgoonz'>@bgoonz</a>) on <a href='https://codepen.io'>CodePen</a>.\n        </iframe>\n        <br>\n        <!-------------------------------------------------------------------------------------->\n        <br>\n        <br>\n        <br>\n        <iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"Controlled Text Example\"\n          src=\"https://codepen.io/bgoonz/embed/oNZYbjZ?height=375&theme=dark&default-tab=js,result\" frameborder=\"no\"\n          loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n          See the Pen <a href='https://codepen.io/bgoonz/pen/oNZYbjZ'>Controlled Text Example</a> by Bryan C Guner\n          (<a href='https://codepen.io/bgoonz'>@bgoonz</a>) on <a href='https://codepen.io'>CodePen</a>.\n        </iframe>\n        <br>\n<pre><code>    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"MatrixCode\"\n      src=\"https://codepen.io/bgoonz/embed/KKaKbQX?height=375&#x26;theme-id=dark&#x26;default-tab=js,result\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen &#x3C;a href='https://codepen.io/bgoonz/pen/KKaKbQX'>MatrixCode&#x3C;/a> by Bryan C Guner\n      (&#x3C;a href='https://codepen.io/bgoonz'>@bgoonz&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.\n    &#x3C;/iframe>\n    &#x3C;br>\n    &#x3C;!-------------------------------------------------------------------------------------->\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"TroisJS InstancedMesh Test\"\n      src=\"https://codepen.io/bgoonz/embed/oNBNJMK?height=375&#x26;theme-id=dark&#x26;default-tab=js,result\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen &#x3C;a href='https://codepen.io/bgoonz/pen/oNBNJMK'>TroisJS InstancedMesh Test&#x3C;/a> by Bryan C Guner\n      (&#x3C;a href='https://codepen.io/bgoonz'>@bgoonz&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.\n    &#x3C;/iframe>\n    &#x3C;br>\n    &#x3C;!-------------------------------------------------------------------------------------->\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"What's behind ?\"\n      src=\"https://codepen.io/bgoonz/embed/mdRdaQV?height=375&#x26;theme-id=dark&#x26;default-tab=js,result\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen &#x3C;a href='https://codepen.io/bgoonz/pen/mdRdaQV'>What's behind ?&#x3C;/a> by Bryan C Guner\n      (&#x3C;a href='https://codepen.io/bgoonz'>@bgoonz&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.\n    &#x3C;/iframe>\n    &#x3C;br>\n    &#x3C;!-------------------------------------------Vector Swarm------------------------------------------->\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"VectorSwarm\"\n      src=\"https://codepen.io/bgoonz/embed/BapavbW?height=375&#x26;theme-id=dark&#x26;default-tab=js,result\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen &#x3C;a href='https://codepen.io/bgoonz/pen/BapavbW'>VectorSwarm&#x3C;/a> by Bryan C Guner\n      (&#x3C;a href='https://codepen.io/bgoonz'>@bgoonz&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.\n    &#x3C;/iframe>\n    &#x3C;br>\n    &#x3C;!-------------------------------------------------------------------------------------->\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"Canvas Sparkly Circle Loader\"\n      src=\"https://codepen.io/bgoonz/embed/ExZxMPN?height=375&#x26;theme-id=dark&#x26;default-tab=js,result\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen &#x3C;a href='https://codepen.io/bgoonz/pen/ExZxMPN'>Canvas Sparkly Circle Loader&#x3C;/a> by Bryan C Guner\n      (&#x3C;a href='https://codepen.io/bgoonz'>@bgoonz&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.\n    &#x3C;/iframe>\n    &#x3C;br>\n    &#x3C;!-------------------------------------------------------------------------------------->\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"Canvas particles\"\n      src=\"https://codepen.io/bgoonz/embed/bGgGZEZ?height=375&#x26;theme-id=dark&#x26;default-tab=js,result\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen &#x3C;a href='https://codepen.io/bgoonz/pen/bGgGZEZ'>Canvas particles&#x3C;/a> by Bryan C Guner\n      (&#x3C;a href='https://codepen.io/bgoonz'>@bgoonz&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.\n    &#x3C;/iframe>\n    &#x3C;br>\n    &#x3C;!-------------------------------------------------------------------------------------->\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"Inline Styles with React\"\n      src=\"https://codepen.io/bgoonz/embed/WNRjBoO?height=375&#x26;theme=dark&#x26;default-tab=js,result\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen &#x3C;a href='https://codepen.io/bgoonz/pen/WNRjBoO'>Inline Styles with React&#x3C;/a> by Bryan C Guner\n      (&#x3C;a href='https://codepen.io/bgoonz'>@bgoonz&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.\n    &#x3C;/iframe>\n    &#x3C;br>\n    &#x3C;!-------------------------------------------------------------------------------------->\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"Constellation\"\n      src=\"https://codepen.io/bgoonz/embed/zYNYbqK?height=375&#x26;theme-id=dark&#x26;default-tab=js,result\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen &#x3C;a href='https://codepen.io/bgoonz/pen/zYNYbqK'>Constellation&#x3C;/a> by Bryan C Guner\n      (&#x3C;a href='https://codepen.io/bgoonz'>@bgoonz&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.\n    &#x3C;/iframe>\n    &#x3C;br>\n    &#x3C;!-------------------------------------------------------------------------------------->\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"95 000 particles\"\n      src=\"https://codepen.io/bgoonz/embed/PoWoLNy?height=375&#x26;theme-id=dark&#x26;default-tab=js,result\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen &#x3C;a href='https://codepen.io/bgoonz/pen/PoWoLNy'>95 000 particles&#x3C;/a> by Bryan C Guner\n      (&#x3C;a href='https://codepen.io/bgoonz'>@bgoonz&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.\n    &#x3C;/iframe>\n    &#x3C;br>\n    &#x3C;!-------------------------------------------------------------------------------------->\n    &#x3C;br>&#x3C;br>\n    &#x3C;p class=\"codepen\" data-height=\"575\" data-theme-id=\"dark\" data-default-tab=\"html,result\" data-user=\"bgoonz\"\n      data-slug-hash=\"DmnlJ\"\n      style=\"height: 375px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\"\n      data-pen-title=\"Simple Responsive Form\">\n      &#x3C;span>See the Pen &#x3C;a href=\"https://codepen.io/chriscoyier/pen/DmnlJ\">\n          Simple Responsive Form&#x3C;/a> by Bryan Guner (&#x3C;a href=\"https://codepen.io/chriscoyier\">@bgoonz&#x3C;/a>)\n        on &#x3C;a href=\"https://codepen.io\">CodePen&#x3C;/a>.&#x3C;/span>\n    &#x3C;/p>\n    &#x3C;script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\">&#x3C;/script>\n    &#x3C;!-------------------------------------------------------------------------------------->\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"Smooth Page Scrolling in jQuery\"\n      src=\"https://codepen.io/bgoonz/embed/KKamLNy?height=375&#x26;theme=dark&#x26;default-tab=html,result\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen &#x3C;a href='https://codepen.io/bgoonz/pen/KKamLNy'>Smooth Page Scrolling in jQuery&#x3C;/a> by Bryan C\n      Guner\n      (&#x3C;a href='https://codepen.io/bgoonz'>@bgoonz&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.\n    &#x3C;/iframe>\n    &#x3C;br>\n    &#x3C;!-------------------------------------------------------------------------------------->\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"Demo Flexbox 3\"\n      src=\"https://codepen.io/bgoonz/embed/ZELKNBo?height=375&#x26;theme=dark&#x26;default-tab=css,result\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen &#x3C;a href='https://codepen.io/bgoonz/pen/ZELKNBo'>Demo Flexbox 3&#x3C;/a> by Bryan C Guner\n      (&#x3C;a href='https://codepen.io/bgoonz'>@bgoonz&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.\n    &#x3C;/iframe>\n    &#x3C;br>\n    &#x3C;!-------------------------------------------------------------------------------------->\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"Scroll Drawing\"\n      src=\"https://codepen.io/bgoonz/embed/abpWrBP?height=375&#x26;theme=dark&#x26;default-tab=js,result\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen &#x3C;a href='https://codepen.io/bgoonz/pen/abpWrBP'>Scroll Drawing&#x3C;/a> by Bryan C Guner\n      (&#x3C;a href='https://codepen.io/bgoonz'>@bgoonz&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.\n    &#x3C;/iframe>\n    &#x3C;br>\n    &#x3C;!-------------------------------------------------------------------------------------->\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"Light Javascript Table Filter\"\n      src=\"https://codepen.io/bgoonz/embed/qBRmGqw?height=375&#x26;theme=dark&#x26;default-tab=js,result\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen &#x3C;a href='https://codepen.io/bgoonz/pen/qBRmGqw'>Light Javascript Table Filter&#x3C;/a> by Bryan C Guner\n      (&#x3C;a href='https://codepen.io/bgoonz'>@bgoonz&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.\n    &#x3C;/iframe>\n    &#x3C;br>\n\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\"\n      src=\"https://codesandbox.io/embed/cold-firefly-si5u1?fontsize=14&#x26;hidenavigation=1&#x26;theme=dark\"\n      style=\"width:95%; height:575px; border:0; border-radius: 4px; overflow:hidden;\" title=\"cold-firefly-si5u1\"\n      sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\">&#x3C;/iframe>\n    &#x3C;!-------------------------------------------------------------------------------------->\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\"\n      src=\"https://codesandbox.io/embed/determined-star-57xlk?fontsize=14&#x26;hidenavigation=1&#x26;theme=dark\"\n      style=\"width:95%; height:575px; border:0; border-radius: 4px; overflow:hidden;\" title=\"determined-star-57xlk\"\n      sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\">&#x3C;/iframe>\n    &#x3C;!-------------------------------------------------------------------------------------->\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"CSS Grid: Excel Spreadsheet\"\n      src=\"https://codepen.io/bgoonz/embed/abJYgGX?height=375&#x26;theme=dark&#x26;default-tab=css,result\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen &#x3C;a href='https://codepen.io/bgoonz/pen/abJYgGX'>CSS Grid: Excel Spreadsheet&#x3C;/a> by Bryan C\n      Guner\n      (&#x3C;a href='https://codepen.io/bgoonz'>@bgoonz&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.\n    &#x3C;/iframe>\n    &#x3C;br>\n    &#x3C;!-------------------------------------------------------------------------------------->\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"3D Drag out menu with guitar\"\n      src=\"https://codepen.io/bgoonz/embed/QWpmXxq?height=375&#x26;theme=dark&#x26;default-tab=css,result\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen &#x3C;a href='https://codepen.io/bgoonz/pen/QWpmXxq'>3D Drag out menu with guitar&#x3C;/a> by Bryan C\n      Guner\n      (&#x3C;a href='https://codepen.io/bgoonz'>@bgoonz&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.\n    &#x3C;/iframe>\n    &#x3C;br>\n    &#x3C;!-------------------------------------------------------------------------------------->\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\"\n      title=\"Navigation bar with circle flexible highlight POC\"\n      src=\"https://codepen.io/bgoonz/embed/eYvMwKL?height=375&#x26;theme=dark&#x26;default-tab=css,result\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen &#x3C;a href='https://codepen.io/bgoonz/pen/eYvMwKL'>Navigation bar with circle flexible highlight\n        POC&#x3C;/a> by\n      Bryan C Guner\n      (&#x3C;a href='https://codepen.io/bgoonz'>@bgoonz&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.\n    &#x3C;/iframe>\n    &#x3C;br>\n    &#x3C;!-------------------------------------------------------------------------------------->\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"gsuiOscilloscope\"\n      src=\"https://codepen.io/bgoonz/embed/eYvrgpe?height=375&#x26;theme=dark&#x26;default-tab=js,result\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen &#x3C;a href='https://codepen.io/bgoonz/pen/eYvrgpe'>gsuiOscilloscope&#x3C;/a> by Bryan C Guner\n      (&#x3C;a href='https://codepen.io/bgoonz'>@bgoonz&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.\n    &#x3C;/iframe>\n    &#x3C;br>\n    &#x3C;!-------------------------------------------------------------------------------------->\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\" height=\"510\" style=\"width: 90%;\" scrolling=\"no\" title=\"random quote(React.js)\"\n      src=\"https://codepen.io/bgoonz/embed/ZEeoyKv?height=510&#x26;theme-id=dark&#x26;default-tab=js,result\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen &#x3C;a href='https://codepen.io/bgoonz/pen/ZEeoyKv'>random quote(React.js)&#x3C;/a> by Bryan C Guner\n      (&#x3C;a href='https://codepen.io/bgoonz'>@bgoonz&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.\n    &#x3C;/iframe>\n    &#x3C;br>\n    &#x3C;!-------------------------------------------------------------------------------------->\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;br>\n    &#x3C;iframe loading=\"lazy\" height=\"575\" style=\"width: 90%;\" scrolling=\"no\" title=\"Web Audio API: Lightning Talk\"\n      src=\"https://codepen.io/bgoonz/embed/GRWdvNm?height=375&#x26;theme-id=dark&#x26;default-tab=js,result\" frameborder=\"no\"\n      loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n      See the Pen &#x3C;a href='https://codepen.io/bgoonz/pen/GRWdvNm'>Web Audio API: Lightning Talk&#x3C;/a> by Bryan C\n      Guner\n      (&#x3C;a href='https://codepen.io/bgoonz'>@bgoonz&#x3C;/a>) on &#x3C;a href='https://codepen.io'>CodePen&#x3C;/a>.\n    &#x3C;/iframe>\n    &#x3C;br>\n    &#x3C;br>\n</code></pre>"},{"url":"/docs/docs/","relativePath":"docs/docs/index.md","relativeDir":"docs/docs","base":"index.md","name":"index","frontmatter":{"title":"Documentation","weight":1,"excerpt":"Documentation","seo":{"title":"Documentation","description":"Documentation","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<br>\n<h1>My DevDocs Deploy</h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://devdecs42.herokuapp.com/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<ul>\n<li><a href=\"https://bgoonz-blog.netlify.app/job-hunt/\">/job-hunt/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/notes-template/\">/notes-template/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/\">/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/showcase/\">/showcase/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/blog/\">/blog/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/review/\">/review/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/blog/blog-archive/\">/blog/blog-archive/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/blog/my-medium/\">/blog/my-medium/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/blog/blogwcomments/\">/blog/blogwcomments/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/blog/data-structures/\">/blog/data-structures/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/gallery/\">/docs/gallery/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/blog/python-for-js-dev/\">/blog/python-for-js-dev/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/blog/platform-docs/\">/blog/platform-docs/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/sitemap/\">/docs/sitemap/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/about/me/\">/docs/about/me/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/blog/python-resources/\">/blog/python-resources/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/about/resume/\">/docs/about/resume/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/\">/docs/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/blog/web-scraping/\">/blog/web-scraping/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/about/\">/docs/about/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/algo/\">/docs/articles/algo/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/install/\">/docs/articles/install/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/\">/docs/articles/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/gallery/\">/docs/articles/gallery/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/intro/\">/docs/articles/intro/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/basic-web-dev/\">/docs/articles/basic-web-dev/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/reading-files/\">/docs/articles/reading-files/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/writing-files/\">/docs/articles/writing-files/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/audio/audio/\">/docs/audio/audio/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/content/projects/\">/docs/content/projects/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/audio/terms/\">/docs/audio/terms/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/faq/\">/docs/faq/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/community/\">/docs/community/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/resources/\">/docs/articles/resources/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/content/\">/docs/content/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/docs/git-repos/\">/docs/docs/git-repos/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/content/trouble-shooting/\">/docs/content/trouble-shooting/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/python/\">/docs/articles/python/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/interact/clock/\">/docs/interact/clock/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/docs/python/\">/docs/docs/python/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/interact/jupyter-notebooks/\">/docs/interact/jupyter-notebooks/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/interact/\">/docs/interact/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/faq/contact/\">/docs/faq/contact/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/docs/\">/docs/quick-reference/docs/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/interact/other-sites/\">/docs/interact/other-sites/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/new-repo-instructions/\">/docs/quick-reference/new-repo-instructions/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/Emmet/\">/docs/quick-reference/Emmet/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/installation/\">/docs/quick-reference/installation/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/vscode-themes/\">/docs/quick-reference/vscode-themes/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/react/createReactApp/\">/docs/react/createReactApp/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/react/react2/\">/docs/react/react2/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/\">/docs/quick-reference/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/react/\">/docs/react/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/tools/\">/docs/tools/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/tools/notes-template/\">/docs/tools/notes-template/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/tools/more-tools/\">/docs/tools/more-tools/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/tools/plug-ins/\">/docs/tools/plug-ins/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node/install/\">/docs/articles/node/install/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/tools/vscode/\">/docs/tools/vscode/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node/intro/\">/docs/articles/node/intro/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node/nodejs/\">/docs/articles/node/nodejs/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node/nodevsbrowser/\">/docs/articles/node/nodevsbrowser/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node/npm/\">/docs/articles/node/npm/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node/reading-files/\">/docs/articles/node/reading-files/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node/writing-files/\">/docs/articles/node/writing-files/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/react-in-depth/\">/docs/react-in-depth/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/article-compilation/\">/docs/articles/article-compilation/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/medium/my-websites/\">/docs/medium/my-websites/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/medium/social/\">/docs/medium/social/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/medium/medium-links/\">/docs/medium/medium-links/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/medium/\">/docs/medium/</a></li>\n</ul>"},{"url":"/docs/docs/git-repos/","relativePath":"docs/docs/git-repos.md","relativeDir":"docs/docs","base":"git-repos.md","name":"git-repos","frontmatter":{"title":"Git Repo List","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>My Repos:</h1>\n<ul>\n<li><a href=\"https://github.com/bgoonz/03-fetch-data\">https://github.com/bgoonz/03-fetch-data</a></li>\n<li><a href=\"https://github.com/bgoonz/a-whole-bunch-o-gatsby-templates\">https://github.com/bgoonz/a-whole-bunch-o-gatsby-templates</a></li>\n<li><a href=\"https://github.com/bgoonz/activity-box\">https://github.com/bgoonz/activity-box</a></li>\n<li><a href=\"https://github.com/bgoonz/All-Undergrad-Archive\">https://github.com/bgoonz/All-Undergrad-Archive</a></li>\n<li><a href=\"https://github.com/bgoonz/alternate-blog-theme\">https://github.com/bgoonz/alternate-blog-theme</a></li>\n<li><a href=\"https://github.com/bgoonz/anki-cards\">https://github.com/bgoonz/anki-cards</a></li>\n<li><a href=\"https://github.com/bgoonz/ask-me-anything\">https://github.com/bgoonz/ask-me-anything</a></li>\n<li><a href=\"https://github.com/bgoonz/atlassian-templates\">https://github.com/bgoonz/atlassian-templates</a></li>\n<li><a href=\"https://github.com/bgoonz/Authentication-Notes\">https://github.com/bgoonz/Authentication-Notes</a></li>\n<li><a href=\"https://github.com/bgoonz/bash-commands-walkthrough\">https://github.com/bgoonz/bash-commands-walkthrough</a></li>\n<li><a href=\"https://github.com/bgoonz/bash-config-backup\">https://github.com/bgoonz/bash-config-backup</a></li>\n<li><a href=\"https://github.com/bgoonz/bash-shell-utility-functions\">https://github.com/bgoonz/bash-shell-utility-functions</a></li>\n<li><a href=\"https://github.com/bgoonz/bass-station\">https://github.com/bgoonz/bass-station</a></li>\n<li><a href=\"https://github.com/bgoonz/bgoonz\">https://github.com/bgoonz/bgoonz</a></li>\n<li><a href=\"https://github.com/bgoonz/BGOONZBLOG2.0STABLE\">https://github.com/bgoonz/BGOONZBLOG2.0STABLE</a></li>\n<li><a href=\"https://github.com/bgoonz/BGOONZ_BLOG_2.0\">https://github.com/bgoonz/BGOONZ<em>BLOG</em>2.0</a></li>\n<li><a href=\"https://github.com/bgoonz/Binary-Search\">https://github.com/bgoonz/Binary-Search</a></li>\n<li><a href=\"https://github.com/bgoonz/blog-2.o-versions\">https://github.com/bgoonz/blog-2.o-versions</a></li>\n<li><a href=\"https://github.com/bgoonz/blog-templates\">https://github.com/bgoonz/blog-templates</a></li>\n<li><a href=\"https://github.com/bgoonz/blog-w-comments\">https://github.com/bgoonz/blog-w-comments</a></li>\n<li><a href=\"https://github.com/bgoonz/Blog2.0-August-Super-Stable\">https://github.com/bgoonz/Blog2.0-August-Super-Stable</a></li>\n<li><a href=\"https://github.com/bgoonz/bootstrap-sidebar-template\">https://github.com/bgoonz/bootstrap-sidebar-template</a></li>\n<li><a href=\"https://github.com/bgoonz/callbacks\">https://github.com/bgoonz/callbacks</a></li>\n<li><a href=\"https://github.com/bgoonz/Comments\">https://github.com/bgoonz/Comments</a></li>\n<li><a href=\"https://github.com/bgoonz/commercejs-nextjs-demo-store\">https://github.com/bgoonz/commercejs-nextjs-demo-store</a></li>\n<li><a href=\"https://github.com/bgoonz/Common-npm-Readme-Compilation\">https://github.com/bgoonz/Common-npm-Readme-Compilation</a></li>\n<li><a href=\"https://github.com/bgoonz/Comparing-Web-Development-Bootcamps-2021\">https://github.com/bgoonz/Comparing-Web-Development-Bootcamps-2021</a></li>\n<li><a href=\"https://github.com/bgoonz/Connect-Four-Final-Version\">https://github.com/bgoonz/Connect-Four-Final-Version</a></li>\n<li><a href=\"https://github.com/bgoonz/convert-folder-contents-2-website\">https://github.com/bgoonz/convert-folder-contents-2-website</a></li>\n<li><a href=\"https://github.com/bgoonz/Copy-2-Clipboard-jQuery\">https://github.com/bgoonz/Copy-2-Clipboard-jQuery</a></li>\n<li><a href=\"https://github.com/bgoonz/Data-Structures-Algos-Codebase\">https://github.com/bgoonz/Data-Structures-Algos-Codebase</a></li>\n<li><a href=\"https://github.com/bgoonz/DATA_STRUC_PYTHON_NOTES\">https://github.com/bgoonz/DATA<em>STRUC</em>PYTHON_NOTES</a></li>\n<li><a href=\"https://github.com/bgoonz/design-home-page-with-routes-bq5v7k\">https://github.com/bgoonz/design-home-page-with-routes-bq5v7k</a></li>\n<li><a href=\"https://github.com/bgoonz/docs-collection\">https://github.com/bgoonz/docs-collection</a></li>\n<li><a href=\"https://github.com/bgoonz/Documentation-site-react\">https://github.com/bgoonz/Documentation-site-react</a></li>\n<li><a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\">https://github.com/bgoonz/DS-ALGO-OFFICIAL</a></li>\n<li><a href=\"https://github.com/bgoonz/DS-AND-ALGO-Notes-P2\">https://github.com/bgoonz/DS-AND-ALGO-Notes-P2</a></li>\n<li><a href=\"https://github.com/bgoonz/ecommerce-interactive\">https://github.com/bgoonz/ecommerce-interactive</a></li>\n<li><a href=\"https://github.com/bgoonz/embedable-repl-and-integrated-code-space-playground\">https://github.com/bgoonz/embedable-repl-and-integrated-code-space-playground</a></li>\n<li><a href=\"https://github.com/bgoonz/excel2html-table\">https://github.com/bgoonz/excel2html-table</a></li>\n<li><a href=\"https://github.com/bgoonz/Exploring-Promises\">https://github.com/bgoonz/Exploring-Promises</a></li>\n<li><a href=\"https://github.com/bgoonz/express-API-template\">https://github.com/bgoonz/express-API-template</a></li>\n<li><a href=\"https://github.com/bgoonz/Express-basic-server-template\">https://github.com/bgoonz/Express-basic-server-template</a></li>\n<li><a href=\"https://github.com/bgoonz/express-knex-postgres-boilerplate\">https://github.com/bgoonz/express-knex-postgres-boilerplate</a></li>\n<li><a href=\"https://github.com/bgoonz/EXPRESS-NOTES\">https://github.com/bgoonz/EXPRESS-NOTES</a></li>\n<li><a href=\"https://github.com/bgoonz/fast-fourier-transform-\">https://github.com/bgoonz/fast-fourier-transform-</a></li>\n<li><a href=\"https://github.com/bgoonz/form-builder-vanilla-js\">https://github.com/bgoonz/form-builder-vanilla-js</a></li>\n<li><a href=\"https://github.com/bgoonz/Front-End-Frameworks-Practice\">https://github.com/bgoonz/Front-End-Frameworks-Practice</a></li>\n<li><a href=\"https://github.com/bgoonz/full-stack-react-redux\">https://github.com/bgoonz/full-stack-react-redux</a></li>\n<li><a href=\"https://github.com/bgoonz/Full-Text-Search\">https://github.com/bgoonz/Full-Text-Search</a></li>\n<li><a href=\"https://github.com/bgoonz/Games\">https://github.com/bgoonz/Games</a></li>\n<li><a href=\"https://github.com/bgoonz/gatsby-netlify-cms-norwex\">https://github.com/bgoonz/gatsby-netlify-cms-norwex</a></li>\n<li><a href=\"https://github.com/bgoonz/gatsby-react-portfolio\">https://github.com/bgoonz/gatsby-react-portfolio</a></li>\n<li><a href=\"https://github.com/bgoonz/GIT-CDN-FILES\">https://github.com/bgoonz/GIT-CDN-FILES</a></li>\n<li><a href=\"https://github.com/bgoonz/GIT-HTML-PREVIEW-TOOL\">https://github.com/bgoonz/GIT-HTML-PREVIEW-TOOL</a></li>\n<li><a href=\"https://github.com/bgoonz/gitbook\">https://github.com/bgoonz/gitbook</a></li>\n<li><a href=\"https://github.com/bgoonz/github-readme-stats\">https://github.com/bgoonz/github-readme-stats</a></li>\n<li><a href=\"https://github.com/bgoonz/github-reference-repo\">https://github.com/bgoonz/github-reference-repo</a></li>\n<li><a href=\"https://github.com/bgoonz/GoalsTracker\">https://github.com/bgoonz/GoalsTracker</a></li>\n<li><a href=\"https://github.com/bgoonz/graphql-experimentation\">https://github.com/bgoonz/graphql-experimentation</a></li>\n<li><a href=\"https://github.com/bgoonz/https___mihirbeg.com_\">https://github.com/bgoonz/https<em>__mihirbeg.com</em></a></li>\n<li><a href=\"https://github.com/bgoonz/iframe-showcase\">https://github.com/bgoonz/iframe-showcase</a></li>\n<li><a href=\"https://github.com/bgoonz/Image-Archive-Traning-Data\">https://github.com/bgoonz/Image-Archive-Traning-Data</a></li>\n<li><a href=\"https://github.com/bgoonz/Independent-Blog-Entries\">https://github.com/bgoonz/Independent-Blog-Entries</a></li>\n<li><a href=\"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE\">https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE</a></li>\n<li><a href=\"https://github.com/bgoonz/JAMSTACK-TEMPLATES\">https://github.com/bgoonz/JAMSTACK-TEMPLATES</a></li>\n<li><a href=\"https://github.com/bgoonz/Javascript-Best-Practices_--Tools\">https://github.com/bgoonz/Javascript-Best-Practices_--Tools</a></li>\n<li><a href=\"https://github.com/bgoonz/jsanimate\">https://github.com/bgoonz/jsanimate</a></li>\n<li><a href=\"https://github.com/bgoonz/Jupyter-Notebooks\">https://github.com/bgoonz/Jupyter-Notebooks</a></li>\n<li><a href=\"https://github.com/bgoonz/Lambda\">https://github.com/bgoonz/Lambda</a></li>\n<li><a href=\"https://github.com/bgoonz/Lambda-Resource-Static-Assets\">https://github.com/bgoonz/Lambda-Resource-Static-Assets</a></li>\n<li><a href=\"https://github.com/bgoonz/learning-nextjs\">https://github.com/bgoonz/learning-nextjs</a></li>\n<li><a href=\"https://github.com/bgoonz/Learning-Redux\">https://github.com/bgoonz/Learning-Redux</a></li>\n<li><a href=\"https://github.com/bgoonz/Links-Shortcut-Site\">https://github.com/bgoonz/Links-Shortcut-Site</a></li>\n<li><a href=\"https://github.com/bgoonz/live-examples\">https://github.com/bgoonz/live-examples</a></li>\n<li><a href=\"https://github.com/bgoonz/live-form\">https://github.com/bgoonz/live-form</a></li>\n<li><a href=\"https://github.com/bgoonz/loadash-es6-refactor\">https://github.com/bgoonz/loadash-es6-refactor</a></li>\n<li><a href=\"https://github.com/bgoonz/markdown-css\">https://github.com/bgoonz/markdown-css</a></li>\n<li><a href=\"https://github.com/bgoonz/Markdown-Templates\">https://github.com/bgoonz/Markdown-Templates</a></li>\n<li><a href=\"https://github.com/bgoonz/meditation-app\">https://github.com/bgoonz/meditation-app</a></li>\n<li><a href=\"https://github.com/bgoonz/MihirBegMusicLab\">https://github.com/bgoonz/MihirBegMusicLab</a></li>\n<li><a href=\"https://github.com/bgoonz/MihirBegMusicV3\">https://github.com/bgoonz/MihirBegMusicV3</a></li>\n<li><a href=\"https://github.com/bgoonz/Mihir_Beg_Final\">https://github.com/bgoonz/Mihir<em>Beg</em>Final</a></li>\n<li><a href=\"https://github.com/bgoonz/mini-project-showcase\">https://github.com/bgoonz/mini-project-showcase</a></li>\n<li><a href=\"https://github.com/bgoonz/Music-Theory-n-Web-Synth-Keyboard\">https://github.com/bgoonz/Music-Theory-n-Web-Synth-Keyboard</a></li>\n<li><a href=\"https://github.com/bgoonz/my-gists\">https://github.com/bgoonz/my-gists</a></li>\n<li><a href=\"https://github.com/bgoonz/My-Medium-Blog\">https://github.com/bgoonz/My-Medium-Blog</a></li>\n<li><a href=\"https://github.com/bgoonz/nextjs-netlify-blog-template\">https://github.com/bgoonz/nextjs-netlify-blog-template</a></li>\n<li><a href=\"https://github.com/bgoonz/norwex-coff-ecom\">https://github.com/bgoonz/norwex-coff-ecom</a></li>\n<li><a href=\"https://github.com/bgoonz/old-c-and-cpp-repos-from-undergrad\">https://github.com/bgoonz/old-c-and-cpp-repos-from-undergrad</a></li>\n<li><a href=\"https://github.com/bgoonz/old-code-from-undergrad\">https://github.com/bgoonz/old-code-from-undergrad</a></li>\n<li><a href=\"https://github.com/bgoonz/picture-man-bob-v2\">https://github.com/bgoonz/picture-man-bob-v2</a></li>\n<li><a href=\"https://github.com/bgoonz/Project-Showcase\">https://github.com/bgoonz/Project-Showcase</a></li>\n<li><a href=\"https://github.com/bgoonz/promises-with-async-and-await\">https://github.com/bgoonz/promises-with-async-and-await</a></li>\n<li><a href=\"https://github.com/bgoonz/psql-practice\">https://github.com/bgoonz/psql-practice</a></li>\n<li><a href=\"https://github.com/bgoonz/python-playground-embed\">https://github.com/bgoonz/python-playground-embed</a></li>\n<li><a href=\"https://github.com/bgoonz/python-practice-notes\">https://github.com/bgoonz/python-practice-notes</a></li>\n<li><a href=\"https://github.com/bgoonz/python-scripts\">https://github.com/bgoonz/python-scripts</a></li>\n<li><a href=\"https://github.com/bgoonz/PYTHON_PRAC\">https://github.com/bgoonz/PYTHON_PRAC</a></li>\n<li><a href=\"https://github.com/bgoonz/random-list-of-embedable-content\">https://github.com/bgoonz/random-list-of-embedable-content</a></li>\n<li><a href=\"https://hub.com/bgoonz/random-static-html-page-deploy\">https://hub.com/bgoonz/random-static-html-page-deploy</a></li>\n<li><a href=\"https://hub.com/bgoonz/React-movie-app\">https://hub.com/bgoonz/React-movie-app</a></li>\n<li><a href=\"https://hub.com/bgoonz/react-redux-medium-clone\">https://hub.com/bgoonz/react-redux-medium-clone</a></li>\n<li><a href=\"https://hub.com/bgoonz/react-redux-notes-v5\">https://hub.com/bgoonz/react-redux-notes-v5</a></li>\n<li><a href=\"https://hub.com/bgoonz/react-redux-registration-login-example\">https://hub.com/bgoonz/react-redux-registration-login-example</a></li>\n<li><a href=\"https://hub.com/bgoonz/React_Notes_V3\">https://hub.com/bgoonz/React<em>Notes</em>V3</a></li>\n<li><a href=\"https://hub.com/bgoonz/Recursion-Practice-Website\">https://hub.com/bgoonz/Recursion-Practice-Website</a></li>\n<li><a href=\"https://hub.com/bgoonz/Regex-and-Express-JS\">https://hub.com/bgoonz/Regex-and-Express-JS</a></li>\n<li><a href=\"https://hub.com/bgoonz/repo-utils\">https://hub.com/bgoonz/repo-utils</a></li>\n<li><a href=\"https://hub.com/bgoonz/resume-cv-portfolio-samples\">https://hub.com/bgoonz/resume-cv-portfolio-samples</a></li>\n<li><a href=\"https://hub.com/bgoonz/Revamped-Automatic-Guitar-Effect-Triggering\">https://hub.com/bgoonz/Revamped-Automatic-Guitar-Effect-Triggering</a></li>\n<li><a href=\"https://hub.com/bgoonz/scope-closure-context\">https://hub.com/bgoonz/scope-closure-context</a></li>\n<li><a href=\"https://hub.com/bgoonz/Shell-Script-Practice\">https://hub.com/bgoonz/Shell-Script-Practice</a></li>\n<li><a href=\"https://hub.com/bgoonz/site-analysis\">https://hub.com/bgoonz/site-analysis</a></li>\n<li><a href=\"https://hub.com/bgoonz/sorting-algorithms\">https://hub.com/bgoonz/sorting-algorithms</a></li>\n<li><a href=\"https://hub.com/bgoonz/sorting-algos\">https://hub.com/bgoonz/sorting-algos</a></li>\n<li><a href=\"https://hub.com/bgoonz/sqlite3-nodejs-demo\">https://hub.com/bgoonz/sqlite3-nodejs-demo</a></li>\n<li><a href=\"https://hub.com/bgoonz/stalk-photos-web-assets\">https://hub.com/bgoonz/stalk-photos-web-assets</a></li>\n<li><a href=\"https://hub.com/bgoonz/Standalone-Metranome\">https://hub.com/bgoonz/Standalone-Metranome</a></li>\n<li><a href=\"https://hub.com/bgoonz/Star-wars-API-Promise-take2\">https://hub.com/bgoonz/Star-wars-API-Promise-take2</a></li>\n<li><a href=\"https://hub.com/bgoonz/Static-Study-Site\">https://hub.com/bgoonz/Static-Study-Site</a></li>\n<li><a href=\"https://hub.com/bgoonz/styling-templates\">https://hub.com/bgoonz/styling-templates</a></li>\n<li><a href=\"https://hub.com/bgoonz/supertemp\">https://hub.com/bgoonz/supertemp</a></li>\n<li><a href=\"https://hub.com/bgoonz/Ternary-converter\">https://hub.com/bgoonz/Ternary-converter</a></li>\n<li><a href=\"https://hub.com/bgoonz/TetrisJS\">https://hub.com/bgoonz/TetrisJS</a></li>\n<li><a href=\"https://hub.com/bgoonz/TexTools\">https://hub.com/bgoonz/TexTools</a></li>\n<li><a href=\"https://hub.com/bgoonz/The-Algorithms\">https://hub.com/bgoonz/The-Algorithms</a></li>\n<li><a href=\"https://hub.com/bgoonz/TRASH\">https://hub.com/bgoonz/TRASH</a></li>\n<li><a href=\"https://hub.com/bgoonz/Triggered-Guitar-Effects-Platform\">https://hub.com/bgoonz/Triggered-Guitar-Effects-Platform</a></li>\n<li><a href=\"https://hub.com/bgoonz/Useful-Snippets-js\">https://hub.com/bgoonz/Useful-Snippets-js</a></li>\n<li><a href=\"https://hub.com/bgoonz/UsefulResourceRepo2.0\">https://hub.com/bgoonz/UsefulResourceRepo2.0</a></li>\n<li><a href=\"https://hub.com/bgoonz/vscode-customized-config\">https://hub.com/bgoonz/vscode-customized-config</a></li>\n<li><a href=\"https://hub.com/bgoonz/vscode-Extension-readmes\">https://hub.com/bgoonz/vscode-Extension-readmes</a></li>\n<li><a href=\"https://hub.com/bgoonz/web-crawler-node\">https://hub.com/bgoonz/web-crawler-node</a></li>\n<li><a href=\"https://hub.com/bgoonz/web-dev-interview-prep-quiz-website\">https://hub.com/bgoonz/web-dev-interview-prep-quiz-website</a></li>\n<li><a href=\"https://hub.com/bgoonz/web-dev-notes-resource-site\">https://hub.com/bgoonz/web-dev-notes-resource-site</a></li>\n<li><a href=\"https://hub.com/bgoonz/web-dev-setup-checker\">https://hub.com/bgoonz/web-dev-setup-checker</a></li>\n<li><a href=\"https://hub.com/bgoonz/WEB-DEV-TOOLS-HUB\">https://hub.com/bgoonz/WEB-DEV-TOOLS-HUB</a></li>\n<li><a href=\"https://hub.com/bgoonz/web-dev-utils-package\">https://hub.com/bgoonz/web-dev-utils-package</a></li>\n<li><a href=\"https://hub.com/bgoonz/WebAudioDaw\">https://hub.com/bgoonz/WebAudioDaw</a></li>\n<li><a href=\"https://hub.com/bgoonz/website\">https://hub.com/bgoonz/website</a></li>\n</ul>"},{"url":"/docs/docs/markdown/","relativePath":"docs/docs/markdown.md","relativeDir":"docs/docs","base":"markdown.md","name":"markdown","frontmatter":{"title":"Markdown","weight":0,"excerpt":"Markdown","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h2>Markdown:</h2>\n<h2>Why markdown?</h2>\n<p>Markdown is a universal doc format that is easy to write and easy to add to a version control system.</p>\n<ul>\n<li><strong>Open</strong> - Anyone can submit content, fix typos &#x26; update anything via pull requests</li>\n<li><strong>Version control</strong> - Roll back &#x26; see the history of any given post</li>\n<li><strong>No CMS lock in</strong> - We can easily port to any static site generator</li>\n<li><strong>It's just simple</strong> - No user accounts to manage, no CMS software to upgrade, no plugins to install.</li>\n</ul>\n<hr>\n<h2>Markdown basics</h2>\n<p>The basics of markdown can be found <a href=\"https://guides.github.com/features/mastering-markdown/\">here</a> &#x26; <a href=\"https://daringfireball.net/projects/markdown/\">here</a>. Super easy!</p>\n<h2>Advanced Formatting tips</h2>\n<h3><code>left</code> alignment</h3>\n<img align=\"left\" width=\"100\" height=\"100\" src=\"http://www.fillmurray.com/100/100\">\n<p>This is the code you need to align images to the left:</p>\n<pre><code>&#x3C;img align=\"left\" width=\"100\" height=\"100\" src=\"http://www.fillmurray.com/100/100\">\n</code></pre>\n<hr>\n<h3><code>right</code> alignment</h3>\n<img align=\"right\" width=\"100\" height=\"100\" src=\"http://www.fillmurray.com/100/100\">\n<p>This is the code you need to align images to the right:</p>\n<pre><code>&#x3C;img align=\"right\" width=\"100\" height=\"100\" src=\"http://www.fillmurray.com/100/100\">\n</code></pre>\n<hr>\n<h3><code>center</code> alignment example</h3>\n<p align=\"center\">\n  <img width=\"460\" height=\"300\" src=\"http://www.fillmurray.com/460/300\">\n</p>\n<pre><code>&#x3C;p align=\"center\">\n  &#x3C;img width=\"460\" height=\"300\" src=\"http://www.fillmurray.com/460/300\">\n&#x3C;/p>\n</code></pre>\n<hr>\n<h3><code>collapse</code> Sections</h3>\n<p>Collapsing large blocks of text can make your markdown much easier to digest</p>\n<details>\n<summary>\"Click to expand\"</summary>\nthis is hidden block\n</details>\n<pre><code>&#x3C;details>\n&#x3C;summary>\"Click to expand\"&#x3C;/summary>\nthis is hidden\n&#x3C;/details>\n</code></pre>\n<p>Collapsing large blocks of Markdown text</p>\n<details>\n<summary>To make sure markdown is rendered correctly in the collapsed section...</summary>\n<ol>\n<li>Put an <strong>empty line</strong> after the <code>&#x3C;summary></code> block.</li>\n<li><em>Insert your markdown syntax</em></li>\n<li>Put an <strong>empty line</strong> before the <code>&#x3C;/details></code> tag</li>\n</ol>\n</details>\n<pre><code>&#x3C;details>\n&#x3C;summary>To make sure markdown is rendered correctly in the collapsed section...&#x3C;/summary>\n\n 1. Put an **empty line** after the `&#x3C;summary>` block.\n 2. *Insert your markdown syntax*\n 3. Put an **empty line** before the `&#x3C;/details>` tag\n\n&#x3C;/details>\n</code></pre>\n<hr>\n<h3><code>additional links</code></h3>\n<p><a href=\"http://www.serverless.com\">Website</a> • <a href=\"http://eepurl.com/b8dv4P\">Email Updates</a> • <a href=\"https://gitter.im/serverless/serverless\">Gitter</a> • <a href=\"http://forum.serverless.com\">Forum</a> • <a href=\"https://github.com/serverless-meetups/main\">Meetups</a> • <a href=\"https://twitter.com/goserverless\">Twitter</a> • <a href=\"https://www.facebook.com/serverless\">Facebook</a> • <a href=\"mailto:hello@serverless.com\">Contact Us</a></p>\n<pre><code>[Website](http://www.serverless.com) • [Email Updates](http://eepurl.com/b8dv4P) • [Gitter](https://gitter.im/serverless/serverless) • [Forum](http://forum.serverless.com) • [Meetups](https://github.com/serverless-meetups/main) • [Twitter](https://twitter.com/goserverless) • [Facebook](https://www.facebook.com/serverless) • [Contact Us](mailto:hello@serverless.com)\n</code></pre>\n<hr>\n<h3>Badges</h3>\n<p>I hate them so. Don't use badges.</p>\n<hr>\n<h3>Nice looking file tree</h3>\n<p>For whatever <a href=\"https://twitter.com/alexdotjs/status/1421015442286596100\">reason</a> the <code>graphql</code> syntax will nicely highlight file trees like below:</p>\n<pre><code class=\"language-graphql\"># Code &#x26; components for pages\n./src/*\n  ├─ src/assets - # Minified images, fonts, icon files\n  ├─ src/components - # Individual smaller components\n  ├─ src/fragments - # Larger chunks of a page composed of multiple components\n  ├─ src/layouts - # Page layouts used for different types of pages composed of components and fragments\n  ├─ src/page - # Custom pages or pages composed of layouts with hardcoded data components, fragments, &#x26; layouts\n  ├─ src/pages/* - # Next.js file based routing\n  │  ├─ _app.js - # next.js app entry point\n  │  ├─ _document.js - # next.js document wrapper\n  │  ├─ global.css - #  Global CSS styles\n  │  └─ Everything else... - # File based routing\n  └─ src/utils - # Utility functions used in various places\n</code></pre>\n<hr>\n<h2>Useful packages</h2>\n<ol>\n<li><a href=\"https://www.npmjs.com/package/gray-matter\">gray-matter</a></li>\n</ol>\n<p>YAML front-matter is your friend. You can keep metadata in markdown files</p>\n<pre><code>title: Serverless Framework Documentation\ndescription: \"Great F'in docs!\"\nmenuText: Docs\nlayout: Doc\n</code></pre>\n<ol start=\"2\">\n<li><a href=\"https://www.npmjs.com/package/remark\">Remark</a></li>\n</ol>\n<p>Useful for rendering markdown in HTML/React</p>\n<ol start=\"3\">\n<li><a href=\"https://github.com/DavidWells/markdown-magic\">Markdown Magic</a></li>\n<li><a href=\"https://github.com/DavidWells/markdown-magic\">Repo</a></li>\n<li><a href=\"https://github.com/DavidWells/markdown-magic#plugins\">Plugins</a></li>\n<li>Show automatic doc generation. <a href=\"https://github.com/DavidWells/markdown-magic/blob/master/examples/generate-readme.js#L15-L23\">Example 1</a> | <a href=\"https://github.com/serverless/examples/blob/master/generate-readme.js#L71-L87\">Example 2</a></li>\n</ol>\n<hr>\n<h2>Useful utilities</h2>\n<ol>\n<li><a href=\"https://github.com/serverless/post-scheduler\">Schedule Posts</a> - Post scheduler for static sites</li>\n</ol>\n<p>Show DEMO</p>\n<ol start=\"2\">\n<li><a href=\"https://jekyll-anon.surge.sh/gods/2015/02/18/vesta.html\">Zero friction inline content editing</a></li>\n</ol>\n<p>Show DEMO</p>\n<ol start=\"3\">\n<li><a href=\"https://bywordapp.com/\">Byword</a> &#x26; <a href=\"https://typora.io/\">Typora</a> - Good Editors</li>\n<li><a href=\"https://monodraw.helftone.com/\">Monodraw</a> - Flow charts for days</li>\n<li><a href=\"https://getkap.co/\">Kap</a> - Make gifs</li>\n<li><a href=\"https://atom.io/packages/markdown-preview\">IDE markdown preview</a></li>\n<li>Stuck on WordPress? Try <a href=\"https://github.com/DavidWells/easy-markdown\">easy-markdown plugin</a></li>\n</ol>\n<hr>\n<h2>How Serverless uses markdown</h2>\n<p>Serverless.com is comprised of 3 separate repositories</p>\n<ul>\n<li><a href=\"https://github.com/serverless/blog\">https://github.com/serverless/blog</a></li>\n<li><a href=\"https://github.com/serverless/serverless\">https://github.com/serverless/serverless</a> | Shoutout to <a href=\"https://phenomic.io/\">Phenomic.io</a></li>\n<li><a href=\"https://github.com/serverless/site\">https://github.com/serverless/site</a></li>\n</ul>\n<p><strong>Why multiple repos?</strong></p>\n<ol>\n<li>We wanted documentation about the framework to live in the serverless github repo for easy access</li>\n<li>We wanted our blog content to be easily portable to any static site generator separate from the implementation (site)</li>\n<li><code>prebuild</code> npm script pulls the content together &#x26; processes them for site build</li>\n</ol>\n<p>A single repo is easier to manage but harder for people to find/edit/PR content.</p>\n<hr>\n<h3>DEMO</h3>\n<ul>\n<li>Site structure</li>\n<li>Serverless build process</li>\n<li><a href=\"https://github.com/serverless/blog/blob/master/.travis.yml#L10\">Validation</a></li>\n<li><a href=\"https://serverless.com/framework/docs/providers/aws/cli-reference/deploy/\">Editing Flow</a></li>\n<li>\n<p>Github optimizations</p>\n<ul>\n<li><a href=\"https://github.com/serverless/serverless/blob/master/docs/providers/aws/events/schedule.md\">Link from top of each doc to live link on site</a></li>\n<li>use markdown magic =) to <a href=\"https://github.com/serverless/examples\">auto generate tables</a> etc</li>\n<li><a href=\"https://github.com/serverless/serverless/blame/master/docs/providers/aws/events/schedule.md#L1-L7\">Hide yaml frontmatter from github folks</a></li>\n<li>consider linking everything to site</li>\n</ul>\n</li>\n</ul>\n<h2>Other Markdown Resources</h2>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/verb\">Verb</a> - Documentation generator for GitHub projects</li>\n<li><a href=\"http://asciidoctor.org/\">ACSII docs</a> - Markdown alternative</li>\n</ul>"},{"url":"/docs/docs/regex-in-js/","relativePath":"docs/docs/regex-in-js.md","relativeDir":"docs/docs","base":"regex-in-js.md","name":"regex-in-js","frontmatter":{"title":"Regular Expressions","weight":0,"excerpt":"Regular Expressions","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>Regular Expressions</h1>\n<p>description:</p>\n<hr>\n<h4><a href=\"http://medium.com/codex\" class=\"markup--anchor markup--h4-anchor\">CODEX</a></h4>\n<h3>Regular Expressions</h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*VdDVM2Nzv6oGC5I0.png\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/1*D83R_a0SSgMR0hI4jP6Asw.png\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/1*vk5n412Bs-dx6UdgyUywdg.png\" class=\"graf-image\" /></figure>### description:\n<p><em>Regular expressions are patterns used to match character combinations in strings. In JavaScript, regular expressions are also objects. These patterns are used with the</em> <code>exec()</code> <em>and</em> <code>test()</code> <em>methods of</em> <code>RegExp</code><em>, and with the</em> <code>match()</code><em>,</em> <code>matchAll()</code><em>,</em> <code>replace()</code><em>,</em> <code>replaceAll()</code><em>,</em> <code>search()</code><em>, and</em> <code>split()</code> <em>methods of</em> <code>String</code><em>. This chapter describes JavaScript regular expressions.</em></p>\n<h3>Creating a regular expression</h3>\n<p>You construct a regular expression in one of two ways:</p>\n<ol>\n<li><span id=\"8a7f\"><strong>Using a regular expression literal, which consists of a pattern enclosed between slashes, as follows:</strong></span></li>\n</ol>\n<p><code>let re = /ab+c/;</code></p>\n<ul>\n<li><span id=\"f4e2\">Regular expression literals provide compilation of the regular expression when the script is loaded. If the regular expression remains constant, using this can improve performance.</span></li>\n</ul>\n<p><strong>2. Or calling the constructor function of the</strong> <code>RegExp</code> <strong>object, as follows:</strong></p>\n<ul>\n<li><span id=\"2016\"><code>let re = new RegExp('ab+c');</code></span></li>\n</ul>\n<blockquote>\n<p><em>Using the constructor function provides runtime compilation of the regular expression</em>. Use the constructor function when you know the regular expression pattern will be changing, or you don't know the pattern and are getting it from another source, such as user input.</p>\n</blockquote>\n<h3>Writing a regular expression pattern</h3>\n<p>A regular expression pattern is composed of simple characters, such as <code>/abc/</code>, or a combination of simple and special characters, such as <code>/ab*c/</code> or <code>/Chapter (\\d+)\\.\\d*/</code>.</p>\n<p>The last example includes <strong>parentheses, which are used as a memory device</strong>. <em>The match made with this part of the pattern is remembered for later use.</em></p>\n<h3>Using simple patterns</h3>\n<p>Simple patterns are constructed of characters for which you want to find a direct match.</p>\n<p>For example, the pattern <code>/abc/</code> matches character combinations in strings only when the exact sequence <code>\"abc\"</code> occurs (all characters together and in that order).</p>\n<p>Such a match would succeed in the strings <code>\"Hi, do you know your abc's?\"</code> and <code>\"The latest airplane designs evolved from slabcraft.\"</code></p>\n<p>In both cases the match is with the substring <code>\"abc\"</code>.</p>\n<p>There is no match in the string <code>\"Grab crab\"</code> because while it contains the substring <code>\"ab c\"</code>, it does not contain the exact substring <code>\"abc\"</code>.</p>\n<h3>Using special characters</h3>\n<p>When the search for a match requires something more than a direct match, such as finding one or more b's, or finding white space, you can include special characters in the pattern.</p>\n<p>For example, to match <em>a single</em> <code>\"a\"</code> <em>followed by zero or more</em> <code>\"b\"</code><em>s followed by</em> <code>\"c\"</code>, you'd use the pattern <code>/ab*c/</code>:</p>\n<blockquote>\n<p>the <code>*</code> after <code>\"b\"</code> means \"0 or more occurrences of the preceding item.\" In the string <code>\"cbbabbbbcdebc\"</code>, this pattern will match the substring <code>\"abbbbc\"</code>.</p>\n</blockquote>\n<p><a href=\"https://github.com/bgoonz/Cheat-Sheets/blob/master/Regular_Expressions/Assertions.html\" class=\"markup--anchor markup--p-anchor\"><strong>Assertions</strong></a>** : Assertions include boundaries, which indicate the beginnings and endings of lines and words, and other patterns indicating in some way that a match is possible (including look-ahead, look-behind, and conditional expressions).**</p>\n<p><a href=\"https://github.com/bgoonz/Cheat-Sheets/blob/master/Regular_Expressions/Character_Classes.html\" class=\"markup--anchor markup--p-anchor\"><strong>Character classes</strong></a>** : Distinguish different types of characters. For example, distinguishing between letters and digits.**</p>\n<p><a href=\"https://github.com/bgoonz/Cheat-Sheets/blob/master/Regular_Expressions/Groups_and_Ranges.html\" class=\"markup--anchor markup--p-anchor\"><strong>Groups and ranges</strong></a>** : Indicate groups and ranges of expression characters.**</p>\n<p><a href=\"https://github.com/bgoonz/Cheat-Sheets/blob/master/Regular_Expressions/Quantifiers.html\" class=\"markup--anchor markup--p-anchor\"><strong>Quantifiers</strong></a>** : Indicate numbers of characters or expressions to match.**</p>\n<p><a href=\"https://github.com/bgoonz/Cheat-Sheets/blob/master/Regular_Expressions/Unicode_Property_Escapes.html\" class=\"markup--anchor markup--p-anchor\"><strong>Unicode property escapes</strong></a>** : Distinguish based on unicode character properties, for example, upper- and lower-case letters, math symbols, and punctuation.**</p>\n<p>If you want to look at all the special characters that can be used in regular expressions in a single table, see the following:</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*Wk5zFr1IHJxacq2a2zi5RQ.png\" class=\"graf-image\" /></figure>### Special characters in regular expressions.\n<h3>Escaping</h3>\n<p>If you need to use any of the special characters literally (actually searching for a <code>\"*\"</code>, for instance), you must escape it by putting a <strong>backslash</strong> in front of it.</p>\n<p>For instance, to search for <code>\"a\"</code> followed by <code>\"*\"</code> followed by <code>\"b\"</code>,</p>\n<blockquote>\n<p>you'd use <code>/a\\*b/</code> --- the backslash \"escapes\" the <code>\"*\"</code>, making it literal instead of special.</p>\n</blockquote>\n<p>Similarly, if you're writing a regular expression literal and need to match a slash (\"/\"), you need to escape that (otherwise, it terminates the pattern)</p>\n<p>For instance, to search for the string \"/example/\" followed by one or more alphabetic characters, you'd use <code>/\\/example\\/[a-z]+/i</code></p>\n<p><strong>--the backslashes before each slash make them literal.</strong></p>\n<p>To match a literal backslash, you need to escape the backslash.</p>\n<p>For instance, to match the string \"C:\\\" where \"C\" can be any letter,</p>\n<p>you'd use <code>/[A-Z]:\\\\/</code></p>\n<p>--- the first backslash escapes the one after it, so the expression searches for a single literal backslash.</p>\n<p>If using the <code>RegExp</code> constructor with a string literal, <strong>remember that the backslash is an escape in string literals, so to use it in the regular expression, you need to escape it at the string literal level</strong>.</p>\n<p><code>/a\\*b/</code> and <code>new RegExp(\"a\\\\*b\")</code> create the same expression,</p>\n<p>which searches for \"a\" followed by a literal \"*\" followed by \"b\".</p>\n<p>If escape strings are not already part of your pattern you can add them using <code>String.replace</code>:</p>\n<pre><code>function escapeRegExp(string) {\n  return string.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&#x26;'); // $&#x26; means the whole matched string\n}\n</code></pre>\n<p><strong>The \"g\" after the regular expression is an option or flag that performs a global search, looking in the whole string and returning all matches.</strong></p>\n<h3>Using parentheses</h3>\n<p>Parentheses around any part of the regular expression pattern causes that part of the matched substring to be remembered.</p>\n<p>Once remembered, the substring can be recalled for other use.</p>\n<h3>Using regular expressions in JavaScript</h3>\n<p>Regular expressions are used with the <code>RegExp</code> <strong>methods</strong></p>\n<p><code>test()</code> <strong>and</strong> <code>exec()</code></p>\n<p>and with the <code>String</code> <strong>methods</strong> <code>match()</code><strong>,</strong> <code>replace()</code><strong>,</strong> <code>search()</code><strong>, and</strong> <code>split()</code><strong>.</strong></p>\n<hr>\n<h3>Method Descriptions</h3>\n<h4><code>exec()</code></h4>\n<p>Executes a search for a match in a string.</p>\n<p>It returns an array of information or <code>null</code> on a mismatch.</p>\n<h4><code>test()</code></h4>\n<p>Tests for a match in a string.</p>\n<p>It returns <code>true</code> or <code>false</code>.</p>\n<h4><code>match()</code></h4>\n<p>Returns an array containing all of the matches, including capturing groups, or <code>null</code> if no match is found.</p>\n<h4><code>matchAll()</code></h4>\n<p>Returns an iterator containing all of the matches, including capturing groups.</p>\n<h4><code>search()</code></h4>\n<p>Tests for a match in a string.</p>\n<p>It returns the index of the match, or <code>-1</code> if the search fails.</p>\n<h4><code>replace()</code></h4>\n<p>Executes a search for a match in a string, and replaces the matched substring with a replacement substring.</p>\n<h4><code>replaceAll()</code></h4>\n<p>Executes a search for all matches in a string, and replaces the matched substrings with a replacement substring.</p>\n<h4><code>split()</code></h4>\n<p>Uses a regular expression or a fixed string to break a string into an array of substrings.</p>\n<h3>Methods that use regular expressions</h3>\n<p>When you want to know whether a pattern is found in a string, use the <code>test()</code> or <code>search()</code> methods;</p>\n<p>for more information (but slower execution) use the <code>exec()</code> or <code>match()</code> methods.</p>\n<p>If you use <code>exec()</code> or <code>match()</code> and if the match succeeds, these methods return an array and update properties of the associated regular expression object and also of the predefined regular expression object, <code>RegExp</code>.</p>\n<p>If the <strong>match fails, the</strong> <code>exec()</code> <strong>method returns</strong> <code>null</code> (which coerces to <code>false</code>).</p>\n<p>In the following example, the script uses the <code>exec()</code> method to find a match in a string.</p>\n<pre><code>let myRe = /d(b+)d/g;\nlet myArray = myRe.exec('cdbbdbsbz');\n</code></pre>\n<p>If you do not need to access the properties of the regular expression, an alternative way of creating <code>myArray</code> is with this script:</p>\n<pre><code>let myArray = /d(b+)d/g.exec('cdbbdbsbz');\n    // similar to \"cdbbdbsbz\".match(/d(b+)d/g); however,\n    // \"cdbbdbsbz\".match(/d(b+)d/g) outputs Array [ \"dbbd\" ], while\n    // /d(b+)d/g.exec('cdbbdbsbz') outputs Array [ 'dbbd', 'bb', index: 1, input: 'cdbbdbsbz' ].\n</code></pre>\n<p>(See <a href=\"https://github.com/bgoonz/Cheat-Sheets/blob/master/Regular_Expressions.md#g-different-behaviors\" class=\"markup--anchor markup--p-anchor\">different behaviors</a> for further info about the different behaviors.)</p>\n<p>If you want to construct the regular expression from a string, yet another alternative is this script:</p>\n<pre><code>let myRe = new RegExp('d(b+)d', 'g');\nlet myArray = myRe.exec('cdbbdbsbz');\n</code></pre>\n<p>With these scripts, the match succeeds and returns the array and updates the properties shown in the following table.</p>\n<p>Results of regular expression execution.</p>\n<p>You can use a regular expression created with an object initializer without assigning it to a letiable.</p>\n<p>If you do, however, every occurrence is a new regular expression.</p>\n<p>For this reason, if you use this form without assigning it to a letiable, you cannot subsequently access the properties of that regular expression.</p>\n<p>For example, assume you have this script:</p>\n<pre><code>let myRe = /d(b+)d/g;\nlet myArray = myRe.exec('cdbbdbsbz');\nconsole.log('The value of lastIndex is ' + myRe.lastIndex);\n\n// \"The value of lastIndex is 5\"\n</code></pre>\n<p>However, if you have this script:</p>\n<pre><code>let myArray = /d(b+)d/g.exec('cdbbdbsbz');\nconsole.log('The value of lastIndex is ' + /d(b+)d/g.lastIndex);\n\n// \"The value of lastIndex is 0\"\n</code></pre>\n<p>The occurrences of <code>/d(b+)d/g</code> in the two statements are different regular expression objects and hence have different values for their <code>lastIndex</code> property.</p>\n<p>If you need to access the properties of a regular expression created with an object initializer, you should first assign it to a variable.</p>\n<h3>[Advanced searching with flags]</h3>\n<p>Regular expressions have <strong>six optional flags</strong> that allow for functionality like global and case insensitive searching.</p>\n<p>These flags can be used separately or together in any order, and are included as part of the regular expression.</p>\n<p>Flag Description Corresponding property</p>\n<hr>\n<p><code>g</code> Global search. <code>RegExp.prototype.global</code></p>\n<p><code>i</code> Case-insensitive search. <code>RegExp.prototype.ignoreCase</code></p>\n<p><code>m</code> Multi-line search. <code>RegExp.prototype.multiline</code></p>\n<p><code>s</code> Allows <code>.</code> to match newline characters. <code>RegExp.prototype.dotAll</code></p>\n<p><code>u</code> \"unicode\"; treat a pattern as a sequence of unicode code points. <code>RegExp.prototype.unicode</code></p>\n<p><code>y</code> Perform a \"sticky\" search that matches starting at the current position in the target string. <code>RegExp.prototype.sticky</code></p>\n<h4>Regular expression flags</h4>\n<p><em>To include a flag with the regular expression, use this syntax:</em></p>\n<pre><code>let re = /pattern/flags;\n</code></pre>\n<p>or</p>\n<pre><code>let re = new RegExp('pattern', 'flags');\n</code></pre>\n<p>Note that the flags are an integral part of a regular expression. They cannot be added or removed later.</p>\n<p>For example, <code>re = /\\w+\\s/g</code> creates a regular expression that looks for one or more characters followed by a space, and it looks for this combination throughout the string.</p>\n<pre><code>let re = /\\w+\\s/g;\nlet str = 'fee fi fo fum';\nlet myArray = str.match(re);\nconsole.log(myArray);\n\n// [\"fee \", \"fi \", \"fo \"]\n</code></pre>\n<p>You could replace the line:</p>\n<pre><code>let re = /\\w+\\s/g;\n</code></pre>\n<p>with:</p>\n<pre><code>let re = new RegExp('\\\\w+\\\\s', 'g');\n</code></pre>\n<p>and get the same result.</p>\n<p>The behavior associated with the <code>g</code> flag is different when the <code>.exec()</code> method is used.</p>\n<p>The roles of \"class\" and \"argument\" get reversed:</p>\n<p>In the case of <code>.match()</code>, the string class (or data type) owns the method and the regular expression is just an argument,</p>\n<p>while in the case of <code>.exec()</code>, it is the regular expression that owns the method, with the string being the argument.</p>\n<p>Contrast this <code>str.match(re)</code> versus <code>re.exec(str)</code>.</p>\n<p>The <code>g</code> flag is used with the <code>.exec()</code> method to get iterative progression.</p>\n<pre><code>let xArray; while(xArray = re.exec(str)) console.log(xArray);\n// produces:\n// [\"fee \", index: 0, input: \"fee fi fo fum\"]\n// [\"fi \", index: 4, input: \"fee fi fo fum\"]\n// [\"fo \", index: 7, input: \"fee fi fo fum\"]\n</code></pre>\n<p>The <code>m</code> flag is used to specify that a multiline input string should be treated as multiple lines.</p>\n<p>If the <code>m</code> flag is used, <code>^</code> and <code>$</code> match at the start or end of any line within the input string instead of the start or end of the entire string.</p>\n<h3>Using special characters to verify input</h3>\n<p>In the following example, the user is expected to enter a phone number. When the user presses the \"Check\" button, the script checks the validity of the number. If the number is valid (matches the character sequence specified by the regular expression), the script shows a message thanking the user and confirming the number. If the number is invalid, the script informs the user that the phone number is not valid.</p>\n<p>Within non-capturing parentheses <code>(?:</code> , the regular expression looks for three numeric characters <code>\\d{3}</code> OR <code>|</code> a left parenthesis <code>\\(</code> followed by three digits<code>\\d{3}</code>, followed by a close parenthesis <code>\\)</code>, (end non-capturing parenthesis <code>)</code>), followed by one dash, forward slash, or decimal point and when found, remember the character <code>([-\\/\\.])</code>, followed by three digits <code>\\d{3}</code>, followed by the remembered match of a dash, forward slash, or decimal point <code>\\1</code>, followed by four digits <code>\\d{4}</code>.</p>\n<p>The <code>Change</code> event activated when the user presses Enter sets the value of <code>RegExp.input</code>.</p>\n<h4>HTML</h4>\n<pre><code>&#x3C;p>\n  Enter your phone number (with area code) and then click \"Check\".\n  &#x3C;br>\n  The expected format is like ###-###-####.\n&#x3C;/p>\n&#x3C;form action=\"#\">\n  &#x3C;input id=\"phone\">\n    &#x3C;button onclick=\"testInfo(document.getElementById('phone'));\">Check&#x3C;/button>\n&#x3C;/form>\n</code></pre>\n<h4>JavaScript</h4>\n<pre><code>let re = /(?:\\d{3}|\\(\\d{3}\\))([-\\/\\.])\\d{3}\\1\\d{4}/;\nfunction testInfo(phoneInput) {\n  let OK = re.exec(phoneInput.value);\n  if (!OK) {\n    console.error(phoneInput.value + ' isn\\'t a phone number with area code!');\n  } else {\n    console.log('Thanks, your phone number is ' + OK[0]);}\n}\n</code></pre>\n<h3>Cheat Sheet</h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*VmpGy_BYCekOncdyrgSrxw.png\" class=\"graf-image\" /></figure>#### If you found this guide helpful feel free to checkout my GitHub/gist's where I host similar content:\n<blockquote>\n<p><a href=\"https://gist.github.com/bgoonz\" class=\"markup--anchor markup--blockquote-anchor\"><strong>bgoonz’s</strong> gists · GitHub</a></p>\n</blockquote>\n<p><a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\"><strong>bgoonz — Overview</strong><br />\n<em>Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize…</em>github.com</a><a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p>Or Checkout my personal Resource Site:</p>\n<p><a href=\"https://goofy-euclid-1cd736.netlify.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://goofy-euclid-1cd736.netlify.app/\"><strong>a/A-Student-Resources</strong><br />\n<em>Edit description</em>goofy-euclid-1cd736.netlify.app</a><a href=\"https://goofy-euclid-1cd736.netlify.app/\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p>By <a href=\"https://medium.com/@bryanguner\" class=\"p-author h-card\">Bryan Guner</a> on <a href=\"https://medium.com/p/4d8fb3eb146b\">March 6, 2021</a>.</p>\n<p><a href=\"https://medium.com/@bryanguner/regular-expressions-4d8fb3eb146b\" class=\"p-canonical\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on August 17, 2021.</p>"},{"url":"/docs/docs/sitemap/","relativePath":"docs/docs/sitemap.md","relativeDir":"docs/docs","base":"sitemap.md","name":"sitemap","frontmatter":{"title":"Sitemap","weight":0,"excerpt":"Sitemap","seo":{"title":"Sitemap","description":"Sitemap","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<ul>\n<li><a href=\"https://bgoonz.github.io/BGOONZ_BLOG_2.0/\">Github Pages For This Site</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/job-hunt/\">/job-hunt/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/notes-template/\">/notes-template/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/\">/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/showcase/\">/showcase/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/blog/\">/blog/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/review/\">/review/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/blog/blog-archive/\">/blog/blog-archive/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/blog/my-medium/\">/blog/my-medium/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/blog/blogwcomments/\">/blog/blogwcomments/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/blog/data-structures/\">/blog/data-structures/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/gallery/\">/docs/gallery/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/blog/python-for-js-dev/\">/blog/python-for-js-dev/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/blog/platform-docs/\">/blog/platform-docs/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/sitemap/\">/docs/sitemap/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/about/me/\">/docs/about/me/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/blog/python-resources/\">/blog/python-resources/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/about/resume/\">/docs/about/resume/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/\">/docs/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/blog/web-scraping/\">/blog/web-scraping/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/about/\">/docs/about/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/algo/\">/docs/articles/algo/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/install/\">/docs/articles/install/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/\">/docs/articles/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/gallery/\">/docs/articles/gallery/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/intro/\">/docs/articles/intro/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/basic-web-dev/\">/docs/articles/basic-web-dev/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/reading-files/\">/docs/articles/reading-files/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/writing-files/\">/docs/articles/writing-files/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/audio/audio/\">/docs/audio/audio/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/content/projects/\">/docs/content/projects/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/audio/terms/\">/docs/audio/terms/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/faq/\">/docs/faq/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/community/\">/docs/community/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/resources/\">/docs/articles/resources/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/content/\">/docs/content/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/docs/git-repos/\">/docs/docs/git-repos/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/content/trouble-shooting/\">/docs/content/trouble-shooting/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/python/\">/docs/articles/python/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/interact/clock/\">/docs/interact/clock/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/docs/python/\">/docs/docs/python/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/interact/jupyter-notebooks/\">/docs/interact/jupyter-notebooks/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/interact/\">/docs/interact/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/faq/contact/\">/docs/faq/contact/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/docs/\">/docs/quick-reference/docs/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/interact/other-sites/\">/docs/interact/other-sites/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/new-repo-instructions/\">/docs/quick-reference/new-repo-instructions/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/Emmet/\">/docs/quick-reference/Emmet/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/installation/\">/docs/quick-reference/installation/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/vscode-themes/\">/docs/quick-reference/vscode-themes/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/react/createReactApp/\">/docs/react/createReactApp/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/react/react2/\">/docs/react/react2/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/quick-reference/\">/docs/quick-reference/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/react/\">/docs/react/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/tools/\">/docs/tools/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/tools/notes-template/\">/docs/tools/notes-template/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/tools/more-tools/\">/docs/tools/more-tools/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/tools/plug-ins/\">/docs/tools/plug-ins/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node/install/\">/docs/articles/node/install/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/tools/vscode/\">/docs/tools/vscode/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node/intro/\">/docs/articles/node/intro/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node/nodejs/\">/docs/articles/node/nodejs/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node/nodevsbrowser/\">/docs/articles/node/nodevsbrowser/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node/npm/\">/docs/articles/node/npm/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node/reading-files/\">/docs/articles/node/reading-files/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/node/writing-files/\">/docs/articles/node/writing-files/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/react-in-depth/\">/docs/react-in-depth/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/articles/article-compilation/\">/docs/articles/article-compilation/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/medium/my-websites/\">/docs/medium/my-websites/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/medium/social/\">/docs/medium/social/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/medium/medium-links/\">/docs/medium/medium-links/</a></li>\n<li><a href=\"https://bgoonz-blog.netlify.app/docs/medium/\">/docs/medium/</a></li>\n</ul>"},{"url":"/docs/docs/css/","relativePath":"docs/docs/css.md","relativeDir":"docs/docs","base":"css.md","name":"css","frontmatter":{"title":"Learn Css","weight":0,"excerpt":"Learn Css","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>Learn CSS</h1>\n<iframe src=\"https://onedrive.live.com/embed?cid=D21009FDD967A241&amp;resid=D21009FDD967A241%21634693&amp;authkey=AAQrdzlmcaPgMGA&amp;em=2&amp;wdAr=1.7777777777777777\" width=\"1186px\" height=\"691px\" frameborder=\"0\">This is an embedded <a target=\"_blank\" href=\"https://office.com\">Microsoft Office</a> presentation, powered by <a target=\"_blank\" href=\"https://office.com/webapps\">Office</a>.</iframe>\n<p>CSS Selectors</p>\n<hr>\n<h3>Learn CSS So That Your Site Doesn’t Look Like Garbage</h3>\n<h3>CSS Selectors</h3>\n<ul>\n<li><span id=\"62c3\"><code>CSS Selector</code> : Applies styles to a specific DOM element(s), there are various types:</span></li>\n<li><span id=\"d60d\"><code>Type Selectors</code> : Matches by node name.</span></li>\n<li><span id=\"9826\"><code>Class Selectors</code> : Matches by class name.</span></li>\n<li><span id=\"10a7\"><code>ID Selectors</code> : Matches by ID name.</span></li>\n<li><span id=\"64c0\"><code>Universal Selectors</code> : Selects all HTML elements on a page.</span></li>\n<li><span id=\"9c6b\"><code>Attribute Selectors</code> : Matches elements based on the prescence or value of a given attribute. (i.e. a[title] will match all a elements with a title attribute)</span></li>\n</ul>\n<!-- -->\n<pre><code>/* Type selector */\ndiv {\n  background-color: #000000;\n}/* Class selector */\n.active {\n  color: #ffffff;\n}/* ID selector */\n#list-1 {\n  border: 1px solid gray;\n}/* Universal selector */\n* {\n  padding: 10px;\n}/* Attribute selector */\na[title] {\n  font-size: 2em;\n}\n</code></pre>\n<p><strong>Class Selectors</strong></p>\n<ul>\n<li><span id=\"fddf\">Used to select all elements of a certain class denoted with a <code>.[class name]</code></span></li>\n<li><span id=\"72af\">You can assign multiple classes to a DOM element by separating them with a space.</span></li>\n</ul>\n<p><strong>Compound Class Selectors</strong></p>\n<ul>\n<li><span id=\"befd\">To get around accidentally selecting elements with multiple classes beyond what we want to grab we can chain dots.</span></li>\n<li><span id=\"e2c8\">TO use a compound class selector just append the classes together when referencing them in the CSS.</span></li>\n</ul>\n<!-- -->\n<pre><code>&#x3C;div class=\"box yellow\">&#x3C;/div>\n&#x3C;div class=\"box orange\">&#x3C;/div>\n&#x3C;div class=\"circle orange\">&#x3C;/div>\n</code></pre>\n<ul>\n<li><span id=\"7dd3\">i.e. .box.yellow will select only the first element.</span></li>\n<li><span id=\"8904\">KEEP IN MIND that if you do include a space it will make the selector into a <em>descendant selector</em>.</span></li>\n</ul>\n<!-- -->\n<pre><code>h1#heading,\nh2.subheading {\n  font-style: italic;\n}\n</code></pre>\n<ul>\n<li><span id=\"a8bc\">When we want to target all <code>h1</code> tags with the id of <code>heading</code>.</span></li>\n</ul>\n<p><strong>CSS Combinators</strong></p>\n<ul>\n<li><span id=\"c196\">CSS Combinators are used to combine other selectors into more complex or targeted selectors — they are very powerful!</span></li>\n<li><span id=\"71a6\">Be careful not to use too many of them as they will make your CSS far too complex.</span></li>\n<li><span id=\"6032\"><code>Descendant Selectors</code></span></li>\n<li><span id=\"6f41\">Separated by a space.</span></li>\n<li><span id=\"3829\">Selects all descendants of a parent container.</span></li>\n<li><span id=\"e90c\"><code>Direct Child Selectors</code></span></li>\n<li><span id=\"52b5\">Indicated with a <code>></code>.</span></li>\n<li><span id=\"ea8e\">Different from descendants because it only affects the direct children of an element.</span></li>\n<li><span id=\"486f\"><code>.menu > .is-active { background-color: #ffe0b2; }</code></span></li>\n<li><span id=\"96f9\"><code>&#x3C;body> &#x3C;div class=\"menu\"> &#x3C;div class=\"is-active\">Belka&#x3C;/div> &#x3C;div> &#x3C;div class=\"is-active\">Strelka&#x3C;/div> &#x3C;/div> &#x3C;/div> &#x3C;/body> &#x3C;div class=\"is-active\"> Laika &#x3C;/div> &#x3C;/body></code></span></li>\n<li><span id=\"59ca\">Belka would be the only element selected.</span></li>\n<li><span id=\"0266\"><code>Adjacent Sibling Selectors</code></span></li>\n<li><span id=\"a648\">Uses the <code>+</code> symbol.</span></li>\n<li><span id=\"9d79\">Used for elements that directly follow one another and who both have the same parent.</span></li>\n<li><span id=\"4865\"><code>h1 + h2 { font-style: italic; } &#x3C;h1>Big header&#x3C;/h1> &#x3C;h2>This one is styled because it is directly adjacent to the H1&#x3C;/h2> &#x3C;h2>This one is NOT styled because there is no H1 right before it&#x3C;/h2></code></span></li>\n</ul>\n<p><strong>Pseudo-Classes</strong></p>\n<ul>\n<li><span id=\"b638\"><code>Pseudo-Class</code> : Specifies a special state of the seleted element(s) and does not refer to any elements or attributes contained in the DOM.</span></li>\n<li><span id=\"0360\">Format is a <code>Selector:Pseudo-Class Name</code> or <code>A:B</code></span></li>\n<li><span id=\"91ee\"><code>a:hover { font-family: \"Roboto Condensed\", sans-serif; color: #4fc3f7; text-decoration: none; border-bottom: 2px solid #4fc3f7; }</code></span></li>\n<li><span id=\"27ac\">Some common pseudo-classes that are frequently used are:</span></li>\n<li><span id=\"9b2b\"><code>active</code> : ‘push down’, when ele are activated.</span></li>\n<li><span id=\"5b2f\"><code>checked</code> : applies to things like radio buttons or checkbox inputs.</span></li>\n<li><span id=\"58da\"><code>disabled</code> : any disabled element.</span></li>\n<li><span id=\"d3bd\"><code>first-child</code> : first element in a group of children/siblings.</span></li>\n<li><span id=\"40fc\"><code>focus</code> : elements that have current focus.</span></li>\n<li><span id=\"ed43\"><code>hover</code> : elements that have cursor hovering over it.</span></li>\n<li><span id=\"6fa2\"><code>invalid</code> : any form elements in an invalid state from client-side form validation.</span></li>\n<li><span id=\"7811\"><code>last-child</code> : last element in a group of children/siblings.</span></li>\n<li><span id=\"1bdf\"><code>not(selector)</code> : elements that do not match the provided selector.</span></li>\n<li><span id=\"be5c\"><code>required</code> : form elements that are required.</span></li>\n<li><span id=\"43ed\"><code>valid</code> : form elements in a valid state.</span></li>\n<li><span id=\"6460\"><code>visited</code> : anchor tags of whih the user has already been to the URL that the href points to.</span></li>\n</ul>\n<p><code>Pseudo-Selectors</code></p>\n<ul>\n<li><span id=\"89e7\">Used to create pseudo-elements as children of the elements to which the property applies.</span></li>\n<li><span id=\"0bef\"><code>::after</code></span></li>\n<li><span id=\"52f9\"><code>::before</code></span></li>\n</ul>\n<!-- -->\n<pre><code>&#x3C;style>\n  p::before {\n    background-color: lightblue;\n    border-right: 4px solid violet;\n    content: \":-) \";\n    margin-right: 4px;\n    padding-left: 4px;\n  }\n&#x3C;/style>\n&#x3C;p>This is the first paragraph&#x3C;/p>\n&#x3C;p>This is the second paragraph&#x3C;/p>\n&#x3C;p>This is the third paragraph&#x3C;/p>\n</code></pre>\n<ul>\n<li><span id=\"a843\">Will add some blue smiley faces before the p tag elements.</span></li>\n</ul>\n<p><strong>CSS Rules</strong></p>\n<ul>\n<li><span id=\"919a\"><code>CSS Rule</code> : Collection of single or compound selectors, a curly brace, zero or more properties</span></li>\n<li><span id=\"555f\"><code>CSS Rule Specificity</code> : Sometimes CSS rules will contain multiple elements and may have overlapping properties rules for those same elements - there is an algorithm in CSS that calculates which rule takes precedence.</span></li>\n<li><span id=\"a1db\"><code>The Four Number Calculation</code> : listed in increasing order of importance.</span></li>\n</ul>\n<p>Who has the most IDs? If no one, continue.</p>\n<p>Who has the most classes? If no one, continue.</p>\n<p>Who has the most tags? If no one, continue.</p>\n<p>Last Read in the browser wins.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Ub47AaMXuT1m8_T-\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*t0oXzsLPxpMwNbKo.png\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*2xr0vyHwf6UN905l\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*oq83hQ5qvtT6gDd9.png\" class=\"graf-image\" /></figure><style>\n      .box {\n        width: 50px;\n        height: 50px;\n        border: 1px solid black;\n      }\n      .orange {\n        background-color: orange;\n      }\n      .yellow {\n        background-color: yellow;\n        border: 1px solid purple;\n      }\n    </style>\n    <div class=\"box yellow\"></div>\n    <div class=\"box orange\"></div>\n<ul>\n<li><span id=\"1939\">Coming back to our example where all the CSS Rules have tied, the last step 4 wins out so our element will have a <code>purple border</code>.</span></li>\n</ul>\n<hr>\n<h3>CSS: Type, Properties, and Imports</h3>\n<p><strong>Typography</strong></p>\n<ul>\n<li><span id=\"d6fc\"><code>font-family</code> : change the font.</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*ssVcT1Bd9Edfo6KF\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*WmqUyKiumM8RCJQo.png\" class=\"graf-image\" /></figure>-   <span id=\"daba\">Remember that not all computers have the same fonts on them.</span>\n-   <span id=\"0aa8\">You can import web fonts via an api by using</span>\n-   <span id=\"0c5d\">`@import url('https://fonts.googleapis.com/css2?family=Liu+Jian+Mao+Cao&display=swap');` and pasting it st the top of your CSS file.</span>\n-   <span id=\"d8ff\">And then reference it in your font-family.</span>\n-   <span id=\"ee9f\">`font-size` : Changes the size of your font.</span>\n-   <span id=\"782e\">Keep in mind the two kind of units CSS uses:</span>\n-   <span id=\"c4f7\">`Absolute` : `Pixels`, Points, Inches, Centimeters.</span>\n-   <span id=\"2884\">`Relative` : Em, Rem.</span>\n-   <span id=\"f9b5\">Em: Calulating the size relative to the previous div (bubbles down)</span>\n-   <span id=\"5a5d\">Rem: Calulates relative to the parent element always.</span>\n-   <span id=\"79b0\">`font-style` : Used to set a font to italics.</span>\n-   <span id=\"f464\">`font-weight` : Used to make a font bold.</span>\n-   <span id=\"3d56\">`text-align` : Used to align your text to the left, center, or right.</span>\n-   <span id=\"4cbc\">`text-decoration` : Use to put lines above, through, or under text. Lines can be solid, dashed, or wavy!</span>\n-   <span id=\"1c96\">`text-transform` : Used to set text to all lowercase, uppercase, or capitalize all words.</span>\n<p><strong>Background-Images</strong></p>\n<ul>\n<li><span id=\"13eb\">You can use the background-image property to set a background image for an element.</span></li>\n</ul>\n<hr>\n<h3>CSS: Colors, Borders, and Shadows</h3>\n<p><strong>Colors</strong></p>\n<ul>\n<li><span id=\"6bed\">You can set colors in CSS in three popular ways: by name, by hexadecimal RGB value, and by their decimal RGB value.</span></li>\n<li><span id=\"38fb\">rgba() is used to make an rbg value more transparent, the <code>a</code> is used to specify the <code>alpha channel</code>.</span></li>\n<li><span id=\"cb05\"><strong>Color</strong> : Property used to change the color of text.</span></li>\n<li><span id=\"6f05\"><strong>Background-Color</strong> : Property to change the backgrounf color of an element.</span></li>\n</ul>\n<p><strong>Borders</strong></p>\n<ul>\n<li><span id=\"d922\">Borders take three values: The width of the border, the style (i.e. solid, dotted, dashed), color of the border.</span></li>\n</ul>\n<p><strong>Shadows</strong></p>\n<ul>\n<li><span id=\"bccb\">There are two kinds of shadows in CSS: <code>box shadows</code> and <code>text shadows</code>.</span></li>\n<li><span id=\"7fd2\">Box refers to HTML elements.</span></li>\n<li><span id=\"f3a7\">Text refers to text.</span></li>\n<li><span id=\"2a53\">Shadows take values such as, the horizontal &#x26; vertical offsets of the shadow, the blur radius of the shadow, the spread radius, and of course the colors.</span></li>\n</ul>\n<hr>\n<h3>The Box Model</h3>\n<p><strong>Box Model</strong> : A concept that basically boils down that every DOM element has a box around it.</p>\n<p>Imagine a gift, inside is the gift, wrapped in foam all around (padding), and the giftbox outside of it (border) and then a wrapping paper on the giftbox (margin).- For items that are using <code>block</code> as it’s display, the browser will follow these rules to layout the element: - The box fills 100% of the available container space. - Every new box takes on a new line/row. - Width and Height properties are respected. - Padding, Margin, and Border will push other elements away from the box. - Certain elements have <code>block</code> as their default display, such as: divs, headers, and paragraphs.- For items that are using <code>inline</code> as it’s display, the browser will follow these rules to layout the element: - Each box appears in a single line until it fills up the space. - Width and height are <strong>not</strong> respected. - Padding, Margin, and Border are applied but they <strong>do not</strong> push other elements away from the box. - Certain elements have <code>inline</code> as their default display, such as: span tags, anchors, and images.</p>\n<p><strong>Standard Box Model vs Border-Box</strong>- As per the standard Box Model, the width and height pertains to the content of the box and excludes any additional padding, borders, and margins.</p>\n<p>This bothered many programmers so they created the <strong>border box</strong> to include the calculation of the entire box’s height and width.</p>\n<p><strong>Inline-Block</strong>- Inline-block uses the best features of both <code>block</code> and <code>inline</code>. - Elements still get laid out left to right. - Layout takes into account specified width and height.</p>\n<p><strong>Padding</strong>- Padding applies padding to every side of a box. It is shorthand for four padding properties in this order: <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, <code>padding-left</code> (clockwise!)</p>\n<p><strong>Border</strong>- Border applies a border on all sides of an element. It takes three values in this order: <code>border-width</code>, <code>border-style</code>, <code>border-color</code>. - All three properties can be broken down in the four sides clockwise: top, right, bottom, left.</p>\n<p><strong>Margin</strong>- Margin sets margins on every side of an element. It takes four values in this order: <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, <code>margin-left</code>. - You can use <code>margin: 0 auto</code> to center an element.</p>\n<h3>Positioning</h3>\n<ul>\n<li><span id=\"d380\">The <code>position</code> property allows us to set the position of elements on a page and is an integral part of creatnig a Web page layout.</span></li>\n<li><span id=\"1bd6\">It accepts five values: <code>static</code>, <code>relative</code>, <code>absolute</code>, <code>fixed</code>, <code>sticky</code>.</span></li>\n<li><span id=\"0b53\">Every property (minus <code>static</code>) is used with: <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code> to position an element on a page.</span></li>\n</ul>\n<p><strong>Static Positioning</strong></p>\n<ul>\n<li><span id=\"7aa9\">The default position value of page elements.</span></li>\n<li><span id=\"700a\">Most likely will not use static that much.</span></li>\n</ul>\n<p><strong>Relative Positioning</strong></p>\n<ul>\n<li><span id=\"adc3\">Remains in it’s original position in the page flow.</span></li>\n<li><span id=\"9533\">It is positioned <em>RELATIVE</em> to the it’s <em>ORIGINAL PLACE</em> on the page flow.</span></li>\n<li><span id=\"8c0b\">Creates a <strong>stacking context</strong> : overlapping elements whose order can be set by the z-index property.</span></li>\n</ul>\n<!-- -->\n<pre><code>#pink-box {\n  background-color: #ff69b4;\n  bottom: 0;\n  left: -20px;\n  position: relative;\n  right: 0;\n  top: 0;\n}\n</code></pre>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*mMCUEQ94L4_zxwNc\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*TgjpfTmdczESRAfU.png\" class=\"graf-image\" /></figure>**Absolute Positioning**\n<ul>\n<li><span id=\"d597\">Absolute elements are removed from the normal page flow and other elements around it act like it’s not there. (how we can easily achieve some layering)</span></li>\n<li><span id=\"eb5b\">Here are some examples to illustration absolute positioning:</span></li>\n</ul>\n<!-- -->\n<pre><code>.container {\n  background-color: #2b2d2f;\n  position: relative;\n}#pink-box {\n  position: absolute;\n  top: 60px;\n}\n</code></pre>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Mu1E5D10RQaBpzms\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*6jvV-NnX5HS5PuVT.png\" class=\"graf-image\" /></figure>-   <span id=\"adb4\">Note that the container ele has a relative positioning — this is so that any changes made to the absolute positioned children will be positioned from it’s top-left corner.</span>\n-   <span id=\"be4f\">Note that because we removed the pink from the normal page flow, the container has now shifted the blue box to where the pink box should have been — which is why it is now layered beneath the pink.</span>\n<!-- -->\n<pre><code>.container {\n  background-color: #2b2d2f;\n  position: relative;\n}#pink-box {\n  position: absolute;\n  top: 60px;\n}#blue-box {\n  position: absolute;\n}\n</code></pre>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*phWx-191VVQ5pRF9\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*o_T8meZgQSu7kxfs.png\" class=\"graf-image\" /></figure>-   <span id=\"9e42\">As you can see here, since we have also taken the blue box out of the normal page flow by declaring it as absoutely positioned it now overlaps over the pink box.</span>\n<!-- -->\n<pre><code>.container {\n  background-color: #2b2d2f;\n  position: relative;\n}#pink-box {\n  background-color: #ff69b4;\n  bottom: 60px;\n  position: absolute;\n}\n</code></pre>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*HJbtARqC1qmeWTHS\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*rRNttTlXfnhqERYU.png\" class=\"graf-image\" /></figure>-   <span id=\"528a\">Example where the absolute element has it’s bottom property modified.</span>\n<!-- -->\n<pre><code>.container {\n  background-color: #2b2d2f;\n}#pink-box {\n  background-color: #ff69b4;\n  bottom: 60px;\n  position: absolute;\n}\n</code></pre>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*e7H6ImFUmcPGMaoa\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Al6ILt84EC0bhjnK.png\" class=\"graf-image\" /></figure>-   <span id=\"f676\">If we removed the container’s relative position. Our absolute unit would look for the nearest parent which would be the document itself.</span>\n<p><strong>Fixed Positioning</strong></p>\n<ul>\n<li><span id=\"fe31\">Another positioning that removes it’s element from the page flow, and automatically positions it’s parent as the HTML doc itself.</span></li>\n<li><span id=\"2388\">Fixed also uses top, right, bottom, and left.</span></li>\n<li><span id=\"3903\">Useful for things like nav bars or other features we want to keep visible as the user scrolls.</span></li>\n</ul>\n<p><strong>Sticky Positioning</strong></p>\n<ul>\n<li><span id=\"8ae2\">Remains in it’s original position in the page flow, and it is positioned relative to it’s closest block-level ancestor and any <em>scrolling</em> ancestors.</span></li>\n<li><span id=\"abe8\">Behaves like a relatively positioned element until the point at which you would normally scroll past it’s viewport — then it sticks!</span></li>\n<li><span id=\"7ac0\">It is positioned with top, right, bottom, and left.</span></li>\n<li><span id=\"9080\">A good example are headers in a scrollable list.</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*BRVlqobKK0IZtnXq\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*jQQJYWVoQY2eNANS.gif\" class=\"graf-image\" /></figure>\n<hr>\n<h3>Flexible Box Model</h3>\n<ul>\n<li><span id=\"46aa\">Flexbox is a <strong>CSS module</strong> that provides a convenient way for us to display items inside a flexible container so that the layout is responsive.</span></li>\n<li><span id=\"ebb3\">Float was used back in the day to display position of elements in a container.</span></li>\n<li><span id=\"2a8e\">A very inconvenient aspect of float is the need to <em>clear</em> the float.</span></li>\n<li><span id=\"ba98\">To ‘clear’ a float we need to set up a ghost div to properly align — this is already sounds so inefficient.</span></li>\n</ul>\n<p><strong>Using Flexbox</strong></p>\n<ul>\n<li><span id=\"e23b\">Flexbox automatically resizes a container element to fit the viewport size without needing to use breakpoints.</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*_SXOQpq3yrywWCcL\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*IBJIWQ7Z_23eERWn.png\" class=\"graf-image\" /></figure>-   <span id=\"b505\">Flexbox layout applies styles to the parent element, and it’s children.</span>\n<!-- -->\n<pre><code>.container {\n  display: flex; /*sets display to use flex*/\n  flex-wrap: wrap; /*bc flex tries to fit everything into one line, use wrap to have the elements wrap to the next line*/\n  flex-direction: row; /*lets us create either rows or columns*/\n}\n</code></pre>\n<ul>\n<li><span id=\"4898\"><code>flex-flow</code> can be used to combine wrap and direction.</span></li>\n<li><span id=\"acdb\"><code>justify-content</code> used to define the alignment of flex items along the main axis.</span></li>\n<li><span id=\"68d6\"><code>align-items</code> used to define the alignment on the Y-axis.</span></li>\n<li><span id=\"f0d8\"><code>align-content</code> redistributes extra space on the cross axis.</span></li>\n<li><span id=\"531c\">By default, flex items will appear in the order they are added to the DOM, but we can use the <code>order</code> property to change that.</span></li>\n<li><span id=\"39b0\">Some other properties we can use on flex items are:</span></li>\n<li><span id=\"ec38\"><code>flex-grow</code> : dictates amount of avail. space the item should take up.</span></li>\n<li><span id=\"0916\"><code>flex-shrink</code> : defines the ability for a flex item to shrink.</span></li>\n<li><span id=\"4dda\"><code>flex-basis</code> : Default size of an element before the remaining space is distributed.</span></li>\n<li><span id=\"d9f2\"><code>flex</code> : shorthand for grow, shrink and basis.</span></li>\n<li><span id=\"f127\"><code>align-self</code> : Overrides default alignment in the container.</span></li>\n</ul>\n<hr>\n<h3>Grid Layout</h3>\n<ul>\n<li><span id=\"cc4f\">CSS Grid is a 2d layout system that let’s use create a grid with columns and rows purely using Vanilla CSS. (flex is one dimensional)</span></li>\n</ul>\n<p><strong>Bootstrap vs CSS Grid</strong></p>\n<ul>\n<li><span id=\"4af2\">Bootstrap was a front-end library commonly used to create grid layouts but now CSS grid provides greater flexibility and control.</span></li>\n<li><span id=\"e404\">Grid applies style to a parent container and it’s child elements.</span></li>\n</ul>\n<!-- -->\n<pre><code>.grid-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: auto;\n  grid-template-areas:\n    \"header header header\"\n    \"main . sidebar\"\n    \"footer footer footer\";  grid-column-gap: 20px;\n  grid-row-gap: 30px;\n  justify-items: stretch;\n  align-items: stretch;\n  justify-content: stretch;\n  align-content: stretch;\n}.item-1 {\n  grid-area: header;\n}\n.item-2 {\n  grid-area: main;\n}\n.item-3 {\n  grid-area: sidebar;\n}\n.item-4 {\n  grid-area: footer;\n}\n</code></pre>\n<ul>\n<li><span id=\"26c3\">Columns and Rows can be defined with: pixels, percentages, auto, named grid lines, using <code>repeat</code>, fractions.</span></li>\n<li><span id=\"a117\"><code>Grid Template Areas</code> gives us a handy way to map out and visualize areas of the grid layout.</span></li>\n<li><span id=\"17ae\">Combine areas with templates to define how much space an area should take up.</span></li>\n<li><span id=\"f90a\"><code>Grid Gaps</code> can be used to create ‘gutters’ between grid item.s</span></li>\n<li><span id=\"d7c0\">The way we have defined our grid with <code>grid-templates</code> and <code>areas</code> are considered <strong>explicit</strong>.</span></li>\n<li><span id=\"cef6\">We can also <code>implicitly</code> define grids.</span></li>\n</ul>\n<!-- -->\n<pre><code>.grid-container {\n  display: grid;\n  grid-template-columns: 100px 100px 100px 100px;\n  grid-template-rows: 50px 50px 50px;\n  grid-auto-columns: 100px;\n  grid-auto-rows: 50px;\n}\n</code></pre>\n<ul>\n<li><span id=\"e6d3\">Any grid items that aren’t explicity placed are automatically placed or <em>re-flowed</em></span></li>\n</ul>\n<p><strong>Spanning Columns &#x26; Rows</strong></p>\n<ul>\n<li><span id=\"98c8\">We can use the following properties to take up a specified num of cols and rows.</span></li>\n<li><span id=\"0208\"><code>grid-column-start</code></span></li>\n<li><span id=\"437a\"><code>grid-column-end</code></span></li>\n<li><span id=\"7d03\"><code>grid-row-start</code></span></li>\n<li><span id=\"0a8e\"><code>grid-row-end</code></span></li>\n<li><span id=\"c62b\">All four properties can take any of the following values: the line number, span #, span name, auto.</span></li>\n</ul>\n<!-- -->\n<pre><code>.item-1 {\n  grid-row-start: row2-start; /* Item starts at row line named \"row2-start\" */\n  grid-row-end: 5; /* Item ends at row line 5 */\n  grid-column-start: 1; /* Item starts at column line 1 */\n  grid-column-end: three; /* Item ends at column line named \"three\" */\n}.item-2 {\n  grid-row-start: 1; /* Item starts at row line 1 */\n  grid-row-end: span 2; /* Item spans two rows and ends at row line 3 */\n  grid-column-start: 3; /* Item starts at column line 3 */\n  grid-column-end: span col5-start; /* Item spans and ends at line named \"col5-start\" */\n}\n</code></pre>\n<p><strong>Grid Areas</strong></p>\n<ul>\n<li><span id=\"9dd0\">We use the grid areas in conjunction with grid-container property to <strong>define sections of the layout</strong>.</span></li>\n<li><span id=\"5ec2\">We can then assign named sections to individual element’s css rules.</span></li>\n</ul>\n<p><strong>Justify &#x26; Align Self</strong></p>\n<ul>\n<li><span id=\"06b0\">Justify items and Align Items can be used to align all grid items at once.</span></li>\n<li><span id=\"53f5\"><strong>Justify Self</strong> is used to align self on the row.</span></li>\n<li><span id=\"f6b1\">It can take four values: start, end, center, stretch.</span></li>\n<li><span id=\"72bb\"><strong>Align Self</strong> is used to align self on the column.</span></li>\n<li><span id=\"d5d4\">It can take four values: start, end, center, stretch.</span></li>\n</ul>\n<hr>\n<p><strong>CSS Hover Effect and Handling</strong></p>\n<p><strong>Overflow</strong></p>\n<p><code>css .btn { background-color: #00bfff; color: #ffffff; border-radius: 10px; padding: 1.5rem; }</code></p>\n<p><code>.btn--active:hover { cursor: pointer; transform: translateY(-0.25rem);</code></p>\n<p><code>/* Moves our button up/down on the Y axis */ }</code></p>\n<p>The Pseudo Class Selector <code>hover</code> activates when the cursor goes over the selected element.</p>\n<p><strong>Content Overflow</strong>- You can apply an <code>overflow</code> content property to an element if it’s inner contents are spilling over.</p>\n<p>There are three members in the overflow family: — <code>overflow-x</code> : Apply horizontally. - <code>overflow-y</code> : Apply vertically. - <code>overflow</code> : Apply both directions.</p>\n<h3>Transitions</h3>\n<ul>\n<li><span id=\"b5a7\">Transitions provide a way to control animation speed when changing CSS properties.</span></li>\n<li><span id=\"2e1b\"><strong>Implicit Transitions</strong> : Animations that involve transitioning between two states.</span></li>\n</ul>\n<p><strong>Defining Transitions</strong></p>\n<ul>\n<li><span id=\"bbd6\"><code>transition-property</code> : specifies the name of the CSS property to apply the transition.</span></li>\n<li><span id=\"6340\"><code>transition-duration</code> : during of the transition.</span></li>\n<li><span id=\"7463\"><code>transition-delay</code> : time before the transition should start.</span></li>\n</ul>\n<p><strong>Examples</strong> :</p>\n<pre><code>#delay {\n  font-size: 14px;\n  transition-property: font-size;\n  transition-duration: 4s;\n  transition-delay: 2s;\n}#delay:hover {\n  font-size: 36px;\n}\n</code></pre>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Z6AbWnbmbFfu-tSM\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*_6nSuCOR34-6ET7n.gif\" class=\"graf-image\" /></figure>-   <span id=\"e6c9\">After a delay of two seconds, a four second transition begins where the font size goes from 36px to 14px.</span>\n<!-- -->\n<pre><code>.box {\n  border-style: solid;\n  border-width: 1px;\n  display: block;\n  width: 100px;\n  height: 100px;\n  background-color: #0000ff;\n  transition: width 2s, height 2s, background-color 2s, transform 2s;\n}.box:hover {\n  background-color: #ffcccc;\n  width: 200px;\n  height: 200px;\n  transform: rotate(180deg);\n}\n</code></pre>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*PH5_YmVDFVGqWGjO\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Ya7xiy0AqJaJ9RPq.gif\" class=\"graf-image\" /></figure>-   <span id=\"c336\">When the mouse hovers over a box, it spins due to the rotate transform. Width and height change and also the bg color.</span>\n<hr>\n<h3>BEM Guidelines</h3>\n<ul>\n<li><span id=\"6474\">BEM was created as a guideline to solve the issue of loose standards around CSS naming conventions.</span></li>\n<li><span id=\"6d0c\"><strong>BEM</strong> stands for <code>block</code>, <code>element</code>, <code>modifier</code>.</span></li>\n<li><span id=\"3eb9\"><strong>Block</strong></span></li>\n<li><span id=\"f6b4\">A standalone entity that is meaningful on it’s own.</span></li>\n<li><span id=\"7e86\">Can be nested and interact with one another.</span></li>\n<li><span id=\"338e\">Holistic entities without DOM rep can be blocks.</span></li>\n<li><span id=\"f2f0\">May consist latin letters, digits, and dashes.</span></li>\n<li><span id=\"3bfb\">Any DOM node can be a block if it accepts a class name.</span></li>\n<li><span id=\"5c9b\"><strong>Element</strong></span></li>\n<li><span id=\"1b95\">Part of a block and has no standalone meaning.</span></li>\n<li><span id=\"b5cf\">Any element that is semantically tied to a block.</span></li>\n<li><span id=\"10e2\">May consist latin letters, digits, and dashes.</span></li>\n<li><span id=\"9b79\">Formed by using two underscores after it’s block name.</span></li>\n<li><span id=\"e282\">Any DOM node within a block can be an element.</span></li>\n<li><span id=\"a0dc\">Element classes should be used independently.</span></li>\n<li><span id=\"26f1\"><strong>Modifier</strong></span></li>\n<li><span id=\"6642\">A flag on blocks or elements. Use them to change appearance, behavior or state.</span></li>\n<li><span id=\"6cca\">Extra class name to add onto blocks or elements.</span></li>\n<li><span id=\"745f\">Add mods only to the elements they modify.</span></li>\n<li><span id=\"6416\">Modifier names may consist of Latin letters, digits, dashes and underscores.</span></li>\n<li><span id=\"f940\">Written with two dashes.</span></li>\n</ul>\n<p><strong>BEM Example</strong></p>\n<pre><code>&#x3C;form class=\"form form--theme-xmas form--simple\">\n  &#x3C;input class=\"form__input\" type=\"text\" />\n  &#x3C;input class=\"form__submit form__submit--disabled\" type=\"submit\" />\n&#x3C;/form>/* block selector */\n.form {\n}/* block modifier selector */\n.form--theme-xmas {\n}/* block modifier selector */\n.form--simple {\n}/* element selector */\n.form__input {\n}/* element selector */\n.form__submit {\n}/* element modifier selector */\n.form__submit--disabled {\n}\n</code></pre>\n<h4>If you found this guide helpful feel free to checkout my github/gists where I host similar content:</h4>\n<p><a href=\"https://gist.github.com/bgoonz\" class=\"markup--anchor markup--p-anchor\">bgoonz’s gists · GitHub</a></p>\n<p><a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\"><strong>bgoonz — Overview</strong><br />\n<em>Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize…</em>github.com</a><a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p>Or Checkout my personal Resource Site:</p>\n<p><a href=\"https://goofy-euclid-1cd736.netlify.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://goofy-euclid-1cd736.netlify.app/\"><strong>a/A-Student-Resources</strong><br />\n<em>Edit description</em>goofy-euclid-1cd736.netlify.app</a><a href=\"https://goofy-euclid-1cd736.netlify.app/\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p>By <a href=\"https://medium.com/@bryanguner\" class=\"p-author h-card\">Bryan Guner</a> on <a href=\"https://medium.com/p/938871b4521a\">March 6, 2021</a>.</p>"},{"url":"/docs/faq/contact/","relativePath":"docs/faq/contact.md","relativeDir":"docs/faq","base":"contact.md","name":"contact","frontmatter":{"title":"Contact!","sections":[],"seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<br>\n<br>\n<iframe src=\"https://bgoonz-blog-v3-0.netlify.app/contact/\" height=\"900px\" width=\"100%\">\n</iframe>\n<br>\n<br>\n<iframe src=\"https://comments-3.bgoonz.repl.co/\" height=\"900px\" width=\"100%\">\n</iframe>\n<h3>Calendar:</h3>\n<iframe src=\"https://calendar.google.com/calendar/embed?src=c_f16bvhnsdsp8epckcinsu4978g%40group.calendar.google.com&ctz=America%2FNew_York\" style=\"border: 0\" width=\"800\" height=\"600\" frameborder=\"0\" scrolling=\"no\"></iframe>"},{"url":"/docs/faq/","relativePath":"docs/faq/index.md","relativeDir":"docs/faq","base":"index.md","name":"index","frontmatter":{"title":"FAQ","excerpt":"In this section you'll find commonly asked questions regarding the Libris theme. If you have questions, don’t hesitate to ask us directly.","seo":{"title":"FAQ","description":"FAQ What's your favorite non-business book?\nHitchhiker's Guide To The Galaxy","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"FAQ","keyName":"property"},{"name":"og:description","value":"This is the faqpage","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"FAQ"},{"name":"twitter:description","value":"This is the faqpage"}]},"template":"docs","weight":900},"html":"<h4>What's the most useful business-related book you've ever read?</h4>\n<blockquote>\n<p>A Random Walk Down Wall Street</p>\n</blockquote>\n<h4>What's your favorite non-business book?</h4>\n<blockquote>\n<p>Hitchhiker's Guide To The Galaxy</p>\n</blockquote>\n<h4>If money were not an issue, what would you be doing right now?</h4>\n<blockquote>\n<p>Designing recording software/hardware and using it</p>\n</blockquote>\n<h4>What words of advice would you give your younger self?</h4>\n<blockquote>\n<p>Try harder and listen to your parents more (the latter bit of advice would be almost certain to fall on deaf ears lol)</p>\n</blockquote>\n<h4>What's the most creative thing you've ever done?</h4>\n<blockquote>\n<p>I built a platform that listens to a guitarist's performance and automatically triggers guitar effects at the appropriate time in the song.</p>\n</blockquote>\n<h4>Which founders or startups do you most admire?</h4>\n<blockquote>\n<p>Is it to basic to say Tesla... I know they're prevalent now but I've been an avid fan since as early as 2012.</p>\n</blockquote>\n<h4>What's your super power?</h4>\n<blockquote>\n<p>Having really good ideas and forgetting them moments later.</p>\n</blockquote>\n<h4>What's the best way for people to get in touch with you?</h4>\n<blockquote>\n<p>A text</p>\n</blockquote>\n<h4>What aspects of your work are you most passionate about?</h4>\n<p>Creating things that change my every day life.</p>\n<h4>What was the most impactful class you took in school?</h4>\n<blockquote>\n<p>Modern Physics... almost changed my major after that class... but at the end of the day engineering was a much more fiscally secure avenue.</p>\n</blockquote>\n<h4>What's something you wish you had done years earlier?</h4>\n<blockquote>\n<p>Learned to code ... and sing</p>\n</blockquote>\n<h4>What words of wisdom do you live by?</h4>\n<blockquote>\n<p>*Disclaimer: The following wisdom is very cliche ... but... \"Be the change that you wish to see in the world.\"</p>\n</blockquote>"},{"url":"/docs/faq/plug-ins/","relativePath":"docs/faq/plug-ins.md","relativeDir":"docs/faq","base":"plug-ins.md","name":"plug-ins","frontmatter":{"title":"Plug-ins","weight":2,"seo":{"title":"Gatsby Plugins For This Sites Content Model","description":"This is the Gatsby Plugins For This Sites Content Model page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Gatsby Plugins For This Sites Content Model","keyName":"property"},{"name":"og:description","value":"This is the Gatsby Plugins For This Sites Content Model page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Gatsby Plugins For This Sites Content Model"},{"name":"twitter:description","value":"This is the Gatsby Plugins For This Sites Content Model page"}]},"template":"docs"},"html":"<div class=\"note\">\n  <strong>Note:</strong> These are the gatsby plugins that power the file system of this website! <strong>See more in the Docs</strong> section.\n</div>\n<h3>Code:</h3>\n<blockquote>\n<p>Gatsby Source File System</p>\n</blockquote>\n<pre><code>js\nconst path = require('path');\nconst fs = require('fs');\nconst { createFilePath } = require('gatsby-source-filesystem');\nconst _ = require('lodash');\n\nfunction findFileNode({ node, getNode }) {\n    let fileNode = node;\n    let ids = [fileNode.id];\n\n    while (fileNode &#x26;&#x26; fileNode.internal.type !== `File` &#x26;&#x26; fileNode.parent) {\n        fileNode = getNode(fileNode.parent);\n\n        if (!fileNode) {\n            break;\n        }\n\n        if (_.includes(ids, fileNode.id)) {\n            console.log(`found cyclic reference between nodes`);\n            break;\n        }\n\n        ids.push(fileNode.id);\n    }\n\n    if (!fileNode || fileNode.internal.type !== `File`) {\n        console.log('did not find ancestor File node');\n        return null;\n    }\n\n    return fileNode;\n}\n\nexports.onCreateNode = ({ node, getNode, actions }, options) => {\n    const { createNodeField } = actions;\n\n    if (node.internal.type === 'MarkdownRemark') {\n        let fileNode = findFileNode({ node, getNode });\n        if (!fileNode) {\n            throw new Error('could not find parent File node for MarkdownRemark node: ' + node);\n        }\n\n        let url;\n        if (node.frontmatter.url) {\n            url = node.frontmatter.url;\n        } else if (_.get(options, 'uglyUrls', false)) {\n            url = path.join(fileNode.relativeDirectory, fileNode.name + '.html');\n        } else {\n            url = createFilePath({ node, getNode });\n        }\n\n        createNodeField({ node, name: 'url', value: url });\n        createNodeField({\n            node,\n            name: 'absolutePath',\n            value: fileNode.absolutePath\n        });\n        createNodeField({\n            node,\n            name: 'relativePath',\n            value: fileNode.relativePath\n        });\n        createNodeField({ node, name: 'absoluteDir', value: fileNode.dir });\n        createNodeField({\n            node,\n            name: 'relativeDir',\n            value: fileNode.relativeDirectory\n        });\n        createNodeField({ node, name: 'base', value: fileNode.base });\n        createNodeField({ node, name: 'ext', value: fileNode.ext });\n        createNodeField({ node, name: 'name', value: fileNode.name });\n    }\n};\n\nexports.createPages = ({ graphql, getNode, actions, getNodesByType }) => {\n    const { createPage, deletePage } = actions;\n\n    // Use GraphQL to bring only the \"id\" and \"html\" (added by gatsby-transformer-remark)\n    // properties of the MarkdownRemark nodes. Don't bring additional fields\n    // such as \"relativePath\". Otherwise, Gatsby's GraphQL resolvers might infer\n    // types these fields as File and change their structure. For example, the\n    // \"html\" attribute exists only on a GraphQL node, but does not exist on the\n    // underlying node.\n    return graphql(`\n        {\n            allMarkdownRemark {\n                edges {\n                    node {\n                        id\n                        html\n                    }\n                }\n            }\n        }\n    `).then((result) => {\n        if (result.errors) {\n            return Promise.reject(result.errors);\n        }\n\n        const nodes = result.data.allMarkdownRemark.edges.map(({ node }) => node);\n        const siteNode = getNode('Site');\n        const siteDataNode = getNode('SiteData');\n        const sitePageNodes = getNodesByType('SitePage');\n        const sitePageNodesByPath = _.keyBy(sitePageNodes, 'path');\n        const siteData = _.get(siteDataNode, 'data', {});\n\n        const pages = nodes.map((graphQLNode) => {\n            // Use the node id to get the underlying node. It is not exactly the\n            // same node returned by GraphQL, because GraphQL resolvers might\n            // transform node fields.\n            const node = getNode(graphQLNode.id);\n            return {\n                url: node.fields.url,\n                relativePath: node.fields.relativePath,\n                relativeDir: node.fields.relativeDir,\n                base: node.fields.base,\n                name: node.fields.name,\n                frontmatter: node.frontmatter,\n                html: graphQLNode.html\n            };\n        });\n\n        nodes.forEach((graphQLNode) => {\n            const node = getNode(graphQLNode.id);\n            const url = node.fields.url;\n\n            const template = node.frontmatter.template;\n            if (!template) {\n                console.error(`Error: undefined template for ${url}`);\n                return;\n            }\n\n            const component = path.resolve(`./src/templates/${template}.js`);\n            if (!fs.existsSync(component)) {\n                console.error(`Error: component \"src/templates/${template}.js\" missing for ${url}`);\n                return;\n            }\n\n            const existingPageNode = _.get(sitePageNodesByPath, url);\n\n            const page = {\n                path: url,\n                component: component,\n                context: {\n                    url: url,\n                    relativePath: node.fields.relativePath,\n                    relativeDir: node.fields.relativeDir,\n                    base: node.fields.base,\n                    name: node.fields.name,\n                    frontmatter: node.frontmatter,\n                    html: graphQLNode.html,\n                    pages: pages,\n                    site: {\n                        siteMetadata: _.get(siteData, 'site-metadata', {}),\n                        pathPrefix: siteNode.pathPrefix,\n                        data: _.omit(siteData, 'site-metadata')\n                    }\n                }\n            };\n\n            if (existingPageNode &#x26;&#x26; !_.get(page, 'context.menus')) {\n                page.context.menus = _.get(existingPageNode, 'context.menus');\n            }\n\n            createPage(page);\n        });\n    });\n};\n\n```\n&#x3C;/pre>\n</code></pre>\n<h5>Gatsby Source Data</h5>\n<pre><code>&#x3C;pre>\n```javascript\n</code></pre>\n<pre><code class=\"language-javascript\">const path = require('path');\nconst yaml = require('js-yaml');\nconst fse = require('fs-extra');\nconst chokidar = require('chokidar');\nconst _ = require('lodash');\n\nconst metadataFileName = 'site-metadata.json';\n\nconst parsers = {\n    yaml: (data) => yaml.safeLoad(data, { schema: yaml.JSON_SCHEMA }),\n    json: (data) => JSON.parse(data)\n};\n\nconst supportedExtensions = {\n    yaml: parsers.yaml,\n    yml: parsers.yaml,\n    json: parsers.json\n};\n\nexports.sourceNodes = (props, pluginOptions = {}) => {\n    const createContentDigest = props.createContentDigest;\n    const { createNode } = props.actions;\n    const reporter = props.reporter;\n\n    if (!_.get(pluginOptions, 'path')) {\n        pluginOptions.path = 'src/data';\n    }\n\n    if (!path.isAbsolute(pluginOptions.path)) {\n        pluginOptions.path = path.resolve(process.cwd(), pluginOptions.path);\n    }\n\n    reporter.info(`[gatsby-source-data] setup file watcher and create site data`);\n\n    const dataPath = pluginOptions.path;\n    const createSiteDataFromFilesPartial = _.partial(createSiteDataFromFiles, {\n        dataPath,\n        createNode,\n        createContentDigest,\n        reporter\n    });\n    const watcher = chokidar.watch([dataPath, metadataFileName], {\n        cwd: '.',\n        ignoreInitial: true\n    });\n    watcher.on('add', createSiteDataFromFilesPartial);\n    watcher.on('change', createSiteDataFromFilesPartial);\n    watcher.on('unlink', createSiteDataFromFilesPartial);\n\n    return createSiteDataFromFiles({ dataPath, createNode, createContentDigest, reporter }, null);\n};\n\nasync function createSiteDataFromFiles({ dataPath, createNode, createContentDigest, reporter }, changedFile) {\n    reporter.info(`[gatsby-source-data] create site data from files, updated path: ${changedFile}`);\n    let dataFiles = [];\n\n    const dataPathExists = await fse.pathExists(dataPath);\n    if (dataPathExists) {\n        dataFiles = await readDirRecursively(dataPath);\n    }\n\n    const metadataPath = path.resolve(metadataFileName);\n    const metadataExists = await fse.pathExists(metadataPath);\n    if (metadataExists) {\n        dataFiles.push(metadataFileName);\n    }\n\n    const sortedDataFiles = dataFiles.slice().sort();\n    const data = await convertDataFilesToJSON(sortedDataFiles, dataPath, reporter);\n\n    createNode({\n        id: 'SiteData',\n        parent: null,\n        children: [],\n        data: data,\n        internal: {\n            type: 'SiteData',\n            contentDigest: createContentDigest(JSON.stringify(data)),\n            description: `Site data from ${path.relative(process.cwd(), dataPath)}`\n        }\n    });\n}\n\nasync function readDirRecursively(dir, options) {\n    const rootDir = _.get(options, 'rootDir', dir);\n    const files = await fse.readdir(dir);\n    const promises = _.map(files, async (file) => {\n        const filePath = path.join(dir, file);\n        const stats = await fse.stat(filePath);\n        if (stats.isDirectory()) {\n            return readDirRecursively(filePath, { rootDir });\n        } else if (stats.isFile()) {\n            return path.relative(rootDir, filePath);\n        } else {\n            return null;\n        }\n    });\n    const recFiles = await Promise.all(promises);\n    return _.chain(recFiles).compact().flatten().value();\n}\n\nfunction convertDataFilesToJSON(dataFiles, dataDirPath, reporter) {\n    let promises = _.map(dataFiles, (filePath) => {\n        const pathObject = path.parse(filePath);\n        const absFilePath = pathObject.base === metadataFileName ? metadataFileName : path.join(dataDirPath, filePath);\n        const relPath = pathObject.base === metadataFileName ? metadataFileName : filePath;\n        const relDir = pathObject.base === metadataFileName ? '' : pathObject.dir;\n        const ext = pathObject.ext.substring(1);\n        if (!_.has(supportedExtensions, ext)) {\n            return null;\n        }\n        return fse.readFile(absFilePath).then((data) => {\n            const propPath = _.compact(relDir.split(path.sep).concat(pathObject.name));\n            const res = {};\n            try {\n                const parsedData = supportedExtensions[ext](data);\n                _.set(res, propPath, parsedData);\n            } catch (err) {\n                reporter.warn(`[gatsby-source-data] could not parse file: ${relPath}`);\n            }\n            return res;\n        });\n    });\n    return Promise.all(promises).then((results) => {\n        return _.reduce(results, (data, res) => _.merge(data, res), {});\n    });\n}\n</code></pre>\n<pre><code class=\"language-javascript\">&#x3C;/pre>\n</code></pre>"},{"url":"/docs/interact/callstack-visual/","relativePath":"docs/interact/callstack-visual.md","relativeDir":"docs/interact","base":"callstack-visual.md","name":"callstack-visual","frontmatter":{"title":"Callstack Visualizer","weight":0,"excerpt":"Callstack Visualizer","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<script async src=\"//jsfiddle.net/bgoonz/tu3Lw57r/embed/result/dark/\"></script>\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"Linear vs Binary Search\" src=\"https://codepen.io/bgoonz/embed/MWbZoOa?default-tab=result&editable=true&theme-id=light\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/bgoonz/pen/MWbZoOa\">\n  Linear vs Binary Search</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"light\" data-default-tab=\"result\" data-slug-hash=\"GRNPEdY\" data-editable=\"true\" data-user=\"bgoonz\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/bgoonz/pen/GRNPEdY\">\n  Data Structures Viz</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n<h2>Callstack Visualizer</h2>\n<iframe src=\"https://visualize-callstack-qdvyu8oyc-visualize42.vercel.app/\" height=\"900px\" width=\"100%\">\n</iframe>\n<h6>About the Call Stack</h6>\n<p><strong>TL;DR</strong> *The <strong>Call Stack</strong> tracks function calls. It is a LIFO stack of frames. Each frame represents a function call.*</p>\n<hr>\n<p>The <strong>Call Stack</strong> is a fundamental part of the JavaScript language. It is a record-keeping structure that allows us to perform function calls. Each function call is represented as a frame on the <strong>Call Stack</strong>. This is how the JavaScript engine keeps track of which functions have been called and in what order. The JS engine uses this information to ensure execution picks back up in the right spot after a function returns.</p>\n<p>When a JavaScript program first starts executing, the <strong>Call Stack</strong> is empty. When the first function call is made, a new frame is pushed onto the top of the <strong>Call Stack</strong>. When that function returns, its frame is popped off of the <strong>Call Stack</strong>.</p>\n<h6>About the Event Loop</h6>\n<p><strong>TL;DR</strong> *The <strong>Event Loop</strong> processes Tasks and Microtasks. It places them into the Call Stack for execution one at a time. It also controls when rerendering occurs.*</p>\n<hr>\n<p>The Event Loop is a looping algorithm that processes the Tasks/Microtasks in the Task Queue and Microtask Queue. It handles selecting the next Task/Microtask to be run and placing it in the Call Stack for execution.</p>\n<p>The Event Loop algorithm consists of four key steps:</p>\n<ol>\n<li><strong>Evaluate Script:</strong> Synchronously execute the script as though it were a function body. Run until the Call Stack is empty.</li>\n<li><strong>Run a Task:</strong> Select the oldest Task from the Task Queue. Run it until the Call Stack is empty.</li>\n<li><strong>Run all Microtasks:</strong> Select the oldest Microtask from the Microtask Queue. Run it until the Call Stack is empty. Repeat until the Microtask Queue is empty.</li>\n<li><strong>Rerender the UI:</strong> Rerender the UI. Then, return to step 2. (This step only applies to browsers, not NodeJS).</li>\n</ol>\n<p>Let's model the Event Loop with some JavaScript psuedocode:</p>\n<pre><code>while (EventLoop.waitForTask()) {\n  const taskQueue = EventLoop.selectTaskQueue();\n  if (taskQueue.hasNextTask()) {\n    taskQueue.processNextTask();\n  }\n\n  const microtaskQueue = EventLoop.microTaskQueue;\n  while (microtaskQueue.hasNextMicrotask()) {\n    microtaskQueue.processNextMicrotask();\n  }\n\n  rerender();\n}\n</code></pre>"},{"url":"/docs/interact/","relativePath":"docs/interact/index.md","relativeDir":"docs/interact","base":"index.md","name":"index","frontmatter":{"title":"Interactive Examples","weight":1,"excerpt":"feel free to try the examples","seo":{"title":"Interactive Examples","description":"here is content the user can interact with","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<ul>\n<li><a href=\"https://ds-algo-official.netlify.app/\">Data Structures Interactive</a></li>\n</ul>\n<iframe src=\"https://ds-algo-official.netlify.app/\" height=\"900px\" width=\"100%\">\n</iframe>\n<ul>\n<li><a href=\"https://bgoonz-games.netlify.app/\">Games</a></li>\n</ul>\n<iframe src=\"https://bgoonz-games.netlify.app/\" height=\"900px\" width=\"100%\">\n</iframe>"},{"url":"/docs/interact/jupyter-notebooks/","relativePath":"docs/interact/jupyter-notebooks.md","relativeDir":"docs/interact","base":"jupyter-notebooks.md","name":"jupyter-notebooks","frontmatter":{"title":"Jupyter Notebooks","weight":0,"excerpt":"Jupyter Notebooks allow us to combine the power of a python script with the simplicity of a markdown file.","seo":{"title":"Jupyter Notebooks","description":" Jupyter Notebooks allow us to combine the power of a python script with the simplicity of a markdown file","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<ul>\n<li><a href=\"https://mybinder.org/v2/gh/bgoonz/Jupyter-Notebooks/439b0b3a1cae4bf7181996f1057221942c0c449f?filepath=00-Guide-to-Web-Scraping.ipynb\">Open Binder Jupyter Notebook</a></li>\n</ul>\n<iframe src=\"https://mybinder.org/v2/gh/bgoonz/Jupyter-Notebooks/439b0b3a1cae4bf7181996f1057221942c0c449f\" height=\"900px\" width=\"100%\">\n</iframe>"},{"url":"/docs/interact/other-sites/","relativePath":"docs/interact/other-sites.md","relativeDir":"docs/interact","base":"other-sites.md","name":"other-sites","frontmatter":{"title":"Other Websites","weight":1,"seo":{"title":"Typography","description":"This is the typography page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Typography","keyName":"property"},{"name":"og:description","value":"This is the typography page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Typography"},{"name":"twitter:description","value":"This is the typography page"}]},"template":"docs"},"html":"<h1> Here are some other websites I have worked on since endeavoring to learn web development! </h1>\n<br>\n<h1>  Alternate Blog</h1>\n<br>\n<iframe  class=\"block-content\" src=\"  https://bgoonz-blog-v3-0.netlify.app/  \" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<h1>  Games </h1>\n<br>\n<iframe  class=\"block-content\" src=\"  https://bgoonz-games.netlify.app/  \" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<h1>  Projects         </h1>\n<br>\n<iframe src=\" https://project-portfolio42.netlify.app/  \" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<h1>   Wordpress Site </h1>\n<br>\n<iframe class=\"inner\" src=\"  https://web-dev-hub.com/  \" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<h1>  Interview     </h1>\n<br>\n<iframe  src=\"   \" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<h1>   Speach Recognition api </h1>\n<br>\n<iframe  class=\"   \" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<h1>  The Algos Bgoonz Branch </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://bgoonz-branch-the-algos.vercel.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<iframe  class=\"block-content\" src=\"https://thealgorithms.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>"},{"url":"/docs/interact/clock/","relativePath":"docs/interact/clock.md","relativeDir":"docs/interact","base":"clock.md","name":"clock","frontmatter":{"title":"Clock","weight":1,"excerpt":"feel free to try the examples","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<center>\n<h2 style=\" margin-bottom: 2em; align-self:center;\">World Clock(Click To See Localized Time)</h2>\n</center>\n<iframe src=\"https://observablehq.com/embed/1b6399182c98cd36@480?cells=chart%2Cviewof+date\" loading=\"lazy\"\nwidth=\"90%\" height=\"629\" frameborder=\"0\">\n<iframe src=\"https://codepen.io/bgoonz/full/QWgYoBp\" loading=\"lazy\"\nwidth=\"90%\" height=\"629\" frameborder=\"0\">"},{"url":"/docs/medium/","relativePath":"docs/medium/index.md","relativeDir":"docs/medium","base":"index.md","name":"index","frontmatter":{"title":"Medium","excerpt":"We'd love it if you participate in the Web-Dev-Hubcommunity. Find out how to get connected.","seo":{"title":"Medium","description":"introductory-react-part-2\na-very-quick-guide-to-calculating-big-o-computational-complexity\nintroduction-to-react css-animations\n\n","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Medium Articles","keyName":"property"},{"name":"og:description","value":"introductory-react-part-2\na-very-quick-guide-to-calculating-big-o-computational-complexity\nintroduction-to-react css-animations\n\n","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Mediums"},{"name":"twitter:description","value":"This is the community page"},{"name":"og:image","value":"images/beige-maple.png","keyName":"property","relativeUrl":true}]},"template":"docs","weight":2},"html":"<br>\n<h1>  Links: </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://links4242.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n        \n        \n        \n<br>\n        \n<br>\n        \n<br>\n<hr>\n<hr>\n<ul>\n<li><a href=\"https://bryanguner.medium.com/introductory-react-part-2-cda01615a186?source=your_stories_page-------------------------------------\">introductory-react-part-2</a></li>\n<li><a href=\"https://bryanguner.medium.com/a-very-quick-guide-to-calculating-big-o-computational-complexity-eb1557e85fa3?source=your_stories_page-------------------------------------\">a-very-quick-guide-to-calculating-big-o-computational-complexity</a></li>\n<li><a href=\"https://javascript.plainenglish.io/introduction-to-react-for-complete-beginners-8021738aa1ad?source=your_stories_page-------------------------------------\">introduction-to-react-for-complete-beginners</a></li>\n<li><a href=\"https://javascript.plainenglish.io/scheduling-settimeout-and-setinterval-fcb2f40d16f7?source=your_stories_page-------------------------------------\">scheduling-settimeout-and-setinterval</a></li>\n<li><a href=\"https://bryanguner.medium.com/css-animations-d196a20099a5?source=your_stories_page-------------------------------------\">css-animations</a></li>\n<li><a href=\"https://bryanguner.medium.com/these-are-the-bash-shell-commands-that-stand-between-me-and-insanity-984865ba5d1b?source=your_stories_page-------------------------------------\">these-are-the-bash-shell-commands-that-stand-between-me-and-insanity</a></li>\n<li><a href=\"https://bryanguner.medium.com/how-to-implement-native-es6-data-structures-using-arrays-objects-ce953b9f6a07?source=your_stories_page-------------------------------------\">how-to-implement-native-es6-data-structures-using-arrays-objects</a></li>\n<li><a href=\"https://medium.com/codex/objects-in-javascript-cc578a781e1d?source=your_stories_page-------------------------------------\">objects-in-javascript</a></li>\n<li><a href=\"https://javascript.plainenglish.io/absolute-beginners-guide-to-javascript-part-1-e222d166b6e1?source=your_stories_page-------------------------------------\">absolute-beginners-guide-to-javascript-part1</a></li>\n<li><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-4-fd686892b9eb?source=your_stories_page-------------------------------------\">web-developer-resource-list-part-4</a></li>\n<li><a href=\"https://medium.com/codex/vscode-extensions-specifically-for-javascript-development-ea91305cbd4a?source=your_stories_page-------------------------------------\">vscode-extensions-specifically-for-javascript-development</a></li>\n<li><a href=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b?source=your_stories_page-------------------------------------\">a-list-of-all-of-my-articles-to-link-to-future-posts</a></li>\n<li><a href=\"https://javascript.plainenglish.io/lists-stacks-and-queues-in-javascript-88466fae0fbb?source=your_stories_page-------------------------------------\">lists-stacks-and-queues-in-javascript</a></li>\n<li><a href=\"https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a?source=your_stories_page-------------------------------------\">web-development-resources-part-3</a></li>\n<li><a href=\"https://medium.com/codex/web-development-interview-part-3-826ae81a9107?source=your_stories_page-------------------------------------\">web-development-interview-part-3</a></li>\n<li><a href=\"https://bryanguner.medium.com/running-list-of-interesting-articles-tools-and-ideas-as-i-explore-them-b87a2f04d9a6?source=your_stories_page-------------------------------------\">running-list-of-interesting-articles-tools</a></li>\n<li><a href=\"https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24?source=your_stories_page-------------------------------------\">the-best-cloud-based-code-playgrounds-of-2021-part-1</a></li>\n<li><a href=\"https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443?source=your_stories_page-------------------------------------\">front-end-interview-questions-part-2</a></li>\n<li><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263?source=your_stories_page-------------------------------------\">web-developer-resource-list-part-2</a></li>\n<li><a href=\"https://levelup.gitconnected.com/http-basics-8f02a96a834a?source=your_stories_page-------------------------------------\">http-basics</a></li>\n<li><a href=\"https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35?source=your_stories_page-------------------------------------\">javascript-frameworks-libraries</a></li>\n<li><a href=\"https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74?source=your_stories_page-------------------------------------\">my-take-on-awesome-javascript</a></li>\n<li><a href=\"https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931?source=your_stories_page-------------------------------------\">get-started-with-vscode-extensions</a></li>\n<li><a href=\"https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f?source=your_stories_page-------------------------------------\">my-favorite-vscode-themes</a></li>\n<li><a href=\"https://levelup.gitconnected.com/object-oriented-programming-in-javascript-d45007d06333?source=your_stories_page-------------------------------------\">object-oriented-programming-in-javascript</a></li>\n<li><a href=\"https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1?source=your_stories_page-------------------------------------\">javascript-rotate-array-problemwalkthrough</a></li>\n<li><a href=\"https://levelup.gitconnected.com/super-simple-intro-to-html-651d695f9bc?source=your_stories_page-------------------------------------\">super-simple-intro-to-html-651d695f9bc</a></li>\n<li><a href=\"https://medium.com/codex/everything-you-need-to-know-about-relational-databases-sql-postgresql-and-sequelize-to-build-8acb68284a98?source=your_stories_page-------------------------------------\">everything-you-need-to-know-about-relational-databases-sql-postgresql</a></li>\n<li><a href=\"https://levelup.gitconnected.com/understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107?source=your_stories_page-------------------------------------\">understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107</a></li>\n<li><a href=\"https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db?source=your_stories_page-------------------------------------\">complete-javascript-reference-guide-64306cd6b0db</a></li>\n</ul>"},{"url":"/docs/interact/video-chat/","relativePath":"docs/interact/video-chat.md","relativeDir":"docs/interact","base":"video-chat.md","name":"video-chat","frontmatter":{"title":"Zumzi Video Conferencing (Mesibo API Backend)","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"Zumzi Video Conference:","description":"Features:\nGroup Voice and Video Call with unlimited members\nLive Streaming\nScreen Sharing\nSupports video streaming at various resolutions.","robots":[],"extra":[{"name":"og:description","value":"Features:\nGroup Voice and Video Call with unlimited members\nLive Streaming\nScreen Sharing\nSupports video streaming at various resolutions.","keyName":"property","relativeUrl":false},{"name":"og:title","value":"Zumzi Video Conference:","keyName":"property","relativeUrl":false},{"name":"og:image","value":"images/zumzi-video-chat-0aba1c15.png","keyName":"property","relativeUrl":true}],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>Zumzi Video Conference:</h1>\n<iframe class=\"block-content\" width=\"100%  width=\"800\" height=\"575\"\n        src=\"https://zumzi-chat-messenger.vercel.app/web/login.html\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h2>Zumzi Live Demo</h2>\n<p><img src=\"https://zumzi-chat-messenger.vercel.app/web/login.html\" alt=\"demo\"></p>\n<h2>Features:</h2>\n<ul>\n<li>Group Voice and Video Call with unlimited members</li>\n<li>Live Streaming</li>\n<li>Screen Sharing</li>\n<li>Fine control over all video &#x26; audio parameters and user permissions</li>\n<li>Supports video streaming at various resolutions: Standard, HD, FHD and 4K</li>\n<li>Group Chat</li>\n<li>One-to-One chat</li>\n<li>Invite Participants</li>\n</ul>\n<p>There are two sub-folders:</p>\n<ul>\n<li><strong>backend</strong> contains the source code for hosting the backend APIs for the app</li>\n<li><strong>web</strong> contains the source code for the app which you can directly integrate into your website.</li>\n</ul>\n<h2>Apendix</h2>\n<ul>\n<li>\n<p>access token:</p>\n<blockquote>\n<p>An Access Token needs to be generated for every user who needs to access mesibo real-time messaging API. You can generate Access Token for every user of your application on demand and send it to the user. The user will then use this access token to initialize mesibo client-side API..</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>api key</p>\n<blockquote>\n<p>API key is a unique alphanumeric identifier associated with your Mesibo account. You can view, change or regenerate the API key from the Mesibo console.</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>Application Token</p>\n<blockquote>\n<p>is a unique alphanumeric identifier with one of your application. You can view and change the app token from the Mesibo Console.</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>Mesibo container</p>\n<blockquote>\n<p>A container is a runtime instance of mesibo in-premises docker image.</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>MAU</p>\n<blockquote>\n<p>MAU is counted when a user connects to mesibo server within monthly billing period. To further clarify, it will be only counted as one when a unique user connects to mesibo server multiple times within monthly billing period</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>High-availability clusters</p>\n<blockquote>\n<p>(also known as HA clusters or fail-over clusters) are\ngroups of computers that support server applications that can be reliably utilized with a minimum amount of down-time</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>namespace</p>\n<blockquote>\n<p>in mesibo is refer to a mesibo feature that isolates users and groups of an application from another application. Users can only interact with users and groups of the same application that are part of the same namespace. Namespaces are an important part of Mesibo’s isolation model</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>node</p>\n<blockquote>\n<p>A [node]is a physical or virtual machine running an instance of the mesibo.</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>On premises deployment</p>\n<blockquote>\n<p>Mesibo On-premises deploment allows you to run Mesibo in your own data center or cloud.</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>1-1 Communication</p>\n<blockquote>\n<p>Communication is between two parties; for example, a chat or a call</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p>Peer-to-peer\n(P2P)</p>\n<blockquote>\n<p>It is a distributed application architecture that partitions tasks or workloads between peers. Peers are equally privileged, equipotent participants in the application.They are said to form a peer-to-peer network of nodes.</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<p><img src=\"https://github.com/bgoonz/zumzi-chat-messenger/blob/master/zumzi.PNG?raw=true\" alt=\"zzumzi\"></p>\n<p><a href=\".\">.</a><br>\n├── <a href=\"./backend\">./backend</a><br>\n│   ├── <a href=\"./backend/activation.php\">./backend/activation.php</a><br>\n│   ├── <a href=\"./backend/api_functions.php\">./backend/api_functions.php</a><br>\n│   ├── <a href=\"./backend/api.php\">./backend/api.php</a><br>\n│   ├── <a href=\"./backend/captcha.php\">./backend/captcha.php</a><br>\n│   ├── <a href=\"./backend/config.php\">./backend/config.php</a><br>\n│   ├── <a href=\"./backend/consts.php\">./backend/consts.php</a><br>\n│   ├── <a href=\"./backend/db.sql\">./backend/db.sql</a><br>\n│   ├── <a href=\"./backend/errorhandler.php\">./backend/errorhandler.php</a><br>\n│   ├── <a href=\"./backend/httpheaders.php\">./backend/httpheaders.php</a><br>\n│   ├── <a href=\"./backend/image.php\">./backend/image.php</a><br>\n│   ├── <a href=\"./backend/json.php\">./backend/json.php</a><br>\n│   ├── <a href=\"./backend/mesiboapi.php\">./backend/mesiboapi.php</a><br>\n│   ├── <a href=\"./backend/mesibohelper.php\">./backend/mesibohelper.php</a><br>\n│   ├── <a href=\"./backend/mysqldb.php\">./backend/mysqldb.php</a><br>\n│   ├── <a href=\"./backend/mysql-wrapper.php\">./backend/mysql-wrapper.php</a><br>\n│   ├── <a href=\"./backend/README.md\">./backend/README.md</a><br>\n│   ├── <a href=\"./backend/upload.php\">./backend/upload.php</a><br>\n│   └── <a href=\"./backend/utility.php\">./backend/utility.php</a><br>\n├── <a href=\"./glossary_files\">./glossary_files</a><br>\n│   ├── <a href=\"./glossary_files/559862854355634.js\">./glossary_files/559862854355634.js</a><br>\n│   ├── <a href=\"./glossary_files/analytics.js\">./glossary_files/analytics.js</a><br>\n│   ├── <a href=\"./glossary_files/archive.js\">./glossary_files/archive.js</a><br>\n│   ├── <a href=\"./glossary_files/bootstrap.min.css\">./glossary_files/bootstrap.min.css</a><br>\n│   ├── <a href=\"./glossary_files/bootstrap.min.js\">./glossary_files/bootstrap.min.js</a><br>\n│   ├── <a href=\"./glossary_files/buttons.js\">./glossary_files/buttons.js</a><br>\n│   ├── <a href=\"./glossary_files/collections_tocs.js\">./glossary<em>files/collections</em>tocs.js</a><br>\n│   ├── <a href=\"./glossary_files/css.css\">./glossary_files/css.css</a><br>\n│   ├── <a href=\"./glossary_files/docs.js\">./glossary_files/docs.js</a><br>\n│   ├── <a href=\"./glossary_files/fbevents.js\">./glossary_files/fbevents.js</a><br>\n│   ├── <a href=\"./glossary_files/font-awesome.min.css\">./glossary_files/font-awesome.min.css</a><br>\n│   ├── <a href=\"./glossary_files/github.css\">./glossary_files/github.css</a><br>\n│   ├── <a href=\"./glossary_files/glossary.js\">./glossary_files/glossary.js</a><br>\n│   ├── <a href=\"./glossary_files/jquery.js\">./glossary_files/jquery.js</a><br>\n│   ├── <a href=\"./glossary_files/menu.js\">./glossary_files/menu.js</a><br>\n│   ├── <a href=\"./glossary_files/mesibo-logo.svg\">./glossary_files/mesibo-logo.svg</a><br>\n│   ├── <a href=\"./glossary_files/mesibo-logo-white.png\">./glossary_files/mesibo-logo-white.png</a><br>\n│   ├── <a href=\"./glossary_files/metadata.js\">./glossary_files/metadata.js</a><br>\n│   ├── <a href=\"./glossary_files/perldoc.css\">./glossary_files/perldoc.css</a><br>\n│   ├── <a href=\"./glossary_files/stickyfill.min.js\">./glossary_files/stickyfill.min.js</a><br>\n│   ├── <a href=\"./glossary_files/style.css\">./glossary_files/style.css</a><br>\n│   └── <a href=\"./glossary_files/toc.js\">./glossary_files/toc.js</a><br>\n├── <a href=\"./glossary.html\">./glossary.html</a><br>\n├── <a href=\"./index.html\">./index.html</a><br>\n├── <a href=\"./package-lock.json\">./package-lock.json</a><br>\n├── <a href=\"./README.md\">./README.md</a><br>\n├── <a href=\"./scrap.md\">./scrap.md</a><br>\n├── <a href=\"./tree.md\">./tree.md</a><br>\n├── <a href=\"./TREE.md\">./TREE.md</a><br>\n├── <a href=\"./web\">./web</a><br>\n│   ├── <a href=\"./web/assets\">./web/assets</a><br>\n│   │   ├── <a href=\"./web/assets/audio\">./web/assets/audio</a><br>\n│   │   │   ├── <a href=\"./web/assets/audio/join.mp3\">./web/assets/audio/join.mp3</a><br>\n│   │   │   └── <a href=\"./web/assets/audio/join.ogg\">./web/assets/audio/join.ogg</a><br>\n│   │   ├── <a href=\"./web/assets/fonts\">./web/assets/fonts</a><br>\n│   │   │   └── <a href=\"./web/assets/fonts/font-awesome\">./web/assets/fonts/font-awesome</a><br>\n│   │   │   └── <a href=\"./web/assets/fonts/font-awesome/css\">./web/assets/fonts/font-awesome/css</a><br>\n│   │   │   └── <a href=\"./web/assets/fonts/font-awesome/css/font-awesome.css\">./web/assets/fonts/font-awesome/css/font-awesome.css</a><br>\n│   │   ├── <a href=\"./web/assets/images\">./web/assets/images</a><br>\n│   │   │   ├── <a href=\"./web/assets/images/blank-white.jpg\">./web/assets/images/blank-white.jpg</a><br>\n│   │   │   ├── <a href=\"./web/assets/images/file\">./web/assets/images/file</a><br>\n│   │   │   │   └── <a href=\"./web/assets/images/file/default_file_icon.jpg\">./web/assets/images/file/default<em>file</em>icon.jpg</a><br>\n│   │   │   ├── <a href=\"./web/assets/images/mesibo-logo-m.png\">./web/assets/images/mesibo-logo-m.png</a><br>\n│   │   │   ├── <a href=\"./web/assets/images/mesibo-logo.png\">./web/assets/images/mesibo-logo.png</a><br>\n│   │   │   ├── <a href=\"./web/assets/images/profile\">./web/assets/images/profile</a><br>\n│   │   │   │   ├── <a href=\"./web/assets/images/profile/default-group-icon.jpg\">./web/assets/images/profile/default-group-icon.jpg</a><br>\n│   │   │   │   └── <a href=\"./web/assets/images/profile/default-profile-icon.jpg\">./web/assets/images/profile/default-profile-icon.jpg</a><br>\n│   │   │   └── <a href=\"./web/assets/images/social.png\">./web/assets/images/social.png</a><br>\n│   │   └── <a href=\"./web/assets/scripts\">./web/assets/scripts</a><br>\n│   │   └── <a href=\"./web/assets/scripts/platform.js\">./web/assets/scripts/platform.js</a><br>\n│   ├── <a href=\"./web/index.html\">./web/index.html</a><br>\n│   ├── <a href=\"./web/listing.md\">./web/listing.md</a><br>\n│   ├── <a href=\"./web/login.html\">./web/login.html</a><br>\n│   ├── <a href=\"./web/mesibo\">./web/mesibo</a><br>\n│   │   ├── <a href=\"./web/mesibo/app.js\">./web/mesibo/app.js</a><br>\n│   │   ├── <a href=\"./web/mesibo/calls.js\">./web/mesibo/calls.js</a><br>\n│   │   ├── <a href=\"./web/mesibo/config.js\">./web/mesibo/config.js</a><br>\n│   │   ├── <a href=\"./web/mesibo/files.js\">./web/mesibo/files.js</a><br>\n│   │   ├── <a href=\"./web/mesibo/notify.js\">./web/mesibo/notify.js</a><br>\n│   │   └── <a href=\"./web/mesibo/utils.js\">./web/mesibo/utils.js</a><br>\n│   ├── <a href=\"./web/README.md\">./web/README.md</a><br>\n│   ├── <a href=\"./web/scripts\">./web/scripts</a><br>\n│   │   ├── <a href=\"./web/scripts/app-utils.js\">./web/scripts/app-utils.js</a><br>\n│   │   ├── <a href=\"./web/scripts/controller.js\">./web/scripts/controller.js</a><br>\n│   │   └── <a href=\"./web/scripts/login.js\">./web/scripts/login.js</a><br>\n│   ├── <a href=\"./web/styles\">./web/styles</a><br>\n│   │   ├── <a href=\"./web/styles/live.css\">./web/styles/live.css</a><br>\n│   │   ├── <a href=\"./web/styles/mesibolive.css\">./web/styles/mesibolive.css</a><br>\n│   │   ├── <a href=\"./web/styles/popup.css\">./web/styles/popup.css</a><br>\n│   │   └── <a href=\"./web/styles/popupdesign.css\">./web/styles/popupdesign.css</a><br>\n│   └── <a href=\"./web/vendor\">./web/vendor</a><br>\n│   ├── <a href=\"./web/vendor/bootstrap.min.css\">./web/vendor/bootstrap.min.css</a><br>\n│   └── <a href=\"./web/vendor/bootstrap.min.js\">./web/vendor/bootstrap.min.js</a><br>\n└── <a href=\"./zumzi-video-chat.PNG\">./zumzi-video-chat.PNG</a><br></p>\n<h2>Messenger</h2>\n<p>Edit <code>config.js</code> and provide the <code>AUTH TOKEN</code> &#x26; <code>APP ID</code>.</p>\n<p>You can obtain the <code>AUTH TOKEN</code> and <code>APP ID</code> for a user from <a href=\"https://mesibo.com/console/\">Mesibo Console</a>.</p>\n<p>Refer to the <a href=\"https://mesibo.com/documentation/tutorials/get-started\">Get-Started Guide</a> to learn about the basics of mesibo.</p>\n<p>To open messenger demo launch <code>messenger.html</code></p>\n<pre><code class=\"language-javascript\">const MESIBO_ACCESS_TOKEN = 'xxxxxxx';\nconst MESIBO_APP_ID = 'xxxx';\nconst MESIBO_API_URL = 'https://app.mesibo.com/api.php';\n</code></pre>\n<p>If you are hosting mesibo-backend on your own server, you need to change the API URL to point to your server.</p>\n<h3>Messenger Login</h3>\n<p>You can synchronize contacts, by using a phone number to login to mesibo messenger-javascript.</p>\n<p>To login to the mesibo messenger web app, in the login screen provide the phone number along with country code starting with <code>+</code> For Example, If your country code is <code>91</code> and your ten-digit phone number is <code>XXXXXXXXXX</code>, enter your phone number as <code>+91XXXXXXXXXX</code> (with out any spaces or special characters in between)</p>\n<p>Use OTP 123456 to login. Mesibo will generate and store <code>MESIBO_ACCESS_TOKEN</code> if login is successful.</p>\n<p>Please note that you only need to login once as for later sessions your token will be stored in local storage.</p>\n<p>If you DO NOT wish to login with your phone number, make sure you configure a valid <code>MESIBO_ACCESS_TOKEN</code> in <code>config.js</code> and set <code>isLoginEnabled = false</code></p>\n<h3>Synchronizing contacts on Messenger</h3>\n<p>To synchronize contacts set <code>isContactSync = true</code></p>\n<p>For the best experience using the messenger app, make sure you have some contacts who are using Mesibo Messenger. These contacts will be displayed as a list of available users to whom you can send messages or make calls. Optionally, you can also manually provide a list of phone numbers of contacts who are using mesibo in <code>MESIBO_LOCAL_CONTACTS</code> or by clicking on the <code>Add Contact</code> button.</p>\n<p>You can provide a list of local contacts that will be loaded as a list of available users. Set local contacts as follows in <code>config.js</code></p>\n<pre><code>var MESIBO_LOCAL_CONTACTS =[\n\n{\n        \"address\" : \"18885551001\",\n        \"groupid\" : 0,\n        \"picture\" : \"images/profile/default-profile-icon.jpg\",\n        \"name\"    : \"MesiboTest\",\n        \"status\": \"Let's Chat..\"\n},\n\n{\n        \"groupid\" : 104661,\n        \"picture\" : \"images/profile/default-group-icon.jpg\",\n        \"name\"    : \"Mesibo Group\",\n        \"members\" : \"1:123,456,789\"             //Members list. Add 1: to mark as admin\n},\n\n]\n</code></pre>\n<h2>Popup</h2>\n<p>To launch popup demo you can configure the following for setting the displayed user avatar and destination user(to which all messages will be sent) in <code>config.js</code> and launch <code>popup.html</code></p>\n<pre><code class=\"language-javascript\">const POPUP_DISPLAY_NAME = 'xxxx';\nconst POPUP_DISPLAY_PICTURE = 'images/profile/default-profile-icon.jpg';\nconst POPUP_DESTINATION_USER = 'xxxx';\n</code></pre>\n<h2>FAQ &#x26; Troubleshooting</h2>\n<h3>Getting <code>AUTHFAIL</code> with getcontacts API</h3>\n<p>This means the token you have provided in <code>MESIBO_ACCESS_TOKEN</code> is not generated or validated with your phone number which is required for synchronizing contacts.</p>\n<p>To generate a token by validating your phone number, make sure you have set <code>isLoginEnabled = true</code>. A login screen will then appear during app start, where you can enter your phone number(Example +91XXXXXXXXXX), get an OTP, and log in.</p>\n<p>If you do not wish to synchronize contacts, set <code>isContactSync = false</code> and provide a list of local contacts in <code>MESIBO_LOCAL_CONTACTS</code>.</p>\n<h3>I do not wish to use phone login, what should I do?</h3>\n<p>Set <code>isLoginEnabled = false</code> and make sure that you provide a valid <code>MESIBO_ACCESS_TOKEN</code></p>\n<h3>I do not want to synchronize with my phone contacts, how do I configure that?</h3>\n<p>If you do not wish to synchronize contacts, set <code>isContactSync = false</code> and provide a list of local contacts in <code>MESIBO_LOCAL_CONTACTS</code>.</p>\n<h3>Do I need to log in with my phone number every time I load the app?</h3>\n<p>No the first time you log in with your phone number with a valid OTP the token will be stored in localStorage. In future loading of the app, the token will be loaded from local storage. Or if you have provided a valid <code>MESIBO_ACCESS_TOKEN</code> in <code>config.js</code> that will be loaded.</p>\n<h3>Getting $scope.mesibo.X is not a function</h3>\n<p>Ensure that you perform a hard reload so that you have the latest Mesibo Javascript API</p>\n<h2>Install Mesibo Javascript SDK</h2>\n<p>The easiest way to install Mesibo Javascript SDK is to include following in <code>&#x3C;HEAD></code> section of your HTML file:</p>\n<pre><code>&#x3C;script type=\"text/javascript\" src=\"https://api.mesibo.com/mesibo.js\">&#x3C;/script>\n</code></pre>\n<p>You can also use <code>async</code> and <code>defer</code> attributes inside <code>script</code> tag if requires.</p>\n<p>Alternatively, you may also use DOM method to load the mesibo JS on demand when it is not possible to use the script tag.</p>\n<pre><code>const script = document.createElement(\"script\");\nscript.src = \"https://api.mesibo.com/mesibo.js\";\ndocument.body.appendChild(script);\n</code></pre>\n<blockquote>\n<p>You must use a secure website (https) to use mesibo javascript. It may NOT work from <code>http://</code> or <code>file://</code> sites due to browser security restrictions.</p>\n</blockquote>\n<h2>Notes when using it for Calls and Conferencing</h2>\n<p>Due to the browser security model, camera and microphone access require the following:</p>\n<ul>\n<li>You MUST use a secure URL (<code>https://</code>). The <code>http://</code> or <code>file://</code> URLs will NOT work.</li>\n<li>You MUST also use a valid certificate with recognized authority, the self-signed certificate will NOT work.</li>\n</ul>\n<p>The browser will not grant the camera and microphone permissions unless your app meets the above requirements. If permissions are not granted, calls and conferencing will not work.</p>\n<p>These restrictions are by the browsers and NOT by the mesibo. Refer Security section in the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#security\">Mozilla documentation</a> for more information.</p>\n<h3>That’s All!</h3>\n<p>You can now begin developing features with mesibo.</p>\n<p><a href=\"https://mesibo.com/documentation/glossary/?term=javascript%20chat%20sdk\">javascript chat sdk</a>, <a href=\"https://mesibo.com/documentation/glossary/?term=messaging%20sdk%20for%20javascript\">messaging sdk for javascript</a>, <a href=\"https://mesibo.com/documentation/glossary/?term=javascript%20sdk%20for%20chat\">javascript sdk for chat</a>, <a href=\"https://mesibo.com/documentation/glossary/?term=install%20sdk%20through%20javascript\">install sdk through javascript</a></p>"},{"url":"/docs/javascript/review/","relativePath":"docs/javascript/review.md","relativeDir":"docs/javascript","base":"review.md","name":"review","frontmatter":{"title":"Javascript Concepts Review","weight":0,"excerpt":"Javascript Concepts Review","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h2>Core Concept Review</h2>\n<h1>Core Concepts</h1>\n<h1>index</h1>\n<p>This appendix is a non-exhaustive list of new syntactic features and methods that were added to JavaScript in ES6. These features are the most commonly used and most helpful.</p>\n<p>While this appendix doesn't cover ES6 classes, we go over the basics while learning about components in the book. In addition, this appendix doesn't include descriptions of some larger new features like promises and generators. If you'd like more info on those or on any topic below, we encourage you to reference the <a href=\"https://developer.mozilla.org/\">Mozilla Developer Network's website</a> (MDN).</p>\n<h2>Prefer <code>const</code> and <code>let</code> over <code>var</code></h2>\n<p>If you've worked with ES5 JavaScript before, you're likely used to seeing variables declared with <code>var</code>:</p>\n<pre><code class=\"language-js\">ar myVariable = 5;\n</code></pre>\n<p>Both the <code>const</code> and <code>let</code> statements also declare variables. They were introduced in ES6.</p>\n<p>Use <code>const</code> in cases where a variable is never re-assigned. Using <code>const</code> makes this clear to whoever is reading your code. It refers to the \"constant\" state of the variable in the context it is defined within.</p>\n<p>If the variable will be re-assigned, use <code>let</code>.</p>\n<p>We encourage the use of <code>const</code> and <code>let</code> instead of <code>var</code>. In addition to the restriction introduced by <code>const</code>, both <code>const</code> and <code>let</code> are <em>block scoped</em> as opposed to <em>function scoped</em>. This scoping can help avoid unexpected bugs.</p>\n<h2>Arrow functions</h2>\n<p>There are three ways to write arrow function bodies. For the examples below, let's say we have an array of city objects:</p>\n<pre><code class=\"language-js\">onst cities = [\n  { name: 'Cairo', pop: 7764700 },\n  { name: 'Lagos', pop: 8029200 },\n];\n</code></pre>\n<p>If we write an arrow function that spans multiple lines, we must use braces to delimit the function body like this:</p>\n<pre><code class=\"language-js\">const formattedPopulations = cities.map((city) => {\n    const popMM = (city.pop / 1000000).toFixed(2);\n    return popMM + ' million';\n});\nconsole.log(formattedPopulations);\n</code></pre>\n<p>Note that we must also explicitly specify a <code>return</code> for the function.</p>\n<p>However, if we write a function body that is only a single line (or single expression) we can use parentheses to delimit it:</p>\n<pre><code class=\"language-js\">const formattedPopulations2 = cities.map((city) => (city.pop / 1000000).toFixed(2) + ' million');\n</code></pre>\n<p>Notably, we don't use <code>return</code> as it's implied.</p>\n<p>Furthermore, if your function body is terse you can write it like so:</p>\n<pre><code class=\"language-js\">const pops = cities.map((city) => city.pop);\nconsole.log(pops);\n</code></pre>\n<p>The terseness of arrow functions is one of two reasons that we use them. Compare the one-liner above to this:</p>\n<pre><code class=\"language-js\">const popsNoArrow = cities.map(function (city) {\n    return city.pop;\n});\n</code></pre>\n<p>Of greater benefit, though, is how arrow functions bind the <code>this</code> object.</p>\n<p>The traditional JavaScript function declaration syntax (<code>function () {}</code>) will bind <code>this</code> in anonymous functions to the global object. To illustrate the confusion this causes, consider the following example:</p>\n<pre><code class=\"language-js\">unction printSong() {\n  console.log(\"Oops - The Global Object\");\n}\n\nconst jukebox = {\n  songs: [\n    {\n      title: \"Wanna Be Startin' Somethin'\",\n      artist: \"Michael Jackson\",\n    },\n    {\n      title: \"Superstar\",\n      artist: \"Madonna\",\n    },\n  ],\n  printSong: function (song) {\n    console.log(song.title + \" - \" + song.artist);\n  },\n  printSongs: function () {\n\n    this.songs.forEach(function(song) {\n\n      this.printSong(song);\n    });\n  },\n}\n\njukebox.printSongs();\n</code></pre>\n<p>The method <code>printSongs()</code> iterates over <code>this.songs</code> with <code>forEach()</code>. In this context, <code>this</code> is bound to the object (<code>jukebox</code>) as expected. However, the anonymous function passed to <code>forEach()</code> binds its internal <code>this</code> to the global object. As such, <code>this.printSong(song)</code> calls the function declared at the top of the example, <em>not</em> the method on <code>jukebox</code>.</p>\n<p>JavaScript developers have traditionally used workarounds for this behavior, but arrow functions solve the problem by <strong>capturing the <code>this</code> value of the enclosing context</strong>. Using an arrow function for <code>printSongs()</code> has the expected result:</p>\n<pre><code class=\"language-js\">  printSongs: function () {\n    this.songs.forEach((song) => {\n\n      this.printSong(song);\n    });\n  },\n}\n\njukebox.printSongs();\n</code></pre>\n<p>For this reason, throughout the book we use arrow functions for all anonymous functions.</p>\n<h2>Modules</h2>\n<p>ES6 formally supports modules using the <code>import</code>/<code>export</code> syntax.</p>\n<p><strong>Named exports</strong></p>\n<p>Inside any file, you can use <code>export</code> to specify a variable the module should expose. Here's an example of a file that exports two functions:</p>\n<pre><code class=\"language-js\">export const sayHi = () => console.log('Hi!');\nexport const sayBye = () => console.log('Bye!');\n\nconst saySomething = () => console.log('Something!');\n</code></pre>\n<p>Now, anywhere we wanted to use these functions we could use <code>import</code>. We need to specify which functions we want to import. A common way of doing this is using ES6's destructuring assignment syntax to list them out like this:</p>\n<pre><code class=\"language-js\">import { sayHi, sayBye } from './greetings';\n\nsayHi();\nsayBye();\n</code></pre>\n<p>Importantly, the function that was <em>not</em> exported (<code>saySomething</code>) is unavailable outside of the module.</p>\n<p>Also note that we supply a <strong>relative path</strong> to <code>from</code>, indicating that the ES6 module is a local file as opposed to an npm package.</p>\n<p>Instead of inserting an <code>export</code> before each variable you'd like to export, you can use this syntax to list off all the exposed variables in one area:</p>\n<pre><code class=\"language-js\">const sayHi = () => console.log('Hi!');\nconst sayBye = () => console.log('Bye!');\n\nconst saySomething = () => console.log('Something!');\n\nexport { sayHi, sayBye };\n</code></pre>\n<p>We can also specify that we'd like to import all of a module's functionality underneath a given namespace with the <code>import * as &#x3C;Namespace></code> syntax:</p>\n<pre><code class=\"language-js\">import * as Greetings from './greetings';\n\nGreetings.sayHi();\n\nGreetings.sayBye();\n\nGreetings.saySomething();\n</code></pre>\n<p><strong>Default export</strong></p>\n<p>The other type of export is a default export. A module can only contain one default export:</p>\n<pre><code class=\"language-js\">const sayHi = () => console.log('Hi!');\nconst sayBye = () => console.log('Bye!');\n\nconst saySomething = () => console.log('Something!');\n\nconst Greetings = { sayHi, sayBye };\n\nexport default Greetings;\n</code></pre>\n<p>This is a common pattern for libraries. It means you can easily import the library wholesale without specifying what individual functions you want:</p>\n<pre><code class=\"language-js\">import Greetings from './greetings';\n\nGreetings.sayHi();\nGreetings.sayBye();\n</code></pre>\n<p>It's not uncommon for a module to use a mix of both named exports and default exports. For instance, with <code>react-dom</code>, you can import <code>ReactDOM</code> (a default export) like this:</p>\n<pre><code class=\"language-js\">import ReactDOM from 'react-dom';\n\nReactDOM.render();\n</code></pre>\n<p>Or, if you're only going to use the <code>render()</code> function, you can import the named <code>render()</code> function like this:</p>\n<pre><code class=\"language-js\">import { render } from 'react-dom';\n\nrender();\n</code></pre>\n<p>To achieve this flexibility, the export implementation for <code>react-dom</code> looks something like this:</p>\n<pre><code class=\"language-js\">export const render = (component, target) => {};\n\nconst ReactDOM = {\n    render\n};\n\nexport default ReactDOM;\n</code></pre>\n<p>If you want to play around with the module syntax, check out the folder <code>code/webpack/es6-modules</code>.</p>\n<p>For more reading on ES6 modules, see this article from Mozilla: \"<a href=\"https://hacks.mozilla.org/2015/08/es6-in-depth-modules/\">ES6 in Depth: Modules</a>\".</p>\n<h2><code>Object.assign()</code></h2>\n<p>We use <code>Object.assign()</code> often throughout the book. We use it in areas where we want to create a modified version of an existing object.</p>\n<p><code>Object.assign()</code> accepts any number of objects as arguments. When the function receives two arguments, it <em>copies</em> the properties of the second object onto the first, like so:</p>\n<pre><code class=\"language-js\">onst coffee = { };\nconst noCream = { cream: false };\nconst noMilk = { milk: false };\nObject.assign(coffee, noCream);\n</code></pre>\n<p>It is idiomatic to pass in three arguments to <code>Object.assign()</code>. The first argument is a new JavaScript object, the one that <code>Object.assign()</code> will ultimately return. The second is the object whose properties we'd like to build off of. The last is the changes we'd like to apply:</p>\n<pre><code class=\"language-js\">const coffeeWithMilk = Object.assign({}, coffee, { milk: true });\n</code></pre>\n<p><code>Object.assign()</code> is a handy method for working with \"immutable\" JavaScript objects.</p>\n<h2>Template literals</h2>\n<p>In ES5 JavaScript, you'd interpolate variables into strings like this:</p>\n<pre><code class=\"language-js\">var greeting = 'Hello, ' + user + '! It is ' + degF + ' degrees outside.';\n</code></pre>\n<p>With ES6 template literals, we can create the same string like this:</p>\n<pre><code class=\"language-js\">const greeting = `Hello, ${user}! It is ${degF} degrees outside.`;\n</code></pre>\n<h2>The spread operator (<code>...</code>)</h2>\n<p>In arrays, the ellipsis <code>...</code> operator will <em>expand</em> the array that follows into the parent array. The spread operator enables us to succinctly construct new arrays as a composite of existing arrays.</p>\n<p>Here is an example:</p>\n<pre><code class=\"language-js\">onst a = [ 1, 2, 3 ];\nconst b = [ 4, 5, 6 ];\nconst c = [ ...a, ...b, 7, 8, 9 ];\n\nconsole.log(c);\n</code></pre>\n<p>Notice how this is different than if we wrote:</p>\n<pre><code class=\"language-js\">const d = [a, b, 7, 8, 9];\nconsole.log(d);\n</code></pre>\n<h2>Enhanced object literals</h2>\n<p>In ES5, all objects were required to have explicit key and value declarations:</p>\n<pre><code class=\"language-js\">const explicit = {\n    getState: getState,\n    dispatch: dispatch\n};\n</code></pre>\n<p>In ES6, you can use this terser syntax whenever the property name and variable name are the same:</p>\n<pre><code class=\"language-js\">const implicit = {\n    getState,\n    dispatch\n};\n</code></pre>\n<p>Lots of open source libraries use this syntax, so it's good to be familiar with it. But whether you use it in your own code is a matter of stylistic preference.</p>\n<h2>Default arguments</h2>\n<p>With ES6, you can specify a default value for an argument in the case that it is <code>undefined</code> when the function is called.</p>\n<p>This:</p>\n<pre><code class=\"language-js\">unction divide(a, b) {\n\n  const divisor = typeof b === 'undefined' ? 1 : b;\n\n  return a / divisor;\n}\n</code></pre>\n<p>Can be written as this:</p>\n<pre><code class=\"language-js\">function divide(a, b = 1) {\n    return a / b;\n}\n</code></pre>\n<p>In both cases, using the function looks like this:</p>\n<pre><code class=\"language-js\">divide(14, 2);\n\ndivide(14, undefined);\n\ndivide(14);\n</code></pre>\n<p>Whenever the argument <code>b</code> in the example above is <code>undefined</code>, the default argument is used. Note that <code>null</code> will not use the default argument:</p>\n<pre><code class=\"language-js\">divide(14, null);\n</code></pre>\n<h2>Destructuring assignments</h2>\n<h3>For arrays</h3>\n<p>In ES5, extracting and assigning multiple elements from an array looked like this:</p>\n<pre><code class=\"language-js\">ar fruits = [ 'apples', 'bananas', 'oranges' ];\nvar fruit1 = fruits[0];\nvar fruit2 = fruits[1];\n</code></pre>\n<p>In ES6, we can use the destructuring syntax to accomplish the same task like this:</p>\n<pre><code class=\"language-js\">const [veg1, veg2] = ['asparagus', 'broccoli', 'onion'];\nconsole.log(veg1);\nconsole.log(veg2);\n</code></pre>\n<p>The variables in the array on the left are \"matched\" and assigned to the corresponding elements in the array on the right. Note that <code>'onion'</code> is ignored and has no variable bound to it.</p>\n<h3>For objects</h3>\n<p>We can do something similar for extracting object properties into variables:</p>\n<pre><code class=\"language-js\">const smoothie = {\n    fats: ['avocado', 'peanut butter', 'greek yogurt'],\n    liquids: ['almond milk'],\n    greens: ['spinach'],\n    fruits: ['blueberry', 'banana']\n};\n\nconst { liquids, fruits } = smoothie;\n\nconsole.log(liquids);\nconsole.log(fruits);\n</code></pre>\n<h3>Parameter context matching</h3>\n<p>We can use these same principles to bind arguments inside a function to properties of an object supplied as an argument:</p>\n<pre><code class=\"language-js\">const containsSpinach = ({ greens }) => {\n    if (greens.find((g) => g === 'spinach')) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\ncontainsSpinach(smoothie);\n</code></pre>\n<p>We do this often with functional React components:</p>\n<pre><code class=\"language-js\">const IngredientList = ({ ingredients, onClick }) => (\n    &#x3C;ul className=\"IngredientList\">\n        {ingredients.map((i) => (\n            &#x3C;li key={i.id} onClick={() => onClick(i.id)} className=\"item\">\n                {i.name}\n            &#x3C;/li>\n        ))}\n    &#x3C;/ul>\n);\n</code></pre>\n<p>Here, we use destructuring to extract the props into variables (<code>ingredients</code> and <code>onClick</code>) that we then use inside the component's function body.</p>\n<p>Share To Linkedin:</p>"},{"url":"/docs/medium/medium-links/","relativePath":"docs/medium/medium-links.md","relativeDir":"docs/medium","base":"medium-links.md","name":"medium-links","frontmatter":{"title":"Medium","excerpt":"We'd love it if you participate in the Web-Dev-Hubcommunity. Find out how to get connected.","seo":{"title":"Medium","description":"This is the community page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Mediums","keyName":"property"},{"name":"og:description","value":"This is the community page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Mediums"},{"name":"twitter:description","value":"This is the community page"}]},"template":"docs"},"html":"<ul>\n<li><a href=\"https://bryanguner.medium.com/introductory-react-part-2-cda01615a186?source=your_stories_page-------------------------------------\">introductory-react-part-2</a></li>\n<li><a href=\"https://bryanguner.medium.com/a-very-quick-guide-to-calculating-big-o-computational-complexity-eb1557e85fa3?source=your_stories_page-------------------------------------\">a-very-quick-guide-to-calculating-big-o-computational-complexity</a></li>\n<li><a href=\"https://javascript.plainenglish.io/introduction-to-react-for-complete-beginners-8021738aa1ad?source=your_stories_page-------------------------------------\">introduction-to-react-for-complete-beginners</a></li>\n<li><a href=\"https://javascript.plainenglish.io/scheduling-settimeout-and-setinterval-fcb2f40d16f7?source=your_stories_page-------------------------------------\">scheduling-settimeout-and-setinterval</a></li>\n<li><a href=\"https://bryanguner.medium.com/css-animations-d196a20099a5?source=your_stories_page-------------------------------------\">css-animations</a></li>\n<li><a href=\"https://bryanguner.medium.com/these-are-the-bash-shell-commands-that-stand-between-me-and-insanity-984865ba5d1b?source=your_stories_page-------------------------------------\">these-are-the-bash-shell-commands-that-stand-between-me-and-insanity</a></li>\n<li><a href=\"https://bryanguner.medium.com/how-to-implement-native-es6-data-structures-using-arrays-objects-ce953b9f6a07?source=your_stories_page-------------------------------------\">how-to-implement-native-es6-data-structures-using-arrays-objects</a></li>\n<li><a href=\"https://medium.com/codex/objects-in-javascript-cc578a781e1d?source=your_stories_page-------------------------------------\">objects-in-javascript</a></li>\n<li><a href=\"https://javascript.plainenglish.io/absolute-beginners-guide-to-javascript-part-1-e222d166b6e1?source=your_stories_page-------------------------------------\">absolute-beginners-guide-to-javascript-part1</a></li>\n<li><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-4-fd686892b9eb?source=your_stories_page-------------------------------------\">web-developer-resource-list-part-4</a></li>\n<li><a href=\"https://medium.com/codex/vscode-extensions-specifically-for-javascript-development-ea91305cbd4a?source=your_stories_page-------------------------------------\">vscode-extensions-specifically-for-javascript-development</a></li>\n<li><a href=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b?source=your_stories_page-------------------------------------\">a-list-of-all-of-my-articles-to-link-to-future-posts</a></li>\n<li><a href=\"https://javascript.plainenglish.io/lists-stacks-and-queues-in-javascript-88466fae0fbb?source=your_stories_page-------------------------------------\">lists-stacks-and-queues-in-javascript</a></li>\n<li><a href=\"https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a?source=your_stories_page-------------------------------------\">web-development-resources-part-3</a></li>\n<li><a href=\"https://medium.com/codex/web-development-interview-part-3-826ae81a9107?source=your_stories_page-------------------------------------\">web-development-interview-part-3</a></li>\n<li><a href=\"https://bryanguner.medium.com/running-list-of-interesting-articles-tools-and-ideas-as-i-explore-them-b87a2f04d9a6?source=your_stories_page-------------------------------------\">running-list-of-interesting-articles-tools</a></li>\n<li><a href=\"https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24?source=your_stories_page-------------------------------------\">the-best-cloud-based-code-playgrounds-of-2021-part-1</a></li>\n<li><a href=\"https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443?source=your_stories_page-------------------------------------\">front-end-interview-questions-part-2</a></li>\n<li><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263?source=your_stories_page-------------------------------------\">web-developer-resource-list-part-2</a></li>\n<li><a href=\"https://levelup.gitconnected.com/http-basics-8f02a96a834a?source=your_stories_page-------------------------------------\">http-basics</a></li>\n<li><a href=\"https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35?source=your_stories_page-------------------------------------\">javascript-frameworks-libraries</a></li>\n<li><a href=\"https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74?source=your_stories_page-------------------------------------\">my-take-on-awesome-javascript</a></li>\n<li><a href=\"https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931?source=your_stories_page-------------------------------------\">get-started-with-vscode-extensions</a></li>\n<li><a href=\"https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f?source=your_stories_page-------------------------------------\">my-favorite-vscode-themes</a></li>\n<li><a href=\"https://levelup.gitconnected.com/object-oriented-programming-in-javascript-d45007d06333?source=your_stories_page-------------------------------------\">object-oriented-programming-in-javascript</a></li>\n<li><a href=\"https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1?source=your_stories_page-------------------------------------\">javascript-rotate-array-problemwalkthrough</a></li>\n<li><a href=\"https://levelup.gitconnected.com/super-simple-intro-to-html-651d695f9bc?source=your_stories_page-------------------------------------\">super-simple-intro-to-html-651d695f9bc</a></li>\n<li><a href=\"https://medium.com/codex/everything-you-need-to-know-about-relational-databases-sql-postgresql-and-sequelize-to-build-8acb68284a98?source=your_stories_page-------------------------------------\">everything-you-need-to-know-about-relational-databases-sql-postgresql</a></li>\n<li><a href=\"https://levelup.gitconnected.com/understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107?source=your_stories_page-------------------------------------\">understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107</a></li>\n<li><a href=\"https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db?source=your_stories_page-------------------------------------\">complete-javascript-reference-guide-64306cd6b0db</a></li>\n</ul>"},{"url":"/docs/medium/my-websites/","relativePath":"docs/medium/my-websites.md","relativeDir":"docs/medium","base":"my-websites.md","name":"my-websites","frontmatter":{"title":"My Sites","excerpt":"In this section you'll learn how to add syntax highlighting, examples, callouts and much more.","seo":{"title":"My Sites","description":"This is the My Sites page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"My Sites","keyName":"property"},{"name":"og:description","value":"This is the My Sites page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"My Sites"},{"name":"twitter:description","value":"This is the My Sites page"}]},"template":"docs","weight":1},"html":"<iframe src=\"https://random-static-html-deploys.netlify.app/my-websites/\" height=\"1600px\" width=\"100%\" style=\"zoom:0.75;align-self:center;\"></iframe>\n<ol>\n<li><a href=\"https://web-dev-resource-hub.netlify.app\"> WEB DEV RESOURCE HUB </a></li>\n<li><a href=\"https://learning-redux42.netlify.app/\">Learn Redux</a></li>\n<li><a href=\"https://trusting-dijkstra-4d3b17.netlify.app\"> Data Structures Website </a></li>\n<li><a href=\"https://web-dev-interview-prep-quiz-website.netlify.app/intro-js2.html\">Web-Dev-Quizzes</a></li>\n<li><a href=\"https://zen-lamport-5aab2c.netlify.app\"> Recursion </a></li>\n<li><a href=\"https://csb-ov0d1-bgoonz.vercel.app/\">React Documentation Site</a></li>\n<li><a href=\"https://amazing-hodgkin-33aea6.netlify.app\"> Blogs-from-webdevhub </a></li>\n<li><a href=\"https://angry-fermat-dcf5dd.netlify.app\"> Realty Website Demo </a></li>\n<li><a href=\"https://boring-heisenberg-f425d8.netlify.app\"> Best-Prac &#x26; Tools </a></li>\n<li><a href=\"https://site-analysis.netlify.app/\">site-analysis</a></li>\n<li><a href=\"https://clever-bartik-b5ba19.netlify.app\"> a/AOpen Notes </a></li>\n<li><a href=\"https://code-playground.netlify.app\"> Iframe Embed Playground </a></li>\n<li><a href=\"https://condescending-lewin-c96727.netlify.app\"> Triggered Effects Guitar Platform </a></li>\n<li><a href=\"https://determined-dijkstra-666766.netlify.app\"> Live Form </a></li>\n<li><a href=\"https://determined-dijkstra-ee7390.netlify.app\"> Interview Questions </a></li>\n<li><a href=\"https://eager-northcutt-456076.netlify.app\"> Resources Compilation </a></li>\n<li><a href=\"https://ecstatic-jang-593fd1.netlify.app\"> React Blog Depreciated </a></li>\n<li><a href=\"https://eloquent-sammet-ba1810.netlify.app\"> MihirBeg.com </a></li>\n<li><a href=\"https://embedable-content.netlify.app\"> Embeded Html Projects </a></li>\n<li><a href=\"https://festive-borg-e4d856.netlify.app\"> Cheat Sheets </a></li>\n<li><a href=\"https://focused-pasteur-0faac8.netlify.app\"> Early Version Of WebDevHub </a></li>\n<li><a href=\"https://gists42.netlify.app\"> My Gists </a></li>\n<li><a href=\"https://gracious-raman-474030.netlify.app\"> DS-Algo-Links </a></li>\n<li><a href=\"https://happy-mestorf-0f8e75.netlify.app\"> Video Chat App </a></li>\n<li><a href=\"https://hungry-shaw-30d504.netlify.app\"> Ciriculumn </a></li>\n<li><a href=\"https://inspiring-jennings-d14689.netlify.app\"> Cheat Sheets </a></li>\n<li><a href=\"https://links4242.netlify.app\"> Links </a></li>\n<li><a href=\"https://modest-booth-4e17df.netlify.app\"> Medium Articles </a></li>\n<li><a href=\"https://modest-torvalds-34afbc.netlify.app\"> NextJS Blog Template </a></li>\n<li><a href=\"https://modest-varahamihira-772b59.netlify.app\"> React Demo </a></li>\n<li><a href=\"https://nervous-swartz-0ab2cc.netlify.app\"> Ecomerce Norwex V1 </a></li>\n<li><a href=\"https://objective-borg-a327cd.netlify.app\"> Gifs </a></li>\n<li><a href=\"https://pedantic-wing-adbf82.netlify.app\"> Excel2HTML </a></li>\n<li><a href=\"https://pensive-meitner-1ea8c4.netlify.app\"> Data Structures Site </a></li>\n<li><a href=\"https://portfolio42.netlify.app\"> Portfolio </a></li>\n<li><a href=\"https://priceless-shaw-86ccb2.netlify.app\"> Page Templates </a></li>\n<li><a href=\"https://quizzical-mcnulty-fa09f2.netlify.app\"> Photo Gallary </a></li>\n<li><a href=\"https://relaxed-bhaskara-dc85ec.netlify.app\"> Coffee Website </a></li>\n<li><a href=\"https://romantic-hamilton-514b79.netlify.app\"> Awesome Resources </a></li>\n<li><a href=\"https://silly-lichterman-b22b5f.netlify.app\"> Cheat Sheets </a></li>\n<li><a href=\"https://silly-shirley-ec955e.netlify.app\"> Link City </a></li>\n<li><a href=\"https://stoic-mccarthy-2c335f.netlify.app\"> VSCODE Extensions </a></li>\n<li><a href=\"https://web-dev-resource-hub-manual-deploy.netlify.app\"> webdevhub manual attempt </a></li>\n<li><a href=\"https://wonderful-pasteur-392fbe.netlify.app\"> Norwex Resources </a></li>\n<li><a href=\"https://zen-bhabha-bd046f.netlify.app\">idk </a></li>\n<li><a href=\"https://getting-started42.herokuapp.com/\">heroku bare bones template</a></li>\n<li><a href=\"https://bad-reads42.herokuapp.com/\">bad reads</a></li>\n<li><a href=\"https://documentation-site-react2.vercel.app/\">docusaurus</a></li>\n<li><a href=\"https://app.stackbit.com/studio/609b2d7c71a5dd0016f36326\">stackbit</a></li>\n</ol>"},{"url":"/docs/python/basics/","relativePath":"docs/python/basics.md","relativeDir":"docs/python","base":"basics.md","name":"basics","frontmatter":{"title":"lorem-ipsum","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h2>Lorem ipsum</h2>\n<p>Lorem ipsum dolor sit amet, <strong>consectetur adipiscing elit</strong>, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n<ul>\n<li>Lorem ipsum</li>\n<li>dolor sit amet</li>\n</ul>"},{"url":"/docs/javascript/constructor-functions/","relativePath":"docs/javascript/constructor-functions.md","relativeDir":"docs/javascript","base":"constructor-functions.md","name":"constructor-functions","frontmatter":{"title":"Constructor Functions","weight":0,"excerpt":"Constructor Functions","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h2><strong>Constructor Functions</strong></h2>\n<p><strong>Defining a constructor function</strong>\n<em>Example of an object using object initialiation</em></p>\n<pre><code class=\"language-js\">const fellowshipOfTheRing = {\n    title: 'The Fellowship of the Ring',\n    series: 'The Lord of the Rings',\n    author: 'J.R.R. Tolkien'\n};\n</code></pre>\n<ul>\n<li>The above literal is a \"Book\" object type.</li>\n<li>\n<p><strong><code>Object Type</code></strong> is defined by it's attributes and behaviors.</p>\n<ul>\n<li><strong><code>Behaviors</code></strong> are represented by methods.</li>\n</ul>\n</li>\n<li>\n<p><strong><code>Constructor Functions</code></strong> : Handle the creation of an object - it's a factory for creating objects of a specific type.</p>\n<ul>\n<li>\n<p>There are a few specific things to constructors worth noting:</p>\n<ul>\n<li><strong>The name of the constructor function is capitalized</strong></li>\n<li><strong>The Function does not explicityly return a value</strong></li>\n<li><strong>Within the body, the <em>this</em> keyword references the newly created object</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-js\">function Book(title, series, author) {\n    this.title = title;\n    this.series = series;\n    this.author = author;\n}\n</code></pre>\n<h2><strong>Invoking a constructor function</strong></h2>\n<ul>\n<li>We can invoke a constructor function using the <strong><code>new</code></strong> keyword.</li>\n</ul>\n<pre><code class=\"language-js\">function Book(title, series, author) {\n    this.title = title;\n    this.series = series;\n    this.author = author;\n}\n\nconst fellowshipOfTheRing = new Book('The Fellowship of the Ring', 'The Lord of the Rings', 'J.R.R. Tolkien');\n\nconsole.log(fellowshipOfTheRing); // Book { title: 'The Fellowship of the Ring', ... }\n</code></pre>\n<ul>\n<li>\n<p><em>Four Things will happen when invoking a constructor function</em></p>\n<ol>\n<li>A new empty object is created {};</li>\n<li>The new obj's <strong><code>prototype</code></strong> is set to the object referenced by the constructors prototype property.</li>\n<li><strong><code>This</code></strong> is bound to the new object.</li>\n<li>The new object is returned after the constructor function has completed.</li>\n</ol>\n</li>\n</ul>\n<p><strong>Understanding New Object Instances</strong></p>\n<ul>\n<li><strong><code>Instance</code></strong> : term to describe an objected created from a constructor function.</li>\n<li>Every instance created is a unique object and therefore not equal to each other.</li>\n</ul>\n<p><strong>Using the instanceof operator to check an object's type</strong></p>\n<pre><code class=\"language-js\">console.log(fellowshipOfTheRing instanceof Book); // true\n</code></pre>\n<ul>\n<li>\n<p>By using the <code>instanceof</code> operator we can verify that an object was created from a certain object type.</p>\n<ul>\n<li><em>The instanceOf operator works by checking to see if the prototype object of the left side of the operator is the same as the prototype object of the right side of the operator.</em></li>\n</ul>\n</li>\n</ul>\n<p><strong>Invoking a constructor function without the new keyword</strong></p>\n<ul>\n<li>\n<p>If we invoke a constructor function without the <strong><code>new</code></strong> keyword, we may result in one of two unexpected outcomes:</p>\n<ol>\n<li>In <strong>non-strict</strong> mode, this will be bound to the <strong>global object</strong> instead.</li>\n<li>\n<p>In <strong><code>strict</code></strong> mode, this will become undefined.</p>\n<ul>\n<li>You can enable strict mode by typing <code>\"use strict\"</code> at the top of your file.</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<p><strong>Defining Sharable Methods</strong></p>\n<ul>\n<li><em>Avoid the temptation to store an object method inside a constructor function, it is inefficient with computer memory usage b/c each object instance would have it's own method definition.</em></li>\n<li>\n<p><strong><code>Prototype</code></strong> : An object that is delegated to when a reference to an object property or method can't be resolved.</p>\n<ul>\n<li>Every instance created by a constructor function shares the same prototype.</li>\n</ul>\n</li>\n<li>\n<p><strong><code>Object.setPrototypeOf()</code></strong> and <strong><code>Object.getPrototypeOf()</code></strong> are just used to set a prototype of one object to another object; and also the verify a prototype.</p>\n<ul>\n<li><strong><code>proto</code></strong> : aka \"dunder proto\" is a property used to gain easy access to an object's prototype - it is widely supported by browsers but is considered deprecated.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-js\">function Book(title, series, author) {\n    this.title = title;\n    this.series = series;\n    this.author = author;\n}\n\n// Any method defined on the `Book.prototype` property\n// will be shared across all `Book` instances.\nBook.prototype.getInformation = function () {\n    return `${this.title} by ${this.author}`;\n};\n\nconst fellowshipOfTheRing = new Book('The Fellowship of the Ring', 'The Lord of the Rings', 'J.R.R. Tolkien');\n\nconsole.log(fellowshipOfTheRing.getInformation());\n</code></pre>\n<ul>\n<li>Every method we define on a constructor function's prototype property will be shared across all instances of that object type.</li>\n</ul>\n<p><strong>The Problem with Arrow Functions</strong></p>\n<ul>\n<li>\n<p>We <strong>cannot</strong> use arrow functions when defining methods on a constructor function's prototype property.</p>\n<ul>\n<li>Arrow functions don't include their own <strong>this</strong> binding; therefore it will not reference the current instance - always stick with the function () keyword.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2><strong>Putting the Class in Javascript Classes</strong></h2>\n<p>In ES2015, JS gained the <strong><code>class</code></strong> keyword - replacing the need to use only constructor functions &#x26; prototypes to mimic classes!</p>\n<ul>\n<li><strong><code>class</code></strong> : keyword that gives developers a formal way to create a class definition to specify an object type's attributes and behavior; also used to create objects of that specific type.</li>\n</ul>\n<p><strong>Defining a ES2015 class</strong></p>\n<pre><code class=\"language-js\">class Book {\n    constructor(title, series, author) {\n        this.title = title;\n        this.series = series;\n        this.author = author;\n    }\n}\n</code></pre>\n<ul>\n<li>Class names also begin only with capital letters.</li>\n<li>\n<p>Although not required, class definitions can include a <strong><code>class constructor function</code></strong> - these are similar to regular constructors in that:</p>\n<ul>\n<li>They don't explicitly return a value.</li>\n<li>The <strong>this</strong> keyword references the newly created object instance.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Instantiating an instance of a class</strong></p>\n<ul>\n<li>\n<p>We can also use the <strong><code>new</code></strong>.</p>\n<ul>\n<li>Four things occur when instantiating an instance of a class:</li>\n<li>New empty object is created {};</li>\n<li>The new obj's prototype is set to the class prototype's property value.</li>\n<li><strong><code>This</code></strong> is bound to the new object.</li>\n<li>After the constructor method has completed, the new obj is returned.</li>\n</ul>\n</li>\n<li>Don't try to instatiate a class object without the <strong>new</strong> keyword.</li>\n</ul>\n<p><strong>Class Definitions are NOT hoisted</strong></p>\n<pre><code class=\"language-js\">test();\n\nfunction test() {\n    console.log('This works!');\n}\n</code></pre>\n<ul>\n<li>In JS you can call a function before it's declared - this is known as <strong><code>hoisting</code></strong>.</li>\n<li>Class defs are NOT hoisted, so just get in the habit of declaring them <strong>before</strong> you use them.</li>\n</ul>\n<p><strong>Defining Methods</strong></p>\n<ul>\n<li>A class can contain two types of methods:</li>\n<li>\n<p><strong><code>Instance Method</code></strong> : Methods that are invoked on an instance of the class - useful for performing an action on a specific instance.</p>\n<ul>\n<li>Instance methods are also sometimes referred to as <strong><code>prototype</code></strong> methods because they are defined on a shared prototype object.</li>\n</ul>\n</li>\n<li>\n<p><strong><code>Static Method</code></strong> : Methods that invoked directly on a class, not on an instance.</p>\n<ul>\n<li><code>Important</code>: Invoking a static method on an instance will result in a runtime error.</li>\n<li>Prepending the <strong><code>static</code></strong> keyword at the beginning on the method name will make it static.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-js\">class Book {\n    constructor(title, series, author) {\n        this.title = title;\n        this.series = series;\n        this.author = author;\n    }\n\n    // Notice the use of a rest parameter (...books)\n    // to capture the passed parameters as an array of values.\n    static getTitles(...books) {\n        return books.map((book) => book.title);\n    }\n\n    getInformation() {\n        return `${this.title} by ${this.author}`;\n    }\n}\n\nconst fellowshipOfTheRing = new Book('The Fellowship of the Ring', 'The Lord of the Rings', 'J.R.R. Tolkien');\n\nconst theTwoTowers = new Book('The Two Towers', 'The Lord of the Rings', 'J.R.R. Tolkien');\n\nconst bookTitles = Book.getTitles(fellowshipOfTheRing, theTwoTowers);\n\nconsole.log(bookTitles.join(', ')); // The Fellowship of the Ring, The Two Towers\n</code></pre>\n<ul>\n<li>If we go back to an example of how constructor functions also use static methods - we see that static methods are <em>defined directly on the constructor function</em> - whereas instance methods need to be defined on the <em>prototype</em> object.</li>\n</ul>\n<pre><code class=\"language-js\">function Book(title, series, author) {\n    this.title = title;\n    this.series = series;\n    this.author = author;\n}\n\n// Static methods are defined\n// directly on the constructor function.\nBook.getTitles = function (...books) {\n    return books.map((book) => book.title);\n};\n\n// Instance methods are defined\n// on the constructor function's `prototype` property.\nBook.prototype.getInformation = function () {\n    return `${this.title} by ${this.author}`;\n};\n\nconst fellowshipOfTheRing = new Book('The Fellowship of the Ring', 'The Lord of the Rings', 'J.R.R. Tolkien');\n\nconst theTwoTowers = new Book('The Two Towers', 'The Lord of the Rings', 'J.R.R. Tolkien');\n\nconsole.log(fellowshipOfTheRing.getInformation()); // The Fellowship of the Ring by J.R.R. Tolkien\n\nconsole.log(theTwoTowers.getInformation()); // The Two Towers by J.R.R. Tolkien\n\n// Call the static `Book.getTitles()` method\n// to get an array of the book titles.\nconst bookTitles = Book.getTitles(fellowshipOfTheRing, theTwoTowers);\n\nconsole.log(bookTitles.join(', ')); // The Fellowship of the Ring, The Two Towers\n</code></pre>\n<p><strong>Comparing Classes to Constructor Functions</strong></p>\n<blockquote>\n<p>ES2015 Classes are essentially syntactic sugar over traditional constructor functions and prototypes.</p>\n</blockquote>\n<hr>\n<h2><strong>Javascript Inheritance</strong></h2>\n<ul>\n<li><strong><code>Child Class</code></strong> : Class that is based upon another class and inherits properties and methods from that other class.</li>\n<li><strong><code>Parent Class</code></strong> : Class that is being inherited downwards.</li>\n<li><strong><code>Inheritance</code></strong> : The process of basing a class upon another class.</li>\n</ul>\n<pre><code class=\"language-js\">class CatalogItem {\n    constructor(title, series) {\n        this.title = title;\n        this.series = series;\n    }\n\n    getInformation() {\n        if (this.series) {\n            return `${this.title} (${this.series})`;\n        } else {\n            return this.title;\n        }\n    }\n}\n\nclass Book extends CatalogItem {\n    constructor(title, series, author) {\n        super(title, series);\n        this.author = author;\n    }\n}\n\nclass Movie extends CatalogItem {\n    constructor(title, series, director) {\n        super(title, series);\n        this.director = director;\n    }\n}\n\nconst theGrapesOfWrath = new Book('The Grapes of Wrath', null, 'John Steinbeck');\nconst aNewHope = new Movie('Episode 4: A New Hope', 'Star Wars', 'George Lucas');\n\nconsole.log(theGrapesOfWrath.getInformation()); // The Grapes of Wrath\nconsole.log(aNewHope.getInformation()); // Episode 4: A New Hope (Star Wars)\nconsole.log(Catalogitem instanceof Function); // true\nconsole.log(Book instanceof Function); // true\n</code></pre>\n<ul>\n<li>\n<p>A <strong><code>prototype chain</code></strong> defines a series of prototype objects that are delegated to one by one, when a property or method can't be found on an instance object.</p>\n<pre><code class=\"language-js\">console.log(theGrapesOfWrath.getInformation()); // The Grapes of Wrath\n</code></pre>\n<p>When the <code>getInformation()</code> method is invoked:</p>\n<ul>\n<li>JS looks for get() on the current object.</li>\n<li>If it isn't found, the method call is delegated to the object's prototype.</li>\n<li>It continues up the prototype chain until the method is found.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Overriding a method in a parent class</strong></p>\n<ul>\n<li><strong><code>Method Overriding</code></strong> : when a child class provides an implementation of a method that's already defined in a parent class.</li>\n</ul>\n<pre><code class=\"language-js\">class Movie extends CatalogItem {\n    constructor(title, series, director) {\n        super(title, series);\n        this.director = director;\n    }\n\n    getInformation() {\n        let result = super.getInformation();\n\n        if (this.director) {\n            result += ` [directed by ${this.director}]`;\n        }\n\n        return result;\n    }\n}\n</code></pre>\n<ul>\n<li>We can simply declare our own method of the same name in our child class to override our parent's version of <code>getInformation()</code></li>\n</ul>\n<hr>\n<h2><strong>Javascript Modules</strong></h2>\n<p><strong>Introducing Node.js modules</strong></p>\n<ul>\n<li>In Node.js, each JS file in a project defines a <strong><code>module</code></strong>.</li>\n<li>Module's contents are private by default.</li>\n<li><strong><code>Local Modules</code></strong> : Modules defined within your project.</li>\n<li><strong><code>Core Modules</code></strong> : Native modules contained within Node.js that you can use to perform tasks or to add functionality to your application.</li>\n<li><strong><code>CommonJS</code></strong> : A legacy module system.</li>\n<li><strong><code>ES Modules</code></strong> : Newer module sysem that will eventually replace CommonJS.</li>\n<li><strong><code>Entry Point</code></strong> : JS File that is passed to Node for access to the entire application.</li>\n<li>\n<p>Syntax for exporting modules:</p>\n<pre><code class=\"language-js\">module.exports.Book = Book;\nmodule.exports.Movie = Movie;\n</code></pre>\n<pre><code class=\"language-js\">module.exports = {\n    Book,\n    Movie\n};\n</code></pre>\n</li>\n<li>\n<p>Syntax for importing modules:</p>\n<pre><code class=\"language-js\">const classes = require('./classes');\n</code></pre>\n<pre><code class=\"language-js\">const { Book, Movie } = require('./classes');\n</code></pre>\n<p><strong>Using Single Item Modules</strong></p>\n<blockquote>\n<p>Following the convention of a single exported item per module helps to keep modules focused and less likely to become bloted with too much code.</p>\n</blockquote>\n<p><strong>Understanding Module Loading</strong></p>\n<ul>\n<li>\n<p>When loading a module, Node will examine the identifier passed to the require() function to determine if our module is local, core, or third-party:</p>\n<ul>\n<li><strong><code>Local Module</code></strong>: identifier starts with ./ ../ or /</li>\n<li><strong><code>Node.js Core</code></strong>: identifier matches name</li>\n<li><strong><code>Third-Party</code></strong>: identifier matches a module in the node modules folder (installed package)</li>\n</ul>\n</li>\n</ul>\n<hr>\n</li>\n</ul>"},{"url":"/docs/javascript/bigo/","relativePath":"docs/javascript/bigo.md","relativeDir":"docs/javascript","base":"bigo.md","name":"bigo","frontmatter":{"title":"A Very Quick Guide To Calculating Big O Computational Complexity","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h1>A Very Quick Guide To Calculating Big O Computational Complexity\n\n</h1>\n<p><strong>Big O</strong>: big picture, broad strokes, not details</p>\n<p><img src=\"https://miro.medium.com/max/630/0*lte81mEvgEPYXodB.png\"></p>\n<p><img src=\"https://miro.medium.com/max/304/1*5t2u8n1uKhioIzZIXX2zbg.png\"></p>\n<p><img src=\"https://miro.medium.com/max/563/1*HhXmG2cNdg8y4ZCCQGTyuQ.png\"></p>\n<p><img src=\"https://miro.medium.com/max/630/1*ULeXxVCDkF73GwhsxyM_2g.png\"><img src=\"https://miro.medium.com/max/900/1*hkZWlUgFyOSaLD5Uskv0tQ.png\"><img src=\"https://miro.medium.com/max/1115/1*COjzunj0-FsMJ0d7v7Z-6g.png\"></p>\n<p>For a more complete guide… checkout :</p>\n<ul>\n<li>way we analyze how efficient algorithms are without getting too mired in details</li>\n<li>can model how much time any function will take given n inputs</li>\n<li>interested in order of magnitude of number of the exact figure</li>\n<li>O absorbs all fluff and n = biggest term</li>\n<li>Big O of 3x^2 +x + 1 = O(n^2)</li>\n</ul>\n<h1>Time Complexity</h1>\n<p>no loops or exit &#x26; return = O(1)</p>\n<p>0 nested loops = O(n)\n1 nested loops = O(n^2)\n2 nested loops = O(n^3)\n3 nested loops = O(n^4)</p>\n<p><strong>recursive</strong>: as you add more terms, increase in time as you add input diminishes\n<strong>recursion</strong>: when you define something in terms of itself, a function that calls itself</p>\n<ul>\n<li>used because of ability to maintain state at diffferent levels of recursion</li>\n<li>inherently carries large footprint</li>\n<li>every time function called, you add call to stack</li>\n</ul>\n<p><strong>iterative</strong>: use loops instead of recursion (preferred)\n- favor readability over performance</p>\n<p>O(n log(n)) &#x26; O(log(n)): dividing/halving</p>\n<ul>\n<li>if code employs recursion/divide-and-conquer strategy</li>\n<li>what power do i need to power my base to get n</li>\n</ul>\n<h1>Time Definitions</h1>\n<ul>\n<li><strong>constant</strong>: does not scale with input, will take same amount of time</li>\n<li>for any input size n, constant time performs same number of operations every time</li>\n<li><strong>logarithmic</strong>: increases number of operations it performs as logarithmic function of input size n</li>\n<li>function log n grows very slowly, so as n gets longer, number of operations the algorithm needs to perform doesn’t increase very much</li>\n<li>halving</li>\n<li><strong>linear</strong>: increases number of operations it performs as linear function of input size n</li>\n<li>number of additional operations needed to perform grows in direct proportion to increase in input size n</li>\n<li><strong>log-linear</strong>: increases number of operations it performs as log-linear function of input size n</li>\n<li>looking over every element and doing work on each one</li>\n<li><strong>quadratic</strong>: increases number of operations it performs as quadratic function of input size n</li>\n<li><strong>exponential</strong>: increases number of operations it performs as exponential function of input size n</li>\n<li>number of nested loops increases as function of n</li>\n<li><strong>polynomial</strong>: as size of input increases, runtime/space used will grow at a faster rate</li>\n<li><strong>factorial</strong>: as size of input increases, runtime/space used will grow astronomically even with relatively small inputs</li>\n<li><strong>rate of growth</strong>: how fast a function grows with input size</li>\n</ul>\n<h1>Space Complexity</h1>\n<ul>\n<li>How does the space usage scale/change as input gets very large?</li>\n<li>What auxiliary space does your algorithm use or is it in place (constant)?</li>\n<li>Runtime stack space counts as part of space complexity unless told otherwise.</li>\n</ul>\n<h1>Data Structures &#x26; Algos In JS</h1>\n<hr>"},{"url":"/docs/python/flow-control/","relativePath":"docs/python/flow-control.md","relativeDir":"docs/python","base":"flow-control.md","name":"flow-control","frontmatter":{"title":"lorem-ipsum","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h2>Flow Control:</h2>\n<h2>Read It</h2>\n<ul>\n<li><a href=\"https://www.pythoncheatsheet.org\">Website</a></li>\n<li><a href=\"https://github.com/wilfredinni/python-cheatsheet\">Github</a></li>\n<li><a href=\"https://github.com/wilfredinni/Python-cheatsheet/raw/master/python_cheat_sheet.pdf\">PDF</a></li>\n<li><a href=\"https://mybinder.org/v2/gh/wilfredinni/python-cheatsheet/master?filepath=jupyter_notebooks\">Jupyter Notebook</a></li>\n</ul>\n<h2>Flow Control</h2>\n<h3>Comparison Operators</h3>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>==</code></td>\n<td>Equal to</td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td>Not equal to</td>\n</tr>\n<tr>\n<td><code>&#x3C;</code></td>\n<td>Less than</td>\n</tr>\n<tr>\n<td><code>></code></td>\n<td>Greater Than</td>\n</tr>\n<tr>\n<td><code>&#x3C;=</code></td>\n<td>Less than or Equal to</td>\n</tr>\n<tr>\n<td><code>>=</code></td>\n<td>Greater than or Equal to</td>\n</tr>\n</tbody>\n</table>\n<p>These operators evaluate to True or False depending on the values you give them.</p>\n<p>Examples:</p>\n<pre><code class=\"language-python\">42 == 42\n</code></pre>\n<pre><code class=\"language-python\">40 == 42\n</code></pre>\n<pre><code class=\"language-python\">'hello' == 'hello'\n</code></pre>\n<pre><code class=\"language-python\">'hello' == 'Hello'\n</code></pre>\n<pre><code class=\"language-python\">'dog' != 'cat'\n</code></pre>\n<pre><code class=\"language-python\">42 == 42.0\n</code></pre>\n<pre><code class=\"language-python\">42 == '42'\n</code></pre>\n<h3>Boolean evaluation</h3>\n<p>Never use <code>==</code> or <code>!=</code> operator to evaluate boolean operation. Use the <code>is</code> or <code>is not</code> operators,\nor use implicit boolean evaluation.</p>\n<p>NO (even if they are valid Python):</p>\n<pre><code class=\"language-python\">True == True\n</code></pre>\n<pre><code class=\"language-python\">True != False\n</code></pre>\n<p>YES (even if they are valid Python):</p>\n<pre><code class=\"language-python\">True is True\n</code></pre>\n<pre><code class=\"language-python\">True is not False\n</code></pre>\n<p>These statements are equivalent:</p>\n<pre><code class=\"language-Python\">if a is True:\n   pass\nif a is not False:\n   pass\nif a:\n   pass\n</code></pre>\n<p>And these as well:</p>\n<pre><code class=\"language-Python\">if a is False:\n   pass\nif a is not True:\n   pass\nif not a:\n   pass\n</code></pre>\n<h3>Boolean Operators</h3>\n<p>There are three Boolean operators: and, or, and not.</p>\n<p>The <em>and</em> Operator’s <em>Truth</em> Table:</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Evaluates to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>True and True</td>\n<td>True</td>\n</tr>\n<tr>\n<td>True and False</td>\n<td>False</td>\n</tr>\n<tr>\n<td>False and True</td>\n<td>False</td>\n</tr>\n<tr>\n<td>False and False</td>\n<td>False</td>\n</tr>\n</tbody>\n</table>\n<p>The <em>or</em> Operator’s <em>Truth</em> Table:</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Evaluates to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>True or True</td>\n<td>True</td>\n</tr>\n<tr>\n<td>True or False</td>\n<td>True</td>\n</tr>\n<tr>\n<td>False or True</td>\n<td>True</td>\n</tr>\n<tr>\n<td>False or False</td>\n<td>False</td>\n</tr>\n</tbody>\n</table>\n<p>The <em>not</em> Operator’s <em>Truth</em> Table:</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Evaluates to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>not True</td>\n<td>False</td>\n</tr>\n<tr>\n<td>not False</td>\n<td>True</td>\n</tr>\n</tbody>\n</table>\n<h3>Mixing Boolean and Comparison Operators</h3>\n<pre><code class=\"language-python\">(4 &#x3C; 5) and (5 &#x3C; 6)\n</code></pre>\n<pre><code class=\"language-python\">(4 &#x3C; 5) and (9 &#x3C; 6)\n</code></pre>\n<pre><code class=\"language-python\">(1 == 2) or (2 == 2)\n</code></pre>\n<p>You can also use multiple Boolean operators in an expression, along with the comparison operators:</p>\n<pre><code class=\"language-python\">2 + 2 == 4 and not 2 + 2 == 5 and 2 * 2 == 2 + 2\n</code></pre>\n<h3>if Statements</h3>\n<pre><code class=\"language-python\">if name == 'Alice':\n    print('Hi, Alice.')\n</code></pre>\n<h3>else Statements</h3>\n<pre><code class=\"language-python\">name = 'Bob'\n\nif name == 'Alice':\n    print('Hi, Alice.')\nelse:\n    print('Hello, stranger.')\n</code></pre>\n<h3>elif Statements</h3>\n<pre><code class=\"language-python\">name = 'Bob'\nage = 5\n\nif name == 'Alice':\n    print('Hi, Alice.')\nelif age &#x3C; 12:\n    print('You are not Alice, kiddo.')\n</code></pre>\n<pre><code class=\"language-python\">name = 'Bob'\nage = 30\n\nif name == 'Alice':\n    print('Hi, Alice.')\nelif age &#x3C; 12:\n    print('You are not Alice, kiddo.')\nelse:\n    print('You are neither Alice nor a little kid.')\n</code></pre>\n<h3>while Loop Statements</h3>\n<pre><code class=\"language-python\">spam = 0\n\nwhile spam &#x3C; 5:\n    print('Hello, world.')\n    spam = spam + 1\n</code></pre>\n<h3>break Statements</h3>\n<p>If the execution reaches a break statement, it immediately exits the while loop’s clause:</p>\n<pre><code class=\"language-python\">while True:\n    print('Please type your name.')\n    name = input()\n    if name == 'your name':\n        break\n\nprint('Thank you!')\n</code></pre>\n<h3>continue Statements</h3>\n<p>When the program execution reaches a continue statement, the program execution immediately jumps back to the start of the loop.</p>\n<pre><code class=\"language-python\">while True:\n    print('Who are you?')\n    name = input()\n    if name != 'Joe':\n        continue\n    print('Hello, Joe. What is the password? (It is a fish.)')\n    password = input()\n    if password == 'swordfish':\n        break\n\nprint('Access granted.')\n</code></pre>\n<h3>for Loops and the range() Function</h3>\n<pre><code class=\"language-python\">print('My name is')\nfor i in range(5):\n    print('Jimmy Five Times ({})'.format(str(i)))\n</code></pre>\n<p>The <em>range()</em> function can also be called with three arguments. The first two arguments will be the start and stop values, and the third will be the step argument. The step is the amount that the variable is increased by after each iteration.</p>\n<pre><code class=\"language-python\">for i in range(0, 10, 2):\n   print(i)\n</code></pre>\n<p>You can even use a negative number for the step argument to make the for loop count down instead of up.</p>\n<pre><code class=\"language-python\">for i in range(5, -1, -1):\n    print(i)\n</code></pre>\n<h3>For else statement</h3>\n<p>This allows you to specify a statement to execute after the full loop has been executed. Only\nuseful when a <code>break</code> condition can occur in the loop:</p>\n<pre><code class=\"language-python\">for i in [1, 2, 3, 4, 5]:\n   if i == 3:\n       break\nelse:\n   print(\"only executed when no item of the list is equal to 3\")\n</code></pre>\n<h3>Importing Modules</h3>\n<pre><code class=\"language-python\">import random\n\nfor i in range(5):\n    print(random.randint(1, 10))\n</code></pre>\n<pre><code class=\"language-python\">import random, sys, os, math\n</code></pre>\n<pre><code class=\"language-python\">from random import *\n</code></pre>\n<h3>Ending a Program with sys.exit</h3>\n<pre><code class=\"language-python\">import sys\n\nwhile True:\n    print('Type exit to exit.')\n    response = input()\n    if response == 'exit':\n        sys.exit()\n    print('You typed {}.'.format(response))\n</code></pre>"},{"url":"/docs/python/google-sheets-api/","relativePath":"docs/python/google-sheets-api.md","relativeDir":"docs/python","base":"google-sheets-api.md","name":"google-sheets-api","frontmatter":{"title":"google-sheets-api","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<p><strong>If you’re maintaining a dataset that frequently has to be updated in a predictable and consistent manner, automating that process has obvious benefits. It might cost some time to set up the code to automate the work, but you’ll likely save time in the long run. And, if you’re like me, writing the code will be less mind-numbing than repeatedly updating the same spreadsheet over and over again!</strong><img src=\"https://miro.medium.com/max/30/1*5RtrFThuAvHiqxxwPp5Ptg.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/709/1*5RtrFThuAvHiqxxwPp5Ptg.png\"></p>\n<p>Screenshot of Google Cloud Console edited by the author.<img src=\"https://miro.medium.com/max/30/1*ahdHCrx8ngiDP0dBANKvgg.png?q=20\"><img src=\"https://miro.medium.com/max/709/1*ahdHCrx8ngiDP0dBANKvgg.png\"></p>\n<p>taken after successfully running the quickstart script.<img src=\"https://miro.medium.com/max/30/1*E_PHwbLycJ7mQSad2QszKw.png?q=20\"><img src=\"https://miro.medium.com/max/709/1*E_PHwbLycJ7mQSad2QszKw.png\"></p>\n<p><img src=\"https://miro.medium.com/max/709/1*cN14i55zhZfg_X63kQcBEw.png\"></p>\n<p>.<img src=\"https://miro.medium.com/max/30/1*wH0Dop5RSg3tS3sEnfIY4g.png?q=20\"><img src=\"https://miro.medium.com/max/709/1*wH0Dop5RSg3tS3sEnfIY4g.png\"></p>\n<p>Screenshot by the author.</p>\n<p>Google spreadsheets provide excellent functionality for maintaining basic datasets. Some of the obvious advantages are that they are free, easy to access, and easy to share. Moreover, Google spreadsheets can be especially powerful because of their ability to connect with tools like <a href=\"https://zapier.com/\">Zapier</a> or <a href=\"https://phantombuster.com/\">Phantombuster</a> that can create automated workflows between a plethora of different online applications.</p>\n<p>Although these kinds of tools usually offer functionalities to automatically manipulate Google spreadsheets as well, I’ve experienced a lack of flexibility on how to update your spreadsheets. A customized Python script can offer way more flexibility and possibilities.</p>\n<p>To update your Google spreadsheets with Python, you can use the Google sheets API. Google offers free API access to several of their workspace apps, like Gmail, Google Calendar, Google Drive, and Google Sheets. You can check out their API library <a href=\"https://console.cloud.google.com/apis/library?project=cellular-axon-327013\">here</a>.</p>\n<p>Below I’ll walk you through the steps to set up the Google Sheets API with Python and show a couple of basic examples of how to manipulate spreadsheets using the API.</p>\n<h1>Setting Up the API</h1>\n<h2>Step 1: Create a Google Cloud Platform project</h2>\n<p>To get started with any of the Google workspace APIs, you need to have a so-called Google Cloud Platform (GCP) project. A GCP project forms the basis for all of Google’s cloud computing services, including their API library. Setting up a project and using the APIs is completely free. Follow the steps outlined <a href=\"https://developers.google.com/workspace/guides/create-project\">here</a> to create your GCP project. It should be pretty straightforward.</p>\n<h2>Step 2: Create Credentials</h2>\n<p>After creating a GCP project (step 1), we need to set up our credentials for accessing the API. Our credentials are like a key for the API to know who is requesting access to its data and services. You can follow the steps listed <a href=\"https://developers.google.com/workspace/guides/create-credentials\">here</a> to <em>create desktop application credentials</em>. In my experience, some steps were missing in this tutorial, so I’m giving the detailed version below.</p>\n<ul>\n<li>Start by navigating back to your <a href=\"https://console.cloud.google.com/home/dashboard\">Google Cloud Console</a>.</li>\n<li>Find the <em>APIs &#x26; Services</em> tab, and then select the <em>Credentials</em> page</li>\n<li>Click on *+Create Credentials *and select <em>OAuth client ID</em>.</li>\n</ul>\n<!---->\n<ul>\n<li>Select <em>Desktop app</em> as the application type and give your app a name. Then click create.</li>\n<li>You will be prompted to set up your OAuth consent screen. Follow the steps you are prompted with and make sure to add yourself as a test user.</li>\n<li>After generating your client ID, you will be able to see it on your credentials page.</li>\n<li>Click the download button to download a JSON file with your credentials. Rename it to <em>credentials.json</em>. You will need this in the next step.</li>\n</ul>\n<h2>Step 3: Set up the API</h2>\n<p>After creating a GCP project and generating your credentials, it is time to connect to the API with Python for the first time. You can follow the steps outlined <a href=\"https://developers.google.com/sheets/api/quickstart/python\">here</a>. The steps given on the Google developers page are pretty self-explanatory. Three things I want to add:</p>\n<ul>\n<li>Make sure to have a look at the prerequisites before diving in.</li>\n<li>Don’t forget to move your <em>credentials.json</em> file to the same folder where your <em>quickstart.py</em> file is.</li>\n<li>Change the URL in the SCOPE list in the quickstart script to <em><a href=\"https://www.googleapis.com/auth/spreadsheets\">https://www.googleapis.com/auth/spreadsheets</a></em> to make sure that you have both read and write access.</li>\n</ul>\n<p>If everything goes as expected, you should see this in your browser after running the sample script:</p>\n<p>After successfully running the sample, you will also find a <em>token.json</em> file in your workspace. This file is used for authentication on any of your future calls to the API. You’re now ready to use the API!</p>\n<h1>Using the API</h1>\n<p>Now that we have set up the API connection, we can use the API to create, read, and edit Google spreadsheets! Extensive documentation on how to use the API can be found <a href=\"https://developers.google.com/sheets/api/guides/create#python\">here</a>. I’ll run through a few basic examples below.</p>\n<h2>Reading from an existing spreadsheet</h2>\n<p>Reading from an existing spreadsheet is a key functionality if you want to automate your spreadsheets. Let’s create a new spreadsheet in the Google workspace and input some data. Below is a screenshot of the table I created.</p>\n<p>The API identifies spreadsheets using a spreadsheet ID. To connect to a spreadsheet that already exists, you can find the spreadsheet ID in the Google Sheets URL as follows:</p>\n<p>After identifying the spreadsheet ID of the spreadsheet we just created, we can use the API to connect to the spreadsheet and to read its data. Below is a code example of how to do this. The main functionalities to retrieve data from an existing spreadsheet are provided by sheet.values().get().execute()* <em>on line 17</em>. *Note that this is where we pass the spreadsheet ID and the range of values in the sheet we want to retrieve. All code before that establishes the connection to the API and is very similar to the <em>quickstart.py</em> file we used to connect to the API for the first time.</p>\n<p>The code returns a list of lists containing the data of our spreadsheet. Note that the data is returned row-by-row this way.</p>\n<h2>Writing to an existing spreadsheet</h2>\n<p>Next, let’s try to add a new value to the spreadsheet. After all, this is the second key bit we need to automatically update our spreadsheets.</p>\n<p>The code below shows how to add a row to the existing data with the values [6, f]. Similar to reading values from an existing sheet, we need to start with establishing the connection to the API and identifying the spreadsheet ID. Because we are now writing new data to the spreadsheet, it is essential to make sure that you have not specified read-only permission in your SCOPES list (line 5).</p>\n<p>The main functionalities to append new data to an existing spreadsheet are provided by *sheet.values().append().execute() <em>on lines 17–22</em>. *Note that this is where we pass the spreadsheet ID, spreadsheet range, and several other parameters that specify how the data has to be inserted and what data has to be inserted. The <em>body</em> parameter takes a dictionary with values to append to the existing data table, using the same list-of-list format we saw before.</p>\n<p>After running the code, the spreadsheet is automatically updated with our new entry. The new row is neatly appended to the data that we manually wrote in the spreadsheet.</p>\n<h1>Final Thoughts</h1>\n<p>The Google workspace API library is a really powerful and relatively user-friendly way to automate workflows related to any of the Google workspace applications. In this tutorial, I walked you through setting up the Google Sheets API with Python and showed a few examples of how to manipulate spreadsheets using this API. The possibilities of how to use this are endless.</p>\n<p>Setting up access to the other APIs involves a very similar process and would allow for even more elaborate and complex automation flows.</p>"},{"url":"/docs/python/functions/","relativePath":"docs/python/functions.md","relativeDir":"docs/python","base":"functions.md","name":"functions","frontmatter":{"title":"lorem-ipsum","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h2>Functions</h2>\n<pre><code class=\"language-python\">def hello(name):\n    print('Hello {}'.format(name))\n</code></pre>\n<h3>Return Values and return Statements</h3>\n<p>When creating a function using the def statement, you can specify what the return value should be with a return statement. A return statement consists of the following:</p>\n<ul>\n<li>The return keyword.</li>\n<li>The value or expression that the function should return.</li>\n</ul>\n<pre><code class=\"language-python\">import random\ndef getAnswer(answerNumber):\n    if answerNumber == 1:\n        return 'It is certain'\n    elif answerNumber == 2:\n        return 'It is decidedly so'\n    elif answerNumber == 3:\n        return 'Yes'\n    elif answerNumber == 4:\n        return 'Reply hazy try again'\n    elif answerNumber == 5:\n        return 'Ask again later'\n    elif answerNumber == 6:\n        return 'Concentrate and ask again'\n    elif answerNumber == 7:\n        return 'My reply is no'\n    elif answerNumber == 8:\n        return 'Outlook not so good'\n    elif answerNumber == 9:\n        return 'Very doubtful'\n\nr = random.randint(1, 9)\nfortune = getAnswer(r)\nprint(fortune)\n</code></pre>\n<h3>The None Value</h3>\n<pre><code class=\"language-python\">spam = print('Hello!')\nspam is None\n</code></pre>\n<p>Note: never compare to <code>None</code> with the <code>==</code> operator. Always use <code>is</code>.</p>\n<h3>print Keyword Arguments</h3>\n<pre><code class=\"language-python\">print('Hello', end='')\nprint('World')\n</code></pre>\n<pre><code class=\"language-python\">print('cats', 'dogs', 'mice')\n</code></pre>\n<pre><code class=\"language-python\">print('cats', 'dogs', 'mice', sep=',')\n</code></pre>\n<h3>Local and Global Scope</h3>\n<ul>\n<li>Code in the global scope cannot use any local variables.</li>\n<li>However, a local scope can access global variables.</li>\n<li>Code in a function’s local scope cannot use variables in any other local scope.</li>\n<li>You can use the same name for different variables if they are in different scopes. That is, there can be a local variable named spam and a global variable also named spam.</li>\n</ul>\n<h3>The global Statement</h3>\n<p>If you need to modify a global variable from within a function, use the global statement:</p>\n<pre><code class=\"language-python\">def spam():\n    global eggs\n    eggs = 'spam'\n\neggs = 'global'\nspam()\nprint(eggs)\n</code></pre>\n<p>There are four rules to tell whether a variable is in a local scope or global scope:</p>\n<ol>\n<li>If a variable is being used in the global scope (that is, outside of all functions), then it is always a global variable.</li>\n<li>If there is a global statement for that variable in a function, it is a global variable.</li>\n<li>Otherwise, if the variable is used in an assignment statement in the function, it is a local variable.</li>\n<li>But if the variable is not used in an assignment statement, it is a global variable.</li>\n</ol>"},{"url":"/docs/python/intro-for-js-devs/","relativePath":"docs/python/intro-for-js-devs.md","relativeDir":"docs/python","base":"intro-for-js-devs.md","name":"intro-for-js-devs","frontmatter":{"title":"lorem-ipsum","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h2>Lorem ipsum</h2>\n<p>Lorem ipsum dolor sit amet, <strong>consectetur adipiscing elit</strong>, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n<ul>\n<li>Lorem ipsum</li>\n<li>dolor sit amet</li>\n</ul>"},{"url":"/docs/python/examples/","relativePath":"docs/python/examples.md","relativeDir":"docs/python","base":"examples.md","name":"examples","frontmatter":{"title":"Practice","weight":0,"excerpt":"Example Problems","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h2>Python Practice:</h2>\n<h1>Python Problems &#x26; Solutions For Beginners</h1>\n<p>Introduction to python taught through example problems. Solutions are included in embedded repl.it at the bottom of this page for you to…</p>\n<hr>\n<h3>Python Problems &#x26; Solutions For Beginners</h3>\n<h4>Introduction to python taught through example problems. Solutions are included in embedded repl.it at the bottom of this page for you to practice and refactor.</h4>\n<h3>Python Practice Problems</h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*dMdMGwOJKHJ-5sOP.gif\" class=\"graf-image\" /></figure>\n<hr>\n<h4>Here are some other articles for reference if you need them:</h4>\n<p><a href=\"https://medium.com/geekculture/beginners-guide-to-python-e5a59b5bb64d\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/geekculture/beginners-guide-to-python-e5a59b5bb64d\"><strong>Beginners Guide To Python</strong><br />\n<em>My favorite language for maintainability is Python. It has simple, clean syntax, object encapsulation, good library…</em>medium.com</a><a href=\"https://medium.com/geekculture/beginners-guide-to-python-e5a59b5bb64d\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\"><strong>Python Study Guide for a JavaScript Programmer</strong><br />\n<em>A guide to commands in Python from what you know in JavaScript</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<hr>\n<h3>Here are the problems without solutions for you to practice with:</h3>\n<hr>\n<h3>Problem 1</h3>\n<p>Create a program that asks the user to enter their name and their age. Print out a message addressed to them that tells them the year that they will turn <code>100</code> years old.</p>\n<p>The <code>datetime</code> module supplies classes for manipulating dates and times.</p>\n<p>While date and time arithmetic is supported, the focus of the implementation is on efficient attribute extraction for output formatting and manipulation.</p>\n<p><a href=\"https://docs.python.org/3/library/datetime.html\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://docs.python.org/3/library/datetime.html\"><strong>datetime - Basic date and time types - Python 3.9.6 documentation</strong><br />\n<em>Only one concrete class, the class, is supplied by the module. The class can represent simple timezones with fixed…</em>docs.python.org</a><a href=\"https://docs.python.org/3/library/datetime.html\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<h3>Problem 2</h3>\n<p>Ask the user for a number. Depending on whether the number is <code>even</code> or <code>odd</code>, print out an appropriate message to the user.</p>\n<h4>Bonus:</h4>\n<ol>\n<li><span id=\"eebc\">If the number is a multiple of <code>4</code>, print out a different message.</span></li>\n<li><span id=\"306e\">Ask the user for two numbers: one number to check (call it num) and one number to divide by (check). If check divides evenly into num, tell that to the user. If not, print a different appropriate message.</span></li>\n</ol>\n<h3>Problem 3</h3>\n<p>Take a list and write a program that prints out all the elements of the list that are <code>less</code> than <code>5</code>.</p>\n<p>Extras:</p>\n<ol>\n<li><span id=\"fe03\">Instead of printing the elements one by one, make a new list that has all the elements less than <code>5</code> from this list in it and print out this new list.</span></li>\n<li><span id=\"186b\">Write this in one line of Python.</span></li>\n<li><span id=\"9cd1\">Ask the user for a number and return a list that contains only elements from the original list a that are smaller than that number given by the user.</span></li>\n</ol>\n<h3>Problem 4</h3>\n<p>Create a program that asks the user for a number and then prints out a list of all the divisors of that number. (If you don’t know what a divisor is, it is a number that divides evenly into another number.</p>\n<p>For example, <code>13</code> is a divisor of <code>26</code> because <code>26 / 13</code> has no remainder.)</p>\n<h3>Problem 5</h3>\n<p>Take two lists, and write a program that returns a list that contains only the elements that are <code>common between the lists (without duplicates)</code>. Make sure your program works on two lists of different sizes.</p>\n<p><a href=\"https://docs.python.org/3/library/random.html\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://docs.python.org/3/library/random.html\"><strong>random - Generate pseudo-random numbers - Python 3.9.6 documentation</strong><br />\n<em>Source code: Lib/random.py This module implements pseudo-random number generators for various distributions. For…</em>docs.python.org</a><a href=\"https://docs.python.org/3/library/random.html\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p>Bonus:</p>\n<ol>\n<li><span id=\"e18a\">Randomly generate two lists to test this.</span></li>\n<li><span id=\"148a\">Write this in one line of Python.</span></li>\n</ol>\n<h3>Problem 6</h3>\n<p>Ask the user for a string and print out whether this string is a <code>palindrome</code> or not. (A palindrome is a string that reads the same forwards and backwards.)</p>\n<blockquote>\n<p>Here’s 5 ways to reverse a string (courtesy of <a href=\"https://www.geeksforgeeks.org/reverse-string-python-5-different-ways/\" class=\"markup--anchor markup--pullquote-anchor\">geeksforgeeks</a>)</p>\n</blockquote>\n<hr>\n<h3>Problem 7</h3>\n<p>Let’s say I give you a list saved in a variable: a = <code>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</code>.</p>\n<p>Write one line of Python that takes this list a and makes a new list that has only the <code>even</code> elements of this list in it.</p>\n<h3>Problem 8</h3>\n<p>Make a two-player <code>Rock-Paper-Scissors</code> game.</p>\n<p><strong>Hint:</strong><br>\nAsk for player plays (using input), compare them. Print out a message of congratulations to the winner, and ask if the players want to start a new game.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*1_4w6u4D7EDi2r4h.png\" class=\"graf-image\" /></figure>### Problem 9\n<p>Generate a random number between <code>1 and 100 (including 1 and 100)</code>. Ask the user to guess the number, then tell them whether they guessed <code>too low</code>, <code>too high</code>, or <code>exactly right</code>.</p>\n<blockquote>\n<p><strong>Hint:</strong><br>\nRemember to use the user input from the very first exercise.</p>\n</blockquote>\n<p><strong>Extras:</strong><br>\nKeep the game going until the user types <code>“exit”</code>.<br>\nKeep track of how many guesses the user has taken, and when the game ends, print this out.</p>\n<h3>Problem 10</h3>\n<p>Write a program that asks the user how many Fibonacci numbers to generate and then generates them. Take this opportunity to think about how you can use functions. Make sure to ask the user to enter the number of numbers in the sequence to generate.</p>\n<p><strong>Hint:</strong><br>\nThe Fibonacci sequence is a sequence of numbers where the next number in the sequence is the sum of the previous two numbers in the sequence. The sequence looks like this: <code>1, 1, 2, 3, 5, 8, 13, …</code></p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*2xJsVLGikF6dg7qc.png\" class=\"graf-image\" /></figure>\n<hr>\n<h3>Intermediate Problems:</h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*hTU58jGsgkrszi76.gif\" class=\"graf-image\" /></figure>\n<hr>\n<h3>Problem 11</h3>\n<p>In linear algebra, <em>a Toeplitz matrix is one in which the elements on any given diagonal from top left to bottom right are identical.</em><br>\nHere is an example:</p>\n<pre><code>1 2 3 4 8\n5 1 2 3 4\n4 5 1 2 3\n7 4 5 1 2\n</code></pre>\n<p>Write a program to determine whether a given input is a <code>Toeplitz</code> matrix.</p>\n<h3>Problem 12</h3>\n<p>Given a positive integer <code>N</code>, find the smallest number of steps it will take to reach <code>1</code>.</p>\n<p>There are two kinds of permitted steps:<br>\n— -> You may decrement N to N — 1.<br>\n— -> If <code>a * b = N</code>, you may decrement <code>N to the larger of a and b</code>.</p>\n<p>For example, given 100, you can reach 1 in 5 steps with the following route:<br>\n<code>100 -> 10 -> 9 -> 3 -> 2 -> 1.</code></p>\n<h3>Problem 13</h3>\n<p>Consider the following scenario: there are <code>N</code> mice and <code>N</code> holes placed at integer points along a line. Given this, find a method that maps mice to holes such that the largest number of steps any mouse takes is minimized.</p>\n<p>Each move consists of moving one mouse <code>one</code> unit to the <code>left</code> or <code>right</code>, and only <code>one</code> mouse can fit inside each hole.</p>\n<p>For example, suppose the mice are positioned at <code>[1, 4, 9, 15]</code>, and the holes are located at <code>[10, -5, 0, 16]</code>. In this case, the best pairing would require us to send the mouse at <code>1</code> to the hole at <code>-5</code>, so our function should return <code>6</code>.</p>\n<h3>My Blog:</h3>\n<p><a href=\"https://master--bgoonz-blog.netlify.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://master--bgoonz-blog.netlify.app/\"><strong>Web-Dev-Hub</strong><br />\n<em>Memoization, Tabulation, and Sorting Algorithms by Example Why is looking at runtime not a reliable method of…</em>master--bgoonz-blog.netlify.app</a><a href=\"https://master--bgoonz-blog.netlify.app/\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\"><strong>A list of all of my articles to link to future posts</strong><br />\n<em>You should probably skip this one… seriously it’s just for internal use!</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<hr>\n<h1>Python</h1>\n<ul>\n<li>Python is an interpreted, high-level and general-purpose, dynamically typed programming language</li>\n<li>It is also Object oriented, modular oriented and a scripting language.</li>\n<li>In Python, everything is considered as an Object.</li>\n<li>A python file has an extension of .py</li>\n<li>Python follows Indentation to separate code blocks instead of flower brackets({}).</li>\n<li>\n<p>We can run a python file by the following command in cmd(Windows) or shell(mac/linux).</p>\n<p><code>python &#x3C;filename.py></code></p>\n</li>\n</ul>\n<h4>By default, the python doesn't require any imports to run a python file.</h4>\n<h2>Create and execute a program</h2>\n<ol>\n<li>Open up a terminal/cmd</li>\n<li>Create the program: nano/cat > nameProgram.py</li>\n<li>Write the program and save it</li>\n<li>python nameProgram.py</li>\n</ol>\n<br>\n<h3>Basic Datatypes</h3>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int</td>\n<td>Integer values [0, 1, -2, 3]</td>\n</tr>\n<tr>\n<td>float</td>\n<td>Floating point values [0.1, 4.532, -5.092]</td>\n</tr>\n<tr>\n<td>char</td>\n<td>Characters [a, b, @, !, `]</td>\n</tr>\n<tr>\n<td>str</td>\n<td>Strings [abc, AbC, A@B, sd!, `asa]</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>Boolean Values [True, False]</td>\n</tr>\n<tr>\n<td>char</td>\n<td>Characters [a, b, @, !, `]</td>\n</tr>\n<tr>\n<td>complex</td>\n<td>Complex numbers [2+3j, 4-1j]</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h2>Keywords</h2>\n<br>\n<table>\n<thead>\n<tr>\n<th>Keyword</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>break</td>\n<td>used to exit loop and used to exit</td>\n</tr>\n<tr>\n<td>char</td>\n<td>basic declaration of a type character</td>\n</tr>\n<tr>\n<td>const</td>\n<td>prefix declaration meaning variable can not be changed</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>go to bottom of loop in for, while loops</td>\n</tr>\n<tr>\n<td>class</td>\n<td>to define a class</td>\n</tr>\n<tr>\n<td>def</td>\n<td>to define a function</td>\n</tr>\n<tr>\n<td>elif</td>\n<td>shortcut for (else if) used in else if ladder</td>\n</tr>\n<tr>\n<td>else</td>\n<td>executable statement, part of \"if\" structure</td>\n</tr>\n<tr>\n<td>float</td>\n<td>basic declaration of floating point</td>\n</tr>\n<tr>\n<td>for</td>\n<td>executable statement, for loop</td>\n</tr>\n<tr>\n<td>from</td>\n<td>executable statement, used to import only specific objects from a package</td>\n</tr>\n<tr>\n<td>if</td>\n<td>executable statement</td>\n</tr>\n<tr>\n<td>import</td>\n<td>to import modules</td>\n</tr>\n<tr>\n<td>pass</td>\n<td>keyword to specify noting is happening in the codeblock, generally used in classes</td>\n</tr>\n<tr>\n<td>return</td>\n<td>executable statement with or without a value</td>\n</tr>\n<tr>\n<td>while</td>\n<td>executable statement, while loop</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h2>Operators</h2>\n<br>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Description</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>( )</td>\n<td>grouping parenthesis, function call, tuple declaration</td>\n<td></td>\n</tr>\n<tr>\n<td>[ ]</td>\n<td>array indexing, also declaring lists etc.</td>\n<td></td>\n</tr>\n<tr>\n<td>!</td>\n<td>relational not, complement, ! a yields true or false</td>\n<td></td>\n</tr>\n<tr>\n<td>~</td>\n<td>bitwise not, ones complement, ~a</td>\n<td></td>\n</tr>\n<tr>\n<td>-</td>\n<td>unary minus, - a</td>\n<td></td>\n</tr>\n<tr>\n<td>+</td>\n<td>unary plus, + a</td>\n<td></td>\n</tr>\n<tr>\n<td>*</td>\n<td>multiply, a * b</td>\n<td></td>\n</tr>\n<tr>\n<td>/</td>\n<td>divide, a / b</td>\n<td></td>\n</tr>\n<tr>\n<td>%</td>\n<td>modulo, a % b</td>\n<td></td>\n</tr>\n<tr>\n<td>+</td>\n<td>add, a + b</td>\n<td></td>\n</tr>\n<tr>\n<td>-</td>\n<td>subtract, a - b</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x3C;&#x3C;</td>\n<td>shift left, left operand is shifted left by right operand bits</td>\n<td></td>\n</tr>\n<tr>\n<td>>></td>\n<td>shift right, left operand is shifted right by right operand bits</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x3C;</td>\n<td>less than, result is true or false, a %lt; b</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x3C;=</td>\n<td>less than or equal, result is true or false, a &#x3C;= b</td>\n<td></td>\n</tr>\n<tr>\n<td>></td>\n<td>greater than, result is true or false, a > b</td>\n<td></td>\n</tr>\n<tr>\n<td>>=</td>\n<td>greater than or equal, result is true or false, a >= b</td>\n<td></td>\n</tr>\n<tr>\n<td>==</td>\n<td>equal, result is true or false, a == b</td>\n<td></td>\n</tr>\n<tr>\n<td>!=</td>\n<td>not equal, result is true or false, a != b</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x26;</td>\n<td>bitwise and, a &#x26; b</td>\n<td></td>\n</tr>\n<tr>\n<td>^</td>\n<td>bitwise exclusive or XOR, a ^ b</td>\n<td></td>\n</tr>\n<tr>\n<td>|</td>\n<td>bitwise or, a</td>\n<td>b</td>\n</tr>\n<tr>\n<td>&#x26;&#x26;, and</td>\n<td>relational and, result is true or false, a &#x3C; b &#x26;&#x26; c >= d</td>\n<td></td>\n</tr>\n<tr>\n<td>||, or</td>\n<td>relational or, result is true or false, a &#x3C; b || c >= d</td>\n<td></td>\n</tr>\n<tr>\n<td>=</td>\n<td>store or assignment</td>\n<td></td>\n</tr>\n<tr>\n<td>+=</td>\n<td>add and store</td>\n<td></td>\n</tr>\n<tr>\n<td>-=</td>\n<td>subtract and store</td>\n<td></td>\n</tr>\n<tr>\n<td>*=</td>\n<td>multiply and store</td>\n<td></td>\n</tr>\n<tr>\n<td>/=</td>\n<td>divide and store</td>\n<td></td>\n</tr>\n<tr>\n<td>%=</td>\n<td>modulo and store</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x3C;&#x3C;=</td>\n<td>shift left and store</td>\n<td></td>\n</tr>\n<tr>\n<td>>>=</td>\n<td>shift right and store</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x26;=</td>\n<td>bitwise and and store</td>\n<td></td>\n</tr>\n<tr>\n<td>^=</td>\n<td>bitwise exclusive or and store</td>\n<td></td>\n</tr>\n<tr>\n<td>|=</td>\n<td>bitwise or and store</td>\n<td></td>\n</tr>\n<tr>\n<td>,</td>\n<td>separator as in ( y=x,z=++x )</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Basic Data Structures</h3>\n<h3>List</h3>\n<ul>\n<li>List is a collection which is ordered and changeable. Allows duplicate members.</li>\n<li>Lists are created using square brackets:</li>\n</ul>\n<pre><code class=\"language-py\">thislist = [\"apple\", \"banana\", \"cherry\"]\n</code></pre>\n<ul>\n<li>List items are ordered, changeable, and allow duplicate values.</li>\n<li>List items are indexed, the first item has index <code>[0]</code>, the second item has index <code>[1]</code> etc.</li>\n<li>The list is changeable, meaning that we can change, add, and remove items in a list after it has been created.</li>\n<li>To determine how many items a list has, use the <code>len()</code> function.</li>\n<li>A list can contain different data types:</li>\n</ul>\n<pre><code class=\"language-py\">list1 = [\"abc\", 34, True, 40, \"male\"]\n</code></pre>\n<ul>\n<li>It is also possible to use the list() constructor when creating a new list</li>\n</ul>\n<pre><code class=\"language-py\">thislist = list((\"apple\", \"banana\", \"cherry\"))  # note the double round-brackets\n</code></pre>\n<h3>Tuple</h3>\n<ul>\n<li>Tuple is a collection which is ordered and unchangeable. Allows duplicate members.</li>\n<li>A tuple is a collection which is ordered and unchangeable.</li>\n<li>Tuples are written with round brackets.</li>\n</ul>\n<pre><code class=\"language-py\">thistuple = (\"apple\", \"banana\", \"cherry\")\n</code></pre>\n<ul>\n<li>Tuple items are ordered, unchangeable, and allow duplicate values.</li>\n<li>Tuple items are indexed, the first item has index <code>[0]</code>, the second item has index <code>[1]</code> etc.</li>\n<li>When we say that tuples are ordered, it means that the items have a defined order, and that order will not change.</li>\n<li>Tuples are unchangeable, meaning that we cannot change, add or remove items after the tuple has been created.</li>\n<li>Since tuple are indexed, tuples can have items with the same value:</li>\n<li>Tuples allow duplicate values:</li>\n</ul>\n<pre><code class=\"language-py\">thistuple = (\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\")\n</code></pre>\n<ul>\n<li>To determine how many items a tuple has, use the <code>len()</code>function:</li>\n</ul>\n<pre><code class=\"language-py\">thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(len(thistuple))\n</code></pre>\n<ul>\n<li>To create a tuple with only one item, you have to add a comma after the item, otherwise Python will not recognize it as a tuple.</li>\n</ul>\n<pre><code class=\"language-py\">thistuple = (\"apple\",)\nprint(type(thistuple))\n\n#NOT a tuple\nthistuple = (\"apple\")\nprint(type(thistuple))\n</code></pre>\n<ul>\n<li>It is also possible to use the tuple() constructor to make a tuple.</li>\n</ul>\n<pre><code class=\"language-py\">thistuple = tuple((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\nprint(thistuple)\n</code></pre>\n<h3>Set</h3>\n<ul>\n<li>Set is a collection which is unordered and unindexed. No duplicate members.</li>\n<li>A set is a collection which is both unordered and unindexed.</li>\n</ul>\n<pre><code class=\"language-py\">thisset = {\"apple\", \"banana\", \"cherry\"}\n</code></pre>\n<ul>\n<li>Set items are unordered, unchangeable, and do not allow duplicate values.</li>\n<li>Unordered means that the items in a set do not have a defined order.</li>\n<li>Set items can appear in a different order every time you use them, and cannot be referred to by index or key.</li>\n<li>Sets are unchangeable, meaning that we cannot change the items after the set has been created.</li>\n<li>Duplicate values will be ignored.</li>\n<li>To determine how many items a set has, use the <code>len()</code> method.</li>\n</ul>\n<pre><code class=\"language-py\">thisset = {\"apple\", \"banana\", \"cherry\"}\n\nprint(len(thisset))\n</code></pre>\n<ul>\n<li>Set items can be of any data type:</li>\n</ul>\n<pre><code class=\"language-py\">set1 = {\"apple\", \"banana\", \"cherry\"}\nset2 = {1, 5, 7, 9, 3}\nset3 = {True, False, False}\nset4 = {\"abc\", 34, True, 40, \"male\"}\n</code></pre>\n<ul>\n<li>It is also possible to use the <code>set()</code> constructor to make a set.</li>\n</ul>\n<pre><code class=\"language-py\">thisset = set((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\n</code></pre>\n<h3>Dictionary</h3>\n<ul>\n<li>Dictionary is a collection which is unordered and changeable. No duplicate members.</li>\n<li>Dictionaries are used to store data values in key:value pairs.</li>\n<li>Dictionaries are written with curly brackets, and have keys and values:</li>\n</ul>\n<pre><code class=\"language-py\">thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\n</code></pre>\n<ul>\n<li>Dictionary items are presented in key:value pairs, and can be referred to by using the key name.</li>\n</ul>\n<pre><code class=\"language-py\">thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nprint(thisdict[\"brand\"])\n</code></pre>\n<ul>\n<li>Dictionaries are changeable, meaning that we can change, add or remove items after the dictionary has been created.</li>\n<li>Dictionaries cannot have two items with the same key.</li>\n<li>Duplicate values will overwrite existing values.</li>\n<li>To determine how many items a dictionary has, use the <code>len()</code> function.</li>\n</ul>\n<pre><code class=\"language-py\">print(len(thisdict))\n</code></pre>\n<ul>\n<li>The values in dictionary items can be of any data type</li>\n</ul>\n<pre><code class=\"language-py\">thisdict = {\n  \"brand\": \"Ford\",\n  \"electric\": False,\n  \"year\": 1964,\n  \"colors\": [\"red\", \"white\", \"blue\"]\n}\n</code></pre>\n<h3>Conditional branching</h3>\n<pre><code class=\"language-py\">    if condition:\n        pass\n    elif condition2:\n        pass\n    else:\n        pass\n</code></pre>\n<h3>Loops</h3>\n<p>Python has two primitive loop commands:</p>\n<ol>\n<li>while loops</li>\n<li>for loops</li>\n</ol>\n<h4>While loop</h4>\n<ul>\n<li>With the <code>while</code> loop we can execute a set of statements as long as a condition is true.</li>\n<li>Example: Print i as long as i is less than 6</li>\n</ul>\n<pre><code class=\"language-py\">i = 1\nwhile i &#x3C; 6:\n  print(i)\n  i += 1\n</code></pre>\n<ul>\n<li>The while loop requires relevant variables to be ready, in this example we need to define an indexing variable, i, which we set to 1.</li>\n<li>With the <code>break</code> statement we can stop the loop even if the while condition is true</li>\n<li>With the continue statement we can stop the current iteration, and continue with the next.</li>\n<li>With the else statement we can run a block of code once when the condition no longer is true.</li>\n</ul>\n<h4>For loop</h4>\n<ul>\n<li>A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).</li>\n<li>This is less like the for keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.</li>\n<li>With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.</li>\n</ul>\n<pre><code class=\"language-py\">fruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n  print(x)\n</code></pre>\n<ul>\n<li>The for loop does not require an indexing variable to set beforehand.</li>\n<li>To loop through a set of code a specified number of times, we can use the range() function.</li>\n<li>The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number.</li>\n<li>The range() function defaults to increment the sequence by 1, however it is possible to specify the increment value by adding a third parameter: range(2, 30, 3).</li>\n<li>The else keyword in a for loop specifies a block of code to be executed when the loop is finished.\nA nested loop is a loop inside a loop.</li>\n<li>The \"inner loop\" will be executed one time for each iteration of the \"outer loop\":</li>\n</ul>\n<pre><code class=\"language-py\">adj = [\"red\", \"big\", \"tasty\"]\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nfor x in adj:\n  for y in fruits:\n    print(x, y)\n</code></pre>\n<ul>\n<li>for loops cannot be empty, but if you for some reason have a for loop with no content, put in the pass statement to avoid getting an error.</li>\n</ul>\n<pre><code class=\"language-py\">for x in [0, 1, 2]:\n  pass\n</code></pre>\n<h3>Function definition</h3>\n<pre><code class=\"language-py\">def function_name():\n    return\n</code></pre>\n<h3>Function call</h3>\n<pre><code class=\"language-py\">function_name()\n</code></pre>\n<ul>\n<li>We need not to specify the return type of the function.</li>\n<li>Functions by default return <code>None</code></li>\n<li>We can return any datatype.</li>\n</ul>\n<pre><code class=\"language-py\">def say_hi(name):\n    \"\"\"&#x3C;---- Multi-Line Comments and Docstrings\n    This is where you put your content for help() to inform the user\n    about what your function does and how to use it\n    \"\"\"\n    print(f\"Hello {name}!\")\n\nprint(say_hi(\"Bryan\"))  # Should get the print inside the function, then None\n# Boolean Values\n# Work the same as in JS, except they are title case: True and False\na = True\nb = False\n# Logical Operators\n# ! = not, || = or, &#x26;&#x26; = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values\n# Integers are numbers without a floating decimal point\nprint(type(3))  # type returns the type of whatever argument you pass in\n# Floating Point values are numbers with a floating decimal point\nprint(type(3.5))\n# Type Casting\n# You can convert between ints and floats (along with other types...)\nprint(float(3))  # If you convert a float to an int, it will truncate the decimal\nprint(int(4.5))\nprint(type(str(3)))\n# Python does not automatically convert types like JS\n# print(17.0 + ' heyooo ' + 17)  # TypeError\n# Arithmetic Operators\n# ** - exponent (comparable to Math.pow(num, pow))\n# // - integer division\n# There is no ++ or -- in Python\n# String Values\n# We can use single quotes, double quotes, or f'' for string formats\n# We can use triple single quotes for multiline strings\nprint(\n    \"\"\"This here's a story\nAll about how\nMy life got twist\nTurned upside down\n\"\"\"\n)\n# Three double quotes can also be used, but we typically reserve these for\n# multi-line comments and function docstrings (refer to lines 6-9)(Nice :D)\n# We use len() to get the length of something\nprint(len(\"Bryan G\"))  # 7 characters\nprint(len([\"hey\", \"ho\", \"hey\", \"hey\", \"ho\"]))  # 5 list items\nprint(len({1, 2, 3, 4, 5, 6, 7, 9}))  # 8 set items\n# We can index into strings, list, etc..self.\nname = \"Bryan\"\nfor i in range(len(name)):\n    print(name[i])  # B, r, y, a, n\n# We can index starting from the end as well, with negatives\noccupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!\n# NOTE: Indexing out of range will give you an IndexError\n# We can also get the index og things with the .index() method, similar to indexOf()\nprint(occupation.index(\"Stack\"))\nprint([\"Mike\", \"Barry\", \"Cole\", \"James\", \"Mark\"].index(\"Cole\"))\n# We can count how many times a substring/item appears in something as well\nprint(occupation.count(\"S\"))\nprint(\n    \"\"\"Now this here's a story all about how\nMy life got twist turned upside down\nI forget the rest but the the the potato\nsmells like the potato\"\"\".count(\n        \"the\"\n    )\n)\n# We concatenate the same as Javascript, but we can also multiply strings\nprint(\"dog \" + \"show\")\nprint(\"ha\" * 10)\n# We can use format for a multitude of things, from spaces to decimal places\nfirst_name = \"Bryan\"\nlast_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True\nprint(\"Hello There\".split())  # [Hello, There]\nprint(\"hello1\".isalpha())  # False,  must consist only of letters\nprint(\"hello1\".isalnum())  # True, must consist of only letters and numbers\nprint(\"3215235123\".isdecimal())  # True, must be all numbers\n# True, must consist of only spaces/tabs/newlines\nprint(\"       \\n     \".isspace())\n# False, index 0 must be upper case and the rest lower\nprint(\"Bryan Guner\".istitle())\nprint(\"Michael Lee\".istitle())  # True!\n# Duck Typing - If it walks like a duck, and talks like a duck, it must be a duck\n# Assignment - All like JS, but there are no special keywords like let or const\na = 3\nb = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# &#x3C; - Less than\n# > - Greater than\n# &#x3C;= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location\n# not - !\n# Precedence - Negative Signs(not) are applied first(part of each number)\n#            - Multiplication and Division(and) happen next\n#            - Addition and Subtraction(or) are the last step\n#  NOTE: Be careful when using not along with ==\nprint(not a == b)  # True\n# print(a == not b) # Syntax Error\nprint(a == (not b))  # This fixes it. Answer: False\n# Python does short-circuit evaluation\n# Assignment Operators - Mostly the same as JS except Python has **= and //= (int division)\n# Flow Control Statements - if, while, for\n# Note: Python smushes 'else if' into 'elif'!\nif 10 &#x3C; 1:\n    print(\"We don't get here\")\nelif 10 &#x3C; 5:\n    print(\"Nor here...\")\nelse:\n    print(\"Hey there!\")\n# Looping over a string\nfor c in \"abcdefgh\":\n    print(c)\n# Looping over a range\nfor i in range(5):\n    print(i + 1)\n# Looping over a list\nlst = [1, 2, 3, 4]\nfor i in lst:\n    print(i)\n# Looping over a dictionary\nspam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():\n    print(f\"{k}: {v}\")\n# While loops as long as the condition is True\n#  - Exit loop early with break\n#  - Exit iteration early with continue\nspam = 0\nwhile True:\n    print(\"Sike That's the wrong Numba\")\n    spam += 1\n    if spam &#x3C; 5:\n        continue\n    break\n\n# Functions - use def keyword to define a function in Python\ndef printCopyright():\n    print(\"Copyright 2021, Bgoonz\")\n\n# Lambdas are one liners! (Should be at least, you can use parenthesis to disobey)\navg = lambda num1, num2: print(num1 + num2)\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS\ndef greeting(name, saying=\"Hello\"):\n    print(saying, name)\n\ngreeting(\"Mike\")  # Hello Mike\ngreeting(\"Bryan\", saying=\"Hello there...\")\n# A common gotcha is using a mutable object for a default parameter\n# All invocations of the function reference the same mutable object\ndef append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n\n# Uses same item list unless otherwise stated which is counterintuitive\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\", []))\n# Errors - Unlike JS, if we pass the incorrect amount of arguments to a function,\n#          it will throw an error\n# avg(1)  # TypeError\n# avg(1, 2, 2) # TypeError\n# ----------------------------------- DAY 2 ----------------------------------------\n# Functions - * to get rest of position arguments as tuple\n#           - ** to get rest of keyword arguments as a dictionary\n# Variable Length positional arguments\ndef add(a, b, *args):\n    # args is a tuple of the rest of the arguments\n    total = a + b\n    for n in args:\n        total += n\n    return total\n\nprint(add(1, 2))  # args is None, returns 3\nprint(add(1, 2, 3, 4, 5, 6))  # args is (3, 4, 5, 6), returns 21\n# Variable Length Keyword Arguments\ndef print_names_and_countries(greeting, **kwargs):\n    # kwargs is a dictionary of the rest of the keyword arguments\n    for k, v in kwargs.items():\n        print(greeting, k, \"from\", v)\n\nprint_names_and_countries(\n    \"Hey there\", Monica=\"Sweden\", Mike=\"The United States\", Mark=\"China\"\n)\n# We can combine all of these together\ndef example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass\n\n# Lists are mutable arrays\nempty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False\n# Tuples are immutable lists of items\ntime_blocks = (\"AM\", \"PM\")\ncolors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence\n#   - stop - required, next number past last number in sequence\n#   - step - default: 1, difference between each number in sequence\nrange1 = range(5)  # [0,1,2,3,4]\nrange2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\nisOdd = lambda num: num % 2 == 1\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\") for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map\ndef toUpper(str):\n    return str.upper()\n\nupperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\nprint_len = lambda item: print(len(item))  # doing this to save myself some typing\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario\nprint(max(1, 2, 35, 1012, 1))\n# Min\nprint(min(1, 5, 2, 10))\nprint(min([1, 4, 7, 10]))\n# Sum\nprint(sum([1, 2, 4]))\n# Any\nprint(any([True, False, False]))\nprint(any([False, False, False]))\n# All\nprint(all([True, True, False]))\nprint(all([True, True, True]))\n# Dir returns all the attributes of an object including it's methods and dunder methods\nuser = {\"Name\": \"Bob\", \"Email\": \"bob@bob.com\"}\nprint(dir(user))\n# Importing packages and modules\n#  - Module - A Python code in a file or directory\n#  - Package - A module which is a directory containing an __init__.py file\n#  - Submodule - A module which is contained within a package\n#  - Name - An exported function, class, or variable in a module\n# Unlike JS, modules export ALL names contained within them without any special export key\n# Assuming we have the following package with four submodules\n#  math\n#  |  __init__.py\n#  | addition.py\n#  | subtraction.py\n#  | multiplication.py\n#  | division.py\n# If we peek into the addition.py file we see there's an add function\n# addition.py\n# We can import 'add' from other places because it's a 'name' and is automatically exported\ndef add(num1, num2):\n    return num1 + num2\n\n# Notice the . syntax because this package can import it's own submodules.\n# Our __init__.py has the following files\n# This imports the 'add' function\n# And now it's also re-exported in here as well\n# from .addition import add\n# These import and re-export the rest of the functions from the submodule\n# from .subtraction import subtract\n# from .division import divide\n# from .multiplication import multiply\n# So if we have a script.py and want to import add, we could do it many ways\n# This will load and execute the 'math/__init__.py' file and give\n# us an object with the exported names in 'math/__init__.py'\nimport math\n# print(math.add(1,2))\n# This imports JUST the add from 'math/__init__.py'\n# from math import add\n# print(add(1, 2))\n# This skips importing from 'math/__init__.py' (although it still runs)\n# and imports directly from the addition.py file\n# from math.addition import add\n# This imports all the functions individually from 'math/__init__.py'\n# from math import add, subtract, multiply, divide\n# print(add(1, 2))\n# print(subtract(2, 1))\n# This imports 'add' renames it to 'add_some_numbers'\n# from math import add as add_some_numbers\n# --------------------------------------- DAY 3 ---------------------------------------\n# Classes, Methods, and Properties\nclass AngryBird:\n    # Slots optimize property access and memory usage and prevent you\n    # from arbitrarily assigning new properties the instance\n    __slots__ = [\"_x\", \"_y\"]\n    # Constructor\n    def __init__(self, x=0, y=0):\n        # Doc String\n        \"\"\"\n        Construct a new AngryBird by setting it's position to (0, 0)\n        \"\"\"\n        ## Instance Variables\n        self._x = x\n        self._y = y\n    # Instance Method\n    def move_up_by(self, delta):\n        self._y += delta\n    # Getter\n    @property\n    def x(self):\n        return self._x\n    # Setter\n    @x.setter\n    def x(self, value):\n        if value &#x3C; 0:\n            value = 0\n        self._x = value\n    @property\n    def y(self):\n        return self._y\n    @y.setter\n    def y(self, value):\n        self._y = value\n    # Dunder Repr... called by 'print'\n    def __repr__(self):\n        return f\"&#x3C;AngryBird ({self._x}, {self._y})>\"\n\n# JS to Python Classes cheat table\n#        JS                    Python\n#   constructor()         def __init__(self):\n#      super()            super().__init__()\n#   this.property           self.property\n#    this.method            self.method()\n# method(arg1, arg2){}    def method(self, arg1, ...)\n# get someProperty(){}    @property\n# set someProperty(){}    @someProperty.setter\n# List Comprehensions are a way to transform a list from one format to another\n#  - Pythonic Alternative to using map or filter\n#  - Syntax of a list comprehension\n#     - new_list = [value loop condition]\n# Using a for loop\nsquares = []\nfor i in range(10):\n    squares.append(i ** 2)\nprint(squares)\n# value = i ** 2\n# loop = for i in range(10)\nsquares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))\n</code></pre>"},{"url":"/docs/python/","relativePath":"docs/python/index.md","relativeDir":"docs/python","base":"index.md","name":"index","frontmatter":{"title":"My Python Docs","weight":0,"excerpt":"Python","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<br>\n<h1>  Python Resources</h1>\n<br>\n<iframe class=\"inner\" src=\"https://ds-unit-5-lambda.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<h2>My Python Docs:</h2>\n<h2><a href=\"https://bgoonz42.gitbook.io/datastructures-in-pytho/\">My Python Website</a></h2>\n<h1>Python Study Guide for a JavaScript Programmer</h1>\n<p>A guide to commands in Python from what you know in JavaScript</p>\n<hr>\n<h3>Python Study Guide for a JavaScript Programmer</h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*3V9VOfPk_hrFdbEAd3j-QQ.png\" class=\"graf-image\" /></figure>### Applications of Tutorial & Cheat Sheet Respectivley (At Bottom Of Tutorial):\n<h3>Basics</h3>\n<ul>\n<li><span id=\"f893\"><strong>PEP8</strong> : Python Enhancement Proposals, style-guide for Python.</span></li>\n<li><span id=\"c0bf\"><code>print</code> is the equivalent of <code>console.log</code>.</span></li>\n</ul>\n<blockquote>\n<p>‘print() == console.log()’</p>\n</blockquote>\n<h3><code>#</code> is used to make comments in your code.</h3>\n<pre><code>def foo():\n    \"\"\"\n    The foo function does many amazing things that you\n    should not question. Just accept that it exists and\n    use it with caution.\n    \"\"\"\n    secretThing()\n</code></pre>\n<blockquote>\n<p><em>Python has a built in help function that let’s you see a description of the source code without having to navigate to it… “-SickNasty … Autor Unknown”</em></p>\n</blockquote>\n<hr>\n<h3>Numbers</h3>\n<ul>\n<li><span id=\"4060\">Python has three types of numbers:</span></li>\n<li><span id=\"8aef\"><strong>Integer</strong></span></li>\n<li><span id=\"723f\"><strong>Positive and Negative Counting Numbers.</strong></span></li>\n</ul>\n<p>No Decimal Point</p>\n<blockquote>\n<p>Created by a literal non-decimal point number … <strong>or</strong> … with the <code>int()</code> constructor.</p>\n</blockquote>\n<pre><code>print(3) # => 3\nprint(int(19)) # => 19\nprint(int()) # => 0\n</code></pre>\n<p><strong>3. Complex Numbers</strong></p>\n<blockquote>\n<p>Consist of a real part and imaginary part.</p>\n</blockquote>\n<h4>Boolean is a subtype of integer in Python.🤷‍♂️</h4>\n<blockquote>\n<p>If you came from a background in JavaScript and learned to accept the premise(s) of the following meme…</p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*eC4EvZcv6hhH88jX.png\" class=\"graf-image\" /></figure>Than I am sure you will find the means to suspend your disbelief.\n<pre><code>print(2.24) # => 2.24\nprint(2.) # => 2.0\nprint(float()) # => 0.0\nprint(27e-5) # => 0.00027\n</code></pre>\n<h3>KEEP IN MIND:</h3>\n<blockquote>\n<p><strong>The</strong> <code>i</code> <strong>is switched to a</strong> <code>j</code> <strong>in programming.</strong></p>\n</blockquote>\n<p><span class=\"graf-dropCap\">T</span>*his is because the letter i is common place as the de facto index for any and all enumerable entities so it just makes sense not to compete for name-*<strong><em>space</em></strong> <em>when there’s another 25 letters that don’t get used for every loop under the sun. My most medium apologies to Leonhard Euler.</em></p>\n<pre><code>print(7j) # => 7j\nprint(5.1+7.7j)) # => 5.1+7.7j\nprint(complex(3, 5)) # => 3+5j\nprint(complex(17)) # => 17+0j\nprint(complex()) # => 0j\n</code></pre>\n<ul>\n<li><span id=\"2579\"><strong>Type Casting</strong> : The process of converting one number to another.</span></li>\n</ul>\n<!-- -->\n<pre><code># Using Float\nprint(17)               # => 17\nprint(float(17))        # => 17.0\n\n# Using Int\nprint(17.0)             # => 17.0\nprint(int(17.0))        # => 17\n\n# Using Str\nprint(str(17.0) + ' and ' + str(17))        # => 17.0 and 17\n</code></pre>\n<p><strong>The arithmetic operators are the same between JS and Python, with two additions:</strong></p>\n<ul>\n<li><span id=\"8cf4\"><em>“**” : Double asterisk for exponent.</em></span></li>\n<li><span id=\"03b4\"><em>“//” : Integer Division.</em></span></li>\n<li><span id=\"2ce5\"><strong>There are no spaces between math operations in Python.</strong></span></li>\n<li><span id=\"1686\"><strong>Integer Division gives the other part of the number from Module; it is a way to do round down numbers replacing</strong> <code>Math.floor()</code> <strong>in JS.</strong></span></li>\n<li><span id=\"a6a3\"><strong>There are no</strong> <code>++</code> <strong>and</strong> <code>--</code> <strong>in Python, the only shorthand operators are:</strong></span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/600/0*Ez_1PZ93N4FfvkRr.png\" class=\"graf-image\" /></figure>\n<hr>\n<h3>Strings</h3>\n<ul>\n<li><span id=\"e98c\">Python uses both single and double quotes.</span></li>\n<li><span id=\"225e\">You can escape strings like so <code>'Jodi asked, \"What\\'s up, Sam?\"'</code></span></li>\n<li><span id=\"9f74\">Multiline strings use triple quotes.</span></li>\n</ul>\n<!-- -->\n<pre><code>print('''My instructions are very long so to make them\nmore readable in the code I am putting them on\nmore than one line. I can even include \"quotes\"\nof any kind because they won't get confused with\nthe end of the string!''')\n</code></pre>\n<p><strong>Use the</strong> <code>len()</code> <strong>function to get the length of a string.</strong></p>\n<pre><code>print(len(“Spaghetti”)) # => 9\n</code></pre>\n<h3><strong>Python uses</strong> <code>zero-based indexing</code></h3>\n<h4>Python allows negative indexing (thank god!)</h4>\n<pre><code>print(“Spaghetti”[-1]) # => i\n\nprint(“Spaghetti”[-4]) # => e\n</code></pre>\n<ul>\n<li><span id=\"7567\">Python let’s you use ranges</span></li>\n</ul>\n<p>You can think of this as roughly equivalent to the slice method called on a JavaScript object or string… <em>(mind you that in JS … strings are wrapped in an object (under the hood)… upon which the string methods are actually called. As a immutable privative type</em> <strong>*by textbook definition**</strong>, a string literal could not hope to invoke most of it’s methods without violating the state it was bound to on initialization if it were not for this bit of syntactic sugar.)*</p>\n<pre><code>print(“Spaghetti”[1:4]) # => pag\nprint(“Spaghetti”[4:-1]) # => hett\nprint(“Spaghetti”[4:4]) # => (empty string)\n</code></pre>\n<ul>\n<li><span id=\"1366\">The end range is exclusive just like <code>slice</code> in JS.</span></li>\n</ul>\n<!-- -->\n<pre><code># Shortcut to get from the beginning of a string to a certain index.\nprint(\"Spaghetti\"[:4])  # => Spag\nprint(\"Spaghetti\"[:-1])    # => Spaghett\n\n# Shortcut to get from a certain index to the end of a string.\nprint(\"Spaghetti\"[1:])  # => paghetti\nprint(\"Spaghetti\"[-4:])    # => etti\n</code></pre>\n<ul>\n<li><span id=\"c786\">The <code>index</code> string function is the equiv. of <code>indexOf()</code> in JS</span></li>\n</ul>\n<!-- -->\n<pre><code>print(\"Spaghetti\".index(\"h\"))    # => 4\nprint(\"Spaghetti\".index(\"t\"))    # => 6\n</code></pre>\n<ul>\n<li><span id=\"fbb6\">The <code>count</code> function finds out how many times a substring appears in a string… pretty nifty for a hard coded feature of the language.</span></li>\n</ul>\n<!-- -->\n<pre><code>print(\"Spaghetti\".count(\"h\"))    # => 1\nprint(\"Spaghetti\".count(\"t\"))    # => 2\nprint(\"Spaghetti\".count(\"s\"))    # => 0\nprint('''We choose to go to the moon in this decade and do the other things,\nnot because they are easy, but because they are hard, because that goal will\nserve to organize and measure the best of our energies and skills, because that\nchallenge is one that we are willing to accept, one we are unwilling to\npostpone, and one which we intend to win, and the others, too.\n'''.count('the '))                # => 4\n</code></pre>\n<ul>\n<li><span id=\"7816\"><strong>You can use</strong> <code>+</code> <strong>to concatenate strings, just like in JS.</strong></span></li>\n<li><span id=\"ed0a\"><strong>You can also use “*” to repeat strings or multiply strings.</strong></span></li>\n<li><span id=\"f95c\"><strong>Use the</strong> <code>format()</code> <strong>function to use placeholders in a string to input values later on.</strong></span></li>\n</ul>\n<!-- -->\n<pre><code>first_name = \"Billy\"\nlast_name = \"Bob\"\nprint('Your name is {0} {1}'.format(first_name, last_name))  # => Your name is Billy Bob\n</code></pre>\n<ul>\n<li><span id=\"445b\"><em>Shorthand way to use format function is:<br>\n_`print(f'Your name is {first</em>name} {last_name}')`</span></li>\n</ul>\n<h4>Some useful string methods.</h4>\n<ul>\n<li><span id=\"118c\"><strong>Note that in JS</strong> <code>join</code> <strong>is used on an Array, in Python it is used on String.</strong></span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*eE3E5H0AoqkhqK1z.png\" class=\"graf-image\" /></figure>-   <span id=\"e95e\">There are also many handy testing methods.</span>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Q0CMqFd4PozLDFPB.png\" class=\"graf-image\" /></figure>\n<hr>\n<h3>Variables and Expressions</h3>\n<ul>\n<li><span id=\"a255\"><strong>Duck-Typing</strong> : Programming Style which avoids checking an object’s type to figure out what it can do.</span></li>\n<li><span id=\"6e70\">Duck Typing is the fundamental approach of Python.</span></li>\n<li><span id=\"5666\">Assignment of a value automatically declares a variable.</span></li>\n</ul>\n<!-- -->\n<pre><code>a = 7\nb = 'Marbles'\nprint(a)         # => 7\nprint(b)         # => Marbles\n</code></pre>\n<ul>\n<li><span id=\"f6cf\"><strong><em>You can chain variable assignments to give multiple var names the same value.</em></strong></span></li>\n</ul>\n<h4>Use with caution as this is highly unreadable</h4>\n<pre><code>count = max = min = 0\nprint(count)           # => 0\nprint(max)             # => 0\nprint(min)             # => 0\n</code></pre>\n<h4>The value and type of a variable can be re-assigned at any time.</h4>\n<pre><code>a = 17\nprint(a)         # => 17\na = 'seventeen'\nprint(a)         # => seventeen\n</code></pre>\n<ul>\n<li><span id=\"4605\"><code>NaN</code> _does not exist in Python, but you can 'create' it like so:<br>\n_<code>print(float(\"nan\"))</code></span></li>\n<li><span id=\"d150\"><em>Python replaces</em> <code>null</code> <em>with</em> <code>none</code><em>.</em></span></li>\n<li><span id=\"6fa7\"><code>none</code> <strong><em>is an object</em></strong> <em>and can be directly assigned to a variable.</em></span></li>\n</ul>\n<blockquote>\n<p>Using none is a convenient way to check to see why an action may not be operating correctly in your program.</p>\n</blockquote>\n<hr>\n<h3>Boolean Data Type</h3>\n<ul>\n<li><span id=\"b843\">One of the biggest benefits of Python is that it reads more like English than JS does.</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*HQpndNhm1Z_xSoHb.png\" class=\"graf-image\" /></figure># Logical AND\n    print(True and True)    # => True\n    print(True and False)   # => False\n    print(False and False)  # => False\n<pre><code># Logical OR\nprint(True or True)     # => True\nprint(True or False)    # => True\nprint(False or False)   # => False\n\n# Logical NOT\nprint(not True)             # => False\nprint(not False and True)   # => True\nprint(not True or False)    # => False\n</code></pre>\n<ul>\n<li><span id=\"18cc\">By default, Python considers an object to be true UNLESS it is one of the following:</span></li>\n<li><span id=\"6e0a\">Constant <code>None</code> or <code>False</code></span></li>\n<li><span id=\"9552\">Zero of any numeric type.</span></li>\n<li><span id=\"e7ce\">Empty Sequence or Collection.</span></li>\n<li><span id=\"11d6\"><code>True</code> and <code>False</code> must be capitalized</span></li>\n</ul>\n<hr>\n<h3>Comparison Operators</h3>\n<ul>\n<li><span id=\"a4fa\">Python uses all the same equality operators as JS.</span></li>\n<li><span id=\"7f98\">In Python, equality operators are processed from left to right.</span></li>\n<li><span id=\"fb68\">Logical operators are processed in this order:</span></li>\n<li><span id=\"bf08\"><strong>NOT</strong></span></li>\n<li><span id=\"4888\"><strong>AND</strong></span></li>\n<li><span id=\"2c55\"><strong>OR</strong></span></li>\n</ul>\n<blockquote>\n<p>Just like in JS, you can use <code>parentheses</code> to change the inherent order of operations.</p>\n</blockquote>\n<blockquote>\n<p><strong>Short Circuit</strong> : Stopping a program when a <code>true</code> or <code>false</code> has been reached.</p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*qHzGRLTOMTf30miT.png\" class=\"graf-image\" /></figure>\n<hr>\n<h3>Identity vs Equality</h3>\n<pre><code>print (2 == '2')    # => False\nprint (2 is '2')    # => False\n\nprint (\"2\" == '2')    # => True\nprint (\"2\" is '2')    # => True\n\n# There is a distinction between the number types.\nprint (2 == 2.0)    # => True\nprint (2 is 2.0)    # => False\n</code></pre>\n<ul>\n<li><span id=\"c5a5\">In the Python community it is better to use <code>is</code> and <code>is not</code> over <code>==</code> or <code>!=</code></span></li>\n</ul>\n<hr>\n<h3>If Statements</h3>\n<pre><code>if name == 'Monica':\n    print('Hi, Monica.')\n\nif name == 'Monica':\n    print('Hi, Monica.')\nelse:\n    print('Hello, stranger.')\n\nif name == 'Monica':\n    print('Hi, Monica.')\nelif age &#x3C; 12:\n    print('You are not Monica, kiddo.')\nelif age > 2000:\n   print('Unlike you, Monica is not an undead, immortal vampire.')\nelif age > 100:\n   print('You are not Monica, grannie.')\n</code></pre>\n<blockquote>\n<p>Remember the order of <code>elif</code> statements matter.</p>\n</blockquote>\n<hr>\n<h3>While Statements</h3>\n<pre><code>spam = 0\nwhile spam &#x3C; 5:\n  print('Hello, world.')\n  spam = spam + 1\n</code></pre>\n<ul>\n<li><span id=\"c7f3\"><code>Break</code> statement also exists in Python.</span></li>\n</ul>\n<!-- -->\n<pre><code>spam = 0\nwhile True:\n  print('Hello, world.')\n  spam = spam + 1\n  if spam >= 5:\n    break\n</code></pre>\n<ul>\n<li><span id=\"7a99\">As are <code>continue</code> statements</span></li>\n</ul>\n<!-- -->\n<pre><code>spam = 0\nwhile True:\n  print('Hello, world.')\n  spam = spam + 1\n  if spam &#x3C; 5:\n    continue\n  break\n</code></pre>\n<hr>\n<h3>Try/Except Statements</h3>\n<ul>\n<li><span id=\"72ec\">Python equivalent to <code>try/catch</code></span></li>\n</ul>\n<!-- -->\n<pre><code>a = 321\ntry:\n    print(len(a))\nexcept:\n    print('Silently handle error here')\n\n    # Optionally include a correction to the issue\n    a = str(a)\n    print(len(a)\n\na = '321'\ntry:\n    print(len(a))\nexcept:\n    print('Silently handle error here')\n\n    # Optionally include a correction to the issue\n    a = str(a)\n    print(len(a))\n</code></pre>\n<ul>\n<li><span id=\"dcd1\">You can name an error to give the output more specificity.</span></li>\n</ul>\n<!-- -->\n<pre><code>a = 100\nb = 0\ntry:\n    c = a / b\nexcept ZeroDivisionError:\n    c = None\nprint(c)\n</code></pre>\n<ul>\n<li><span id=\"4027\">You can also use the <code>pass</code> commmand to by pass a certain error.</span></li>\n</ul>\n<!-- -->\n<pre><code>a = 100\nb = 0\ntry:\n    print(a / b)\nexcept ZeroDivisionError:\n    pass\n</code></pre>\n<ul>\n<li><span id=\"030b\">The <code>pass</code> method won't allow you to bypass every single error so you can chain an exception series like so:</span></li>\n</ul>\n<!-- -->\n<pre><code>a = 100\n# b = \"5\"\ntry:\n    print(a / b)\nexcept ZeroDivisionError:\n    pass\nexcept (TypeError, NameError):\n    print(\"ERROR!\")\n</code></pre>\n<ul>\n<li><span id=\"bf45\">You can use an <code>else</code> statement to end a chain of <code>except</code> statements.</span></li>\n</ul>\n<!-- -->\n<pre><code># tuple of file names\nfiles = ('one.txt', 'two.txt', 'three.txt')\n\n# simple loop\nfor filename in files:\n    try:\n        # open the file in read mode\n        f = open(filename, 'r')\n    except OSError:\n        # handle the case where file does not exist or permission is denied\n        print('cannot open file', filename)\n    else:\n        # do stuff with the file object (f)\n        print(filename, 'opened successfully')\n        print('found', len(f.readlines()), 'lines')\n        f.close()\n</code></pre>\n<ul>\n<li><span id=\"0e91\"><code>finally</code> is used at the end to clean up all actions under any circumstance.</span></li>\n</ul>\n<!-- -->\n<pre><code>def divide(x, y):\n    try:\n        result = x / y\n    except ZeroDivisionError:\n        print(\"Cannot divide by zero\")\n    else:\n        print(\"Result is\", result)\n    finally:\n        print(\"Finally...\")\n</code></pre>\n<ul>\n<li><span id=\"84ee\">Using duck typing to check to see if some value is able to use a certain method.</span></li>\n</ul>\n<!-- -->\n<pre><code># Try a number - nothing will print out\na = 321\nif hasattr(a, '__len__'):\n    print(len(a))\n\n# Try a string - the length will print out (4 in this case)\nb = \"5555\"\nif hasattr(b, '__len__'):\n    print(len(b))\n</code></pre>\n<hr>\n<h3>Pass</h3>\n<ul>\n<li><span id=\"2b80\">Pass Keyword is required to write the JS equivalent of :</span></li>\n</ul>\n<!-- -->\n<pre><code>if (true) {\n}\n\nwhile (true) {}\n\nif True:\n  pass\n\nwhile True:\n  pass\n</code></pre>\n<hr>\n<h3>Functions</h3>\n<ul>\n<li><span id=\"7091\"><strong>Function definition includes:</strong></span></li>\n<li><span id=\"1f11\"><strong>The</strong> <code>def</code> <strong>keyword</strong></span></li>\n<li><span id=\"ec14\"><strong>The name of the function</strong></span></li>\n<li><span id=\"7733\"><strong>A list of parameters enclosed in parentheses.</strong></span></li>\n<li><span id=\"1516\"><strong>A colon at the end of the line.</strong></span></li>\n<li><span id=\"b2dd\"><strong>One tab indentation for the code to run.</strong></span></li>\n<li><span id=\"bcef\"><strong>You can use default parameters just like in JS</strong></span></li>\n</ul>\n<!-- -->\n<pre><code>def greeting(name, saying=\"Hello\"):\n    print(saying, name)\n\ngreeting(\"Monica\")\n# Hello Monica\n\ngreeting(\"Barry\", \"Hey\")\n# Hey Barry\n</code></pre>\n<h4><strong>Keep in mind, default parameters must always come after regular parameters.</strong></h4>\n<pre><code># THIS IS BAD CODE AND WILL NOT RUN\ndef increment(delta=1, value):\n    return delta + value\n</code></pre>\n<ul>\n<li><span id=\"c1aa\"><em>You can specify arguments by name without destructuring in Python.</em></span></li>\n</ul>\n<!-- -->\n<pre><code>def greeting(name, saying=\"Hello\"):\n    print(saying, name)\n\n# name has no default value, so just provide the value\n# saying has a default value, so use a keyword argument\ngreeting(\"Monica\", saying=\"Hi\")\n</code></pre>\n<ul>\n<li><span id=\"54ac\">The <code>lambda</code> keyword is used to create anonymous functions and are supposed to be <code>one-liners</code>.</span></li>\n</ul>\n<p><code>toUpper = lambda s: s.upper()</code></p>\n<hr>\n<h3>Notes</h3>\n<h4>Formatted Strings</h4>\n<blockquote>\n<p>Remember that in Python join() is called on a string with an array/list passed in as the argument.<br>\nPython has a very powerful formatting engine.<br>\nformat() is also applied directly to strings.</p>\n</blockquote>\n<pre><code>shopping_list = [‘bread’,’milk’,’eggs’]\nprint(‘,’.join(shopping_list))\n</code></pre>\n<h3>Comma Thousands Separator</h3>\n<pre><code>print(‘{:,}’.format(1234567890))\n‘1,234,567,890’\n</code></pre>\n<h3>Date and Time</h3>\n<pre><code>d = datetime.datetime(2020, 7, 4, 12, 15, 58)\nprint(‘{:%Y-%m-%d %H:%M:%S}’.format(d))\n‘2020–07–04 12:15:58’\n</code></pre>\n<h3>Percentage</h3>\n<pre><code>points = 190\ntotal = 220\nprint(‘Correct answers: {:.2%}’.format(points/total))\nCorrect answers: 86.36%\n</code></pre>\n<h3>Data Tables</h3>\n<pre><code>width=8\nprint(‘ decimal hex binary’)\nprint(‘-’*27)\nfor num in range(1,16):\nfor base in ‘dXb’:\nprint(‘{0:{width}{base}}’.format(num, base=base, width=width), end=’ ‘)\nprint()\nGetting Input from the Command Line\nPython runs synchronously, all programs and processes will stop when listening for a user input.\nThe input function shows a prompt to a user and waits for them to type ‘ENTER’.\nScripts vs Programs\nProgramming Script : A set of code that runs in a linear fashion.\nThe largest difference between scripts and programs is the level of complexity and purpose. Programs typically have many UI’s.\n</code></pre>\n<p><strong>Python can be used to display html, css, and JS.</strong><br>\n<em>It is common to use Python as an API (Application Programming Interface)</em></p>\n<h4>Structured Data</h4>\n<h4>Sequence : The most basic data structure in Python where the index determines the order.</h4>\n<blockquote>\n<p>List<br>\nTuple<br>\nRange<br>\nCollections : Unordered data structures, hashable values.</p>\n</blockquote>\n<hr>\n<h4>Dictionaries Sets</h4>\n<h4>Iterable : Generic name for a sequence or collection; any object that can be iterated through.</h4>\n<h4>Can be mutable or immutable. Built In Data Types</h4>\n<hr>\n<h3>Lists are the python equivalent of arrays.</h3>\n<pre><code>empty_list = []\ndepartments = [‘HR’,’Development’,’Sales’,’Finance’,’IT’,’Customer Support’]\n</code></pre>\n<h3>You can instantiate</h3>\n<pre><code>specials = list()\n</code></pre>\n<h4>Test if a value is in a list.</h4>\n<pre><code>print(1 in [1, 2, 3]) #> True\nprint(4 in [1, 2, 3]) #> False\n# Tuples : Very similar to lists, but they are immutable\n</code></pre>\n<h4>Instantiated with parentheses</h4>\n<pre><code>time_blocks = (‘AM’,’PM’)\n</code></pre>\n<h4>Sometimes instantiated without</h4>\n<pre><code>colors = ‘red’,’blue’,’green’\nnumbers = 1, 2, 3\n</code></pre>\n<h4>Tuple() built in can be used to convert other data into a tuple</h4>\n<pre><code>tuple(‘abc’) # returns (‘a’, ‘b’, ‘c’)\ntuple([1,2,3]) # returns (1, 2, 3)\n# Think of tuples as constant variables.\n</code></pre>\n<h4>Ranges : A list of numbers which can’t be changed; often used with for loops.</h4>\n<p><strong>Declared using one to three parameters</strong>.</p>\n<blockquote>\n<p>Start : opt. default 0, first # in sequence.<br>\nStop : required next number past the last number in the sequence.<br>\nStep : opt. default 1, difference between each number in the sequence.</p>\n</blockquote>\n<pre><code>range(5) # [0, 1, 2, 3, 4]\nrange(1,5) # [1, 2, 3, 4]\nrange(0, 25, 5) # [0, 5, 10, 15, 20]\nrange(0) # [ ]\nfor let (i = 0; i &#x3C; 5; i++)\nfor let (i = 1; i &#x3C; 5; i++)\nfor let (i = 0; i &#x3C; 25; i+=5)\nfor let(i = 0; i = 0; i++)\n# Keep in mind that stop is not included in the range.\n</code></pre>\n<h4>Dictionaries : Mappable collection where a hashable value is used as a key to ref. an object stored in the dictionary.</h4>\n<h4>Mutable.</h4>\n<pre><code>a = {‘one’:1, ‘two’:2, ‘three’:3}\nb = dict(one=1, two=2, three=3)\nc = dict([(‘two’, 2), (‘one’, 1), (‘three’, 3)])\n# a, b, and c are all equal\n</code></pre>\n<p><strong><em>Declared with curly braces of the built in dict()</em></strong></p>\n<blockquote>\n<p><em>Benefit of dictionaries in Python is that it doesn’t matter how it is defined, if the keys and values are the same the dictionaries are considered equal.</em></p>\n</blockquote>\n<p><strong>Use the in operator to see if a key exists in a dictionary.</strong></p>\n<p><span class=\"graf-dropCap\">S</span><strong>ets : Unordered collection of distinct objects; objects that need to be hashable.</strong></p>\n<blockquote>\n<p><em>Always be unique, duplicate items are auto dropped from the set.</em></p>\n</blockquote>\n<h4>Common Uses:</h4>\n<blockquote>\n<p>Removing Duplicates<br>\nMembership Testing<br>\nMathematical Operators: Intersection, Union, Difference, Symmetric Difference.</p>\n</blockquote>\n<p><strong>Standard Set is mutable, Python has a immutable version called frozenset.<br>\nSets created by putting comma seperated values inside braces:</strong></p>\n<pre><code>school_bag = {‘book’,’paper’,’pencil’,’pencil’,’book’,’book’,’book’,’eraser’}\nprint(school_bag)\n</code></pre>\n<h4>Also can use set constructor to automatically put it into a set.</h4>\n<pre><code>letters = set(‘abracadabra’)\nprint(letters)\n#Built-In Functions\n#Functions using iterables\n</code></pre>\n<p><strong>filter(function, iterable) : creates new iterable of the same type which includes each item for which the function returns true.</strong></p>\n<p><strong>map(function, iterable) : creates new iterable of the same type which includes the result of calling the function on every item of the iterable.</strong></p>\n<p><strong>sorted(iterable, key=None, reverse=False) : creates a new sorted list from the items in the iterable.</strong></p>\n<p><strong>Output is always a list</strong></p>\n<p><strong>key: opt function which coverts and item to a value to be compared.</strong></p>\n<p><strong>reverse: optional boolean.</strong></p>\n<p><strong>enumerate(iterable, start=0) : starts with a sequence and converts it to a series of tuples</strong></p>\n<pre><code>quarters = [‘First’, ‘Second’, ‘Third’, ‘Fourth’]\nprint(enumerate(quarters))\nprint(enumerate(quarters, start=1))\n</code></pre>\n<h4>(0, ‘First’), (1, ‘Second’), (2, ‘Third’), (3, ‘Fourth’)</h4>\n<h4>(1, ‘First’), (2, ‘Second’), (3, ‘Third’), (4, ‘Fourth’)</h4>\n<blockquote>\n<p>zip(*iterables) : creates a zip object filled with tuples that combine 1 to 1 the items in each provided iterable.<br>\nFunctions that analyze iterable</p>\n</blockquote>\n<p><strong>len(iterable) : returns the count of the number of items.</strong></p>\n<p><strong>max(*args, key=None) : returns the largest of two or more arguments.</strong></p>\n<p><strong>max(iterable, key=None) : returns the largest item in the iterable.</strong></p>\n<p><em>key optional function which converts an item to a value to be compared.<br>\nmin works the same way as max</em></p>\n<p><strong>sum(iterable) : used with a list of numbers to generate the total.</strong></p>\n<p><em>There is a faster way to concatenate an array of strings into one string, so do not use sum for that.</em></p>\n<p><strong>any(iterable) : returns True if any items in the iterable are true.</strong></p>\n<p><strong>all(iterable) : returns True is all items in the iterable are true.</strong></p>\n<h3>Working with dictionaries</h3>\n<p><strong>dir(dictionary) : returns the list of keys in the dictionary.<br>\nWorking with sets</strong></p>\n<p><strong>Union : The pipe | operator or union(*sets) function can be used to produce a new set which is a combination of all elements in the provided set.</strong></p>\n<pre><code>a = {1, 2, 3}\nb = {2, 4, 6}\nprint(a | b) # => {1, 2, 3, 4, 6}\n</code></pre>\n<h4>Intersection : The &#x26; operator ca be used to produce a new set of only the elements that appear in all sets.</h4>\n<pre><code>a = {1, 2, 3}\nb = {2, 4, 6}\nprint(a &#x26; b) # => {2}\nDifference : The — operator can be used to produce a new set of only the elements that appear in the first set and NOT the others.\n</code></pre>\n<p><strong>Symmetric Difference : The ^ operator can be used to produce a new set of only the elements that appear in exactly one set and not in both.</strong></p>\n<pre><code>a = {1, 2, 3}\nb = {2, 4, 6}\nprint(a — b) # => {1, 3}\nprint(b — a) # => {4, 6}\nprint(a ^ b) # => {1, 3, 4, 6}\n</code></pre>\n<hr>\n<h3><strong>For Statements In python, there is only one for loop.</strong></h3>\n<p>Always Includes:</p>\n<blockquote>\n<ol>\n<li>The for keyword</li>\n<li>A variable name</li>\n<li>The ‘in’ keyword</li>\n<li>An iterable of some kid</li>\n<li>A colon</li>\n<li>On the next line, an indented block of code called the for clause.</li>\n</ol>\n</blockquote>\n<p><strong>You can use break and continue statements inside for loops as well.</strong></p>\n<p><strong>You can use the range function as the iterable for the for loop.</strong></p>\n<pre><code>print(‘My name is’)\nfor i in range(5):\nprint(‘Carlita Cinco (‘ + str(i) + ‘)’)\n\ntotal = 0\nfor num in range(101):\ntotal += num\nprint(total)\nLooping over a list in Python\nfor c in [‘a’, ‘b’, ‘c’]:\nprint(c)\n\nlst = [0, 1, 2, 3]\nfor i in lst:\nprint(i)\n</code></pre>\n<p><strong><em>Common technique is to use the len() on a pre-defined list with a for loop to iterate over the indices of the list.</em></strong></p>\n<pre><code>supplies = [‘pens’, ‘staplers’, ‘flame-throwers’, ‘binders’]\nfor i in range(len(supplies)):\nprint(‘Index ‘ + str(i) + ‘ in supplies is: ‘ + supplies[i])\n</code></pre>\n<p><strong>You can loop and destructure at the same time.</strong></p>\n<pre><code>l = 1, 2], [3, 4], [5, 6\nfor a, b in l:\nprint(a, ‘, ‘, b)\n</code></pre>\n<blockquote>\n<p>Prints 1, 2</p>\n</blockquote>\n<blockquote>\n<p>Prints 3, 4</p>\n</blockquote>\n<blockquote>\n<p>Prints 5, 6</p>\n</blockquote>\n<p><strong>You can use values() and keys() to loop over dictionaries.</strong></p>\n<pre><code>spam = {‘color’: ‘red’, ‘age’: 42}\nfor v in spam.values():\nprint(v)\n</code></pre>\n<p><em>Prints red</em></p>\n<p><em>Prints 42</em></p>\n<pre><code>for k in spam.keys():\nprint(k)\n</code></pre>\n<p><em>Prints color</em></p>\n<p><em>Prints age</em></p>\n<p><strong>For loops can also iterate over both keys and values.</strong></p>\n<p><strong>Getting tuples</strong></p>\n<pre><code>for i in spam.items():\nprint(i)\n</code></pre>\n<p><em>Prints (‘color’, ‘red’)</em></p>\n<p><em>Prints (‘age’, 42)</em></p>\n<p><em>Destructuring to values</em></p>\n<pre><code>for k, v in spam.items():\nprint(‘Key: ‘ + k + ‘ Value: ‘ + str(v))\n</code></pre>\n<p><em>Prints Key: age Value: 42</em></p>\n<p><em>Prints Key: color Value: red</em></p>\n<p><strong>Looping over string</strong></p>\n<pre><code>for c in “abcdefg”:\nprint(c)\n</code></pre>\n<p><strong>When you order arguments within a function or function call, the args need to occur in a particular order:</strong></p>\n<p><em>formal positional args.</em></p>\n<p>*args</p>\n<p><em>keyword args with default values</em></p>\n<p>**kwargs</p>\n<pre><code>def example(arg_1, arg_2, *args, **kwargs):\npass\n\ndef example2(arg_1, arg_2, *args, kw_1=”shark”, kw_2=”blowfish”, **kwargs):\npass\n</code></pre>\n<hr>\n<h3><strong>Importing in Python</strong></h3>\n<p><strong>Modules are similar to packages in Node.js</strong><br>\nCome in different types:</p>\n<p>Built-In,</p>\n<p>Third-Party,</p>\n<p>Custom.</p>\n<p><strong>All loaded using import statements.</strong></p>\n<hr>\n<h3><strong>Terms</strong></h3>\n<blockquote>\n<p>module : Python code in a separate file.<br>\npackage : Path to a directory that contains modules.<br>\n<a href=\"http://init.py\" class=\"markup--anchor markup--blockquote-anchor\"><strong>init.py</strong></a> : Default file for a package.<br>\nsubmodule : Another file in a module’s folder.<br>\nfunction : Function in a module.</p>\n</blockquote>\n<p><strong>A module can be any file but it is usually created by placing a special file init.py into a folder. pic</strong></p>\n<p><em>Try to avoid importing with wildcards in Python.</em></p>\n<p><em>Use multiple lines for clarity when importing.</em></p>\n<pre><code>from urllib.request import (\nHTTPDefaultErrorHandler as ErrorHandler,\nHTTPRedirectHandler as RedirectHandler,\nRequest,\npathname2url,\nurl2pathname,\nurlopen,\n)\n</code></pre>\n<hr>\n<h3>Watching Out for Python 2</h3>\n<p><strong>Python 3 removed &#x3C;> and only uses !=</strong></p>\n<p><strong>format() was introduced with P3</strong></p>\n<p><strong>All strings in P3 are unicode and encoded.<br>\nmd5 was removed.</strong></p>\n<p><strong>ConfigParser was renamed to configparser<br>\nsets were killed in favor of set() class.</strong></p>\n<h4><strong>print was a statement in P2, but is a function in P3.</strong></h4>\n<h3>Topics revisited (in python syntax)</h3>\n<h3>Cheat Sheet:</h3>\n<h4>If you found this guide helpful feel free to checkout my github/gists where I host similar content:</h4>\n<p><a href=\"https://gist.github.com/bgoonz\" class=\"markup--anchor markup--p-anchor\">bgoonz’s gists · GitHub</a></p>\n<p><a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\"><strong>bgoonz — Overview</strong><br />\n<em>Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize…</em>github.com</a><a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p>Or Checkout my personal Resource Site:</p>\n<p><a href=\"https://goofy-euclid-1cd736.netlify.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://goofy-euclid-1cd736.netlify.app/\"><strong>a/A-Student-Resources</strong><br />\n<em>Edit description</em>goofy-euclid-1cd736.netlify.app</a><a href=\"https://goofy-euclid-1cd736.netlify.app/\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<h3>Python Cheat Sheet:</h3>\n<h3>If you found this guide helpful feel free to checkout my GitHub/gists where I host similar content:</h3>\n<p><a href=\"https://gist.github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://gist.github.com/bgoonz\"><strong>bgoonz’s gists</strong><br />\n<em>Instantly share code, notes, and snippets. Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python |…</em>gist.github.com</a><a href=\"https://gist.github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\"><strong>bgoonz — Overview</strong><br />\n<em>Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize…</em>github.com</a><a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>"},{"url":"/docs/quick-reference/Emmet/","relativePath":"docs/quick-reference/Emmet.md","relativeDir":"docs/quick-reference","base":"Emmet.md","name":"Emmet","frontmatter":{"title":"Emmet Cheat Sheet","excerpt":"In this section you'll find basic information about Web-Dev-Huband how to use it.","seo":{"title":"Emmet Cheat Sheet","description":"This is the Emmet Cheat Sheet page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Emmet Cheat Sheet","keyName":"property"},{"name":"og:description","value":"This is the Emmet Cheat Sheet page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Emmet Cheat Sheet"},{"name":"twitter:description","value":"This is the Emmet Cheat Sheet page"}]},"template":"docs"},"html":"<h1>Emmet Cheat Sheet</h1>\n<p>EMMET</p>\n<hr>\n<h3>Emmet Cheat Sheet</h3>\n<h3>EMMET</h3>\n<p><em>The a toolkit for web-developers</em></p>\n<h3>Introduction</h3>\n<p>Emmet is a productivity toolkit for web developers that uses expressions to generate HTML snippets.</p>\n<h3>Installation</h3>\n<p>Normally, installation for Emmet should be a straight-forward process from the package-manager, as most of the modern text editors support Emmet.</p>\n<h3>Usage</h3>\n<p>You can use Emmet in two ways:</p>\n<ul>\n<li><span id=\"856f\">Tab Expand Way: Type your emmet code and press <code>Tab</code> key</span></li>\n<li><span id=\"9aea\">Interactive Method: Press <code>alt + ctrl + Enter</code> and start typing your expressions. This should automatically generate HTML snippets on the fly.</span></li>\n</ul>\n<p><strong>This cheatsheet will assume that you press</strong><code>Tab</code><strong>after each expressions.</strong></p>\n<h3>HTML</h3>\n<h3>Generating HTML 5 DOCTYPE</h3>\n<p><code>html:5</code></p>\n<p>Will generate</p>\n<pre><code>&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n  &#x3C;meta charset=\"UTF-8\">\n  &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  &#x3C;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  &#x3C;title>Document&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<h3>Child items</h3>\n<p>Child items are created using <code>></code></p>\n<p><code>ul>li>p</code></p>\n<pre><code>&#x3C;ul>\n  &#x3C;li>\n    &#x3C;p>&#x3C;/p>\n  &#x3C;/li>\n&#x3C;/ul>\n</code></pre>\n<h3>Sibling Items</h3>\n<p>Sibling items are created using <code>+</code></p>\n<p><code>html>head+body</code></p>\n<pre><code>&#x3C;html>\n&#x3C;head>&#x3C;/head>\n&#x3C;body>\n\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<h3>Multiplication</h3>\n<p>Items can be multiplied by <code>*</code></p>\n<p><code>ul>li*5</code></p>\n<pre><code>&#x3C;ul>\n  &#x3C;li>&#x3C;/li>\n  &#x3C;li>&#x3C;/li>\n  &#x3C;li>&#x3C;/li>\n  &#x3C;li>&#x3C;/li>\n  &#x3C;li>&#x3C;/li>\n&#x3C;/ul>\n</code></pre>\n<h3>Grouping</h3>\n<p>Items can be grouped together using <code>()</code></p>\n<p><code>table>(tr>th*5)+tr>t*5</code></p>\n<pre><code>&#x3C;table>\n  &#x3C;tr>\n    &#x3C;th>&#x3C;/th>\n    &#x3C;th>&#x3C;/th>\n    &#x3C;th>&#x3C;/th>\n    &#x3C;th>&#x3C;/th>\n    &#x3C;th>&#x3C;/th>\n  &#x3C;/tr>\n  &#x3C;tr>\n    &#x3C;t>&#x3C;/t>\n    &#x3C;t>&#x3C;/t>\n    &#x3C;t>&#x3C;/t>\n    &#x3C;t>&#x3C;/t>\n    &#x3C;t>&#x3C;/t>\n  &#x3C;/tr>\n&#x3C;/table>\n</code></pre>\n<h3>Class and ID</h3>\n<p>Class and Id in Emmet can be done using  <code>.</code> and <code>#</code></p>\n<p><code>div.heading</code></p>\n<pre><code>&#x3C;div class=\"heading\">&#x3C;/div>\n</code></pre>\n<p><code>div#heading</code></p>\n<pre><code>&#x3C;div id=\"heading\">&#x3C;/div>\n</code></pre>\n<p>ID and Class can also be combined together</p>\n<p><code>div#heading.center</code></p>\n<pre><code>&#x3C;div id=\"heading\" class=\"center\">&#x3C;/div>\n</code></pre>\n<h3>Adding Content inside tags</h3>\n<p>Contents inside tags can be added using <code>{}</code></p>\n<p><code>h1{Emmet is awesome}+h2{Every front end developers should use this}+p{This is paragraph}*2</code></p>\n<pre><code>&#x3C;h1>Emmet is awesome&#x3C;/h1>\n&#x3C;h2>Every front end developers should use this&#x3C;/h2>\n&#x3C;p>This is paragraph&#x3C;/p>\n&#x3C;p>This is paragraph&#x3C;/p>\n</code></pre>\n<h3>Attributes inside HTML tags</h3>\n<p>Attributes can be added using <code>[]</code></p>\n<p><code>a[href=https://?google.com data-toggle=something target=_blank]</code></p>\n<pre><code>&#x3C;a href=\"https://?google.com\" data-toggle=\"something\" target=\"_blank\">&#x3C;/a>\n</code></pre>\n<h3>Numbering</h3>\n<p>Numbering can be done using <code>$</code></p>\n<p>You can use this inside tag or contents.</p>\n<p><code>h${This is so awesome $}*6</code></p>\n<pre><code>&#x3C;h1>This is so awesome 1&#x3C;/h1>\n&#x3C;h2>This is so awesome 2&#x3C;/h2>\n&#x3C;h3>This is so awesome 3&#x3C;/h3>\n&#x3C;h4>This is so awesome 4&#x3C;/h4>\n&#x3C;h5>This is so awesome 5&#x3C;/h5>\n&#x3C;h6>This is so awesome 6&#x3C;/h6>\n</code></pre>\n<p>Use <code>@-</code> to reverse the Numbering</p>\n<p><code>img[src=image$$@-.jpg]*5</code></p>\n<pre><code>&#x3C;img src=\"image05.jpg\" alt=\"\">\n&#x3C;img src=\"image04.jpg\" alt=\"\">\n&#x3C;img src=\"image03.jpg\" alt=\"\">\n&#x3C;img src=\"image02.jpg\" alt=\"\">\n&#x3C;img src=\"image01.jpg\" alt=\"\">\n</code></pre>\n<p>To start the numbering from specific number, use this way</p>\n<p><code>img[src=emmet$@100.jpg]*5</code></p>\n<pre><code>&#x3C;img src=\"emmet100.jpg\" alt=\"\">\n&#x3C;img src=\"emmet101.jpg\" alt=\"\">\n&#x3C;img src=\"emmet102.jpg\" alt=\"\">\n&#x3C;img src=\"emmet103.jpg\" alt=\"\">\n&#x3C;img src=\"emmet104.jpg\" alt=\"\">\n</code></pre>\n<h3>Tips</h3>\n<ul>\n<li><span id=\"b708\">Use <code>:</code> to expand known abbreviations</span></li>\n</ul>\n<p><code>input:date</code></p>\n<pre><code>&#x3C;input type=\"date\" name=\"\" id=\"\">\n</code></pre>\n<p><code>form:post</code></p>\n<pre><code>&#x3C;form action=\"\" method=\"post\">&#x3C;/form>\n</code></pre>\n<p><code>link:css</code></p>\n<pre><code>&#x3C;link rel=\"stylesheet\" href=\"style.css\">\n</code></pre>\n<ul>\n<li><span id=\"d43e\">Building Navbar</span></li>\n</ul>\n<p><code>.navbar>ul>li*3>a[href=#]{Item $@-}</code></p>\n<pre><code>&#x3C;div class=\"navbar\">\n  &#x3C;ul>\n    &#x3C;li>&#x3C;a href=\"#\">Item 3&#x3C;/a>&#x3C;/li>\n    &#x3C;li>&#x3C;a href=\"#\">Item 2&#x3C;/a>&#x3C;/li>\n    &#x3C;li>&#x3C;a href=\"#\">Item 1&#x3C;/a>&#x3C;/li>\n  &#x3C;/ul>\n&#x3C;/div>\n</code></pre>\n<h3>CSS</h3>\n<p>Emmet works surprisingly well with css as well.</p>\n<ul>\n<li><span id=\"68eb\"><code>f:l</code></span></li>\n</ul>\n<!-- -->\n<pre><code>float: left;\n</code></pre>\n<p>You can also use any options n/r/l</p>\n<ul>\n<li><span id=\"d9cc\"><code>pos:a­</code></span></li>\n</ul>\n<!-- -->\n<pre><code>position: absolute;\n</code></pre>\n<p>Also use any options, pos:a/r/f</p>\n<ul>\n<li><span id=\"5b67\"><code>d:n/b­/f/­i/ib</code></span></li>\n</ul>\n<p><code>d:ib</code></p>\n<pre><code>display: inline-block;\n</code></pre>\n<ul>\n<li><span id=\"26f6\">You can use <code>m</code> for margin and <code>p</code> for padding followed by direction</span></li>\n</ul>\n<p><code>mr</code> -> <code>margin-right</code></p>\n<p><code>pr</code> -> <code>padding-right</code></p>\n<ul>\n<li><span id=\"01cc\"><code>@f</code> will result in</span></li>\n</ul>\n<!-- -->\n<pre><code>@font-face {\n  font-family:;\n  src:url();\n}\n</code></pre>\n<p>You can also use these shorthands</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*h8hsUrJNyVRLYqBQP63DCA.png\" class=\"graf-image\" /></figure>#### If you found this guide helpful feel free to checkout my github/gists where I host similar content:\n<p><a href=\"https://gist.github.com/bgoonz\" class=\"markup--anchor markup--p-anchor\">bgoonz’s gists · GitHub</a></p>\n<p><a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\"><strong>bgoonz — Overview</strong><br />\n<em>Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize…</em>github.com</a><a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p>Or Checkout my personal Resource Site:</p>\n<p><a href=\"https://goofy-euclid-1cd736.netlify.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://goofy-euclid-1cd736.netlify.app/\"><strong>a/A-Student-Resources</strong><br />\n<em>Edit description</em>goofy-euclid-1cd736.netlify.app</a><a href=\"https://goofy-euclid-1cd736.netlify.app/\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p>By <a href=\"https://medium.com/@bryanguner\" class=\"p-author h-card\">Bryan Guner</a> on <a href=\"https://medium.com/p/24758e628d37\">March 6, 2021</a>.</p>\n<p><a href=\"https://medium.com/@bryanguner/emmet-cheat-sheet-24758e628d37\" class=\"p-canonical\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on May 23, 2021.</p>"},{"url":"/docs/quick-reference/create-react-app/","relativePath":"docs/quick-reference/create-react-app.md","relativeDir":"docs/quick-reference","base":"create-react-app.md","name":"create-react-app","frontmatter":{"title":"Getting Started W Create React App","excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>Getting Started with Create React App</h1>\n<p>This project was bootstrapped with <a href=\"https://github.com/facebook/create-react-app\">Create React App</a>.</p>\n<h2>Available Scripts</h2>\n<p>In the project directory, you can run:</p>\n<h3><code>yarn start</code></h3>\n<p>Runs the app in the development mode.<br>\nOpen <a href=\"http://localhost:3000\">http://localhost:3000</a> to view it in the browser.</p>\n<p>The page will reload if you make edits.<br>\nYou will also see any lint errors in the console.</p>\n<h3><code>yarn test</code></h3>\n<p>Launches the test runner in the interactive watch mode.<br>\nSee the section about <a href=\"https://facebook.github.io/create-react-app/docs/running-tests\">running tests</a> for more information.</p>\n<h3><code>yarn build</code></h3>\n<p>Builds the app for production to the <code>build</code> folder.<br>\nIt correctly bundles React in production mode and optimizes the build for the best performance.</p>\n<p>The build is minified and the filenames include the hashes.<br>\nYour app is ready to be deployed!</p>\n<p>See the section about <a href=\"https://facebook.github.io/create-react-app/docs/deployment\">deployment</a> for more information.</p>\n<h3><code>yarn eject</code></h3>\n<p><strong>Note: this is a one-way operation. Once you <code>eject</code>, you can’t go back!</strong></p>\n<p>If you aren’t satisfied with the build tool and configuration choices, you can <code>eject</code> at any time. This command will remove the single build dependency from your project.</p>\n<p>Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except <code>eject</code> will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.</p>\n<p>You don’t have to ever use <code>eject</code>. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.</p>\n<h2>Learn More</h2>\n<p>You can learn more in the <a href=\"https://facebook.github.io/create-react-app/docs/getting-started\">Create React App documentation</a>.</p>\n<p>To learn React, check out the <a href=\"https://reactjs.org/\">React documentation</a>.</p>\n<h3>Code Splitting</h3>\n<p>This section has moved here: <a href=\"https://facebook.github.io/create-react-app/docs/code-splitting\">https://facebook.github.io/create-react-app/docs/code-splitting</a></p>\n<h3>Analyzing the Bundle Size</h3>\n<p>This section has moved here: <a href=\"https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size\">https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size</a></p>\n<h3>Making a Progressive Web App</h3>\n<p>This section has moved here: <a href=\"https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app\">https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app</a></p>\n<h3>Advanced Configuration</h3>\n<p>This section has moved here: <a href=\"https://facebook.github.io/create-react-app/docs/advanced-configuration\">https://facebook.github.io/create-react-app/docs/advanced-configuration</a></p>\n<h3>Deployment</h3>\n<p>This section has moved here: <a href=\"https://facebook.github.io/create-react-app/docs/deployment\">https://facebook.github.io/create-react-app/docs/deployment</a></p>\n<h3><code>yarn build</code> fails to minify</h3>\n<p>This section has moved here: <a href=\"https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify\">https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify</a></p>"},{"url":"/docs/python/python-ds/","relativePath":"docs/python/python-ds.md","relativeDir":"docs/python","base":"python-ds.md","name":"python-ds","frontmatter":{"title":"Python General Notes","weight":0,"excerpt":"Python General Notes & Resources","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h2>Python Notes</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><a href=\"https://lambda-6.gitbook.io/python/\">https://lambda-6.gitbook.io/python/</a></th>\n<th align=\"left\">This Gitbook As A Website</th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<blockquote>\n<hr>\n<p><a href=\"https://ds-unit-5-lambda.netlify.app/\"><strong><em>https://ds-unit-5-lambda.netlify.app</em></strong></a></p>\n<p><strong><em>/</em></strong></p>\n</blockquote>\n<blockquote>\n<hr>\n<p><a href=\"https://bryan-guner.gitbook.io/datastructures-in-pytho/\"><strong><em>https://bryan-guner.gitbook.io/datastructures-in-pytho/</em></strong></a></p>\n<hr>\n</blockquote>\n<blockquote>\n<hr>\n<hr>\n<p><a href=\"https://replit.com/@bgoonz/DATASTRUCPYTHONNOTES-2\"><strong><em>https://replit.com/@bgoonz/DATASTRUCPYTHONNOTES-2</em></strong></a></p>\n</blockquote>\n<p><strong>Keywords</strong>:</p>\n<pre><code class=\"language-python\">***and       del       for       is        raise\nassert    elif      from      lambda    return\nbreak     else      global    not       try\nclass     except    if        or        while\ncontinue  exec      import    pass\ndef       finally   in        print***\n</code></pre>\n<p><a href=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1c25bca5-0198-42ad-aa8b-7668cb904571/py-notes.pdf\">py-notes.pdf</a></p>\n<p><a href=\"https://bryan-guner.gitbook.io/notesarchive/\">https://bryan-guner.gitbook.io/notesarchive/</a></p>\n<h2>DOCS:</h2>\n<p><a href=\"https://docs.python.org/3/\">https://docs.python.org/3/</a></p>\n<pre><code class=\"language-python\">import math\n\ndef say_hi(name):\n    \"\"\"&#x3C;---- Multi-Line Comments and Docstrings\n    This is where you put your content for help() to inform the user\n    about what your function does and how to use it\n    \"\"\"\n    print(f\"Hello {name}!\")\n\nprint(say_hi(\"Bryan\"))  # Should get the print inside the function, then None\n# Boolean Values\n# Work the same as in JS, except they are title case: True and False\na = True\nb = False\n# Logical Operators\n# ! = not, || = or, &#x26;&#x26; = and\nprint(True and True)\nprint(True and not True)\nprint(True or True)\n# Truthiness - Everything is True except...\n# False - None, False, '', [], (), set(), range(0)\n# Number Values\n# Integers are numbers without a floating decimal point\nprint(type(3))  # type returns the type of whatever argument you pass in\n# Floating Point values are numbers with a floating decimal point\nprint(type(3.5))\n# Type Casting\n# You can convert between ints and floats (along with other types...)\nprint(float(3))  # If you convert a float to an int, it will truncate the decimal\nprint(int(4.5))\nprint(type(str(3)))\n# Python does not automatically convert types like JS\n# print(17.0 + ' heyooo ' + 17)  # TypeError\n# Arithmetic Operators\n# ** - exponent (comparable to Math.pow(num, pow))\n# // - integer division\n# There is no ++ or -- in Python\n# String Values\n# We can use single quotes, double quotes, or f'' for string formats\n# We can use triple single quotes for multiline strings\nprint(\n    \"\"\"This here's a story\nAll about how\nMy life got twist\nTurned upside down\n\"\"\"\n)\n# Three double quotes can also be used, but we typically reserve these for\n# multi-line comments and function docstrings (refer to lines 6-9)(Nice :D)\n# We use len() to get the length of something\nprint(len(\"Bryan G\"))  # 7 characters\nprint(len([\"hey\", \"ho\", \"hey\", \"hey\", \"ho\"]))  # 5 list items\nprint(len({1, 2, 3, 4, 5, 6, 7, 9}))  # 8 set items\n# We can index into strings, list, etc..self.\nname = \"Bryan\"\nfor i in range(len(name)):\n    print(name[i])  # B, r, y, a, n\n# We can index starting from the end as well, with negatives\noccupation = \"Full Stack Software Engineer\"\nprint(occupation[-3])  # e\n# We can also get ranges in the index with the [start:stop:step] syntax\nprint(occupation[0:4:1])  # step and stop are optional, stop is exclusive\nprint(occupation[::4])  # beginning to end, every 4th letter\nprint(occupation[4:14:2])  # Let's get weird with it!\n# NOTE: Indexing out of range will give you an IndexError\n# We can also get the index og things with the .index() method, similar to indexOf()\nprint(occupation.index(\"Stack\"))\nprint([\"Mike\", \"Barry\", \"Cole\", \"James\", \"Mark\"].index(\"Cole\"))\n# We can count how many times a substring/item appears in something as well\nprint(occupation.count(\"S\"))\nprint(\n    \"\"\"Now this here's a story all about how\nMy life got twist turned upside down\nI forget the rest but the the the potato\nsmells like the potato\"\"\".count(\n        \"the\"\n    )\n)\n# We concatenate the same as Javascript, but we can also multiply strings\nprint(\"dog \" + \"show\")\nprint(\"ha\" * 10)\n# We can use format for a multitude of things, from spaces to decimal places\nfirst_name = \"Bryan\"\nlast_name = \"Guner\"\nprint(\"Your name is {0} {1}\".format(first_name, last_name))\n# Useful String Methods\nprint(\"Hello\".upper())  # HELLO\nprint(\"Hello\".lower())  # hello\nprint(\"HELLO\".islower())  # False\nprint(\"HELLO\".isupper())  # True\nprint(\"Hello\".startswith(\"he\"))  # False\nprint(\"Hello\".endswith(\"lo\"))  # True\nprint(\"Hello There\".split())  # [Hello, There]\nprint(\"hello1\".isalpha())  # False,  must consist only of letters\nprint(\"hello1\".isalnum())  # True, must consist of only letters and numbers\nprint(\"3215235123\".isdecimal())  # True, must be all numbers\n# True, must consist of only spaces/tabs/newlines\nprint(\"       \\\\n     \".isspace())\n# False, index 0 must be upper case and the rest lower\nprint(\"Bryan Guner\".istitle())\nprint(\"Michael Lee\".istitle())  # True!\n# Duck Typing - If it walks like a duck, and talks like a duck, it must be a duck\n# Assignment - All like JS, but there are no special keywords like let or const\na = 3\nb = a\nc = \"heyoo\"\nb = [\"reassignment\", \"is\", \"fine\", \"G!\"]\n# Comparison Operators - Python uses the same equality operators as JS, but no ===\n# &#x3C; - Less than\n# > - Greater than\n# &#x3C;= - Less than or Equal\n# >= - Greater than or Equal\n# == - Equal to\n# != - Not equal to\n# is - Refers to exact same memory location\n# not - !\n# Precedence - Negative Signs(not) are applied first(part of each number)\n#            - Multiplication and Division(and) happen next\n#            - Addition and Subtraction(or) are the last step\n#  NOTE: Be careful when using not along with ==\nprint(not a == b)  # True\n# print(a == not b) # Syntax Error\nprint(a == (not b))  # This fixes it. Answer: False\n# Python does short-circuit evaluation\n# Assignment Operators - Mostly the same as JS except Python has **= and //= (int division)\n# Flow Control Statements - if, while, for\n# Note: Python smushes 'else if' into 'elif'!\nif 10 &#x3C; 1:\n    print(\"We don't get here\")\nelif 10 &#x3C; 5:\n    print(\"Nor here...\")\nelse:\n    print(\"Hey there!\")\n# Looping over a string\nfor c in \"abcdefgh\":\n    print(c)\n# Looping over a range\nfor i in range(5):\n    print(i + 1)\n# Looping over a list\nlst = [1, 2, 3, 4]\nfor i in lst:\n    print(i)\n# Looping over a dictionary\nspam = {\"color\": \"red\", \"age\": 42, \"items\": [(1, \"hey\"), (2, \"hooo!\")]}\nfor v in spam.values():\n    print(v)\n# Loop over a list of tuples and destructuring the values\n# Assuming spam.items returns a list of tuples each containing two items (k, v)\nfor k, v in spam.items():\n    print(f\"{k}: {v}\")\n# While loops as long as the condition is True\n#  - Exit loop early with break\n#  - Exit iteration early with continue\nspam = 0\nwhile True:\n    print(\"Sike That's the wrong Numba\")\n    spam += 1\n    if spam &#x3C; 5:\n        continue\n    break\n\n# Functions - use def keyword to define a function in Python\n\ndef printCopyright():\n    print(\"Copyright 2021, Bgoonz\")\n\n# Lambdas are one liners! (Should be at least, you can use parenthesis to disobey)\ndef avg(num1, num2):\n    return print(num1 + num2)\n\navg(1, 2)\n# Calling it with keyword arguments, order does not matter\navg(num2=20, num1=1252)\nprintCopyright()\n# We can give parameters default arguments like JS\n\ndef greeting(name, saying=\"Hello\"):\n    print(saying, name)\n\ngreeting(\"Mike\")  # Hello Mike\ngreeting(\"Bryan\", saying=\"Hello there...\")\n# A common gotcha is using a mutable object for a default parameter\n# All invocations of the function reference the same mutable object\n\ndef append_item(item_name, item_list=[]):  # Will it obey and give us a new list?\n    item_list.append(item_name)\n    return item_list\n\n# Uses same item list unless otherwise stated which is counterintuitive\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\"))\nprint(append_item(\"notebook\", []))\n# Errors - Unlike JS, if we pass the incorrect amount of arguments to a function,\n#          it will throw an error\n# avg(1)  # TypeError\n# avg(1, 2, 2) # TypeError\n# ----------------------------------- DAY 2 ----------------------------------------\n# Functions - * to get rest of position arguments as tuple\n#           - ** to get rest of keyword arguments as a dictionary\n# Variable Length positional arguments\n\ndef add(a, b, *args):\n    # args is a tuple of the rest of the arguments\n    total = a + b\n    for n in args:\n        total += n\n    return total\n\nprint(add(1, 2))  # args is None, returns 3\nprint(add(1, 2, 3, 4, 5, 6))  # args is (3, 4, 5, 6), returns 21\n# Variable Length Keyword Arguments\n\ndef print_names_and_countries(greeting, **kwargs):\n    # kwargs is a dictionary of the rest of the keyword arguments\n    for k, v in kwargs.items():\n        print(greeting, k, \"from\", v)\n\nprint_names_and_countries(\n    \"Hey there\", Monica=\"Sweden\", Mike=\"The United States\", Mark=\"China\"\n)\n# We can combine all of these together\n\ndef example2(arg1, arg2, *args, kw_1=\"cheese\", kw_2=\"horse\", **kwargs):\n    pass\n\n# Lists are mutable arrays\nempty_list = []\nroomates = [\"Beau\", \"Delynn\"]\n# List built-in function makes a list too\nspecials = list()\n# We can use 'in' to test if something is in the list, like 'includes' in JS\nprint(1 in [1, 2, 4])  # True\nprint(2 in [1, 3, 5])  # False\n# Dictionaries - Similar to JS POJO's or Map, containing key value pairs\na = {\"one\": 1, \"two\": 2, \"three\": 3}\nb = dict(one=1, two=2, three=3)\n# Can use 'in' on dictionaries too (for keys)\nprint(\"one\" in a)  # True\nprint(3 in b)  # False\n# Sets - Just like JS, unordered collection of distinct objects\nbedroom = {\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 4\"}\n# bedroom = set(\"bed\", \"tv\", \"computer\", \"clothes\", \"playstation 5\")\nschool_bag = set(\n    [\"book\", \"paper\", \"pencil\", \"pencil\", \"book\", \"book\", \"book\", \"eraser\"]\n)\nprint(school_bag)\nprint(bedroom)\n# We can use 'in' on sets as wel\nprint(1 in {1, 2, 3})  # True\nprint(4 in {1, 3, 5})  # False\n# Tuples are immutable lists of items\ntime_blocks = (\"AM\", \"PM\")\ncolors = \"red\", \"green\", \"blue\"  # Parenthesis not needed but encouraged\n# The tuple built-in function can be used to convert things to tuples\nprint(tuple(\"abc\"))\nprint(tuple([1, 2, 3]))\n# 'in' may be used on tuples as well\nprint(1 in (1, 2, 3))  # True\nprint(5 in (1, 4, 3))  # False\n# Ranges are immutable lists of numbers, often used with for loops\n#   - start - default: 0, first number in sequence\n#   - stop - required, next number past last number in sequence\n#   - step - default: 1, difference between each number in sequence\nrange1 = range(5)  # [0,1,2,3,4]\nrange2 = range(1, 5)  # [1,2,3,4]\nrange3 = range(0, 25, 5)  # [0,5,10,15,20]\nrange4 = range(0)  # []\nfor i in range1:\n    print(i)\n# Built-in functions:\n# Filter\n\ndef isOdd(num):\n    return num % 2 == 1\n\nfiltered = filter(isOdd, [1, 2, 3, 4])\nprint(list(filtered))\nfor num in filtered:\n    print(f\"first way: {num}\")\nprint(\"--\" * 20)\n[print(f\"list comprehension: {i}\")\n for i in [1, 2, 3, 4, 5, 6, 7, 8] if i % 2 == 1]\n# Map\n\ndef toUpper(str):\n    return str.upper()\n\nupperCased = map(toUpper, [\"a\", \"b\", \"c\", \"d\"])\nprint(list(upperCased))\n# Sorted\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"])\nprint(list(sorted_items))  # Notice uppercase comes before lowercase\n# Using a key function to control the sorting and make it case insensitive\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"], key=str.lower)\nprint(sorted_items)\n# You can also reverse the sort\nsorted_items = sorted([\"john\", \"tom\", \"sonny\", \"Mike\"],\n                      key=str.lower, reverse=True)\nprint(sorted_items)\n# Enumerate creates a tuple with an index for what you're enumerating\nquarters = [\"First\", \"Second\", \"Third\", \"Fourth\"]\nprint(list(enumerate(quarters)))\nprint(list(enumerate(quarters, start=1)))\n# Zip takes list and combines them as key value pairs, or really however you need\nkeys = (\"Name\", \"Email\")\nvalues = (\"Buster\", \"cheetoh@johhnydepp.com\")\nzipped = zip(keys, values)\nprint(list(zipped))\n# You can zip more than 2\nx_coords = [0, 1, 2, 3, 4]\ny_coords = [4, 6, 10, 9, 10]\nz_coords = [20, 10, 5, 9, 1]\ncoords = zip(x_coords, y_coords, z_coords)\nprint(list(coords))\n# Len reports the length of strings along with list and any other object data type\n# doing this to save myself some typing\n\ndef print_len(item):\n    return print(len(item))\n\nprint_len(\"Mike\")\nprint_len([1, 5, 2, 10, 3, 10])\nprint_len({1, 5, 10, 9, 10})  # 4 because there is a duplicate here (10)\nprint_len((1, 4, 10, 9, 20))\n# Max will return the max number in a given scenario\nprint(max(1, 2, 35, 1012, 1))\n# Min\nprint(min(1, 5, 2, 10))\nprint(min([1, 4, 7, 10]))\n# Sum\nprint(sum([1, 2, 4]))\n# Any\nprint(any([True, False, False]))\nprint(any([False, False, False]))\n# All\nprint(all([True, True, False]))\nprint(all([True, True, True]))\n# Dir returns all the attributes of an object including it's methods and dunder methods\nuser = {\"Name\": \"Bob\", \"Email\": \"bob@bob.com\"}\nprint(dir(user))\n# Importing packages and modules\n#  - Module - A Python code in a file or directory\n#  - Package - A module which is a directory containing an __init__.py file\n#  - Submodule - A module which is contained within a package\n#  - Name - An exported function, class, or variable in a module\n# Unlike JS, modules export ALL names contained within them without any special export key\n# Assuming we have the following package with four submodules\n#  math\n#  |  __init__.py\n#  | addition.py\n#  | subtraction.py\n#  | multiplication.py\n#  | division.py\n# If we peek into the addition.py file we see there's an add function\n# addition.py\n# We can import 'add' from other places because it's a 'name' and is automatically exported\n\n# def add(num1, num2):\n#     return num1 + num2\n\n# Notice the . syntax because this package can import it's own submodules.\n# Our __init__.py has the following files\n# This imports the 'add' function\n# And now it's also re-exported in here as well\n# from .addition import add\n# These import and re-export the rest of the functions from the submodule\n# from .subtraction import subtract\n# from .division import divide\n# from .multiplication import multiply\n# So if we have a script.py and want to import add, we could do it many ways\n# This will load and execute the 'math/__init__.py' file and give\n# us an object with the exported names in 'math/__init__.py'\n# print(math.add(1,2))\n# This imports JUST the add from 'math/__init__.py'\n# from math import add\n# print(add(1, 2))\n# This skips importing from 'math/__init__.py' (although it still runs)\n# and imports directly from the addition.py file\n# from math.addition import add\n# This imports all the functions individually from 'math/__init__.py'\n# from math import add, subtract, multiply, divide\n# print(add(1, 2))\n# print(subtract(2, 1))\n# This imports 'add' renames it to 'add_some_numbers'\n# from math import add as add_some_numbers\n# --------------------------------------- DAY 3 ---------------------------------------\n# Classes, Methods, and Properties\n\nclass AngryBird:\n    # Slots optimize property access and memory usage and prevent you\n    # from arbitrarily assigning new properties the instance\n    __slots__ = [\"_x\", \"_y\"]\n    # Constructor\n\n    def __init__(self, x=0, y=0):\n        # Doc String\n        \"\"\"\n        Construct a new AngryBird by setting it's position to (0, 0)\n        \"\"\"\n        # Instance Variables\n        self._x = x\n        self._y = y\n\n    # Instance Method\n\n    def move_up_by(self, delta):\n        self._y += delta\n\n    # Getter\n\n    @property\n    def x(self):\n        return self._x\n\n    # Setter\n\n    @x.setter\n    def x(self, value):\n        if value &#x3C; 0:\n            value = 0\n        self._x = value\n\n    @property\n    def y(self):\n        return self._y\n\n    @y.setter\n    def y(self, value):\n        self._y = value\n\n    # Dunder Repr... called by 'print'\n\n    def __repr__(self):\n        return f\"&#x3C;AngryBird ({self._x}, {self._y})>\"\n\n# JS to Python Classes cheat table\n#        JS                    Python\n#   constructor()         def __init__(self):\n#      super()            super().__init__()\n#   this.property           self.property\n#    this.method            self.method()\n# method(arg1, arg2){}    def method(self, arg1, ...)\n# get someProperty(){}    @property\n# set someProperty(){}    @someProperty.setter\n# List Comprehensions are a way to transform a list from one format to another\n#  - Pythonic Alternative to using map or filter\n#  - Syntax of a list comprehension\n#     - new_list = [value loop condition]\n# Using a for loop\nsquares = []\nfor i in range(10):\n    squares.append(i ** 2)\nprint(squares)\n# value = i ** 2\n# loop = for i in range(10)\nsquares = [i ** 2 for i in range(10)]\nprint(list(squares))\nsentence = \"the rocket came back from mars\"\nvowels = [character for character in sentence if character in \"aeiou\"]\nprint(vowels)\n# You can also use them on dictionaries. We can use the items() method\n# for the dictionary to loop through it getting the keys and values out at once\nperson = {\"name\": \"Corina\", \"age\": 32, \"height\": 1.4}\n# This loops through and capitalizes the first letter of all keys\nnewPerson = {key.title(): value for key, value in person.items()}\nprint(list(newPerson.items()))\n</code></pre>\n<h2><strong>2.1.7 Indentation</strong></h2>\n<p>Leading whitespace (spaces and tabs) at the beginning of a logical line is used to compute the indentation level of the line, which in turn is used to determine the grouping of statements.</p>\n<p>First, tabs are replaced (from left to right) by one to eight spaces such that the total number of characters up to and including the replacement is a multiple of eight (this is intended to be the same rule as used by Unix). The total number of spaces preceding the first non-blank character then determines the line's indentation. Indentation cannot be split over multiple physical lines using backslashes; the whitespace up to the first backslash determines the indentation.</p>\n<p><strong>Cross-platform compatibility note:</strong> because of the nature of text editors on non-UNIX platforms, it is unwise to use a mixture of spaces and tabs for the indentation in a single source file.</p>\n<p>A formfeed character may be present at the start of the line; it will be ignored for the indentation calculations above. Formfeed characters occurring elsewhere in the leading whitespace have an undefined effect (for instance, they may reset the space count to zero).</p>\n<p>The indentation levels of consecutive lines are used to generate INDENT and DEDENT tokens, using a stack, as follows.</p>\n<p>Before the first line of the file is read, a single zero is pushed on the stack; this will never be popped off again. The numbers pushed on the stack will always be strictly increasing from bottom to top. At the beginning of each logical line, the line's indentation level is compared to the top of the stack. If it is equal, nothing happens. If it is larger, it is pushed on the stack, and one INDENT token is generated. If it is smaller, it must be one of the numbers occurring on the stack; all numbers on the stack that are larger are popped off, and for each number popped off a DEDENT token is generated. At the end of the file, a DEDENT token is generated for each number remaining on the stack that is larger than zero.</p>\n<p>Here is an example of a correctly (though confusingly) indented piece of Python code:</p>\n<p><code>def perm(l): # Compute the list of all permutations of l if len(l) &#x3C;= 1: return [l] r = [] for i in range(len(l)): s = l[:i] + l[i+1:] p = perm(s) for x in p: r.append(l[i:i+1] + x) return r</code></p>\n<p>The following example shows various indentation errors:</p>\n<pre><code class=\"language-text\"> `def perm(l):                       # error: first line indented\nfor i in range(len(l)):             # error: not indented\n    s = l[:i] + l[i+1:]\n        p = perm(l[:i] + l[i+1:])   # error: unexpected indent\n        for x in p:\n                r.append(l[i:i+1] + x)\n            return r                # error: inconsistent dedent`\n</code></pre>\n<p>(Actually, the first three errors are detected by the parser; only the last error is found by the lexical analyzer -- the indentation of <code>return r</code> does not match a level popped off the stack.)</p>\n<p><a href=\"https://ds-unit-5-lambda.netlify.app/\">https://ds-unit-5-lambda.netlify.app/</a></p>\n<h2>Python Study Guide for a JavaScript Programmer</h2>\n<p><a href=\"https://bryanguner.medium.com/?source=post_page-----5cfdf3d2bdfb--------------------------------\">Bryan Guner</a></p>\n<p><a href=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb?source=post_page-----5cfdf3d2bdfb--------------------------------\">Mar 5</a> · 15 min read</p>\n<p><img src=\"https://miro.medium.com/max/1400/1*3V9VOfPk_hrFdbEAd3j-QQ.png\" alt=\"https://miro.medium.com/max/1400/1*3V9VOfPk_hrFdbEAd3j-QQ.png\"></p>\n<h2><strong>Applications of Tutorial &#x26; Cheat Sheet Respectivley (At Bottom Of Tutorial):</strong></h2>\n<h2><strong>Basics</strong></h2>\n<ul>\n<li><strong>PEP8</strong> : Python Enhancement Proposals, style-guide for Python.</li>\n<li><code>print</code> is the equivalent of <code>console.log</code>.</li>\n</ul>\n<blockquote>\n<p>‘print() == console.log()’</p>\n</blockquote>\n<h2><code></code>** is used to make comments in your code.**</h2>\n<pre><code class=\"language-text\">def foo():\n    \"\"\"\n    The foo function does many amazing things that you\n    should not question. Just accept that it exists and\n    use it with caution.\n    \"\"\"\n    secretThing()\n</code></pre>\n<blockquote>\n<p>Python has a built in help function that let’s you see a description of the source code without having to navigate to it… “-SickNasty … Autor Unknown”</p>\n</blockquote>\n<h2><strong>Numbers</strong></h2>\n<ul>\n<li>Python has three types of numbers:</li>\n<li><strong>Integer</strong></li>\n<li><strong>Positive and Negative Counting Numbers.</strong></li>\n</ul>\n<p>No Decimal Point</p>\n<blockquote>\n<p>Created by a literal non-decimal point number … or … with the int() constructor.</p>\n</blockquote>\n<pre><code class=\"language-text\">print(3) # => 3\nprint(int(19)) # => 19\nprint(int()) # => 0\n</code></pre>\n<p><strong>3. Complex Numbers</strong></p>\n<blockquote>\n<p>Consist of a real part and imaginary part.</p>\n</blockquote>\n<h3><strong>Boolean is a subtype of integer in Python.🤷‍♂️</strong></h3>\n<blockquote>\n<p>If you came from a background in JavaScript and learned to accept the premise(s) of the following meme…</p>\n</blockquote>\n<blockquote>\n<p>Than I am sure you will find the means to suspend your disbelief.</p>\n</blockquote>\n<pre><code class=\"language-text\">print(2.24) # => 2.24\nprint(2.) # => 2.0\nprint(float()) # => 0.0\nprint(27e-5) # => 0.00027\n</code></pre>\n<h2><strong>KEEP IN MIND:</strong></h2>\n<blockquote>\n<p>The i is switched to a j in programming.</p>\n</blockquote>\n<p><strong>T*</strong>his is because the letter i is common place as the de facto index for any and all enumerable entities so it just makes sense not to compete for name-<strong>space</strong> when there’s another 25 letters that don’t get used for every loop under the sun. My most medium apologies to Leonhard Euler.*</p>\n<pre><code class=\"language-text\">print(7j) # => 7j\nprint(5.1+7.7j)) # => 5.1+7.7j\nprint(complex(3, 5)) # => 3+5j\nprint(complex(17)) # => 17+0j\nprint(complex()) # => 0j\n</code></pre>\n<ul>\n<li><strong>Type Casting</strong> : The process of converting one number to another.</li>\n</ul>\n<pre><code class=\"language-text\"># Using Float\nprint(17)               # => 17\nprint(float(17))        # => 17.0# Using Int\nprint(17.0)             # => 17.0\nprint(int(17.0))        # => 17# Using Str\nprint(str(17.0) + ' and ' + str(17))        # => 17.0 and 17\n</code></pre>\n<p><strong>The arithmetic operators are the same between JS and Python, with two additions:</strong></p>\n<ul>\n<li><em>“**” : Double asterisk for exponent.</em></li>\n<li><em>“//” : Integer Division.</em></li>\n<li><strong>There are no spaces between math operations in Python.</strong></li>\n<li><strong>Integer Division gives the other part of the number from Module; it is a way to do round down numbers replacing <code>Math.floor()</code> in JS.</strong></li>\n<li><strong>There are no <code>++</code> and <code>-</code> in Python, the only shorthand operators are:</strong></li>\n</ul>\n<h2><strong>Strings</strong></h2>\n<ul>\n<li>Python uses both single and double quotes.</li>\n<li>You can escape strings like so <code>'Jodi asked, \"What\\\\'s up, Sam?\"'</code></li>\n<li>Multiline strings use triple quotes.</li>\n</ul>\n<pre><code class=\"language-text\">print('''My instructions are very long so to make them\nmore readable in the code I am putting them on\nmore than one line. I can even include \"quotes\"\nof any kind because they won't get confused with\nthe end of the string!''')\n</code></pre>\n<p><strong>Use the <code>len()</code> function to get the length of a string.</strong></p>\n<pre><code class=\"language-text\">print(len(“Spaghetti”)) # => 9\n</code></pre>\n<h2><strong>Python uses <code>zero-based indexing</code></strong></h2>\n<h3><strong>Python allows negative indexing (thank god!)</strong></h3>\n<pre><code class=\"language-text\">print(“Spaghetti”[-1]) # => i print(“Spaghetti”[-4]) # => e\n</code></pre>\n<ul>\n<li>Python let’s you use ranges</li>\n</ul>\n<p>You can think of this as roughly equivalent to the slice method called on a JavaScript object or string… <em>(mind you that in JS … strings are wrapped in an object (under the hood)… upon which the string methods are actually called. As a immutable privative type <strong>by textbook definition</strong>, a string literal could not hope to invoke most of it’s methods without violating the state it was bound to on initialization if it were not for this bit of syntactic sugar.)</em></p>\n<pre><code class=\"language-text\">print(“Spaghetti”[1:4]) # => pag\nprint(“Spaghetti”[4:-1]) # => hett\nprint(“Spaghetti”[4:4]) # => (empty string)\n</code></pre>\n<ul>\n<li>The end range is exclusive just like <code>slice</code> in JS.</li>\n</ul>\n<pre><code class=\"language-text\"># Shortcut to get from the beginning of a string to a certain index.\nprint(\"Spaghetti\"[:4])  # => Spag\nprint(\"Spaghetti\"[:-1])    # => Spaghett# Shortcut to get from a certain index to the end of a string.\nprint(\"Spaghetti\"[1:])  # => paghetti\nprint(\"Spaghetti\"[-4:])    # => etti\n</code></pre>\n<ul>\n<li>The <code>index</code> string function is the equiv. of <code>indexOf()</code> in JS</li>\n</ul>\n<pre><code class=\"language-text\">print(\"Spaghetti\".index(\"h\"))    # => 4\nprint(\"Spaghetti\".index(\"t\"))    # => 6\n</code></pre>\n<ul>\n<li>The <code>count</code> function finds out how many times a substring appears in a string… pretty nifty for a hard coded feature of the language.</li>\n</ul>\n<pre><code class=\"language-text\">print(\"Spaghetti\".count(\"h\"))    # => 1\nprint(\"Spaghetti\".count(\"t\"))    # => 2\nprint(\"Spaghetti\".count(\"s\"))    # => 0\nprint('''We choose to go to the moon in this decade and do the other things,\nnot because they are easy, but because they are hard, because that goal will\nserve to organize and measure the best of our energies and skills, because that\nchallenge is one that we are willing to accept, one we are unwilling to\npostpone, and one which we intend to win, and the others, too.\n'''.count('the '))                # => 4\n</code></pre>\n<ul>\n<li><strong>You can use <code>+</code> to concatenate strings, just like in JS.</strong></li>\n<li><strong>You can also use “*” to repeat strings or multiply strings.</strong></li>\n<li><strong>Use the <code>format()</code> function to use placeholders in a string to input values later on.</strong></li>\n</ul>\n<pre><code class=\"language-text\">first_name = \"Billy\"\nlast_name = \"Bob\"\nprint('Your name is {0} {1}'.format(first_name, last_name))  # => Your name is Billy Bob\n</code></pre>\n<ul>\n<li><em>Shorthand way to use format function is:</em><code>print(f'Your name is {first_name} {last_name}')</code></li>\n</ul>\n<h3><strong>Some useful string methods.</strong></h3>\n<ul>\n<li><strong>Note that in JS <code>join</code> is used on an Array, in Python it is used on String.</strong></li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/630/0*eE3E5H0AoqkhqK1z.png\" alt=\"https://miro.medium.com/max/630/0*eE3E5H0AoqkhqK1z.png\"></p>\n<ul>\n<li>There are also many handy testing methods.</li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/630/0*Q0CMqFd4PozLDFPB.png\" alt=\"https://miro.medium.com/max/630/0*Q0CMqFd4PozLDFPB.png\"></p>\n<h2><strong>Variables and Expressions</strong></h2>\n<ul>\n<li><strong>Duck-Typing</strong> : Programming Style which avoids checking an object’s type to figure out what it can do.</li>\n<li>Duck Typing is the fundamental approach of Python.</li>\n<li>Assignment of a value automatically declares a variable.</li>\n</ul>\n<pre><code class=\"language-text\">a = 7\nb = 'Marbles'\nprint(a)         # => 7\nprint(b)         # => Marbles\n</code></pre>\n<ul>\n<li><strong><em>You can chain variable assignments to give multiple var names the same value.</em></strong></li>\n</ul>\n<h3><strong>Use with caution as this is highly unreadable</strong></h3>\n<pre><code class=\"language-text\">count = max = min = 0\nprint(count)           # => 0\nprint(max)             # => 0\nprint(min)             # => 0\n</code></pre>\n<h3><strong>The value and type of a variable can be re-assigned at any time.</strong></h3>\n<pre><code class=\"language-text\">a = 17\nprint(a)         # => 17\na = 'seventeen'\nprint(a)         # => seventeen\n</code></pre>\n<ul>\n<li><code>* does not exist in Python, but you can 'create' it like so:</code>*</li>\n<li><em>Python replaces <code>null</code> with <code>none</code>.</em></li>\n<li><code></code><strong>* is an object</strong> and can be directly assigned to a variable.*</li>\n</ul>\n<blockquote>\n<p>Using none is a convenient way to check to see why an action may not be operating correctly in your program.</p>\n</blockquote>\n<h2><strong>Boolean Data Type</strong></h2>\n<ul>\n<li>One of the biggest benefits of Python is that it reads more like English than JS does.</li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/1400/0*HQpndNhm1Z_xSoHb.png\" alt=\"https://miro.medium.com/max/1400/0*HQpndNhm1Z_xSoHb.png\"></p>\n<pre><code class=\"language-text\"># Logical AND\nprint(True and True)    # => True\nprint(True and False)   # => False\nprint(False and False)  # => False# Logical OR\nprint(True or True)     # => True\nprint(True or False)    # => True\nprint(False or False)   # => False# Logical NOT\nprint(not True)             # => False\nprint(not False and True)   # => True\nprint(not True or False)    # => False\n</code></pre>\n<ul>\n<li>By default, Python considers an object to be true UNLESS it is one of the following:</li>\n<li>Constant <code>None</code> or <code>False</code></li>\n<li>Zero of any numeric type.</li>\n<li>Empty Sequence or Collection.</li>\n<li><code>True</code> and <code>False</code> must be capitalized</li>\n</ul>\n<h2><strong>Comparison Operators</strong></h2>\n<ul>\n<li>Python uses all the same equality operators as JS.</li>\n<li>In Python, equality operators are processed from left to right.</li>\n<li>Logical operators are processed in this order:</li>\n<li><strong>NOT</strong></li>\n<li><strong>AND</strong></li>\n<li><strong>OR</strong></li>\n</ul>\n<blockquote>\n<p>Just like in JS, you can use parentheses to change the inherent order of operations.Short Circuit : Stopping a program when a true or false has been reached.</p>\n</blockquote>\n<p><img src=\"https://miro.medium.com/max/630/0*qHzGRLTOMTf30miT.png\" alt=\"https://miro.medium.com/max/630/0*qHzGRLTOMTf30miT.png\"></p>\n<h2><strong>Identity vs Equality</strong></h2>\n<p>****</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody>\n</tbody>\n</table>\n<pre><code class=\"language-text\">print (2 == '2')    # => False\nprint (2 is '2')    # => Falseprint (\"2\" == '2')    # => True\nprint (\"2\" is '2')    # => True# There is a distinction between the number types.\nprint (2 == 2.0)    # => True\nprint (2 is 2.0)    # => False\n</code></pre>\n<ul>\n<li>In the Python community it is better to use <code>is</code> and <code>is not</code> over <code>==</code> or <code>!=</code></li>\n</ul>\n<p><strong>If Statements</strong></p>\n<p><code>if name == 'Monica': print('Hi, Monica.')if name == 'Monica': print('Hi, Monica.')else: print('Hello, stranger.')if name == 'Monica': print('Hi, Monica.')elif age &#x3C; 12: print('You are not Monica, kiddo.')elif age > 2000: print('Unlike you, Monica is not an undead, immortal vampire.')elif age > 100: print('You are not Monica, grannie.')</code><em>Remember the order of <code>elif</code> statements matter.</em></p>\n<h2><strong>While Statements</strong></h2>\n<pre><code class=\"language-text\">spam = 0\nwhile spam &#x3C; 5:\n  print('Hello, world.')\n  spam = spam + 1\n</code></pre>\n<ul>\n<li><code>Break</code> statement also exists in Python.</li>\n</ul>\n<pre><code class=\"language-text\">spam = 0\nwhile True:\n  print('Hello, world.')\n  spam = spam + 1\n  if spam >= 5:\n    break\n</code></pre>\n<ul>\n<li>As are <code>continue</code> statements</li>\n</ul>\n<pre><code class=\"language-text\">spam = 0\nwhile True:\n  print('Hello, world.')\n  spam = spam + 1\n  if spam &#x3C; 5:\n    continue\n  break\n</code></pre>\n<h2><strong>Try/Except Statements</strong></h2>\n<ul>\n<li>Python equivalent to <code>try/catch</code></li>\n</ul>\n<pre><code class=\"language-text\">a = 321\ntry:\n    print(len(a))\nexcept:\n    print('Silently handle error here')    # Optionally include a correction to the issue\n    a = str(a)\n    print(len(a)a = '321'\ntry:\n    print(len(a))\nexcept:\n    print('Silently handle error here')    # Optionally include a correction to the issue\n    a = str(a)\n    print(len(a))\n</code></pre>\n<ul>\n<li>You can name an error to give the output more specificity.</li>\n</ul>\n<pre><code class=\"language-text\">a = 100\nb = 0\ntry:\n    c = a / b\nexcept ZeroDivisionError:\n    c = None\nprint(c)\n</code></pre>\n<ul>\n<li>You can also use the <code>pass</code> commmand to by pass a certain error.</li>\n</ul>\n<pre><code class=\"language-text\">a = 100\nb = 0\ntry:\n    print(a / b)\nexcept ZeroDivisionError:\n    pass\n</code></pre>\n<ul>\n<li>The <code>pass</code> method won't allow you to bypass every single error so you can chain an exception series like so:</li>\n</ul>\n<pre><code class=\"language-text\">a = 100\n# b = \"5\"\ntry:\n    print(a / b)\nexcept ZeroDivisionError:\n    pass\nexcept (TypeError, NameError):\n    print(\"ERROR!\")\n</code></pre>\n<ul>\n<li>You can use an <code>else</code> statement to end a chain of <code>except</code> statements.</li>\n</ul>\n<pre><code class=\"language-text\"># tuple of file names\nfiles = ('one.txt', 'two.txt', 'three.txt')# simple loop\nfor filename in files:\n    try:\n        # open the file in read mode\n        f = open(filename, 'r')\n    except OSError:\n        # handle the case where file does not exist or permission is denied\n        print('cannot open file', filename)\n    else:\n        # do stuff with the file object (f)\n        print(filename, 'opened successfully')\n        print('found', len(f.readlines()), 'lines')\n        f.close()\n</code></pre>\n<ul>\n<li><code>finally</code> is used at the end to clean up all actions under any circumstance.</li>\n</ul>\n<pre><code class=\"language-text\">def divide(x, y):\n    try:\n        result = x / y\n    except ZeroDivisionError:\n        print(\"Cannot divide by zero\")\n    else:\n        print(\"Result is\", result)\n    finally:\n        print(\"Finally...\")\n</code></pre>\n<ul>\n<li>Using duck typing to check to see if some value is able to use a certain method.</li>\n</ul>\n<pre><code class=\"language-text\"># Try a number - nothing will print out\na = 321\nif hasattr(a, '__len__'):\n    print(len(a))# Try a string - the length will print out (4 in this case)\nb = \"5555\"\nif hasattr(b, '__len__'):\n    print(len(b))\n</code></pre>\n<h2><strong>Pass</strong></h2>\n<ul>\n<li>Pass Keyword is required to write the JS equivalent of :</li>\n</ul>\n<pre><code class=\"language-text\">if (true) {\n}while (true) {}if True:\n  passwhile True:\n  pass\n</code></pre>\n<h2><strong>Functions</strong></h2>\n<ul>\n<li><strong>Function definition includes:</strong></li>\n<li><strong>The <code>def</code> keyword</strong></li>\n<li><strong>The name of the function</strong></li>\n<li><strong>A list of parameters enclosed in parentheses.</strong></li>\n<li><strong>A colon at the end of the line.</strong></li>\n<li><strong>One tab indentation for the code to run.</strong></li>\n<li><strong>You can use default parameters just like in JS</strong></li>\n</ul>\n<pre><code class=\"language-text\">def greeting(name, saying=\"Hello\"):\n    print(saying, name)greeting(\"Monica\")\n# Hello Monicagreeting(\"Barry\", \"Hey\")\n# Hey Barry\n</code></pre>\n<h3><strong>Keep in mind, default parameters must always come after regular parameters.</strong></h3>\n<pre><code class=\"language-text\"># THIS IS BAD CODE AND WILL NOT RUN\ndef increment(delta=1, value):\n    return delta + value\n</code></pre>\n<ul>\n<li><em>You can specify arguments by name without destructuring in Python.</em></li>\n</ul>\n<pre><code class=\"language-text\">def greeting(name, saying=\"Hello\"):\n    print(saying, name)# name has no default value, so just provide the value\n# saying has a default value, so use a keyword argument\ngreeting(\"Monica\", saying=\"Hi\")\n</code></pre>\n<ul>\n<li>The <code>lambda</code> keyword is used to create anonymous functions and are supposed to be <code>one-liners</code>.</li>\n</ul>\n<p><code>toUpper = lambda s: s.upper()</code></p>\n<h2><strong>Notes</strong></h2>\n<h3><strong>Formatted Strings</strong></h3>\n<blockquote>\n<p>Remember that in Python join() is called on a string with an array/list passed in as the argument.Python has a very powerful formatting engine.format() is also applied directly to strings.</p>\n</blockquote>\n<pre><code class=\"language-text\">shopping_list = [‘bread’,’milk’,’eggs’]\nprint(‘,’.join(shopping_list))\n</code></pre>\n<h2><strong>Comma Thousands Separator</strong></h2>\n<pre><code class=\"language-text\">print(‘{:,}’.format(1234567890))\n‘1,234,567,890’\n</code></pre>\n<h2><strong>Date and Time</strong></h2>\n<pre><code class=\"language-text\">d = datetime.datetime(2020, 7, 4, 12, 15, 58)\nprint(‘{:%Y-%m-%d %H:%M:%S}’.format(d))\n‘2020–07–04 12:15:58’\n</code></pre>\n<h2><strong>Percentage</strong></h2>\n<pre><code class=\"language-text\">points = 190\ntotal = 220\nprint(‘Correct answers: {:.2%}’.format(points/total))\nCorrect answers: 86.36%\n</code></pre>\n<h2><strong>Data Tables</strong></h2>\n<pre><code class=\"language-text\">width=8\nprint(‘ decimal hex binary’)\nprint(‘-’*27)\nfor num in range(1,16):\nfor base in ‘dXb’:\nprint(‘{0:{width}{base}}’.format(num, base=base, width=width), end=’ ‘)\nprint()\nGetting Input from the Command Line\nPython runs synchronously, all programs and processes will stop when listening for a user input.\nThe input function shows a prompt to a user and waits for them to type ‘ENTER’.\nScripts vs Programs\nProgramming Script : A set of code that runs in a linear fashion.\nThe largest difference between scripts and programs is the level of complexity and purpose. Programs typically have many UI’s.\n</code></pre>\n<p>**Python can be used to display html, css, and JS.**<em>It is common to use Python as an API (Application Programming Interface)</em></p>\n<h3><strong>Structured Data</strong></h3>\n<h3><strong>Sequence : The most basic data structure in Python where the index determines the order.</strong></h3>\n<blockquote>\n<p>List-Tuple-Range-Collections : Unordered data structures, hashable values.</p>\n</blockquote>\n<h3><strong>Dictionaries-Sets-Iterable : Generic name for a sequence or collection; any object that can be iterated through.Can be mutable or immutable.Built In Data Types</strong></h3>\n<h2><strong>Lists are the python equivalent of arrays.</strong></h2>\n<pre><code class=\"language-text\">empty_list = []\ndepartments = [‘HR’,’Development’,’Sales’,’Finance’,’IT’,’Customer Support’]\n</code></pre>\n<h2><strong>You can instantiate</strong></h2>\n<pre><code class=\"language-text\">specials = list()\n</code></pre>\n<h3><strong>Test if a value is in a list.</strong></h3>\n<pre><code class=\"language-text\">print(1 in [1, 2, 3]) #> True\nprint(4 in [1, 2, 3]) #> False\n# Tuples : Very similar to lists, but they are immutable\n</code></pre>\n<h3><strong>Instantiated with parentheses</strong></h3>\n<pre><code class=\"language-text\">time_blocks = (‘AM’,’PM’)\n</code></pre>\n<h3><strong>Sometimes instantiated without</strong></h3>\n<pre><code class=\"language-text\">colors = ‘red’,’blue’,’green’\nnumbers = 1, 2, 3\n</code></pre>\n<h3><strong>Tuple() built in can be used to convert other data into a tuple</strong></h3>\n<pre><code class=\"language-text\">tuple(‘abc’) # returns (‘a’, ‘b’, ‘c’)\ntuple([1,2,3]) # returns (1, 2, 3)\n# Think of tuples as constant variables.\n</code></pre>\n<h3><strong>Ranges : A list of numbers which can’t be changed; often used with for loops.</strong></h3>\n<p><strong>Declared using one to three parameters</strong>.</p>\n<blockquote>\n<p>Start : opt. default 0, first # in sequence.Stop : required next number past the last number in the sequence.Step : opt. default 1, difference between each number in the sequence.</p>\n</blockquote>\n<pre><code class=\"language-python\">range(5) # [0, 1, 2, 3, 4]\nrange(1,5) # [1, 2, 3, 4]\nrange(0, 25, 5) # [0, 5, 10, 15, 20]\nrange(0) # [ ]\nfor let (i = 0; i &#x3C; 5; i++)\nfor let (i = 1; i &#x3C; 5; i++)\nfor let (i = 0; i &#x3C; 25; i+=5)\nfor let(i = 0; i = 0; i++)\n# Keep in mind that stop is not included in the range.\n</code></pre>\n<h3><strong>Dictionaries : Mappable collection where a hashable value is used as a key to ref. an object stored in the dictionary.</strong></h3>\n<h3><strong>Mutable.</strong></h3>\n<pre><code class=\"language-text\">a = {‘one’:1, ‘two’:2, ‘three’:3}\nb = dict(one=1, two=2, three=3)\nc = dict([(‘two’, 2), (‘one’, 1), (‘three’, 3)])\n# a, b, and c are all equal\n</code></pre>\n<p><strong><em>Declared with curly braces of the built in dict()</em></strong></p>\n<blockquote>\n<p>Benefit of dictionaries in Python is that it doesn’t matter how it is defined, if the keys and values are the same the dictionaries are considered equal.</p>\n</blockquote>\n<p><strong>Use the in operator to see if a key exists in a dictionary.</strong></p>\n<p><strong>Sets : Unordered collection of distinct objects; objects that need to be hashable.</strong></p>\n<blockquote>\n<p>Always be unique, duplicate items are auto dropped from the set.</p>\n</blockquote>\n<h3><strong>Common Uses:</strong></h3>\n<blockquote>\n<p>Removing DuplicatesMembership TestingMathematical Operators: Intersection, Union, Difference, Symmetric Difference.</p>\n</blockquote>\n<p><strong>Standard Set is mutable, Python has a immutable version called frozenset.Sets created by putting comma seperated values inside braces:</strong></p>\n<pre><code class=\"language-text\">school_bag = {‘book’,’paper’,’pencil’,’pencil’,’book’,’book’,’book’,’eraser’}\nprint(school_bag)\n</code></pre>\n<h3><strong>Also can use set constructor to automatically put it into a set.</strong></h3>\n<pre><code class=\"language-text\">letters = set(‘abracadabra’)\nprint(letters)\n#Built-In Functions\n#Functions using iterables\n</code></pre>\n<p><strong>filter(function, iterable) : creates new iterable of the same type which includes each item for which the function returns true.</strong></p>\n<p><strong>map(function, iterable) : creates new iterable of the same type which includes the result of calling the function on every item of the iterable.</strong></p>\n<p><strong>sorted(iterable, key=None, reverse=False) : creates a new sorted list from the items in the iterable.</strong></p>\n<p><strong>Output is always a list</strong></p>\n<p><strong>key: opt function which coverts and item to a value to be compared.</strong></p>\n<p><strong>reverse: optional boolean.</strong></p>\n<p><strong>enumerate(iterable, start=0) : starts with a sequence and converts it to a series of tuples</strong></p>\n<pre><code class=\"language-text\">quarters = [‘First’, ‘Second’, ‘Third’, ‘Fourth’]\nprint(enumerate(quarters))\nprint(enumerate(quarters, start=1))\n</code></pre>\n<h3><strong>(0, ‘First’), (1, ‘Second’), (2, ‘Third’), (3, ‘Fourth’)</strong></h3>\n<h3><strong>(1, ‘First’), (2, ‘Second’), (3, ‘Third’), (4, ‘Fourth’)</strong></h3>\n<blockquote>\n<p>zip(*iterables) : creates a zip object filled with tuples that combine 1 to 1 the items in each provided iterable.Functions that analyze iterable</p>\n</blockquote>\n<p><strong>len(iterable) : returns the count of the number of items.</strong></p>\n<p>*<em>max(args, key=None) : returns the largest of two or more arguments.</em></p>\n<p><strong>max(iterable, key=None) : returns the largest item in the iterable.</strong></p>\n<p><em>key optional function which converts an item to a value to be compared.min works the same way as max</em></p>\n<p><strong>sum(iterable) : used with a list of numbers to generate the total.</strong></p>\n<p><em>There is a faster way to concatenate an array of strings into one string, so do not use sum for that.</em></p>\n<p><strong>any(iterable) : returns True if any items in the iterable are true.</strong></p>\n<p><strong>all(iterable) : returns True is all items in the iterable are true.</strong></p>\n<h2><strong>Working with dictionaries</strong></h2>\n<p><strong>dir(dictionary) : returns the list of keys in the dictionary.Working with sets</strong></p>\n<p>*<em>Union : The pipe | operator or union(sets) function can be used to produce a new set which is a combination of all elements in the provided set.</em></p>\n<pre><code class=\"language-text\">a = {1, 2, 3}\nb = {2, 4, 6}\nprint(a | b) # => {1, 2, 3, 4, 6}\n</code></pre>\n<h3><strong>Intersection : The &#x26; operator ca be used to produce a new set of only the elements that appear in all sets.</strong></h3>\n<pre><code class=\"language-text\">a = {1, 2, 3}\nb = {2, 4, 6}\nprint(a &#x26; b) # => {2}\nDifference : The — operator can be used to produce a new set of only the elements that appear in the first set and NOT the others.\n</code></pre>\n<p><strong>Symmetric Difference : The ^ operator can be used to produce a new set of only the elements that appear in exactly one set and not in both.</strong></p>\n<pre><code class=\"language-python\">a = {1, 2, 3}\nb = {2, 4, 6}\nprint(a — b) # => {1, 3}\nprint(b — a) # => {4, 6}\nprint(a ^ b) # => {1, 3, 4, 6}\n</code></pre>\n<h2><strong>For StatementsIn python, there is only one for loop.</strong></h2>\n<p>Always Includes:</p>\n<blockquote>\n<ol>\n<li>The for keyword2. A variable name3. The ‘in’ keyword4. An iterable of some kid5. A colon6. On the next line, an indented block of code called the for clause.</li>\n</ol>\n</blockquote>\n<p><strong>You can use break and continue statements inside for loops as well.</strong></p>\n<p><strong>You can use the range function as the iterable for the for loop.</strong></p>\n<pre><code class=\"language-python\">print(‘My name is’)\nfor i in range(5):\nprint(‘Carlita Cinco (‘ + str(i) + ‘)’)total = 0\nfor num in range(101):\ntotal += num\nprint(total)\nLooping over a list in Python\nfor c in [‘a’, ‘b’, ‘c’]:\nprint(c)lst = [0, 1, 2, 3]\nfor i in lst:\nprint(i)\n</code></pre>\n<p><strong><em>Common technique is to use the len() on a pre-defined list with a for loop to iterate over the indices of the list.</em></strong></p>\n<pre><code class=\"language-python\">supplies = [‘pens’, ‘staplers’, ‘flame-throwers’, ‘binders’]\nfor i in range(len(supplies)):\nprint(‘Index ‘ + str(i) + ‘ in supplies is: ‘ + supplies[i])\n</code></pre>\n<p>****</p>\n<p><strong>You can loop and destructure at the same time.</strong></p>\n<pre><code class=\"language-text\">l = 1, 2], [3, 4], [5, 6\nfor a, b in l:\nprint(a, ‘, ‘, b)\n</code></pre>\n<blockquote>\n<p>Prints 1, 2Prints 3, 4Prints 5, 6</p>\n</blockquote>\n<p><strong>You can use values() and keys() to loop over dictionaries.</strong></p>\n<pre><code class=\"language-text\">spam = {‘color’: ‘red’, ‘age’: 42}\nfor v in spam.values():\nprint(v)\n</code></pre>\n<p><em>Prints red</em></p>\n<p><em>Prints 42</em></p>\n<pre><code class=\"language-text\">for k in spam.keys():\nprint(k)\n</code></pre>\n<p><em>Prints color</em></p>\n<p><em>Prints age</em></p>\n<p><strong>For loops can also iterate over both keys and values.</strong></p>\n<p><strong>Getting tuples</strong></p>\n<pre><code class=\"language-text\">for i in spam.items():\nprint(i)\n</code></pre>\n<p><em>Prints (‘color’, ‘red’)</em></p>\n<p><em>Prints (‘age’, 42)</em></p>\n<p><em>Destructuring to values</em></p>\n<pre><code class=\"language-text\">for k, v in spam.items():\nprint(‘Key: ‘ + k + ‘ Value: ‘ + str(v))\n</code></pre>\n<p><em>Prints Key: age Value: 42</em></p>\n<p><em>Prints Key: color Value: red</em></p>\n<p><strong>Looping over string</strong></p>\n<pre><code class=\"language-text\">for c in “abcdefg”:\nprint(c)\n</code></pre>\n<p><strong>When you order arguments within a function or function call, the args need to occur in a particular order:</strong></p>\n<p><em>formal positional args.</em></p>\n<ul>\n<li>args</li>\n</ul>\n<p><em>keyword args with default values</em></p>\n<ul>\n<li>*kwargs</li>\n</ul>\n<pre><code class=\"language-text\">def example(arg_1, arg_2, *args, **kwargs):\npassdef example2(arg_1, arg_2, *args, kw_1=”shark”, kw_2=”blowfish”, **kwargs):\npass\n</code></pre>\n<h2><strong>Importing in Python</strong></h2>\n<p><strong>Modules are similar to packages in Node.js</strong>Come in different types:</p>\n<p>Built-In,</p>\n<p>Third-Party,</p>\n<p>Custom.</p>\n<p><strong>All loaded using import statements.</strong></p>\n<h2><strong>Terms</strong></h2>\n<blockquote>\n<p>module : Python code in a separate file.package : Path to a directory that contains <a href=\"http://modules.init.py\">modules.init.py</a> : Default file for a package.submodule : Another file in a module’s folder.function : Function in a module.</p>\n</blockquote>\n<p><strong>A module can be any file but it is usually created by placing a special file</strong> <a href=\"http://init.py\"><strong>init.py</strong></a> <strong>into a folder. pic</strong></p>\n<p><em>Try to avoid importing with wildcards in Python.</em></p>\n<p><em>Use multiple lines for clarity when importing.</em></p>\n<pre><code class=\"language-text\">from urllib.request import (\nHTTPDefaultErrorHandler as ErrorHandler,\nHTTPRedirectHandler as RedirectHandler,\nRequest,\npathname2url,\nurl2pathname,\nurlopen,\n)\n</code></pre>\n<h2><strong>Watching Out for Python 2</strong></h2>\n<p><strong>Python 3 removed &#x3C;> and only uses !=</strong></p>\n<p><strong>format() was introduced with P3</strong></p>\n<p><strong>All strings in P3 are unicode and encoded.md5 was removed.</strong></p>\n<p><strong>ConfigParser was renamed to configparsersets were killed in favor of set() class.</strong></p>\n<h3><strong>print was a statement in P2, but is a function in P3.</strong></h3>\n<p><a href=\"https://gist.github.com/bgoonz/82154f50603f73826c27377ebaa498b5#file-python-study-guide-py\">https://gist.github.com/bgoonz/82154f50603f73826c27377ebaa498b5#file-python-study-guide-py</a></p>\n<p><a href=\"https://gist.github.com/bgoonz/282774d28326ff83d8b42ae77ab1fee3#file-python-cheatsheet-py\">https://gist.github.com/bgoonz/282774d28326ff83d8b42ae77ab1fee3#file-python-cheatsheet-py</a></p>\n<p><a href=\"https://gist.github.com/bgoonz/999163a278b987fe47fb247fd4d66904#file-python-cheat-sheet-md\">https://gist.github.com/bgoonz/999163a278b987fe47fb247fd4d66904#file-python-cheat-sheet-md</a></p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/be5715e2-c834-458f-8c5b-ea185717fe37/Untitled.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/be5715e2-c834-458f-8c5b-ea185717fe37/Untitled.png\"></p>\n<h2>Built-in Functions</h2>"},{"url":"/docs/quick-reference/git-bash/","relativePath":"docs/quick-reference/git-bash.md","relativeDir":"docs/quick-reference","base":"git-bash.md","name":"git-bash","frontmatter":{"title":"Git Bash","weight":0,"excerpt":"Git Bash","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h1>Git Bash‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌\n\n</h1>\n<p>At its core, Git is a set of command line utility programs that are designed to execute on a Unix style command-line environment. Modern operating systems like Linux and macOS both include built-in Unix command line terminals. This makes Linux and macOS complementary operating systems when working with Git. Microsoft Windows instead uses Windows command prompt, a non-Unix terminal environment.</p>\n<p>In Windows environments, Git is often packaged as part of higher level GUI applications. GUIs for Git may attempt to abstract and hide the underlying version control system primitives. This can be a great aid for Git beginners to rapidly contribute to a project. Once a project's collaboration requirements grow with other team members, it is critical to be aware of how the actual raw Git methods work. This is when it can be beneficial to drop a GUI version for the command line tools. Git Bash is offered to provide a terminal Git experience.</p>\n<h2>What is Git Bash?</h2>\n<p>Git Bash is an application for Microsoft Windows environments which provides an emulation layer for a Git command line experience. Bash is an acronym for Bourne Again Shell. A shell is a terminal application used to interface with an operating system through written commands. Bash is a popular default shell on Linux and macOS. Git Bash is a package that installs Bash, some common bash utilities, and Git on a Windows operating system.</p>\n<h2>How to install Git Bash</h2>\n<p>Git Bash comes included as part of the <a href=\"https://gitforwindows.org/\">Git For Windows</a> package. Download and install Git For Windows like other Windows applications. Once downloaded find the included .exe file and open to execute Git Bash.</p>\n<h2>How to use Git Bash</h2>\n<p>Git Bash has the same operations as a standard Bash experience. It will be helpful to review basic Bash usage. Advanced usage of Bash is outside the scope of this Git focused document.</p>\n<h2>How to navigate folders</h2>\n<p>The Bash command pwd is used to print the 'present working directory'. pwd is equivalent to executing cd on a DOS(Windows console host) terminal. This is the folder or path that the current Bash session resides in.</p>\n<p>The Bash command ls is used to 'list' contents of the current working directory. ls is equivalent to DIR on a Windows console host terminal.</p>\n<p>Both Bash and Windows console host have a cd command. cd is an acronym for 'Change Directory'. cd is invoked with an appended directory name. Executing cd will change the terminal sessions current working directory to the passed directory argument.</p>\n<h2>Git Bash Commands</h2>\n<p>Git Bash is packaged with additional commands that can be found in the /usr/bin directory of the Git Bash emulation. Git Bash can actually provide a fairly robust shell experience on Windows. Git Bash comes packaged with the following shell commands which are outside the scope of this document: <a href=\"https://man.openbsd.org/ssh.1\">Ssh</a>, <a href=\"https://linux.die.net/man/1/scp\">scp</a>, <a href=\"http://man7.org/linux/man-pages/man1/cat.1.html\">cat</a>, <a href=\"https://linux.die.net/man/1/find\">find</a>.</p>\n<p>In addition the previously discussed set of Bash commands, Git Bash includes the full set of Git core commands discussed through out this site. Learn more at the corresponding documentation pages for <a href=\"https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-clone\">git clone</a>, <a href=\"https://www.atlassian.com/git/tutorials/saving-changes/git-commit\">git commit</a>, <a href=\"https://www.atlassian.com/git/tutorials/using-branches/git-checkout\">git checkout</a>, <a href=\"https://www.atlassian.com/git/tutorials/syncing/git-push\">git push</a>, and more.</p>"},{"url":"/docs/quick-reference/awesome-static/","relativePath":"docs/quick-reference/awesome-static.md","relativeDir":"docs/quick-reference","base":"awesome-static.md","name":"awesome-static","frontmatter":{"title":"Awesome Static Site Resources","weight":0,"excerpt":"inspired by Awesome Lists","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>Awesome Static Site Resources</h1>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#audio\">Audio</a></li>\n<li><a href=\"#books\">Books</a></li>\n<li><a href=\"#calendar-and-scheduling\">Calendar and Scheduling</a></li>\n<li><a href=\"#images\">Images</a></li>\n<li><a href=\"#maps\">Maps</a></li>\n<li><a href=\"#presentations\">Presentations</a></li>\n<li><a href=\"#video\">Video</a></li>\n<li><a href=\"#code\">Code</a></li>\n<li><a href=\"#functions-as-a-service\">Functions as a Service FaaS</a></li>\n<li><a href=\"#GraphQL\">GraphQL</a></li>\n<li>\n<p><a href=\"#community\">Community</a></p>\n<ul>\n<li><a href=\"#comments\">Comments</a></li>\n<li><a href=\"#forms\">Forms</a></li>\n<li><a href=\"#live-chat\">Live Chat</a></li>\n<li><a href=\"#newsletters\">Newsletters</a></li>\n<li><a href=\"#social-media\">Social Media</a></li>\n<li><a href=\"#surveys\">Surveys</a></li>\n</ul>\n</li>\n<li><a href=\"#e-commerce\">E-Commerce</a></li>\n<li><a href=\"#payments\">Payments</a></li>\n<li><a href=\"#search\">Search</a></li>\n<li><a href=\"#analytics\">Analytics</a></li>\n<li><a href=\"#authentication\">Authentication</a></li>\n<li><a href=\"#other\">Other</a></li>\n<li><a href=\"#related-lists\">Related Lists</a></li>\n</ul>\n<hr>\n<h2>Audio</h2>\n<ul>\n<li><a href=\"https://soundcloud.com/\">SoundCloud</a> - Audio hosting with an embeddable player. Up to 3 hours of content is free.</li>\n<li><a href=\"https://www.mixcloud.com/\">Mixcloud</a> - Audio hosting with unlimited uploads and an embeddable player.</li>\n<li><a href=\"https://www.spotify.com/\">Spotify</a> - You can embed any song, album, or playlist with a <a href=\"https://developer.spotify.com/documentation/widgets/guides/adding-a-spotify-embed/\">Spotify Play Button</a>.</li>\n</ul>\n<h2>Books</h2>\n<ul>\n<li><a href=\"https://github.com/aharris88/google-bookshelves-widget\">Google Books</a> - Allows you to display the books in your Google Books Library.</li>\n<li><a href=\"https://www.goodreads.com/api\">Goodreads API and widgets</a> - Allows you to access any of the Goodreads data. Widgets are found on the widgets tab on your <a href=\"https://www.goodreads.com/user/edit\">settings page</a>.</li>\n</ul>\n<h2>Calendar and Scheduling</h2>\n<ul>\n<li><a href=\"http://calendar.google.com/\">Google Calendar</a> - Embeddable calendar that you can collaborate with other people.</li>\n<li><a href=\"http://booking.timekit.io/\">Booking.js</a> - Beautiful embeddable booking widget.</li>\n<li><a href=\"http://zenplanner.com/\">zenplanner</a> - Paid - Online scheduling for fitness.</li>\n</ul>\n<h2>Images</h2>\n<ul>\n<li><a href=\"https://www.flickr.com/\">Flickr</a> - Online photo hosting by Yahoo.</li>\n<li><a href=\"https://cloudinary.com/\">Cloudinary</a> - Image hosting, manipulation and delivery.</li>\n</ul>\n<h2>Maps</h2>\n<ul>\n<li><a href=\"http://maps.google.com/\">Google Maps</a> - Google maps are easily embeddable.</li>\n<li><a href=\"https://www.mapbox.com/\">Mapbox</a> - Really nice looking embeddable maps.</li>\n</ul>\n<h2>Presentations</h2>\n<ul>\n<li><a href=\"https://prezi.com/\">Prezi</a> - Online presentations with really transitions that can zoom and rotate.</li>\n<li><a href=\"http://lab.hakim.se/reveal-js/\">Reveal.js</a> - HTML presentation framework.</li>\n<li><a href=\"http://slides.com/\">Slides.com</a> - A place for creating, presenting and sharing slide decks.</li>\n<li><a href=\"https://speakerdeck.com/\">SpeakerDeck</a> - Upload your slides as a PDF, and get an online, shareable presentation.</li>\n</ul>\n<h2>Video</h2>\n<ul>\n<li><a href=\"https://mux.com/\">Mux</a> - Paid - An API to play videos directly to the client. Can also power live streams.</li>\n<li><a href=\"https://www.youtube.com/\">YouTube</a> - Embeddable videos with unlimited uploads.</li>\n<li><a href=\"https://vimeo.com/\">Vimeo</a> - Paid - Embeddable videos with no ads.</li>\n<li><a href=\"http://www.vevo.com/\">Vevo</a> - Embeddable music videos.</li>\n<li><a href=\"http://wistia.com/\">Wistia</a> - Free plan has a limit of 25 videos.</li>\n</ul>\n<h3>Code</h3>\n<ul>\n<li><a href=\"http://codepen.io/\">Codepen</a> - A playground of embeddable front-end code examples.</li>\n<li><a href=\"http://jsbin.com/\">JS Bin</a> - Embeddable front-end code examples.</li>\n<li><a href=\"http://jsfiddle.net/\">JSFiddle</a> - Embeddable front-end code examples.</li>\n<li><a href=\"https://highlightjs.org/\">highlight.js</a> - Syntax highlighting for the web.</li>\n</ul>\n<h2>Functions as a Service</h2>\n<ul>\n<li><a href=\"https://github.com/1backend/1backend\">1Backend</a> - Deploy your backend in seconds. Free tier included. Open source.</li>\n<li><a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> - AWS Lambda lets you run code without provisioning or managing servers. You pay only for the compute time you consume</li>\n<li><a href=\"https://cloud.google.com/functions/\">Google Cloud Functions</a> - Create single-purpose, stand-alone functions that respond to Cloud events without the need to manage a server or runtime environment</li>\n<li><a href=\"https://webtask.io/\">Webtask by Auth0</a> - Call code on the server with simple HTTP, easier to set up by far than Lambda or Google's</li>\n<li><a href=\"https://azure.microsoft.com/en-us/services/functions/\">Azure Functions</a> - by Microsoft - same premise as Lambda on the Azure cloud</li>\n<li><a href=\"https://www.iron.io/platform/ironworker/\">IronWorkers</a> - by Iron.io - Run code in a multilanguage containerized environment with unlimited scale and simple pricing</li>\n<li><a href=\"http://open.iron.io/\">IronFunctions</a> - by Iron.io - IronFunctions is an open source serverless computing platform for any cloud - private, public, or hybrid.</li>\n<li><a href=\"https://console.ng.bluemix.net/openwhisk/\">OpenWhisk by IBM</a> - part of their BlueMix hosting platform, and open source, ties into their Watson AI ecosystem nicely</li>\n<li><a href=\"https://www.stackpath.com/products/edgeengine/\">StackPath EdgeEngine</a> - Write functions as a service in the language of your choice and deploy them to a global network of data centers. All the networking, including intelligent routing and load balancing, is managed by StackPath over a private backbone.</li>\n<li><a href=\"https://vercel.com/home#features\">Vercel</a> - Vercel lets people write functions as a service in their language of choice and deploy as part of a monorepo.</li>\n<li><a href=\"https://azure.microsoft.com/en-us/services/app-service/static/#features\">Azure Static Web Apps</a> - Full-stack static app hosting including serverless Functions, authentication, CDN and more</li>\n</ul>\n<h2>GraphQL</h2>\n<ul>\n<li><a href=\"https://fauna.com\">FaunaDB</a> - Serverless GraphQL database. Free tier with no time limit. Easily included in Netlify apps.</li>\n</ul>\n<h2>Community</h2>\n<h3>Comments</h3>\n<ul>\n<li><a href=\"https://github.com/eduardoboucas/staticman\">Staticman</a> - Staticman is a Node.js application that receives user-generated content and uploads it as data files to a GitHub repository. In practice, this allows you to have dynamic content (e.g. blog post comments) as part of a fully static website, as long as your site automatically deploys on every push to GitHub, as seen on GitHub Pages, Netlify and others.</li>\n<li><a href=\"https://disqus.com/\">Disqus</a> - Easily embeddable comments with nested replies, multiple login methods, and email notifications.</li>\n<li><a href=\"https://developers.facebook.com/docs/plugins/comments\">Facebook Comments</a> - Embeddable comments for your site by Facebook.</li>\n<li><a href=\"http://www.intensedebate.com/\">IntenseDebate Comments</a> - Embeddable comments with nested replies, multiple login methods, and email notifications.</li>\n<li><a href=\"http://web.livefyre.com/apps/comments/\">LiveFyre</a> - Real-time comments, SEO-optimized, stocked with social features, and beautiful on both desktop and mobile.</li>\n<li><a href=\"http://embed.redditjs.com/\">Redditjs Embed Widget</a> - Embed Reddit comments on your site. If it hasn't been posted, it will show a link to encourage the user to submit.</li>\n<li><a href=\"https://muut.com/\">Muut.com</a> - Embeddable comments, forum and private messaging. A lot of functionality, but really low footprint left on your website.</li>\n<li><a href=\"https://github.com/imsun/gitment\">Gitment</a> - Comment system based on GitHub Issues, which can be used in the frontend without any server-side implementation.</li>\n<li><a href=\"https://github.com/laymonage/giscus\">giscus</a> - A comments widget built on GitHub Discussions.</li>\n</ul>\n<h3>Forms</h3>\n<h4>Really Simple Forms</h4>\n<ul>\n<li><a href=\"http://formspree.io/\">Formspree</a> - Receive emails from a form on your static website.</li>\n<li><a href=\"https://www.elformo.com/\">elFormo</a> - Simple form processing and response retrieval via email.</li>\n<li><a href=\"http://flipmail.co/\">Flipmail</a> - Simple form processing and response retrieval via email.</li>\n<li><a href=\"http://mailthis.to/\">MailThis</a> - Simple form submissions via email with optional attachments.</li>\n<li><a href=\"https://getsimpleform.com/\">Simple Form</a> - Simple forms with optional file attachments, email notifications, and online submission viewing.</li>\n<li><a href=\"https://github.com/stevensona/briskforms\">Brisk Forms</a> - Free form submission service emails you responses while keeping your email address private and is open source.</li>\n<li><a href=\"https://www.99inbound.com\">99 Inbound</a> - Form endpoint service with email/Slack notifications and third party app integrations (e.g. MailChimp)</li>\n<li><a href=\"http://getform.io/\">Getform</a> - Form backend platform for designers and developers, with email and integrations.</li>\n<li><a href=\"https://form.taxi/\">Form.taxi</a> - Backend to handle form submissions easily and reliably, with email notifications, file uploads and GDPR-compliant data processing.</li>\n</ul>\n<h4>Normal Forms</h4>\n<ul>\n<li><a href=\"https://formcarry.com\">Formcarry</a> - Hassle-free HTML form endpoints for your form, powerful dashboard, reliable spam blocking, attachment uploads and Zapier integrations.</li>\n<li><a href=\"https://formcake.com\">Formcake</a> - The form backend built for developers: Zapier integrations, simple endpoint API, unlimited forms.</li>\n<li><a href=\"https://www.google.com/forms/about/\">Google Forms</a> - Saves results into Google Sheets and can email you when there is a submission.</li>\n<li><a href=\"https://formkeep.com/\">FormKeep</a> - Paid - View form submissions in a beautiful web interface. It has spam filtering and it integrates with webhooks such as Gmail, Trello, and Basecamp.</li>\n<li><a href=\"http://www.123contactform.com/\">123 Contact Form</a> - Connects to other online services such at MailChimp, Salesforce, and Google Drive. It also integrates with payment Processers and includes security and analytics.</li>\n<li><a href=\"http://www.formassembly.com/\">FormAssembly</a> - Allows you to build any kind of form that can include complex branching logic and multiple pages.</li>\n<li><a href=\"https://www.formsite.com/\">FormSite</a> - Form builder with payments and form management.</li>\n<li><a href=\"https://www.formstack.com/\">FormStack</a> - Forms with A/B testing, partial submission, analytics, and integrations.</li>\n<li><a href=\"https://sheetsu.com/\">Sheetsu</a> - POST and GET your data to Google Spreadsheet.</li>\n<li><a href=\"http://www.typeform.com/\">Typeform</a> - Awesome forms that can be embedded.</li>\n<li><a href=\"http://www.wufoo.com/\">Wufoo</a> - Free or Paid - Forms that you can build with a form designer, with notifications, reports, and payments.</li>\n<li><a href=\"https://www.zoho.com/crm/help/web-forms/set-up-web-forms.html\">Zoho</a> - Forms with file upload and captcha.</li>\n<li><a href=\"https://help.github.com/articles/about-issues/\">GitHub Issues</a> - This is an interesting way for developers to get comments/questions. See <a href=\"https://github.com/sindresorhus/ama\">github.com/sindresorhus/ama</a> for an example.</li>\n<li><a href=\"https://github.com/utterance/utterances\">Utterences</a> - A lightweight comments widget built on GitHub issues.</li>\n<li><a href=\"https://www.formbackend.com\">FormBackend</a> - Create form-backends and submit your HTML forms to our backend. View the entries online and connect to other services. Receive an email every time a new entry is submitted.</li>\n<li><a href=\"https://pageclip.co\">Pageclip</a> - A flexible server / backend for HTML forms. View your data in the realtime web interface, or use the API to get CSV and JSON output.</li>\n<li><a href=\"https://www.formester.com\">Formester</a> - Forms and email marketing (lead collection, email campaigns, and newsletters) with integrations.</li>\n<li><a href=\"https://statickit.com\">StaticKit</a> - Modern forms for static sites, with native support for React.</li>\n<li><a href=\"https://sheetdb.io/\">SheetDB</a> - Turn a Google Spreadsheet into a JSON API.</li>\n</ul>\n<h4>Provided by the Host</h4>\n<ul>\n<li><a href=\"https://www.netlify.com/docs/form-handling/\">Netlify</a> - Netlify comes with built-in form handling.</li>\n</ul>\n<h3>Live Chat</h3>\n<ul>\n<li><a href=\"https://www.jivochat.com/\">jivochat</a> - JivoSite is a professional live chat for websites that was specifically designed to increase your online sales.</li>\n<li><a href=\"https://www.livechatinc.com/\">LiveChat</a> - Live chat on your website.</li>\n<li><a href=\"https://www.olark.com/\">Olark</a> - Live chat on your website. You can also see who's on your website and what they're doing.</li>\n<li><a href=\"https://snapengage.com/\">SnapEngage</a> - Live chat with integrations and custom styles.</li>\n<li><a href=\"https://www.tawk.to/\">tawk.co</a> - Lets you monitor and chat with visitors on your website.</li>\n<li><a href=\"https://www.websitealive.com/\">WebsiteAlive</a> - Live chat for your website &#x26; social networks.</li>\n<li><a href=\"https://www.zopim.com/\">Zopim</a> - Live chat with free trial.</li>\n</ul>\n<h3>Newsletters</h3>\n<ul>\n<li><a href=\"http://mailchimp.com/\">MailChimp</a> - Free email marketing. You can pay to add more features.</li>\n<li><a href=\"http://www.constantcontact.com/\">Constant Contact</a> - Email marketing with campaigns, autoresponders, and analytics.</li>\n<li><a href=\"http://www.aweber.com/\">AWeber</a> - Email marketing with campaigns, autoresponders, and analytics.</li>\n<li><a href=\"https://www.campaignmonitor.com/\">Campaign Monitor</a> - Email marketing with campaigns, autoresponders, and analytics.</li>\n<li><a href=\"https://www.mailerlite.com/\">MailerLite</a> - Free email marketing. You can pay for more subscribers.</li>\n</ul>\n<h3>Social Media</h3>\n<ul>\n<li><a href=\"https://developers.pinterest.com/\">Pinterest</a> - Pin It Button.</li>\n<li><a href=\"https://dev.twitter.com/web/embedded-tweets\">Twitter</a> - Embedded tweets.</li>\n<li><a href=\"https://developers.facebook.com/docs/plugins\">Facebook</a> - Facebook embedded plugins.</li>\n<li><a href=\"http://www.sharethis.com/\">ShareThis</a> - Sharing buttons for multiple social networks.</li>\n<li><a href=\"https://www.kontaktify.com/\">Kontaktify</a> - A contact widget that provides an easy way for visitors to get in touch.</li>\n</ul>\n<h3>Surveys</h3>\n<ul>\n<li><a href=\"https://www.google.co.nz/forms/about/\">Google Forms</a> - You can use Google forms for surveys or for forms on your site.</li>\n<li><a href=\"https://www.surveymonkey.com/\">SurveyMonkey</a> - Easy to use and free surveys.</li>\n<li><a href=\"http://www.typeform.com/\">Typeform</a> - Really beautiful forms.</li>\n<li><a href=\"https://qualaroo.com/\">Qualaroo</a> - Embed surveys anywhere on your website that comes up from the bottom right side of the screen.</li>\n<li><a href=\"https://insightstash.com/\">Insight Stash</a> - Fast, Simple survey forms.</li>\n</ul>\n<h2>E-Commerce</h2>\n<ul>\n<li><a href=\"https://www.ecwid.com/\">Ecwid</a> - Embeddable shopping cart.</li>\n<li><a href=\"http://www.foxycart.com/\">FoxyCart</a> - Add a shopping cart with basic html code.</li>\n<li><a href=\"https://snipcart.com/\">Snipcart</a> - Include a few lines of code for a full online shop.</li>\n<li><a href=\"https://gumroad.com/\">Gumroad</a> - An all-in-one solution to sell your work.</li>\n<li><a href=\"https://payhip.com/\">Payhip</a> - An embeddable way to sell digital downloads &#x26; memberships</li>\n<li><a href=\"https://moltin.com/\">Moltin</a> - Add eCommerce functionality to anything.</li>\n<li><a href=\"https://trolley.link/\">Trolley</a> - Add a popup cart to any website - designed for static &#x26; JAMstack sites.</li>\n<li><a href=\"https://commercelayer.io/\">Commerce Layer</a> - Add enterprise ecommerce to your JAMstack.</li>\n</ul>\n<h2>Payments</h2>\n<ul>\n<li><a href=\"https://www.moneybutton.com/\">MoneyButton</a> - Website payments and donations using Bitcoin (Satoshi's Vision).</li>\n<li><a href=\"https://info.shapeshift.io/tools/shifty-button\">ShapeShift Shifty Button</a> - Accept payments using various cryptocurrencies.</li>\n</ul>\n<h2>Search</h2>\n<p>Self-hosted:</p>\n<ul>\n<li><a href=\"http://lunrjs.com/\">lunr.js</a> - Simple full-text search in your browser.</li>\n<li><a href=\"https://github.com/itemsapi/itemsjs\">itemsjs</a> - Full text, faceted, almost dependency free search engine in javascript</li>\n<li><a href=\"https://github.com/lucaong/minisearch\">minisearch</a> - Tiny and powerful JavaScript full-text search engine for browser and Node</li>\n<li><a href=\"https://github.com/nextapps-de/flexsearch\">flexsearch</a> - Next-Generation full text search library for Browser and Node.js</li>\n<li><a href=\"https://fusejs.io/\">fuse.js</a> - Powerful, lightweight fuzzy-search library, with zero dependencies</li>\n<li><a href=\"https://github.com/dchest/static-search\">static-search</a> - A Go program to generate JSON index of HTML files, and a JavaScript component with optional UI to search this index</li>\n<li><a href=\"http://elasticlunr.com/docs/index.html\">elasticlunr</a> - Lightweight full-text search engine developed in JavaScript for browser search and offline search based on Lunr.js</li>\n<li><a href=\"https://github.com/tinysearch/tinysearch\">tinysearch</a> - Tiny, full-text search engine for static websites built with Rust and Wasm</li>\n<li><a href=\"https://www.npmjs.com/package/js-search\">js-search</a> - Client-side searches of JavaScript and JSON objects, ES5 compatible and does not require jQuery or any other third-party libraries</li>\n<li><a href=\"https://github.com/fergiemcdowall/search-index\">search-index</a> - A persistent, network resilient, full text search library for the browser and Node.js</li>\n<li><a href=\"https://github.com/bevacqua/fuzzysearch\">fuzzysearch</a> - Tiny and blazing-fast fuzzy search in JavaScript</li>\n<li><a href=\"https://github.com/mattyork/fuzzy\">fuzzy</a> - Fuzzy search / filter for browser and node</li>\n<li><a href=\"https://reyesr.github.io/fullproof/\">fullproof</a> - Javascript library that provides high-quality full-text search in the browser</li>\n<li><a href=\"https://jets.js.org/\">Jets.js</a> - Native CSS search engine</li>\n</ul>\n<p>Third party integration:</p>\n<ul>\n<li><a href=\"https://cse.google.com/cse/\">Google Custom Search Engine</a> - Search your site with a custom Google Search.</li>\n<li><a href=\"https://www.algolia.com/\">Algolia</a> - Hosted Search API that delivers instant and relevant results from the first keystroke.</li>\n<li><a href=\"https://cloudsh.com/\">CloudSh</a> - Powerful search for your website with a few lines of JavaScript.</li>\n</ul>\n<h2>Analytics</h2>\n<ul>\n<li><a href=\"http://www.google.com/analytics/\">Google Analytics</a> - Freemium web analytics service offered by Google.</li>\n<li><a href=\"https://simpleanalytics.io/\">Simple Analytics</a> - 💲 - Simple, clean, and friendly analytics.</li>\n</ul>\n<h2>Authentication</h2>\n<ul>\n<li><a href=\"https://uthentic.net\">Uthentic</a> - Serverless, passwordless login for static sites in 2 lines of code.</li>\n</ul>\n<h2>Other</h2>\n<ul>\n<li><a href=\"https://sketchfab.com/\">Sketch Fab</a> - Embeddable 3D content.</li>\n</ul>\n<h2>Related Lists</h2>\n<ul>\n<li><a href=\"https://github.com/b-long/awesome-static-hosting\">Awesome Static Hosting</a></li>\n<li><a href=\"https://github.com/staticwebdev/awesome-azure-static-web-apps\">Awesome Azure Static Web Apps</a></li>\n</ul>"},{"url":"/docs/quick-reference/","relativePath":"docs/quick-reference/index.md","relativeDir":"docs/quick-reference","base":"index.md","name":"index","frontmatter":{"title":"Quick Reference","excerpt":"In this section you'll find basic information about Web-Dev-Hub and how to use it.","seo":{"title":"Cheat Sheets","description":"This is the Cheat Sheets page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Cheat Sheets","keyName":"property"},{"name":"og:description","value":"This is the Cheat Sheets page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Cheat Sheets"},{"name":"twitter:description","value":"This is the Cheat Sheets page"}]},"template":"docs"},"html":"<iframe src=\"https://inspiring-jennings-d14689.netlify.app/\" height=\"1600px\" width=\"100%\" style=\"zoom:0.75;align-self:center;\"></iframe>\n<iframe src=\"https://sidebar-blog.netlify.app/\" height=\"1600px\" width=\"100%\" style=\"zoom:0.75;align-self:center;\"></iframe>"},{"url":"/docs/quick-reference/google-firebase/","relativePath":"docs/quick-reference/google-firebase.md","relativeDir":"docs/quick-reference","base":"google-firebase.md","name":"google-firebase","frontmatter":{"title":"Firebase (Firebasics)","weight":1,"excerpt":"Add Firebase to your JavaScript project Note","seo":{"title":"Add Firebase to your JavaScript project Note:","description":"Add Firebase to your JavaScript project Note:","robots":[],"extra":[]},"template":"docs"},"html":"<p>Add Firebase to your JavaScript project <strong>Note:</strong> Upgrading from the version 8 Firebase SDK? Check out our <a href=\"https://firebase.google.com/docs/web/modular-upgrade\">upgrade guide</a>.<a href=\"\">####  <strong>Create a Firebase project</strong> </a><strong>Note:</strong> Using the v9 SDK is strongly recommended, especially for production apps. If you need support for other SDK management options, like <strong>window.firebase</strong>, see <a href=\"https://firebase.google.com/docs/web/modular-upgrade#window-compat\">Upgrade from version 8 to the modular Web SDK</a>.<strong>Note:</strong> You can skip this step if you are using a JavaScript framework CLI tool like the <a href=\"https://angular.io/cli\">Angular CLI</a>, <a href=\"https://nextjs.org/\">Next.js</a>, <a href=\"https://cli.vuejs.org/\">Vue CLI</a>, or <a href=\"https://reactjs.org/docs/create-a-new-react-app.html\">Create React App</a>. Check out <a href=\"https://firebase.google.com/docs/web/module-bundling\">our guide on module bundling</a> for more information.</p>\n<p>Follow this guide to use the Firebase JavaScript SDK in your web app or as a client for end-user access, for example, in a Node.js desktop or IoT application.</p>\n<h2><strong>Step 1</strong>: Create a Firebase project and register your app</h2>\n<p>Before you can add Firebase to your JavaScript app, you need to create a Firebase project and register your app with that project. When you register your app with Firebase, you'll get a Firebase configuration object that you'll use to connect your app with your Firebase project resources.</p>\n<p>Visit <a href=\"https://firebase.google.com/docs/projects/learn-more\">Understand Firebase Projects</a> to learn more about Firebase projects and best practices for adding apps to projects.</p>\n<p>If you don't already have a JavaScript project and just want to try out a Firebase product, you can download one of our <a href=\"https://firebase.google.com/docs/samples\">quickstart samples</a>.</p>\n<h2><strong>Step 2</strong>: Install the SDK and initialize Firebase</h2>\n<p>This page describes setup instructions for version 9 of the Firebase JS SDK, which uses a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">JavaScript Module</a> format.</p>\n<p>This workflow uses npm and requires module bundlers or JavaScript framework tooling because the v9 SDK is optimized to work with <a href=\"https://firebase.google.com/docs/web/module-bundling\">module bundlers</a> to eliminate unused code (tree-shaking) and decrease SDK size.</p>\n<ol>\n<li>Install Firebase using npm:</li>\n<li>\n<p>Initialize Firebase in your app and create a Firebase App object:</p>\n<p>A Firebase App is a container-like object that stores common configuration and shares authentication across Firebase services. After you initialize a Firebase App object in your code, you can add and start using Firebase services.</p>\n<p>Do you use ESM and want to use browser modules? Replace all your</p>\n<p><strong>import</strong></p>\n<p>lines to use the following pattern:</p>\n<p><strong>import { } from '<a href=\"https://www.gstatic.com/firebasejs/9.0.2/firebase-SERVICE.js\">https://www.gstatic.com/firebasejs/9.0.2/firebase-SERVICE.js</a>'</strong></p>\n<p>(where</p>\n<p><strong>SERVICE</strong></p>\n<p>is an SDK name such as</p>\n<p><strong>firebase-firestore</strong></p>\n<p>).</p>\n<p>Using browser modules is a quick way to get started, but we recommend using a module bundler for production.</p>\n</li>\n</ol>\n<h2><strong>Step 3</strong>: Access Firebase in your app</h2>\n<p>Firebase services (like Cloud Firestore, Authentication, Realtime Database, Remote Config, and more) are available to import within individual sub-packages.</p>\n<p>The example below shows how you could use the Cloud Firestore Lite SDK to retrieve a list of data.</p>\n<h2><strong>Step 4</strong>: Use a module bundler (webpack/Rollup) for size reduction</h2>\n<p>The Firebase Web SDK is designed to work with module bundlers to remove any unused code (tree-shaking). We strongly recommend using this approach for production apps. Tools such as the <a href=\"https://angular.io/cli\">Angular CLI</a>, <a href=\"https://nextjs.org/\">Next.js</a>, <a href=\"https://cli.vuejs.org/\">Vue CLI</a>, or <a href=\"https://reactjs.org/docs/create-a-new-react-app.html\">Create React App</a> automatically handle module bundling for libraries installed through npm and imported into your codebase.</p>\n<p>See our guide <a href=\"https://firebase.google.com/docs/web/module-bundling\">Using module bundlers with Firebase</a> for more information.</p>"},{"url":"/docs/quick-reference/installation/","relativePath":"docs/quick-reference/installation.md","relativeDir":"docs/quick-reference","base":"installation.md","name":"installation","frontmatter":{"title":"Installation","weight":1,"seo":{"title":"Installation","description":"This is the installation page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Installation","keyName":"property"},{"name":"og:description","value":"This is the installation page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Installation"},{"name":"twitter:description","value":"This is the installation page"}]},"template":"docs"},"html":"<h1>Basic Web Development Environment Setup</h1>\n<blockquote>\n<p>Windows Subsystem for Linux (WSL) and Ubuntu</p>\n</blockquote>\n<h2>Windows Subsystem for Linux (WSL) and Ubuntu</h2>\n<p><a href=\"https://bryanguner.medium.com/?source=post_page-----9f36c3f15afe--------------------------------\"><img src=\"https://miro.medium.com/fit/c/96/96/1*ao1cHo7EQ4faDV8YNJwh_Q.png\" alt=\"Bryan Guner\"></a></p>\n<p>‌</p>\n<p><img src=\"https://miro.medium.com/max/60/0*aqKP1drNHmNm34zz.jpg?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/1600/0*aqKP1drNHmNm34zz.jpg\"></p>\n<p>Test if you have Ubuntu installed by typing “Ubuntu” in the search box in the bottom app bar that reads “Type here to search”. If you see a search result that reads <strong>“Ubuntu 20.04 LTS”</strong> with “App” under it, then you have it installed.</p>\n<p>‌</p>\n<ol>\n<li>In the application search box in the bottom bar, type “PowerShell” to find the application named “Windows PowerShell”</li>\n<li>Right-click on “Windows PowerShell” and choose “Run as administrator” from the popup menu</li>\n<li>In the blue PowerShell window, type the following: <code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</code></li>\n<li>Restart your computer</li>\n<li>In the application search box in the bottom bar, type “Store” to find the application named “Microsoft Store”</li>\n<li>Click “Microsoft Store”</li>\n<li>Click the “Search” button in the upper-right corner of the window</li>\n<li>Type in “Ubuntu”</li>\n<li>Click “Run Linux on Windows (Get the apps)”</li>\n<li>Click the orange tile labeled <strong>“Ubuntu”</strong> Note that there are 3 versions in the Microsoft Store… you want the one just entitled ‘Ubuntu’</li>\n<li>Click “Install”</li>\n<li>After it downloads, click “Launch”</li>\n<li>If you get the option, pin the application to the task bar. Otherwise, right-click on the orange Ubuntu icon in the task bar and choose “Pin to taskbar”</li>\n<li>When prompted to “Enter new UNIX username”, type your first name with no spaces</li>\n<li>When prompted, enter and retype a password for this UNIX user (it can be the same as your Windows password)</li>\n<li>Confirm your installation by typing the command <code>whoami ‘as in who-am-i'</code>followed by Enter at the prompt (it should print your first name)</li>\n<li>You need to update your packages, so type <code>sudo apt update</code> (if prompted for your password, enter it)</li>\n<li>You need to upgrade your packages, so type <code>sudo apt upgrade</code> (if prompted for your password, enter it)</li>\n</ol>\n<p>Git comes with Ubuntu, so there’s nothing to install. However, you should configure it using the following instructions.</p>\n<p>‌Open an Ubuntu terminal if you don’t have one open already.</p>\n<ol>\n<li>You need to configure Git, so type <code>git config --global user.name \"Your Name\"</code> with replacing \"Your Name\" with your real name.</li>\n<li>You need to configure Git, so type <code>git config --global user.email your@email.com</code> with replacing \"<a href=\"mailto:your@email.com\">your@email.com</a>\" with your real email.</li>\n</ol>\n<p><strong>Note: if you want git to remember your login credentials type:</strong></p>\n<p>$ git config --global credential.helper store</p>\n<p>‌</p>\n<p>Test if you have Chrome installed by typing “Chrome” in the search box in the bottom app bar that reads “Type here to search”. If you see a search result that reads “Chrome” with “App” under it, then you have it installed. Otherwise, follow these instructions to install Google Chrome.</p>\n<p>‌</p>\n<ol>\n<li>Open Microsoft Edge, the blue “e” in the task bar, and type in <a href=\"http://chrome.google.com/\">http://chrome.google.com</a>. Click the “Download Chrome” button. Click the “Accept and Install” button after reading the terms of service. Click “Save” in the “What do you want to do with ChromeSetup.exe” dialog at the bottom of the window. When you have the option to “Run” it, do so. Answer the questions as you’d like. Set it as the default browser.</li>\n<li>Right-click on the Chrome icon in the task bar and choose “Pin to taskbar”.</li>\n</ol>\n<p>Test if you have Node.js installed by opening an Ubuntu terminal and typing <code>node --version</code>. If it reports \"Command 'node' not found\", then you need to follow these directions.</p>\n<ol>\n<li>In the Ubuntu terminal, type <code>sudo apt update</code> and press Enter</li>\n<li>In the Ubuntu terminal, type <code>sudo apt install build-essential</code> and press Enter</li>\n<li>In the Ubuntu terminal, type <code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash</code> and press Enter</li>\n<li>In the Ubuntu terminal, type <code>. ./.bashrc</code> and press Enter</li>\n<li>In the Ubuntu terminal, type <code>nvm install --lts</code> and press Enter</li>\n<li>Confirm that <strong>node</strong> is installed by typing <code>node --version</code> and seeing it print something that is not \"Command not found\"!</li>\n</ol>\n<p>You will often have to download a zip file and unzip it. It is easier to do this from the command line. So we need to install a linux unzip utility.</p>\n<p>‌In the Ubuntu terminal type: <code>sudo apt install unzip</code> and press Enter</p>\n<p>‌Mocha.js</p>\n<p>Test if you have Mocha.js installed by opening an Ubuntu terminal and typing <code>which mocha</code>. If it prints a path, then you're good. Otherwise, if it prints nothing, install Mocha.js by typing <code>npm install -g mocha</code>.</p>\n<p>‌</p>\n<p>Ubuntu does not come with Python 3. Install it using the command <code>sudo apt install python3</code>. Test it by typing <code>python3 --version</code> and seeing it print a number.</p>\n<p>‌</p>\n<p>‌</p>\n<p>As of the time of writing of this document, WSL has an issue renaming or deleting files if Visual Studio Code is open. So before doing any linux commands which manipulate files, make sure you <strong>close</strong> Visual Studio Code before running those commands in the Ubuntu terminal.</p>\n<p>‌</p>\n<p># Installing build essentials<br>\nsudo apt-get install -y build-essential libssl-dev<br>\n# Nodejs and NVM<br>\ncurl -o- <a href=\"https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh\">https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh</a> | bash<br>\nsource ~/.profile<br>\nsudo nvm install 7.10.0<br>\nsudo nvm use 7.10.0<br>\nnode -v  </p>\n<h1>nodemon</h1>\n<p>sudo npm install -g nodemon<br>\nsudo npm install -g loopback-cli<br>\n# Forever to run nodejs scripts forever<br>\nsudo npm install forever -g<br>\n# Git - a version control system<br>\nsudo apt-get update<br>\nsudo apt-get install -y git xclip<br>\n# Grunt - an automated task runner<br>\nsudo npm install -g grunt-cli<br>\n# Bower - a dependency manager<br>\nsudo npm install -g bower<br>\n# Yeoman - for generators<br>\nsudo npm install -g yo<br>\n# maven<br>\nsudo apt-get install maven -y<br>\n# Gulp - an automated task runner<br>\nsudo npm install -g gulp-cli<br>\n# Angular FullStack - My favorite MEAN boilerplate (MEAN = MongoDB, Express, Angularjs, Nodejs)<br>\nsudo npm install -g generator-angular-fullstack<br>\n# Vim, Curl, Python - Some random useful stuff<br>\nsudo apt-get install -y vim curl python-software-properties<br>\nsudo apt-get install -y python-dev, python-pip<br>\nsudo apt-get install -y libkrb5-dev<br>\n# Installing JDK and JRE<br>\nsudo apt-get install -y default-jre<br>\nsudo apt-get install -y default-jdk<br>\n# Archive Extractors<br>\nsudo apt-get install -y unace unrar zip unzip p7zip-full p7zip-rar sharutils rar uudeview mpack arj cabextract file-roller<br>\n# FileZilla - a FTP client<br>\nsudo apt-get install -y filezilla</p>\n<h2>If you found this guide helpful feel free to checkout my github/gists where I host similar content:</h2>\n<p><a href=\"https://gist.github.com/bgoonz\">bgoonz’s gists · GitHub</a></p>\n<p>Or Checkout my personal Resource Site:</p>\n<p><a href=\"https://levelup.gitconnected.com/basic-web-development-environment-setup-9f36c3f15afe\">Source</a></p>"},{"url":"/docs/quick-reference/markdown-dropdowns/","relativePath":"docs/quick-reference/markdown-dropdowns.md","relativeDir":"docs/quick-reference","base":"markdown-dropdowns.md","name":"markdown-dropdowns","frontmatter":{"title":"lorem-ipsum","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h1>Markdown Dropdown:</h1>\n<details>\n<summary>How do I dropdown?</summary>\n<br>\nThis is how you dropdown.\n<br><br>\n<pre>\n&lt;details&gt;\n&lt;summary&gt;How do I dropdown?&lt;&#47;summary&gt;\n&lt;br&gt;\nThis is how you dropdown.\n&lt;&#47;details&gt;\n</pre>\n</details>\n<hr>\n<details open>\n<summary>Want to ruin the surprise?</summary>\n<br>\nWell, you asked for it!\n<br><br>\n<pre>\n&lt;details open&gt;\n&lt;summary&gt;Want to ruin the surprise?&lt;&#47;summary&gt;\n&lt;br&gt;\nWell, you asked for it!\n&lt;&#47;details&gt;\n</pre>\n</details>"},{"url":"/docs/quick-reference/minifiction/","relativePath":"docs/quick-reference/minifiction.md","relativeDir":"docs/quick-reference","base":"minifiction.md","name":"minifiction","frontmatter":{"title":"How To Minify Code For Better Web Performance ","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<p>In production, it is recommended to minify any JavaScript code that is included with your application. <strong>Minification can help your website load several times faster,</strong> especially as the size of your JavaScript source code grows.</p>\n<p>Here's one way to set it up:</p>\n<ol>\n<li><a href=\"https://nodejs.org/\">Install Node.js</a></li>\n<li>Run npm init -y in your project folder (<strong>don't skip this step!</strong>)</li>\n<li>Run npm install terser</li>\n</ol>\n<p>Now, to minify a file called like_button.js, run in the terminal:</p>\n<p>This will produce a file called like_button.min.js with the minified code in the same directory. If you're typing this often, you can <a href=\"https://medium.freecodecamp.org/introduction-to-npm-scripts-1dbb2ae01633\">create an npm script</a> to give this command a name.</p>"},{"url":"/docs/quick-reference/new-repo-instructions/","relativePath":"docs/quick-reference/new-repo-instructions.md","relativeDir":"docs/quick-reference","base":"new-repo-instructions.md","name":"new-repo-instructions","frontmatter":{"title":"new-repo-git","weight":2,"seo":{"title":"new-repo-git","description":"This is the new-repo-git page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"new-repo-git","keyName":"property"},{"name":"og:description","value":"This is the new-repo-git page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"new-repo-git"},{"name":"twitter:description","value":"This is the new-repo-git page"}]},"template":"docs"},"html":"<h3>...or create a new repository on the command line</h3>\n<pre><code>echo \"# React-Self-Study\" >> README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M master\ngit remote add origin https://github.com/bgoonz/React-Self-Study.git\ngit push -u origin master\n</code></pre>\n<h3>...or push an existing repository from the command line</h3>\n<pre><code>git remote add origin https://github.com/bgoonz/React-Self-Study.git\ngit branch -M master\ngit push -u origin master\n</code></pre>\n<h3>...or import code from another repository</h3>\n<p>You can initialize this repository with code from a Subversion, Mercurial, or TFS project.</p>"},{"url":"/docs/quick-reference/heroku-error-codes/","relativePath":"docs/quick-reference/heroku-error-codes.md","relativeDir":"docs/quick-reference","base":"heroku-error-codes.md","name":"heroku-error-codes","frontmatter":{"title":"Heroku Error Codes","weight":0,"excerpt":"Full List Of Heroku Error Codes","seo":{"title":"","description":"embeded developer tools and utilities","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>Heroku Error Codes</h1>\n<p>Last updated August 04, 2021</p>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h10-app-crashed\">H10 - App crashed</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h11-backlog-too-deep\">H11 - Backlog too deep</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h12-request-timeout\">H12 - Request timeout</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h13-connection-closed-without-response\">H13 - Connection closed without response</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h14-no-web-dynos-running\">H14 - No web dynos running</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h15-idle-connection\">H15 - Idle connection</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h16-no-longer-in-use\">H16 - (No Longer in Use)</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h17-poorly-formatted-http-response\">H17 - Poorly formatted HTTP response</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h18-server-request-interrupted\">H18 - Server Request Interrupted</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h19-backend-connection-timeout\">H19 - Backend connection timeout</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h20-app-boot-timeout\">H20 - App boot timeout</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h21-backend-connection-refused\">H21 - Backend connection refused</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h22-connection-limit-reached\">H22 - Connection limit reached</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h23-endpoint-misconfigured\">H23 - Endpoint misconfigured</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h24-forced-close\">H24 - Forced close</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h25-http-restriction\">H25 - HTTP Restriction</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h26-request-error\">H26 - Request Error</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h27-client-request-interrupted\">H27 - Client Request Interrupted</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h28-client-connection-idle\">H28 - Client Connection Idle</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h31-misdirected-request\">H31 - Misdirected Request</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h80-maintenance-mode\">H80 - Maintenance mode</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h81-blank-app\">H81 - Blank app</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h82-free-dyno-quota-exhausted\">H82 - Free dyno quota exhausted</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#h99-platform-error\">H99 - Platform error</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#r10-boot-timeout\">R10 - Boot timeout</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#r12-exit-timeout\">R12 - Exit timeout</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#r13-attach-error\">R13 - Attach error</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#r14-memory-quota-exceeded\">R14 - Memory quota exceeded</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#r15-memory-quota-vastly-exceeded\">R15 - Memory quota vastly exceeded</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#r16-detached\">R16 - Detached</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#r17-checksum-error\">R17 - Checksum error</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#r99-platform-error\">R99 - Platform error</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#l10-drain-buffer-overflow\">L10 - Drain buffer overflow</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#l11-tail-buffer-overflow\">L11 - Tail buffer overflow</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#l12-local-buffer-overflow\">L12 - Local buffer overflow</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#l13-local-delivery-error\">L13 - Local delivery error</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#l14-certificate-validation-error\">L14 - Certificate validation error</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/error-codes#l15-tail-buffer-temporarily-unavailable\">L15 - Tail buffer temporarily unavailable</a></li>\n</ul>\n<p>Whenever your app experiences an error, Heroku will return a standard error page with the HTTP status code 503. To help you debug the underlying error, however, the platform will also add custom error information to your logs. Each type of error gets its own error code, with all HTTP errors starting with the letter H and all runtime errors starting with R. Logging errors start with L.</p>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h10-app-crashed\">H10 - App crashed</a></h2>\n<p>A crashed web dyno or a boot timeout on the web dyno will present this error.</p>\n<pre><code>2010-10-06T21:51:04-07:00 heroku[web.1]: State changed from down to starting\n2010-10-06T21:51:07-07:00 app[web.1]: Starting process with command: `bundle exec rails server -p 22020`\n2010-10-06T21:51:09-07:00 app[web.1]: >> Using rails adapter\n2010-10-06T21:51:09-07:00 app[web.1]: Missing the Rails 2.3.5 gem. Please `gem install -v=2.3.5 rails`, update your RAILS_GEM_VERSION setting in config/environment.rb for the Rails version you do have installed, or comment out RAILS_GEM_VERSION to use the latest version installed.\n2010-10-06T21:51:10-07:00 heroku[web.1]: Process exited\n2010-10-06T21:51:12-07:00 heroku[router]: at=error code=H10 desc=\"App crashed\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno= connect= service= status=503 bytes=\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h11-backlog-too-deep\">H11 - Backlog too deep</a></h2>\n<p>When HTTP requests arrive faster than your application can process them, they can form a large backlog on a number of routers. When the backlog on a particular router passes a threshold, the router determines that your application isn't keeping up with its incoming request volume. You'll see an H11 error for each incoming request as long as the backlog is over this size. The exact value of this threshold may change depending on various factors, such as the number of dynos in your app, response time for individual requests, and your app's normal request volume.</p>\n<pre><code>2010-10-06T21:51:07-07:00 heroku[router]: at=error code=H11 desc=\"Backlog too deep\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno= connect= service= status=503 bytes=\n</code></pre>\n<p>The solution is to increase your app's throughput by adding more dynos, tuning your database (for example, adding an index), or making the code itself faster. As always, increasing performance is highly application-specific and requires profiling.</p>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h12-request-timeout\">H12 - Request timeout</a></h2>\n<p>For more information on request timeouts (including recommendations for resolving them), take a look at <a href=\"https://devcenter.heroku.com/articles/request-timeout\">our article on the topic</a>.</p>\n<p>An HTTP <a href=\"https://devcenter.heroku.com/articles/request-timeout\">request took longer than 30 seconds</a> to complete. In the example below, a Rails app takes 37 seconds to render the page; the HTTP router returns a 503 prior to Rails completing its request cycle, but the Rails process continues and the completion message shows after the router message.</p>\n<pre><code>2010-10-06T21:51:07-07:00 app[web.2]: Processing PostController#list (for 75.36.147.245 at 2010-10-06 21:51:07) [GET]\n2010-10-06T21:51:08-07:00 app[web.2]: Rendering template within layouts/application\n2010-10-06T21:51:19-07:00 app[web.2]: Rendering post/list\n2010-10-06T21:51:37-07:00 heroku[router]: at=error code=H12 desc=\"Request timeout\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno=web.1 connect=6ms service=30001ms status=503 bytes=0\n2010-10-06T21:51:42-07:00 app[web.2]: Completed in 37000ms (View: 27, DB: 21) | 200 OK [http://myapp.heroku.com/]\n</code></pre>\n<p>This 30-second limit is measured by the router, and includes all time spent in the dyno, including the kernel's incoming connection queue and the app itself.</p>\n<p>See <a href=\"https://devcenter.heroku.com/articles/request-timeout\">Request Timeout</a> for more, as well as a language-specific article on this error:</p>\n<ul>\n<li><a href=\"https://devcenter.heroku.com/articles/h12-request-timeout-in-ruby-mri\">H12 - Request Timeout in Ruby (MRI)</a></li>\n</ul>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h13-connection-closed-without-response\">H13 - Connection closed without response</a></h2>\n<p>This error is thrown when a process in your web dyno accepts a connection but then closes the socket without writing anything to it.</p>\n<pre><code>2010-10-06T21:51:37-07:00 heroku[router]: at=error code=H13 desc=\"Connection closed without response\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno=web.1 connect=3030ms service=9767ms status=503 bytes=0\n</code></pre>\n<p>One example where this might happen is when a <a href=\"https://devcenter.heroku.com/articles/rails-unicorn\">Unicorn web server</a> is configured with a timeout shorter than 30s and a request has not been processed by a worker before the timeout happens. In this case, Unicorn closes the connection before any data is written, resulting in an H13.</p>\n<p>An <a href=\"https://github.com/hunterloftis/heroku-node-errcodes/tree/master/h13\">example of an H13 can be found here</a>.</p>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h14-no-web-dynos-running\">H14 - No web dynos running</a></h2>\n<p>This is most likely the result of scaling your web dynos down to 0 dynos. To fix it, scale your web dynos to 1 or more dynos:</p>\n<pre><code>$ heroku ps:scale web=1\n</code></pre>\n<p>Use the <code>heroku ps</code> command to determine the state of your web dynos.</p>\n<pre><code>2010-10-06T21:51:37-07:00 heroku[router]: at=error code=H14 desc=\"No web processes running\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno= connect= service= status=503 bytes=\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h15-idle-connection\">H15 - Idle connection</a></h2>\n<p>The dyno did not send a full response and was <a href=\"https://devcenter.heroku.com/articles/request-timeout\">terminated due to 55 seconds of inactivity</a>. For example, the response indicated a <code>Content-Length</code> of 50 bytes which were not sent in time.</p>\n<pre><code>2010-10-06T21:51:37-07:00 heroku[router]: at=error code=H15 desc=\"Idle connection\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno=web.1 connect=1ms service=55449ms status=503 bytes=18\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h16-no-longer-in-use\">H16 - (No Longer in Use)</a></h2>\n<p>Heroku no longer emits H16 errors</p>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h17-poorly-formatted-http-response\">H17 - Poorly formatted HTTP response</a></h2>\n<p>Our HTTP routing stack has no longer accepts responses that are missing a reason phrase in the <a href=\"https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2\">status line</a>. 'HTTP/1.1 200 OK' will work with the new router, but 'HTTP/1.1 200' will not.</p>\n<p>This error message is logged when a router detects a malformed HTTP response coming from a dyno.</p>\n<pre><code>2010-10-06T21:51:37-07:00 heroku[router]: at=error code=H17 desc=\"Poorly formatted HTTP response\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno=web.1 connect=1ms service=1ms status=503 bytes=0\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h18-server-request-interrupted\">H18 - Server Request Interrupted</a></h2>\n<p>An H18 signifies that the socket connected, some data was sent as part of a response by the app, but then the socket was destroyed without completing the response.</p>\n<pre><code>2010-10-06T21:51:37-07:00 heroku[router]: sock=backend at=error code=H18 desc=\"Server Request Interrupted\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno=web.1 connect=1ms service=1ms status=503 bytes=0\n</code></pre>\n<p>An <a href=\"https://github.com/hunterloftis/heroku-node-errcodes/tree/master/h18\">example of an H18 can be found here</a>.</p>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h19-backend-connection-timeout\">H19 - Backend connection timeout</a></h2>\n<p>A router received a connection timeout error after 5 seconds attempting to open a socket to a web dyno. This is usually a symptom of your app being overwhelmed and failing to accept new connections in a timely manner. If you have multiple dynos, the router will retry multiple dynos before logging H19 and serving a standard error page.</p>\n<p>If your app has a single web dyno, it is possible to see H19 errors if the runtime instance running your web dyno fails and is replaced. Once the failure is detected and the instance is terminated your web dyno will be restarted somewhere else, but in the meantime, H19s may be served as the router fails to establish a connection to your dyno. This can be mitigated by running more than one web dyno.</p>\n<pre><code>2010-10-06T21:51:07-07:00 heroku[router]: at=error code=H19 desc=\"Backend connection timeout\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno=web.1 connect=5001ms service= status=503 bytes=\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h20-app-boot-timeout\">H20 - App boot timeout</a></h2>\n<p>The router will enqueue requests for 75 seconds while waiting for starting processes to reach an \"up\" state. If after 75 seconds, no web dynos have reached an \"up\" state, the router logs H20 and serves a standard error page.</p>\n<pre><code>2010-10-06T21:51:07-07:00 heroku[router]: at=error code=H20 desc=\"App boot timeout\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno= connect= service= status=503 bytes=\n</code></pre>\n<p>The Ruby on Rails <a href=\"http://guides.rubyonrails.org/asset_pipeline.html\">asset pipeline</a> can sometimes fail to run during <a href=\"https://devcenter.heroku.com/articles/git\">git push</a>, and will instead attempt to run when your app's <a href=\"https://devcenter.heroku.com/articles/dynos\">dynos</a> boot. Since the Rails asset pipeline is a slow process, this can cause H20 boot timeout errors.</p>\n<p>This error differs from <a href=\"https://devcenter.heroku.com/articles/error-codes#r10-boot-timeout\">R10</a> in that the H20 75-second timeout includes platform tasks such as internal state propagation, requests between internal components, slug download, unpacking, container preparation, etc... The R10 60-second timeout applies solely to application startup tasks.</p>\n<p>If your application requires more time to boot, you may use the <a href=\"https://tools.heroku.support/limits/boot_timeout\">boot timeout tool</a> to increase the limit. However, in general, slow boot times will make it harder to deploy your application and will make recovery from dyno failures slower, so this should be considered a <em>temporary solution</em>.</p>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h21-backend-connection-refused\">H21 - Backend connection refused</a></h2>\n<p>A router received a connection refused error when attempting to open a socket to your web process. This is usually a symptom of your app being overwhelmed and failing to accept new connections. If you have multiple dynos, the router will retry multiple dynos before logging H21 and serving a standard error page.</p>\n<pre><code>2010-10-06T21:51:07-07:00 heroku[router]: at=error code=H21 desc=\"Backend connection refused\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno=web.1 connect=1ms service= status=503 bytes=\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h22-connection-limit-reached\">H22 - Connection limit reached</a></h2>\n<p>A routing node has detected an elevated number of HTTP client connections attempting to reach your app. Reaching this threshold most likely means your app is under heavy load and is not responding quickly enough to keep up. The exact value of this threshold may change depending on various factors, such as the number of dynos in your app, response time for individual requests, and your app's normal request volume.</p>\n<pre><code>2010-10-06T21:51:07-07:00 heroku[router]: at=error code=H22 desc=\"Connection limit reached\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno= connect= service= status=503 bytes=\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h23-endpoint-misconfigured\">H23 - Endpoint misconfigured</a></h2>\n<p>A routing node has detected a <a href=\"https://tools.ietf.org/html/rfc6455#section-1.3\">websocket handshake</a>, specifically the 'Sec-Websocket-Version' header in the request, that came from an endpoint (upstream proxy) that does not support websockets.</p>\n<pre><code>2010-10-06T21:51:07-07:00 heroku[router]: at=error code=H23 desc=\"Endpoint misconfigured\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno= connect= service= status=503 bytes=\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h24-forced-close\">H24 - Forced close</a></h2>\n<p>The routing node serving this request was either shutdown for maintenance or terminated before the request completed.</p>\n<pre><code>2010-10-06T21:51:07-07:00 heroku[router]: at=error code=H24 desc=\"Forced close\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno=web.1 connect=1ms service=80000ms status= bytes=18\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h25-http-restriction\">H25 - HTTP Restriction</a></h2>\n<p>This error is logged when a routing node detects and blocks a valid HTTP response that is judged risky or too large to be safely parsed. The error comes in four types.</p>\n<p>Currently, this functionality is experimental, and is only made available to a subset of applications on the platform.</p>\n<h3><a href=\"https://devcenter.heroku.com/articles/error-codes#invalid-content-length\">Invalid content length</a></h3>\n<p>The response has multiple content lengths declared within the same response, with varying lengths.</p>\n<pre><code>2014-03-20T14:22:00.203382+00:00 heroku[router]: at=error code=H25 desc=\"HTTP restriction: invalid content length\" method=GET path=\"/\" host=myapp.herokuapp.com request_id=3f336f1a-9be3-4791-afe3-596a1f2a481f fwd=\"17.17.17.17\" dyno=web.1 connect=0 service=1 status=502 bytes=537\n</code></pre>\n<h3><a href=\"https://devcenter.heroku.com/articles/error-codes#oversized-cookies\">Oversized cookies</a></h3>\n<p>The cookie in the response will be too large to be used again in a request to the Heroku router or SSL endpoints.</p>\n<pre><code>2014-03-20T14:18:57.403882+00:00 heroku[router]: at=error code=H25 desc=\"HTTP restriction: oversized cookie\" method=GET path=\"/\" host=myapp.herokuapp.com request_id=90cfbbd2-0397-4bab-828f-193050a076c4 fwd=\"17.17.17.17\" dyno=web.1 connect=0 service=2 status=502 bytes=537\n</code></pre>\n<h3><a href=\"https://devcenter.heroku.com/articles/error-codes#oversized-header\">Oversized header</a></h3>\n<p>A single header line is deemed too long (over 512kb) and the response is discarded on purpose.</p>\n<pre><code>2014-03-20T14:12:28.555073+00:00 heroku[router]: at=error code=H25 desc=\"HTTP restriction: oversized header\" method=GET path=\"/\" host=myapp.herokuapp.com request_id=ab66646e-84eb-47b8-b3bb-2031ecc1bc2c fwd=\"17.17.17.17\" dyno=web.1 connect=0 service=397 status=502 bytes=542\n</code></pre>\n<h3><a href=\"https://devcenter.heroku.com/articles/error-codes#oversized-status-line\">Oversized status line</a></h3>\n<p>The status line is judged too long (8kb) and the response is discarded on purpose.</p>\n<pre><code>2014-03-20T13:54:44.423083+00:00 heroku[router]: at=error code=H25 desc=\"HTTP restriction: oversized status line\" method=GET path=\"/\" host=myapp.herokuapp.com request_id=208588ac-1a66-44c1-b665-fe60c596241b fwd=\"17.17.17.17\" dyno=web.1 connect=0 service=3 status=502 bytes=537\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h26-request-error\">H26 - Request Error</a></h2>\n<p>This error is logged when a request has been identified as belonging to a specific Heroku application, but cannot be delivered entirely to a dyno due to HTTP protocol errors in the request. Multiple possible causes can be identified in the log message.</p>\n<h3><a href=\"https://devcenter.heroku.com/articles/error-codes#unsupported-expect-header-value\">Unsupported expect header value</a></h3>\n<p>The request has an <code>expect</code> header, and its value is not <code>100-Continue</code>, the only expect value handled by the router. A request with an unsupported <code>expect</code> value is terminated with the status code <code>417 Expectation Failed</code>.</p>\n<pre><code>2014-05-14T17:17:37.456997+00:00 heroku[router]: at=error code=H26 desc=\"Request Error\" cause=\"unsupported expect header value\" method=GET path=\"/\" host=myapp.herokuapp.com request_id=3f336f1a-9be3-4791-afe3-596a1f2a481f fwd=\"17.17.17.17\" dyno= connect= service= status=417 bytes=\n</code></pre>\n<h3><a href=\"https://devcenter.heroku.com/articles/error-codes#bad-header\">Bad header</a></h3>\n<p>The request has an HTTP header with a value that is either impossible to parse, or not handled by the router, such as <code>connection: ,</code>.</p>\n<pre><code>2014-05-14T17:17:37.456997+00:00 heroku[router]: at=error code=H26 desc=\"Request Error\" cause=\"bad header\" method=GET path=\"/\" host=myapp.herokuapp.com request_id=3f336f1a-9be3-4791-afe3-596a1f2a481f fwd=\"17.17.17.17\" dyno= connect= service= status=400 bytes=\n</code></pre>\n<h3><a href=\"https://devcenter.heroku.com/articles/error-codes#bad-chunk\">Bad chunk</a></h3>\n<p>The request has a chunked transfer-encoding, but with a chunk that was invalid or couldn't be parsed correctly. A request with this status code will be interrupted during transfer to the dyno.</p>\n<pre><code>2014-05-14T17:17:37.456997+00:00 heroku[router]: at=error code=H26 desc=\"Request Error\" cause=\"bad chunk\" method=GET path=\"/\" host=myapp.herokuapp.com request_id=3f336f1a-9be3-4791-afe3-596a1f2a481f fwd=\"17.17.17.17\" dyno=web.1 connect=1 service=0 status=400 bytes=537\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h27-client-request-interrupted\">H27 - Client Request Interrupted</a></h2>\n<p>The client socket was closed either in the middle of the request or before a response could be returned. For example, the client closed their browser session before the request was able to complete.</p>\n<pre><code>2010-10-06T21:51:37-07:00 heroku[router]: sock=client at=warning code=H27 desc=\"Client Request Interrupted\" method=POST path=\"/submit/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno=web.1 connect=1ms service=0ms status=499 bytes=0\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h28-client-connection-idle\">H28 - Client Connection Idle</a></h2>\n<p>The client did not send a full request and was <a href=\"https://devcenter.heroku.com/articles/request-timeout#long-polling-and-streaming-responses\">terminated due to 55 seconds of inactivity</a>. For example, the client indicated a <code>Content-Length</code> of 50 bytes which were not sent in time.</p>\n<p><code>2010-10-06T21:51:37-07:00 heroku[router]: at=warning code=H28 desc=\"Client Connection Idle\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno=web.1 connect=1ms service=55449ms status=499 bytes=18</code></p>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h31-misdirected-request\">H31 - Misdirected Request</a></h2>\n<p>The client sent a request to the wrong endpoint. This could be because the client used stale DNS information or is accessing the app through a CDN that has stale DNS information. Verify that <a href=\"https://devcenter.heroku.com/articles/custom-domains\">DNS is correctly configured for your app</a>. If a CDN is configured for the app, consider contacting your CDN provider.</p>\n<p>If you and your app users can successfully access the app in a browser (or however the app is used), this may not be cause for concern. The errors may be caused by clients (typically web-crawlers) with cached DNS entries trying to access a now-invalid endpoint or IP address for your app.</p>\n<p>You can verify the validity of user agent through the app log error message as shown in the example below:</p>\n<pre><code>error code=H31 desc=\"Misdirected Request\" method=GET path=\"/\" host=[host.com] request_id=[guid] fwd=\"[IP]\" dyno= connect= service= status=421 bytes= protocol=http agent=\"&#x3C;agent>\"\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h80-maintenance-mode\">H80 - Maintenance mode</a></h2>\n<p>This is not an error, but we give it a code for the sake of completeness. Note the log formatting is the same but without the word \"Error\".</p>\n<pre><code>2010-10-06T21:51:07-07:00 heroku[router]: at=info code=H80 desc=\"Maintenance mode\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno= connect= service= status=503 bytes=\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h81-blank-app\">H81 - Blank app</a></h2>\n<p>No code has been pushed to this application. To get rid of this message you need to do one <a href=\"https://devcenter.heroku.com/articles/git#deploying-code\">deploy</a>. This is not an error, but we give it a code for the sake of completeness.</p>\n<pre><code>2010-10-06T21:51:07-07:00 heroku[router]: at=info code=H81 desc=\"Blank app\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno= connect= service= status=503 bytes=\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h82-free-dyno-quota-exhausted\">H82 - Free dyno quota exhausted</a></h2>\n<p>This indicates that an account's <a href=\"https://devcenter.heroku.com/articles/free-dyno-hours\">free dyno hour quota</a> is exhausted and that apps running free dynos are sleeping. You can view your app's free dyno usage in the <a href=\"https://dashboard.heroku.com/account/billing\">Heroku dashboard</a>.</p>\n<pre><code>2015-10-06T21:51:07-07:00 heroku[router]: at=info code=H82 desc=\"Free dyno quota exhausted\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno= connect= service= status=503 bytes=\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#h99-platform-error\">H99 - Platform error</a></h2>\n<p>H99 and R99 are the only error codes that represent errors in the Heroku platform.</p>\n<p>This indicates an internal error in the Heroku platform. Unlike all of the other errors which will require action from you to correct, this one does not require action from you. Try again in a minute, or check <a href=\"http://status.heroku.com/\">the status site</a>.</p>\n<pre><code>2010-10-06T21:51:07-07:00 heroku[router]: at=error code=H99 desc=\"Platform error\" method=GET path=\"/\" host=myapp.herokuapp.com fwd=17.17.17.17 dyno= connect= service= status=503 bytes=\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#r10-boot-timeout\">R10 - Boot timeout</a></h2>\n<p>A web process took longer than 60 seconds to bind to its assigned <code>$PORT</code>. When this happens, the dyno's process is killed and the dyno is considered crashed. Crashed dynos are restarted according to the dyno manager's <a href=\"https://devcenter.heroku.com/articles/dynos#automatic-dyno-restarts\">restart policy</a>.</p>\n<pre><code>2011-05-03T17:31:38+00:00 heroku[web.1]: State changed from created to starting\n2011-05-03T17:31:40+00:00 heroku[web.1]: Starting process with command: `bundle exec rails server -p 22020 -e production`\n2011-05-03T17:32:40+00:00 heroku[web.1]: Error R10 (Boot timeout) -> Web process failed to bind to $PORT within 60 seconds of launch\n2011-05-03T17:32:40+00:00 heroku[web.1]: Stopping process with SIGKILL\n2011-05-03T17:32:40+00:00 heroku[web.1]: Process exited\n2011-05-03T17:32:41+00:00 heroku[web.1]: State changed from starting to crashed\n</code></pre>\n<p>This error is often caused by a process being unable to reach an external resource, such as a database, or the application doing too much work, such as parsing and evaluating numerous, large code dependencies, during startup.</p>\n<p>Common solutions are to access external resources asynchronously, so they don't block startup, and to reduce the amount of application code or its dependencies.</p>\n<p>If your application requires more time to boot, you may use the <a href=\"https://tools.heroku.support/limits/boot_timeout\">boot timeout tool</a> to increase the limit. However, in general, slow boot times will make it harder to deploy your application and will make recovery from dyno failures slower, so this should be considered a <em>temporary solution</em>.</p>\n<p>One exception is for apps using the <a href=\"https://devcenter.heroku.com/articles/java-support\">Java buildpack</a>, <a href=\"https://devcenter.heroku.com/articles/deploying-gradle-apps-on-heroku\">Gradle buildpack</a>, <a href=\"https://devcenter.heroku.com/articles/war-deployment#deployment-with-the-heroku-cli\">heroku-deploy toolbelt plugin</a>, or <a href=\"https://devcenter.heroku.com/articles/deploying-java-applications-with-the-heroku-maven-plugin\">Heroku Maven plugin</a>, which will be allowed 90 seconds to bind to their assigned port.</p>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#r12-exit-timeout\">R12 - Exit timeout</a></h2>\n<p>A process failed to exit within 30 seconds of being sent a SIGTERM indicating that it should stop. The process is sent SIGKILL to force an exit.</p>\n<pre><code>2011-05-03T17:40:10+00:00 app[worker.1]: Working\n2011-05-03T17:40:11+00:00 heroku[worker.1]: Stopping process with SIGTERM\n2011-05-03T17:40:11+00:00 app[worker.1]: Ignoring SIGTERM\n2011-05-03T17:40:14+00:00 app[worker.1]: Working\n2011-05-03T17:40:18+00:00 app[worker.1]: Working\n2011-05-03T17:40:21+00:00 heroku[worker.1]: Error R12 (Exit timeout) -> Process failed to exit within 30 seconds of SIGTERM\n2011-05-03T17:40:21+00:00 heroku[worker.1]: Stopping process with SIGKILL\n2011-05-03T17:40:21+00:00 heroku[worker.1]: Process exited\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#r13-attach-error\">R13 - Attach error</a></h2>\n<p>A dyno started with <code>heroku run</code> failed to attach to the invoking client.</p>\n<pre><code>2011-06-29T02:13:29+00:00 app[run.3]: Awaiting client\n2011-06-29T02:13:30+00:00 heroku[run.3]: State changed from starting to up\n2011-06-29T02:13:59+00:00 app[run.3]: Error R13 (Attach error) -> Failed to attach to process\n2011-06-29T02:13:59+00:00 heroku[run.3]: Process exited\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#r14-memory-quota-exceeded\">R14 - Memory quota exceeded</a></h2>\n<p>A dyno requires memory in excess of its <a href=\"https://devcenter.heroku.com/articles/dynos#memory-behavior\">quota</a>. If this error occurs, the dyno will <a href=\"http://en.wikipedia.org/wiki/Paging\">page to swap space</a> to continue running, which may cause degraded process performance. The R14 error is calculated by total memory swap, rss and cache.</p>\n<pre><code>2011-05-03T17:40:10+00:00 app[worker.1]: Working\n2011-05-03T17:40:10+00:00 heroku[worker.1]: Process running mem=1028MB(103.3%)\n2011-05-03T17:40:11+00:00 heroku[worker.1]: Error R14 (Memory quota exceeded)\n2011-05-03T17:41:52+00:00 app[worker.1]: Working\n</code></pre>\n<p>If you are getting a large number of R14 errors, your application performance is likely severely degraded. Resolving R14 memory errors are language specific:</p>\n<ul>\n<li><a href=\"https://devcenter.heroku.com/articles/ruby-memory-use\">R14 - Memory Quota Exceeded in Ruby (MRI)</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/java-memory-issues\">Troubleshooting Memory Issues in Java Applications</a></li>\n<li><a href=\"https://devcenter.heroku.com/articles/node-memory-use\">Troubleshooting Node.js Memory Use</a></li>\n</ul>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#r15-memory-quota-vastly-exceeded\">R15 - Memory quota vastly exceeded</a></h2>\n<p>A dyno requires vastly more memory than its <a href=\"https://devcenter.heroku.com/articles/dynos#memory-behavior\">quota</a> and is consuming excessive swap space. If this error occurs, the dyno will be forcibly killed with <code>SIGKILL</code> (which cannot be caught or handled) by the platform. The R15 error is calculated by total memory swap and rss; cache is not included.</p>\n<pre><code>2011-05-03T17:40:10+00:00 app[worker.1]: Working\n2011-05-03T17:40:10+00:00 heroku[worker.1]: Process running mem=1029MB(201.0%)\n2011-05-03T17:40:11+00:00 heroku[worker.1]: Error R15 (Memory quota vastly exceeded)\n2011-05-03T17:40:11+00:00 heroku[worker.1]: Stopping process with SIGKILL\n2011-05-03T17:40:12+00:00 heroku[worker.1]: Process exited\n</code></pre>\n<p>In Private Spaces, dynos exceeding their memory quota do not use swap space and thus do not emit R14 errors.</p>\n<p>Private Space dynos vastly exceeding their memory quota generally will emit R15 errors but occasionally the platform may shut down the dyno before the R15 is sent, causing the error to be dropped. <em>If</em> an R15 is emitted it will only be visible in the app log stream but not in the dashboard <a href=\"https://devcenter.heroku.com/articles/metrics\">Application Metrics</a> interface. Other non-R15 types of errors from Private Space dynos are correctly surfaced in the Application Metrics interface.</p>\n<p>For Private Space dynos vastly exceeding their memory quota the platform kills dyno processes consuming large amounts of memory, but may not kill the dyno itself.</p>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#r16-detached\">R16 - Detached</a></h2>\n<p>An attached dyno is continuing to run after being sent <code>SIGHUP</code> when its external connection was closed. This is usually a mistake, though some apps might want to do this intentionally.</p>\n<pre><code>2011-05-03T17:32:03+00:00 heroku[run.1]: Awaiting client\n2011-05-03T17:32:03+00:00 heroku[run.1]: Starting process with command `bash`\n2011-05-03T17:40:11+00:00 heroku[run.1]: Client connection closed. Sending SIGHUP to all processes\n2011-05-03T17:40:16+00:00 heroku[run.1]: Client connection closed. Sending SIGHUP to all processes\n2011-05-03T17:40:21+00:00 heroku[run.1]: Client connection closed. Sending SIGHUP to all processes\n2011-05-03T17:40:26+00:00 heroku[run.1]: Error R16 (Detached) -> An attached process is not responding to SIGHUP after its external connection was closed.\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#r17-checksum-error\">R17 - Checksum error</a></h2>\n<p>This indicates an error with runtime <a href=\"https://devcenter.heroku.com/articles/slug-checksums\">slug checksum</a> verification. If the checksum does not match or there is another problem with the checksum when launch a dyno, an R17 error will occur and the dyno will fail to launch. Check the log stream for details about the error.</p>\n<pre><code>2016-08-16T12:39:56.439438+00:00 heroku[web.1]: State changed from provisioning to starting\n2016-08-16T12:39:57.110759+00:00 heroku[web.1]: Error R17 (Checksum error) -> Checksum does match expected value. Expected: SHA256:ed5718e83475c780145609cbb2e4f77ec8076f6f59ebc8a916fb790fbdb1ae64 Actual: SHA256:9ca15af16e06625dfd123ebc3472afb0c5091645512b31ac3dd355f0d8cc42c1\n2016-08-16T12:39:57.212053+00:00 heroku[web.1]: State changed from starting to crashed\n</code></pre>\n<p>If this error occurs, try deploying a new release with a correct checksum or rolling back to an older release. Ensure the checksum is <a href=\"https://devcenter.heroku.com/articles/slug-checksums\">formatted and calculated correctly</a> with the SHA256 algorithm. The checksum must start with <code>SHA256:</code> followed by the calculated SHA256 value for the compressed slug. If you did not manually calculate the checksum and error continues to occur, please contact Heroku support.</p>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#r99-platform-error\">R99 - Platform error</a></h2>\n<p>R99 and H99 are the only error codes that represent errors in the Heroku platform.</p>\n<p>This indicates an internal error in the Heroku platform. Unlike all of the other errors which will require action from you to correct, this one does not require action from you. Try again in a minute, or check <a href=\"http://status.heroku.com/\">the status site</a>.</p>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#l10-drain-buffer-overflow\">L10 - Drain buffer overflow</a></h2>\n<pre><code>2013-04-17T19:04:46+00:00 d.1234-drain-identifier-567 heroku logplex - - Error L10 (output buffer overflow): 500 messages dropped since 2013-04-17T19:04:46+00:00.\n</code></pre>\n<p>The number of log messages being generated has temporarily exceeded the rate at which they can be received by a drain consumer (such as a log management add-on) and Logplex, <a href=\"https://devcenter.heroku.com/articles/logging\">Heroku's logging system</a>, has discarded some messages in order to handle the rate difference.</p>\n<p>A common cause of L10 error messages is the exhaustion of capacity in a log consumer. If a log management add-on or similar system can only accept so many messages per time period, your application may experience L10s after crossing that threshold.</p>\n<p>Another common cause of L10 error messages is a sudden burst of log messages from a dyno. As each line of dyno output (e.g. a line of a stack trace) is a single log message, and Logplex limits the total number of un-transmitted log messages it will keep in memory to 1024 messages, a burst of lines from a dyno can overflow buffers in Logplex. In order to allow the log stream to catch up, Logplex will discard messages where necessary, keeping newer messages in favor of older ones.</p>\n<p>You may need to investigate reducing the volume of log lines output by your application (e.g. condense multiple log lines into a smaller, single-line entry). You can also use the <code>heroku logs -t</code> command to get a live feed of logs and find out where your problem might be. A single dyno stuck in a loop that generates log messages can force an L10 error, as can a problematic code path that causes all dynos to generate a multi-line stack trace for some code paths.</p>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#l11-tail-buffer-overflow\">L11 - Tail buffer overflow</a></h2>\n<p>A heroku logs --tail session cannot keep up with the volume of logs generated by the application or log channel, and Logplex has discarded some log lines necessary to catch up. To avoid this error you will need run the command on a faster internet connection (increase the rate at which you can receive logs) or you will need to modify your application to reduce the logging volume (decrease the rate at which logs are generated).</p>\n<pre><code>2011-05-03T17:40:10+00:00 heroku[logplex]: L11 (Tail buffer overflow) -> This tail session dropped 1101 messages since 2011-05-03T17:35:00+00:00\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#l12-local-buffer-overflow\">L12 - Local buffer overflow</a></h2>\n<p>The application is producing logs faster than the local delivery process (log-shuttle) can deliver them to logplex and has discarded some log lines in order to keep up. If this error is sustained you will need to reduce the logging volume of your application.</p>\n<pre><code>2013-11-04T21:31:32.125756+00:00 app[log-shuttle]: Error L12: 222 messages dropped since 2013-11-04T21:31:32.125756+00:00.\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#l13-local-delivery-error\">L13 - Local delivery error</a></h2>\n<p>The local log delivery process (log-shuttle) was unable to deliver some logs to Logplex and has discarded them. This can happen during transient network errors or during logplex service degradation. If this error is sustained please contact support.</p>\n<pre><code>2013-11-04T21:31:32.125756+00:00 app[log-shuttle]: Error L13: 111 messages lost since 2013-11-04T21:31:32.125756+00:00.\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#l14-certificate-validation-error\">L14 - Certificate validation error</a></h2>\n<p>The application is configured with a TLS syslog drain that doesn't have a valid TLS certificate.</p>\n<p>You should check that:</p>\n<ol>\n<li>You're not using a self-signed certificate.</li>\n<li>The certificate is up to date.</li>\n<li>The certificate is signed by a known and trusted CA.</li>\n<li>The CN hostname embedded in the certificate matches the hostname being connected to.</li>\n</ol>\n<pre><code>2015-09-04T23:28:48+00:00 heroku[logplex]: Error L14 (certificate validation): error=\"bad certificate\" uri=\"syslog+tls://logs.example.com:6514/\"\n</code></pre>\n<h2><a href=\"https://devcenter.heroku.com/articles/error-codes#l15-tail-buffer-temporarily-unavailable\">L15 - Tail buffer temporarily unavailable</a></h2>\n<p>The tail buffer that stores the last 1500 lines of your logs is temporarily unavailable. Run <code>heroku logs</code> again. If you still encounter the error, run <code>heroku logs -t</code> to stream your logs (which does not use the tail buffer).</p>"},{"url":"/docs/quick-reference/notes-template/","relativePath":"docs/quick-reference/notes-template.md","relativeDir":"docs/quick-reference","base":"notes-template.md","name":"notes-template","frontmatter":{"title":"Notes Template","weight":2,"seo":{"title":"Gatsby Plugins For This Sites Content Model","description":"This is my markdown notes tempate","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Gatsby Plugins For This Sites Content Model","keyName":"property"},{"name":"og:description","value":"This is the Gatsby Plugins For This Sites Content Model page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Gatsby Plugins For This Sites Content Model"},{"name":"twitter:description","value":"This is the Gatsby Plugins For This Sites Content Model page"}]},"template":"docs"},"html":"<p><img src=\"images/0001-76d89ef6.jpg\"></p>\n<h1>Title</h1>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<ul>\n<li>\n<p>Description:</p>\n<blockquote>\n<p>/_ Description here _/</p>\n</blockquote>\n</li>\n</ul>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>ToC:</h2>\n<ul>\n<li>\n<p><a href=\"#title\">Title</a></p>\n<ul>\n<li><a href=\"#toc\">ToC:</a></li>\n<li><a href=\"#main-notes\">Main Notes:</a></li>\n<li><a href=\"#resource-links\">Resource Links:</a></li>\n<li><a href=\"#10-x-10-table\">10 X 10 Table</a></li>\n<li><a href=\"#headers\">Headers</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#h1\">H1</a></p>\n<ul>\n<li>\n<p><a href=\"#h2\">H2</a></p>\n<ul>\n<li>\n<p><a href=\"#h3\">H3</a></p>\n<ul>\n<li>\n<p><a href=\"#h4\">H4</a></p>\n<ul>\n<li>\n<p><a href=\"#h5\">H5</a></p>\n<ul>\n<li><a href=\"#h6\">H6</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#alt-h1\">Alt-H1</a></p>\n<ul>\n<li><a href=\"#alt-h2\">Alt-H2</a></li>\n<li><a href=\"#emphasis\">Emphasis</a></li>\n<li><a href=\"#lists\">Lists</a></li>\n<li><a href=\"#links\">Links</a></li>\n<li><a href=\"#images\">Images</a></li>\n<li><a href=\"#code-and-syntax-highlighting\">Code and Syntax Highlighting</a></li>\n<li><a href=\"#tables\">Tables</a></li>\n<li><a href=\"#blockquotes\">Blockquotes</a></li>\n<li><a href=\"#inline-html\">Inline HTML</a></li>\n<li><a href=\"#horizontal-rule\">Horizontal Rule</a></li>\n<li><a href=\"#line-breaks\">Line Breaks</a></li>\n<li><a href=\"#youtube-videos\">YouTube Videos</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#this-is-an-h1\">This is an H1</a></p>\n<ul>\n<li>\n<p><a href=\"#this-is-an-h2\">This is an H2</a></p>\n<ul>\n<li>\n<p><a href=\"#this-is-an-h3\">This is an H3</a></p>\n<ul>\n<li><a href=\"#this-is-an-h4\">This is an H4</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#quoting\">Quoting</a></li>\n<li><a href=\"#unordered-lists\">Unordered Lists</a></li>\n<li><a href=\"#ordered-lists\">Ordered Lists</a></li>\n<li><a href=\"#video-embeds\">Video Embeds</a></li>\n<li><a href=\"#code-blocks\">Code Blocks</a></li>\n<li><a href=\"#tables-1\">Tables</a></li>\n</ul>\n</li>\n</ul>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>Main Notes:</h2>\n<pre><code class=\"language-js\"></code></pre>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>Resource Links:</h2>\n<ol>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n<li><a href=\"\"></a></li>\n</ol>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<h2>10 X 10 Table</h2>\n<table>\n<tbody>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n<td>&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<a name=\"headers\"/>\n<h2>Headers</h2>\n<pre><code class=\"language-no-highlight\"># H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\nAlt-H1\n======\n\nAlt-H2\n------\n</code></pre>\n<h1>H1</h1>\n<h2>H2</h2>\n<h3>H3</h3>\n<h4>H4</h4>\n<h5>H5</h5>\n<h6>H6</h6>\n<p>Alternatively, for H1 and H2, an underline-ish style:</p>\n<h1>Alt-H1</h1>\n<h2>Alt-H2</h2>\n<a name=\"emphasis\"/>\n<h2>Emphasis</h2>\n<pre><code class=\"language-no-highlight\">Emphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n</code></pre>\n<p>Emphasis, aka italics, with <em>asterisks</em> or <em>underscores</em>.</p>\n<p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p>\n<p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>\n<p>Strikethrough uses two tildes. <del>Scratch this.</del></p>\n<a name=\"lists\"/>\n<h2>Lists</h2>\n<p>(In this example, leading and trailing spaces are shown with with dots: ⋅)</p>\n<pre><code class=\"language-no-highlight\">1. First ordered list item\n2. Another item\n⋅⋅* Unordered sub-list.\n1. Actual numbers don't matter, just that it's a number\n⋅⋅1. Ordered sub-list\n4. And another item.\n\n⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\n⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅\n⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n</code></pre>\n<ol>\n<li>First ordered list item</li>\n<li>Another item</li>\n<li>Unordered sub-list.</li>\n<li>Actual numbers don't matter, just that it's a number</li>\n<li>Ordered sub-list</li>\n<li>\n<p>And another item.</p>\n<p>You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).</p>\n<p>To have a line break without a paragraph, you will need to use two trailing spaces.<br>\nNote that this line is separate, but within the same paragraph.<br>\n(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p>\n</li>\n<li>Unordered list can use asterisks</li>\n</ol>\n<!---->\n<ul>\n<li>Or minuses</li>\n</ul>\n<!---->\n<ul>\n<li>Or pluses</li>\n</ul>\n<a name=\"links\"/>\n<h2>Links</h2>\n<p>There are two ways to create links.</p>\n<pre><code class=\"language-no-highlight\">[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links.\nhttp://www.example.com or &#x3C;http://www.example.com> and sometimes\nexample.com (but not on Github, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n</code></pre>\n<p><a href=\"https://www.google.com\">I'm an inline-style link</a></p>\n<p><a href=\"https://www.google.com\" title=\"Google&#x27;s Homepage\">I'm an inline-style link with title</a></p>\n<p><a href=\"https://www.mozilla.org\">I'm a reference-style link</a></p>\n<p><a href=\"../blob/master/LICENSE\">I'm a relative reference to a repository file</a></p>\n<p><a href=\"http://slashdot.org\">You can use numbers for reference-style link definitions</a></p>\n<p>Or leave it empty and use the <a href=\"http://www.reddit.com\">link text itself</a>.</p>\n<p>URLs and URLs in angle brackets will automatically get turned into links.\n<a href=\"http://www.example.com\">http://www.example.com</a> or <a href=\"http://www.example.com\">http://www.example.com</a> and sometimes\nexample.com (but not on Github, for example).</p>\n<p>Some text to show that the reference links can follow later.</p>\n<a name=\"images\"/>\n<h2>Images</h2>\n<p><img src=\"images/md-cheat-sheet-42411273.PNG\"></p>\n<pre><code class=\"language-no-highlight\">Here's our logo (hover to see the title text):\n\nInline-style:\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")\n\nReference-style:\n![alt text][logo]\n\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 2\"\n</code></pre>\n<p>Here's our logo (hover to see the title text):</p>\n<p>Inline-style:\n<img src=\"https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png\" alt=\"alt text\" title=\"Logo Title Text 1\"></p>\n<p>Reference-style:\n<img src=\"https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png\" alt=\"alt text\" title=\"Logo Title Text 2\"></p>\n<a name=\"code\"/>\n<h2>Code and Syntax Highlighting</h2>\n<p>Code blocks are part of the Markdown spec, but syntax highlighting isn't. However, many renderers -- like Github's and <em>Markdown Here</em> -- support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. <em>Markdown Here</em> supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the <a href=\"http://softwaremaniacs.org/media/soft/highlight/test.html\">highlight.js demo page</a>.</p>\n<pre><code class=\"language-no-highlight\">Inline `code` has `back-ticks around` it.\n</code></pre>\n<p>Inline <code>code</code> has <code>back-ticks around</code> it.</p>\n<p>Blocks of code are either fenced by lines with three back-ticks <code>```</code>, or are indented with four spaces. I recommend only using the fenced code blocks -- they're easier and only they support syntax highlighting.</p>\n<pre lang=\"no-highlight\"><code>```javascript\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n```\n \n```python\ns = \"Python syntax highlighting\"\nprint s\n```\n \n```\nNo language indicated, so no syntax highlighting. \nBut let's throw in a &lt;b&gt;tag&lt;/b&gt;.\n```\n</code></pre>\n<pre><code class=\"language-javascript\">var s = 'JavaScript syntax highlighting';\nalert(s);\n</code></pre>\n<pre><code class=\"language-python\">s = \"Python syntax highlighting\"\nprint s\n</code></pre>\n<pre><code>No language indicated, so no syntax highlighting in Markdown Here (varies on Github).\nBut let's throw in a &#x3C;b>tag&#x3C;/b>.\n</code></pre>\n<a name=\"tables\"/>\n<h2>Tables</h2>\n<p>Tables aren't part of the core Markdown spec, but they are part of GFM and <em>Markdown Here</em> supports them. They are an easy way of adding tables to your email -- a task that would otherwise require copy-pasting from another application.</p>\n<pre><code class=\"language-no-highlight\">Colons can be used to align columns.\n\n| Tables        |      Are      |  Cool |\n| ------------- | :-----------: | ----: |\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      |   centered    |   $12 |\n| zebra stripes |   are neat    |    $1 |\n\nThere must be at least 3 dashes separating each header cell.\nThe outer pipes (|) are optional, and you don't need to make the\nraw Markdown line up prettily. You can also use inline Markdown.\n\n| Markdown | Less      | Pretty     |\n| -------- | --------- | ---------- |\n| *Still*  | `renders` | **nicely** |\n| 1        | 2         | 3          |\n</code></pre>\n<p>Colons can be used to align columns.</p>\n<table>\n<thead>\n<tr>\n<th>Tables</th>\n<th align=\"center\">Are</th>\n<th align=\"right\">Cool</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>col 3 is</td>\n<td align=\"center\">right-aligned</td>\n<td align=\"right\">$1600</td>\n</tr>\n<tr>\n<td>col 2 is</td>\n<td align=\"center\">centered</td>\n<td align=\"right\">$12</td>\n</tr>\n<tr>\n<td>zebra stripes</td>\n<td align=\"center\">are neat</td>\n<td align=\"right\">$1</td>\n</tr>\n</tbody>\n</table>\n<p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.</p>\n<table>\n<thead>\n<tr>\n<th>Markdown</th>\n<th>Less</th>\n<th>Pretty</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>Still</em></td>\n<td><code>renders</code></td>\n<td><strong>nicely</strong></td>\n</tr>\n<tr>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<a name=\"blockquotes\"/>\n<h2>Blockquotes</h2>\n<pre><code class=\"language-no-highlight\">> Blockquotes are very handy in email to emulate reply text.\n> This line is part of the same quote.\n\nQuote break.\n\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.\n</code></pre>\n<blockquote>\n<p>Blockquotes are very handy in email to emulate reply text.\nThis line is part of the same quote.</p>\n</blockquote>\n<p>Quote break.</p>\n<blockquote>\n<p>This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p>\n</blockquote>\n<a name=\"html\"/>\n<h2>Inline HTML</h2>\n<p>You can also use raw HTML in your Markdown, and it'll mostly work pretty well.</p>\n<pre><code class=\"language-no-highlight\">&#x3C;dl>\n  &#x3C;dt>Definition list&#x3C;/dt>\n  &#x3C;dd>Is something people use sometimes.&#x3C;/dd>\n\n  &#x3C;dt>Markdown in HTML&#x3C;/dt>\n  &#x3C;dd>Does *not* work **very** well. Use HTML &#x3C;em>tags&#x3C;/em>.&#x3C;/dd>\n&#x3C;/dl>\n</code></pre>\n<dl>\n  <dt>Definition list</dt>\n  <dd>Is something people use sometimes.</dd>\n  <dt>Markdown in HTML</dt>\n  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\n</dl>\n<a name=\"hr\"/>\n<h2>Horizontal Rule</h2>\n<pre><code>Three or more...\n\n[![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png)](#-)\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n</code></pre>\n<p>Three or more...</p>\n<p><a href=\"#-\"><img src=\"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png\" alt=\"-----------------------------------------------------\"></a></p>\n<p>Hyphens</p>\n<hr>\n<p>Asterisks</p>\n<hr>\n<p>Underscores</p>\n<a name=\"lines\"/>\n<h2>Line Breaks</h2>\n<p>My basic recommendation for learning how line breaks work is to experiment and discover -- hit &#x3C;Enter> once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You'll soon learn to get what you want. \"Markdown Toggle\" is your friend.</p>\n<p>Here are some things to try out:</p>\n<pre><code>Here's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\n</code></pre>\n<p>Here's a line for us to start with.</p>\n<p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p>\n<p>This line is also begins a separate paragraph, but...<br>\nThis line is only separated by a single newline, so it's a separate line in the <em>same paragraph</em>.</p>\n<p>(Technical note: <em>Markdown Here</em> uses GFM line breaks, so there's no need to use MD's two-space line breaks.)</p>\n<a name=\"videos\"/>\n<h2>YouTube Videos</h2>\n<p>They can't be added directly but you can add an image with a link to the video like this:</p>\n<pre><code class=\"language-no-highlight\">&#x3C;a href=\"http://www.youtube.com/watch?feature=player_embedded&#x26;v=YOUTUBE_VIDEO_ID_HERE\n\" target=\"_blank\">&#x3C;img src=\"http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg\"\nalt=\"IMAGE ALT TEXT HERE\" width=\"240\" height=\"180\" border=\"10\" />&#x3C;/a>\n</code></pre>\n<p>Or, in pure Markdown, but losing the image sizing and border:</p>\n<pre><code class=\"language-no-highlight\">[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)\n</code></pre>\n<p><strong>This is a paragraph</strong>. Pellentesque habitant morbi <em>tristique senectus et netus et malesuada</em> fames ac turpis egestas. Vestibulum <a href=\"https://www.google.com\">tortor quam</a>, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit <mark>amet est et sapien ullamcorper</mark> pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi.</p>\n<h1>This is an H1</h1>\n<p>Quisque facilisis erat a dui. Nam malesuada ornare dolor. Cras gravida, this is marked text ornare, erat elit consectetuer erat, id egestas pede nibh eget odio. Proin tincidunt, velit vel porta elementum, magna diam molestie sapien, non aliquet massa pede eu diam. Aliquam iaculis. Fusce et ipsum et nulla tristique facilisis.</p>\n<h2>This is an H2</h2>\n<p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Morbi commodo, ipsum sed pharetra gravida, orci magna rhoncus neque, id pulvinar odio lorem non turpis. Nullam sit amet enim. Suspendisse id velit vitae ligula volutpat condimentum. Aliquam erat volutpat. Sed quis velit. Nulla facilisi. Nulla libero.</p>\n<h3>This is an H3</h3>\n<p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Morbi commodo, ipsum sed pharetra gravida, orci magna rhoncus neque, id pulvinar odio lorem non turpis. Nullam sit amet enim. Suspendisse id velit vitae ligula volutpat condimentum. Aliquam erat volutpat. Sed quis velit. Nulla facilisi. Nulla libero.</p>\n<h4>This is an H4</h4>\n<p>Quisque facilisis erat a dui. Nam malesuada ornare dolor. Cras gravida, diam sit amet rhoncus ornare, erat elit consectetuer erat, id egestas pede nibh eget odio. Proin tincidunt, velit vel porta elementum, magna diam molestie sapien, non aliquet massa pede eu diam. Aliquam iaculis.</p>\n<h2>Quoting</h2>\n<p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</p>\n<blockquote>\n<p>Creativity is allowing yourself to make mistakes. Design is knowing which ones to keep. - Scott Adams</p>\n</blockquote>\n<p>Morbi commodo, ipsum sed pharetra gravida, orci magna rhoncus neque, id pulvinar odio lorem non turpis. Nullam sit amet enim. Suspendisse id velit vitae ligula volutpat condimentum. Aliquam erat volutpat. Sed quis velit. Nulla facilisi. Nulla libero.</p>\n<hr />\n<h2>Unordered Lists</h2>\n<ul>\n<li>Donec non tortor in arcu mollis feugiat</li>\n<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit</li>\n<li>Donec id eros eget quam aliquam gravida</li>\n<li>Vivamus convallis urna id felis</li>\n<li>Nulla porta tempus sapien</li>\n</ul>\n<h2>Ordered Lists</h2>\n<ol>\n<li>Donec non tortor in arcu mollis feugiat</li>\n<li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit</li>\n<li>Donec id eros eget quam aliquam gravida</li>\n<li>Vivamus convallis urna id felis</li>\n<li>Nulla porta tempus sapien</li>\n</ol>\n<h2>Video Embeds</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8uuFIi-ghPI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h2>Code Blocks</h2>\n<p>Blocks of code are either fenced by <code>lines with three back-ticks</code>, or are indented with four spaces.</p>\n<pre><code>&#x3C;!-- Some example CSS code -->\nbody {\n  color:red;\n}\n</code></pre>\n<pre><code class=\"language-javascript\">window.$docsify = {\n    coverpage: true,\n\n    // Custom file name\n    coverpage: 'cover.md',\n\n    // mutiple covers\n    coverpage: ['/', '/zh-cn/'],\n\n    // mutiple covers and custom file name\n    coverpage: {\n        '/': 'cover.md',\n        '/zh-cn/': 'cover.md'\n    }\n};\n</code></pre>\n<h2>Tables</h2>\n<div class=\"responsive-table\">\n  <table>\n      <caption>Table with thead, tfoot, and tbody</caption>\n    <thead>\n      <tr>\n        <th>Header content 1</th>\n        <th>Header content 2</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Body content 1</td>\n        <td>Body content 2</td>\n      </tr>\n    </tbody>\n    <tfoot>\n      <tr>\n        <td>Footer content 1</td>\n        <td>Footer content 2</td>\n      </tr>\n    </tfoot>\n  </table>\n</div>\n<div class=\"note\"><strong>Note:</strong> Both of the features you used above are parts of the Document Object Model (DOM) API, which allows you to manipulate documents.</div>\n<div class=\"important\"><strong>Important:</strong> In this article, try entering the example code lines into your JavaScript console to see what happens. For more details on JavaScript consoles, see Discover browser developer tools.</div>"},{"url":"/docs/quick-reference/quick-links/","relativePath":"docs/quick-reference/quick-links.md","relativeDir":"docs/quick-reference","base":"quick-links.md","name":"quick-links","frontmatter":{"title":"Quick Links","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h1>Gitbook Websites:</h1>\n<ul>\n<li><a href=\"https://bryan-guner.gitbook.io/datastructures-in-pytho/\">Python</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/web-dev-hub-docs/\">General</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/solidarity-blockchain-nfts/\">Blockchain &#x26; NFTs</a></li>\n<li><a href=\"https://bryan-guner.gitbook.io/mynotes/\">React</a></li>\n</ul>\n<h1>Sites I Wish To Revisit:</h1>\n<ul>\n<li><a href=\"https://hasura.io/learn/\">Hasura</a></li>\n</ul>"},{"url":"/docs/quick-reference/topRepos/","relativePath":"docs/quick-reference/topRepos.md","relativeDir":"docs/quick-reference","base":"topRepos.md","name":"topRepos","frontmatter":{"title":"Top Repos","weight":1,"seo":{"title":"Top Repos","description":"This is the Top Repos page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Top Repos","keyName":"property"},{"name":"og:description","value":"This is the Top Repos page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Top Repos"},{"name":"twitter:description","value":"This is the Top Repos page"}]},"template":"docs"},"html":"<h1>My Top Repos / Websites:</h1>\n<ul>\n<li><a href=\"https://github.com/bgoonz/PYTHON_PRAC\">Python Practice</a></li>\n<li><a href=\"https://lambda-resources.netlify.app/\">Lambda Bootcamp Website</a></li>\n<li><a href=\"https://github.com/bgoonz/React_Notes_V3\">React Notes</a></li>\n<li><a href=\"https://github.com/bgoonz/Project-Showcase\">Project Showcase</a></li>\n<li><a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\">Data Structures &#x26; Algorithms</a></li>\n<li><a href=\"https://github.com/bgoonz/Lambda-Resource-Static-Assets\">Lambda Site Static Content Server</a></li>\n<li><a href=\"https://github.com/bgoonz/mini-project-showcase\">Mini-Project Showcase</a></li>\n<li><a href=\"https://github.com/bgoonz/Useful-Snippets-js\">Useful Snippets</a></li>\n<li><a href=\"https://github.com/bgoonz/Markdown-Templates\">Markdown Templates</a></li>\n<li><a href=\"https://github.com/bgoonz/zumzi-chat-messenger\">Zumzi Video Conferencing App (mesibo api backend)</a></li>\n</ul>"},{"url":"/docs/quick-reference/psql/","relativePath":"docs/quick-reference/psql.md","relativeDir":"docs/quick-reference","base":"psql.md","name":"psql","frontmatter":{"title":"Postgresql Cheat Sheet","weight":0,"excerpt":"Postgresql Cheat Sheet","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>Postgresql Cheat Sheet</h1>\n<p>PostgreSQL commands</p>\n<hr>\n<h4><a href=\"http://medium.com/codex\" class=\"markup--anchor markup--h4-anchor\">CODEX</a></h4>\n<h3>PostgreSQL Cheat Sheet</h3>\n<h4><strong>Each table is made up of rows and columns. If you think of a table as a grid, the column go from left to right across the grid and each entry of data is listed down as a row.</strong></h4>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*ZLWhY1d1jdboZh_s.png\" class=\"graf-image\" /></figure><a href=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\"><strong>ALLOFMYOTHERARTICLES</strong><br />\nbryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a>\n<p>Each row in a relational is uniquely identified by a primary key. This can be by one or more sets of column values. In most scenarios it is a single column, such as employeeID.</p>\n<p>Every relational table has one primary key. Its purpose is to uniquely identify each row in the database. No two rows can have the same primary key value. The practical result of this is that you can select every single row by just knowing its primary key.</p>\n<p>SQL Server UNIQUE constraints allow you to ensure that the data stored in a column, or a group of columns, is unique among the rows in a table.</p>\n<p>Although both UNIQUE and <a href=\"https://www.sqlservertutorial.net/sql-server-basics/sql-server-primary-key/\" class=\"markup--anchor markup--p-anchor\">PRIMARY KEY</a> constraints enforce the uniqueness of data, you should use the UNIQUE constraint instead of PRIMARY KEY constraint when you want to enforce the uniqueness of a column, or a group of columns, that are not the primary key columns.</p>\n<p>Different from PRIMARY KEY constraints, UNIQUE constraints allow NULL. Moreover, UNIQUE constraints treat the NULL as a regular value, therefore, it only allows one NULL per column.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*kgzq5NoL5ejBGvuZ4qLDaQ.png\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/1*hr8DccnpiR2Uj5UI3iLsOQ.png\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/1*RiWJpwpVMdge3Sqofn3srA.png\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/1*GN5aSwENOvntpfk90rHYFg.png\" class=\"graf-image\" /></figure>Create a new <a href=\"https://www.postgresqltutorial.com/postgresql-roles/\" class=\"markup--anchor markup--p-anchor\">role</a>:\n<pre><code>CREATE ROLE role_name;\n</code></pre>\n<p>Create a new role with a <code>username</code> and <code>password</code>:</p>\n<pre><code>CREATE ROLE username NOINHERIT LOGIN PASSWORD password;\n</code></pre>\n<p>Change role for the current session to the <code>new_role</code>:</p>\n<pre><code>SET ROLE new_role;\n</code></pre>\n<p>Allow <code>role_1</code> to set its role as <code>role_2:</code></p>\n<pre><code>GRANT role_2 TO role_1;\n</code></pre>\n<h3>Managing databases</h3>\n<p><a href=\"https://www.postgresqltutorial.com/postgresql-create-database/\" class=\"markup--anchor markup--p-anchor\">Create a new database</a>:</p>\n<pre><code>CREATE DATABASE [IF NOT EXISTS] db_name;\n</code></pre>\n<p><a href=\"https://www.postgresqltutorial.com/postgresql-drop-database/\" class=\"markup--anchor markup--p-anchor\">Delete a database permanently</a>:</p>\n<pre><code>DROP DATABASE [IF EXISTS] db_name;\n</code></pre>\n<h3>Managing tables</h3>\n<p><a href=\"https://www.postgresqltutorial.com/postgresql-create-table/\" class=\"markup--anchor markup--p-anchor\">Create a new table</a> or a <a href=\"https://www.postgresqltutorial.com/postgresql-temporary-table/\" class=\"markup--anchor markup--p-anchor\">temporary table</a></p>\n<pre><code>CREATE [TEMP] TABLE [IF NOT EXISTS] table_name(\n       pk SERIAL PRIMARY KEY,\n   c1 type(size) NOT NULL,\n   c2 type(size) NULL,\n   ...\n);\n</code></pre>\n<p><a href=\"https://www.postgresqltutorial.com/postgresql-add-column/\" class=\"markup--anchor markup--p-anchor\">Add a new column</a> to a table:</p>\n<pre><code>ALTER TABLE table_name ADD COLUMN new_column_name TYPE;\n</code></pre>\n<p><a href=\"https://www.postgresqltutorial.com/postgresql-drop-column/\" class=\"markup--anchor markup--p-anchor\">Drop a column</a> in a table:</p>\n<pre><code>ALTER TABLE table_name DROP COLUMN column_name;\n</code></pre>\n<p><a href=\"https://www.postgresqltutorial.com/postgresql-rename-column/\" class=\"markup--anchor markup--p-anchor\">Rename a column</a>:</p>\n<pre><code>ALTER TABLE table_name RENAME column_name TO new_column_name;\n</code></pre>\n<p>Set or remove a default value for a column:</p>\n<pre><code>ALTER TABLE table_name ALTER COLUMN [SET DEFAULT value | DROP DEFAULT]\n</code></pre>\n<p>Add a <a href=\"https://www.postgresqltutorial.com/postgresql-primary-key/\" class=\"markup--anchor markup--p-anchor\">primary key</a> to a table.</p>\n<pre><code>ALTER TABLE table_name ADD PRIMARY KEY (column,...);\n</code></pre>\n<p>Remove the primary key from a table.</p>\n<pre><code>ALTER TABLE table_name\nDROP CONSTRAINT primary_key_constraint_name;\n</code></pre>\n<p><a href=\"https://www.postgresqltutorial.com/postgresql-rename-table/\" class=\"markup--anchor markup--p-anchor\">Rename a table</a>.</p>\n<pre><code>ALTER TABLE table_name RENAME TO new_table_name;\n</code></pre>\n<p><a href=\"https://www.postgresqltutorial.com/postgresql-drop-table/\" class=\"markup--anchor markup--p-anchor\">Drop a table</a> and its dependent objects:</p>\n<pre><code>DROP TABLE [IF EXISTS] table_name CASCADE;\n</code></pre>\n<h3>Managing views</h3>\n<p><a href=\"https://www.postgresqltutorial.com/managing-postgresql-views/\" class=\"markup--anchor markup--p-anchor\">Create a view</a>:</p>\n<pre><code>CREATE OR REPLACE view_name AS\nquery;\n</code></pre>\n<p><a href=\"https://www.postgresqltutorial.com/postgresql-recursive-view/\" class=\"markup--anchor markup--p-anchor\">Create a recursive view</a>:</p>\n<pre><code>CREATE RECURSIVE VIEW view_name(column_list) AS\nSELECT column_list;\n</code></pre>\n<p><a href=\"https://www.postgresqltutorial.com/postgresql-materialized-views/\" class=\"markup--anchor markup--p-anchor\">Create a materialized view</a>:</p>\n<pre><code>CREATE MATERIALIZED VIEW view_name\nAS\nquery\nWITH [NO] DATA;\n</code></pre>\n<p>Refresh a materialized view:</p>\n<pre><code>REFRESH MATERIALIZED VIEW CONCURRENTLY view_name;\n</code></pre>\n<p>Drop a view:</p>\n<pre><code>DROP VIEW [ IF EXISTS ] view_name;\n</code></pre>\n<p>Drop a materialized view:</p>\n<pre><code>DROP MATERIALIZED VIEW view_name;\n</code></pre>\n<p>Rename a view:</p>\n<pre><code>ALTER VIEW view_name RENAME TO new_name;\n</code></pre>\n<h3>Managing indexes</h3>\n<p>Creating an index with the specified name on a table</p>\n<pre><code>CREATE [UNIQUE] INDEX index_name\nON table (column,...)\n</code></pre>\n<p>Removing a specified index from a table</p>\n<pre><code>DROP INDEX index_name;\n</code></pre>\n<h3>Querying data from tables</h3>\n<p>Query all data from a table:</p>\n<pre><code>SELECT * FROM table_name;\n</code></pre>\n<p>Query data from specified columns of all rows in a table:</p>\n<pre><code>SELECT column_list\nFROM table;\n</code></pre>\n<p>Query data and select only unique rows:</p>\n<pre><code>SELECT DISTINCT (column)\nFROM table;\n</code></pre>\n<p>Query data from a table with a filter:</p>\n<pre><code>SELECT *\nFROM table\nWHERE condition;\n</code></pre>\n<p>Assign an <a href=\"https://www.postgresqltutorial.com/postgresql-alias/\" class=\"markup--anchor markup--p-anchor\">alias</a> to a column in the result set:</p>\n<pre><code>SELECT column_1 AS new_column_1, ...\nFROM table;\n</code></pre>\n<p>Query data using the <code>LIKE</code> operator:</p>\n<pre><code>SELECT * FROM table_name\nWHERE column LIKE '%value%'\n</code></pre>\n<p>Query data using the <code>BETWEEN</code>operator:</p>\n<pre><code>SELECT * FROM table_name\nWHERE column BETWEEN low AND high;\n</code></pre>\n<p>Query data using the <code>IN</code>operator:</p>\n<pre><code>SELECT * FROM table_name\nWHERE column IN (value1, value2,...);\n</code></pre>\n<p>Constrain the returned rows with the <code>LIMIT</code> clause:</p>\n<pre><code>SELECT * FROM table_name\nLIMIT limit OFFSET offset\nORDER BY column_name;\n</code></pre>\n<p>Query data from multiple using the <a href=\"https://www.postgresqltutorial.com/postgresql-inner-join/\" class=\"markup--anchor markup--p-anchor\">inner join</a>, <a href=\"https://www.postgresqltutorial.com/postgresql-left-join/\" class=\"markup--anchor markup--p-anchor\">left join</a>, <a href=\"https://www.postgresqltutorial.com/postgresql-full-outer-join/\" class=\"markup--anchor markup--p-anchor\">full outer join</a>, <a href=\"https://www.postgresqltutorial.com/postgresql-cross-join/\" class=\"markup--anchor markup--p-anchor\">cross join</a> and <a href=\"https://www.postgresqltutorial.com/postgresql-natural-join/\" class=\"markup--anchor markup--p-anchor\">natural join</a>:</p>\n<pre><code>SELECT *\nFROM table1\nINNER JOIN table2 ON conditions\nSELECT *\nFROM table1\nLEFT JOIN table2 ON conditions\nSELECT *\nFROM table1\nFULL OUTER JOIN table2 ON conditions\nSELECT *\nFROM table1\nCROSS JOIN table2;\nSELECT *\nFROM table1\nNATURAL JOIN table2;\n</code></pre>\n<p>Return the number of rows of a table.</p>\n<pre><code>SELECT COUNT (*)\nFROM table_name;\n</code></pre>\n<p>Sort rows in ascending or descending order:</p>\n<pre><code>SELECT select_list\nFROM table\nORDER BY column ASC [DESC], column2 ASC [DESC],...;\n</code></pre>\n<p>Group rows using <code>GROUP BY</code> clause.</p>\n<pre><code>SELECT *\nFROM table\nGROUP BY column_1, column_2, ...;\n</code></pre>\n<p>Filter groups using the <code>HAVING</code> clause.</p>\n<pre><code>SELECT *\nFROM table\nGROUP BY column_1\nHAVING condition;\n</code></pre>\n<h3>Set operations</h3>\n<p>Combine the result set of two or more queries with <code>UNION</code> operator:</p>\n<pre><code>SELECT * FROM table1\nUNION\nSELECT * FROM table2;\n</code></pre>\n<p>Minus a result set using <code>EXCEPT</code> operator:</p>\n<pre><code>SELECT * FROM table1\nEXCEPT\nSELECT * FROM table2;\n</code></pre>\n<p>Get intersection of the result sets of two queries:</p>\n<pre><code>SELECT * FROM table1\nINTERSECT\nSELECT * FROM table2;\n</code></pre>\n<h3>Modifying data</h3>\n<p><a href=\"https://www.postgresqltutorial.com/postgresql-insert/\" class=\"markup--anchor markup--p-anchor\">Insert a new row into a table</a>:</p>\n<pre><code>INSERT INTO table(column1,column2,...)\nVALUES(value_1,value_2,...);\n</code></pre>\n<p>Insert multiple rows into a table:</p>\n<pre><code>INSERT INTO table_name(column1,column2,...)\nVALUES(value_1,value_2,...),\n      (value_1,value_2,...),\n      (value_1,value_2,...)...\n</code></pre>\n<p><a href=\"https://www.postgresqltutorial.com/postgresql-update/\" class=\"markup--anchor markup--p-anchor\">Update</a> data for all rows:</p>\n<pre><code>UPDATE table_name\nSET column_1 = value_1,\n    ...;\n</code></pre>\n<p>Update data for a set of rows specified by a condition in the <code>WHERE</code> clause.</p>\n<pre><code>UPDATE table\nSET column_1 = value_1,\n    ...\nWHERE condition;\n</code></pre>\n<p><a href=\"https://www.postgresqltutorial.com/postgresql-delete/\" class=\"markup--anchor markup--p-anchor\">Delete all rows</a> of a table:</p>\n<pre><code>DELETE FROM table_name;\n</code></pre>\n<p>Delete specific rows based on a condition:</p>\n<pre><code>DELETE FROM table_name\nWHERE condition;\n</code></pre>\n<h3>Performance</h3>\n<p>Show the query plan for a query:</p>\n<pre><code>EXPLAIN query;\n</code></pre>\n<p>Show and execute the query plan for a query:</p>\n<pre><code>EXPLAIN ANALYZE query;\n</code></pre>\n<p>Collect statistics:</p>\n<pre><code>ANALYZE table_name;\n</code></pre>\n<hr>\n<h3>Postgres &#x26; JSON:</h3>\n<h3>Creating the DB and the Table</h3>\n<pre><code>DROP DATABASE IF EXISTS books_db;\nCREATE DATABASE books_db WITH ENCODING='UTF8' TEMPLATE template0;\n\nDROP TABLE IF EXISTS books;\n\nCREATE TABLE books (\n  id SERIAL PRIMARY KEY,\n  client VARCHAR NOT NULL,\n  data JSONb NOT NULL\n);\n</code></pre>\n<h3>Populating the DB</h3>\n<pre><code>INSERT INTO books(client, data) values( 'Joe', '{ \"title\": \"Siddhartha\", \"author\": { \"first_name\": \"Herman\", \"last_name\": \"Hesse\" } }' ); INSERT INTO books(client, data) values('Jenny', '{ \"title\": \"Bryan Guner\", \"author\": { \"first_name\": \"Jack\", \"last_name\": \"Kerouac\" } }'); INSERT INTO books(client, data) values('Jenny', '{ \"title\": \"100 años de soledad\", \"author\": { \"first_name\": \"Gabo\", \"last_name\": \"Marquéz\" } }');\n</code></pre>\n<p>Lets see everything inside the table books:</p>\n<pre><code>SELECT * FROM books;\n</code></pre>\n<p>Output:</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*GOQQ0qNGak2yIrtQ\" class=\"graf-image\" /></figure>### `->` operator returns values out of JSON columns\n<p>Selecting 1 column:</p>\n<pre><code>SELECT client,\n    data->'title' AS title\n    FROM books;\n</code></pre>\n<p>Output:</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*OIVYOfYcbVh65Mt5\" class=\"graf-image\" /></figure>Selecting 2 columns:\n<pre><code>SELECT client,\n   data->'title' AS title, data->'author' AS author\n   FROM books;\n</code></pre>\n<p>Output:</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*fEzPkSY8yGexKOk4\" class=\"graf-image\" /></figure>### `->` vs `->>`\n<p>The <code>-></code> operator returns the original JSON type (which might be an object), whereas <code>->></code> returns text.</p>\n<h3>Return NESTED objects</h3>\n<p>You can use the <code>-></code> to return a nested object and thus chain the operators:</p>\n<pre><code>SELECT client,\n   data->'author'->'last_name' AS author\n   FROM books;\n</code></pre>\n<p>Output:</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*lwy8bR7igaroMXeb\" class=\"graf-image\" /></figure>### Filtering\n<p>Select rows based on a value inside your JSON:</p>\n<pre><code>SELECT\n client,\n data->'title' AS title\n FROM books\n  WHERE data->'title' = '\"Bryan Guner\"';\n</code></pre>\n<p>Notice WHERE uses <code>-></code> so we must compare to JSON <code>'\"Bryan Guner\"'</code></p>\n<p>Or we could use <code>->></code> and compare to <code>'Bryan Guner'</code></p>\n<p>Output:</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*poASndLoU71qlXqE\" class=\"graf-image\" /></figure>### Nested filtering\n<p>Find rows based on the value of a nested JSON object:</p>\n<pre><code>SELECT\n client,\n data->'title' AS title\n FROM books\n  WHERE data->'author'->>'last_name' = 'Kerouac';\n</code></pre>\n<p>Output:</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*R1kOhDK19ntdUYkq\" class=\"graf-image\" /></figure>### A real world example\n<pre><code>CREATE TABLE events (\n  name varchar(200),\n  visitor_id varchar(200),\n  properties json,\n  browser json\n);\n</code></pre>\n<p>We’re going to store events in this table, like pageviews. Each event has properties, which could be anything (e.g. current page) and also sends information about the browser (like OS, screen resolution, etc). Both of these are completely free form and could change over time (as we think of extra stuff to track).</p>\n<pre><code>INSERT INTO events VALUES (\n  'pageview', '1',\n  '{ \"page\": \"/\" }',\n  '{ \"name\": \"Chrome\", \"os\": \"Mac\", \"resolution\": { \"x\": 1440, \"y\": 900 } }'\n);\nINSERT INTO events VALUES (\n  'pageview', '2',\n  '{ \"page\": \"/\" }',\n  '{ \"name\": \"Firefox\", \"os\": \"Windows\", \"resolution\": { \"x\": 1920, \"y\": 1200 } }'\n);\nINSERT INTO events VALUES (\n  'pageview', '1',\n  '{ \"page\": \"/account\" }',\n  '{ \"name\": \"Chrome\", \"os\": \"Mac\", \"resolution\": { \"x\": 1440, \"y\": 900 } }'\n);\nINSERT INTO events VALUES (\n  'purchase', '5',\n  '{ \"amount\": 10 }',\n  '{ \"name\": \"Firefox\", \"os\": \"Windows\", \"resolution\": { \"x\": 1024, \"y\": 768 } }'\n);\nINSERT INTO events VALUES (\n  'purchase', '15',\n  '{ \"amount\": 200 }',\n  '{ \"name\": \"Firefox\", \"os\": \"Windows\", \"resolution\": { \"x\": 1280, \"y\": 800 } }'\n);\nINSERT INTO events VALUES (\n  'purchase', '15',\n  '{ \"amount\": 500 }',\n  '{ \"name\": \"Firefox\", \"os\": \"Windows\", \"resolution\": { \"x\": 1280, \"y\": 800 } }'\n);\n</code></pre>\n<p>Now lets select everything:</p>\n<pre><code>SELECT * FROM events;\n</code></pre>\n<p>Output:</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*ZPHfB4FxjSIlAVxL\" class=\"graf-image\" /></figure>### JSON operators + PostgreSQL aggregate functions\n<p>Using the JSON operators, combined with traditional PostgreSQL aggregate functions, we can pull out whatever we want. You have the full might of an RDBMS at your disposal.</p>\n<ul>\n<li><span id=\"4ffd\">Lets see browser usage:</span></li>\n<li><span id=\"261c\"><code>SELECT browser->>'name' AS browser, count(browser) FROM events GROUP BY browser->>'name';</code></span></li>\n</ul>\n<p>Output:</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*4lEv2DgUk33FeUgo\" class=\"graf-image\" /></figure>-   <span id=\"946c\">Total revenue per visitor:</span>\n<p><code>SELECT visitor_id, SUM(CAST(properties->>'amount' AS integer)) AS total FROM events WHERE CAST(properties->>'amount' AS integer) > 0 GROUP BY visitor_id;</code></p>\n<p>Output:</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*HxOS3CgwXBJ6A2FP\" class=\"graf-image\" /></figure>-   <span id=\"9850\">Average screen resolution</span>\n-   <span id=\"132f\">`SELECT AVG(CAST(browser->'resolution'->>'x' AS integer)) AS width, AVG(CAST(browser->'resolution'->>'y' AS integer)) AS height FROM events;`</span>\n<p>Output:</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*iyv4Iv4Rc8M8mwt1\" class=\"graf-image\" /></figure>#### If you found this guide helpful feel free to checkout my github/gists where I host similar content:\n<p><a href=\"https://gist.github.com/bgoonz\" class=\"markup--anchor markup--p-anchor\">bgoonz’s gists · GitHub</a></p>\n<p><a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\"><strong>bgoonz — Overview</strong><br />\n<em>Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize…</em>github.com</a><a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p>Or Checkout my personal Resource Site:</p>\n<p><a href=\"https://goofy-euclid-1cd736.netlify.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://goofy-euclid-1cd736.netlify.app/\"><strong>a/A-Student-Resources</strong><br />\n<em>Edit description</em>goofy-euclid-1cd736.netlify.app</a><a href=\"https://goofy-euclid-1cd736.netlify.app/\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<h3>If you found this guide helpful feel free to checkout my GitHub/gists where I host similar content:</h3>\n<p><a href=\"https://gist.github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://gist.github.com/bgoonz\"><strong>bgoonz’s gists</strong><br />\n<em>Instantly share code, notes, and snippets. Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python |…</em>gist.github.com</a><a href=\"https://gist.github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\"><strong>bgoonz — Overview</strong><br />\n<em>Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize…</em>github.com</a><a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<h3>Or Checkout my personal Resource Site:</h3>"},{"url":"/docs/quick-reference/psql-setup/","relativePath":"docs/quick-reference/psql-setup.md","relativeDir":"docs/quick-reference","base":"psql-setup.md","name":"psql-setup","frontmatter":{"title":"PostgreSQL Setup","weight":0,"excerpt":"PostgreSQL Setup","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>PostgreSQL Setup For Windows &#x26; WSL/Ubuntu</h1>\n<iframe src=\"https://onedrive.live.com/embed?cid=D21009FDD967A241&amp;resid=D21009FDD967A241%21538624&amp;authkey=ALjsoYXNZpaUagA&amp;em=2&amp;wdAr=1.7777777777777777\" width=\"1186px\" height=\"691px\" frameborder=\"0\">This is an embedded <a target=\"_blank\" href=\"https://office.com\">Microsoft Office</a> presentation, powered by <a target=\"_blank\" href=\"https://office.com/webapps\">Office</a>.</iframe>\n<p>If you follow this guide to a tee… you will install PostgreSQL itself on your Windows installation. Then, you will install psql in your…</p>\n<hr>\n<h3>PostgreSQL Setup For Windows &#x26; WSL/Ubuntu</h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/600/0*mhTM08D1J612VW7J\" class=\"graf-image\" /></figure>If you follow this guide to a tee… you will install PostgreSQL itself on your Windows installation. Then, you will install `psql` in your Ubuntu installation. Then you will also install Postbird, a cross-platform graphical user interface that makes working with SQL and PostgreSQL ‘allegedly’ …(personally I prefer to just use the command line but PG Admin makes for an immeasurably more complicated tutorial than postbird)… better than just using the **command line tool** `psql`**.**\n<h3>Important Distinction: PSQL is the frontend interface for PostgreSQL … they are not synonymous!</h3>\n<p><strong>Postgres</strong>, is a <a href=\"https://en.wikipedia.org/wiki/Free_and_open-source_software\" class=\"markup--anchor markup--p-anchor\" title=\"Free and open-source software\">free and open-source</a> <a href=\"https://en.wikipedia.org/wiki/Relational_database_management_system\" class=\"markup--anchor markup--p-anchor\" title=\"Relational database management system\">relational database management system</a> (RDBMS)</p>\n<p><strong>PSQL:</strong></p>\n<p>The primary <a href=\"https://en.wikipedia.org/wiki/Front_and_back_ends\" class=\"markup--anchor markup--p-anchor\" title=\"Front and back ends\">front-end</a> for PostgreSQL is the <code>psql</code> <a href=\"https://en.wikipedia.org/wiki/Command-line_program\" class=\"markup--anchor markup--p-anchor\" title=\"Command-line program\">command-line program</a>, which can be used to enter SQL queries directly, or execute them from a file.</p>\n<p>In addition, psql provides a number of meta-commands and various shell-like features to facilitate writing scripts and automating a wide variety of tasks; for example tab completion of object names and SQL syntax.</p>\n<p><strong>pgAdmin:</strong></p>\n<p>The pgAdmin package is a free and open-source <a href=\"https://en.wikipedia.org/wiki/Graphical_user_interface\" class=\"markup--anchor markup--p-anchor\" title=\"Graphical user interface\">graphical user interface</a> (GUI) administration tool for PostgreSQL.</p>\n<p>When you read “installation”, that means the actual OS that’s running on your machine. So, you have a Windows installation, Windows 10, that’s running when you boot your computer. Then, when you start the Ubuntu installation, it’s as if there’s a completely separate computer running inside your computer. It’s like having two completely different laptops.</p>\n<h3>Other Noteworthy Distinctions:</h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*um8fm6FDTYYOXZrLudddpg.png\" class=\"graf-image\" /></figure>### Installing PostgreSQL 12\n<p>To install PostgreSQL 12, you need to download the installer from the Internet. PostgreSQL’s commercial company, Enterprise DB, offers installers for PostgreSQL for every major platform.</p>\n<p>Open <a href=\"https://www.enterprisedb.com/downloads/postgres-postgresql-downloads\" class=\"markup--anchor markup--p-anchor\">https://www.enterprisedb.com/downloads/postgres-postgresql-downloads</a>. Click the link for PostgreSQL 12 for Windows x86–64.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*wi4EbaVo-mamG_tH.png\" class=\"graf-image\" /></figure>Once that installer downloads, run it. You need to go through the normal steps of installing software.\n<ul>\n<li><span id=\"a223\">Yes, Windows, let the installer make changes to <em>my</em> device.</span></li>\n<li><span id=\"d4d0\">Thanks for the welcome. Next.</span></li>\n<li><span id=\"1283\">Yeah, that’s a good place to install it. Next.</span></li>\n<li><span id=\"79cc\">I don’t want that pgAdmin nor the Stack Builder things. Uncheck. Uncheck. Next.</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*PSDmTsaD37MgFJ-A.png\" class=\"graf-image\" /></figure>-   <span id=\"e09d\">Also, great looking directory. Thanks. Next.</span>\n<h3>Oooh! A password! I’ll enter <strong>****</strong>. I sure won’t forget that because, if I do, I’ll have to uninstall and reinstall PostgreSQL and lose all of my hard work. <strong>Seriously, write down this password or use one you will not forget!!!!!!!!!!!!!!!</strong></h3>\n<h3>I REALLY CANNOT STRESS THE ABOVE POINT ENOUGH… Experience is a great teacher but in this case … it’s not worth it.</h3>\n<ul>\n<li><span id=\"25b7\">Sure. 5432. Good to go. Next.</span></li>\n<li><span id=\"28be\">Not even sure what that means. Default! Next.</span></li>\n<li><span id=\"b378\">Yep. Looks good. Next.</span></li>\n</ul>\n<p>Insert pop culture reference to pass the time</p>\n<h3>Installing PostgreSQL Client Tools on Ubuntu</h3>\n<p>Now, to install the PostgreSQL Client tools for Ubuntu. You need to do this so that the Node.js (and later Python) programs running on your Ubuntu installation can access the PostgreSQL server running on your Windows installation. You need to tell <code>apt</code>, the package manager, that you want it to go find the PostgreSQL 12 client tools from PostgreSQL itself rather than the common package repositories. You do that by issuing the following two commands. Copy and paste them one at a time into your shell. (If your Ubuntu shell isn't running, start one.)</p>\n<p><strong>Pro-tip</strong>: Copy those commands because you’re not going to type them, right? After you copy one of them, you can just right-click on the Ubuntu shell. That should paste them in there for you.</p>\n<pre><code>wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\n</code></pre>\n<p>If prompted for your password, type it.</p>\n<pre><code>echo \"deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main\" | sudo tee  /etc/apt/sources.list.d/pgdg.list\n</code></pre>\n<p>The last line of output of those two commands running should read “OK”. If it does not, try copying and pasting them one at a time.</p>\n<p>Now that you’ve registered the PostgreSQL repositories as a source to look for PostgreSQL, you need to update the <code>apt</code> registry. You should do this before you install <em>any</em> software on Ubuntu.</p>\n<pre><code>sudo apt update\n</code></pre>\n<p>Once that’s finished running, the new entries for PostgreSQL 12 should be in the repository. Now, you can install them with the following command.</p>\n<pre><code>sudo apt install postgresql-client-12 postgresql-common\n</code></pre>\n<p>If it asks you if you want to install them, please tell it “Y”.</p>\n<p>Test that it installed by typing <code>psql --version</code>. You should see it print out information about the version of the installed tools. If it tells you that it can't find the command, try these instructions over.</p>\n<h3>Configuring the client tools</h3>\n<p>Since you’re going to be accessing the PosgreSQL installation from your Ubuntu installation on your Windows installation, you’re going to have to type that you want to access it over and over, which means extra typing. To prevent you from having to do this, you can customize your shell to always add the extra commands for you.</p>\n<p>This assumes you’re still using Bash. If you changed the shell that your Ubuntu installation uses, please follow that shell’s directions for adding an alias to its startup file.</p>\n<p>Make sure you’re in your Ubuntu home directory. You can do that by typing <code>cd</code> and hitting enter. Use <code>ls</code> to find out if you have a <code>.bashrc</code> file. Type <code>ls .bashrc</code>. If it shows you that one exists, that's the one you will add the alias to. If it tells you that there is no file named that, then type <code>ls .profile</code>. If it shows you that one exists, that's the one you will add the alias to. If it shows you that it does not exist, then use the file name <code>.bashrc</code> in the following section.</p>\n<p>Now that you know which profile file to use, type <code>code «profile file name»</code> where \"profile file name\" is the name of the file you determined from the last section. Once Visual Studio Code starts up with your file, at the end of it (or if you've already added aliases, in that section), type the following.</p>\n<pre><code>alias psql=\"psql -h localhost\"\n</code></pre>\n<p>When you run <code>psql</code> from the command line, it will now always add the part about wanting to connect to <em>localhost</em> every time. You would have to type that each time, otherwise.</p>\n<p>To make sure that you set that up correctly, type <code>psql -U postgres postgres</code>. This tells the <code>psql</code> client that you want to connect as the user \"postgres\" (<code>-U postgres</code>) to the database postgres (<code>postgres</code> at the end), which is the default database created when PostgreSQL is installed. It will prompt you for a password. Type the password that you used when you installed PostgrSQL, earlier. If the alias works correctly and you type the correct password, then you should see something like the following output.</p>\n<pre><code>psql (12.2 (Ubuntu 12.2-2.pgdg18.04+1))\nType \"help\" for help.\n\npostgres=#\n</code></pre>\n<p>Type <code>\\q</code> and hit Enter to exit the PostgreSQL client tool.</p>\n<p>Now, you will add a user for your Ubuntu identity so that you don’t have to specify it all the time. Then, you will create a file that PostgreSQL will use to automatically send your password every time.</p>\n<p>Copy and paste the following into your Ubuntu shell. Think of a password that you want to use for your user. <strong>Replace the password in the single quotes in the command with the password that you want.</strong> It <em>has</em> to be a non-empty string. PostgreSQL doesn’t like it when it’s not.</p>\n<pre><code>psql -U postgres -c \"CREATE USER `whoami` WITH PASSWORD 'password' SUPERUSER\"\n</code></pre>\n<p>It should prompt you for a password. Type the password that you created when you installed PostgreSQL. Once you type the correct password, you should see “CREATE ROLE”.</p>\n<p>Now you will create your PostgreSQL password file. Type the following into your Ubuntu shell to open Visual Studio Code and create a new file.</p>\n<pre><code>code ~/.pgpass\n</code></pre>\n<p>In that file, you will add this line, which tells it that on localhost for port 5432 (where PostgreSQL is running), for all databases (*), <strong>use your Ubuntu user name and the password that you just created for that user with the</strong> <code>psql</code> <strong>command you just typed.</strong> (If you have forgotten your Ubuntu user name, type <code>whoami</code> on the command line.) Your entry in the file should have this format.</p>\n<pre><code>localhost:5432:*:«your Ubuntu user name»:«the password you just used»\n</code></pre>\n<p>Once you have that information in the file, save it, and close Visual Studio Code.</p>\n<p>The last step you have to take is change the permission on that file so that it is only readable by your user. PostgreSQL will ignore it if just anyone can read and write to it. This is for <em>your</em> security. Change the file permissions so only you can read and write to it. You did this once upon a time. Here’s the command.</p>\n<pre><code>chmod go-rw ~/.pgpass\n</code></pre>\n<p>You can confirm that only you have read/write permission by typing <code>ls -al ~/.pgpass</code>. That should return output that looks like this, <strong>with your Ubuntu user name instead of \"web-dev-hub\".</strong></p>\n<pre><code>-rw------- 1 web-dev-hub web-dev-hub 37 Mar 28 21:20 /home/web-dev-hub/.pgpass\n</code></pre>\n<p>Now, try connecting to PostreSQL by typing <code>psql postgres</code>. Because you added the alias to your startup script, and because you created your <strong>.pgpass</strong> file, it should now connect without prompting you for any credentials! Type <code>\\q</code> and press Enter to exit the PostgreSQL command line client.</p>\n<h3>Installing Postbird</h3>\n<p>Head over to the <a href=\"https://github.com/Paxa/postbird/releases\" class=\"markup--anchor markup--p-anchor\">Postbird releases page on GitHub</a>. Click the installer for Windows which you can recognize because it’s the only file in the list that ends with “.exe”.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*ZdKurvQ4bHs3vDLT.png\" class=\"graf-image\" /></figure>After that installer downloads, run it. You will get a warning from Windows that this is from an unidentified developer. If you don’t want to install this, find a PostgreSQL GUI client that you do trust and install it or do everything from the command line.\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*EWpFEwM0YUDQCW_i.png\" class=\"graf-image\" /></figure>You should get used to seeing this because many open-source applications aren’t signed with the Microsoft Store for monetary and philosophical reasons.\n<p>Otherwise, if you trust Paxa like web-dev-hub and tens of thousands of other developers do, then click the link that reads “More info” and the “Run anyway” button.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*9pDpx8XsYt2KnMku.png\" class=\"graf-image\" /></figure>When it’s done installing, it will launch itself. Test it out by typing the “postgres” into the “Username” field and the password from your installation in the “Password” field. Click the Connect button. It should properly connect to the running\n<p>You can close it for now. It also installed an icon on your desktop. You can launch it from there or your Start Menu at any time.</p>\n<h3>Now.. if you still have some gas in the tank… let’s put our new tools to work:</h3>\n<h3>The node-postgres</h3>\n<p>The node-postgres is a collection of Node.js modules for interfacing with the PostgreSQL database. It has support for callbacks, promises, async/await, connection pooling, prepared statements, cursors, and streaming results.</p>\n<p>In our examples we also use the Ramda library. See Ramda tutorial for more information.</p>\n<h3>Setting up node-postgres</h3>\n<p>First, we install node-postgres.</p>\n<p>$ node -v<br>\nv14.2</p>\n<p>$ npm init -y</p>\n<p>We initiate a new Node application.</p>\n<p>npm i pg</p>\n<p>We install node-postgres with <code>nmp i pg</code>.</p>\n<p>npm i ramda</p>\n<p>In addition, we install Ramda for beautiful work with data.</p>\n<p>cars.sql</p>\n<p>DROP TABLE IF EXISTS cars;</p>\n<p>CREATE TABLE cars(id SERIAL PRIMARY KEY, name VARCHAR(255), price INT);<br>\nINSERT INTO cars(name, price) VALUES(‘Audi’, 52642);<br>\nINSERT INTO cars(name, price) VALUES(‘Mercedes’, 57127);<br>\nINSERT INTO cars(name, price) VALUES(‘Skoda’, 9000);<br>\nINSERT INTO cars(name, price) VALUES(‘Volvo’, 29000);<br>\nINSERT INTO cars(name, price) VALUES(‘Bentley’, 350000);<br>\nINSERT INTO cars(name, price) VALUES(‘Citroen’, 21000);<br>\nINSERT INTO cars(name, price) VALUES(‘Hummer’, 41400);<br>\nINSERT INTO cars(name, price) VALUES(‘Volkswagen’, 21600);</p>\n<p>In some of the examples, we use this <code>cars</code> table.</p>\n<h3>The node-postgres first example</h3>\n<p>In the first example, we connect to the PostgreSQL database and return a simple SELECT query result.</p>\n<p>first.js</p>\n<pre><code>const pg = require(‘pg’);\nconst R = require(‘ramda’);\nconst cs = ‘postgres://postgres:s$cret@localhost:5432/ydb’;\nconst client = new pg.Client(cs);\nclient.connect();\nclient.query(‘SELECT 1 + 4’).then(res => {\n\nconst result = R.head(R.values(R.head(res.rows)))\n\nconsole.log(result)\n}).finally(() => client.end());\n</code></pre>\n<p>The example connects to the database and issues a SELECT statement.</p>\n<pre><code>const pg = require(‘pg’);\nconst R = require(‘ramda’);\n</code></pre>\n<p>We include the <code>pg</code> and <code>ramda</code> modules.</p>\n<pre><code>const cs = ‘postgres://postgres:s$cret@localhost:5432/ydb’;\n</code></pre>\n<p>This is the PostgreSQL connection string. It is used to build a connection to the database.</p>\n<pre><code>const client = new pg.Client(cs);\nclient.connect();\n</code></pre>\n<p>A client is created. We connect to the database with <code>connect()</code>.</p>\n<pre><code>client.query(‘SELECT 1 + 4’).then(res => {\n\nconst result = R.head(R.values(R.head(res.rows)));\n\nconsole.log(result);\n\n}).finally(() => client.end());\n</code></pre>\n<p>We issue a simple SELECT query. We get the result and output it to the console. The <code>res.rows</code> is an array of objects; we use Ramda to get the returned scalar value. In the end, we close the connection with <code>end()</code>.</p>\n<pre><code>node first.js\n5\n</code></pre>\n<p>This is the output.</p>\n<h3>The node-postgres column names</h3>\n<p>In the following example, we get the columns names of a database.</p>\n<blockquote>\n<p>column_names.js</p>\n</blockquote>\n<pre><code>const pg = require(‘pg’);\n\nconst cs = ‘postgres://postgres:s$cret@localhost:5432/ydb’;\n\nconst client = new pg.Client(cs);\n\nclient.connect();\n\nclient.query(‘SELECT * FROM cars’).then(res => {\n\nconst fields = res.fields.map(field => field.name);\n\nconsole.log(fields);\n\n}).catch(err => {\nconsole.log(err.stack);\n}).finally(() => {\nclient.end()\n});\n</code></pre>\n<p>The column names are retrieved with <code>res.fields</code> attribute. We also use the <code>catch</code> clause to output potential errors.</p>\n<pre><code>node column_names.js\n‘id’, ‘name’, ‘price’′id′,′name′,′price′\n</code></pre>\n<p>The output shows three column names of the <code>cars</code> table.</p>\n<h3>Selecting all rows</h3>\n<p>In the next example, we select all rows from the database table.</p>\n<blockquote>\n<p>all_rows.js</p>\n</blockquote>\n<pre><code>const pg = require(‘pg’);\nconst R = require(‘ramda’);\n\nconst cs = ‘postgres://postgres:s$cret@localhost:5432/ydb’;\n\nconst client = new pg.Client(cs);\n\nclient.connect();\n\nclient.query(‘SELECT * FROM cars’).then(res => {\n\nconst data = res.rows;\n\nconsole.log('all data');\ndata.forEach(row => {\n    console.log(\\`Id: ${row.id} Name: ${row.name} Price: ${row.price}\\`);\n})\n\nconsole.log('Sorted prices:');\nconst prices = R.pluck('price', R.sortBy(R.prop('price'), data));\nconsole.log(prices);\n\n}).finally(() => {\nclient.end()\n});\n</code></pre>\n<p><strong>TBC…</strong></p>\n<h4>If you found this guide helpful feel free to checkout my github/gists where I host similar content:</h4>\n<p><a href=\"https://gist.github.com/bgoonz\" class=\"markup--anchor markup--p-anchor\">bgoonz’s gists · GitHub</a></p>\n<p><a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\"><strong>bgoonz — Overview</strong><br />\n<em>Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize…</em>github.com</a><a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p>Or Checkout my personal Resource Site:</p>\n<p><a href=\"https://bgoonz-blog.netlify.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bgoonz-blog.netlify.app/\"><strong>Stackbit Web-Dev-HubTheme</strong><br />\n<em>Memoization, Tabulation, and Sorting Algorithms by Example Why is looking at runtime not a reliable method of…</em>bgoonz-blog.netlify.app</a><a href=\"https://bgoonz-blog.netlify.app/\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p>By <a href=\"https://medium.com/@bryanguner\" class=\"p-author h-card\">Bryan Guner</a> on <a href=\"https://medium.com/p/801672ab7089\">March 6, 2021</a>.</p>\n<p><a href=\"https://medium.com/@bryanguner/postgresql-setup-for-windows-wsl-ubuntu-801672ab7089\" class=\"p-canonical\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on August 6, 2021.</p>"},{"url":"/docs/quick-reference/pull-request-rubric/","relativePath":"docs/quick-reference/pull-request-rubric.md","relativeDir":"docs/quick-reference","base":"pull-request-rubric.md","name":"pull-request-rubric","frontmatter":{"title":"Pull Request Template","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h2>Pull Requests</h2>\n<table>\n<thead>\n<tr>\n<th>Objective</th>\n<th>Description</th>\n<th>1-3 (Not Passing)</th>\n<th>4 (Passing)</th>\n<th>5-7 (Exceptional)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://www.notion.so/Clearly-documents-the-motivation-and-what-changed-0c7f5d04d7f9401e8e861ce93312d503\">Clearly documents the motivation and what changed</a></td>\n<td>Is it clear why the pull request exists? Does it link to supporting documentation (user story, product roadmap, design) to give broader context? Is the code itself appropriately commented?</td>\n<td>The PR description is either blank or only contains the boilerplate PR template or unchecked checklist items. Code comments aren't used, even when they would be helpful.</td>\n<td>The PR description outlines the motivation for the feature and/or links to a user story or other document describing the purpose of the feature.</td>\n<td>The PR description includes a clear rationale for the feature, or a screenshot showing either the intended state or completed state of the feature, and gives additional context about changes made in the PR.</td>\n</tr>\n<tr>\n<td><a href=\"https://www.notion.so/Atomic-well-named-commits-67085273f3b945beb14af73e51c61522\">Atomic, well-named commits</a></td>\n<td>Does the pull request consist of small commits with clear titles? Do all commits have relevant and sensible messages of what was changed?</td>\n<td>Commits are not named appropriately. Commits have sensible messages. Example. \"Updated\", \"Fixed a bug\"</td>\n<td>Commits are well named. Commits have descriptive messages relevant to what changed. Some commits are not atomic.</td>\n<td>Commits are well named. Commits have descriptive messages. Each commit introduces atomic changes.</td>\n</tr>\n<tr>\n<td><a href=\"https://www.notion.so/Appropriately-Scoped-3b6f396ee76d4075b0b66c702624f05e\">Appropriately Scoped</a></td>\n<td>Is the pull request small enough to review easily? Is it focused on solving a single cohesive problem?</td>\n<td>Pull request introduces multiple features or solves multiple problems. PR is unreasonably big with many changed files. Some code changes that are not related to the purpose of the PR</td>\n<td>PR is relatively small. PR has some minor changes not related to the feature or primary change being introduced.</td>\n<td>PR is focused on a single problem. PR is small enough and easy to review.</td>\n</tr>\n<tr>\n<td><a href=\"https://www.notion.so/Adequately-reviewed-44cf640022d94c35a23589263a943d76\">Adequately reviewed</a></td>\n<td>Has the pull request been reviewed by at least two team members? Your release manager will be the final reviewer of the pull request. Did they leave any comments or suggestions? Were those suggestions acted on?</td>\n<td>PR was merged by the same developer who requested it. The reviewer rejected PR with no comments. PR was initiated again and suggested changes were not addressed.</td>\n<td>At least two team members reviewed PRs. Appropriate comments were left in the PR. Suggestions were acted upon.</td>\n<td>PRs were reviewed by more than one team member. PR requests were sent to multiple reviewers. Active high-quality discussions are evident in PRs.</td>\n</tr>\n<tr>\n<td><a href=\"https://www.notion.so/Code-is-clear-and-maintainable-de9ef74e969b47f5bab234f5a346c407\">Code is clear and maintainable</a></td>\n<td>Is the code formatted appropriately? Is there dead code? <strong><em>logs and print statements have no place in your main branches!</em></strong> Are there instances of duplicate code? Does code have TODOs committed to main?</td>\n<td>Code has inconsistent formatting. Significant amount of dead code across the codebase. Multiple instances on TODOs in main. Significant amount of duplicated code.</td>\n<td>Code is consistently formatted. Functions are relatively small. Few instances of duplicate code. Few instances of dead code.</td>\n<td>Code is consistently formatted. Has config files to enforce linting and formatting. No instance on duplicate code.</td>\n</tr>\n<tr>\n<td><a href=\"https://www.notion.so/Code-is-idiomatic-c8d7786458b9430d9b6bad50cd904c9c\">Code is idiomatic</a></td>\n<td>Does the code follow industry standards for the language, framework, and libraries used?</td>\n<td>Code consistently does not adhere to best practices for the language, framework or libraries used.</td>\n<td>Code has apparent minor deviations from industry standards.</td>\n<td>Code follows best practices of language, framework and libraries use. Effort has been made to improve on those practices.</td>\n</tr>\n</tbody>\n</table>"},{"url":"/docs/quick-reference/understanding-path/","relativePath":"docs/quick-reference/understanding-path.md","relativeDir":"docs/quick-reference","base":"understanding-path.md","name":"understanding-path","frontmatter":{"title":"Understanding PATH","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h3>Understanding PATH</h3>\n<p><img src=\"images/pypath.jpeg\"></p>\n<p><img src=\"images/pypath2.PNG\"></p>\n<p>When you run a command like python or pip, your operating system searches through a list of directories to find an executable file with that name. This list of directories lives in an environment variable called PATH, with each directory in the list separated by a colon:</p>\n<p>Directories in PATH are searched from left to right, so a matching executable in a directory at the beginning of the list takes precedence over another one at the end. In this example, the /usr/local/bin directory will be searched first, then /usr/bin, then /bin.</p>\n<h3>Understanding Shims</h3>\n<p>pyenv works by inserting a directory of shims at the front of your PATH:</p>\n<p>Through a process called rehashing, pyenv maintains shims in that directory to match every Python command across every installed version of Python---python, pip, and so on.</p>\n<p>Shims are lightweight executables that simply pass your command along to pyenv. So with pyenv installed, when you run, say, pip, your operating system will do the following:</p>\n<ul>\n<li>Search your PATH for an executable file named pip</li>\n<li>Find the pyenv shim named pip at the beginning of your PATH</li>\n<li>Run the shim named pip, which in turn passes the command along to pyenv</li>\n</ul>\n<h3>Choosing the Python Version</h3>\n<p>When you execute a shim, pyenv determines which Python version to use by reading it from the following sources, in this order:</p>\n<ol>\n<li>The PYENV_VERSION environment variable (if specified). You can use the <a href=\"https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-shell\">pyenv shell</a> command to set this environment variable in your current shell session.</li>\n<li>The application-specific .python-version file in the current directory (if present). You can modify the current directory's .python-version file with the <a href=\"https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-local\">pyenv local</a> command.</li>\n<li>The first .python-version file found (if any) by searching each parent directory, until reaching the root of your filesystem.</li>\n<li>The global $(pyenv root)/version file. You can modify this file using the <a href=\"https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-global\">pyenv global</a> command. If the global version file is not present, pyenv assumes you want to use the \"system\" Python. (In other words, whatever version would run if pyenv weren't in your PATH.)</li>\n</ol>\n<p><strong>NOTE:</strong> You can activate multiple versions at the same time, including multiple versions of Python2 or Python3 simultaneously. This allows for parallel usage of Python2 and Python3, and is required with tools like tox. For example, to set your path to first use your system Python and Python3 (set to 2.7.9 and 3.4.2 in this example), but also have Python 3.3.6, 3.2, and 2.5 available on your PATH, one would first pyenv install the missing versions, then set pyenv global system 3.3.6 3.2 2.5. At this point, one should be able to find the full executable path to each of these using pyenv which, e.g. pyenv which python2.5 (should display $(pyenv root)/versions/2.5/bin/python2.5), or pyenv which python3.4 (should display path to system Python3). You can also specify multiple versions in a .python-version file, separated by newlines. Lines starting with a # are ignored.</p>\n<h3>Locating the Python Installation</h3>\n<p>Once pyenv has determined which version of Python your application has specified, it passes the command along to the corresponding Python installation.</p>\n<p>Each Python version is installed into its own directory under $(pyenv root)/versions.</p>\n<p>For example, you might have these versions installed:</p>\n<ul>\n<li>$(pyenv root)/versions/2.7.8/</li>\n<li>$(pyenv root)/versions/3.4.2/</li>\n<li>$(pyenv root)/versions/pypy-2.4.0/</li>\n</ul>\n<p>As far as Pyenv is concerned, version names are simply directories under $(pyenv root)/versions.</p>\n<h3>Managing Virtual Environments</h3>\n<p>There is a pyenv plugin named <a href=\"https://github.com/pyenv/pyenv-virtualenv\">pyenv-virtualenv</a> which comes with various features to help pyenv users to manage virtual environments created by virtualenv or Anaconda. Because the activate script of those virtual environments are relying on mutating $PATH variable of user's interactive shell, it will intercept pyenv's shim style command execution hooks. We'd recommend to install pyenv-virtualenv as well if you have some plan to play with those virtual environments.<img src=\"https://i.imgur.com/0hQBL4d.png\"><img src=\"https://i.imgur.com/0hQBL4d.png\"><img src=\"images/festive-zebra.png\"></p>"},{"url":"/docs/quick-reference/vscode-themes/","relativePath":"docs/quick-reference/vscode-themes.md","relativeDir":"docs/quick-reference","base":"vscode-themes.md","name":"vscode-themes","frontmatter":{"title":"vscode-themes","excerpt":"To make it easy to write documentation in plain Markdown, most vscode-themes are styled using Markdown elements with few additional CSS classes.","seo":{"title":"vscode-themes","description":"This is the vscode-themes page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"vscode-themes","keyName":"property"},{"name":"og:description","value":"This is the vscode-themes page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"vscode-themes"},{"name":"twitter:description","value":"This is the vscode-themes page"}]},"template":"docs"},"html":"<h1>My Favorite VSCode Themes</h1>\n<p>Themes</p>\n<hr>\n<h3>My Favorite VSCode Themes</h3>\n<h3>Product Icon Themes:</h3>\n<h3>Fluent Icons</h3>\n<p>A product icon theme for Visual Studio Code</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*wE_xUE1f0GU8GBGo.png\" class=\"graf-image\" /></figure><a href=\"https://code.visualstudio.com/api/extension-guides/product-icon-theme\" class=\"markup--anchor markup--p-anchor\">Product icons themes</a> allow theme authors to customize the icons used in VS Code’s built-in views: all icons except file icons (covered by file icon themes) and icons contributed by extensions. This extension uses <a href=\"https://www.figma.com/community/file/836835755999342788/Microsoft-Fluent-System-Icons\" class=\"markup--anchor markup--p-anchor\">Fluent Icons</a>.\n<h3>Install</h3>\n<ol>\n<li><span id=\"5f77\">Install the icon theme from the <a href=\"https://marketplace.visualstudio.com/items?itemName=miguelsolorio.fluent-icons\" class=\"markup--anchor markup--li-anchor\">Marketplace</a></span></li>\n<li><span id=\"6411\">Open the command palette (<code>Ctrl/Cmd + Shift + P</code>) and search for <code>Preferences: Product Icon Theme</code></span></li>\n<li><span id=\"0613\">Select <code>Fluent Icons</code></span></li>\n</ol>\n<h3>TBC…</h3>\n<hr>\n<h3><a href=\"https://vscodethemes.com/e/pushqrdx.theme-monokai-oblique-vscode\" class=\"markup--anchor markup--h3-anchor\">Monokai Oblique by pushqrdx</a></h3>\n<p>Monokai inspired theme for <a href=\"https://vscodethemes.com/e/pushqrdx.theme-monokai-oblique-vscode\" class=\"markup--anchor markup--p-anchor\">Visual Studio Code</a> and <a href=\"https://github.com/pushqrdx/monokai\" class=\"markup--anchor markup--p-anchor\">Visual Studio IDE</a>.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*43PXQoFMOr28C7_B.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/monokai.theme-monokai-pro-vscode\" class=\"markup--anchor markup--h3-anchor\">Monokai Pro by monokai (commercial)</a>\n<p>Beautiful functionality for professional developers, from the author of the original Monokai color scheme.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*qwLfKRWuJl0hLZ2m.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/sdras.night-owl\" class=\"markup--anchor markup--h3-anchor\">Night Owl by Sarah Drasner</a>\n<p>A VS Code theme for the night owls out there. Works well in the daytime, too, but this theme is fine-tuned for those of us who like to code late into the night. Color choices have taken into consideration what is accessible to people with color blindness and in low-light circumstances. Decisions were also based on meaningful contrast for reading comprehension and for optimal razzle dazzle. ✨</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*w4jwUZlACQz-ndRu.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/will-stone.plastic\" class=\"markup--anchor markup--h3-anchor\">Plastic by Will Stone</a>\n<p>A simple theme.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*xr3ul5T1_CAsnyWR.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/arcticicestudio.nord-visual-studio-code\" class=\"markup--anchor markup--h3-anchor\">Nord by arcticicestudio</a>\n<p>An arctic, north-bluish clean and elegant Visual Studio Code theme.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*yQMVpYfepk53HNxN.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/daylerees.rainglow\" class=\"markup--anchor markup--h3-anchor\">Rainglow by Dayle Rees</a>\n<p>Collection of 320+ beautiful syntax and UI themes.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*FpJBK3DBT1FUmuLF.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/mischah.relaxed-theme\" class=\"markup--anchor markup--h3-anchor\">Relaxed Theme by Michael Kühnel</a>\n<p>A relaxed theme to take a more relaxed view of things.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*bdPe8FIrL8F9qFqx.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/ahmadawais.shades-of-purple\" class=\"markup--anchor markup--h3-anchor\">Shades of Purple by Ahmad Awais</a>\n<p>⚡ A professional theme with hand-picked &#x26; bold shades of purple 💜 to go along with your VS Code. A custom VS Code theme with style.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*lyNNDrSPE5fpaMBZ.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/Endormi.2077-theme\" class=\"markup--anchor markup--h3-anchor\">2077 theme by Endormi</a>\n<p>Cyberpunk 2077 inspired theme</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*1VdJDagHs-YTIicE.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/dustinsanders.an-old-hope-theme-vscode\" class=\"markup--anchor markup--h3-anchor\">An Old Hope Theme by Dustin Sanders</a>\n<p>VSCode theme inspired by a galaxy far far away…</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*8JZCxiWSVdupy-HQ.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/wart.ariake-dark\" class=\"markup--anchor markup--h3-anchor\">Ariake Dark by wart</a>\n<p>Dark VSCode theme inspired by Japanese traditional colors and the poetry composed 1000 years ago.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Pm8gFuyXa_xNniuP.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/akamud.vscode-theme-onedark\" class=\"markup--anchor markup--h3-anchor\">Atom One Dark Theme by Mahmoud Ali</a>\n<p>One Dark Theme based on Atom.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*YBzFlHIhCnEXPKsb.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/emroussel.atomize-atom-one-dark-theme\" class=\"markup--anchor markup--h3-anchor\">Atomize by emroussel</a>\n<p>A detailed and accurate Atom One Dark Theme.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*trGkLz0fLzZMjNX_.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/teabyii.ayu\" class=\"markup--anchor markup--h3-anchor\">Ayu by teabyii</a>\n<p>A simple theme with bright colors and comes in three versions — dark, light and mirage for all day long comfortable work.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*YL26P4BF0Kz-0ck9.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/eckertalex.borealis\" class=\"markup--anchor markup--h3-anchor\">Borealis Theme by Alexander Eckert</a>\n<p>VS Code theme inspired by the calm colors of the aurora borealis in Alaska.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Df5XXUX50azLyP7K.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/ultradracula.captain-sweetheart\" class=\"markup--anchor markup--h3-anchor\">Captain Sweetheart by ultradracula</a>\n<p>Tuff but sweet theme.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*93oi3wFSt7uH62VR.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/Yummygum.city-lights-theme\" class=\"markup--anchor markup--h3-anchor\">City Lights by Yummygum</a>\n<p>🏙 Yummygum’s Official City Lights suite</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*LwpZlufyoKuCVjqn.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/wesbos.theme-cobalt2\" class=\"markup--anchor markup--h3-anchor\">Cobalt2 Theme Official by Wes Bos</a>\n<p>🔥 Official theme by Wes Bos.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*8KsnUfTVU-A9Aqcl.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/dracula-theme.theme-dracula\" class=\"markup--anchor markup--h3-anchor\">Dracula Official by Dracula Theme</a>\n<p>Official Dracula Theme. A dark theme for many editors, shells, and more.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*xGaF3Cs8iHoC5gUr.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/bogdanlazar.edge\" class=\"markup--anchor markup--h3-anchor\">Edge by Bogdan Lazar</a>\n<p>A simple theme with bright colors in three variants — Night Sky, Serene and Ocean for all day long comfortable work.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*qELxjfUYJNuRISgB.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/fisheva.eva-theme\" class=\"markup--anchor markup--h3-anchor\">Eva Theme by fisheva</a>\n<p>A colorful and semantic coloring code theme.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Dzw_28GVEGa10m-9.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/nopjmp.fairyfloss\" class=\"markup--anchor markup--h3-anchor\">Fairy Floss by nopjmp and sailorhg</a>\n<p>A fun, purple-based pastel/candy/daydream fairyfloss theme made by sailorhg.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*wJkmVL0w1tz4n4_H.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/thomaspink.theme-github\" class=\"markup--anchor markup--h3-anchor\">GitHub Theme by Thomas Pink</a>\n<p>GitHub Theme for Visual Studio Code.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*H4ZAOtLrAniVho93.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/DimitarNonov.jellybeans-theme\" class=\"markup--anchor markup--h3-anchor\">Jellybeans Theme by Dimitar Nonov</a>\n<p>Jellybeans Theme for Visual Studio Code.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*oMhZGGsUfm8rqLtJ.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/whizkydee.material-palenight-theme\" class=\"markup--anchor markup--h3-anchor\">Material Palenight Theme by whizkydee</a>\n<p>An elegant and juicy material-like theme for Visual Studio Code.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*cw3IGUQSFahiPgiH.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/Equinusocio.vsc-material-theme\" class=\"markup--anchor markup--h3-anchor\">Material Theme by Mattia Astorino</a>\n<p>The most epic theme now for Visual Studio Code.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*2YvsABxfZ4Cv1Y_j.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/u29dc.mno\" class=\"markup--anchor markup--h3-anchor\">Mno by u29dc</a>\n<p>Minimal monochrome theme.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*_NT4CQBGRRlFQl9q.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/smlombardi.slime\" class=\"markup--anchor markup--h3-anchor\">Slime Theme by smlombardi</a>\n<p>A dark syntax/workbench theme for Visual Studio Code — optimized for SCSS, HTML, JS, TS, Markdown, and PHP files.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*-ldv4DoOVntnZbBt.png\" class=\"graf-image\" /></figure>### <a href=\"https://vscodethemes.com/e/selfrefactor.niketa-theme\" class=\"markup--anchor markup--h3-anchor\">Niketa Theme by Dejan Toteff</a>\n<p>Collection of 18 light themes separated in 4 groups by background’s brightness.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*n_iRSy_1IDOgajFu.png\" class=\"graf-image\" /></figure>### If you found this guide helpful feel free to checkout my GitHub/gists where I host similar content:\n<p><a href=\"https://gist.github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://gist.github.com/bgoonz\"><strong>bgoonz’s gists</strong><br />\n<em>Instantly share code, notes, and snippets. Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python |…</em>gist.github.com</a><a href=\"https://gist.github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\"><strong>bgoonz — Overview</strong><br />\n<em>Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize…</em>github.com</a><a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p>By <a href=\"https://medium.com/@bryanguner\" class=\"p-author h-card\">Bryan Guner</a> on <a href=\"https://medium.com/p/9bab65af3f0f\">March 18, 2021</a>.</p>\n<p><a href=\"https://medium.com/@bryanguner/my-favorite-vscode-themes-9bab65af3f0f\" class=\"p-canonical\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on August 6, 2021.</p>"},{"url":"/docs/quick-reference/resources/","relativePath":"docs/quick-reference/resources.md","relativeDir":"docs/quick-reference","base":"resources.md","name":"resources","frontmatter":{"title":"Developer Resources","weight":0,"excerpt":"Developer Resources","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h3>Web Dev Resources</h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*S5zCjm6p0WSZJQfT\" alt=\"Photo by Roman Synkevych on Unsplash\" class=\"graf-image\" /><figcaption>Photo by <a href=\"https://unsplash.com/@synkevych?utm_source=medium&amp;utm_medium=referral\" class=\"markup--anchor markup--figure-anchor\">Roman Synkevych</a> on <a href=\"https://unsplash.com?utm_source=medium&amp;utm_medium=referral\" class=\"markup--anchor markup--figure-anchor\">Unsplash</a></figcaption></figure>### Web Development\n<ul>\n<li><span id=\"7f87\"><a href=\"https://caniuse.com/#home\" class=\"markup--anchor markup--li-anchor\">Check cross-browser compatibility for CSS, JavaScript and HTML</a></span></li>\n<li><span id=\"6491\"><a href=\"https://medium.freecodecamp.org/modern-frontend-hacking-cheatsheets-df9c2566c72a\" class=\"markup--anchor markup--li-anchor\">Modern front-end Cheatsheets</a></span></li>\n<li><span id=\"1272\"><a href=\"https://stackshare.io/\" class=\"markup--anchor markup--li-anchor\">Check out what your favorite company’s stack is</a></span></li>\n<li><span id=\"d228\"><a href=\"https://medium.com/coderbyte/a-guide-to-becoming-a-full-stack-developer-in-2017-5c3c08a1600c\" class=\"markup--anchor markup--li-anchor\">A Guide to Becoming a Full-Stack Developer in 2017</a></span></li>\n<li><span id=\"0b32\"><a href=\"http://edusagar.com/articles/view/70/What-happens-when-you-type-a-URL-in-browser\" class=\"markup--anchor markup--li-anchor\">What happens when you type a URL into a web browser</a></span></li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li><span id=\"cb55\"><a href=\"https://github.com/airbnb/javascript\" class=\"markup--anchor markup--li-anchor\">Airbnb JavaScript Style Guide</a></span></li>\n<li><span id=\"5f22\"><a href=\"https://medium.freecodecamp.org/regular-expressions-demystified-regex-isnt-as-hard-as-it-looks-617b55cf787\" class=\"markup--anchor markup--li-anchor\">Regular Expressions Demystified</a></span></li>\n<li><span id=\"1f9e\"><a href=\"https://kangax.github.io/compat-table/es6/\" class=\"markup--anchor markup--li-anchor\">ECMAScript compatibility table</a></span></li>\n</ul>\n<h3>GIT</h3>\n<ul>\n<li><span id=\"c612\"><a href=\"http://product.hubspot.com/blog/git-and-github-tutorial-for-beginners\" class=\"markup--anchor markup--li-anchor\">HubSpot’s Intro to Git/GitHub including Pull Requests &#x26; Merging</a></span></li>\n</ul>\n<h3>Express</h3>\n<ul>\n<li><span id=\"f5e1\"><a href=\"https://github.com/tanukid/express-starter\" class=\"markup--anchor markup--li-anchor\">Express Starter</a></span></li>\n</ul>\n<h3>Node.js</h3>\n<ul>\n<li><span id=\"3f91\"><a href=\"https://medium.com/@thejasonfile/fetch-vs-axios-js-for-making-http-requests-2b261cdd3af5\" class=\"markup--anchor markup--li-anchor\">Fetch vs. Axios.js for making http requests</a> ## Sequelize</span></li>\n<li><span id=\"b94a\"><a href=\"https://www.youtube.com/watch?v=6NKNfXtKk0c\" class=\"markup--anchor markup--li-anchor\">Sequelize: Getting Started</a></span></li>\n<li><span id=\"fe38\">[Sequelize reference by @tmkelly28](<a href=\"https://github.com/tmkelly28/sequelize-reference\">https://github.com/tmkelly28/sequelize-reference</a>)</span></li>\n<li><span id=\"63a1\"><a href=\"https://blog.cloudboost.io/docs-for-the-sequelize-docs-querying-edition-aed4bd1273f0\" class=\"markup--anchor markup--li-anchor\">Short but useful Sequelize querying cheatsheet</a></span></li>\n</ul>\n<h3>Study Guides</h3>\n<ul>\n<li><span id=\"06de\"><a href=\"https://github.com/ohagert1/Express-Sequelize-Boilerplate-Study-Guide\" class=\"markup--anchor markup--li-anchor\">Express &#x26; Sequelize Boilerplate/Study Guide</a></span></li>\n</ul>\n<h3>React</h3>\n<ul>\n<li><span id=\"524d\"><a href=\"https://www.youtube.com/channel/UCZkjWyyLvzWeoVWEpRemrDQ\" class=\"markup--anchor markup--li-anchor\">React Casts — Series of React tutorials by Cassio</a></span></li>\n<li><span id=\"4e2f\"><a href=\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\" class=\"markup--anchor markup--li-anchor\">React Dev Tool Google Chrome Extension</a></span></li>\n<li><span id=\"f6ec\"><a href=\"https://github.com/facebookincubator/create-react-app\" class=\"markup--anchor markup--li-anchor\">create-react-app: Create React apps with no build configuration.</a></span></li>\n<li><span id=\"e294\"><a href=\"https://www.javascriptstuff.com/react-starter-projects/\" class=\"markup--anchor markup--li-anchor\">Find the perfect React starter template</a></span></li>\n<li><span id=\"df74\"><a href=\"https://github.com/jaredpalmer/formik\" class=\"markup--anchor markup--li-anchor\">Formik — Build forms in React, without the tears 😭</a></span></li>\n</ul>\n<h3>Redux</h3>\n<ul>\n<li><span id=\"3ec4\"><a href=\"https://egghead.io/courses/getting-started-with-redux\" class=\"markup--anchor markup--li-anchor\">Getting Started with Redux (free course by Dan Abramov)</a></span></li>\n<li><span id=\"ccfe\"><a href=\"https://egghead.io/courses/building-react-applications-with-idiomatic-redux\" class=\"markup--anchor markup--li-anchor\">Building React Applications with Idiomatic Redux (free course by Dan Abramov)</a></span></li>\n<li><span id=\"5cd7\"><a href=\"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en\" class=\"markup--anchor markup--li-anchor\">Redux Dev Tool Chrome Extension</a></span></li>\n</ul>\n<h3>Redux Middleware</h3>\n<ul>\n<li><span id=\"281b\"><a href=\"https://github.com/buunguyen/redux-freeze\" class=\"markup--anchor markup--li-anchor\">redux-freeze: avoid accidental in-place mutations of state</a></span></li>\n<li><span id=\"34e9\"><a href=\"https://github.com/redux-saga/redux-saga\" class=\"markup--anchor markup--li-anchor\">redux-saga: manage redux side-effects with es6 generators</a></span></li>\n<li><span id=\"7dd0\"><a href=\"https://github.com/pburtchaell/redux-promise-middleware\" class=\"markup--anchor markup--li-anchor\">redux-promise-middleware: A thunk alternative with more bells and whistles</a> ## CSS</span></li>\n<li><span id=\"883f\"><a href=\"https://specificity.keegan.st/\" class=\"markup--anchor markup--li-anchor\">Specificity Calculator</a></span></li>\n<li><span id=\"4a83\"><a href=\"http://bennettfeely.com/clippy/\" class=\"markup--anchor markup--li-anchor\">Tool for making clip-paths quickly with CSS</a></span></li>\n</ul>\n<h3>Command Line</h3>\n<ul>\n<li><span id=\"ed0b\"><a href=\"https://lifehacker.com/5743814/become-a-command-line-ninja-with-these-time-saving-shortcuts\" class=\"markup--anchor markup--li-anchor\">Useful commands</a></span></li>\n<li><span id=\"bf51\">Get your IP address in Mac OSX/Unix: <code>ifconfig | grep 'inet '</code></span></li>\n</ul>\n<h3>Atom</h3>\n<ul>\n<li><span id=\"118a\"><a href=\"https://gist.github.com/chrissimpkins/5bf5686bae86b8129bee\" class=\"markup--anchor markup--li-anchor\">Atom command cheat sheet</a></span></li>\n</ul>\n<h3>VS Code</h3>\n<ul>\n<li><span id=\"e3ec\"><a href=\"https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf\" class=\"markup--anchor markup--li-anchor\">Keystroke cheat sheet</a></span></li>\n<li><span id=\"7f06\"><a href=\"https://gist.github.com/tanukid/4ba5d7021a2027362592cbac0a356f58\" class=\"markup--anchor markup--li-anchor\">Daniel’s Config</a></span></li>\n</ul>\n<h3>Sublime</h3>\n<ul>\n<li><span id=\"e63f\"><a href=\"http://sweetme.at/2013/08/08/sublime-text-keyboard-shortcuts/\" class=\"markup--anchor markup--li-anchor\">Keystroke cheat sheet</a></span></li>\n<li><span id=\"02d2\"><a href=\"https://medium.com/beyond-the-manifesto/configuring-sublime-text-3-for-modern-es6-js-projects-6f3fd69e95de\" class=\"markup--anchor markup--li-anchor\">Configuring Sublime Text 3 for Modern ES6 JS Projects</a></span></li>\n</ul>\n<h3>Whiteboard Interviews</h3>\n<ul>\n<li><span id=\"555f\"><a href=\"https://www.algoexpert.io/product\" class=\"markup--anchor markup--li-anchor\">algoexpert.io (Made by FSA alumni)</a></span></li>\n<li><span id=\"cb9b\"><a href=\"https://github.com/mgechev/javascript-algorithms\" class=\"markup--anchor markup--li-anchor\">JavaScript implementation of popular algorithms and data structures</a></span></li>\n<li><span id=\"ed3d\"><a href=\"www.codewars.com\" class=\"markup--anchor markup--li-anchor\">Code Wars</a></span></li>\n<li><span id=\"d0e8\"><a href=\"http://www.geeksforgeeks.org/\" class=\"markup--anchor markup--li-anchor\">Geeks for Geeks</a></span></li>\n<li><span id=\"adce\"><a href=\"https://www.interviewcake.com/\" class=\"markup--anchor markup--li-anchor\">Interview Cake</a></span></li>\n<li><span id=\"9e2d\"><a href=\"https://leetcode.com/\" class=\"markup--anchor markup--li-anchor\">Leet Code</a></span></li>\n<li><span id=\"3b9d\"><a href=\"https://coderbyte.com/\" class=\"markup--anchor markup--li-anchor\">Coder Byte</a></span></li>\n<li><span id=\"b6d5\"><a href=\"https://www.hackerrank.com/\" class=\"markup--anchor markup--li-anchor\">Hacker Rank</a></span></li>\n<li><span id=\"6a45\"><a href=\"https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850/ref=pd_lpo_sbs_14_t_0?_encoding=UTF8&amp;psc=1&amp;refRID=8BB0KRJ073A8CZXTW5PP&amp;dpID=41XgSiYW7dL&amp;preST=_SY291_BO1,204,203,200_QL40_&amp;dpSrc=detail\" class=\"markup--anchor markup--li-anchor\">Cracking the Coding Interview</a></span></li>\n</ul>\n<p>Here’s a repo where I hoard resource lists!</p>\n<p><a href=\"https://github.com/bgoonz/Cumulative-Resource-List.git\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz/Cumulative-Resource-List.git\"><strong>bgoonz/Cumulative-Resource-List</strong><br />\n<em>Inspired by Awesome Lists. Contribute to bgoonz/Cumulative-Resource-List development by creating an account on GitHub.</em>github.com</a><a href=\"https://github.com/bgoonz/Cumulative-Resource-List.git\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<h2>MOAR!</h2>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*eEDATI6RAaEQw71I.jpg\" class=\"graf-image\" /></figure>-   <span id=\"84dc\"><a href=\"https://bgoonz.github.io/about.html#ansible\" class=\"markup--anchor markup--li-anchor\">Ansible</a></span>\n-   <span id=\"1d08\"><a href=\"https://bgoonz.github.io/about.html#awesome-lists\" class=\"markup--anchor markup--li-anchor\">Awesome Lists</a></span>\n-   <span id=\"958d\"><a href=\"https://bgoonz.github.io/about.html#continious-integration\" class=\"markup--anchor markup--li-anchor\">CI/CD</a></span>\n-   <span id=\"eee2\"><a href=\"https://bgoonz.github.io/about.html#data-science\" class=\"markup--anchor markup--li-anchor\">Data Science</a></span>\n-   <span id=\"efef\"><a href=\"https://bgoonz.github.io/about.html#docker\" class=\"markup--anchor markup--li-anchor\">Docker</a></span>\n-   <span id=\"069b\"><a href=\"https://bgoonz.github.io/about.html#dynamodb\" class=\"markup--anchor markup--li-anchor\">DynamoDB</a></span>\n-   <span id=\"49cc\"><a href=\"https://bgoonz.github.io/about.html#elasticsearch\" class=\"markup--anchor markup--li-anchor\">Elasticsearch</a></span>\n-   <span id=\"a53b\"><a href=\"https://bgoonz.github.io/about.html#environment-setups\" class=\"markup--anchor markup--li-anchor\">Environment Setups</a></span>\n-   <span id=\"e5a2\"><a href=\"https://bgoonz.github.io/about.html#epic-github-repos\" class=\"markup--anchor markup--li-anchor\">Epic Github Repos</a></span>\n-   <span id=\"3439\"><a href=\"https://bgoonz.github.io/about.html#golang\" class=\"markup--anchor markup--li-anchor\">Golang</a></span>\n-   <span id=\"4a3d\"><a href=\"https://bgoonz.github.io/about.html#grafana\" class=\"markup--anchor markup--li-anchor\">Grafana</a></span>\n-   <span id=\"7b62\"><a href=\"https://bgoonz.github.io/about.html#great-blogs\" class=\"markup--anchor markup--li-anchor\">Great Blogs</a></span>\n-   <span id=\"ad80\"><a href=\"https://bgoonz.github.io/about.html#knowledge-base\" class=\"markup--anchor markup--li-anchor\">Knowledge Base</a></span>\n-   <span id=\"227d\"><a href=\"https://bgoonz.github.io/about.html#kubernetes\" class=\"markup--anchor markup--li-anchor\">Kubernetes</a></span>\n-   <span id=\"6ceb\"><a href=\"https://bgoonz.github.io/about.html#kubernetes-storage\" class=\"markup--anchor markup--li-anchor\">Kubernetes Storage</a></span>\n-   <span id=\"97b6\"><a href=\"https://bgoonz.github.io/about.html#machine-learning\" class=\"markup--anchor markup--li-anchor\">Machine Learning</a></span>\n-   <span id=\"5b37\"><a href=\"https://bgoonz.github.io/about.html#monitoring\" class=\"markup--anchor markup--li-anchor\">Monitoring</a></span>\n-   <span id=\"c262\"><a href=\"https://bgoonz.github.io/about.html#mongodb\" class=\"markup--anchor markup--li-anchor\">MongoDB</a></span>\n-   <span id=\"5857\"><a href=\"https://bgoonz.github.io/about.html#programming\" class=\"markup--anchor markup--li-anchor\">Programming</a></span>\n-   <span id=\"60a1\"><a href=\"https://bgoonz.github.io/about.html#queues\" class=\"markup--anchor markup--li-anchor\">Queues</a></span>\n-   <span id=\"2694\"><a href=\"https://bgoonz.github.io/about.html#self-hosting\" class=\"markup--anchor markup--li-anchor\">Self Hosting</a></span>\n-   <span id=\"d4a4\"><a href=\"https://bgoonz.github.io/about.html#email-server-setups\" class=\"markup--anchor markup--li-anchor\">Email Server Setups</a></span>\n-   <span id=\"6309\"><a href=\"https://bgoonz.github.io/about.html#mailscanner-server-setups\" class=\"markup--anchor markup--li-anchor\">Mailscanner Server Setups</a></span>\n-   <span id=\"1c97\"><a href=\"https://bgoonz.github.io/about.html#serverless\" class=\"markup--anchor markup--li-anchor\">Serverless</a></span>\n-   <span id=\"bafa\"><a href=\"https://bgoonz.github.io/about.html#sysadmin-references\" class=\"markup--anchor markup--li-anchor\">Sysadmin References</a></span>\n-   <span id=\"5fc4\"><a href=\"https://bgoonz.github.io/about.html#vpn\" class=\"markup--anchor markup--li-anchor\">VPN</a></span>\n-   <span id=\"81ef\"><a href=\"https://bgoonz.github.io/about.html#web-frameworks\" class=\"markup--anchor markup--li-anchor\">Web Frameworks</a></span>\n<h3>Ansible</h3>\n<ul>\n<li><span id=\"abab\"><a href=\"https://github.com/zimmertr/Bootstrap-Kubernetes-with-LXC\" class=\"markup--anchor markup--li-anchor\">Kubernetes on LXC with Ansible</a></span></li>\n</ul>\n<h3>Awesome Lists</h3>\n<ul>\n<li><span id=\"4570\"><a href=\"https://github.com/exAspArk/awesome-chatops\" class=\"markup--anchor markup--li-anchor\">Awesome ChatOps</a></span></li>\n<li><span id=\"e8b4\"><a href=\"https://github.com/binhnguyennus/awesome-scalability\" class=\"markup--anchor markup--li-anchor\">Awesome Scalability</a></span></li>\n<li><span id=\"9050\"><a href=\"https://github.com/drone/awesome-drone\" class=\"markup--anchor markup--li-anchor\">Awesome Drone</a></span></li>\n</ul>\n<h3>Epic Github Repos</h3>\n<ul>\n<li><span id=\"1cb2\"><a href=\"https://github.com/mlabouardy?tab=repositories\" class=\"markup--anchor markup--li-anchor\">mlabouardy</a></span></li>\n</ul>\n<h3>Authentication</h3>\n<ul>\n<li><span id=\"19fa\"><a href=\"https://mapr.com/blog/how-secure-elasticsearch-and-kibana/\" class=\"markup--anchor markup--li-anchor\">Nginx ES and Kibana Proxy with LDAP</a></span></li>\n</ul>\n<h3>Data Science</h3>\n<ul>\n<li><span id=\"cf4c\"><a href=\"https://github.com/bulutyazilim/awesome-datascience\" class=\"markup--anchor markup--li-anchor\">bulutyazilim — datascience awesome list</a></span></li>\n</ul>\n<h3>Grafana</h3>\n<ul>\n<li><span id=\"db81\"><a href=\"https://github.com/mlabouardy/grafana-dashboards\" class=\"markup--anchor markup--li-anchor\">Grafana Dashboards @mlabouardy</a></span></li>\n</ul>\n<h3>Docker</h3>\n<h4>Deploy Stacks to your Swarm: 🐳 ❤️</h4>\n<p>Logging:</p>\n<ul>\n<li><span id=\"b7ff\"><a href=\"https://github.com/shazChaudhry/docker-elastic\" class=\"markup--anchor markup--li-anchor\">shazChaudhry Swarm GELF Stack</a></span></li>\n</ul>\n<p>Metrics:</p>\n<ul>\n<li><span id=\"52cc\"><a href=\"https://github.com/stefanprodan/swarmprom\" class=\"markup--anchor markup--li-anchor\">StefanProdan — Prometheus, Grafana, cAdvisor, Node Exporter and Alert Manager</a></span></li>\n<li><span id=\"d0e5\"><a href=\"https://github.com/mlabouardy/swarm-tick\" class=\"markup--anchor markup--li-anchor\">Mlabouardy — Telegraf, InfluxDB, Chronograf, Kapacitor &#x26; Slack</a></span></li>\n</ul>\n<h4>Awesome Docker Repos</h4>\n<ul>\n<li><span id=\"8b0f\"><a href=\"https://github.com/jessfraz/dockerfiles\" class=\"markup--anchor markup--li-anchor\">Jess’s Dockerfiles</a></span></li>\n<li><span id=\"46e9\"><a href=\"https://github.com/firecat53/dockerfiles\" class=\"markup--anchor markup--li-anchor\">Firecat53’s Dockerfiles</a></span></li>\n</ul>\n<h4>RaspberryPi ARM Images:</h4>\n<ul>\n<li><span id=\"1cd6\"><a href=\"https://hub.docker.com/r/arm32v6/alpine/\" class=\"markup--anchor markup--li-anchor\">arm32v6/alpine:edge</a></span></li>\n<li><span id=\"c5c2\"><a href=\"https://hub.docker.com/r/arm32v6/golang/\" class=\"markup--anchor markup--li-anchor\">arm32v6/golang:alpine</a></span></li>\n<li><span id=\"1b14\"><a href=\"https://hub.docker.com/r/arm32v6/haproxy/\" class=\"markup--anchor markup--li-anchor\">arm32v6/haproxy:alpine</a></span></li>\n<li><span id=\"a39c\"><a href=\"https://hub.docker.com/r/arm32v6/node/\" class=\"markup--anchor markup--li-anchor\">arm32v6/node:alpine</a></span></li>\n<li><span id=\"80fb\"><a href=\"https://hub.docker.com/r/arm32v6/openjdk/\" class=\"markup--anchor markup--li-anchor\">arm32v6/openjdk:alpine</a></span></li>\n<li><span id=\"13b3\"><a href=\"https://hub.docker.com/r/arm32v6/postgres/\" class=\"markup--anchor markup--li-anchor\">arm32v6/postgres:alpine</a></span></li>\n<li><span id=\"8a43\"><a href=\"https://hub.docker.com/r/arm32v6/python/\" class=\"markup--anchor markup--li-anchor\">arm32v6/python:2.7-alpine3.6</a></span></li>\n<li><span id=\"ef75\"><a href=\"https://hub.docker.com/r/arm32v6/python/\" class=\"markup--anchor markup--li-anchor\">arm32v6/python:3.6-alpine3.6</a></span></li>\n<li><span id=\"846e\"><a href=\"https://hub.docker.com/r/arm32v6/rabbitmq/\" class=\"markup--anchor markup--li-anchor\">arm32v6/rabbitmq:alpine</a></span></li>\n<li><span id=\"bfdc\"><a href=\"https://hub.docker.com/r/arm32v6/redis/\" class=\"markup--anchor markup--li-anchor\">arm32v6/redis:alpine</a></span></li>\n<li><span id=\"b879\"><a href=\"https://hub.docker.com/r/arm32v6/ruby/\" class=\"markup--anchor markup--li-anchor\">arm32v6/ruby:alpine3.6</a></span></li>\n<li><span id=\"3cbe\"><a href=\"https://hub.docker.com/r/arm32v6/tomcat/\" class=\"markup--anchor markup--li-anchor\">arm32v6/tomcat:alpine</a></span></li>\n<li><span id=\"18e7\"><a href=\"https://hub.docker.com/r/arm32v6/traefik/\" class=\"markup--anchor markup--li-anchor\">arm32v6/traefik:latest</a></span></li>\n<li><span id=\"502c\"><a href=\"https://hub.docker.com/r/arm32v7/debian/\" class=\"markup--anchor markup--li-anchor\">arm32v7/debian:lates</a></span></li>\n<li><span id=\"c976\"><a href=\"https://hub.docker.com/r/hypriot/rpi-redis/\" class=\"markup--anchor markup--li-anchor\">hypriot/rpi-redis</a></span></li>\n<li><span id=\"5c87\"><a href=\"https://github.com/jixer/rpi-mongo\" class=\"markup--anchor markup--li-anchor\">jixer/rpi-mongo</a></span></li>\n<li><span id=\"15e1\"><a href=\"https://github.com/alexellis/docker-arm/tree/master/images/armhf\" class=\"markup--anchor markup--li-anchor\">alexellis/armhf</a></span></li>\n<li><span id=\"578c\"><a href=\"https://github.com/zeiot\" class=\"markup--anchor markup--li-anchor\">zeiot: rpi-prometheus stack</a></span></li>\n<li><span id=\"0ce9\"><a href=\"https://hub.docker.com/u/larmog/\" class=\"markup--anchor markup--li-anchor\">larmog</a></span></li>\n<li><span id=\"3662\"><a href=\"https://github.com/andresvidal/rpi3-mongodb3\" class=\"markup--anchor markup--li-anchor\">Rpi MongoDB</a></span></li>\n<li><span id=\"2ea6\"><a href=\"https://github.com/armswarm\" class=\"markup--anchor markup--li-anchor\">ARM Swarm</a></span></li>\n</ul>\n<h4>Docker Image Repositories</h4>\n<ul>\n<li><span id=\"202f\"><a href=\"https://hub.docker.com/u/arm32v6/\" class=\"markup--anchor markup--li-anchor\">Docker Hub: arm32v6</a></span></li>\n<li><span id=\"67a9\"><a href=\"https://hub.docker.com/u/armv7/\" class=\"markup--anchor markup--li-anchor\">Docker Hub: armv7</a></span></li>\n<li><span id=\"5e86\"><a href=\"https://github.com/luvres/armhf\" class=\"markup--anchor markup--li-anchor\">Github: Luvres Armhf</a></span></li>\n<li><span id=\"3f80\"><a href=\"https://github.com/ulsmith/alpine-apache-php7\" class=\"markup--anchor markup--li-anchor\">Apache/PHP7 on Alpine</a></span></li>\n<li><span id=\"6cff\"><a href=\"https://github.com/docker-library/tomcat/blob/master/8.0/jre8-alpine/Dockerfile\" class=\"markup--anchor markup--li-anchor\">Tomcat on Alpine</a></span></li>\n<li><span id=\"57cd\"><a href=\"https://github.com/jwilder/nginx-proxy\" class=\"markup--anchor markup--li-anchor\">Nginx (jwilder)</a></span></li>\n<li><span id=\"7aa0\"><a href=\"https://github.com/smebberson/docker-alpine\" class=\"markup--anchor markup--li-anchor\">Alpine Images (smebberson)</a></span></li>\n<li><span id=\"6e95\"><a href=\"https://hub.docker.com/u/sameersbn/\" class=\"markup--anchor markup--li-anchor\">SameerSbn</a></span></li>\n<li><span id=\"d74c\"><a href=\"https://hub.docker.com/u/linuxserver/\" class=\"markup--anchor markup--li-anchor\">Linuxserver.io</a></span></li>\n<li><span id=\"54e0\"><a href=\"https://hub.docker.com/r/nimmis/alpine-apache-php5/\" class=\"markup--anchor markup--li-anchor\">Apache-PHP5</a></span></li>\n<li><span id=\"ea4c\"><a href=\"https://github.com/harobed/docker-php-ssmtp\" class=\"markup--anchor markup--li-anchor\">Apache-PHP-Email</a></span></li>\n</ul>\n<h4>Docker-Awesome-Lists</h4>\n<ul>\n<li><span id=\"b67a\"><a href=\"https://github.com/AdamBien/docklands\" class=\"markup--anchor markup--li-anchor\">Java Docker Services</a></span></li>\n<li><span id=\"158f\"><a href=\"https://gist.github.com/shouse/a14c44e97a2cd2a1f030\" class=\"markup--anchor markup--li-anchor\">shouse Docker Awesome List</a></span></li>\n</ul>\n<h4>Docker Blogs:</h4>\n<ul>\n<li><span id=\"5e06\"><a href=\"https://hub.docker.com/r/emilevauge/whoami/\" class=\"markup--anchor markup--li-anchor\">Whoami used in Traefik Docs</a></span></li>\n<li><span id=\"3fd6\"><a href=\"https://github.com/spartakode/my-docker-repos/blob/master/sqlite3/Dockerfile\" class=\"markup--anchor markup--li-anchor\">Sqlite with Docker</a></span></li>\n<li><span id=\"433f\"><a href=\"https://github.com/mookjp/rails-docker-example\" class=\"markup--anchor markup--li-anchor\">Rails with Postgres and Redis</a></span></li>\n<li><span id=\"ff65\"><a href=\"https://testdriven.io/asynchronous-tasks-with-flask-and-redis-queue\" class=\"markup--anchor markup--li-anchor\">Async Tasks with Flask and Redis</a></span></li>\n<li><span id=\"e4f4\"><a href=\"https://github.com/davidmukiibi/docker-flask\" class=\"markup--anchor markup--li-anchor\">Flask and Postgres</a></span></li>\n<li><span id=\"2935\"><a href=\"http://ict.renevdmark.nl/2016/07/05/elastic-beats-on-raspberry-pi/\" class=\"markup--anchor markup--li-anchor\">Elastic Beats on RaspberryPi</a></span></li>\n</ul>\n<h4>Docker Storage</h4>\n<ul>\n<li><span id=\"a2ce\"><a href=\"https://github.com/rancher/convoy\" class=\"markup--anchor markup--li-anchor\">Rancher Convoy</a></span></li>\n<li><span id=\"118f\"><a href=\"https://flocker.readthedocs.io/en/latest/flocker-features/storage-backends.html#supported-backends\" class=\"markup--anchor markup--li-anchor\">Flocker</a></span></li>\n<li><span id=\"2312\"><a href=\"http://node.mu/2017/06/30/scaleio-on-ubuntu-xenial/\" class=\"markup--anchor markup--li-anchor\">EMC ScaleIO</a></span></li>\n<li><span id=\"0ab0\"><a href=\"https://github.com/lucj/swarm-rexray-ceph\" class=\"markup--anchor markup--li-anchor\">RexRay Ceph with Ansible</a></span></li>\n<li><span id=\"f428\"><a href=\"http://containx.io/\" class=\"markup--anchor markup--li-anchor\">ContainX</a></span></li>\n</ul>\n<h4>OpenFaas:</h4>\n<ul>\n<li><span id=\"da90\"><a href=\"https://github.com/openfaas/faas/releases\" class=\"markup--anchor markup--li-anchor\">FaaS Releases</a></span></li>\n<li><span id=\"3af4\"><a href=\"https://github.com/openfaas/workshop\" class=\"markup--anchor markup--li-anchor\">FaaS Workshop</a></span></li>\n</ul>\n<h4>Prometheus / Grafana on Swarm:</h4>\n<ul>\n<li><span id=\"f482\"><a href=\"https://github.com/stefanprodan/swarmprom\" class=\"markup--anchor markup--li-anchor\">StefanProdan — SwarmProm</a></span></li>\n<li><span id=\"6ded\"><a href=\"https://medium.com/@soumyadipde/monitoring-in-docker-stacks-its-that-easy-with-prometheus-5d71c1042443\" class=\"markup--anchor markup--li-anchor\">Monitoring with Prometheus</a></span></li>\n<li><span id=\"2631\"><a href=\"https://github.com/uschtwill/docker_monitoring_logging_alerting\" class=\"markup--anchor markup--li-anchor\">UschtWill — Prometheus Grafana Elastalert</a></span></li>\n<li><span id=\"2849\"><a href=\"https://github.com/chmod666org/docker-swarm-prometheus\" class=\"markup--anchor markup--li-anchor\">Chmod-Org Promethus with Blackbox</a></span></li>\n<li><span id=\"3995\"><a href=\"https://finestructure.co/blog/2016/5/16/monitoring-with-prometheus-grafana-docker-part-1\" class=\"markup--anchor markup--li-anchor\">Finestructure: Prometheus Tutorial</a></span></li>\n</ul>\n<h3>Logging / Kibana / Beats</h3>\n<h3>Libraries</h3>\n<ul>\n<li><span id=\"b055\"><a href=\"https://github.com/Delgan/loguru\" class=\"markup--anchor markup--li-anchor\">Loguru</a> | <a href=\"https://gist.github.com/M0r13n/0b8c62c603fdbc98361062bd9ebe8153\" class=\"markup--anchor markup--li-anchor\">Flask Example with Loguru</a></span></li>\n</ul>\n<h3>Frameworks</h3>\n<ul>\n<li><span id=\"8e4c\"><a href=\"https://github.com/shazChaudhry/docker-elastic\" class=\"markup--anchor markup--li-anchor\">shazChaudhry Swarm GELF Stack</a></span></li>\n</ul>\n<h3>Continious Integration:</h3>\n<h4>Circle-CI</h4>\n<ul>\n<li><span id=\"0eac\"><a href=\"https://circleci.com/docs/1.0/language-php/\" class=\"markup--anchor markup--li-anchor\">PHP with Circle-CI</a></span></li>\n</ul>\n<h4>Concourse</h4>\n<ul>\n<li><span id=\"3f92\"><a href=\"https://concourse.ci/docker-repository.html\" class=\"markup--anchor markup--li-anchor\">Setup Concourse Environment with Docker</a></span></li>\n<li><span id=\"4284\"><a href=\"https://blog.anynines.com/getting-started-with-concourse-ci-and-docker/\" class=\"markup--anchor markup--li-anchor\">Getting Started with Concourse and Docker</a></span></li>\n<li><span id=\"7536\"><a href=\"https://github.com/pivotalservices/concourse-pipeline-samples/tree/master/concourse-pipeline-patterns/gated-pipelines\" class=\"markup--anchor markup--li-anchor\">Concourse Gated Pipelines</a></span></li>\n<li><span id=\"1a92\"><a href=\"https://github.com/EugenMayer/concourseci-server-boilerplate\" class=\"markup--anchor markup--li-anchor\">Concourse Boilerplate</a></span></li>\n</ul>\n<h4>Jenkins</h4>\n<ul>\n<li><span id=\"e55e\"><a href=\"https://modess.io/jenkins-php/\" class=\"markup--anchor markup--li-anchor\">Modess — PHP with Jenkins</a></span></li>\n<li><span id=\"e077\"><a href=\"https://code.tutsplus.com/tutorials/setting-up-continuous-integration-continuous-deployment-with-jenkins--cms-21511\" class=\"markup--anchor markup--li-anchor\">CI/CD Nodejs Tutorial with Jenkins</a></span></li>\n<li><span id=\"8663\"><a href=\"https://medium.com/@mosheezderman/how-to-set-up-ci-cd-pipeline-for-a-node-js-app-with-jenkins-c51581cc783c\" class=\"markup--anchor markup--li-anchor\">CI/CD Nodejs Tutorial with Jenkins @medium</a></span></li>\n<li><span id=\"c17d\"><a href=\"https://github.com/shazChaudhry/docker-swarm-mode\" class=\"markup--anchor markup--li-anchor\">Epic CICD workflow with Jenkins, Gitlab, Sonar, Nexus</a></span></li>\n</ul>\n<h4>SwarmCi</h4>\n<ul>\n<li><span id=\"ca48\"><a href=\"https://github.com/ghostsquad/swarmci\" class=\"markup--anchor markup--li-anchor\">SwarmCI</a></span></li>\n</ul>\n<h4>Travis-CI</h4>\n<ul>\n<li><span id=\"5050\"><a href=\"https://docs.travis-ci.com/user/getting-started/\" class=\"markup--anchor markup--li-anchor\">Getting Started with Travis-CI (Original Docs)</a></span></li>\n<li><span id=\"1f71\"><a href=\"https://github.com/dwyl/learn-travis\" class=\"markup--anchor markup--li-anchor\">Getting Started with Travis-CI (dwyl — nodejs)</a></span></li>\n<li><span id=\"12a1\"><a href=\"https://matthewmoisen.com/blog/how-to-set-up-travis-ci-with-github-for-a-python-project/\" class=\"markup--anchor markup--li-anchor\">Blog Site with Travis-CI (Python)</a></span></li>\n<li><span id=\"74dd\"><a href=\"https://github.com/softwaresaved/build_and_test_examples/blob/master/travis/HelloWorld.md\" class=\"markup--anchor markup--li-anchor\">Build Tests with Python on Travis-CI</a></span></li>\n<li><span id=\"0c8a\"><a href=\"https://www.raywenderlich.com/109418/travis-ci-tutorial\" class=\"markup--anchor markup--li-anchor\">Moving app with Travis-CI</a></span></li>\n</ul>\n<h4>LambCI</h4>\n<ul>\n<li><span id=\"5a62\"><a href=\"https://github.com/lambci/lambci\" class=\"markup--anchor markup--li-anchor\">LambCI</a></span></li>\n</ul>\n<h3>DynamoDB</h3>\n<h4>DynamoDB Docs</h4>\n<ul>\n<li><span id=\"f776\"><a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/SQLtoNoSQL.ReadData.Query.html\" class=\"markup--anchor markup--li-anchor\">AWS DynamoDB: SQL to NoSQL</a></span></li>\n</ul>\n<h4>DynamoDB Best Practices</h4>\n<ul>\n<li><span id=\"db69\"><a href=\"https://aws.amazon.com/blogs/database/choosing-the-right-dynamodb-partition-key/\" class=\"markup--anchor markup--li-anchor\">Choosing the Right Partition Key</a></span></li>\n<li><span id=\"6d4c\"><a href=\"https://cloudacademy.com/blog/amazon-dynamodb-ten-things/\" class=\"markup--anchor markup--li-anchor\">10 Things you should know</a></span></li>\n</ul>\n<h4>DynamoDB General Info</h4>\n<ul>\n<li><span id=\"1006\"><a href=\"https://medium.com/@yaofei/understand-dynamodb-b278f718ddb8\" class=\"markup--anchor markup--li-anchor\">Understanding DynamoDB</a></span></li>\n</ul>\n<h3>Elasticsearch</h3>\n<h4>Elasticsearch Documentation</h4>\n<ul>\n<li><span id=\"4493\"><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/general-recommendations.html\" class=\"markup--anchor markup--li-anchor\">General Recommendation</a></span></li>\n<li><span id=\"8921\"><a href=\"https://www.elastic.co/blog/how-many-shards-should-i-have-in-my-elasticsearch-cluster\" class=\"markup--anchor markup--li-anchor\">How Many Shards in my Cluster</a></span></li>\n<li><span id=\"8e3f\"><a href=\"https://www.elastic.co/blog/managing-time-based-indices-efficiently\" class=\"markup--anchor markup--li-anchor\">Managing Time-Based Indices Efficiently</a></span></li>\n<li><span id=\"bdc6\"><a href=\"https://bonsai.io/2016/01/11/ideal-elasticsearch-cluster\" class=\"markup--anchor markup--li-anchor\">Elasticsearch Best Practices (Bonsai.io)</a></span></li>\n<li><span id=\"300c\"><a href=\"https://aws.amazon.com/premiumsupport/knowledge-center/elasticsearch-scale-up/\" class=\"markup--anchor markup--li-anchor\">AWS ES — Scaling up my Domain</a></span></li>\n</ul>\n<h4>Elasticsearch Cheetsheets:</h4>\n<ul>\n<li><span id=\"1637\"><a href=\"https://gist.github.com/ruanbekker/e8a09604b14f37e8d2f743a87b930f93\" class=\"markup--anchor markup--li-anchor\">My ES Cheatsheet</a></span></li>\n</ul>\n<h4>Elasticsearch Blogs</h4>\n<ul>\n<li><span id=\"0f1a\"><a href=\"https://qbox.io/blog/maximize-guide-elasticsearch-indexing-performance-part-1\" class=\"markup--anchor markup--li-anchor\">Maximize Elasticsearch Indexing Performance</a></span></li>\n<li><span id=\"b16a\"><a href=\"https://qbox.io/blog/authoritative-guide-elasticsearch-performance-tuning-part-1\" class=\"markup--anchor markup--li-anchor\">Autoritative Guide to ES Performance Tuning</a></span></li>\n<li><span id=\"a39b\"><a href=\"https://opendistro.github.io/for-elasticsearch-docs/docs/elasticsearch/full-text/\" class=\"markup--anchor markup--li-anchor\">Full text Search Queries</a></span></li>\n<li><span id=\"e4d6\"><a href=\"https://okfnlabs.org/blog/2013/07/01/elasticsearch-query-tutorial.html\" class=\"markup--anchor markup--li-anchor\">Query Elasticsearch</a></span></li>\n</ul>\n<h4>Elasticsearch Tools</h4>\n<ul>\n<li><span id=\"daeb\"><a href=\"https://github.com/mallocator/Elasticsearch-Exporter\" class=\"markup--anchor markup--li-anchor\">Export Data from ES to ES</a></span></li>\n</ul>\n<h3>Environment Setups:</h3>\n<ul>\n<li><span id=\"efec\"><a href=\"https://medium.com/aishik/install-golang-the-right-way-4743fee9255f\" class=\"markup--anchor markup--li-anchor\">Golang</a></span></li>\n</ul>\n<h3>Knowledge Base</h3>\n<h3>KB HTTPS</h3>\n<ul>\n<li><span id=\"b222\"><a href=\"https://blog.miguelgrinberg.com/post/running-your-flask-application-over-https\" class=\"markup--anchor markup--li-anchor\">How does HTTPS work (Miguel Grinberg)</a></span></li>\n</ul>\n<h3>Kubernetes</h3>\n<ul>\n<li><span id=\"aafa\"><a href=\"https://github.com/ramitsurana/awesome-kubernetes/blob/master/README.md\" class=\"markup--anchor markup--li-anchor\">Awesome Kubernetes</a></span></li>\n<li><span id=\"6faa\"><a href=\"https://cheatsheet.dennyzhang.com/cheatsheet-kubernetes-a4\" class=\"markup--anchor markup--li-anchor\">Kubernetes Cheatsheet</a></span></li>\n<li><span id=\"7b5a\"><a href=\"https://kubernetes.io/blog/2019/07/23/get-started-with-kubernetes-using-python/\" class=\"markup--anchor markup--li-anchor\">Getting Started: Python application on Kubernetes</a></span></li>\n<li><span id=\"8945\"><a href=\"https://semaphoreci.com/blog/kubernetes-deployment\" class=\"markup--anchor markup--li-anchor\">Kubernetes Deployments: The Ultimate Guide</a></span></li>\n<li><span id=\"b6dc\"><a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-prometheus-grafana-and-alertmanager-monitoring-stack-on-digitalocean-kubernetes\" class=\"markup--anchor markup--li-anchor\">Prometheus Monitoring Stack with Kubernetes on DO</a></span></li>\n<li><span id=\"7d6a\"><a href=\"https://tech.evaneos.com/traefik-as-an-ingress-controller-on-minikube-with-kustomize-helm-a3b2f44a5c2a\" class=\"markup--anchor markup--li-anchor\">Traefik as an Ingress Controller on Minikube</a></span></li>\n<li><span id=\"1a6e\"><a href=\"https://itnext.io/traefik-cluster-as-ingress-controller-for-kubernetes-99fa6c34402\" class=\"markup--anchor markup--li-anchor\">Traefik Ingress with Kubernetes</a></span></li>\n<li><span id=\"7ac9\"><a href=\"https://medium.com/faun/manually-connect-to-your-kubernetes-cluster-from-the-outside-d852346a7f0a\" class=\"markup--anchor markup--li-anchor\">Manual Connect your Kubernetes from Outside</a></span></li>\n<li><span id=\"8967\"><a href=\"https://pascalw.me/blog/2019/07/02/k3s-https-letsencrypt.html\" class=\"markup--anchor markup--li-anchor\">HTTPS Letsencrypt on k3s</a></span></li>\n<li><span id=\"4e91\"><a href=\"https://medium.com/google-cloud/kubernetes-nodeport-vs-loadbalancer-vs-ingress-when-should-i-use-what-922f010849e0\" class=\"markup--anchor markup--li-anchor\">Kubernetes: Nodeport vs Loadbalancer</a></span></li>\n<li><span id=\"0df0\"><a href=\"https://medium.com/kubernetes-tutorials/simple-management-of-prometheus-monitoring-pipeline-with-the-prometheus-operator-b445da0e0d1a\" class=\"markup--anchor markup--li-anchor\">Prometheus Monitoring Pipeline on Kubernetes</a></span></li>\n<li><span id=\"8eef\"><a href=\"https://rancher.com/blog/2018/2018-08-07-cicd-pipeline-k8s-autodevops-rancher-and-gitlab/\" class=\"markup--anchor markup--li-anchor\">Building a Kubernetes CI/CD Pipeline with Rancher</a></span></li>\n<li><span id=\"57cf\"><a href=\"https://medium.com/swlh/universal-cicd-pipeline-on-aws-and-k8s-7b4129fac5d4\" class=\"markup--anchor markup--li-anchor\">Building a Kubernetes CI/CD Pipeline with AWS</a></span></li>\n<li><span id=\"d761\"><a href=\"https://itnext.io/explore-gitea-drone-ci-cd-on-k3s-4a9e99f8b938\" class=\"markup--anchor markup--li-anchor\">Gitea and Drone CI/CD on k3s</a></span></li>\n<li><span id=\"bde3\"><a href=\"https://github.com/openfaas-incubator/openfaas-linkerd2/blob/master/README.md\" class=\"markup--anchor markup--li-anchor\">Serverless with Kubernetes using OpenFaaS and Linkerd2</a></span></li>\n<li><span id=\"236a\"><a href=\"https://rancher.com/blog/2019/how-to-manage-kubernetes-with-kubectl/\" class=\"markup--anchor markup--li-anchor\">Managing Kubernetes with kubectl</a></span></li>\n<li><span id=\"b0af\"><a href=\"https://gist.github.com/alexellis/a6ee5f094f86987a0dc508442220c52a\" class=\"markup--anchor markup--li-anchor\">OpenFaas Workshop on k3s</a></span></li>\n<li><span id=\"b217\"><a href=\"http://collabnix.com/kubernetes-hands-on-lab-4-deploy-application-stack-using-helm-on-play-with-kubernetes-platform/\" class=\"markup--anchor markup--li-anchor\">Kubernetes Hands-On Lab with collabnix</a></span></li>\n<li><span id=\"e717\"><a href=\"https://medium.com/asl19-developers/create-readwritemany-persistentvolumeclaims-on-your-kubernetes-cluster-3a8db51f98e3\" class=\"markup--anchor markup--li-anchor\">Create ReadWrite Persistent Volumes on Kubernetes</a></span></li>\n<li><span id=\"fca8\"><a href=\"https://medium.com/@mattiaperi/kubernetes-cluster-with-k3s-and-multipass-7532361affa3\" class=\"markup--anchor markup--li-anchor\">Kubernetes Clusters with k3s and multipass</a></span></li>\n</ul>\n<h3>Kubernetes Storage</h3>\n<ul>\n<li><span id=\"4413\"><a href=\"https://kadalu.io/docs/quick-start\" class=\"markup--anchor markup--li-anchor\">Kadalu</a></span></li>\n<li><span id=\"eb56\"><a href=\"https://rancher.com/docs/k3s/latest/en/storage/\" class=\"markup--anchor markup--li-anchor\">Rancher: Longhorn Storage</a></span></li>\n</ul>\n<h3>Golang</h3>\n<ul>\n<li><span id=\"fc71\"><a href=\"https://github.com/brianvoe/gofakeit\" class=\"markup--anchor markup--li-anchor\">Generate Fake Random Data with Golang</a></span></li>\n<li><span id=\"ad3a\"><a href=\"https://github.com/hoanhan101/ultimate-go\" class=\"markup--anchor markup--li-anchor\">Ultimate Golang Study Guide</a></span></li>\n</ul>\n<h3>Great Blogs</h3>\n<ul>\n<li><span id=\"6f90\"><a href=\"https://www.exratione.com/blog/\" class=\"markup--anchor markup--li-anchor\">Exratione.com</a></span></li>\n<li><span id=\"e5f2\"><a href=\"http://joelabrahamsson.com/elasticsearch-101/\" class=\"markup--anchor markup--li-anchor\">Joelabrahamsson.com</a></span></li>\n<li><span id=\"38cc\"><a href=\"http://bencane.com/\" class=\"markup--anchor markup--li-anchor\">Benjamin Cane</a></span></li>\n<li><span id=\"2583\"><a href=\"http://mherman.org/\" class=\"markup--anchor markup--li-anchor\">Michael Herman</a></span></li>\n<li><span id=\"3e8c\"><a href=\"http://charlesleifer.com/\" class=\"markup--anchor markup--li-anchor\">Charles Leifer</a></span></li>\n<li><span id=\"3b5d\"><a href=\"https://www.blog.labouardy.com/\" class=\"markup--anchor markup--li-anchor\">Labouardy</a></span></li>\n<li><span id=\"2759\"><a href=\"https://tech.marksblogg.com/\" class=\"markup--anchor markup--li-anchor\">Mark’s Tech Blog</a></span></li>\n</ul>\n<h3>Linuxkit:</h3>\n<ul>\n<li><span id=\"22a7\"><a href=\"https://medium.com/aishik/getting-started-with-linuxkit-and-moby-project-ff7121c4e321\" class=\"markup--anchor markup--li-anchor\">Getting Started with Linuxkit</a></span></li>\n</ul>\n<h3>Logging Stacks</h3>\n<ul>\n<li><span id=\"bc7b\"><a href=\"https://github.com/shazChaudhry/docker-elastic\" class=\"markup--anchor markup--li-anchor\">shazChaudhry Swarm GELF Stack</a></span></li>\n</ul>\n<h3>Machine Learning:</h3>\n<ul>\n<li><span id=\"7892\"><a href=\"https://github.com/GokuMohandas/practicalAI/blob/master/README.md\" class=\"markup--anchor markup--li-anchor\">PracticalAI</a></span></li>\n</ul>\n<h3>Metrics:</h3>\n<ul>\n<li><span id=\"02a4\"><a href=\"https://github.com/avalente/appmetrics\" class=\"markup--anchor markup--li-anchor\">AppMetrics with Flask</a></span></li>\n<li><span id=\"f097\"><a href=\"https://github.com/Cue/scales\" class=\"markup--anchor markup--li-anchor\">Scales: Metrics for Python</a></span></li>\n<li><span id=\"1e03\"><a href=\"https://pypi.org/project/graphite-pymetrics/\" class=\"markup--anchor markup--li-anchor\">Graphite: Python Flask Metrics</a></span></li>\n</ul>\n<h3>MongoDB:</h3>\n<ul>\n<li><span id=\"a9f4\"><a href=\"https://linode.com/docs/databases/mongodb/build-database-clusters-with-mongodb/\" class=\"markup--anchor markup--li-anchor\">Setup MongoDB Cluster</a></span></li>\n<li><span id=\"8450\"><a href=\"https://github.com/AD7six/mongo-scripts\" class=\"markup--anchor markup--li-anchor\">MongoDB Scripts</a></span></li>\n<li><span id=\"31a1\"><a href=\"https://docs.mongodb.com/v2.4/administration/monitoring/#self-hosted-monitoring-tools\" class=\"markup--anchor markup--li-anchor\">MongoDB Monitoring Tools</a></span></li>\n<li><span id=\"6864\"><a href=\"https://studio3t.com/knowledge-base/articles/mongodb-users-roles-explained-part-1/\" class=\"markup--anchor markup--li-anchor\">Roles with MongoDB</a></span></li>\n<li><span id=\"b14c\"><a href=\"https://www.guru99.com/mongodb-tutorials.html\" class=\"markup--anchor markup--li-anchor\">Queries: Guru99</a></span></li>\n<li><span id=\"5531\"><a href=\"https://blog.exploratory.io/an-introduction-to-mongodb-query-for-beginners-bd463319aa4c\" class=\"markup--anchor markup--li-anchor\">Queries: Exploratory</a></span></li>\n<li><span id=\"ea6e\"><a href=\"https://www.tutorialspoint.com/mongodb/mongodb_create_database.htm\" class=\"markup--anchor markup--li-anchor\">Queries: Tutorialspoint</a></span></li>\n<li><span id=\"3fb5\"><a href=\"https://gist.github.com/rbekker87/5b4cd9ef36b6ae092a6260ab9e621a43\" class=\"markup--anchor markup--li-anchor\">Queries: MongoDB Cheatsheet</a></span></li>\n</ul>\n<h3>Monitoring</h3>\n<ul>\n<li><span id=\"49fb\"><a href=\"https://hackernoon.com/monitor-swarm-cluster-with-tick-stack-slack-3aaa6483d44a\" class=\"markup--anchor markup--li-anchor\">Docker Swarm Monitoring Stack: Telegraf, InfluxDB, Chronograf, Kapacitor</a> <a href=\"https://github.com/mlabouardy/swarm-tick\" class=\"markup--anchor markup--li-anchor\">github source</a></span></li>\n<li><span id=\"7f00\"><a href=\"https://stefanprodan.com/2017/docker-swarm-instrumentation-with-prometheus/\" class=\"markup--anchor markup--li-anchor\">Docker Swarm Monitoring Stack: Prometheus, Grafana, cAdvisor, Node Exporter</a> <a href=\"https://github.com/stefanprodan/swarmprom\" class=\"markup--anchor markup--li-anchor\">github source</a></span></li>\n<li><span id=\"be31\"><a href=\"https://finestructure.co/blog/2016/5/16/monitoring-with-prometheus-grafana-docker-part-1\" class=\"markup--anchor markup--li-anchor\">Prometheus Grafana Docker</a></span></li>\n<li><span id=\"dc44\"><a href=\"https://pierrevincent.github.io/2017/12/prometheus-blog-series-part-1-metrics-and-labels/\" class=\"markup--anchor markup--li-anchor\">Prometheus Blog Seros</a></span></li>\n<li><span id=\"eb7c\"><a href=\"https://blog.serverdensity.com/monitor-memcached/\" class=\"markup--anchor markup--li-anchor\">Memcached Monitoring</a></span></li>\n<li><span id=\"eb53\"><a href=\"https://raymii.org/s/tutorials/Nagios_Core_4_Installation_on_Ubuntu_12.04.html\" class=\"markup--anchor markup--li-anchor\">Nagios with Nagios Graph</a></span></li>\n<li><span id=\"aaa6\"><a href=\"https://medium.com/quiq-blog/better-slack-alerts-from-prometheus-49125c8c672b\" class=\"markup--anchor markup--li-anchor\">Slack Alerts with Prometheus</a></span></li>\n<li><span id=\"6035\"><a href=\"https://github.com/deanwilson/docker-compose-prometheus\" class=\"markup--anchor markup--li-anchor\">Local Prometheus Stack</a></span></li>\n<li><span id=\"9144\"><a href=\"https://github.com/chmod666org/docker-swarm-prometheus\" class=\"markup--anchor markup--li-anchor\">Docker Swarm Promethus Setup #1</a></span></li>\n<li><span id=\"58e5\"><a href=\"https://chmod666.org/2017/08/monitoring-a-docker-swarm-cluster-with-prometheus\" class=\"markup--anchor markup--li-anchor\">Docker Swarm Prometheus Setup #1: Blog</a></span></li>\n<li><span id=\"dfae\"><a href=\"https://homelab.business/docker-swarm-monitoring-part-01/\" class=\"markup--anchor markup--li-anchor\">Docker Swarm Promethus Setup #2</a></span></li>\n<li><span id=\"3810\"><a href=\"https://medium.com/the-telegraph-engineering/how-prometheus-and-the-blackbox-exporter-makes-monitoring-microservice-endpoints-easy-and-free-of-a986078912ee\" class=\"markup--anchor markup--li-anchor\">Docker Swarm Promethus Setup #3 (Blackbox)</a></span></li>\n<li><span id=\"945a\"><a href=\"https://github.com/fzaninotto/uptime\" class=\"markup--anchor markup--li-anchor\">Uptime (fzaninotto)</a></span></li>\n</ul>\n<h3>Monitoring and Alerting</h3>\n<ul>\n<li><span id=\"dccc\"><a href=\"https://github.com/arachnys/cabot\" class=\"markup--anchor markup--li-anchor\">Cabot (Lightweight Pagerduty)</a></span></li>\n<li><span id=\"4e80\"><a href=\"https://www.nagios.org/\" class=\"markup--anchor markup--li-anchor\">Nagios</a></span></li>\n</ul>\n<h3>Monitoring as Statuspages</h3>\n<ul>\n<li><span id=\"d496\"><a href=\"https://github.com/darkpixel/statuspage\" class=\"markup--anchor markup--li-anchor\">Statuspage (darkpixel</a></span></li>\n<li><span id=\"7997\"><a href=\"https://github.com/cachethq/Cachet\" class=\"markup--anchor markup--li-anchor\">Cachet</a></span></li>\n</ul>\n<h3>Programming</h3>\n<h4>Golang:</h4>\n<ul>\n<li><span id=\"f63d\"><a href=\"http://golangtutorials.blogspot.co.za/2011/05/table-of-contents.html\" class=\"markup--anchor markup--li-anchor\">Golang Tutorials</a></span></li>\n<li><span id=\"a233\"><a href=\"https://github.com/golang/go/wiki\" class=\"markup--anchor markup--li-anchor\">Golang Wiki</a></span></li>\n</ul>\n<h4>Java:</h4>\n<ul>\n<li><span id=\"aba9\"><a href=\"https://wiki.ruanbekker.com/index.php/Java_Spring_Boot_App_Examples\" class=\"markup--anchor markup--li-anchor\">Java Spring Boot Examples</a></span></li>\n</ul>\n<h4>Python</h4>\n<h4>Ruby:</h4>\n<ul>\n<li><span id=\"935a\"><a href=\"https://learnrubythehardway.org/book\" class=\"markup--anchor markup--li-anchor\">Learn Ruby: Learn Ruby the Hard Way</a></span></li>\n<li><span id=\"d022\"><a href=\"http://ruby-for-beginners.rubymonstas.org/index.html\" class=\"markup--anchor markup--li-anchor\">Learn Ruby: Ruby for Beginners</a></span></li>\n<li><span id=\"9ff8\"><a href=\"https://launchschool.com/books/ruby/read/loops_iterators#forloops\" class=\"markup--anchor markup--li-anchor\">Learn Ruby: Launch School</a></span></li>\n<li><span id=\"bda7\"><a href=\"https://gistpages.com/posts/ruby_arrays_insert_append_length_index_remove\" class=\"markup--anchor markup--li-anchor\">Learn Ruby: Arrays</a></span></li>\n<li><span id=\"bb79\"><a href=\"https://gorails.com/setup/osx/10.12-sierra\" class=\"markup--anchor markup--li-anchor\">Install Ruby Environment on Mac</a></span></li>\n</ul>\n<h4>Ruby on Rails:</h4>\n<ul>\n<li><span id=\"473f\"><a href=\"https://www.railstutorial.org/book/beginning\" class=\"markup--anchor markup--li-anchor\">Tutorial: Ruby On Rails</a></span></li>\n<li><span id=\"2639\"><a href=\"http://codingnudge.com/2017/03/17/tutorial-how-to-run-ruby-on-rails-on-docker-part-1/\" class=\"markup--anchor markup--li-anchor\">Tutorial: ROR on Docker</a></span></li>\n</ul>\n<h3>Queues</h3>\n<ul>\n<li><span id=\"2d48\"><a href=\"https://github.com/roribio/alpine-sqs\" class=\"markup--anchor markup--li-anchor\">Alpine SQS</a></span></li>\n<li><span id=\"30f2\"><a href=\"https://github.com/celery/kombu\" class=\"markup--anchor markup--li-anchor\">Kombu: Messaging library for Python</a></span></li>\n<li><span id=\"da56\"><a href=\"https://python-rq.org/\" class=\"markup--anchor markup--li-anchor\">Python Job Queues with Redis</a></span></li>\n</ul>\n<h3>Sysadmin References:</h3>\n<ul>\n<li><span id=\"2ead\"><a href=\"https://gist.github.com/ruanbekker/3118ed23c25451132becacd3b974db08\" class=\"markup--anchor markup--li-anchor\">Sysadmin Command References</a></span></li>\n<li><span id=\"69c9\"><a href=\"https://medium.com/@chrishantha/linux-performance-observability-tools-19ae2328f87f\" class=\"markup--anchor markup--li-anchor\">Linux Performance Observability Tools</a></span></li>\n<li><span id=\"0009\"><a href=\"http://bencane.com/2012/08/06/troubleshooting-high-io-wait-in-linux/\" class=\"markup--anchor markup--li-anchor\">Troubleshooting High IO Wait</a></span></li>\n<li><span id=\"aef7\"><a href=\"https://blog.pythian.com/basic-io-monitoring-on-linux/\" class=\"markup--anchor markup--li-anchor\">IO Monitoring in Linux</a></span></li>\n<li><span id=\"5716\"><a href=\"http://xiayubin.com/blog/2014/01/29/how-i-use-iostat-and-vmstat-for-performance-analysis/\" class=\"markup--anchor markup--li-anchor\">IOStat and VMStat for Performance Monitoring</a></span></li>\n<li><span id=\"e5bf\"><a href=\"https://www.tummy.com/articles/isolating-heavy-load/\" class=\"markup--anchor markup--li-anchor\">Debugging Heavy Load</a></span></li>\n</ul>\n<h3>Self Hosting</h3>\n<h4>Email Server Setups</h4>\n<ul>\n<li><span id=\"8cd4\"><a href=\"https://www.exratione.com/2016/05/a-mailserver-on-ubuntu-16-04-postfix-dovecot-mysql/\" class=\"markup--anchor markup--li-anchor\">Extratione: Postfix Dovecot MySQL Virtual Users Postfixadmin</a></span></li>\n<li><span id=\"4409\"><a href=\"https://www.exratione.com/2019/02/a-mailserver-on-ubuntu-18-04-postfix-dovecot-mysql/\" class=\"markup--anchor markup--li-anchor\">Extratione: Postfix Dovecot MySQL Virtual Users Postfixadmin (Ubuntu 18)</a></span></li>\n<li><span id=\"bd51\"><a href=\"https://linuxize.com/post/set-up-an-email-server-with-postfixadmin/\" class=\"markup--anchor markup--li-anchor\">Linuxsize: Postfix Dovecot MySQL Virtual Users Postfixadmin</a></span></li>\n<li><span id=\"aa71\"><a href=\"https://www.howtoforge.com/postfix_mysql_dovecot_dspam_clamav_postgrey_rbl_debian_etch\" class=\"markup--anchor markup--li-anchor\">Howtoforge: Postfix, MySQL, Dovecto, Dspam</a></span></li>\n<li><span id=\"35d1\"><a href=\"https://linuxize.com/post/set-up-an-email-server-with-postfixadmin/\" class=\"markup--anchor markup--li-anchor\">Linuxsize: VirtualUsers, MySQL, Postfix, Dovecot</a></span></li>\n</ul>\n<h4>Mailscanner Server Setups</h4>\n<ul>\n<li><span id=\"8498\"><a href=\"https://syslint.com/blog/tutorial/how-to-install-and-configure-spamassassin-with-postfix-in-debian-8/\" class=\"markup--anchor markup--li-anchor\">Spamassassin with Debian 8</a></span></li>\n</ul>\n<h4>Financial</h4>\n<ul>\n<li><span id=\"0ba4\"><a href=\"https://github.com/firefly-iii/firefly-iii\" class=\"markup--anchor markup--li-anchor\">SelfHosted Firefly</a></span></li>\n</ul>\n<h4>Self Hosting Frameworks:</h4>\n<ul>\n<li><span id=\"0c97\"><a href=\"https://sandstorm.io/\" class=\"markup--anchor markup--li-anchor\">Sandstorm</a></span></li>\n</ul>\n<h3>Serverless</h3>\n<ul>\n<li><span id=\"0baf\"><a href=\"https://github.com/Miserlou/Zappa\" class=\"markup--anchor markup--li-anchor\">Serverless Zappa</a></span></li>\n<li><span id=\"eb32\"><a href=\"https://github.com/faizanbashir/python-ses-dynamodb-contactform\" class=\"markup--anchor markup--li-anchor\">Serverless Contact Form</a></span></li>\n<li><span id=\"67dc\"><a href=\"https://github.com/danilop/LambdAuth\" class=\"markup--anchor markup--li-anchor\">Serverless Authentication on AWS (danilop)</a></span></li>\n</ul>\n<h3>VPN:</h3>\n<h4>VPN-Howto:</h4>\n<ul>\n<li><span id=\"d7dc\"><a href=\"https://www.cyberciti.biz/faq/howto-setup-openvpn-server-on-ubuntu-linux-14-04-or-16-04-lts/\" class=\"markup--anchor markup--li-anchor\">Ubuntu OpenVPN Script</a></span></li>\n<li><span id=\"2198\"><a href=\"https://github.com/hwdsl2/setup-ipsec-vpn\" class=\"markup--anchor markup--li-anchor\">Ubuntu IPSec Script</a></span></li>\n<li><span id=\"7fec\"><a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-an-openvpn-server-on-ubuntu-16-04\" class=\"markup--anchor markup--li-anchor\">DO — Setup OpenVPN on Ubuntu</a></span></li>\n<li><span id=\"bbff\"><a href=\"https://www.elastichosts.com/blog/linux-l2tpipsec-vpn-client/\" class=\"markup--anchor markup--li-anchor\">Elasticshosts — IPSec VPN</a></span></li>\n<li><span id=\"43f7\"><a href=\"https://github.com/bedefaced/vpn-install\" class=\"markup--anchor markup--li-anchor\">PPTP/IPSec/OpenVPN Auto Install</a></span></li>\n</ul>\n<h3>Website Templates</h3>\n<h4>Resume Templates</h4>\n<ul>\n<li><span id=\"7f29\"><a href=\"https://github.com/johnmarcampbell/resume-site\" class=\"markup--anchor markup--li-anchor\">johnmarcampbell resume-site</a></span></li>\n</ul>\n<h3>Web Frameworks</h3>\n<h4>Python Flask:</h4>\n<ul>\n<li><span id=\"a98a\"><a href=\"https://gist.github.com/dAnjou/2874714\" class=\"markup--anchor markup--li-anchor\">Python Flask Upload Example</a></span></li>\n<li><span id=\"2c23\"><a href=\"https://github.com/humiaozuzu/awesome-flask#awesome-flask\" class=\"markup--anchor markup--li-anchor\">Awesome Flask — humiaozuzu</a></span></li>\n<li><span id=\"b710\"><a href=\"https://github.com/greyli?tab=repositories\" class=\"markup--anchor markup--li-anchor\">Awesome Flask Apps — Greyli</a></span></li>\n<li><span id=\"f396\"><a href=\"https://blog.miguelgrinberg.com/post/running-your-flask-application-over-https\" class=\"markup--anchor markup--li-anchor\">Flask over HTTPS (MG)</a></span></li>\n<li><span id=\"9d33\"><a href=\"https://speakerdeck.com/mitsuhiko/advanced-flask-patterns-1\" class=\"markup--anchor markup--li-anchor\">Flask Advanced Patterns</a></span></li>\n<li><span id=\"adf1\"><a href=\"https://github.com/tojrobinson/flask-mvc\" class=\"markup--anchor markup--li-anchor\">Flask MVC Boilerplate</a></span></li>\n</ul>\n<h3>If you found this guide helpful feel free to checkout my GitHub/gists where I host similar content:</h3>\n<p><a href=\"https://gist.github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://gist.github.com/bgoonz\"><strong>bgoonz’s gists</strong><br />\n<em>Instantly share code, notes, and snippets. Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python |…</em>gist.github.com</a><a href=\"https://gist.github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\"><strong>bgoonz — Overview</strong><br />\n<em>Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize…</em>github.com</a><a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<h3>Ada</h3>\n<ul>\n<li><a href=\"https://learn.adacore.com/courses/intro-to-ada/index.html\">Introduction to Ada</a></li>\n</ul>\n<h3>Android</h3>\n<ul>\n<li><a href=\"https://www.tutlane.com/tutorial/android\">Android Tutorial</a> - tutlane</li>\n<li><a href=\"https://www.javatpoint.com/android-tutorial\">Javatpoint Android Tutorial</a></li>\n</ul>\n<h3>Bash</h3>\n<ul>\n<li><a href=\"https://explainshell.com\">Help messages will explain everything</a></li>\n<li><a href=\"http://www.learnshell.org\">Learn Shell Programming</a></li>\n</ul>\n<h3>C</h3>\n<ul>\n<li><a href=\"http://www.learn-c.org\">Learn C</a></li>\n</ul>\n<h3>C Sharp</h3>\n<ul>\n<li><a href=\"https://www.tutlane.com/tutorial/csharp\">C# Tutorial</a> - tutlane</li>\n<li><a href=\"https://www.w3schools.com/cs\">C# Tutorial</a> - W3Schools</li>\n<li><a href=\"https://codeasy.net/course/csharp_elementary\">Codeasy</a></li>\n<li><a href=\"http://www.learncs.org\">Learn C#</a></li>\n<li><a href=\"https://www.codecademy.com/learn/learn-c-sharp\">Learn C#</a> - Codecademy</li>\n</ul>\n<h3 id=\"cpp\">C++</h3>\n<ul>\n<li><a href=\"https://www.w3schools.com/cpp\">C++ Tutorial</a> - W3Schools</li>\n<li><a href=\"https://github.com/torbjoernk/CppKoans\">CppKoans</a></li>\n</ul>\n<h3>Clojure</h3>\n<ul>\n<li><a href=\"http://www.4clojure.com\">4Clojure - Koans</a></li>\n<li><a href=\"http://clojurekoans.com\">Clojure Koans</a></li>\n<li><a href=\"http://clojurescriptkoans.com\">ClojureScript Koans</a></li>\n<li><a href=\"http://www.tryclj.com\">Try Clojure</a></li>\n</ul>\n<h3>Cloud Computing</h3>\n<ul>\n<li><a href=\"https://run.qwiklabs.com/focuses/269?catalog_rank=%7B%22rank%22%3A3%2C%22num_filters%22%3A1%2C%22has_search%22%3Atrue%7D&#x26;parent=catalog&#x26;search_id=3605949\">AWS API Gateway</a> - <em>registration required</em></li>\n<li><a href=\"https://run.qwiklabs.com/focuses/7782?catalog_rank=%7B%22rank%22%3A6%2C%22num_filters%22%3A1%2C%22has_search%22%3Atrue%7D&#x26;parent=catalog&#x26;search_id=3605942\">AWS Identity and Access Management (IAM)</a> - <em>registration required</em></li>\n<li><a href=\"https://run.qwiklabs.com/focuses/6431?catalog_rank=%7B%22rank%22%3A2%2C%22num_filters%22%3A1%2C%22has_search%22%3Atrue%7D&#x26;parent=catalog&#x26;search_id=3605949\">AWS Lambda</a> - <em>registration required</em></li>\n<li><a href=\"https://run.qwiklabs.com/focuses/7860?catalog_rank=%7B%22rank%22%3A3%2C%22num_filters%22%3A0%2C%22has_search%22%3Atrue%7D&#x26;parent=catalog&#x26;search_id=3597563\">AWS Simple Storage Service (S3)</a> - <em>registration required</em></li>\n<li><a href=\"https://cloud.google.com/training/free-labs/\">Google Cloud Platform</a></li>\n</ul>\n<h3>CoffeeScript</h3>\n<ul>\n<li><a href=\"https://github.com/polarmobile/coffeescript-style-guide/blob/master/README.md\">Coffeescript Style Guide</a></li>\n<li><a href=\"http://autotelicum.github.io/Smooth-CoffeeScript/interactive/interactive-coffeescript.html\">Smooth CoffeeScript, Interactive Edition</a></li>\n</ul>\n<h3>Dart</h3>\n<ul>\n<li><a href=\"https://dart.dev/codelabs\">Dart Official Codelabs</a></li>\n</ul>\n<h3>Erlang</h3>\n<ul>\n<li><a href=\"http://www.tryerlang.org\">Try Erlang</a></li>\n</ul>\n<h3>Git</h3>\n<ul>\n<li><a href=\"https://github.com/git-game/git-game\">git-game</a></li>\n<li><a href=\"https://github.com/git-game/git-game-v2\">git-game-v2</a></li>\n<li><a href=\"https://github.com/Gazler/githug\">Githug</a> (Tutorial in shell)</li>\n<li><a href=\"https://learngitbranching.js.org\">Learn Git Branching</a></li>\n<li><a href=\"https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud\">Learn Git with Bitbucket Cloud</a></li>\n<li><a href=\"http://try.github.io\">Try Git</a></li>\n</ul>\n<h3>GLSL</h3>\n<ul>\n<li><a href=\"https://thebookofshaders.com\">The Book of Shaders</a></li>\n</ul>\n<h3>Go</h3>\n<ul>\n<li><a href=\"https://github.com/cdarwin/go-koans\">Go Koans</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/learn/paths/go-first-steps/\">Start using Go</a> - Microsoft</li>\n<li><a href=\"http://tour.golang.org\">The Go Tutorial</a></li>\n</ul>\n<h3>Haskell</h3>\n<ul>\n<li><a href=\"http://tryhaskell.org\">Try Haskell!</a></li>\n</ul>\n<h3>HTML / CSS</h3>\n<ul>\n<li><a href=\"http://flukeout.github.io\">CSS Diner</a></li>\n<li><a href=\"https://www.w3schools.com/css/\">CSS Tutorial</a> - W3Schools</li>\n<li><a href=\"https://codingfantasy.com/games/flexboxadventure\">Flex Box Adventure</a> - Nick Bull</li>\n<li><a href=\"http://flexboxdefense.com\">Flexbox Defense</a></li>\n<li><a href=\"http://flexboxfroggy.com\">Flexbox Froggy</a></li>\n<li><a href=\"https://www.freecodecamp.org/learn/responsive-web-design/basic-html-and-html5/\">FreeCodeCamp: Responsive Web Design Course</a></li>\n<li><a href=\"https://codingfantasy.com/games/css-grid-attack\">Grid Attack</a> - Nick Bull</li>\n<li><a href=\"https://cssgridgarden.com\">Grid Garden</a></li>\n<li><a href=\"https://www.w3schools.com/html/\">HTML Tutorial</a> - W3Schools</li>\n<li><a href=\"https://knightsoftheflexboxtable.com\">Knights of the Flexbox Table</a></li>\n<li><a href=\"https://dash.generalassemb.ly\">Learn by doing beginner projects</a></li>\n<li><a href=\"https://www.codecademy.com/learn/web\">Learn HTML &#x26; CSS interactively</a></li>\n<li><a href=\"https://www.codecademy.com/learn/make-a-website\">Prototyping a professional website</a></li>\n</ul>\n<h4>Bootstrap</h4>\n<ul>\n<li><a href=\"https://www.tutlane.com/tutorial/bootstrap\">Bootstrap Tutorial</a> - tutlane</li>\n<li><a href=\"https://www.freecodecamp.org/learn/front-end-libraries/bootstrap\">Front End Libraries: Bootstrap</a></li>\n</ul>\n<h3>Java</h3>\n<ul>\n<li><a href=\"http://codingbat.com/java\">CodingBat code practice</a></li>\n<li><a href=\"https://www.codecademy.com/courses/learn-java\">Java at Codecademy</a></li>\n<li><a href=\"https://www.w3schools.com/java\">Java Tutorial</a> - W3Schools</li>\n<li><a href=\"http://www.learnjavaonline.org\">Learn Java</a></li>\n<li><a href=\"https://www.learneroo.com/modules/11\">Learneroo Java tutorial</a></li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li><a href=\"http://www.openjs.com/tutorials/basic_tutorial/\">ABC of JavaScript : An Interactive JavaScript Tutorial</a></li>\n<li><a href=\"https://www.codecademy.com/learn/jquery\">Codecademy jquery track</a></li>\n<li><a href=\"http://stack.formidable.com/es6-interactive-guide/#/\">ES6 Interactive Guide</a></li>\n<li><a href=\"https://github.com/ReactiveX/learnrx\">Functional Programming in Javascript</a></li>\n<li><a href=\"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript\">JavaScript Algorithms and Data Structures Certification</a></li>\n<li><a href=\"https://www.codecademy.com/learn/javascript\">Javascript interactive tutorial on CodeCademy</a></li>\n<li><a href=\"http://www.codermania.com/javascript/lesson/1a/hello-world\">JavaScript interactive tutorial on CoderMania</a></li>\n<li><a href=\"https://www.w3schools.com/js\">JavaScript Tutorial</a> - W3Schools</li>\n<li><a href=\"https://github.com/sethvincent/javascripting\">Javascripting</a></li>\n<li><a href=\"http://www.learn-js.org\">Learn JavaScript</a></li>\n<li><a href=\"http://learn.knockoutjs.com\">Learn knockout.js</a></li>\n<li><a href=\"https://grasshopper.app\">Learn to Code for Free – Grasshopper</a></li>\n<li><a href=\"http://ejohn.org/apps/learn/\">Learning Advanced JavaScript</a></li>\n<li><a href=\"http://try.jquery.com\">Try jQuery</a></li>\n</ul>\n<h4>Angular.js</h4>\n<ul>\n<li><a href=\"http://www.angularjsbook.com\">Angular Basics</a></li>\n<li><a href=\"https://www.w3schools.com/angular/\">Angular Tutorial</a> - W3Schools</li>\n<li><a href=\"http://nicholasjohnson.com/angular-book/\">AngularJS - Step by Logical Step</a></li>\n<li><a href=\"https://www.tutlane.com/tutorial/angularjs\">AngularJS Tutorial</a> - tutlane</li>\n<li><a href=\"https://egghead.io\">egghead.io: Learn AngularJS with Tutorial Videos &#x26; Training</a></li>\n<li><a href=\"http://www.learn-angular.org\">Learn AngularJS with free interactive lessons</a></li>\n</ul>\n<h4>jQuery</h4>\n<ul>\n<li><a href=\"https://www.freecodecamp.org/learn/front-end-libraries/jquery\">Front End Libraries: jQuery</a></li>\n</ul>\n<h4>React</h4>\n<ul>\n<li><a href=\"https://www.freecodecamp.org/learn/front-end-libraries/react\">Front End Libraries: React</a></li>\n<li><a href=\"https://react-tutorial.app\">React Tutorial</a></li>\n</ul>\n<h3>Kotlin</h3>\n<ul>\n<li><a href=\"https://kotlinlang.org/docs/tutorials/\">Kotlin tutorial</a></li>\n</ul>\n<h3>Language Agnostic</h3>\n<ul>\n<li><a href=\"http://codecombat.com\">CodeCombat</a> - Python, JavaScript, CoffeeScript, Clojure, Lua, Io</li>\n<li><a href=\"https://codility.com/programmers/\">Codility</a></li>\n<li><a href=\"https://www.freecodecamp.org/learn/coding-interview-prep/algorithms\">Introduction to the Coding Interview Prep Algorithms</a> (freeCodeCamp)</li>\n<li><a href=\"http://pythontutor.com\">Python Tutor</a> - Python, Java, JavaScript, TypeScript, Ruby, C, C++</li>\n<li><a href=\"https://www.howtographql.com\">The Fullstack Tutorial for GraphQL</a></li>\n</ul>\n<h4>Operating systems</h4>\n<ul>\n<li><a href=\"https://github.com/s-matyukevich/raspberry-pi-os\">Learning operating system development using Linux kernel and Raspberry Pi</a> - Sergey Matyukevich (:construction: <em>in process</em>)</li>\n</ul>\n<h3>LaTeX</h3>\n<ul>\n<li><a href=\"https://www.overleaf.com/learn/latex/Learn_LaTeX_in_30_minutes\">Learn LaTeX in 30 minutes</a></li>\n</ul>\n<h3>Lisp</h3>\n<ul>\n<li><a href=\"https://github.com/google/lisp-koans\">Lisp Koans</a></li>\n</ul>\n<h3>MATLAB</h3>\n<ul>\n<li><a href=\"http://www.mathworks.com/tutorials\">Interactive Tutorials for MATLAB, Simulink, Signal Processing, Controls, and Computational Mathematics</a></li>\n</ul>\n<h3>Node</h3>\n<ul>\n<li><a href=\"http://nodeschool.io\">Node School</a></li>\n<li><a href=\"https://www.tutlane.com/tutorial/nodejs\">Node.js Tutorial</a> - tutlane</li>\n<li><a href=\"https://www.w3schools.com/nodejs\">Node.js Tutorial</a> - W3Schools</li>\n</ul>\n<h3>NoSQL</h3>\n<ul>\n<li><a href=\"https://github.com/chicagoruby/MongoDB_Koans\">MongoDB Koans</a></li>\n<li><a href=\"http://try.redis.io\">Try Redis</a></li>\n</ul>\n<h3>Objective-C</h3>\n<ul>\n<li><a href=\"http://tryobjectivec.codeschool.com\">Try Objective-C</a></li>\n</ul>\n<h3>Ocaml</h3>\n<ul>\n<li><a href=\"http://try.ocamlpro.com\">Try Ocaml</a></li>\n</ul>\n<h3>PHP</h3>\n<ul>\n<li><a href=\"https://www.codecademy.com/learn/php\">CodeCademy PHP</a></li>\n<li><a href=\"http://www.learn-php.org\">Learn PHP</a></li>\n<li><a href=\"https://www.w3schools.com/php\">PHP tutorial</a> - W3Schools</li>\n</ul>\n<h3>PostgreSQL</h3>\n<ul>\n<li><a href=\"https://www.postgresqltutorial.com\">PostgreSQL Tutorial</a></li>\n</ul>\n<h3>Python</h3>\n<ul>\n<li><a href=\"https://www.codecademy.com/learn/python\">Codecademy Python course</a></li>\n<li><a href=\"http://interactivepython.org/courselib/static/thinkcspy/index.html\">How to Think Like a Computer Scientist: Learning with Python, Interactive Edition</a></li>\n<li><a href=\"http://www.learnpython.org\">Learn Python</a></li>\n<li><a href=\"http://www.techbeamers.com/python-tutorial-step-by-step\">Learn Python Step by Step</a></li>\n<li><a href=\"https://runestone.academy/runestone/books/published/py4e-int/index.html\">Python for Everybody - Interactive</a> - Barbara Ericson</li>\n<li><a href=\"https://github.com/gregmalcolm/python_koans\">Python Koans</a></li>\n<li><a href=\"https://www.learndatasci.com/tutorials/python-pandas-tutorial-complete-introduction-for-beginners/\">Python Pandas Tutorial: A Complete Introduction for Beginners</a> - George McIntire, Brendan Martin, Lauren Washington</li>\n<li><a href=\"https://www.geeksforgeeks.org/python-programming-language/\">Python Programming Language</a> - GeeksforGeeks</li>\n<li><a href=\"https://www.tutlane.com/tutorial/python\">Python Tutorial</a> - tutlane</li>\n<li><a href=\"https://www.w3schools.com/python\">Python Tutorial</a> - W3Schools</li>\n</ul>\n<h3>Ruby</h3>\n<ul>\n<li><a href=\"https://www.codecademy.com/learn/ruby\">CodeCademy Ruby</a></li>\n<li><a href=\"http://www.rubykoans.com\">Ruby Koans</a></li>\n<li><a href=\"http://www.theodinproject.com\">The Odin Project</a></li>\n<li><a href=\"http://tryruby.org\">Try Ruby</a></li>\n</ul>\n<h3>Rust</h3>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rustlings\">Rustlings</a></li>\n</ul>\n<h3>Scala</h3>\n<ul>\n<li><a href=\"https://scalatutorials.com/tour/\">A Tour of Scala - an interactive scala tutorial</a></li>\n<li><a href=\"https://www.scala-exercises.org\">Scala Exercises</a></li>\n</ul>\n<h3>Selenium</h3>\n<ul>\n<li><a href=\"http://www.techbeamers.com/selenium-webdriver-tutorial\">Selenium Tutorial - Web Automation</a></li>\n</ul>\n<h3>SQL</h3>\n<ul>\n<li><a href=\"https://www.khanacademy.org/computing/computer-programming/sql\">Intro to SQL: Querying and managing data</a> - Khan Academy</li>\n<li><a href=\"https://www.codecademy.com/courses/learn-sql\">SQL at Codecademy</a></li>\n<li><a href=\"https://www.tutlane.com/tutorial/sql-server\">SQL Server Tutorial</a> - tutlane</li>\n<li><a href=\"https://www.w3schools.com/sql\">SQL Tutorial</a> - W3Schools</li>\n<li><a href=\"http://sqlbolt.com\">SQLBolt</a></li>\n</ul>\n<h3>Vim</h3>\n<ul>\n<li><a href=\"http://www.openvim.com/tutorial.html\">Interactive Vim Tutorial</a></li>\n</ul>"},{"url":"/docs/quick-reference/vscode/","relativePath":"docs/quick-reference/vscode.md","relativeDir":"docs/quick-reference","base":"vscode.md","name":"vscode","frontmatter":{"title":"vscode","weight":2,"seo":{"title":"vscode","description":"This is the vscode page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"vscode","keyName":"property"},{"name":"og:description","value":"This is the vscode page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"vscode"},{"name":"twitter:description","value":"This is the vscode page"}]},"template":"docs"},"html":"<h1>Everything You Need to Get Started With VSCode + Extensions &#x26; Resources</h1>\n<p>Commands:</p>\n<hr>\n<h3>Everything You Need to Get Started With VSCode + Extensions &#x26; Resources</h3>\n<h4>Every extension or tool you could possibly need</h4>\n<figure><img src=\"https://cdn-images-1.medium.com/max/1200/1*gcp0kkiWQY6qd1Y4qEcqxw.png\" class=\"graf-image\" /></figure>\n<h3>Here’s a rudimentary static site I made that goes into more detail on the extensions I use…</h3>\n<p><a href=\"https://5fff5b9a2430bb564bfd451d--stoic-mccarthy-2c335f.netlify.app/#h18\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://5fff5b9a2430bb564bfd451d--stoic-mccarthy-2c335f.netlify.app/#h18\"><strong>VSCodeExtensions</strong><br />\n5fff5b9a2430bb564bfd451d--stoic-mccarthy-2c335f.netlify.app</a><a href=\"https://5fff5b9a2430bb564bfd451d--stoic-mccarthy-2c335f.netlify.app/#h18\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<h3>Here’s the repo it was deployed from:</h3>\n<p><a href=\"https://github.com/bgoonz/vscode-Extension-readmes\" class=\"markup--anchor markup--p-anchor\">https://github.com/bgoonz/vscode-Extension-readmes</a></p>\n<hr>\n<h3>Commands:</h3>\n<blockquote>\n<p>Command Palette</p>\n</blockquote>\n<blockquote>\n<p>Access all available commands based on your current context.</p>\n</blockquote>\n<blockquote>\n<p>Keyboard Shortcut: <strong>Ctrl+Shift+P</strong></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*BByhnDoVQdRPdO4F.gif\" class=\"graf-image\" /></figure>### Command palette\n<p><code>⇧⌘P</code> Show all commands <code>⌘P</code> Show files</p>\n<h3>Sidebars</h3>\n<p><code>⌘B</code> Toggle sidebar <code>⇧⌘E</code> Explorer <code>⇧⌘F</code> Search <code>⇧⌘D</code> Debug <code>⇧⌘X</code> Extensions <code>⇧^G</code> Git (SCM)</p>\n<h3>Search</h3>\n<p><code>⌘F</code> Find <code>⌥⌘F</code> Replace <code>⇧⌘F</code> Find in files <code>⇧⌘H</code> Replace in files</p>\n<h3>Panel</h3>\n<p><code>⌘J</code> Toggle panel <code>⇧⌘M</code> Problems <code>⇧⌘U</code> Output <code>⇧⌘Y</code> Debug console<code></code> ^` <code></code>Terminal</p>\n<h3>View</h3>\n<p><code>⌘k</code> <code>z</code> Zen mode <code>⌘k</code> <code>u</code> Close unmodified <code>⌘k</code> <code>w</code> Close all</p>\n<h3>Debug</h3>\n<p><code>F5</code> Start <code>⇧F5</code> Stop <code>⇧⌘F5</code> Restart <code>^F5</code> Start without debugging <code>F9</code> Toggle breakpoint <code>F10</code> Step over <code>F11</code> Step into <code>⇧F11</code> Step out <code>⇧⌘D</code> Debug sidebar <code>⇧⌘Y</code> Debug panel</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/1200/0*llpkl5jsIMhWMucR.png\" class=\"graf-image\" /></figure>\n<hr>\n<h3>Tips-N-Tricks:</h3>\n<p>Here is a selection of common features for editing code. If the keyboard shortcuts aren’t comfortable for you, consider installing a <a href=\"https://marketplace.visualstudio.com/search?target=VSCode&amp;category=Keymaps&amp;sortBy=Downloads\" class=\"markup--anchor markup--p-anchor\">keymap extension</a> for your old editor.</p>\n<p>Tip: You can see recommended keymap extensions in the Extensions view with Ctrl+K Ctrl+M which filters the search to <code>@recommended:keymaps</code> .</p>\n<h3>Multi cursor selection</h3>\n<p>To add cursors at arbitrary positions, select a position with your mouse and use Alt+Click (Option+click on macOS).</p>\n<p>To set cursors above or below the current position use:</p>\n<p>Keyboard Shortcut: Ctrl+Alt+Up or Ctrl+Alt+Down</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Le_oEOiYnEBmFfig.gif\" class=\"graf-image\" /></figure>You can add additional cursors to all occurrences of the current selection with Ctrl+Shift+L.\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*WcrfwIln6NIG3zNW.gif\" class=\"graf-image\" /></figure>*Note: You can also change the modifier to Ctrl/Cmd for applying multiple cursors with the* `editor.multiCursorModifier` <a href=\"https://code.visualstudio.com/docs/getstarted/settings\" class=\"markup--anchor markup--blockquote-anchor\"><em>setting</em></a>* . See* <a href=\"https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier\" class=\"markup--anchor markup--blockquote-anchor\"><em>Multi-cursor Modifier</em></a> *for details.*\n<p>If you do not want to add all occurrences of the current selection, you can use Ctrl+D instead. This only selects the next occurrence after the one you selected so you can add selections one by one.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*09EveaKtpZEKFEpO.gif\" class=\"graf-image\" /></figure>### Column (box) selection\n<p>You can select blocks of text by holding Shift+Alt (Shift+Option on macOS) while you drag your mouse. A separate cursor will be added to the end of each selected line.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*LrsOBXP4MVqr7aes.gif\" class=\"graf-image\" /></figure>You can also use <a href=\"https://code.visualstudio.com/docs/editor/codebasics#_column-box-selection\" class=\"markup--anchor markup--p-anchor\">keyboard shortcuts</a> to trigger column selection.\n<hr>\n<h3>Extensions:</h3>\n<h4><a href=\"https://marketplace.visualstudio.com/items?itemName=cweijan.vscode-autohotkey-plus\" class=\"markup--anchor markup--h4-anchor\">AutoHotkey Plus</a></h4>\n<blockquote>\n<p><em>Syntax Highlighting, Snippets, Go to Definition, Signature helper and Code formatter</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=rogalmic.bash-debug\" class=\"markup--anchor markup--h3-anchor\">Bash Debug</a></h3>\n<blockquote>\n<p><em>A debugger extension for Bash scripts based on</em> <code>bashdb</code></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*8j2gGGs0WHcuFIwY.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=Remisa.shellman\" class=\"markup--anchor markup--h3-anchor\">Shellman</a>\n<blockquote>\n<p><em>Bash script snippets extension</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*wyimtX27gWygAeOb.gif\" class=\"graf-image\" /></figure>### C++\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools\" class=\"markup--anchor markup--blockquote-anchor\">C/C++</a> — Preview C/C++ extension by <a href=\"https://www.microsoft.com/\" class=\"markup--anchor markup--blockquote-anchor\">Microsoft</a>, read <a href=\"https://blogs.msdn.microsoft.com/vcblog/2016/03/31/cc-extension-for-visual-studio-code/\" class=\"markup--anchor markup--blockquote-anchor\">official blog post</a> for the details</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=llvm-vs-code-extensions.vscode-clangd\" class=\"markup--anchor markup--blockquote-anchor\">Clangd</a> — Provides C/C++ language IDE features for VS Code using clangd: code completion, compile errors and warnings, go-to-definition and cross references, include management, code formatting, simple refactorings.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=austin.code-gnu-global\" class=\"markup--anchor markup--blockquote-anchor\">gnu-global-tags</a> — Provide Intellisense for C/C++ with the help of the GNU Global tool.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=RichardHe.you-complete-me\" class=\"markup--anchor markup--blockquote-anchor\">YouCompleteMe</a> — Provides semantic completions for C/C++ (and TypeScript, JavaScript, Objective-C, Golang, Rust) using <a href=\"http://ycm-core.github.io/YouCompleteMe/\" class=\"markup--anchor markup--blockquote-anchor\">YouCompleteMe</a>.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/mitaki28/vscode-clang\" class=\"markup--anchor markup--blockquote-anchor\">C/C++ Clang Command Adapter</a> — Completion and Diagnostic for C/C++/Objective-C using Clang command.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://github.com/cquery-project/vscode-cquery\" class=\"markup--anchor markup--blockquote-anchor\">CQuery</a> — <a href=\"https://github.com/jacobdufault/cquery\" class=\"markup--anchor markup--blockquote-anchor\">C/C++ language server</a> supporting multi-million line code base, powered by libclang. Cross references, completion, diagnostics, semantic highlighting and more.</p>\n</blockquote>\n<h4>More</h4>\n<ul>\n<li><span id=\"4dd9\"><a href=\"https://devblogs.microsoft.com/cppblog/vscode-cpp-may-2019-update/\" class=\"markup--anchor markup--li-anchor\">Microsoft’s tutorial on using VSCode for remote C/C++ development</a></span></li>\n</ul>\n<h3>C#, ASP . NET and . NET Core</h3>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp\" class=\"markup--anchor markup--blockquote-anchor\">C#</a> — C# extension by <a href=\"https://www.microsoft.com/\" class=\"markup--anchor markup--blockquote-anchor\">Microsoft</a>, read <a href=\"https://code.visualstudio.com/docs/languages/csharp\" class=\"markup--anchor markup--blockquote-anchor\">official documentation</a> for the details</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=Leopotam.csharpfixformat\" class=\"markup--anchor markup--blockquote-anchor\">C# FixFormat</a> — Fix format of usings / indents / braces / empty lines</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=jchannon.csharpextensions\" class=\"markup--anchor markup--blockquote-anchor\">C# Extensions</a> — Provides extensions to the IDE that will speed up your development workflow.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=tintoy.msbuild-project-tools\" class=\"markup--anchor markup--blockquote-anchor\">MSBuild Project Tools</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=fernandoescolar.vscode-solution-explorer\" class=\"markup--anchor markup--blockquote-anchor\">VSCode Solution Explorer</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.dotnet-test-explorer\" class=\"markup--anchor markup--blockquote-anchor\">. NET Core Test Explorer</a></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*ZG5W4_VVBv89zO_g.gif\" class=\"graf-image\" /></figure>\n<hr>\n<h3>CSS</h3>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek\" class=\"markup--anchor markup--h3-anchor\">CSS Peek</a></h3>\n<blockquote>\n<p><em>Peek or Jump to a CSS definition directly from HTML, just like in Brackets!</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*MN4pNqxDw4FyRk8g.gif\" class=\"graf-image\" /></figure>-   <span id=\"7261\"><a href=\"https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint\" class=\"markup--anchor markup--li-anchor\">stylelint</a> — Lint CSS/SCSS.</span>\n<ul>\n<li><span id=\"e8d5\"><a href=\"https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-autoprefixer\" class=\"markup--anchor markup--li-anchor\">Autoprefixer</a> Parse CSS, SCSS, LESS and add vendor prefixes automatically.</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*edXaUlo7z9TRDQnC.gif\" class=\"graf-image\" /></figure>-   <span id=\"b1b1\"><a href=\"https://marketplace.visualstudio.com/items?itemName=Zignd.html-css-class-completion\" class=\"markup--anchor markup--li-anchor\">Intellisense for CSS class names</a> — Provides CSS class name completion for the HTML class attribute based on the CSS files in your workspace. Also supports React’s className attribute.</span>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*AHJJrCMfkLWLHLH4.gif\" class=\"graf-image\" /></figure>### Groovy\n<ul>\n<li><span id=\"e453\"><a href=\"https://marketplace.visualstudio.com/items?itemName=NicolasVuillamy.vscode-groovy-lint\" class=\"markup--anchor markup--li-anchor\">VsCode Groovy Lint</a> — Groovy lint, format, prettify and auto-fix</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*jmi5_-erJj7WOMq7.gif\" class=\"graf-image\" /></figure>### Haskell\n<ul>\n<li><span id=\"66eb\"><a href=\"https://marketplace.visualstudio.com/items?itemName=hoovercj.haskell-linter\" class=\"markup--anchor markup--li-anchor\">haskell-linter</a></span></li>\n<li><span id=\"fd71\"><a href=\"https://marketplace.visualstudio.com/items?itemName=alanz.vscode-hie-server\" class=\"markup--anchor markup--li-anchor\">Haskell IDE engine</a> — provides <a href=\"https://github.com/haskell/haskell-ide-engine\" class=\"markup--anchor markup--li-anchor\">language server</a> for stack and cabal projects.</span></li>\n<li><span id=\"cbfe\"><a href=\"https://marketplace.visualstudio.com/items?itemName=truman.autocomplate-shell\" class=\"markup--anchor markup--li-anchor\">autocomplate-shell</a></span></li>\n</ul>\n<hr>\n<h3>Java</h3>\n<ul>\n<li><span id=\"cf71\"><a href=\"https://marketplace.visualstudio.com/items?itemName=redhat.java\" class=\"markup--anchor markup--li-anchor\">Language Support for Java(TM) by Red Hat</a></span></li>\n<li><span id=\"d93f\"><a href=\"https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug\" class=\"markup--anchor markup--li-anchor\">Debugger for Java</a></span></li>\n<li><span id=\"3c8c\"><a href=\"https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-maven\" class=\"markup--anchor markup--li-anchor\">Maven for Java</a></span></li>\n<li><span id=\"2d5c\"><a href=\"https://marketplace.visualstudio.com/items?itemName=GabrielBB.vscode-lombok\" class=\"markup--anchor markup--li-anchor\">Lombok</a></span></li>\n</ul>\n<hr>\n<h3>JavaScript</h3>\n<ul>\n<li><span id=\"8516\"><a href=\"https://marketplace.visualstudio.com/items?itemName=mgmcdermott.vscode-language-babel\" class=\"markup--anchor markup--li-anchor\">Babel JavaScript</a></span></li>\n<li><span id=\"aa22\"><a href=\"https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode\" class=\"markup--anchor markup--li-anchor\">Visual Studio IntelliCode</a> — This extension provides AI-assisted development features including autocomplete and other insights based on understanding your code context.</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*i7CZbSbHqsWqEM4w.gif\" class=\"graf-image\" /></figure>See the difference between these two <a href=\"https://github.com/michaelgmcd/vscode-language-babel/issues/1\" class=\"markup--anchor markup--p-anchor\">here</a>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-tslint-plugin\" class=\"markup--anchor markup--blockquote-anchor\">tslint</a> — TSLint for Visual Studio Code (with <code>\"tslint.jsEnable\": true</code> ).</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\" class=\"markup--anchor markup--blockquote-anchor\">eslint</a> — Linter for <a href=\"https://eslint.org/\" class=\"markup--anchor markup--blockquote-anchor\">eslint</a>.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=samverschueren.linter-xo\" class=\"markup--anchor markup--blockquote-anchor\">XO</a> — Linter for <a href=\"https://github.com/xojs/xo\" class=\"markup--anchor markup--blockquote-anchor\">XO</a>.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=samverschueren.ava\" class=\"markup--anchor markup--blockquote-anchor\">AVA</a> — Snippets for <a href=\"https://github.com/avajs/ava\" class=\"markup--anchor markup--blockquote-anchor\">AVA</a>.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\" class=\"markup--anchor markup--blockquote-anchor\">Prettier</a> — Linter, Formatter and Pretty printer for <a href=\"https://github.com/prettier/prettier-vscode\" class=\"markup--anchor markup--blockquote-anchor\">Prettier</a>.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=austinleegordon.vscode-schema-dot-org\" class=\"markup--anchor markup--blockquote-anchor\">Schema.org Snippets</a> — Snippets for <a href=\"https://schema.org/\" class=\"markup--anchor markup--blockquote-anchor\">Schema.org</a>.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker\" class=\"markup--anchor markup--blockquote-anchor\">Code Spell Checker</a> — Spelling Checker for Visual Studio Code.</p>\n</blockquote>\n<p>Framework-specific:</p>\n<h4><a href=\"https://marketplace.visualstudio.com/items?itemName=octref.vetur\" class=\"markup--anchor markup--h4-anchor\">Vetur</a> — Toolkit for Vue.js</h4>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*F7J_vW0ISbVMTXIZ.png\" class=\"graf-image\" /></figure>\n<hr>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome\" class=\"markup--anchor markup--h3-anchor\">Debugger for Chrome</a></h3>\n<blockquote>\n<p><em>A VS Code extension to debug your JavaScript code in the Chrome browser, or other targets that support the Chrome Debugging Protocol.</em></p>\n</blockquote>\n<h3>Facebook Flow</h3>\n<ul>\n<li><span id=\"155f\"><a href=\"https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode\" class=\"markup--anchor markup--li-anchor\">Flow Language Support</a> — provides all the functionality you would expect — linting, intellisense, type tooltips and click-to-definition</span></li>\n<li><span id=\"ac2f\"><a href=\"https://marketplace.visualstudio.com/items?itemName=gcazaciuc.vscode-flow-ide\" class=\"markup--anchor markup--li-anchor\">vscode-flow-ide</a> — an alternative Flowtype extension for Visual Studio Code</span></li>\n</ul>\n<h3>TypeScript</h3>\n<ul>\n<li><span id=\"8883\"><a href=\"https://marketplace.visualstudio.com/items?itemName=eg2.tslint\" class=\"markup--anchor markup--li-anchor\">tslint</a> — TSLint for Visual Studio Code</span></li>\n<li><span id=\"9665\"><a href=\"https://marketplace.visualstudio.com/items?itemName=rbbit.typescript-hero\" class=\"markup--anchor markup--li-anchor\">TypeScript Hero</a> — Code outline view of your open TS, sort and organize your imports.</span></li>\n</ul>\n<hr>\n<h3>Markdown</h3>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint\" class=\"markup--anchor markup--h3-anchor\">markdownlint</a></h3>\n<blockquote>\n<p><em>Linter for</em> <a href=\"https://github.com/DavidAnson/markdownlint\" class=\"markup--anchor markup--blockquote-anchor\"><em>markdownlint</em></a><em>.</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one\" class=\"markup--anchor markup--h3-anchor\">Markdown All in One</a></h3>\n<blockquote>\n<p><em>All-in-one markdown plugin (keyboard shortcuts, table of contents, auto preview, list editing and more)</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*8oVrYuZ9kLRNSuBs.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=bierner.markdown-emoji\" class=\"markup--anchor markup--h3-anchor\">Markdown Emoji</a>\n<blockquote>\n<p><em>Adds emoji syntax support to VS Code’s built-in Markdown preview</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*rckUMIIZ9Jh7UE5q.png\" class=\"graf-image\" /></figure>\n<hr>\n<h3>PHP</h3>\n<h3>IntelliSense</h3>\n<p>These extensions provide slightly different sets of features. While the first one offers better autocompletion support, the second one seems to have more features overall.</p>\n<ul>\n<li><span id=\"94df\"><a href=\"https://marketplace.visualstudio.com/items?itemName=bmewburn.vscode-intelephense-client\" class=\"markup--anchor markup--li-anchor\">PHP Intelephense</a></span></li>\n<li><span id=\"b2b4\"><a href=\"https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-intellisense\" class=\"markup--anchor markup--li-anchor\">PHP IntelliSense</a></span></li>\n</ul>\n<h3>Laravel</h3>\n<ul>\n<li><span id=\"687e\"><a href=\"https://marketplace.visualstudio.com/items?itemName=onecentlin.laravel5-snippets\" class=\"markup--anchor markup--li-anchor\">Laravel 5 Snippets</a> — Laravel 5 snippets for Visual Studio Code</span></li>\n<li><span id=\"42ab\"><a href=\"https://marketplace.visualstudio.com/items?itemName=onecentlin.laravel-blade\" class=\"markup--anchor markup--li-anchor\">Laravel Blade Snippets</a> — Laravel blade snippets and syntax highlight support</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*f4hMFe1l7NpJTG8v.gif\" class=\"graf-image\" /></figure>-   <span id=\"bf66\"><a href=\"https://marketplace.visualstudio.com/items?itemName=ahinkle.laravel-model-snippets\" class=\"markup--anchor markup--li-anchor\">Laravel Model Snippets</a> — Quickly get models up and running with Laravel Model Snippets.</span>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*1xydH2CgYGDSMZtB.gif\" class=\"graf-image\" /></figure>-   <span id=\"fa58\"><a href=\"https://marketplace.visualstudio.com/items?itemName=ryannaddy.laravel-artisan\" class=\"markup--anchor markup--li-anchor\">Laravel Artisan</a> — Laravel Artisan commands within Visual Studio Code</span>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*rzK952c4UgikNNPR.gif\" class=\"graf-image\" /></figure>-   <span id=\"1e4d\"><a href=\"https://marketplace.visualstudio.com/items?itemName=mikestead.dotenv\" class=\"markup--anchor markup--li-anchor\">DotENV</a> — Support for dotenv file syntax</span>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*fSAaqpXfBx1Sgztf.png\" class=\"graf-image\" /></figure>\n<hr>\n<h3>Other extensions</h3>\n<ul>\n<li><span id=\"8443\"><a href=\"https://marketplace.visualstudio.com/items?itemName=rifi2k.format-html-in-php\" class=\"markup--anchor markup--li-anchor\">Format HTML in PHP</a> — Formatting for the HTML in PHP files. Runs before the save action so you can still have a PHP formatter.</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*6gF0K20iKes7I9ZF.gif\" class=\"graf-image\" /></figure>-   <span id=\"f3f0\"><a href=\"https://marketplace.visualstudio.com/items?itemName=ikappas.composer\" class=\"markup--anchor markup--li-anchor\">Composer</a></span>\n<ul>\n<li><span id=\"e5ba\"><a href=\"https://marketplace.visualstudio.com/items?itemName=felixfbecker.php-debug\" class=\"markup--anchor markup--li-anchor\">PHP Debug</a> — XDebug extension for Visual Studio Code</span></li>\n<li><span id=\"6a3c\"><a href=\"https://marketplace.visualstudio.com/items?itemName=neilbrayfield.php-docblocker\" class=\"markup--anchor markup--li-anchor\">PHP DocBlocker</a></span></li>\n<li><span id=\"a4ca\"><a href=\"https://marketplace.visualstudio.com/items?itemName=junstyle.php-cs-fixer\" class=\"markup--anchor markup--li-anchor\">php cs fixer</a> — PHP CS Fixer extension for VS Code, php formatter, php code beautify tool</span></li>\n<li><span id=\"30f1\"><a href=\"https://marketplace.visualstudio.com/items?itemName=ikappas.phpcs\" class=\"markup--anchor markup--li-anchor\">phpcs</a> — PHP CodeSniffer for Visual Studio Code</span></li>\n<li><span id=\"d82e\"><a href=\"https://marketplace.visualstudio.com/items?itemName=kokororin.vscode-phpfmt\" class=\"markup--anchor markup--li-anchor\">phpfmt</a> — phpfmt for Visual Studio Code</span></li>\n</ul>\n<hr>\n<h3>Python</h3>\n<ul>\n<li><span id=\"0136\"><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-python.python\" class=\"markup--anchor markup--li-anchor\">Python</a> — Linting, Debugging (multi threaded, web apps), Intellisense, auto-completion, code formatting, snippets, unit testing, and more.</span></li>\n</ul>\n<h3>TensorFlow</h3>\n<ul>\n<li><span id=\"402b\"><a href=\"https://marketplace.visualstudio.com/items?itemName=vahidk.tensorflow-snippets\" class=\"markup--anchor markup--li-anchor\">TensorFlow Snippets</a> — This extension includes a set of useful code snippets for developing TensorFlow models in Visual Studio Code.</span></li>\n</ul>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*stmhgQ3sGvJBTvf2.gif\" class=\"graf-image\" /></figure>\n<hr>\n<h3>Rust</h3>\n<ul>\n<li><span id=\"cec4\"><a href=\"https://marketplace.visualstudio.com/items?itemName=rust-lang.rust\" class=\"markup--anchor markup--li-anchor\">Rust</a> — Linting, auto-completion, code formatting, snippets and more</span></li>\n</ul>\n<hr>\n<h3>Productivity</h3>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=bencoleman.armview\" class=\"markup--anchor markup--h3-anchor\">ARM Template Viewer</a></h3>\n<blockquote>\n<p><em>Displays a graphical preview of Azure Resource Manager (ARM) templates. The view will show all resources with the official Azure icons and also linkage between the resources.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*p8bvCI9DXF44m4z3.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-cosmosdb\" class=\"markup--anchor markup--h3-anchor\">Azure Cosmos DB</a>\n<blockquote>\n<p><em>Browse your database inside the vs code editor</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*VWvSU6Hbf20Kfc_P.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=vsciot-vscode.azure-iot-toolkit\" class=\"markup--anchor markup--h3-anchor\">Azure IoT Toolkit</a>\n<blockquote>\n<p><em>Everything you need for the Azure IoT development: Interact with Azure IoT Hub, manage devices connected to Azure IoT Hub, and develop with code snippets for Azure IoT Hub</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*AobtCd80fICrbQPI.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks\" class=\"markup--anchor markup--h3-anchor\">Bookmarks</a>\n<blockquote>\n<p><em>Mark lines and jump to them</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=orepor.color-tabs-vscode-ext\" class=\"markup--anchor markup--h3-anchor\">Color Tabs</a></h3>\n<blockquote>\n<p><em>An extension for big projects or monorepos that colors your tab/titlebar based on the current package</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*SEp-hgfDLlubNRyc.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=hardikmodha.create-tests\" class=\"markup--anchor markup--h3-anchor\">Create tests</a>\n<blockquote>\n<p><em>An extension to quickly generate test files.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*DLZLYmrBiui0YOBt.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=mkloubert.vs-deploy\" class=\"markup--anchor markup--h3-anchor\">Deploy</a>\n<blockquote>\n<p><em>Commands for upload or copy files of a workspace to a destination.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*lLasjzlmWnBwdbAT.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-duplicate\" class=\"markup--anchor markup--h3-anchor\">Duplicate Action</a>\n<blockquote>\n<p><em>Ability to duplicate files and directories.</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens\" class=\"markup--anchor markup--h3-anchor\">Error Lens</a></h3>\n<blockquote>\n<p><em>Show language diagnostics inline (errors/warnings/…).</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*1tJJkV0p2Ka_W06r.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets\" class=\"markup--anchor markup--h3-anchor\">ES7 React/Redux/GraphQL/React-Native snippets</a>\n<blockquote>\n<p><em>Provides Javascript and React/Redux snippets in ES7</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*W3N0kbgEumWYa-m4.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=rubbersheep.gi\" class=\"markup--anchor markup--h3-anchor\">Gi</a>\n<blockquote>\n<p><em>Generating .gitignore files made easy</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*sfddghz8B1D362UB.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=vsls-contrib.gistfs\" class=\"markup--anchor markup--h3-anchor\">GistPad</a>\n<blockquote>\n<p><em>Allows you to manage GitHub Gists entirely within the editor. You can open, create, delete, fork, star and clone gists, and then seamlessly begin editing files as if they were local. It’s like your very own developer library for building and referencing code snippets, commonly used config/scripts, programming-related notes/documentation, and interactive samples.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*1MiBQ0u4Z8TPNaG9.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory\" class=\"markup--anchor markup--h3-anchor\">Git History</a>\n<blockquote>\n<p><em>View git log, file or line History</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=felipecaputo.git-project-manager\" class=\"markup--anchor markup--h3-anchor\">Git Project Manager</a></h3>\n<blockquote>\n<p><em>Automatically indexes your git projects and lets you easily toggle between them</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=qezhu.gitlink\" class=\"markup--anchor markup--h3-anchor\">GitLink</a></h3>\n<blockquote>\n<p><em>GoTo current file’s online link in browser and Copy the link in clipboard.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Acgfn2rmhinuIPjk.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens\" class=\"markup--anchor markup--h3-anchor\">GitLens</a>\n<blockquote>\n<p><em>Provides Git CodeLens information (most recent commit, # of authors), on-demand inline blame annotations, status bar blame information, file and blame history explorers, and commands to compare changes with the working tree or previous versions.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*MZu4GV7SOCW88UQQ.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=lamartire.git-indicators\" class=\"markup--anchor markup--h3-anchor\">Git Indicators</a>\n<blockquote>\n<p><em>Atom-like git indicators on active panel</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*vitZrD9ZU0_eWckU.png\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*0BHxQOLMx09FFuWZ.png\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*x8F97F4AdSvvtehT.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=KnisterPeter.vscode-github\" class=\"markup--anchor markup--h3-anchor\">GitHub</a>\n<blockquote>\n<p><em>Provides GitHub workflow support. For example browse project, issues, file (the current line), create and manage pull request. Support for other providers (e.g. gitlab or bitbucket) is planned. Have a look at the</em> <a href=\"https://github.com/KnisterPeter/vscode-github/blob/master/README.md\" class=\"markup--anchor markup--blockquote-anchor\"><em>README.md</em></a> <em>on how to get started with the setup for this extension.</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=erichbehrens.pull-request-monitor\" class=\"markup--anchor markup--h3-anchor\">GitHub Pull Request Monitor</a></h3>\n<blockquote>\n<p><em>This extension uses the GitHub api to monitor the state of your pull requests and let you know when it’s time to merge or if someone requested changes.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*TOq5OERkgQNETGPK.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=gitlab.gitlab-workflow\" class=\"markup--anchor markup--h3-anchor\">GitLab Workflow</a>\n<blockquote>\n<p><em>Adds a GitLab sidebar icon to view issues, merge requests and other GitLab resources. You can also view the results of your GitLab CI/CD pipeline and check the syntax of your _<code>.gitlab-ci.yml</code></em>._</p>\n</blockquote>\n<h4><a href=\"https://marketplace.visualstudio.com/items?itemName=richardwillis.vscode-gradle\" class=\"markup--anchor markup--h4-anchor\">Gradle Tasks</a></h4>\n<blockquote>\n<p><em>Run gradle tasks in VS Code.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Vx-3DIT22BJpEnJr.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=idleberg.icon-fonts\" class=\"markup--anchor markup--h3-anchor\">Icon Fonts</a>\n<blockquote>\n<p><em>Snippets for popular icon fonts such as Font Awesome, Ionicons, Glyphicons, Octicons, Material Design Icons and many more!</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost\" class=\"markup--anchor markup--h3-anchor\">Import Cost</a></h3>\n<blockquote>\n<p><em>This extension will display inline in the editor the size of the imported package. The extension utilizes webpack with babili-webpack-plugin in order to detect the imported size.</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=Atlassian.atlascode\" class=\"markup--anchor markup--h3-anchor\">Jira and Bitbucket</a></h3>\n<blockquote>\n<p><em>Bringing the power of Jira and Bitbucket to VS Code — With Atlassian for VS Code you can create and view issues, start work on issues, create pull requests, do code reviews, start builds, get build statuses and more!</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*T6iuH2VnPYj93YqW.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=lannonbr.vscode-js-annotations\" class=\"markup--anchor markup--h3-anchor\">JS Parameter Annotations</a>\n<blockquote>\n<p><em>Provides annotations on function calls in JS/TS files to provide parameter names to arguments.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*zHffPsYWln4dxhus.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=wmaurer.vscode-jumpy\" class=\"markup--anchor markup--h3-anchor\">Jumpy</a>\n<blockquote>\n<p><em>Provides fast cursor movement, inspired by Atom’s package of the same name.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*uPOceUJ4eMjCP_Qt.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=mkloubert.vscode-kanban\" class=\"markup--anchor markup--h3-anchor\">Kanban</a>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*SzUG3UU1fl5ub7bA.gif\" class=\"graf-image\" /></figure>*Simple Kanban board for use in Visual Studio Code, with time tracking and Markdown support.*\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer\" class=\"markup--anchor markup--h3-anchor\">Live Server</a></h3>\n<blockquote>\n<p><em>Launch a development local Server with live reload feature for static &#x26; dynamic pages.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Oj5zPrWwMbCBViBi.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=slevesque.vscode-multiclip\" class=\"markup--anchor markup--h3-anchor\">Multiple clipboards</a>\n<blockquote>\n<p><em>Override the regular Copy and Cut commands to keep selections in a clipboard ring</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=philnash.ngrok-for-vscode\" class=\"markup--anchor markup--h3-anchor\">ngrok for VSCode</a></h3>\n<blockquote>\n<p><em>ngrok allows you to expose a web server running on your local machine to the internet. Just tell ngrok what port your web server is listening on. This extension allows you to control</em> <a href=\"https://ngrok.com/\" class=\"markup--anchor markup--blockquote-anchor\"><em>ngrok</em></a> <em>from the VSCode command palette</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*IX15MuJrEVBcTd0F.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=dbankier.vscode-instant-markdown\" class=\"markup--anchor markup--h3-anchor\">Instant Markdown</a>\n<blockquote>\n<p><em>Simply, edit markdown documents in vscode and instantly preview it in your browser as you type.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*jBw9vP9cAtvv2IcV.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense\" class=\"markup--anchor markup--h3-anchor\">npm Intellisense</a>\n<blockquote>\n<p><em>Visual Studio Code plugin that autocompletes npm modules in import statements.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*iVJamJugt_b7-VsV.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=DominicVonk.parameter-hints\" class=\"markup--anchor markup--h3-anchor\">Parameter Hints</a>\n<blockquote>\n<p><em>Provides parameter hints on function calls in JS/TS/PHP files.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*BSj8-Qt7xtVTsl1Z.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=ryu1kn.partial-diff\" class=\"markup--anchor markup--h3-anchor\">Partial Diff</a>\n<blockquote>\n<p><em>Compare (diff) text selections within a file, across different files, or to the clipboard</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*KHki85jdv1hZeY3V.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=quicktype.quicktype\" class=\"markup--anchor markup--h3-anchor\">Paste JSON as Code</a>\n<blockquote>\n<p><em>Infer the structure of JSON and paste is as types in many programming languages</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*K2GCRMGsYjpsK8OX.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense\" class=\"markup--anchor markup--h3-anchor\">Path IntelliSense</a>\n<blockquote>\n<p><em>Visual Studio Code plugin that autocompletes filenames</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*xwxU_1ffZvZ6DeoO.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=ego-digital.vscode-powertools\" class=\"markup--anchor markup--h3-anchor\">Power Tools</a>\n<blockquote>\n<p><em>Extends Visual Studio Code via things like Node.js based scripts or shell commands, without writing separate extensions</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Cb7J6-PYsXsnjqSN.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=nobuhito.printcode\" class=\"markup--anchor markup--h3-anchor\">PrintCode</a>\n<blockquote>\n<p><em>PrintCode converts the code being edited into an HTML file, displays it by browser and prints it.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*2spvNSEEHM-ETd_F.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager\" class=\"markup--anchor markup--h3-anchor\">Project Manager</a>\n<blockquote>\n<p><em>Easily switch between projects.</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=kruemelkatze.vscode-dashboard\" class=\"markup--anchor markup--h3-anchor\">Project Dashboard</a></h3>\n<blockquote>\n<p><em>VSCode Project Dashboard is a Visual Studio Code extension that lets you organize your projects in a speed-dial like manner. Pin your frequently visited folders, files, and SSH remotes onto a dashboard to access them quickly.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*PxOoARROhi1rf63R.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=mechatroner.rainbow-csv\" class=\"markup--anchor markup--h3-anchor\">Rainbow CSV</a>\n<blockquote>\n<p><em>Highlight columns in comma, tab, semicolon and pipe separated files, consistency check and linting with CSVLint, multi-cursor column editing, column trimming and realignment, and SQL-style querying with RBQL.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*XAb9jlOfGWlEaCEM.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack\" class=\"markup--anchor markup--h3-anchor\">Remote Development</a>\n<blockquote>\n<p><em>Allows users to open any folder in a container, on a remote machine, container or in Windows Subsystem for Linux(WSL) and take advantage of VS Code’s full feature set.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*b6XEPh9PJzeWDB_z.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=rafaelmaiolla.remote-vscode\" class=\"markup--anchor markup--h3-anchor\">Remote VSCode</a>\n<blockquote>\n<p><em>Allow user to edit files from Remote server in Visual Studio Code directly.</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=humao.rest-client\" class=\"markup--anchor markup--h3-anchor\">REST Client</a></h3>\n<blockquote>\n<p><em>Allows you to send HTTP request and view the response in Visual Studio Code directly.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*zGne78bniDbTXzyf.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\" class=\"markup--anchor markup--h3-anchor\">Settings Sync</a>\n<blockquote>\n<p><em>Synchronize settings, snippets, themes, file icons, launch, key bindings, workspaces and extensions across multiple machines using GitHub Gist</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*ilH91MRgGnMF6C8c.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=qcz.text-power-tools\" class=\"markup--anchor markup--h3-anchor\">Text Power Tools</a>\n<blockquote>\n<p><em>All-in-one extension for text manipulation: filtering (grep), remove lines, insert number sequences and GUIDs, format content as table, change case, converting numbers and more. Great for finding information in logs and manipulating text.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Pfp4noD5OeQRbmsZ.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree\" class=\"markup--anchor markup--h3-anchor\">Todo Tree</a>\n<blockquote>\n<p><em>Custom keywords, highlighting, and colors for TODO comments. As well as a sidebar to view all your current tags.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*6utz502-rPCa0Xcg.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=BriteSnow.vscode-toggle-quotes\" class=\"markup--anchor markup--h3-anchor\">Toggle Quotes</a>\n<blockquote>\n<p><em>Cycle between single, double and backtick quotes</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*7kZFpggvGAVkvoYa\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=tusaeff.vscode-typescript-destructure-plugin\" class=\"markup--anchor markup--h3-anchor\">Typescript Destructure</a>\n<blockquote>\n<p><em>TypeScript Language Service Plugin providing a set of source actions for easy objects destructuring</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*sEi0imXK2Yx69m7H.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=WakaTime.vscode-wakatime\" class=\"markup--anchor markup--h3-anchor\">WakaTime</a>\n<blockquote>\n<p><em>Automatic time tracker and productivity dashboard showing how long you coded in each project, file, branch, and language.</em></p>\n</blockquote>\n<hr>\n<h3>Formatting &#x26; Beautification</h3>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=wwm.better-align\" class=\"markup--anchor markup--h3-anchor\">Better Align</a></h3>\n<blockquote>\n<p><em>Align your code by colon(:), assignment(=, +=, -=, *=, /=) and arrow(=> ). It has additional support for comma-first coding style and trailing comment.</em></p>\n</blockquote>\n<blockquote>\n<p><em>And it doesn’t require you to select what to be aligned, the extension will figure it out by itself.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*5maDjvvH57MAks1l.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag\" class=\"markup--anchor markup--h3-anchor\">Auto Close Tag</a>\n<blockquote>\n<p><em>Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*h6Q6HLQ8jfHLnPlJ.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag\" class=\"markup--anchor markup--h3-anchor\">Auto Rename Tag</a>\n<blockquote>\n<p><em>Auto rename paired HTML/XML tags</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*uRKX2-umhSQzlESv.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify\" class=\"markup--anchor markup--h3-anchor\">beautify</a>\n<blockquote>\n<p><em>Beautify code in place for VS Code</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=dbalas.vscode-html2pug\" class=\"markup--anchor markup--h3-anchor\">html2pug</a></h3>\n<blockquote>\n<p><em>Transform html to pug inside your Visual Studio Code, forget about using an external page anymore.</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=vilicvane.es-quotes\" class=\"markup--anchor markup--h3-anchor\">ECMAScript Quotes Transformer</a></h3>\n<blockquote>\n<p><em>Transform quotes of ECMAScript string literals</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*W1Z1fIvOGgPclFMJ.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=Rubymaniac.vscode-paste-and-indent\" class=\"markup--anchor markup--h3-anchor\">Paste and Indent</a>\n<blockquote>\n<p><em>Paste code with “correct” indentation</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=Tyriar.sort-lines\" class=\"markup--anchor markup--h3-anchor\">Sort Lines</a></h3>\n<blockquote>\n<p><em>Sorts lines of text in specific order</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*a4wPhA7VjJqkp3lu.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=yatki.vscode-surround\" class=\"markup--anchor markup--h3-anchor\">Surround</a>\n<blockquote>\n<p><em>A simple yet powerful extension to add wrapper templates around your code blocks.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*lyjRgfSrvdmhGFXd.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=konstantin.wrapSelection\" class=\"markup--anchor markup--h3-anchor\">Wrap Selection</a>\n<blockquote>\n<p><em>Wraps selection or multiple selections with symbol or multiple symbols</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=tombonnike.vscode-status-bar-format-toggle\" class=\"markup--anchor markup--h3-anchor\">Formatting Toggle</a></h3>\n<blockquote>\n<p><em>Allows you to toggle your formatter on and off with a simple click</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer\" class=\"markup--anchor markup--h3-anchor\">Bracket Pair Colorizer</a></h3>\n<blockquote>\n<p><em>This extension allows matching brackets to be identified with colours. The user can define which characters to match, and which colours to use.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*m3nU-5UxgUxX4-eJ.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=steoates.autoimport\" class=\"markup--anchor markup--h3-anchor\">Auto Import</a>\n<blockquote>\n<p><em>Automatically finds, parses and provides code actions and code completion for all available imports. Works with Typescript and TSX.</em></p>\n</blockquote>\n<h3><a href=\"https://github.com/foxundermoon/vs-shell-format\" class=\"markup--anchor markup--h3-anchor\">shell-format</a></h3>\n<blockquote>\n<p><em>shell script &#x26; Dockerfile &#x26; dotenv format</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*TThlkfK1KgQm5AKU.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=funkyremi.vscode-google-translate\" class=\"markup--anchor markup--h3-anchor\">Vscode Google Translate</a>\n<blockquote>\n<p><em>Quickly translate selected text right in your code</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*JF8NuxAFDxXiTn_u.gif\" class=\"graf-image\" /></figure>### Explorer Icons\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme\" class=\"markup--anchor markup--h3-anchor\">Material Icon Theme</a></h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*67ZZ9mhoISPk_lM4.png\" class=\"graf-image\" /></figure>### Uncategorized\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=auchenberg.vscode-browser-preview\" class=\"markup--anchor markup--h3-anchor\">Browser Preview</a></h3>\n<blockquote>\n<p><em>Browser Preview for VS Code enables you to open a real browser preview inside your editor that you can debug. Browser Preview is powered by Chrome Headless, and works by starting a headless Chrome instance in a new process. This enables a secure way to render web content inside VS Code, and enables interesting features such as in-editor debugging and more!</em></p>\n</blockquote>\n<blockquote>\n<p><strong><em>FYI:… I HAVE TRIED ENDLESSLEY TO GET THE DEBUGGER TO WORK IN VSCODE BUT IT DOES NOT… I SUSPECT THAT’S WHY IT HAS A 3 STAR RATING FOR AN OTHERWISE PHENOMINAL EXTENSION.</em></strong></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Oilwsi7EKGpCZb46.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=CodeRoad.coderoad\" class=\"markup--anchor markup--h3-anchor\">CodeRoad</a>\n<blockquote>\n<p><em>Play interactive tutorials in your favorite editor.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*iV8P93QMmWdYfnrQ.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner\" class=\"markup--anchor markup--h3-anchor\">Code Runner</a>\n<blockquote>\n<p><em>Run code snippet or code file for multiple languages: C, C++, Java, JavaScript, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, BAT/CMD, BASH/SH, F# Script, C# Script, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml Script</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*hMsM_IEyBklQXchd.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=softwaredotcom.swdc-vscode\" class=\"markup--anchor markup--h3-anchor\">Code Time</a>\n<blockquote>\n<p><em>Automatic time reports by project and other programming metrics right in VS Code.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Uo1BYexJenprpgLa\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight\" class=\"markup--anchor markup--h3-anchor\">Color Highlight</a>\n<blockquote>\n<p><em>Highlight web colors in your editor</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*ZwE7OHKR5opvDCJJOw9KeQ.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=IBM.output-colorizer\" class=\"markup--anchor markup--h3-anchor\">Output Colorizer</a>\n<blockquote>\n<p><em>Syntax highlighting for the VS Code Output Panel and log files</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*9DpzVZ9cUNp2TMyD.jpg\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=deerawan.vscode-dash\" class=\"markup--anchor markup--h3-anchor\">Dash</a>\n<blockquote>\n<p><em>Dash integration in Visual Studio Code</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*sqGllC-pgXNaEBfB-cxG9Q.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=ryu1kn.edit-with-shell\" class=\"markup--anchor markup--h3-anchor\">Edit with Shell Command</a>\n<blockquote>\n<p><em>Leverage your favourite shell commands to edit text</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*2wW31HJ1nUCjORZe.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig\" class=\"markup--anchor markup--h3-anchor\">Editor Config for VS Code</a>\n<blockquote>\n<p><em>Editor Config for VS Code</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=lukasz-wronski.ftp-sync\" class=\"markup--anchor markup--h3-anchor\">ftp-sync</a></h3>\n<blockquote>\n<p><em>Auto-sync your work to remote FTP server</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*-viKhwxpeYQdWHRE.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=vincaslt.highlight-matching-tag\" class=\"markup--anchor markup--h3-anchor\">Highlight JSX/HTML tags</a>\n<blockquote>\n<p><em>Highlights matching tags in the file.</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow\" class=\"markup--anchor markup--h3-anchor\">Indent Rainbow</a></h3>\n<blockquote>\n<p><em>A simple extension to make indentation more readable.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*GK_yEd-50SU3yc_y.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=ftonato.password-generator\" class=\"markup--anchor markup--h3-anchor\">Password Generator</a>\n<blockquote>\n<p><em>Create a secure password using our generator tool. Help prevent a security threat by getting a strong password today.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*qPJAZk9-NcYgsx7H.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.platformio\" class=\"markup--anchor markup--h3-anchor\">PlatformIO</a>\n<blockquote>\n<p><em>An open source ecosystem for IoT development: supports 350+ embedded boards, 20+ development platforms, 10+ frameworks. Arduino and ARM mbed compatible.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*RywVt_vikqB-5urO.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=pnp.polacode\" class=\"markup--anchor markup--h3-anchor\">Polacode</a>\n<blockquote>\n<p><em>Polaroid for your code 📸.</em></p>\n</blockquote>\n<blockquote>\n<p><strong><em>Note: Polacode no longer works as of the most recent update… go for Polacode2020 or CodeSnap…</em></strong></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Io4fPojDRrDf5CmW.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=WallabyJs.quokka-vscode\" class=\"markup--anchor markup--h3-anchor\">Quokka</a>\n<h4>This one is super cool!</h4>\n<blockquote>\n<p><em>Rapid prototyping playground for JavaScript and TypeScript in VS Code, with access to your project’s files, inline reporting, code coverage and rich output formatting.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Q9kp8EWZHTD0Hfru.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=sozercan.slack\" class=\"markup--anchor markup--h3-anchor\">Slack</a>\n<blockquote>\n<p><em>Send messages and code snippets, upload files to Slack</em></p>\n</blockquote>\n<p>Personally I found this extension to slow down my editor in addition to confliction with other extensions: (I have over 200 as of this writing)….. <strong>yes I have been made fully aware that I have a problem and need to get help</strong></p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*9-xxjXzdPCh_46kZ.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=shyykoserhiy.vscode-spotify\" class=\"markup--anchor markup--h3-anchor\">Spotify</a>\n<p><em>No real advantage over just using Spotify normally… it’s problematic enough in implementation that you won’t save any time using it. Further, it’s a bit tricky to configure … or at least it was the last time I tried syncing it with my spotify account.</em></p>\n<blockquote>\n<p><em>Provides integration with Spotify Desktop client. Shows the currently playing song in status bar, search lyrics and provides commands for controlling Spotify with buttons and hotkeys.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*IqsxXiGpZQWbQbfD.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=jock.svg\" class=\"markup--anchor markup--h3-anchor\">SVG</a>\n<blockquote>\n<p><em>A Powerful SVG Language Support Extension(beta). Almost all the features you need to handle SVG.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*SC6zCXGaBnM_LkgC.png\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=cssho.vscode-svgviewer\" class=\"markup--anchor markup--h3-anchor\">SVG Viewer</a>\n<blockquote>\n<p><em>View an SVG in the editor and export it as data URI scheme or PNG.</em></p>\n</blockquote>\n<h3><a href=\"https://marketplace.visualstudio.com/items?itemName=ryu1kn.text-marker\" class=\"markup--anchor markup--h3-anchor\">Text Marker (Highlighter)</a></h3>\n<blockquote>\n<p><em>Highlight multiple text patterns with different colors at the same time. Highlighting a single text pattern can be done with the editor’s search functionality, but it cannot highlight multiple patterns at the same time, and this is where this extension comes handy.</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*YDreVyGNjZmqj_KC.gif\" class=\"graf-image\" /></figure>### <a href=\"https://marketplace.visualstudio.com/items?itemName=samundrak.esdoc-mdn\" class=\"markup--anchor markup--h3-anchor\">ESDOC MDN</a>\n<h3>THIS IS A MUST HAVE</h3>\n<blockquote>\n<p><em>Quickly bring up helpful MDN documentation in the editor</em></p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*xiUfWBsz8x8beY70.gif\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*mMBU6d1iCkt5VHq2.gif\" class=\"graf-image\" /></figure>### Themes:\n<p>In the interest of not making the reader scroll endlessly as I often do… I’ve made a separate post for that here. If you’ve made it this far, I thank you!</p>\n<p><a href=\"https://bryanguner.medium.com/my-favorite-vscode-themes-9bab65af3f0f\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/my-favorite-vscode-themes-9bab65af3f0f\"><strong>My Favorite VSCode <em>Themes</em></strong><br />\nThemesbryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/my-favorite-vscode-themes-9bab65af3f0f\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<hr>\n<h3>If you found this guide helpful feel free to checkout my GitHub/gists where I host similar content:</h3>\n<p><a href=\"https://gist.github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://gist.github.com/bgoonz\"><strong>bgoonz’s gists</strong><br />\n<em>Instantly share code, notes, and snippets. Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python |…</em>gist.github.com</a><a href=\"https://gist.github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\"><strong>bgoonz — Overview</strong><br />\n<em>Web Developer, Electrical Engineer JavaScript | CSS | Bootstrap | Python | React | Node.js | Express | Sequelize…</em>github.com</a><a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<h3>Or Checkout my personal Resource Site:</h3>\n<p><a href=\"https://web-dev-resource-hub.netlify.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://web-dev-resource-hub.netlify.app/\"><strong>Web-Dev-Resource-Hub</strong><br />\n<em>Edit description</em>web-dev-resource-hub.netlify.app</a><a href=\"https://web-dev-resource-hub.netlify.app/\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p>By <a href=\"https://medium.com/@bryanguner\" class=\"p-author h-card\">Bryan Guner</a> on <a href=\"https://medium.com/p/b9f4c8d91931\">March 18, 2021</a>.</p>\n<p><a href=\"https://medium.com/@bryanguner/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931\" class=\"p-canonical\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on May 23, 2021.</p>"},{"url":"/docs/react/cheatsheet/","relativePath":"docs/react/cheatsheet.md","relativeDir":"docs/react","base":"cheatsheet.md","name":"cheatsheet","frontmatter":{"title":"React Cheat Sheets:","weight":0,"excerpt":"cheat sheet","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h2>React Cheat Sheet</h2>\n<p>React:</p>\n<ul>\n<li><code>&#x3C;script src=\"https://unpkg.com/react@15/dist/react.js\">&#x3C;/script></code></li>\n<li><code>$ npm install react --save</code></li>\n<li><code>$ bower install react --save</code></li>\n</ul>\n<p>React DOM:</p>\n<ul>\n<li><code>&#x3C;script src=\"https://unpkg.com/react-dom@15/dist/react-dom.js\">&#x3C;/script></code></li>\n<li><code>$ npm install react-dom</code></li>\n<li><code>$ bower install react-dom --save</code></li>\n</ul>\n<h2>Rendering</h2>\n<h3>Rendering (ES5)</h3>\n<pre><code class=\"language-js\">ReactDOM.render(React.createElement(Link, { name: 'HackHall.com' }), document.getElementById('menu'));\n</code></pre>\n<h3>Rendering (ES5+JSX)</h3>\n<pre><code class=\"language-js\">ReactDOM.render(&#x3C;Link name=\"HackHall.com\" />, document.getElementById('menu'));\n</code></pre>\n<h2>Server-side Rendering</h2>\n<pre><code class=\"language-js\">var ReactDOMServer = require('react-dom/server');\nReactDOMServer.renderToString(Link, { name: 'HackHall.com' });\nReactDOMServer.renderToStaticMarkup(Link, { name: 'HackHall.com' });\n</code></pre>\n<h2>Components</h2>\n<h3>ES5</h3>\n<pre><code class=\"language-js\">var Link = React.createClass({\n    displayName: 'Link',\n    render: function () {\n        return React.createElement('a', { className: 'btn', title: this.props.name }, 'Click ->', this.props.name);\n    }\n});\n</code></pre>\n<h3>ES5 + JSX</h3>\n<pre><code class=\"language-js\">var Link = React.createClass({\n    render: function () {\n        return (\n            &#x3C;a className=\"btn\" title={this.props.name}>\n                Click -> this.props.name\n            &#x3C;/a>\n        );\n    }\n});\n</code></pre>\n<h3>ES6 + JSX</h3>\n<pre><code class=\"language-js\">class Link extends React.Component {\n    render() {\n        return (\n            &#x3C;a className=\"btn\" title={this.props.name}>\n                Click -> this.props.name\n            &#x3C;/a>\n        );\n    }\n}\n</code></pre>\n<h2>Advanced Components</h2>\n<h3>Options (ES5)</h3>\n<ul>\n<li><code>propTypes object</code>: Type validation in development mode</li>\n<li><code>getDefaultProps function()</code>: object of default props</li>\n<li><code>getInitialState function()</code>: object of the initial state</li>\n</ul>\n<p>ES5:</p>\n<pre><code class=\"language-js\">var Link = React.createClass({\n    propTypes: { name: React.PropTypes.string },\n    getDefaultProps: function () {\n        return { initialCount: 0 };\n    },\n    getInitialState: function () {\n        return { count: this.props.initialCount };\n    },\n    tick: function () {\n        this.setState({ count: this.state.count + 1 });\n    },\n    render: function () {\n        return React.createElement(\n            'a',\n            { className: 'btn', href: '#', title: this.props.name, onClick: this.tick.bind(this) },\n            'Click ->',\n            this.props.name ? this.props.name : 'webapplog.com',\n            ' (Clicked: ' + this.state.count + ')'\n        );\n    }\n});\n</code></pre>\n<p>ES5 + JSX:</p>\n<pre><code class=\"language-js\">var Link = React.createClass({\n    propTypes: { name: React.PropTypes.string },\n    getDefaultProps: function () {\n        return { initialCount: 0 };\n    },\n    getInitialState: function () {\n        return { count: this.props.initialCount };\n    },\n    tick: function () {\n        this.setState({ count: this.state.count + 1 });\n    },\n    render: function () {\n        return (\n            &#x3C;a onClick={this.tick.bind(this)} href=\"#\" className=\"btn\" title={this.props.name}>\n                Click -> {this.props.name ? this.props.name : 'webapplog.com'}\n                (Clicked: {this.state.count})\n            &#x3C;/a>\n        );\n    }\n});\n</code></pre>\n<p>ES6 + JSX:</p>\n<pre><code class=\"language-js\">export class Link extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { count: props.initialCount };\n    }\n    tick() {\n        this.setState({ count: this.state.count + 1 });\n    }\n    render() {\n        return (\n            &#x3C;a onClick={this.tick.bind(this)} href=\"#\" className=\"btn\" title={this.props.name}>\n                Click -> {this.props.name ? this.props.name : 'webapplog.com'}\n                (Clicked: {this.state.count})\n            &#x3C;/a>\n        );\n    }\n}\nLink.propTypes = { initialCount: React.PropTypes.number };\nLink.defaultProps = { initialCount: 0 };\n</code></pre>\n<h2>Lifecycle Events</h2>\n<p>Modern React lifecycle methods (v16+)\n<img src=\"DZ-97vzW4AAbcZj.jpg\"></p>\n<p>Legacy Lifecycle Events:</p>\n<ul>\n<li><code>componentWillMount function()</code></li>\n<li><code>componentDidMount function()</code></li>\n<li><code>componentWillReceiveProps function(nextProps)</code></li>\n<li><code>shouldComponentUpdate function(nextProps, nextState)-> bool</code></li>\n<li><code>componentWillUpdate function(nextProps, nextState)</code></li>\n<li><code>componentDidUpdate function(prevProps, prevState)</code></li>\n<li><code>componentWillUnmount function()</code></li>\n</ul>\n<p>Sequence of lifecycle events:</p>\n<p><img src=\"lifecycle-events.png\"></p>\n<p>Inspired by <a href=\"http://react.tips\">http://react.tips</a></p>\n<h2>Special Props</h2>\n<ul>\n<li><code>key</code>: Unique identifier for an element to turn arrays/lists into hashes for better performance, e.g., <code>key={id}</code></li>\n<li><code>ref</code>: Reference to an element via <code>this.refs.NAME</code>, e.g., <code>ref=\"email\"</code> will create <code>this.refs.email</code> DOM node or <code>ReactDOM.findDOMNode(this.refs.email)</code></li>\n<li><code>style</code>: Accept an object of styles, instead of a string (immutable since v0.14), e.g., <code>style={{color: red}}</code></li>\n<li><code>className</code>: the HTML <code>class</code> attribute, e.g., <code>className=\"btn\"</code></li>\n<li><code>htmlFor</code>: the HTML <code>for</code> attribute, e.g., <code>htmlFor=\"email\"</code></li>\n<li><code>dangerouslySetInnerHTML</code>: raw HTML by providing an object with the key <code>__html</code></li>\n<li><code>children</code>: content of the element via <code>this.props.children</code>, e.g., <code>this.props.children[0]</code></li>\n<li><code>data-NAME</code>: custom attribute, e.g., <code>data-tooltip-text=\"...\"</code></li>\n</ul>\n<h2>propTypes</h2>\n<p>Types available under <code>React.PropTypes</code>:</p>\n<ul>\n<li><code>any</code></li>\n<li><code>array</code></li>\n<li><code>bool</code></li>\n<li><code>element</code></li>\n<li><code>func</code></li>\n<li><code>node</code></li>\n<li><code>number</code></li>\n<li><code>object</code></li>\n<li><code>string</code></li>\n</ul>\n<p>To make required, append <code>.isRequired</code>.</p>\n<p>More methods:</p>\n<ul>\n<li><code>instanceOf(constructor)</code></li>\n<li><code>oneOf(['News', 'Photos'])</code></li>\n<li><code>oneOfType([propType, propType])</code></li>\n</ul>\n<h3>Custom Validation</h3>\n<pre><code class=\"language-js\">propTypes: {\n  customProp: function(props, propName, componentName) {\n    if (!/regExPattern/.test(props[propName])) {\n      return new Error('Validation failed!');\n    }\n  }\n}\n</code></pre>\n<h2>Component Properties and Methods</h2>\n<p>Properties:</p>\n<ul>\n<li><code>this.refs</code>: Lists components with a <code>ref</code> prop</li>\n<li><code>this.props</code>: Any props passed to an element (immutable)</li>\n<li><code>this.state</code>: State set by setState and getInitialState (muttable) — avoid setting state manually with <code>this.state=...</code></li>\n<li><code>this.isMounted</code>: Flag whether the element has a corresponding DOM node or not</li>\n</ul>\n<p>Methods:</p>\n<ul>\n<li><code>setState(changes)</code>: Change state (partially) to <code>this.state</code> and trigger re-render</li>\n<li><code>replaceState(newState)</code>: Replace <code>this.state</code> and trigger re-render</li>\n<li><code>forceUpdate()</code>: Trigger DOM re-render immediately</li>\n</ul>\n<h2>React Addons</h2>\n<p>As npm modules:</p>\n<ul>\n<li><a href=\"http://facebook.github.io/react/docs/animation.html\"><code>react-addons-css-transition-group</code></a></li>\n<li><a href=\"http://facebook.github.io/react/docs/perf.html\"><code>react-addons-perf</code></a></li>\n<li><a href=\"http://facebook.github.io/react/docs/test-utils.html\"><code>react-addons-test-utils</code></a></li>\n<li><a href=\"http://facebook.github.io/react/docs/pure-render-mixin.html\"><code>react-addons-pure-render-mixin</code></a></li>\n<li><a href=\"http://facebook.github.io/react/docs/two-way-binding-helpers.html\"><code>react-addons-linked-state-mixin</code></a></li>\n<li><code>react-addons-clone-with-props</code></li>\n<li><code>react-addons-create-fragment</code></li>\n<li><code>react-addons-css-transition-group</code></li>\n<li><code>react-addons-linked-state-mixin</code></li>\n<li><code>react-addons-pure-render-mixin</code></li>\n<li><code>react-addons-shallow-compare</code></li>\n<li><code>react-addons-transition-group</code></li>\n<li><a href=\"http://facebook.github.io/react/docs/update.html\"><code>react-addons-update</code></a></li>\n</ul>\n<h2>React Components</h2>\n<ul>\n<li><a href=\"https://github.com/brillout/awesome-react-components\">https://github.com/brillout/awesome-react-components</a> and <a href=\"http://devarchy.com/react-components\">http://devarchy.com/react-components</a>: List of React components</li>\n<li><a href=\"http://www.material-ui.com\">Material-UI</a>: Material design React components</li>\n<li><a href=\"http://react-toolbox.com\">http://react-toolbox.com</a>: Set of React components that implement Google Material Design specification</li>\n<li><a href=\"https://js.coach\">https://js.coach</a>: Opinionated catalog of open source JS (mostly React) packages</li>\n<li><a href=\"https://react.rocks\">https://react.rocks</a>: Catalog of React components</li>\n<li><a href=\"https://khan.github.io/react-components\">https://khan.github.io/react-components</a>: Khan Academy React components</li>\n<li><a href=\"http://www.reactjsx.com\">http://www.reactjsx.com</a>: Registry of React components</li>\n</ul>\n<h3>Cheat Sheet:</h3>\n<pre><code class=\"language-js\">/* *******************************************************************************************\n * REACT.JS CHEATSHEET\n * DOCUMENTATION: https://reactjs.org/docs/\n * FILE STRUCTURE: https://reactjs.org/docs/faq-structure.html\n * ******************************************************************************************* */\n</code></pre>\n<p>npm install --save react // declarative and flexible JavaScript library for building UI\nnpm install --save react-dom // serves as the entry point of the DOM-related rendering paths\nnpm install --save prop-types // runtime type checking for React props and similar objects</p>\n<pre><code>// notes: don't forget the command lines\n\n\n/* *******************************************************************************************\n * REACT\n * https://reactjs.org/docs/react-api.html\n * ******************************************************************************************* */\n\n\n// Create and return a new React element of the given type.\n// Code written with JSX will be converted to use React.createElement().\n// You will not typically invoke React.createElement() directly if you are using JSX.\nReact.createElement(\n  type,\n  [props],\n  [...children]\n)\n\n// Clone and return a new React element using element as the starting point.\n// The resulting element will have the original element’s props with the new props merged in shallowly.\nReact.cloneElement(\n  element,\n  [props],\n  [...children]\n)\n\n// Verifies the object is a React element. Returns true or false.\nReact.isValidElement(object)\n\nReact.Children  // provides utilities for dealing with the this.props.children opaque data structure.\n\n// Invokes a function on every immediate child contained within children with this set to thisArg.\nReact.Children.map(children, function[(thisArg)])\n\n// Like React.Children.map() but does not return an array.\nReact.Children.forEach(children, function[(thisArg)])\n\n// Returns the total number of components in children,\n// equal to the number of times that a callback passed to map or forEach would be invoked.\nReact.Children.count(children)\n\n// Verifies that children has only one child (a React element) and returns it.\n// Otherwise this method throws an error.\nReact.Children.only(children)\n\n// Returns the children opaque data structure as a flat array with keys assigned to each child.\n// Useful if you want to manipulate collections of children in your render methods,\n// especially if you want to reorder or slice this.props.children before passing it down.\nReact.Children.toArray(children)\n\n// The React.Fragment component lets you return multiple elements in a render() method without creating an additional DOM element\n// You can also use it with the shorthand &#x3C;>&#x3C;/> syntax.\nReact.Fragment\n\n\n/* *******************************************************************************************\n * REACT.COMPONENT\n * React.Component is an abstract base class, so it rarely makes sense to refer to React.Component\n * directly. Instead, you will typically subclass it, and define at least a render() method.\n * https://reactjs.org/docs/react-component.html\n * ******************************************************************************************* */\n\n\nclass Component extends React.Component {\n  // Will be called before it is mounted\n  constructor(props) {\n    // Call this method before any other statement\n    // or this.props will be undefined in the constructor\n    super(props);\n\n    // The constructor is also often used to bind event handlers to the class instance.\n    // Binding makes sure the method has access to component attributes like this.props and this.state\n    this.method = this.method.bind(this);\n\n    // The constructor is the right place to initialize state.\n    this.state = {\n      active: true,\n\n      // In rare cases, it’s okay to initialize state based on props.\n      // This effectively “forks” the props and sets the state with the initial props.\n      // If you “fork” props by using them for state, you might also want to implement componentWillReceiveProps(nextProps)\n      // to keep the state up-to-date with them. But lifting state up is often easier and less bug-prone.\n      color: props.initialColor\n    };\n  }\n\n  // Enqueues changes to the component state and\n  // tells React that this component and its children need to be re-rendered with the updated state.\n  // setState() does not always immediately update the component. It may batch or defer the update until later.\n  // This makes reading this.state right after calling setState() a potential pitfall.\n  // Instead, use componentDidUpdate or a setState callback.\n  // You may optionally pass an object as the first argument to setState() instead of a function.\n  setState(updater[, callback]) { }\n\n  // Invoked just before mounting occurs (before render())\n  // This is the only lifecycle hook called on server rendering.\n  componentWillMount() { }\n\n  // Invoked immediately after a component is mounted.\n  // Initialization that requires DOM nodes should go here.\n  // If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n  // This method is a good place to set up any subscriptions. If you do that, don’t forget to unsubscribe in componentWillUnmount().\n  componentDidMount() { }\n\n  // Invoked before a mounted component receives new props.\n  // If you need to update the state in response to prop changes (for example, to reset it),\n  // you may compare this.props and nextProps and perform state transitions using this.setState() in this method.\n  componentWillReceiveProps(nextProps) { }\n\n  // Let React know if a component’s output is not affected by the current change in state or props.\n  // The default behavior is to re-render on every state change, and in the vast majority of cases you should rely on the default behavior.\n  // shouldComponentUpdate() is invoked before rendering when new props or state are being received. Defaults to true.\n  // This method is not called for the initial render or when forceUpdate() is used.\n  // Returning false does not prevent child components from re-rendering when their state changes.\n  shouldComponentUpdate(nextProps, nextState) { }\n\n  // Invoked just before rendering when new props or state are being received.\n  // Use this as an opportunity to perform preparation before an update occurs. This method is not called for the initial render.\n  // Note that you cannot call this.setState() here; nor should you do anything else\n  // (e.g. dispatch a Redux action) that would trigger an update to a React component before componentWillUpdate() returns.\n  // If you need to update state in response to props changes, use componentWillReceiveProps() instead.\n  componentWillUpdate(nextProps, nextState) { }\n\n  // Invoked immediately after updating occurs. This method is not called for the initial render.\n  // Use this as an opportunity to operate on the DOM when the component has been updated.\n  // This is also a good place to do network requests as long as you compare the current props to previous props (e.g. a network request may not be necessary if the props have not changed).\n  componentDidUpdate(prevProps, prevState) { }\n\n  // Invoked immediately before a component is unmounted and destroyed.\n  // Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests,\n  // or cleaning up any subscriptions that were created in componentDidMount().\n  componentWillUnmount() { }\n\n  // Error boundaries are React components that catch JavaScript errors anywhere in their child component tree,\n  // log those errors, and display a fallback UI instead of the component tree that crashed.\n  // Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.\n  componentDidCatch() { }\n\n  // This method is required.\n  // It should be pure, meaning that it does not modify component state,\n  // it returns the same result each time it’s invoked, and\n  // it does not directly interact with the browser (use lifecycle methods for this)\n  // It must return one of the following types: react elements, string and numbers, portals, null or booleans.\n  render() {\n    // Contains the props that were defined by the caller of this component.\n    console.log(this.props);\n\n    // Contains data specific to this component that may change over time.\n    // The state is user-defined, and it should be a plain JavaScript object.\n    // If you don’t use it in render(), it shouldn’t be in the state.\n    // For example, you can put timer IDs directly on the instance.\n    // Never mutate this.state directly, as calling setState() afterwards may replace the mutation you made.\n    // Treat this.state as if it were immutable.\n    console.log(this.state);\n\n    return (\n      &#x3C;div>\n        {/* Comment goes here */}\n        Hello, {this.props.name}!\n      &#x3C;/div>\n    );\n  }\n}\n\n// Can be defined as a property on the component class itself, to set the default props for the class.\n// This is used for undefined props, but not for null props.\nComponent.defaultProps = {\n  color: 'blue'\n};\n\ncomponent = new Component();\n\n// By default, when your component’s state or props change, your component will re-render.\n// If your render() method depends on some other data, you can tell React that the component needs re-rendering by calling forceUpdate().\n// Normally you should try to avoid all uses of forceUpdate() and only read from this.props and this.state in render().\ncomponent.forceUpdate(callback)\n\n\n/* *******************************************************************************************\n * REACT.DOM\n * The react-dom package provides DOM-specific methods that can be used at the top level of\n * your app and as an escape hatch to get outside of the React model if you need to.\n * Most of your components should not need to use this module.\n * https://reactjs.org/docs/react-dom.html\n * ******************************************************************************************* */\n\n\n// Render a React element into the DOM in the supplied container and return a reference\n// to the component (or returns null for stateless components).\nReactDOM.render(element, container[, callback])\n\n// Same as render(), but is used to hydrate a container whose HTML contents were rendered\n// by ReactDOMServer. React will attempt to attach event listeners to the existing markup.\nReactDOM.hydrate(element, container[, callback])\n\n// Remove a mounted React component from the DOM and clean up its event handlers and state.\n// If no component was mounted in the container, calling this function does nothing.\n// Returns true if a component was unmounted and false if there was no component to unmount.\nReactDOM.unmountComponentAtNode(container)\n\n// If this component has been mounted into the DOM, this returns the corresponding native browser\n// DOM element. This method is useful for reading values out of the DOM, such as form field values\n// and performing DOM measurements. In most cases, you can attach a ref to the DOM node and avoid\n// using findDOMNode at all.\nReactDOM.findDOMNode(component)\n\n// Creates a portal. Portals provide a way to render children into a DOM node that exists outside\n// the hierarchy of the DOM component.\nReactDOM.createPortal(child, container)\n\n\n/* *******************************************************************************************\n * REACTDOMSERVER\n * The ReactDOMServer object enables you to render components to static markup.\n * https://reactjs.org/docs/react-dom.html\n * ******************************************************************************************* */\n\n\n// Render a React element to its initial HTML. React will return an HTML string.\n// You can use this method to generate HTML on the server and send the markup down on the initial\n// request for faster page loads and to allow search engines to crawl your pages for SEO purposes.\nReactDOMServer.renderToString(element)\n\n// Similar to renderToString, except this doesn’t create extra DOM attributes that React uses\n// internally, such as data-reactroot. This is useful if you want to use React as a simple static\n// page generator, as stripping away the extra attributes can save some bytes.\nReactDOMServer.renderToStaticMarkup(element)\n\n// Render a React element to its initial HTML. Returns a Readable stream that outputs an HTML string.\n// The HTML output by this stream is exactly equal to what ReactDOMServer.renderToString would return.\n// You can use this method to generate HTML on the server and send the markup down on the initial\n// request for faster page loads and to allow search engines to crawl your pages for SEO purposes.\nReactDOMServer.renderToNodeStream(element)\n\n// Similar to renderToNodeStream, except this doesn’t create extra DOM attributes that React uses\n// internally, such as data-reactroot. This is useful if you want to use React as a simple static\n// page generator, as stripping away the extra attributes can save some bytes.\nReactDOMServer.renderToStaticNodeStream(element)\n\n\n/* *******************************************************************************************\n * TYPECHECKING WITH PROPTYPES\n * https://reactjs.org/docs/typechecking-with-proptypes.html\n * ******************************************************************************************* */\n\n\nimport PropTypes from 'prop-types';\n\nMyComponent.propTypes = {\n  // You can declare that a prop is a specific JS type. By default, these\n  // are all optional.\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node,\n\n  // A React element.\n  optionalElement: PropTypes.element,\n\n  // You can also declare that a prop is an instance of a class. This uses\n  // JS's instanceof operator.\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // You can ensure that your prop is limited to specific values by treating\n  // it as an enum.\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // An object that could be one of many types\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // An array of a certain type\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // An object with property values of a certain type\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // An object taking on a particular shape\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // You can chain any of the above with `isRequired` to make sure a warning\n  // is shown if the prop isn't provided.\n  requiredFunc: PropTypes.func.isRequired,\n\n  // A value of any data type\n  requiredAny: PropTypes.any.isRequired,\n\n  // You can also specify a custom validator. It should return an Error\n  // object if the validation fails. Don't `console.warn` or throw, as this\n  // won't work inside `oneOfType`.\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // You can also supply a custom validator to `arrayOf` and `objectOf`.\n  // It should return an Error object if the validation fails. The validator\n  // will be called for each key in the array or object. The first two\n  // arguments of the validator are the array or object itself, and the\n  // current item's key.\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n</code></pre>"},{"url":"/docs/react/createReactApp/","relativePath":"docs/react/createReactApp.md","relativeDir":"docs/react","base":"createReactApp.md","name":"createReactApp","frontmatter":{"title":"npx-create-react-app","weight":1,"seo":{"title":"npx-create-react-app","description":"This is the npx-create-react-app page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"npx-create-react-app","keyName":"property"},{"name":"og:description","value":"This is the npx-create-react-app page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"npx-create-react-app"},{"name":"twitter:description","value":"This is the npx-create-react-app page"}]},"template":"docs"},"html":"<hr>\n<h2>description: takes soooo much time!</h2>\n<h1>Generating React Project</h1>\n<p>takes soooo much time!</p>\n<pre><code class=\"language-text\">npx create-react-app my-app\ncd my-app\nnpm start\n</code></pre>\n<h4>Babel can translate between different versions of javascript so that your code can run on browsers that are limited to ES5 compatibility... included by default with every new react project.</h4>\n<pre><code class=\"language-bash\">|15:25:30|bryan@LAPTOP-9LGJ3JGS:[05-installing-nodejs] 05-installing-nodejs_exitstatus:0__________________________________________________________o>\n\nnpx create-react-app my-app\ny-app\nnpm start\nCreating a new React app in /mnt/c/MY-WEB-DEV/10-React-V3/05-installing-nodejs/my-app.\n\n\nInstalling packages. This might take a couple of minutes.\nInstalling react, react-dom, and react-scripts with cra-template...\n\nyarn add v1.22.5\n[1/4] Resolving packages...\n[2/4] Fetching packages...\ninfo fsevents@1.2.13: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@1.2.13\" is an optional dependency and failed compatibility check. Excluding it from installation.\ninfo fsevents@2.3.2: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@2.3.2\" is an optional dependency and failed compatibility check. Excluding it from installation.\n[3/4] Linking dependencies...\nwarning \"react-scripts > @typescript-eslint/eslint-plugin > tsutils@3.20.0\" has unmet peer dependency \"typescript@>=2.8.0 || >= 3.2.0-dev || >= 3.3.0-dev || >= 3.4.0-dev || >= 3.5.0-dev || >= 3.6.0-dev || >= 3.6.0-beta || >= 3.7.0-dev || >= 3.7.0-beta\".\n[----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------[4/4] Building fresh packages...\nsuccess Saved lockfile.\nsuccess Saved 7 new dependencies.\ninfo Direct dependencies\n├─ cra-template@1.1.2\n├─ react-dom@17.0.2\n├─ react-scripts@4.0.3\n└─ react@17.0.2\ninfo All dependencies\n├─ cra-template@1.1.2\n├─ immer@8.0.1\n├─ react-dev-utils@11.0.4\n├─ react-dom@17.0.2\n├─ react-scripts@4.0.3\n├─ react@17.0.2\n└─ scheduler@0.20.2\nDone in 768.43s.\n\nInstalling template dependencies using yarnpkg...\nyarn add v1.22.5\n[1/4] Resolving packages...\n[2/4] Fetching packages...\ninfo fsevents@2.3.2: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@2.3.2\" is an optional dependency and failed compatibility check. Excluding it from installation.\ninfo fsevents@1.2.13: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@1.2.13\" is an optional dependency and failed compatibility check. Excluding it from installation.\n[3/4] Linking dependencies...\nwarning \"react-scripts > @typescript-eslint/eslint-plugin > tsutils@3.20.0\" has unmet peer dependency \"typescript@>=2.8.0 || >= 3.2.0-dev || >= 3.3.0-dev || >= 3.4.0-dev || >= 3.5.0-dev || >= 3.6.0-dev || >= 3.6.0-beta || >= 3.7.0-dev || >= 3.7.0-beta\".\nwarning \" > @testing-library/user-event@12.8.3\" has unmet peer dependency \"@testing-library/dom@>=7.21.4\".\n[4/4] Building fresh packages...\nsuccess Saved lockfile.\nsuccess Saved 17 new dependencies.\ninfo Direct dependencies\n├─ @testing-library/jest-dom@5.11.10\n├─ @testing-library/react@11.2.5\n├─ @testing-library/user-event@12.8.3\n├─ react-dom@17.0.2\n├─ react@17.0.2\n└─ web-vitals@1.1.1\ninfo All dependencies\n├─ @testing-library/dom@7.30.1\n├─ @testing-library/jest-dom@5.11.10\n├─ @testing-library/react@11.2.5\n├─ @testing-library/user-event@12.8.3\n├─ @types/aria-query@4.2.1\n├─ @types/jest@26.0.22\n├─ @types/testing-library__jest-dom@5.9.5\n├─ css.escape@1.5.1\n├─ css@3.0.0\n├─ dom-accessibility-api@0.5.4\n├─ lz-string@1.4.4\n├─ min-indent@1.0.1\n├─ react-dom@17.0.2\n├─ react@17.0.2\n├─ redent@3.0.0\n├─ strip-indent@3.0.0\n└─ web-vitals@1.1.1\nDone in 706.12s.\nRemoving template package using yarnpkg...\n\nyarn remove v1.22.5\n[1/2] Removing module cra-template...\n[2/2] Regenerating lockfile and installing missing dependencies...\ninfo fsevents@2.3.2: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@2.3.2\" is an optional dependency and failed compatibility check. Excluding it from installation.\ninfo fsevents@1.2.13: The platform \"linux\" is incompatible with this module.\ninfo \"fsevents@1.2.13\" is an optional dependency and failed compatibility check. Excluding it from installation.\nwarning \" > @testing-library/user-event@12.8.3\" has unmet peer dependency \"@testing-library/dom@>=7.21.4\".\nwarning \"react-scripts > @typescript-eslint/eslint-plugin > tsutils@3.20.0\" has unmet peer dependency \"typescript@>=2.8.0 || >= 3.2.0-dev || >= 3.3.0-dev || >= 3.4.0-dev || >= 3.5.0-dev || >= 3.6.0-dev || >= 3.6.0-beta || >= 3.7.0-dev || >= 3.7.0-beta\".\nsuccess Uninstalled packages.\nDone in 619.62s.\n\nSuccess! Created my-app at /mnt/c/MY-WEB-DEV/10-React-V3/05-installing-nodejs/my-app\nInside that directory, you can run several commands:\n\n  yarn start\n    Starts the development server.\n\n  yarn build\n    Bundles the app into static files for production.\n\n  yarn test\n    Starts the test runner.\n\n  yarn eject\n    Removes this tool and copies build dependencies, configuration files\n    and scripts into the app directory. If you do this, you can’t go back!\n\nWe suggest that you begin by typing:\n\n  cd my-app\n  yarn start\n\nCompiled successfully!\n\nYou can now view my-app in the browser.\n\n  Local:            http://localhost:3000\n  On Your Network:  http://172.25.168.12:3000\n\nNote that the development build is not optimized.\nTo create a production build, use yarn build.\n</code></pre>"},{"url":"/docs/react/demo/","relativePath":"docs/react/demo.md","relativeDir":"docs/react","base":"demo.md","name":"demo","frontmatter":{"title":"React Class Components Demo","weight":0,"excerpt":"React Class Components Demo","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h2>React Class Components Demo</h2>\n<h2>React Demo <a id=\"b2b8\"></a></h2>\n<ul>\n<li>ex1 — A Basic React Component</li>\n<li>ex2 — A Basic React Class Component</li>\n<li>ex3 — A Class Component with State</li>\n<li>ex4 — A Class Component that Updates State</li>\n<li>ex5 — A Class Component that Iterates through State</li>\n<li>ex6 — An Example of Parent and Child Components</li>\n</ul>\n<p>With regards to converting an existing HTML, CSS, and JS site into React, first you’ll want to think about how to break up your site into components,</p>\n<ul>\n<li>as well as think about what the general hierarchical component structure of your site will look like.</li>\n<li>From there, it’s a simple matter of copying the relevant HTML for that component and throwing it into the <strong>render method of your component file.</strong></li>\n<li><em>Any methods that are needed for that component to function properly can added onto your new component.</em></li>\n</ul>\n<p>Once you’ve refactored your HTML components into React components, you’ll want to lay them out in the desired hierarchical structure</p>\n<ul>\n<li>with children components being rendered by their parents, as well as ensuring that the parent components are passing down the necessary data as props to their children components.</li>\n</ul>\n<p>ex.)</p>\n<pre><code class=\"language-javascript\">&#x3C;!-- Hello world -->\n&#x3C;div class=\"awesome\" style=\"border: 1px solid red\">\n  &#x3C;label for=\"name\">Enter your name: &#x3C;/label>\n  &#x3C;input type=\"text\" id=\"name\" />\n&#x3C;/div>\n&#x3C;p>Enter your HTML here&#x3C;/p>\n</code></pre>\n<p>Is equivalent to:</p>\n<pre><code class=\"language-jsx\">let NewComponent = React.createClass({\n    render: function () {\n        return (\n            &#x3C;div>\n                {/* Hello world */}\n                &#x3C;div className=\"awesome\" style={{ border: '1px solid red' }}>\n                    &#x3C;label htmlFor=\"name\">Enter your name: &#x3C;/label>\n                    &#x3C;input type=\"text\" id=\"name\" />\n                &#x3C;/div>\n                &#x3C;p>Enter your HTML here&#x3C;/p>\n            &#x3C;/div>\n        );\n    }\n});\n</code></pre>\n<h2>A Basic Component <a id=\"fa4c\"></a></h2>\n<p>Acomponent is some thing that is being rendered in the browser. It could be a button, a form with a bunch of fields in it…etc.…</p>\n<p>React doesn’t place any restrictions on how large or small a component can be.</p>\n<p>You <em>could</em> have an entire static site encapsulated in a single React component, but that would defeat the purpose of using React.</p>\n<p>So the first thing to remember about a component is that a <strong>component must</strong> <strong><em>render</em></strong> <strong>something.</strong></p>\n<p><em>If nothing is being rendered from a component, then React will throw an error.</em></p>\n<p>Inside of <code>BasicComponent.js</code> , first import React at the top of the file. Our most basic of components looks like this:</p>\n<pre><code class=\"language-jsx\">import React from 'react';\n\nconst BasicComponent = () => &#x3C;div>Hello World!&#x3C;/div>;\n\nexport default BasicComponent;\n</code></pre>\n<blockquote>\n<p><em>This is a component that simply returns a div tag with the words Hello World! inside.</em></p>\n<p><em>The last line simply exports our component so that it can be imported</em><br>\n<em>by another file.</em></p>\n</blockquote>\n<p>Notice that this component looks exactly like an anonymous arrow function that we’ve named <code>BasicComponent</code> .</p>\n<p>In fact, that is literally what this is.</p>\n<p>The arrow function then is simply returning the div tag. When a component is written as a function like this one is, it is called a <em>functional</em> component.</p>\n<h2>A Basic Class Component <a id=\"8d7d\"></a></h2>\n<p>The above component is an example of a functional component, which is appropriate since that component is literally nothing more than a function that returns some HTML.</p>\n<p><em>Functional components are great when all you want a component to do is to render some stuff.</em></p>\n<p><em>Components can also be written as classes (although this paradigm is becoming outdated and you should strive to write your components functionally!</em></p>\n<p>For this exercise, we’re going to write a class component that does exactly the same thing as the functional component we just wrote.</p>\n<p>We’ll again need to import React at the top of the file, but we’ll also need to add a little something. Our import statement will look like this:</p>\n<pre><code class=\"language-text\">import React, { Component } from 'react';\n</code></pre>\n<p><strong>So, in addition to importing React, we’re also importing the base Component class that is included in the React library.</strong></p>\n<h3>React lets you define components as classes or functions. <a id=\"ed09\"></a></h3>\n<p>Components defined as classes currently provide more features . To define a React component class, you need to extend <code>React.Component</code>:</p>\n<pre><code class=\"language-javascript\">class Welcome extends React.Component {\n    render() {\n        return &#x3C;h1>Hello, {this.props.name}&#x3C;/h1>;\n    }\n}\n</code></pre>\n<p><strong>The only method you</strong> <strong><em>must</em></strong> <strong>define in a <code>React.Component</code> subclass is called</strong> <a href=\"https://reactjs.org/docs/react-component.html#render\">``</a><strong>.</strong></p>\n<h2><code>render()</code> <a id=\"2c45\"></a></h2>\n<p>The <code>render()</code> method is the only required method in a class component.</p>\n<p>When called, it should examine <code>this.props</code> and <code>this.state</code> and return one of the following types:</p>\n<ul>\n<li><strong>React elements.</strong> Typically created via <a href=\"https://reactjs.org/docs/introducing-jsx.html\">JSX</a>. For example, <code>&#x3C;div /></code> and <code>&#x3C;MyComponent /></code> are React elements that instruct React to render a DOM node, or another user-defined component, respectively.</li>\n<li><strong>Arrays and fragments.</strong> Let you return multiple elements from render. See the documentation on <a href=\"https://reactjs.org/docs/fragments.html\">fragments</a> for more details.</li>\n<li><strong>Portals</strong>. Let you render children into a different DOM subtree. See the documentation on <a href=\"https://reactjs.org/docs/portals.html\">portals</a> for more details.</li>\n<li><strong>String and numbers.</strong> These are rendered as text nodes in the DOM.</li>\n<li><strong>Booleans or <code>null</code></strong>. Render nothing. (Mostly exists to support <code>return test &#x26;&#x26; &#x3C;Child /></code> pattern, where <code>test</code> is boolean.)</li>\n</ul>\n<p>The <code>render()</code> function should be pure, meaning that it does not modify component state, it returns the same result each time it’s invoked, and it does not directly interact with the browser.</p>\n<p>If you need to interact with the browser, perform your work in <code>componentDidMount()</code> or the other lifecycle methods instead. Keeping <code>render()</code> pure makes components easier to think about.</p>\n<blockquote>\n<p><em>Note</em></p>\n<p><code>* will not be invoked if* [</code>](<a href=\"https://reactjs.org/docs/react-component.html#shouldcomponentupdate\">https://reactjs.org/docs/react-component.html#shouldcomponentupdate</a>) <em>returns false.</em></p>\n</blockquote>\n<p>The export statement at the bottom of the file also stays, completely unchanged. Our class component will thus look like this:</p>\n<pre><code class=\"language-jsx\">import React, { Component } from 'react';\n\nclass BasicClassComponent extends Component {\n    render() {\n        return &#x3C;div>Hello World!&#x3C;/div>;\n    }\n}\n\nexport default BasicClassComponent;\n</code></pre>\n<p><strong>Notice that our <code>BasicClassComponent</code> inherits from the base <code>Component</code> class that we imported from the React library, by virtue of the 'extends' keyword.</strong></p>\n<p><em>That being said, there's nothing in this minimal component that takes advantage of any of those inherited methods.</em></p>\n<p><strong>All we have is a method on our component class called <code>render</code> that returns the same div tag.</strong></p>\n<p>If we really were deciding between whether to use a functional component versus a class component to render a simple div tag, then the functional style is more appropriate to use.</p>\n<p>This is because class components are much better suited for handling component state and triggering events based on the component’s <a href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">lifecycle.</a></p>\n<h3>The important takeaways at this point are that there are two types of components, functional and class components, and that functional components are well-suited if you’re just looking to render some HTML. <a id=\"66ab\"></a></h3>\n<p><em>Class components, on the other hand, are much better suited for handling components that require more complex functionality, need to exhibit more varied behavior, and/or need to keep track of some state that may change throughout said component’s lifecycle.</em></p>\n<h2>A Class Component with Some State <a id=\"da0a\"></a></h2>\n<p><strong>Component state is any dynamic data that we want the component to keep track of.</strong></p>\n<blockquote>\n<p>For example, let’s say we have a form component. This form has some input fields that we’d like users to fill out. When a user types characters into an input field, how is that input persisted from the point of view of our form component?</p>\n</blockquote>\n<p><strong>The answer is by using component state!</strong></p>\n<p>There are a few important concepts regarding component state, such as how to update it, pass it to another component, render it, etc.</p>\n<p><strong>Only class components have the ability to persist state, so if at any time you realize that a component needs to keep track of some state, you know that you’ll automatically need a class component instead of a functional component.</strong></p>\n<blockquote>\n<p>It is possible to handle state with functional components but that requires the use of something called the <a href=\"https://reactjs.org/docs/hooks-state.html\">useState() hook</a>. Hooks were added in React 16.8; prior to this release, there was no mechanism to add state to functional components.</p>\n</blockquote>\n<p>Here’s what the above component looks like as a functional component:</p>\n<p>Our class component with state will look a lot like the basic class component we just wrote, but with some exceptions:</p>\n<pre><code class=\"language-jsx\">import React, { Component } from 'react';\n\nclass ClassComponentWithState extends Component {\n    constructor() {\n        super();\n        this.state = {};\n    }\n\n    render() {\n        return &#x3C;div>Hello World!&#x3C;/div>;\n    }\n}\n\nexport default ClassComponentWithState;\n</code></pre>\n<p><strong>So far, the only new thing going on here is the constructor block. If you recall how classes in JavaScript work, classes need constructors.</strong></p>\n<p><strong>Additionally, if a class is extending off of another class and wants access to its parent class’s methods and properties, then the <code>super</code> function needs to be called inside the class's constructor function.</strong></p>\n<h3>Point being, the constructor function and the call to the <code>super</code> function are <em>not</em> associated with React, they are associated with all JavaScript classes. <a id=\"7791\"></a></h3>\n<ul>\n<li>Then there is the ``** property inside the constructor function that is set as an empty object**.</li>\n<li>We're adding a property called <code>state</code> to our class and setting it to an empty object.</li>\n</ul>\n<h3>State objects in React are always just plain old objects. <a id=\"2e40\"></a></h3>\n<h3><strong>So why is it that the basic class component we wrote in the previous exercise had no constructor function within its body?</strong> <a id=\"a76e\"></a></h3>\n<p>That is because we had no need for them since all our class component was doing was rendering some HTML.</p>\n<p><strong>The constructor is needed here because that is where we need to initialize our state object.</strong></p>\n<p><strong>The call to <code>super</code> is needed because we can't reference <code>this</code> inside of our constructor without a call to <code>super</code> first.</strong></p>\n<p>Ok, now let’s actually use this state object.</p>\n<p><em>One very common application of state objects in React components is to render the data being stored inside them within our component’s render function.</em></p>\n<h3>Refactoring our component class to do that: <a id=\"6929\"></a></h3>\n<pre><code class=\"language-jsx\">class ClassComponentWithState extends Component {\n    constructor() {\n        super();\n        this.state = {\n            someData: 8\n        };\n    }\n\n    render() {\n        return &#x3C;div>{`Here's some data to render: ${this.state.someData}`}&#x3C;/div>;\n    }\n}\n\nexport default ClassComponentWithState;\n</code></pre>\n<p>We added a key-value pair to our state object inside our constructor.</p>\n<ul>\n<li>Then we changed the contents of the render function.</li>\n<li>Now, it’s actually rendering the data that we have inside the state object.</li>\n<li>Notice that inside the div tags we’re using a template string literal so that we can access the value of <code>this.state.someData</code> straight inside of our rendered content.</li>\n</ul>\n<p><strong>With Reacts newest version, we can actually now add state to a component without explicitly defining a constructor on the class. We can refactor our class component to look like this:</strong></p>\n<pre><code class=\"language-jsx\">class ClassComponentWithState extends Component {\n    state = {\n        someData: 8\n    };\n\n    render() {\n        return &#x3C;div>{`Here's some data to render: ${this.state.someData}`}&#x3C;/div>;\n    }\n}\n\nexport default ClassComponentWithState;\n</code></pre>\n<p><img src=\"https://miro.medium.com/max/3064/1*6sYhFUNpUkt6xN9kkn4pJQ.png\"></p>\n<p>This new syntax is what is often referred to as ‘syntactic sugar’: under the hood, the React library translates this back into the old constructor code that we first started with, so that the JavaScript remains valid to the JavaScript interpreter.</p>\n<p>The clue to this is the fact that when we want to access some data from the state object, we still need to call it with <code>this.state.someData</code> ; changing it to just <code>state.someData</code> does not work.</p>\n<h2>Class Component Updating State <a id=\"3e29\"></a></h2>\n<p>Great, so we can render some state that our component persists for us.</p>\n<p>However, we said an important use case of component state is to handle <em>dynamic</em> data.</p>\n<p>A single static number isn’t very dynamic at all.</p>\n<p>So now let’s walk through how to update component state.</p>\n<pre><code class=\"language-jsx\">import React, { Component } from 'react';\n\nclass ClassComponentUpdatingState extends Component {\n    constructor() {\n        super();\n        this.state = {\n            aNumber: 8\n        };\n    }\n\n    increment = () => {\n        this.setState({ aNumber: ++this.state.aNumber });\n    };\n\n    decrement = () => {\n        this.setState({ aNumber: --this.state.aNumber });\n    };\n\n    render() {\n        return (\n            &#x3C;div>\n                &#x3C;div>{`Our number: ${this.state.aNumber}`}&#x3C;/div>\n                &#x3C;button onClick={this.increment}>+&#x3C;/button>\n                &#x3C;button onClick={this.decrement}>-&#x3C;/button>\n            &#x3C;/div>\n        );\n    }\n}\n\nexport default ClassComponentUpdatingState;\n</code></pre>\n<p>Notice that we’ve added two methods to our class: <code>increment</code> and <code>decrement</code> .</p>\n<p><code>increment</code> and <code>decrement</code> are methods that <em>we</em> are adding to our class component.</p>\n<p>Unlike the <code>render</code> method, <code>increment</code> and <code>decrement</code> were not already a part of our class component.</p>\n<p>This is why <code>increment</code> and <code>decrement</code> are written as arrow functions, <strong><em>so that they are automatically bound to our class component.</em></strong></p>\n<p>The alternative is using a declaration syntax function with the bind method to bind the context of our methods to the class component.</p>\n<p>The more interesting thing is what is going on within the bodies of these methods.</p>\n<h3>Each calls the <code>setState</code> function. <a id=\"3d7e\"></a></h3>\n<ul>\n<li><code>setState</code> in fact <em>is</em> provided to us by React.</li>\n</ul>\n<p>It is the standard way to update a component's state.</p>\n<p>It's the <em>only</em> way you should ever update a component's state. It may seem more verbose than necessary, but there are good reasons for why you should be doing it this way.</p>\n<p>Unlike the lifecycle methods above (which React calls for you), the methods below are the methods <em>you</em> can call from your components.</p>\n<p>There are just two of them: <code>setState()</code> and <code>forceUpdate()</code>.</p>\n<h4><code>setState()</code></h4>\n<pre><code class=\"language-text\">setState(updater, [callback])\n</code></pre>\n<p><code>setState()</code> enqueues changes to the component state and tells React that this component and its children need to be re-rendered with the updated state. This is the primary method you use to update the user interface in response to event handlers and server responses.</p>\n<p>Think of <code>setState()</code> as a <em>request</em> rather than an immediate command to update the component. For better perceived performance, React may delay it, and then update several components in a single pass. React does not guarantee that the state changes are applied immediately.</p>\n<p><code>setState()</code> does not always immediately update the component. It may batch or defer the update until later. This makes reading <code>this.state</code> right after calling <code>setState()</code> a potential pitfall. Instead, use <code>componentDidUpdate</code> or a <code>setState</code> callback (<code>setState(updater, callback)</code>), either of which are guaranteed to fire after the update has been applied. If you need to set the state based on the previous state, read about the <code>updater</code> argument below.</p>\n<p><code>setState()</code> will always lead to a re-render unless <code>shouldComponentUpdate()</code> returns <code>false</code>. If mutable objects are being used and conditional rendering logic cannot be implemented in <code>shouldComponentUpdate()</code>, calling <code>setState()</code> only when the new state differs from the previous state will avoid unnecessary re-renders.</p>\n<p>The first argument is an <code>updater</code> function with the signature:</p>\n<pre><code class=\"language-text\">(state, props) => stateChange\n</code></pre>\n<p><code>state</code> is a reference to the component state at the time the change is being applied. It should not be directly mutated. Instead, changes should be represented by building a new object based on the input from <code>state</code> and <code>props</code>. For instance, suppose we wanted to increment a value in state by <code>props.step</code>:</p>\n<pre><code class=\"language-text\">this.setState((state, props) => {\n  return {counter: state.counter + props.step};\n});\n</code></pre>\n<p>Both <code>state</code> and <code>props</code> received by the updater function are guaranteed to be up-to-date. The output of the updater is shallowly merged with <code>state</code>.</p>\n<p>The second parameter to <code>setState()</code> is an optional callback function that will be executed once <code>setState</code> is completed and the component is re-rendered. Generally we recommend using <code>componentDidUpdate()</code> for such logic instead.</p>\n<p>You may optionally pass an object as the first argument to <code>setState()</code> instead of a function:</p>\n<pre><code class=\"language-text\">setState(stateChange[, callback])\n</code></pre>\n<p>This performs a shallow merge of <code>stateChange</code> into the new state, e.g., to adjust a shopping cart item quantity:</p>\n<pre><code class=\"language-text\">this.setState({quantity: 2})\n</code></pre>\n<p>This form of <code>setState()</code> is also asynchronous, and multiple calls during the same cycle may be batched together. For example, if you attempt to increment an item quantity more than once in the same cycle, that will result in the equivalent of:</p>\n<pre><code class=\"language-text\">Object.assign(\n  previousState,\n  {quantity: state.quantity + 1},\n  {quantity: state.quantity + 1},\n  ...\n)\n</code></pre>\n<p>Subsequent calls will override values from previous calls in the same cycle, so the quantity will only be incremented once. If the next state depends on the current state, we recommend using the updater function form, instead:</p>\n<pre><code class=\"language-text\">this.setState((state) => {\n  return {quantity: state.quantity + 1};\n});\n</code></pre>\n<h3>So the way to use <code>setState</code> to update a component's state is to pass it an object with each of the state keys you wish to update, along with the updated value. <a id=\"bd27\"></a></h3>\n<p>In our <code>increment</code> method we said \"I would like to update the <code>aNumber</code> property on my component state by adding one to it and then setting the new value as my new <code>aNumber</code> \".</p>\n<p>The same thing happens in our <code>decrement</code> method, only we're subtracting instead of adding.</p>\n<p>Then the other new concept we’re running into here is how to actually call these methods we’ve added to our class.<img src=\"https://miro.medium.com/max/60/1*k8t5QBcMvHDX521sd4pC4g.png?q=20\"><img src=\"https://miro.medium.com/max/856/1*k8t5QBcMvHDX521sd4pC4g.png\"></p>\n<p>We added two HTML button tags within our <code>render</code> function, then in their respective <code>onClick</code> handlers, we specify the method that should be called whenever this button gets clicked. So whenever we click either of the buttons, our state gets updated appropriately and our component will re-render to show the correct value we're expecting.</p>\n<h2>Class Component Iterating State <a id=\"e859\"></a></h2>\n<p>Another common state pattern you’ll see being used in React components is iterating over an array in our state object and rendering each array element in its own tag.</p>\n<blockquote>\n<p>This is often used in order to render lists.</p>\n</blockquote>\n<p>Additionally, we want to be able to easily update lists and have React re-render our updated list.</p>\n<p>We’ll see how both of these are done and how they work together within a single component in order to create the behavior of a dynamic list.</p>\n<pre><code class=\"language-jsx\">import React, { Component } from 'react';\n\nclass ClassComponentIteratingState extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            ingredients: ['flour', 'eggs', 'milk', 'sugar', 'vanilla extract'],\n            newIngredient: ''\n        };\n    }\n\n    handleIngredientInput = (event) => {\n        this.setState({ newIngredient: event.target.value });\n    };\n\n    addIngredient = (event) => {\n        event.preventDefault();\n        const ingredientsList = this.state.ingredients;\n        ingredientsList.push(this.state.newIngredient);\n        this.setState({\n            newIngredient: '',\n            ingredients: ingredientsList\n        });\n    };\n\n    render() {\n        return (\n            &#x3C;div>\n                {this.state.ingredients.map((ingredient) => (\n                    &#x3C;div>{ingredient}&#x3C;/div>\n                ))}\n                &#x3C;form onSubmit={this.addIngredient}>\n                    &#x3C;input type=\"text\" onChange={this.handleIngredientInput} placeholder=\"Add a new ingredient\" value={this.state.newIngredient} />\n                &#x3C;/form>\n            &#x3C;/div>\n        );\n    }\n}\n\nexport default ClassComponentIteratingState;\n</code></pre>\n<p>The first change to note is that our state object now has an ‘ingredients’ array, and a ‘newIngredient’ field that has been initialized to an empty string.</p>\n<p>The ingredients array contains the elements that we’ll want to render in our list.</p>\n<p>The <code>addIngredient</code> and <code>handleIngredientInput</code> methods we've added to our class receives a parameter called 'event'.</p>\n<p>This event object is part of the browser's API.</p>\n<p>When we interact with some DOM element, <strong>such as clicking on an HTML button, the</strong> <strong><em>function that is invoked upon that button being clicked</em></strong> <strong>actually receives the event object.</strong></p>\n<ul>\n<li>So when we type some input into an input tag, we're able grab each character that was typed into the input field through the event object parameter.</li>\n<li>The <code>handleIngredientInput</code> method is what gets invoked every time the user presses a key to enter text in the input box for adding a new ingredient.</li>\n<li>Every character the user types gets persisted in the <code>newIngredient</code> field on the state object.</li>\n</ul>\n<p>We're able to grab the text in the input box using <code>event.target.value</code></p>\n<p><strong>Which holds the value of the string text that is currently in the input box</strong>.</p>\n<blockquote>\n<p>We use that to update our <code>newIngredient</code> string field.</p>\n</blockquote>\n<p>Breaking down the <code>addIngredient</code> method, we see this <code>event.preventDefault()</code> invocation.</p>\n<p>This is because this method will be used upon submitting a form, and it turns out that submitting a form triggers some default form behavior that we don't want to trigger when we submit the form (<strong>namely refreshing the entire page</strong>).</p>\n<blockquote>\n<p><code>event.preventDefault()</code> will prevent this default form behavior, meaning our form will only do what we want it to do when it is submitted.</p>\n</blockquote>\n<p><img src=\"https://miro.medium.com/max/894/1*RN_y7Bk4tb-LLG8vNqGHHA.png\"></p>\n<p>Next, we store a reference to <code>this.state.ingredients</code> in a variable called <code>ingredientsList</code> .</p>\n<p>So we now have a copy of the array that is stored in our state object.</p>\n<p><strong>We want to update the copy of the ingredients array first instead of directly updating the actual array itself in state.</strong></p>\n<p>Now we push whatever value is being stored at our <code>newIngredient</code> field onto the <code>ingredientsList</code> array so that our <code>ingredientsList</code> array is now more up-to-date than our <code>this.state.ingredients</code> array.</p>\n<p>So all we have to do now is call <code>setState</code> appropriately in order to update the value in our state object.</p>\n<p>Additionally, we also set the <code>newIngredient</code> field back to an empty string in order to clear out the input field once we submit a new ingredient.</p>\n<p>Now it's ready to accept more user input!</p>\n<p><img src=\"https://miro.medium.com/max/60/1*LXx7WeP_5wFRfYa45snSEA.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/478/1*LXx7WeP_5wFRfYa45snSEA.png\"></p>\n<p>Looking at our render function, first note the <code>this.state.ingredients.map</code> call.</p>\n<p>This is looping through each ingredient in our <code>ingredients</code> array and returning each one within its own div tag.</p>\n<p>This is a very common pattern for rendering everything inside an array.</p>\n<p>Then we have an HTML form which contains an input field.</p>\n<p>The purpose of this form is to allow a user to add new ingredients to the list. Note that we’re passing our <code>addIngredient</code> method to the form's <code>onSubmit</code> handler.</p>\n<p>This means that our <code>addIngredient</code> method gets invoked whenever our form is submitted.</p>\n<p>Lastly, the input field has an <code>onChange</code> handler that invokes our <code>handleIngredientInput</code> method whenever there is some sort of change in the input field, namely when a user types into it.<img src=\"https://miro.medium.com/max/60/1*S7s9FfaPVlKGyaSwFeId_w.png?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/816/1*S7s9FfaPVlKGyaSwFeId_w.png\"></p>\n<p>Notice that the <code>value</code> field in our input tag reads off of <code>this.state.newIngredient</code> in order to know what value to display.</p>\n<p>So when a user enters text into the input field, the <code>onChange</code> handler is invoked every time, which updates our <code>this.state.newIngredient</code> field, which the input field and then renders.</p>\n<h2>Parent and Child Components <a id=\"413c\"></a></h2>\n<p>A single isolated component isn’t going to do us much good.</p>\n<blockquote>\n<p>The beauty of React lies in the fact that it allows us to compose modular components together.</p>\n<p>Let’s start off with the component we just saw, but let’s change its name to `` .</p>\n</blockquote>\n<pre><code class=\"language-jsx\">import React, { Component } from 'react';\nimport ChildComponent from './ChildComponent';\n\nclass ParentComponent extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            ingredients: ['flour', 'eggs', 'milk', 'sugar', 'vanilla'],\n            newIngredient: ''\n        };\n    }\n\n    handleIngredientInput = (event) => {\n        this.setState({ newIngredient: event.target.value });\n    };\n\n    addIngredient = (event) => {\n        event.preventDefault();\n        const ingredientsList = this.state.ingredients;\n        ingredientsList.push(this.state.newIngredient);\n        this.setState({\n            newIngredient: '',\n            ingredients: ingredientsList\n        });\n    };\n\n    render() {\n        return (\n            &#x3C;div>\n                {this.state.ingredients.map((ingredient) => (\n                    &#x3C;ChildComponent thing={ingredient} />\n                ))}\n                &#x3C;form onSubmit={this.addIngredient}>\n                    &#x3C;input type=\"text\" onChange={this.handleIngredientInput} placeholder=\"Add a new ingredient\" value={this.state.newIngredient} />\n                &#x3C;/form>\n            &#x3C;/div>\n        );\n    }\n}\n\nexport default ParentComponent;\n</code></pre>\n<p>The only two other differences in this component are that we’re importing a <code>ChildComponent</code> and then using it inside our <code>this.state.ingredients.map</code> call.</p>\n<p><code>ChildComponent</code> is another React component.</p>\n<p>Notice that we're using it just as if it were any other HTML tag.</p>\n<p><strong>This is how we lay out our component hierarchy: the ChildComponent is rendered within the ParentComponent.</strong></p>\n<p>We can see this to be the case if we open up the developer console and inspect these elements.<strong>child-left: parent-right</strong></p>\n<p><img src=\"https://miro.medium.com/max/2602/1*q_XLnJ2h1L5yZjNnSKzj5w.png\"></p>\n<p>Note also that we’re passing each ingredient as a ‘thing’ to the ChildComponent component.</p>\n<p>This is how a parent component passes data to a child component. It doesn’t need to be called ‘thing’; you can call it whatever you want.</p>\n<p>Conceptually though, <strong>every piece of data that a parent component passes down to a child component is called a ‘prop’ in React lingo.</strong></p>\n<p>Let’s take a look now at the Child Component. It serves two purposes:</p>\n<ol>\n<li>to render the props data that it gets from a parent component,</li>\n<li>to add the ability for a user to click on it and have it toggle a strikethrough, indicating that the item is ‘complete’.</li>\n</ol>\n<pre><code class=\"language-jsx\">import React, { Component } from 'react';\n\nclass ChildComponent extends Component {\n    constructor() {\n        super();\n        this.state = {\n            clicked: false\n        };\n    }\n\n    handleClick = () => {\n        this.setState({ clicked: !this.state.clicked });\n    };\n\n    render() {\n        const styles = this.state.clicked ? { textDecoration: 'line-through' } : { textDecoration: 'none' };\n        return (\n            &#x3C;div style={styles} onClick={this.handleClick}>\n                {this.props.thing}\n            &#x3C;/div>\n        );\n    }\n}\n\nexport default ChildComponent;\n</code></pre>\n<p>The overall structure of the child component is nothing we haven’t seen. It’s just another class component with its own s<strong>tate object and a method called <code>handleClick</code> .</strong></p>\n<p><strong>A component accesses its props via the <code>this.props</code> object.</strong></p>\n<p><em>Any prop a parent component passes down to a child component is accessible inside the child component's <code>this.prop</code> object.</em></p>\n<p>So our child component keeps its own state that tracks whether the component has been clicked or not.</p>\n<p>Then at the top of the <code>render</code> function, it uses a ternary condition to determine whether the div tag that is being rendered should have a strikethrough or not.</p>\n<p>The <code>handleClick</code> method is then invoked via an <code>onClick</code> handler on the div tag; it does the work of toggling the <code>this.state.clicked</code> Boolean.</p>\n<p>The overall structure of React applications can be represented as a hierarchical tree structure, just like how the DOM itself is structure. There is an overarching root component at the top of the hierarchy that every other component sits underneath. Specifying that a component should be a child of some parent component is as simple as throwing it in the parent component’s render function, just like how we did it in this example<img src=\"https://miro.medium.com/max/60/0*aqqfHMjBXT8PWYJC?q=20\"><img src=\"https://miro.medium.com/max/490/0*aqqfHMjBXT8PWYJC\"><img src=\"https://miro.medium.com/max/1000/0*j9aPKza7Y4htBeQ-.gif\"></p>\n<h2><strong>Core Concepts:</strong> <a id=\"c45d\"></a></h2>\n<h3>1. What is react? <a id=\"068e\"></a></h3>\n<h3>React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It uses components to update and render as your data changes. <a id=\"a7cb\"></a></h3>\n<blockquote>\n<p>React manages the <strong>creation and continuous updating of DOM nodes in your Web page</strong>.</p>\n</blockquote>\n<ul>\n<li><em>It does not handle</em> <a href=\"https://skillcrush.com/blog/what-is-ajax/\"><em>AJAX</em> </a><em>requests, Local Storage or style your website. IT is just a tool to dynamically render content on a webpage as a result of changes in ‘state’. Because it’s function is so limited in scope you may hear it referred to as a library… (not a framework … like Angular for example) and you may also hear it described as unopinionated.</em></li>\n</ul>\n<h3>2. Why use react? <a id=\"643d\"></a></h3>\n<ul>\n<li>Works for teams and helps UI workflow patterns</li>\n<li>The components can be reusable</li>\n<li>Componentized UI is the future of web dev</li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/60/1*pFe_v7Ea--vfdmvR3UcunA.png?q=20\"><img src=\"https://miro.medium.com/max/846/1*pFe_v7Ea--vfdmvR3UcunA.png\"></p>\n<h2>Declarative programming <a id=\"994b\"></a></h2>\n<p>In the same way that you use HTML to <em>declare</em> what the user interface should<br>\nlook like, React provides the same mechanism in its `` method or the higher-level language known as JSX.<img src=\"https://miro.medium.com/max/60/0*MW-A5Dp_v1T0BB1s.png?q=20\"><img src=\"https://miro.medium.com/max/1338/0*MW-A5Dp_v1T0BB1s.png\">React… like HTML is Declarative</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Declarative_programming\">Declarative programming</a> is often defined as any style of programming that is not <a href=\"https://en.wikipedia.org/wiki/Imperative_programming\">imperative</a>.</p>\n<p>A number of other common definitions attempt to define it by simply contrasting it with imperative programming. For example:</p>\n<ul>\n<li>A high-level program that describes what a computation should perform.</li>\n<li>Any programming language that lacks <a href=\"https://en.wikipedia.org/wiki/Side_effect_%28computer_science%29\">side effects</a></li>\n<li>A language with a clear correspondence to <a href=\"https://en.wikipedia.org/wiki/Mathematical_logic\">mathematical logic</a>.<a href=\"https://en.wikipedia.org/wiki/Declarative_programming#cite_note-5\">[5]</a></li>\n</ul>\n<p>These definitions overlap substantially.</p>\n<p>D<strong>eclarative programming is a non-imperative style of programming in which programs describe their desired results without explicitly listing commands or steps that must be performed.</strong></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Functional_programming\">Functional</a> and <a href=\"https://en.wikipedia.org/wiki/Logical_programming\">logical programming</a> languages are characterized by a declarative programming style.</p>\n<p><em>In a</em> <a href=\"https://en.wikipedia.org/wiki/Pure_functional_language\"><em>pure functional language</em></a><em>, such as</em> <a href=\"https://en.wikipedia.org/wiki/Haskell_%28programming_language%29\"><em>Haskell</em></a><em>, all functions are</em> <a href=\"https://en.wikipedia.org/wiki/Pure_function\"><em>without side effects</em></a><em>, and state changes are only represented as functions that transform the state, which is explicitly represented as a</em> <a href=\"https://en.wikipedia.org/wiki/First-class_citizen\"><em>first-class</em></a> <em>object in the program.</em></p>\n<p>— Wikipedia</p>\n<h2>What is a React pure component? <a id=\"abbb\"></a></h2>\n<p><a href=\"https://blog.logrocket.com/react-pure-components-functional/#whatisareactpurecomponent\">Based on the concept of purity in functional programming paradigms, a function is said to be pure if:</a></p>\n<ul>\n<li>Its return value is only determined by its input values</li>\n<li>Its return value is always the same for the same input values</li>\n</ul>\n<p>A React component is considered pure if it renders the same output for the same state and props. For class components like this, React provides the <code>PureComponent</code> base class. Class components that extend the <code>React.PureComponent</code> class are treated as pure components.</p>\n<p>Pure components have some performance improvements and render optimizations since React implements the <code>shouldComponentUpdate()</code> method for them with a shallow comparison for props and state.</p>\n<h2>Are React functional components pure? <a id=\"e24e\"></a></h2>\n<p>Functional components are very useful in React, especially when you want to isolate state management from the component. That’s why they are often called stateless components.</p>\n<p>However, functional components cannot leverage the performance improvements and render optimizations that come with <code>React.PureComponent</code> since they are not classes by definition.</p>\n<p>If you want React to treat a functional component as a pure component, you’ll have to convert the functional component to a class component that extends <code>React.PureComponent</code>.</p>\n<pre><code class=\"language-jsx\">function PercentageStat({ label, score = 0, total = Math.max(1, score) }) {\n    return (\n        &#x3C;div>\n            &#x3C;h6>{label}&#x3C;/h6>\n            &#x3C;span>{Math.round((score / total) * 100)}%&#x3C;/span>\n        &#x3C;/div>\n    );\n}\n\n// CONVERTED TO PURE COMPONENT\nclass PercentageStat extends React.PureComponent {\n    render() {\n        const { label, score = 0, total = Math.max(1, score) } = this.props;\n\n        return (\n            &#x3C;div>\n                &#x3C;h6>{label}&#x3C;/h6>\n                &#x3C;span>{Math.round((score / total) * 100)}%&#x3C;/span>\n            &#x3C;/div>\n        );\n    }\n}\n</code></pre>\n<h2>Reusability <a id=\"9c36\"></a></h2>\n<p>React encourages you to think in terms of reusability as you construct the user<br>\ninterface from elements and components that you create. When you<br>\nmake a list or a button, you can then reuse those components to show different data ‘state’ in the same UI structure as you have built for different data previously.<img src=\"https://miro.medium.com/max/60/0*cBLQ5aBP2qihrT59.jpeg?q=20\"><img src=\"https://miro.medium.com/max/1885/0*cBLQ5aBP2qihrT59.jpeg\"></p>\n<h3>Component-Based <a id=\"a38d\"></a></h3>\n<p>Build encapsulated components that manage their own state, then compose them to make complex UIs.</p>\n<p>Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM.</p>\n<h3>Learn Once, Write Anywhere <a id=\"fc7f\"></a></h3>\n<p>We don’t make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code.</p>\n<p>React can also render on the server using Node and power mobile apps using <a href=\"https://reactnative.dev/\">React Native</a>.</p>\n<h2>Speed <a id=\"345f\"></a></h2>\n<p>Due to the use of a virtual DOM, React handles changes to a Web page more<br>\nintelligently than just string manipulation. It is constantly monitors the<br>\nvirtual DOM for changes. It very efficiently reconciles changes in the virtual<br>\nDOM with what it has already produced in the real DOM. This is what<br>\nmakes React one of the speediest front-end libraries available.<img src=\"https://miro.medium.com/max/60/0*OdOq6pmpXBJhjj7k.png?q=20\"><img src=\"https://miro.medium.com/max/810/0*OdOq6pmpXBJhjj7k.png\"></p>\n<h3>3. Who uses react? <a id=\"c395\"></a></h3>\n<ul>\n<li>Companies such as Facebook app for android and Instagram</li>\n<li><a href=\"https://facebook.github.io/react-native/showcase.html\">Here</a> is a link to a list of other companies who use react.</li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/60/1*Cn9JvaSmkxdLwgXIO9Y8iQ.png?q=20\"><img src=\"https://miro.medium.com/max/1027/1*Cn9JvaSmkxdLwgXIO9Y8iQ.png\">Who uses react</p>\n<h3>4. Setting up react <a id=\"ba44\"></a></h3>\n<ul>\n<li>React can be set up in CodePen for quick practice development by adding react.js, react-dom and babel.</li>\n<li>It can also be set up by downloading a react starter project from GitHub installing node and following these <a href=\"https://github.com/hjb23/ReduxSimpleStarter\">instructions</a>.</li>\n<li>Alternatively it can be set up through NPM like <a href=\"https://www.codementor.io/tamizhvendan/beginner-guide-setup-reactjs-environment-npm-babel-6-webpack-du107r9zr\">this</a>.</li>\n</ul>\n<h3>5. Intro to eco system <a id=\"6ef8\"></a></h3>\n<ul>\n<li>Composition, being able to wrap up sections of code into there own containers so they can be re used.</li>\n<li>How to make a large application? by combining small components to create a larger complex application.</li>\n</ul>\n<h3>6. Imperative vs Declarative <a href=\"https://medium.com/trabe/why-is-react-declarative-a-story-about-function-components-aaae83198f79\">(React is Declarative)</a> <a id=\"ea7a\"></a></h3>\n<ul>\n<li><strong>Imperative, ‘telling to computer HOW to do something’ e.g looping over an array of numbers using a for loop.</strong></li>\n<li><strong>Declarative, is concerned about WHAT we want to happen. e.g using a reduce method on an array.</strong></li>\n<li>Benefits of using declarative code:</li>\n<li>Reduce side effects</li>\n<li>Minimize mutability</li>\n<li>Less Bugs</li>\n</ul>\n<h3>7. Unidirectional Data Flow <a id=\"e6f2\"></a></h3>\n<ul>\n<li>As the state collects from user interaction, the UI gets updated.</li>\n<li>Explicit Mutations</li>\n<li>Whenever the state needs to be updated in our application setState has to be called.</li>\n</ul>\n<pre><code class=\"language-text\">this.setState({\n  highlight: !this.state.highlight,\n})\n</code></pre>\n<h3>7.1. First component <a id=\"d1c5\"></a></h3>\n<ul>\n<li>Components are the building blocks of React.</li>\n<li>They are similar to a collection of HTML,CSS, JS and data specific to that component.</li>\n<li>They can be defined in pure JavaScript or JSX.</li>\n<li>Data is either received from a component’s parent component, or it’s contained in the component itself.</li>\n<li>Applications can be separated into smaller components like this…</li>\n<li>React components can be created using ES6 class like this.</li>\n</ul>\n<pre><code class=\"language-text\">import React from 'react';class Hello extends React.Component {\n  render () {\n    return &#x3C;h1>Hello, {this.props.name}!&#x3C;/h1>;\n  }\n}export default Hello;\n</code></pre>\n<ul>\n<li>At the top with have the code to bring react and react dom libraries in.</li>\n<li>React library is used for the react syntax.</li>\n<li>React DOM is used to update the DOM.</li>\n<li>We then have the Class section which creates the component.</li>\n<li>Render() describes the specific UI for the component.</li>\n<li>Return is used to return the JSX</li>\n<li>And Finally ReactDOM.render is used to update the DOM.</li>\n</ul>\n<h3>8. Data flow with props <a id=\"91ff\"></a></h3>\n<p>Small examples of data flow, see if you can get the code to work.</p>\n<p><a href=\"https://codepen.io/bgoonz/embed/WNpoLbg?default-tab=&#x26;theme-id=\">https://codepen.io/bgoonz/embed/WNpoLbg?default-tab=&#x26;theme-id=</a></p>\n<p>{% embed url=\"<a href=\"https://codepen.io/bgoonz/embed/BaWQGQp?default-tab=%5C&#x26;theme-id=\">https://codepen.io/bgoonz/embed/BaWQGQp?default-tab=\\&#x26;theme-id=</a>\" %}</p>\n<h3>9. Creating lists with map <a id=\"6790\"></a></h3>\n<p>{% embed url=\"<a href=\"https://codepen.io/bgoonz/embed/XWMNoJr?default-tab=%5C&#x26;theme-id=\">https://codepen.io/bgoonz/embed/XWMNoJr?default-tab=\\&#x26;theme-id=</a>\" %}</p>\n<p>The parent component passes down to the child component as props.</p>\n<p>Using props to access names and map to loop through each list item. Then passing this by using props.</p>\n<p>{% embed url=\"<a href=\"https://codepen.io/bgoonz/embed/gOmLZbX?default-tab=%5C&#x26;theme-id=\">https://codepen.io/bgoonz/embed/gOmLZbX?default-tab=\\&#x26;theme-id=</a>\" %}</p>\n<p>Checking data to see if Boolean is true then adding detail to the list.</p>\n<p>{% embed url=\"<a href=\"https://codepen.io/bgoonz/embed/WNpoLbg?default-tab=%5C&#x26;theme-id=\">https://codepen.io/bgoonz/embed/WNpoLbg?default-tab=\\&#x26;theme-id=</a>\" %}</p>\n<h3>10. Prop types <a id=\"18ed\"></a></h3>\n<p>PropTypes allow you to declare the type (string, number, function, etc) of each prop being passed to a component. Then if a prop passed in isn’t of the declared type you’ll get a warning in the console.</p>\n<h2>Excerpt from the React website: <a id=\"7094\"></a></h2>\n<h2>React — A JavaScript library for building user interfaces <a id=\"5047\"></a></h2>\n<blockquote>\n<p><em>A JavaScript library for building user interfaces</em></p>\n</blockquote>\n<h3>Declarative <a id=\"cae4\"></a></h3>\n<p>React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes.</p>\n<p>Declarative views make your code more predictable and easier to debug.</p>\n<h3>A Simple Component <a id=\"b36a\"></a></h3>\n<p>React components implement a <code>render()</code> method that takes input data and returns what to display. This example uses an XML-like syntax called JSX. Input data that is passed into the component can be accessed by <code>render()</code> via <code>this.props</code>.</p>\n<p>JSX is optional and not required to use React. Try the <a href=\"https://babeljs.io/repl/#?presets=react&#x26;code_lz=MYewdgzgLgBApgGzgWzmWBeGAeAFgRgD4AJRBEAGhgHcQAnBAEwEJsB6AwgbgChRJY_KAEMAlmDh0YWRiGABXVOgB0AczhQAokiVQAQgE8AkowAUAcjogQUcwEpeAJTjDgUACIB5ALLK6aRklTRBQ0KCohMQk6Bx4gA\">Babel REPL</a> to see the raw JavaScript code produced by the JSX compilation step.</p>\n<p>In addition to taking input data (accessed via <code>this.props</code>), a component can maintain internal state data (accessed via <code>this.state</code>). When a component’s state data changes, the rendered markup will be updated by re-invoking <code>render()</code>.</p>\n<h3>An Application <a id=\"2936\"></a></h3>\n<p>Using <code>props</code> and <code>state</code>, we can put together a small Todo application. This example uses <code>state</code> to track the current list of items as well as the text that the user has entered. Although event handlers appear to be rendered inline, they will be collected and implemented using event delegation.</p>\n<h3>A Component Using External Plugins <a id=\"2276\"></a></h3>\n<p>React allows you to interface with other libraries and frameworks. This example uses remarkable, an external Markdown library, to convert the <code>&#x3C;textarea></code>’s value in real time.</p>"},{"url":"/docs/react/","relativePath":"docs/react/index.md","relativeDir":"docs/react","base":"index.md","name":"index","frontmatter":{"title":"React","excerpt":"To make it easy to write documentation in plain Markdown, most React are styled using Markdown elements with few additional CSS classes.","seo":{"title":"React","description":"This is the React page","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"React","keyName":"property"},{"name":"og:description","value":"This is the React page","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"React"},{"name":"twitter:description","value":"This is the React page"}]},"template":"docs"},"html":"<h1>React</h1>\n<h1>Examples:</h1>\n<iframe src=\"https://codesandbox.io/embed/react-embeds-w6oec?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"React Embeds\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n<iframe src=\"https://codesandbox.io/embed/thirsty-cori-c9qxq?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"thirsty-cori-c9qxq\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n   \n### For more resources visit:\n<p><a href=\"https://github.com/bgoonz/React_Notes_V3\">bgoonz/React<em>Notes</em>V3A JavaScript library for building user interfaces React makes it painless to create interactive UIs. Design simple…github.com</a></p>\n<p><a href=\"https://gist.github.com/bgoonz/e07d9e7917ae9e98807358d1e7cc4a67\">Use this appendix to get any prerequisite concepts and terminology under your belt:</a></p>\n<p>Here I will walk through a demo…. skip down below for more fundamental examples and resources…</p>\n<h2>Learn Redux:</h2>\n<iframe class=\"block-content\" src=\"https://learning-redux42.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<hr>\n<script src=\"https://gist.github.com/bgoonz/0e9d7ba47f02d41d8cecfd23beecd2b1.js\"></script>\n<h2>ALL CODE:</h2>\n<pre><code class=\"language-jsx\"></code></pre>\n<h2>React Cheat Sheet: <a id=\"8738\"></a></h2>\n<p>React-Tutorial-1:<a href=\"https://replit.com/@bgoonz/react-tutorial-1\">react-tutorial-1A React repl by bgoonzreplit.com</a></p>\n<p>React Boilerplate:<a href=\"https://replit.com/@bgoonz/Reactjs-Babel-Webpack-Boilerplate#index.js\">React.js + Babel + Webpack BoilerplateCreated by @eankeen | The ultimate trifecta - React, Babel, and Webpack - complete with hot module reloading and a…replit.com</a></p>"},{"url":"/docs/react/jsx/","relativePath":"docs/react/jsx.md","relativeDir":"docs/react","base":"jsx.md","name":"jsx","frontmatter":{"title":"Introducing JSX","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h1>Introducing JSX\n\n</h1>\n<p>Consider this variable declaration:</p>\n<p>This funny tag syntax is neither a string nor HTML.</p>\n<p>It is called JSX, and it is a syntax extension to JavaScript. We recommend using it with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript.</p>\n<p>JSX produces React “elements”. We will explore rendering them to the DOM in the <a href=\"https://reactjs.org/docs/rendering-elements.html\">next section</a>. Below, you can find the basics of JSX necessary to get you started.</p>\n<h3>Why JSX?</h3>\n<p>React embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time, and how the data is prepared for display.</p>\n<p>Instead of artificially separating <em>technologies</em> by putting markup and logic in separate files, React <a href=\"https://en.wikipedia.org/wiki/Separation_of_concerns\">separates <em>concerns</em></a> with loosely coupled units called “components” that contain both. We will come back to components in a <a href=\"https://reactjs.org/docs/components-and-props.html\">further section</a>, but if you’re not yet comfortable putting markup in JS, <a href=\"https://www.youtube.com/watch?v=x7cQ3mrcKaY\">this talk</a> might convince you otherwise.</p>\n<p>React <a href=\"https://reactjs.org/docs/react-without-jsx.html\">doesn’t require</a> using JSX, but most people find it helpful as a visual aid when working with UI inside the JavaScript code. It also allows React to show more useful error and warning messages.</p>\n<p>With that out of the way, let’s get started!</p>\n<h3>Embedding Expressions in JSX</h3>\n<p>In the example below, we declare a variable called name and then use it inside JSX by wrapping it in curly braces:</p>\n<p>You can put any valid <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions\">JavaScript expression</a> inside the curly braces in JSX. For example, 2 + 2, user.firstName, or formatName(user) are all valid JavaScript expressions.</p>\n<p>In the example below, we embed the result of calling a JavaScript function, formatName(user), into an &#x3C;h1> element.</p>\n<p><a href=\"https://reactjs.org/redirect-to-codepen/introducing-jsx\">Try it on CodePen</a></p>\n<p>We split JSX over multiple lines for readability. While it isn’t required, when doing this, we also recommend wrapping it in parentheses to avoid the pitfalls of <a href=\"https://stackoverflow.com/q/2846283\">automatic semicolon insertion</a>.</p>\n<h3>JSX is an Expression Too</h3>\n<p>After compilation, JSX expressions become regular JavaScript function calls and evaluate to JavaScript objects.</p>\n<p>This means that you can use JSX inside of if statements and for loops, assign it to variables, accept it as arguments, and return it from functions:</p>\n<h3>Specifying Attributes with JSX</h3>\n<p>You may use quotes to specify string literals as attributes:</p>\n<p>You may also use curly braces to embed a JavaScript expression in an attribute:</p>\n<p>Don’t put quotes around curly braces when embedding a JavaScript expression in an attribute. You should either use quotes (for string values) or curly braces (for expressions), but not both in the same attribute.</p>\n<blockquote>\n<p><strong>Warning:</strong></p>\n<p>Since JSX is closer to JavaScript than to HTML, React DOM uses camelCase property naming convention instead of HTML attribute names.</p>\n<p>For example, class becomes <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/className\">className</a> in JSX, and tabindex becomes <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex\">tabIndex</a>.</p>\n</blockquote>\n<h3>Specifying Children with JSX</h3>\n<p>If a tag is empty, you may close it immediately with />, like XML:</p>\n<p>JSX tags may contain children:</p>\n<h3>JSX Prevents Injection Attacks</h3>\n<p>It is safe to embed user input in JSX:</p>\n<p>By default, React DOM <a href=\"https://stackoverflow.com/questions/7381974/which-characters-need-to-be-escaped-on-html\">escapes</a> any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that’s not explicitly written in your application. Everything is converted to a string before being rendered. This helps prevent <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">XSS (cross-site-scripting)</a> attacks.</p>\n<h3>JSX Represents Objects</h3>\n<p>Babel compiles JSX down to React.createElement() calls.</p>\n<p>These two examples are identical:</p>\n<p>React.createElement() performs a few checks to help you write bug-free code but essentially it creates an object like this:</p>\n<p>These objects are called “React elements”. You can think of them as descriptions of what you want to see on the screen. React reads these objects and uses them to construct the DOM and keep it up to date.</p>\n<p>We will explore rendering React elements to the DOM in the <a href=\"https://reactjs.org/docs/rendering-elements.html\">next section</a>.</p>\n<blockquote>\n<p><strong>Tip:</strong></p>\n<p>We recommend using the <a href=\"https://babeljs.io/docs/en/next/editors\">“Babel” language definition</a> for your editor of choice so that both ES6 and JSX code is properly highlighted.</p>\n</blockquote>"},{"url":"/docs/react/render-elements/","relativePath":"docs/react/render-elements.md","relativeDir":"docs/react","base":"render-elements.md","name":"render-elements","frontmatter":{"title":"Rendering Elements With React","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h1>Rendering Elements\n\n</h1>\n<p>Elements are the smallest building blocks of React apps.</p>\n<p>An element describes what you want to see on the screen:</p>\n<p>Unlike browser DOM elements, React elements are plain objects, and are cheap to create. React DOM takes care of updating the DOM to match the React elements.</p>\n<blockquote>\n<p><strong>Note:</strong></p>\n<p>One might confuse elements with a more widely known concept of “components”. We will introduce components in the <a href=\"https://reactjs.org/docs/components-and-props.html\">next section</a>. Elements are what components are “made of”, and we encourage you to read this section before jumping ahead.</p>\n</blockquote>\n<h2>Rendering an Element into the DOM</h2>\n<p>Let’s say there is a &#x3C;div> somewhere in your HTML file:</p>\n<p>We call this a “root” DOM node because everything inside it will be managed by React DOM.</p>\n<p>Applications built with just React usually have a single root DOM node. If you are integrating React into an existing app, you may have as many isolated root DOM nodes as you like.</p>\n<p>To render a React element into a root DOM node, pass both to <a href=\"https://reactjs.org/docs/react-dom.html#render\">ReactDOM.render()</a>:</p>\n<p><a href=\"https://reactjs.org/redirect-to-codepen/rendering-elements/render-an-element\">Try it on CodePen</a></p>\n<p>It displays “Hello, world” on the page.</p>\n<h2>Updating the Rendered Element</h2>\n<p>React elements are <a href=\"https://en.wikipedia.org/wiki/Immutable_object\">immutable</a>. Once you create an element, you can’t change its children or attributes. An element is like a single frame in a movie: it represents the UI at a certain point in time.</p>\n<p>With our knowledge so far, the only way to update the UI is to create a new element, and pass it to <a href=\"https://reactjs.org/docs/react-dom.html#render\">ReactDOM.render()</a>.</p>\n<p>Consider this ticking clock example:</p>\n<p><a href=\"https://reactjs.org/redirect-to-codepen/rendering-elements/update-rendered-element\">Try it on CodePen</a></p>\n<p>It calls <a href=\"https://reactjs.org/docs/react-dom.html#render\">ReactDOM.render()</a> every second from a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval\">setInterval()</a> callback.</p>\n<blockquote>\n<p><strong>Note:</strong></p>\n<p>In practice, most React apps only call <a href=\"https://reactjs.org/docs/react-dom.html#render\">ReactDOM.render()</a> once. In the next sections we will learn how such code gets encapsulated into <a href=\"https://reactjs.org/docs/state-and-lifecycle.html\">stateful components</a>.</p>\n<p>We recommend that you don’t skip topics because they build on each other.</p>\n</blockquote>\n<h2>React Only Updates What’s Necessary</h2>\n<p>React DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state.</p>\n<p>You can verify by inspecting the <a href=\"https://reactjs.org/redirect-to-codepen/rendering-elements/update-rendered-element\">last example</a> with the browser tools:</p>\n<p><img src=\"https://reactjs.org/c158617ed7cc0eac8f58330e49e48224/granular-dom-updates.gif\"></p>\n<p>Even though we create an element describing the whole UI tree on every tick, only the text node whose contents have changed gets updated by React DOM.</p>\n<p>In our experience, thinking about how the UI should look at any given moment, rather than how to change it over time, eliminates a whole class of bugs.</p>"},{"url":"/docs/tools/data-structures/","relativePath":"docs/tools/data-structures.md","relativeDir":"docs/tools","base":"data-structures.md","name":"data-structures","frontmatter":{"title":"Data Structures","weight":0,"excerpt":"Data Structures","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h2>Data Structures</h2>\n<br>\n<br>\n<br>\n<br>\n<h1>   Algorithms </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://bgoonz-branch-the-algos.vercel.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1>  The Algos Bgoonz Branch </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://thealgorithms.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>"},{"url":"/docs/tools/cloudstorage/","relativePath":"docs/tools/cloudstorage.md","relativeDir":"docs/tools","base":"cloudstorage.md","name":"cloudstorage","frontmatter":{"title":"The google cloud cheat sheet","weight":1,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<p>The gcloud command-line tool cheat sheet</p>\n<h2>The gcloud cheat sheet</h2>\n<p>A roster of go-to gcloud commands for the gcloud tool, Google Cloud’s primary command-line tool.</p>\n<p>(Also included: <a href=\"https://cloud.google.com/sdk/docs/cheatsheet#introductory_primer\">introductory primer</a>, <a href=\"https://cloud.google.com/sdk/docs/cheatsheet#understanding_commands\">understanding commands</a>, and a <a href=\"https://cloud.google.com/sdk/docs/images/gcloud-cheat-sheet.pdf\">printable PDF</a>.)</p>\n<h2>Cheat sheet</h2>\n<h3>Getting started</h3>\n<p>Get going with the gcloud command-line tool.</p>\n<ul>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/init\">gcloud init</a>: Initialize, authorize, and configure the gcloud tool.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/version\">gcloud version</a>: Display version and installed components.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/components/install\">gcloud components install</a>: Install specific components.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/components/update\">gcloud components update</a>: Update your Cloud SDK to the latest version.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/config/set\">gcloud config set project</a>: Set a default Google Cloud project to work on.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/info\">gcloud info</a>: Display current gcloud tool environment details.</li>\n</ul>\n<h3>Help</h3>\n<p>Cloud SDK is happy to help.</p>\n<ul>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/help\">gcloud help</a>: Search the gcloud tool reference documents for specific terms.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/feedback\">gcloud feedback</a>: Provide feedback for the Cloud SDK team.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/topic\">gcloud topic</a>: Supplementary help material for non-command topics like accessibility, filtering, and formatting.</li>\n</ul>\n<h3>Personalization</h3>\n<p>Make the Cloud SDK your own; personalize your configuration with properties.</p>\n<ul>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/config/set\">gcloud config set</a>: Define a property (like compute/zone) for the current configuration.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/config/get-value\">gcloud config get-value</a>: Fetch value of a Cloud SDK property.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/config/list\">gcloud config list</a>: Display all the properties for the current configuration.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/config/configurations/create\">gcloud config configurations create</a>: Create a new named configuration.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/config/configurations/list\">gcloud config configurations list</a>: Display a list of all available configurations.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/config/configurations/activate\">gcloud config configurations activate</a>: Switch to an existing named configuration.</li>\n</ul>\n<h3>Credentials</h3>\n<p>Grant and revoke authorization to Cloud SDK</p>\n<ul>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/auth/login\">gcloud auth login</a>: Authorize Google Cloud access for the gcloud tool with Google user credentials and set current account as active.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/auth/activate-service-account\">gcloud auth activate-service-account</a>: Like gcloud auth login but with service account credentials.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/auth/list\">gcloud auth list</a>: List all credentialed accounts.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/auth/print-access-token\">gcloud auth print-access-token</a>: Display the current account's access token.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/auth/revoke\">gcloud auth revoke</a>: Remove access credentials for an account.</li>\n</ul>\n<h3>Projects</h3>\n<p>Manage project access policies</p>\n<ul>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/projects/describe\">gcloud projects describe</a>: Display metadata for a project (including its ID).</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/projects/add-iam-policy-binding\">gcloud projects add-iam-policy-binding</a>: Add an IAM policy binding to a specified project.</li>\n</ul>\n<h3>Identity &#x26; Access Management</h3>\n<p>Configuring Cloud Identity &#x26; Access Management (IAM) preferences and service accounts</p>\n<ul>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/iam/list-grantable-roles\">gcloud iam list-grantable-roles</a>: List IAM grantable roles for a resource.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/iam/roles/create\">gcloud iam roles create</a>: Create a custom role for a project or org.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/iam/service-accounts/create\">gcloud iam service-accounts create</a>: Create a service account for a project.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/iam/service-accounts/add-iam-policy-binding\">gcloud iam service-accounts add-iam-policy-binding</a>: Add an IAM policy binding to a service account.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/iam/service-accounts/set-iam-policy\">gcloud iam service-accounts set-iam-policy-binding</a>: Replace existing IAM policy binding.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/iam/service-accounts/keys/list\">gcloud iam service-accounts keys list</a>: List a service account's keys.</li>\n</ul>\n<h3>Docker &#x26; Google Kubernetes Engine (GKE)</h3>\n<p>Manage containerized applications on Kubernetes</p>\n<ul>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/auth/configure-docker\">gcloud auth configure-docker</a>: Register the gcloud tool as a Docker credential helper.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/container/clusters/create\">gcloud container clusters create</a>: Create a cluster to run GKE containers.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/container/clusters/list\">gcloud container clusters list</a>: List clusters for running GKE containers.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/container/clusters/get-credentials\">gcloud container clusters get-credentials</a>: Update kubeconfig to get kubectl to use a GKE cluster.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/container/images/list-tags\">gcloud container images list-tags</a>: List tag and digest metadata for a container image.</li>\n</ul>\n<h3>Virtual Machines &#x26; Compute Engine</h3>\n<p>Create, run, and manage VMs on Google infrastructure</p>\n<ul>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/compute/zones/list\">gcloud compute zones list</a>: List Compute Engine zones.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/compute/instances/describe\">gcloud compute instances describe</a>: Display a VM instance's details.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/compute/instances/list\">gcloud compute instances list</a>: List all VM instances in a project.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/compute/disks/snapshot\">gcloud compute disks snapshot</a>: Create snapshot of persistent disks.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/compute/snapshots/describe\">gcloud compute snapshots describe</a>: Display a snapshot's details.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/compute/snapshots/delete\">gcloud compute snapshots delete</a>: Delete a snapshot.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/compute/ssh\">gcloud compute ssh</a>: Connect to a VM instance by using SSH.</li>\n</ul>\n<h3>Serverless &#x26; App Engine</h3>\n<p>Build highly scalable applications on a fully managed serverless platform</p>\n<ul>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/app/deploy\">gcloud app deploy</a>: Deploy your app's code and configuration to the App Engine server.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/app/versions/list\">gcloud app versions list</a>: List all versions of all services deployed to the App Engine server.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/app/browse\">gcloud app browse</a>: Open the current app in a web browser.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/app/create\">gcloud app create</a>: Create an App Engine app within your current project.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/app/logs/read\">gcloud app logs read</a>: Display the latest App Engine app logs.</li>\n</ul>\n<h3>Miscellaneous</h3>\n<p>Commands that might come in handy</p>\n<ul>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/kms/decrypt\">gcloud kms decrypt</a>: Decrypt ciphertext (to a plaintext file) using a Cloud Key Management Service (Cloud KMS) key.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/logging/logs/list\">gcloud logging logs list</a>: List your project's logs.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/sql/backups/describe\">gcloud sql backups describe</a>: Display info about a Cloud SQL instance backup.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference/sql/export/sql\">gcloud sql export sql</a>: Export data from a Cloud SQL instance to a SQL file.</li>\n</ul>\n<h2>Introductory primer</h2>\n<p>A quick primer for getting started with the gcloud command-line tool.</p>\n<h3>Installing the Cloud SDK</h3>\n<p>Install the Cloud SDK with these <a href=\"https://cloud.google.com/sdk/docs/install\">installation instructions</a>.</p>\n<h3>Flags, arguments, and other wondrous additions</h3>\n<p>Arguments can be Positional args or Flags</p>\n<ul>\n<li><strong>Positional args:</strong> Set after command name; must respect order of positional args.</li>\n<li>\n<p><strong>Flags:</strong> Set after positional args; order of flags doesn’t matter.</p>\n<p>A flag can be either a:</p>\n<ul>\n<li><em>Name-value pair</em> (--foo=bar), or</li>\n<li><em>Boolean</em> (--force/no-force).</li>\n</ul>\n<p>Additionally, flags can either be:</p>\n<ul>\n<li><em>Required</em></li>\n<li><em>Optional:</em> in which case, the default value is used, if the flag is not defined</li>\n</ul>\n</li>\n</ul>\n<h3>Global flags</h3>\n<p>Some flags are available throughout the gcloud command-line tool experience, like:</p>\n<ul>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference#--help\">--help</a>: For when in doubt; display detailed help for a command.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference#--project\">--project</a>: If using a project other than the current one.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference#--quiet\">--quiet</a>: Disabling interactive prompting (and applying default values for inputs).</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference#--verbosity\">--verbosity</a>: Can set verbosity levels at debug, info, warning, error, critical, and none.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference#--version\">--version</a>: Display gcloud version information.</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/reference#--format\">--format</a>: Set output format as config, csv, default, diff, disable, flattened, get, json, list, multi, none, object, table, text, value, or yaml.</li>\n</ul>\n<h3>Cleaning up results</h3>\n<p>Extricate the most from your output with the <a href=\"https://cloud.google.com/sdk/gcloud/reference/topic/filters\">filter</a>, <a href=\"https://cloud.google.com/sdk/gcloud/reference/topic/formats\">format</a>, limit, and sort-by flags.</p>\n<p>For Compute Engine instances with prefix us and not machine type f1-micro:</p>\n<p>For a list of projects created on or after 15 January 2018, sorted from oldest to newest, presented as a table with project number, project id and creation time columns with dates and times in local timezone:</p>\n<p>For a list of ten Compute Engine instances with a label my-label (of any value):</p>\n<h2>Understanding commands</h2>\n<p>The underlying patterns for gcloud commands; to aid self-discovery of commands.</p>\n<h3>Finding gcloud commands</h3>\n<p>The gcloud command-line tool is a tree; non-leaf nodes are command groups and leaf nodes are commands. (Also, tab completion works for commands and resources!)</p>\n<p>Most gcloud commands follow the following format:</p>\n<p>For example: gcloud + compute + instances + create + example-instance-1 + --zone=us-central1-a</p>\n<h4>Release level</h4>\n<p><em>Release Level</em> refers to the command’s release status.</p>\n<p><em>Example:</em> alpha for alpha commands, beta for beta commands, no release level needed for GA commands.</p>\n<h4>Component</h4>\n<p><em>Component</em> refers to the different Google Cloud services.</p>\n<p><em>Example:</em> compute for Compute Engine, app for App Engine, etc.</p>\n<h4>Entity</h4>\n<p><em>Entity</em> refers to the plural form of an element or collection of elements under a component.</p>\n<p><em>Example:</em> disks, firewalls, images, instances, regions, zones for compute</p>\n<h4>Operation</h4>\n<p><em>Operation</em> refers to the imperative verb form of the operation to be performed on the entity.</p>\n<p><em>Example:</em> Common operations are describe, list, create/update, delete/clear, import, export, copy, remove, add, reset, restart, restore, run, and deploy.</p>\n<h4>Positional args</h4>\n<p><em>Positional args</em> refer to the required, order-specific arguments needed to execute the command.</p>\n<p><em>Example:</em> &#x3C;INSTANCE_NAMES> is the required positional argument for gcloud compute instances create.</p>\n<h4>Flags</h4>\n<p><em>Flags</em> refer to the additional arguments, --flag-name(=value), passed in to the command after positional args.</p>\n<p><em>Example:</em> --machine-type=&#x3C;MACHINE_TYPE> and --preemptible are optional flags for gcloud compute instances create.</p>"},{"url":"/docs/tools/dev-utilities/","relativePath":"docs/tools/dev-utilities.md","relativeDir":"docs/tools","base":"dev-utilities.md","name":"dev-utilities","frontmatter":{"title":"General Utilities","weight":0,"excerpt":"General Utilities","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h2>General Utilities</h2>\n<br>\n<br>\n<br>\n<h1> Text Tools     </h1>\n<br>\n<iframe src=\"https://devtools42.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1> Ternary Converter   </h1>\n<br>\n<iframe src=\"https://ternary42.netlify.app/\" height=\"800px\" width=\"600px!important\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"Dashed Border Generator\" src=\"https://codepen.io/bgoonz/embed/preview/zYwLVmb?default-tab=result&editable=true&theme-id=dark\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/bgoonz/pen/zYwLVmb\">\n  Dashed Border Generator</a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>"},{"url":"/docs/tools/","relativePath":"docs/tools/index.md","relativeDir":"docs/tools","base":"index.md","name":"index","frontmatter":{"title":"Tools","excerpt":"See some interesting tools developed by the Web-Dev-Hubcommunity to help automate parts of your workflow.","seo":{"title":"Tools","description":"paste to markdown, excel table to markdown, excel to html, cloud storage, text manipulation, ternary converter, github html preview, form builder, border","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Tools","keyName":"property"},{"name":"og:description","value":"paste to markdown, excel table to markdown, excel to html, cloud storage, text manipulation, ternary converter, github html preview, form builder, border","keyName":"property"},{"name":"twitter:card","value":"summary"},{"name":"twitter:title","value":"Tools"},{"name":"twitter:description","value":"This is the tools page"},{"name":"og:image","value":"images/tex.PNG","keyName":"property","relativeUrl":true}]},"template":"docs"},"html":"<br>\n<br>\n<br>\n<br>\n<h1>   Paste To Markdown </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://euangoddard.github.io/clipboard2markdown/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n        \n        \n   \n<br>\n<br>\n<h1>   Paste Excel Tabel To Markdown </h1>\n<iframe  class=\"block-content\" src=\"https://codepen.io/bgoonz/embed/JjNaPpL?default-tab=result&theme-id=light\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1>Paste excel to HTML</h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://pedantic-wing-adbf82.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<h1>  Cloud Storage </h1>\n<br>\n<h2> Up to 1TB of cloud Storage for file sharing!</h2>\n<iframe src=\"https://onedrive.live.com/embed?cid=D21009FDD967A241&resid=D21009FDD967A241%21538729&authkey=AHSDSyoYqzg2K2E\" height=\"275px\" width=\"17%\" style=\"zoom:0.69; align-self:center;display:auto;display: block;border:12px solid gold;\">\n</iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<h1> Text Tools     </h1>\n<br>\n<iframe src=\"https://devtools42.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1> Ternary Converter   </h1>\n<br>\n<iframe src=\"https://ternary42.netlify.app/\" height=\"800px\" width=\"600px!important\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1>  Github HTML Render from link </h1>\n<br>\n<iframe src=\"https://githtmlpreview.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1> Form Builder GUI </h1>\n<br>\n<iframe  src=\"https://fourm-builder-gui.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<h1> Border Builder </h1>\n<br>\n<iframe  src=\"https://codepen.io/bgoonz/embed/zYwLVmb?default-tab=html%2Cresult\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<h1>                </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://ds-algo-official.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n        \n        \n        \n<br>\n<br>\n<br>\n<h1>                </h1>\n<br>\n        \n        \n <iframe height=\"800\" style=\"width: 100%;\" scrolling=\"yes\" title=\"Simple Typing Carousel \" src=\"https://codepen.io/bgoonz/embed/ExZvGoZ?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/bgoonz/pen/ExZvGoZ\">\n  Simple Typing Carousel </a> by Bryan C Guner (<a href=\"https://codepen.io/bgoonz\">@bgoonz</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>"},{"url":"/docs/tools/markdown-html/","relativePath":"docs/tools/markdown-html.md","relativeDir":"docs/tools","base":"markdown-html.md","name":"markdown-html","frontmatter":{"title":"md and html","weight":1,"excerpt":"Tools For Markdown & Html","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h2>Tools For Markdown &#x26; Html</h2>\n<br>\n<br>\n<br>\n<br>\n<h1>   Paste To Markdown </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://euangoddard.github.io/clipboard2markdown/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n        \n        \n   \n<br>\n<br>\n<h1>   Paste Excel Tabel To Markdown </h1>\n<iframe  class=\"block-content\" src=\"https://codepen.io/bgoonz/embed/JjNaPpL?default-tab=result&theme-id=light\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1>Paste excel to HTML</h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://pedantic-wing-adbf82.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>"},{"url":"/docs/tools/more-tools/","relativePath":"docs/tools/more-tools.md","relativeDir":"docs/tools","base":"more-tools.md","name":"more-tools","frontmatter":{"title":"more tools","weight":0,"excerpt":"more tools that I have created or collaborated on.","seo":{"title":"","description":"embeded developer tools and utilities","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<br>\n<br>\n<br>\n<br>\n<h1>   Algorithms </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://bgoonz-branch-the-algos.vercel.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<h1>   Excel To Markdown Table</h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://codepen.io/bgoonz/embed/JjNaPpL?default-tab=result&theme-id=dark\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<h1>     Resource Archive           </h1>\n<br>\n<iframe src=\"https://resourcerepo2.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<h1>   Lambda Student Site </h1>\n<br>\n<iframe class=\"inner\" src=\"https://lambda-resources.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<h1>  Interview     </h1>\n<br>\n<iframe  src=\"https://web-dev-interview-prep-quiz-website.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<h1>   Speach Recognition api </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://random-static-html-deploys.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<h1>  The Algos Bgoonz Branch </h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://thealgorithms.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<h1>Markdown Templates</h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://markdown-templates-42.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<h1>CURL</h1>\n<br>\n<iframe  class=\"block-content\" src=\"https://bgoonz.github.io/everything-curl/index.html\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<h1> Text Tools     </h1>\n<br>\n<iframe src=\"https://devtools42.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1> Ternary Converter   </h1>\n<br>\n<iframe src=\"https://ternary42.netlify.app/\" height=\"800px\" width=\"600px!important\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1>  Github HTML Render from link </h1>\n<br>\n<iframe src=\"https://githtmlpreview.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<h1> Form Builder GUI </h1>\n<br>\n<iframe  src=\"https://fourm-builder-gui.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<h1> Border Builder </h1>\n<br>\n<iframe  src=\"https://codepen.io/bgoonz/embed/zYwLVmb?default-tab=html%2Cresult\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>\n<br>\n<br>\n<h2>Archives</h2>\n<br>\n<br>\n<br>\n<h1> Original Blog Site </h1>\n<br>\n<iframe src=\"https://web-dev-resource-hub.netlify.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video\n        player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n        encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<br>\n<br>"},{"url":"/docs/articles/node-api-express/","relativePath":"docs/articles/node-api-express.md","relativeDir":"docs/articles","base":"node-api-express.md","name":"node-api-express","frontmatter":{"title":"Node APIs With Express","sections":[],"seo":{"title":" Node APIs With Express","description":"Review-Of-Previous-Concepts","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h3>Overview</h3>\n<p><code>REST</code> is a generally agreed-upon set of principles and constraints. They are <strong>recommendations</strong>, not a standard.</p>\n<pre><code>// inside /api/apiRoutes.js &#x3C;- this can be place anywhere and called anything\nconst express = require('express');\n\n// if the other routers are not nested inside /api then the paths would change\nconst userRoutes = require('./users/userRoutes');\nconst productRoutes = require('./products/productRoutes');\nconst clientRoutes = require('./clients/clientRoutes');\n\nconst router = express.Router(); // notice the Uppercase R\n\n// this file will only be used when the route begins with \"/api\"\n// so we can remove that from the URLs, so \"/api/users\" becomes simply \"/users\"\nrouter.use('/users', userRoutes);\nrouter.use('/products', productRoutes);\nrouter.use('/clients', clientRoutes);\n\n// .. and any other endpoint related to the user's resource\n\n// after the route has been fully configured, we then export it so it can be required where needed\nmodule.exports = router; // standard convention dictates that this is the last line on the file\n</code></pre>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*9xpwm_56lgvHkFTKsmoMqg.gif\" class=\"graf-image\" /></figure>### Objective 1 — explain the role of a foreign key\n<h3>Overview</h3>\n<p><strong>Foreign keys</strong> are a type of table field used for creating links between tables. Like <strong>primary keys</strong>, they are most often integers that identify (rather than store) data. However, whereas a primary key is used to id rows in a table, foreign keys are used to connect a record in one table to a record in a second table.</p>\n<h3>Follow Along</h3>\n<p>Consider the following <code>farms</code> and <code>ranchers</code> tables.</p>\n<p><a href=\"https://www.notion.so/b88ebcd8fa3a4fa3a36cf99c939f6067\" class=\"markup--anchor markup--p-anchor\">Untitled</a></p>\n<p><a href=\"https://www.notion.so/a4ccaec69c484ce0bcd03d2e8a83e489\" class=\"markup--anchor markup--p-anchor\">Untitled</a></p>\n<p>The <code>farm_id</code> in the <code>ranchers</code> table is an example of a <code>foreign key</code>. Each entry in the <code>farm_id</code> (foreign key) column corresponds to an <code>id</code> (primary key) in the <code>farms</code> table. This allows us to track which farm each rancher belongs to while keeping the tables normalized.</p>\n<p>If we could only see the <code>ranchers</code> table, we would know that John, Jane, and Jen all work together and that Jim and Jay also work together. However, to know where any of them work, we would need to look at the <code>farms</code> table.</p>\n<h3>Challenge</h3>\n<p>Open <a href=\"https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_in\" class=\"markup--anchor markup--p-anchor\">SQLTryIT (Links to an external site.)</a>.</p>\n<p>How many records in the products table belong to the category “confections”?</p>\n<h3>Objective 2 — query data from multiple tables</h3>\n<p>Now that we understand the basics of querying data from a single table, let’s move on to selecting data from multiple tables using JOIN operations.</p>\n<h3>Overview</h3>\n<p>We can use a <code>JOIN</code> to combine query data from multiple tables using a single <code>SELECT</code> statement.</p>\n<p>There are different types of joins; some are listed below:</p>\n<ul>\n<li><span id=\"9c7e\">inner joins.</span></li>\n<li><span id=\"7cd3\">outer joins.</span></li>\n<li><span id=\"96e6\">left joins.</span></li>\n<li><span id=\"0e55\">right joins.</span></li>\n<li><span id=\"d582\">cross joins.</span></li>\n<li><span id=\"6716\">non-equality joins.</span></li>\n<li><span id=\"b7f0\">self joins.</span></li>\n</ul>\n<p>Using <code>joins</code> requires that the two tables of interest contain at least one field with shared information. For example, if a <em>departments</em> table has an <em>id</em> field, and an employee table has a <em>department</em>id_ field, and the values that exist in the <em>id</em> column of the <em>departments</em> table live in the <em>department</em>id_ field of the employee table, we can use those fields to join both tables like so:</p>\n<pre><code>select * from employees\njoin departments on employees.department_id = departments.id\n</code></pre>\n<p>This query will return the data from both tables for every instance where the <code>ON</code> condition is true. If there are employees with no value for department<em>id or where the value stored in the field does not correspond to an existing id in the</em> departments <em>table, then that record will NOT be returned. In a similar fashion, any records from the</em> departments <em>table that don't have an employee associated with them will also be omitted from the results. Basically, if the</em> id* does not show as the value of department_id for an employee, it won't be able to join.</p>\n<p>We can shorten the condition by giving the table names an alias. This is a common practice. Below is the same example using aliases, picking which fields to return and sorting the results:</p>\n<pre><code>select d.id, d.name, e.id, e.first_name, e.last_name, e.salary\nfrom employees as e\njoin departments as d\n  on e.department_id = d.id\norder by d.name, e.last_name\n</code></pre>\n<p>Notice that we can take advantage of white space and indentation to make queries more readable.</p>\n<p>There are several ways of writing joins, but the one shown here should work on all database management systems and avoid some pitfalls, so we recommend it.</p>\n<p>The syntax for performing a similar join using Knex is as follows:</p>\n<pre><code>db('employees as e')\n  .join('departments as d', 'e.department_id', 'd.id')\n  .select('d.id', 'd.name', 'e.first_name', 'e.last_name', 'e.salary')\n</code></pre>\n<h3>Follow Along</h3>\n<p>A good explanation of how the different types of joins can be seen <a href=\"https://www.w3resource.com/sql/joins/sql-joins.php\" class=\"markup--anchor markup--p-anchor\">in this article from w3resource.com (Links to an external site.)</a>.</p>\n<h3>Challenge</h3>\n<p>Use <a href=\"https://www.w3schools.com/Sql/tryit.asp?filename=trysql_select_top\" class=\"markup--anchor markup--p-anchor\">this online tool (Links to an external site.)</a> to write the following queries:</p>\n<ul>\n<li><span id=\"9ccf\">list the products, including their category name.</span></li>\n<li><span id=\"b07f\">list the products, including the supplier name.</span></li>\n<li><span id=\"7b08\">list the products, including both the category name and supplier name.</span></li>\n</ul>\n<h3>What is SQL Joins?</h3>\n<p>An SQL JOIN clause combines rows from two or more tables. It creates a set of rows in a temporary table.</p>\n<h3>How to Join two tables in SQL?</h3>\n<p>A JOIN works on two or more tables if they have at least one common field and have a relationship between them.</p>\n<p>JOIN keeps the base tables (structure and data) unchanged.</p>\n<h3>Join vs. Subquery</h3>\n<ul>\n<li><span id=\"eeea\">JOINs are faster than a subquery and it is very rare that the opposite.</span></li>\n<li><span id=\"3b2e\">In JOINs the RDBMS calculates an execution plan, that can predict, what data should be loaded and how much it will take to processed and as a result this process save some times, unlike the subquery there is no pre-process calculation and run all the queries and load all their data to do the processing.</span></li>\n<li><span id=\"84ce\">A JOIN is checked conditions first and then put it into table and displays; where as a subquery take separate temp table internally and checking condition.</span></li>\n<li><span id=\"3002\">When joins are using, there should be connection between two or more than two tables and each table has a relation with other while subquery means query inside another query, has no need to relation, it works on columns and conditions.</span></li>\n</ul>\n<h3>SQL JOINS: EQUI JOIN and NON EQUI JOIN</h3>\n<p>The are two types of SQL JOINS — EQUI JOIN and NON EQUI JOIN</p>\n<ol>\n<li><span id=\"31e6\">SQL EQUI JOIN :</span></li>\n</ol>\n<p>The SQL EQUI JOIN is a simple SQL join uses the equal sign(=) as the comparison operator for the condition. It has two types — SQL Outer join and SQL Inner join.</p>\n<ol>\n<li><span id=\"d86b\">SQL NON EQUI JOIN :</span></li>\n</ol>\n<p>The <strong>SQL NON EQUI JOIN</strong> is a join uses comparison operator other than the equal sign like >, &#x3C;, >=, &#x3C;= with the condition.</p>\n<p><strong>SQL EQUI JOIN : INNER JOIN and OUTER JOIN</strong></p>\n<p>The SQL EQUI JOIN can be classified into two types — INNER JOIN and OUTER JOIN</p>\n<ol>\n<li><span id=\"c9b5\">SQL INNER JOIN</span></li>\n</ol>\n<p>This type of EQUI JOIN returns all rows from tables where the key record of one table is equal to the key records of another table.</p>\n<ol>\n<li><span id=\"6bc6\">SQL OUTER JOIN</span></li>\n</ol>\n<p>This type of EQUI JOIN returns all rows from one table and only those rows from the secondary table where the joined condition is satisfying i.e. the columns are equal in both tables.</p>\n<p>In order to perform a JOIN query, the required information we need are:</p>\n<p><strong>a)</strong> The name of the tables<strong>b)</strong> Name of the columns of two or more tables, based on which a condition will perform.</p>\n<p><strong>Syntax:</strong></p>\n<pre><code>FROM table1\njoin_type table2\n[ON (join_condition)]\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p><a href=\"https://www.notion.so/3e2d9e2f028e4b7abf2da81156a54364\" class=\"markup--anchor markup--p-anchor\">Untitled</a></p>\n<p><strong>Pictorial Presentation of SQL Joins:</strong></p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*bbwqJEpV2a9WZG-t.gif\" class=\"graf-image\" /></figure>**Example:**\n<p><strong>Sample table: company</strong></p>\n<p><strong>Sample table: foods</strong></p>\n<p>To join two tables ‘company’ and ‘foods’, the following SQL statement can be used :</p>\n<p><strong>SQL Code:</strong></p>\n<pre><code>SELECT  company.company_id,company.company_name,\nfoods.item_id,foods.item_name\nFROM company,foods;\n</code></pre>\n<p>Copy</p>\n<p>Output:</p>\n<pre><code>COMPAN COMPANY_NAME              ITEM_ID  ITEM_NAME\n------ ------------------------- -------- ---------------\n18     Order All                 1        Chex Mix\n18     Order All                 6        Cheez-It\n18     Order All                 2        BN Biscuit\n18     Order All                 3        Mighty Munch\n18     Order All                 4        Pot Rice\n18     Order All                 5        Jaffa Cakes\n18     Order All                 7        Salt n Shake\n15     Jack Hill Ltd             1        Chex Mix\n15     Jack Hill Ltd             6        Cheez-It\n15     Jack Hill Ltd             2        BN Biscuit\n15     Jack Hill Ltd             3        Mighty Munch\n15     Jack Hill Ltd             4        Pot Rice\n15     Jack Hill Ltd             5        Jaffa Cakes\n15     Jack Hill Ltd             7        Salt n Shake\n16     Akas Foods                1        Chex Mix\n16     Akas Foods                6        Cheez-It\n16     Akas Foods                2        BN Biscuit\n16     Akas Foods                3        Mighty Munch\n16     Akas Foods                4        Pot Rice\n16     Akas Foods                5        Jaffa Cakes\n16     Akas Foods                7        Salt n Shake\n.........\n.........\n.........\n</code></pre>\n<p><strong>JOINS: Relational Databases</strong></p>\n<ul>\n<li><span id=\"74c4\"><a href=\"https://www.w3resource.com/oracle/joins/index.php\" class=\"markup--anchor markup--li-anchor\"><strong>Oracle JOINS</strong></a></span></li>\n<li><span id=\"f8da\"><a href=\"https://www.w3resource.com/mysql/advance-query-in-mysql/mysql-joins.php\" class=\"markup--anchor markup--li-anchor\"><strong>MySQL JOINS</strong></a></span></li>\n<li><span id=\"33a5\"><a href=\"https://www.w3resource.com/PostgreSQL/postgresql-join.php\" class=\"markup--anchor markup--li-anchor\"><strong>PostgreSQL JOINS</strong></a></span></li>\n<li><span id=\"b578\"><a href=\"https://www.w3resource.com/sqlite/sqlite-inner-join.php\" class=\"markup--anchor markup--li-anchor\"><strong>SQLite JOINS</strong></a></span></li>\n</ul>\n<p><strong>Key points to remember:</strong></p>\n<p><em>Click on the following to get the slides presentation -</em></p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*lP_nQo6VtVu_68nx.png\" class=\"graf-image\" /></figure>###\n<p><strong>Practice SQL Exercises</strong></p>\n<ul>\n<li><span id=\"0765\"><a href=\"https://www.w3resource.com/sql-exercises/index.php\" class=\"markup--anchor markup--li-anchor\"><strong>SQL Exercises, Practice, Solution</strong></a></span></li>\n<li><span id=\"4cd9\"><a href=\"https://www.w3resource.com/sql-exercises/sql-retrieve-from-table.php\" class=\"markup--anchor markup--li-anchor\"><strong>SQL Retrieve data from tables [33 Exercises]</strong></a></span></li>\n<li><span id=\"7204\"><a href=\"https://www.w3resource.com/sql-exercises/sql-boolean-operators.php\" class=\"markup--anchor markup--li-anchor\"><strong>SQL Boolean and Relational operators [12 Exercises]</strong></a></span></li>\n<li><span id=\"3d4e\"><a href=\"https://www.w3resource.com/sql-exercises/sql-wildcard-special-operators.php\" class=\"markup--anchor markup--li-anchor\"><strong>SQL Wildcard and Special operators [22 Exercises]</strong></a></span></li>\n<li><span id=\"7afb\"><a href=\"https://www.w3resource.com/sql-exercises/sql-aggregate-functions.php\" class=\"markup--anchor markup--li-anchor\"><strong>SQL Aggregate Functions [25 Exercises]</strong></a></span></li>\n<li><span id=\"cc71\"><a href=\"https://www.w3resource.com/sql-exercises/sql-fromatting-output-exercises.php\" class=\"markup--anchor markup--li-anchor\"><strong>SQL Formatting query output [10 Exercises]</strong></a></span></li>\n<li><span id=\"77bf\"><a href=\"https://www.w3resource.com/sql/joins/s/sql-exercises/ql-exercises-quering-on-multiple-table.php\" class=\"markup--anchor markup--li-anchor\"><strong>SQL Quering on Multiple Tables [7 Exercises]</strong></a></span></li>\n<li><span id=\"0bc2\"><a href=\"https://www.w3resource.com/sql-exercises/sorting-and-filtering-hr/index.php\" class=\"markup--anchor markup--li-anchor\"><strong>FILTERING and SORTING on HR Database [38 Exercises]</strong></a></span></li>\n<li><span id=\"e28a\">SQL JOINS</span></li>\n<li><span id=\"84a2\"><a href=\"https://www.w3resource.com/sql-exercises/sql-joins-exercises.php\" class=\"markup--anchor markup--li-anchor\"><strong>SQL JOINS [29 Exercises]</strong></a></span></li>\n<li><span id=\"f97b\"><a href=\"https://www.w3resource.com/sql-exercises/joins-hr/index.php\" class=\"markup--anchor markup--li-anchor\"><strong>SQL JOINS on HR Database [27 Exercises]</strong></a></span></li>\n<li>\n<span id=\"b33e\">  \n</span>\n</li>\n<li><span id=\"0983\">SQL SUBQUERIES</span></li>\n<li><span id=\"423b\"><a href=\"https://www.w3resource.com/sql-exercises/subqueries/index.php\" class=\"markup--anchor markup--li-anchor\"><strong>SQL SUBQUERIES [39 Exercises]</strong></a></span></li>\n<li><span id=\"a4d7\"><a href=\"https://www.w3resource.com/sql-exercises/sql-subqueries-exercises.php\" class=\"markup--anchor markup--li-anchor\"><strong>SQL SUBQUERIES on HR Database [55 Exercises]</strong></a></span></li>\n<li>\n<span id=\"b63d\">  \n</span>\n</li>\n<li><span id=\"2c29\"><a href=\"https://www.w3resource.com/sql-exercises/union/sql-union.php\" class=\"markup--anchor markup--li-anchor\"><strong>SQL Union[9 Exercises]</strong></a></span></li>\n<li><span id=\"92c5\"><a href=\"https://www.w3resource.com/sql-exercises/view/sql-view.php\" class=\"markup--anchor markup--li-anchor\"><strong>SQL View[16 Exercises]</strong></a></span></li>\n<li><span id=\"d3e5\"><a href=\"https://www.w3resource.com/sql-exercises/sql-user-management.php\" class=\"markup--anchor markup--li-anchor\"><strong>SQL User Account Management [16 Exercise]</strong></a></span></li>\n<li><span id=\"e280\">Movie Database</span></li>\n<li><span id=\"5198\"><a href=\"https://www.w3resource.com/sql-exercises/movie-database-exercise/basic-exercises-on-movie-database.php\" class=\"markup--anchor markup--li-anchor\"><strong>BASIC queries on movie Database [10 Exercises]</strong></a></span></li>\n<li><span id=\"ddd5\"><a href=\"https://www.w3resource.com/sql-exercises/movie-database-exercise/subqueries-exercises-on-movie-database.php\" class=\"markup--anchor markup--li-anchor\"><strong>SUBQUERIES on movie Database [16 Exercises]</strong></a></span></li>\n<li><span id=\"5363\"><a href=\"https://www.w3resource.com/sql-exercises/movie-database-exercise/joins-exercises-on-movie-database.php\" class=\"markup--anchor markup--li-anchor\"><strong>JOINS on movie Database [24 Exercises]</strong></a></span></li>\n<li>\n<span id=\"b248\">  \n</span>\n</li>\n<li><span id=\"d5ba\">Soccer Database</span></li>\n<li><span id=\"a586\"><a href=\"https://www.w3resource.com/sql-exercises/soccer-database-exercise/index.php\" class=\"markup--anchor markup--li-anchor\"><strong>Introduction</strong></a></span></li>\n<li><span id=\"d585\"><a href=\"https://www.w3resource.com/sql-exercises/soccer-database-exercise/basic-exercises-on-soccer-database.php\" class=\"markup--anchor markup--li-anchor\"><strong>BASIC queries on soccer Database [29 Exercises]</strong></a></span></li>\n<li><span id=\"b626\"><a href=\"https://www.w3resource.com/sql-exercises/soccer-database-exercise/subqueries-exercises-on-soccer-database.php\" class=\"markup--anchor markup--li-anchor\"><strong>SUBQUERIES on soccer Database [33 Exercises]</strong></a></span></li>\n<li><span id=\"95e1\"><a href=\"https://www.w3resource.com/sql-exercises/soccer-database-exercise/joins-exercises-on-soccer-database.php\" class=\"markup--anchor markup--li-anchor\"><strong>JOINS queries on soccer Database [61 Exercises]</strong></a></span></li>\n<li>\n<span id=\"05ba\">  \n</span>\n</li>\n<li><span id=\"2b7b\">Hospital Database</span></li>\n<li><span id=\"788d\"><a href=\"https://www.w3resource.com/sql-exercises/hospital-database-exercise/index.php\" class=\"markup--anchor markup--li-anchor\"><strong>Introduction</strong></a></span></li>\n<li><span id=\"0c32\"><a href=\"https://www.w3resource.com/sql-exercises/hospital-database-exercise/sql-exercise-on-hospital-database.php\" class=\"markup--anchor markup--li-anchor\"><strong>BASIC, SUBQUERIES, and JOINS [39 Exercises]</strong></a></span></li>\n<li>\n<span id=\"228b\">  \n</span>\n</li>\n<li><span id=\"54d4\">Employee Database</span></li>\n<li><span id=\"c6fb\"><a href=\"https://www.w3resource.com/sql-exercises/employee-database-exercise/index.php\" class=\"markup--anchor markup--li-anchor\"><strong>BASIC queries on employee Database [115 Exercises]</strong></a></span></li>\n<li><span id=\"0419\"><a href=\"https://www.w3resource.com/sql-exercises/employee-database-exercise/subqueries-exercises-on-employee-database.php\" class=\"markup--anchor markup--li-anchor\"><strong>SUBQUERIES on employee Database [77 Exercises]</strong></a></span></li>\n<li>\n<span id=\"cb3e\">  \n</span>\n</li>\n<li><span id=\"b3da\">More to come!</span></li>\n</ul>\n<h3>Objective 3 — write database access methods</h3>\n<h3>Overview</h3>\n<p>While we can write database code directly into our endpoints, best practices dictate that all database logic exists in separate, modular methods. These files containing database access helpers are often called <strong>models</strong></p>\n<h3>Follow Along</h3>\n<p>To handle CRUD operations for a single resource, we would want to create a <strong>model</strong> (or database access file) containing the following methods:</p>\n<pre><code>function find() {\n}\n\nfunction findById(id) {\n}\n\nfunction add(user) {\n}\n\nfunction update(changes, id) {\n}\n\nfunction remove(id) {\n}\n</code></pre>\n<p>Each of these functions would use Knex logic to perform the necessary database operation.</p>\n<pre><code>function find() {\n  return db('users');\n}\n</code></pre>\n<p>For each method, we can choose what value to return. For example, we may prefer <code>findById()</code> to return a single <code>user</code> object rather than an array.</p>\n<pre><code>function findById(id) {\n// first() returns the first entry in the db matching the query\n  return db('users').where({ id }).first();\n}\n</code></pre>\n<p>We can also use existing methods like <code>findById()</code> to help <code>add()</code> return the new user (instead of just the id).</p>\n<pre><code>function add(user) {\n  db('users').insert(user)\n    .then(ids => {\n      return findById(ids[0]);\n    });\n}\n</code></pre>\n<p>Once all methods are written as desired, we can export them like so:</p>\n<pre><code>module.exports = {\n  find,\n  findById,\n  add,\n  update,\n  delete,\n}\n</code></pre>\n<p>…and use the helpers in our endpoints</p>\n<pre><code>const User = require('./user-model.js');\n\nrouter.get('/', (req, res) => {\n  User.find()\n    .then(users => {\n      res.json(users);\n    })\n    .catch(&#x26;nbsp;err => {});\n});\n</code></pre>\n<p>There should no be <code>knex</code> code in the endpoints themselves.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*9xpwm_56lgvHkFTKsmoMqg.gif\" class=\"graf-image\" /></figure>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*9xpwm_56lgvHkFTKsmoMqg.gif\" class=\"graf-image\" /></figure>### A database is a collection of data organized for easy retrieval and manipulation.\n<p>We’re concerned only with digital databases, those that run on computers or other electronic devices. Digital databases have been around since the 1960s. Relational databases, those which store “related” data, are the oldest and most common type of database in use today.</p>\n<h3>Data Persistence</h3>\n<p>A database is often necessary because our application or code requires data persistence. This term refers to data that is infrequently accessed and not likely to be modified. In less technical terms, the information will be safely stored and remain untouched unless intentionally modified.</p>\n<p>A familiar example of non-persistent data would be JavaScript objects and arrays, which reset each time the code runs.</p>\n<h3>Relational Databases</h3>\n<p>In relational databases, <strong>the data is stored in tabular format grouped into rows and columns</strong> (similar to spreadsheets). A collection of rows is called a table. Each row represents a single record in the table and is made up of one or more columns.</p>\n<p>These kinds of databases are relational because a <em>relation</em> is a mathematical idea equivalent to a table. So relational databases are databases that store their data in tables.</p>\n<h3>Tables</h3>\n<p><strong>Below are some basic facts about tables:</strong></p>\n<blockquote>\n<p>Tables organize data in rows and columns.</p>\n</blockquote>\n<blockquote>\n<p>Each row in a table represents one distinct record.</p>\n</blockquote>\n<blockquote>\n<p>Each column represents a field or attribute that is common to all the records.</p>\n</blockquote>\n<blockquote>\n<p>Fields should have a descriptive name and a data type appropriate for the attribute it represents.</p>\n</blockquote>\n<blockquote>\n<p>Tables usually have more rows than columns.</p>\n</blockquote>\n<blockquote>\n<p>Tables have primary keys that uniquely identify each row.</p>\n</blockquote>\n<blockquote>\n<p>Foreign keys represent the relationships with other tables.</p>\n</blockquote>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*7ZPYzWNRcs2PBL6p.jpg\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/1*9xpwm_56lgvHkFTKsmoMqg.gif\" class=\"graf-image\" /></figure>### SQL:\n<p>SQL is a standard language, which means that it almost certainly will be supported, no matter how your database is managed. That said, be aware that the SQL language can vary depending on database management tools. This lesson focuses on a set of core commands that never change. Learning the standard commands is an excellent introduction since the knowledge transfers between database products.</p>\n<p>The syntax for SQL is English-like and requires fewer symbols than programming languages like C, Java, and JavaScript.</p>\n<p>It is declarative and concise, which means there is a lot less to learn to use it effectively.</p>\n<p>When learning SQL, it is helpful to understand that each command is designed for a different purpose. If we classify the commands by purpose, we’ll end up with the following sub-categories of SQL:</p>\n<ul>\n<li><span id=\"aba8\"><strong>Data Definition Language (DDL)</strong>: used to modify database objects. Some examples are: <code>CREATE TABLE</code>, <code>ALTER TABLE</code>, and <code>DROP TABLE</code>.</span></li>\n<li><span id=\"4f3f\"><strong>Data Manipulation Language (DML)</strong>: used to manipulate the data stored in the database. Some examples are: <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code>.</span></li>\n<li><span id=\"e1f2\"><strong>Data Query Language (DQL)</strong>: used to ask questions about the data stored in the database. The most commonly used SQL command is <code>SELECT</code>, and it falls in this category.</span></li>\n<li><span id=\"4474\"><strong>Data Control Language (DCL)</strong>: used to manage database security and user’s access to data. These commands fall into the realm of Database Administrators. Some examples are <code>GRANT</code> and <code>REVOKE</code>.</span></li>\n<li><span id=\"921b\"><strong>Transaction Control Commands</strong>: used for managing groups of statements that must execute as a unit or not execute at all. Examples are <code>COMMIT</code> and <code>ROLLBACK</code>.</span></li>\n</ul>\n<p>As a developer, you’ll need to get familiar with DDL and become proficient using DML and DQL. This lesson will cover only DML and DQL commands.</p>\n<h3></h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*9xpwm_56lgvHkFTKsmoMqg.gif\" class=\"graf-image\" /></figure>The four SQL operations covered in this section will allow a user to **query**, **insert**, and **modify** a database table.\n<h3>Query</h3>\n<p>A <strong>query</strong> is a SQL statement used to retrieve data from a database. The command used to write queries is <code>SELECT</code>, and it is one of the most commonly used SQL commands.</p>\n<p>The basic syntax for a <code>SELECT</code> statement is this:</p>\n<pre><code>select &#x3C;selection> from &#x3C;table name>;\n</code></pre>\n<p>To see all the fields on a table, we can use a <code>*</code> as the <code>selection</code>.</p>\n<pre><code>select * from employees;\n</code></pre>\n<p>The preceding statement would show all the records and all the columns for each record in the <code>employees</code> table.</p>\n<p>To pick the fields we want to see, we use a comma-separated list:</p>\n<pre><code>select first_name, last_name, salary from employees;\n</code></pre>\n<p>The return of that statement would hold all records from the listed fields.</p>\n<p>We can extend the <code>SELECT</code> command's capabilities using <code>clauses</code> for things like filtering, sorting, pagination, and more.</p>\n<p>It is possible to query multiple tables in a single query. But, in this section, we only perform queries on a single table. We will cover performing queries on multiple tables in another section.</p>\n<h3>Insert</h3>\n<p>To <strong>insert</strong> new data into a table, we’ll use the <code>INSERT</code> command. The basic syntax for an <code>INSERT</code> statement is this:</p>\n<pre><code>insert into &#x3C;table name> (&#x3C;selection>) values (&#x3C;values>)\n</code></pre>\n<p>Using this formula, we can specify which values will be inserted into which fields like so:</p>\n<pre><code>insert into Customers (Country, CustomerName, ContactName, Address, City, PostalCode)\nvalues ('USA', 'WebDev School', 'Austen Allred', '1 WebDev Court', 'Provo', '84601');\n</code></pre>\n<h3>Modify</h3>\n<p><strong>Modifying</strong> a database consists of updating and removing records. For these operations, we’ll use <code>UPDATE</code> and <code>DELETE</code> commands, respectively.</p>\n<p>The basic syntax for an <code>UPDATE</code> statement is:</p>\n<pre><code>update &#x3C;table name> set &#x3C;field> = &#x3C;value> where &#x3C;condition>;\n</code></pre>\n<p>The basic syntax for a <code>DELETE</code> statement is:</p>\n<pre><code>delete from &#x3C;table name> where &#x3C;condition>;\n</code></pre>\n<h3></h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*9xpwm_56lgvHkFTKsmoMqg.gif\" class=\"graf-image\" /></figure>### Filtering results using WHERE clause\n<p>When querying a database, the default result will be every entry in the given table. However, often, we are looking for a specific record or a set of records that meets certain criteria.</p>\n<p>A <code>WHERE</code> clause can help in both cases.</p>\n<p>Here’s an example where we might only want to find customers living in Berlin.</p>\n<pre><code>select City, CustomerName, ContactName\nfrom Customers\nwhere City = 'Berlin'\n</code></pre>\n<p>We can also chain together <code>WHERE</code> clauses using <code>OR</code> and <code>AND</code> to limit our results further.</p>\n<p>The following query includes only records that match both criteria.</p>\n<pre><code>select City, CustomerName, ContactName\nfrom Customers\nwhere Country = 'France' and City = 'Paris'\n</code></pre>\n<p>And this query includes records that match either criteria.</p>\n<pre><code>select City, CustomerName, ContactName\nfrom Customers\nwhere Country = 'France' or City = 'Paris'\n</code></pre>\n<p>These operators can be combined and grouped with parentheses to add complex selection logic. They behave similarly to what you’re used to in programming languages.</p>\n<p>You can read more about SQLite operators from <a href=\"https://www.w3resource.com/sqlite/operators.php\" class=\"markup--anchor markup--p-anchor\">w3resource (Links to an external site.)</a>.</p>\n<p>To select a single record, we can use a <code>WHERE</code> statement with a uniquely identifying field, like an id:</p>\n<pre><code>select * from Customers\nwhere CustomerId=3;\n</code></pre>\n<p>Other comparison operators also work in <code>WHERE</code> conditions, such as <code>></code>, <code>&#x3C;</code>, <code>&#x3C;=</code>, and <code>>=</code>.</p>\n<pre><code>select * from employees where salary >= 50000\n</code></pre>\n<h3>Ordering results using the ORDER BY clause</h3>\n<p>Query results are shown in the same order the data was inserted. To control how the data is sorted, we can use the <code>ORDER BY</code> clause. Let's see an example.</p>\n<pre><code>-- sorts the results first by salary in descending order, then by the last name in ascending order\nselect * from employees order by salary desc, last_name;\n</code></pre>\n<p>We can pass a list of field names to <code>order by</code> and optionally choose <code>asc</code> or <code>desc</code> for the sort direction. The default is <code>asc</code>, so it doesn't need to be specified.</p>\n<p>Some SQL engines also support using field abbreviations when sorting.</p>\n<pre><code>select name, salary, department from employees order by 3, 2 desc;\n</code></pre>\n<p>In this case, the results are sorted by the department in ascending order first and then by salary in descending order. The numbers refer to the fields’ position in the <em>selection</em> portion of the query, so <code>1</code> would be <em>name</em>, <code>2</code> would be <em>salary</em>, and so on.</p>\n<p>Note that the <code>WHERE</code> clause should come after the <code>FROM</code> clause. The <code>ORDER BY</code> clause always goes last.</p>\n<pre><code>select * from employees where salary > 50000 order by last_name;\n</code></pre>\n<h3>Limiting results using the LIMIT clause</h3>\n<p>When we wish to see only a limited number of records, we can use a <code>LIMIT</code> clause.</p>\n<p>The following returns the first ten records in the products table:</p>\n<pre><code>select * from products\nlimit 10\n</code></pre>\n<p><code>LIMIT</code> clauses are often used in conjunction with <code>ORDER BY</code>. The following shows us the five cheapest products:</p>\n<pre><code>select * from products\norder by price desc\nlimit 5\n</code></pre>\n<h3>Inserting data using INSERT</h3>\n<p>An insert statement adds a new record to the database. All non-null fields must be listed out in the same order as their values. Some fields, like ids and timestamps, may be auto-generated and do not need to be included in an <code>INSERT</code> statement.</p>\n<pre><code>-- we can add fields in any order; the values need to be in the same ordinal position\n-- the id will be assigned automatically\n  insert into Customers (Country, CustomerName, ContactName, Address, City, PostalCode)\n  values ('USA', 'WebDev School', 'Austen Allred', '1 WebDev Court', 'Provo', '84601');\n</code></pre>\n<p>The values in an insert statement must not violate any restrictions and constraints that the database has in place, such as expected datatypes. We will learn more about constraints and schema design in a later section.</p>\n<h3>Modifying recording using UPDATE</h3>\n<p>When modifying a record, we identify a single record or a set of records to update using a <code>WHERE</code> clause. Then we can set the new value(s) in place.</p>\n<pre><code>update Customers\nset City = 'Silicon Valley', Country = 'USA'\nwhere CustomerName = 'WebDev School'\n</code></pre>\n<p>Technically the <code>WHERE</code> clause is not required, but leaving it off would result in every record within the table receiving the update.</p>\n<h3>Removing records using DELETE</h3>\n<p>When removing a record or set of records, we need only identify which record(s) to remove using a <code>WHERE</code> clause:</p>\n<pre><code>delete from Customers\nwhere CustomerName = 'WebDev School`;\n</code></pre>\n<p>Once again, the <code>WHERE</code> clause is not required, but leaving it off would remove every record in the table, so it's essential.</p>\n<h3></h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*9xpwm_56lgvHkFTKsmoMqg.gif\" class=\"graf-image\" /></figure>Raw SQL is a critical baseline skill. However, Node developers generally use an **Object Relational Mapper (ORM)** or **query builder** to write database commands in a backend codebase. Both **ORMs** and **query builders** are JavaScript libraries that allow us to interface with the database using a JavaScript version of the SQL language.\n<p>For example, instead of a raw SQL <code>SELECT</code>:</p>\n<pre><code>SELECT * FROM users;\n</code></pre>\n<p>We could use a query builder to write the same logic in JavaScript:</p>\n<pre><code>db.select('*').from('users');\n</code></pre>\n<p><strong>Query builders</strong> are lightweight and easy to get off the ground, whereas <strong>ORMs</strong> use an object-oriented model and provide more heavy lifting within their rigid structure.</p>\n<p>We will use a <strong>query builder</strong> called <a href=\"https://knexjs.org/\" class=\"markup--anchor markup--p-anchor\">knex.js (Links to an external site.)</a>.</p>\n<h3></h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*9xpwm_56lgvHkFTKsmoMqg.gif\" class=\"graf-image\" /></figure>### Knex Setup\n<p>To use Knex in a repository, we’ll need to add two libraries:</p>\n<pre><code>npm install knex sqlite3\n</code></pre>\n<p><code>knex</code> is our query builder library, and <code>sqlite3</code> allows us to interface with a <code>sqlite</code> database. We'll learn more about <code>sqlite</code> and other <strong>database management systems</strong> in the following module. For now, know that you need both libraries.</p>\n<p>Next, we use Knex to set up a config file:</p>\n<pre><code>const knex = require('knex');\n\nconst config = {\n  client: 'sqlite3',\n  connection: {\n    filename: './data/posts.db3',\n  },\n  useNullAsDefault: true,\n};\n\nmodule.exports = knex(config);\n</code></pre>\n<p>To use the query builder elsewhere in our code, we need to call <code>knex</code> and pass in a <code>config</code> object. We'll be discussing Knex configuration more in a future module. Still, we only need the <code>client</code>, <code>connection</code>, and <code>useNullAsDefault</code> keys as shown above. The <code>filename</code> should point towards the pre-existing database file, which can be recognized by the <code>.db3</code> extension.</p>\n<p><strong>GOTCHA</strong>: The file path to the database should be with respect to the <strong>root</strong> of the repo, not the configuration file itself.</p>\n<p>Once Knex is configured, we can import the above config file anywhere in our codebase to access the database.</p>\n<pre><code>const db = require('../data/db-config.js);\n</code></pre>\n<p>The <code>db</code> object provides methods that allow us to begin building queries.</p>\n<h3>SELECT using Knex</h3>\n<p>In Knex, the equivalent of <code>SELECT * FROM users</code> is:</p>\n<pre><code>db.select('*').from('users');\n</code></pre>\n<p>There’s a simpler way to write the same command:</p>\n<pre><code>db('users');\n</code></pre>\n<p>Using this, we could write a <code>GET</code> endpoint.</p>\n<pre><code>router.get('/api/users', (req, res) => {\n  db('users')\n  .then(users => {\n    res.json(users);\n  })\n  .catch (err => {\n    res.status(500).json({ message: 'Failed to get users' });\n  });\n});\n</code></pre>\n<p><strong>NOTE</strong>: All Knex queries return promises.</p>\n<p>Knex also allows for a where clause. In Knex, we could write <code>SELECT * FROM users WHERE id=1</code> as</p>\n<pre><code>db('users').where({ id: 1 });\n</code></pre>\n<p>This method will resolve to an array containing a single entry like so: <code>[{ id: 1, name: 'bill' }]</code>.</p>\n<p>Using this, we might add a <code>GET</code> endpoint where a specific user:</p>\n<pre><code>server.get('api/users/:id', (req, res) => {\n  const { id } = req.params;\n\ndb('users').where({ id })\n  .then(users => {\n    // we must check the length to find our if our user exists\n    if (users.length) {\n      res.json(users);\n    } else {\n      res.status(404).json({ message: 'Could not find user with given id.' })\n   })\n  .catch (err => {\n    res.status(500).json({ message: 'Failed to get user' });\n  });\n});\n</code></pre>\n<h3>INSERT using Knex</h3>\n<p>In Knex, the equivalent of <code>INSERT INTO users (name, age) VALUES ('Eva', 32)</code> is:</p>\n<pre><code>db('users').insert({ name: 'Eva', age: 32 });\n</code></pre>\n<p>The insert method in Knex will resolve to an array containing the newly created id for that user like so: <code>[3]</code>.</p>\n<h3>UPDATE using Knex</h3>\n<p>In knex, the equivalent of <code>UPDATE users SET name='Ava', age=33 WHERE id=3;</code> is:</p>\n<pre><code>db('users').where({ id: 3 })\n.update({name: 'Ava', age: 33 });\n</code></pre>\n<p>Note that the <code>where</code> method comes before <code>update</code>, unlike in SQL.</p>\n<p>Update will resolve to a count of rows updated.</p>\n<h3>DELETE using Knex</h3>\n<p>In Knex, the equivalent of <code>DELETE FROM users WHERE age=33;</code> is:</p>\n<pre><code>db('users').where({ age: 33}).del();\n</code></pre>\n<p>Once again, the <code>where</code> must come before the <code>del</code>. This method will resolve to a count of records removed.</p>\n<hr>\n<h3></h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*9xpwm_56lgvHkFTKsmoMqg.gif\" class=\"graf-image\" /></figure>###\n<h3>Here’s a small project you can practice with.</h3>\n<p>SQLlite Studio is an application that allows us to create, open, view, and modify SQLite databases. To fully understand what SQLite Studio is and how it works, we must also understand the concept of the Database Management Systems (DBMS).</p>\n<h3>What is a DBMS?</h3>\n<p>To manage digital databases we use specialized software called <strong>D</strong>ata<strong>B</strong>ase <strong>M</strong>anagement <strong>S</strong>ystems (DBMS). These systems typically run on servers and are managed by <strong>D</strong>ata<strong>B</strong>ase <strong>A</strong>dministrators (DBAs).</p>\n<p>In less technical terms, we need a type of software that will allow us to create, access, and generally manage our databases. In the world of relational databases, we specifically use Relational Database Mangement Systems (RDBMs). Some examples are Postgres, SQLite, MySQL, and Oracle.</p>\n<p>Choosing a DBMS determines everything from how you set up your database, to where and how the data is stored, to what SQL commands you can use. Most systems share the core of the SQL language that you’ve already learned.</p>\n<p>In other words, you can expect <code>SELECT</code>, <code>UPDATE</code>, <code>INSERT</code>, <code>WHERE</code> , and the like to be the same across all DBMSs, but the subtleties of the language may vary.</p>\n<h3>What is SQLite?</h3>\n<p><strong>SQLite</strong> is the DBMS, as the name suggests, it is a more lightweight system and thus easier to get set up than some others.</p>\n<p>SQLite allows us to store databases as single files. SQLite projects have a <code>.db3</code> extension. That is the database.</p>\n<p>SQLite is <em>not a database</em> (like relational, graph, or document are databases) but rather <em>a database management system</em>.</p>\n<h3>Opening an existing database in SQLite Studio</h3>\n<p>One useful visual interface we might use with a SQLite database is called <strong>SQLite Studio</strong>. <a href=\"https://sqlitestudio.pl/\" class=\"markup--anchor markup--p-anchor\">Install SQLITE Studio here. (Links to an external site.)</a></p>\n<p>Once installed, we can use SQLite Studio to open any <code>.db3</code> file from a previous lesson. We may view the tables, view the data, and even make changes to the database.</p>\n<p>For a more detailed look at SQLite Studio, follow along in the video above.</p>\n<h3></h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*9xpwm_56lgvHkFTKsmoMqg.gif\" class=\"graf-image\" /></figure>A **database schema** is the shape of our database. It defines what tables we’ll have, which columns should exist within the tables and any restrictions on each column.\n<p>A well-designed database schema keeps the data well organized and can help ensure high-quality data.</p>\n<p>Note that while schema design is usually left to Database Administrators (DBAs), understanding schema helps when designing APIs and database logic. And in a smaller team, this step may fall on the developer.</p>\n<h3></h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*9xpwm_56lgvHkFTKsmoMqg.gif\" class=\"graf-image\" /></figure>For a look at schema design in SQLite Studio, follow along in the video above.\n<p>When designing a single table, we need to ask three things:</p>\n<ul>\n<li><span id=\"2e1a\">What fields (or columns) are present?</span></li>\n<li><span id=\"52e7\">What type of data do we expect for each field?</span></li>\n<li><span id=\"8aff\">Are there other restrictions needed for each column?</span></li>\n</ul>\n<p>Looking at the following schema diagram for an <code>accounts</code> table, we can the answer to each other those questions:</p>\n<p><a href=\"https://www.notion.so/9790405dda624818822293a383eec2d2\" class=\"markup--anchor markup--p-anchor\">Untitled</a></p>\n<h3>Table Fields</h3>\n<p>Choosing which fields to include in a table is relatively straight forward. What information needs to be tracked regarding this resource? In the real world, this is determined by the intended use of the product or app.</p>\n<p>However, this is one requirement every table should satisfy: a <strong>primary key</strong>. A primary key is a way to identify each entry in the database uniquely. It is most often represented as a auto-incrementing integer called <code>id</code> or <code>[tablename]Id</code>.</p>\n<h3>Datatypes</h3>\n<p>Each field must also have a specified datatype. The datatype available depends on our DBMS. Some supported datatype in SQLite include:</p>\n<ul>\n<li><span id=\"92fb\"><strong>Null:</strong> Missing or unknown information.</span></li>\n<li><span id=\"32ef\"><strong>Integer:</strong> Whole numbers.</span></li>\n<li><span id=\"181d\"><strong>Real:</strong> Any number, including decimals.</span></li>\n<li><span id=\"ebce\"><strong>Text:</strong> Character data.</span></li>\n<li><span id=\"c00e\"><strong>Blob:</strong> a large binary object that can be used to store miscellaneous data.</span></li>\n</ul>\n<p>Any data inserted into the table must match the datatypes determined in schema design.</p>\n<h3>Constraints</h3>\n<p>Beyond datatypes, we may add additional <strong>constraints</strong> on each field. Some examples include:</p>\n<ul>\n<li><span id=\"14ca\"><strong>Not Null:</strong> The field cannot be left empty</span></li>\n<li><span id=\"b533\"><strong>Unique:</strong> No two records can have the same value in this field</span></li>\n<li><span id=\"f0c4\"><strong>Primary key:</strong> — Indicates this field is the primary key. Both the not null and unique constraints will be enforced.</span></li>\n<li><span id=\"f116\"><strong>Default:</strong> — Sets a default value if none is provided.</span></li>\n</ul>\n<p>As with data types, any data that does not satisfy the schema constraints will be rejected from the database.</p>\n<h3></h3>\n<h3></h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*9xpwm_56lgvHkFTKsmoMqg.gif\" class=\"graf-image\" /></figure>### Multi-Table Design\n<p>Another critical component of schema design is to understand how different tables relate to each other. This will be covered in later lesson.</p>\n<p>Knex provides a <strong>schema builder</strong>, which allows us to write code to design our database schema. However, beyond thinking about columns and constraints, we must also consider updates.</p>\n<p>When a schema needs to be updated, a developer must feel confident that the changes go into effect everywhere. This means schema updates on the developer’s local machine, on any testing or staging versions, on the production database, and then on any other developer’s local machines. This is where <strong>migrations</strong> come into play.</p>\n<p>A <code>database migration</code> describes changes made to the structure of a database. Migrations include things like adding new objects, adding new tables, and modifying existing objects or tables.</p>\n<h3></h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*9xpwm_56lgvHkFTKsmoMqg.gif\" class=\"graf-image\" /></figure>### Knex Cli\n<p>To use migrations (and to make Knex setup easier), we need to use <strong>knex cli</strong>. Install knex globally with <code>npm install -g knex</code>.</p>\n<p>This allows you to use Knex commands within any repo that has <code>knex</code> as a local dependency. If you have any issues with this global install, you can use the <code>npx knex</code> command instead.</p>\n<h3>Initializing Knex</h3>\n<p>To start, add the <code>knex</code> and <code>sqlite3</code> libraries to your repository.</p>\n<p><code>npm install knex sqlite3</code></p>\n<p>We’ve seen how to use manually create a config object to get started with Knex, but the best practice is to use the following command:</p>\n<pre><code>knex init\n</code></pre>\n<p>Or, if Knex isn’t globally installed:</p>\n<pre><code>npx knex init\n</code></pre>\n<p>This command will generate a file in your root folder called <code>knexfile.js</code>. It will be auto populated with three config objects, based on different environments. We can delete all except for the development object.</p>\n<pre><code>module.exports = {\n\ndevelopment: {\n    client: 'sqlite3',\n    connection: {\n      filename: './dev.sqlite3'\n    }\n  }\n\n};\n</code></pre>\n<p>We’ll need to update the location (or desired location) of the database as well as add the <code>useNullAsDefault</code> option. The latter option prevents crashes when working with <code>sqlite3</code>.</p>\n<pre><code>module.exports = {\n\ndevelopment: {\n    // our DBMS driver\n    client: 'sqlite3',\n    // the location of our db\n    connection: {\n      filename: './data/database_file.db3',\n    },\n    // necessary when using sqlite3\n    useNullAsDefault: true\n  }\n\n};\n</code></pre>\n<p>Now, wherever we configure our database, we may use the following syntax instead of hardcoding in a config object.</p>\n<pre><code>const knex = require('knex');\n\nconst config = require('../knexfile.js');\n\n// we must select the development object from our knexfile\nconst db = knex(config.development);\n\n// export for use in codebase\nmodule.exports = db;\n</code></pre>\n<h3>Knex Migrations</h3>\n<p>Once our <code>knexfile</code> is set up, we can begin creating <strong>migrations</strong>. Though it's not required, we are going to add an <code>addition</code> option to the config object to specify a directory for the migration files.</p>\n<pre><code>development: {\n    client: 'sqlite3',\n    connection: {\n      filename: './data/produce.db3',\n    },\n    useNullAsDefault: true,\n    // generates migration files in a data/migrations/ folder\n    migrations: {\n      directory: './data/migrations'\n    }\n  }\n</code></pre>\n<p>We can generate a new migration with the following command:</p>\n<p><code>knex migrate:make [migration-name]</code></p>\n<p>If we needed to create an accounts table, we might run:</p>\n<p><code>knex migrate:make create-accounts</code></p>\n<p>Note that inside <code>data/migrations/</code> a new file has appeared. Migrations have a timestamp in their filenames automatically. Wither you like this or not, <strong>do not edit migration names.</strong></p>\n<p>The migration file should have both an <code>up</code> and a <code>down</code> function. Within the <code>up</code> function, we write the ended database changes. Within the <code>down</code> function, we write the code to undo the <code>up</code> functions. This allows us to undo any changes made to the schema if necessary.</p>\n<pre><code>exports.up = function(knex, Promise) {\n  // don't forget the return statement\n  return knex.schema.createTable('accounts', tbl => {\n    // creates a primary key called id\n    tbl.increments();\n    // creates a text field called name which is both required and unique\n    tbl.text('name', 128).unique().notNullable();\n    // creates a numeric field called budget which is required\n    tbl.decimal('budget').notNullable();\n  });\n};\n\nexports.down = function(knex, Promise) {\n  // drops the entire table\n  return knex.schema.dropTableIfExists('accounts');\n};\n</code></pre>\n<p>References for these methods are found in the <strong>schema builder</strong> section of the <a href=\"https://knexjs.org/\" class=\"markup--anchor markup--p-anchor\">Knex docs (Links to an external site.)</a>.</p>\n<p>At this point, the table is <strong>not</strong> yet created. To run this (and any other) migrations, use the command:</p>\n<p><code>knex migrate:latest</code></p>\n<p>Note if the database does not exist, this command will auto-generate one. We can use SQLite Studio to confirm that the accounts table has been created.</p>\n<h3>Changes and Rollbacks</h3>\n<p>If later down the road, we realize you need to update your schema, you shouldn’t edit the migration file. Instead, you will want to create a new migration with the command:</p>\n<p><code>knex migrate:make accounts-schema-update</code></p>\n<p>Once we’ve written our updates into this file we save and close with:</p>\n<p><code>knex migrate:latest</code></p>\n<p>If we migrate our database and then quickly realize something isn’t right, we can edit the migration file. However, first, we need to <strong>rolllback</strong> (or undo) our last migration with:</p>\n<p><code>knex migrate:rollback</code></p>\n<p>Finally, we are free to rerun that file with <code>knex migrate</code> latest.</p>\n<p><strong>NOTE</strong>: A rollback should not be used to edit an old migration file once that file has accepted into a main branch. However, an entire team may use a rollback to return to a previous version of a database.</p>\n<h3>Overview</h3>\n<p>Knex provides a <strong>schema builder</strong>, which allows us to write code to design our database schema. However, beyond thinking about columns and constraints, we must also consider updates.</p>\n<p>When a schema needs to be updated, a developer must feel confident that the changes go into effect everywhere. This means schema updates on the developer’s local machine, on any testing or staging versions, on the production database, and then on any other developer’s local machines. This is where <strong>migrations</strong> come into play.</p>\n<p>A <code>database migration</code> describes changes made to the structure of a database. Migrations include things like adding new objects, adding new tables, and modifying existing objects or tables.</p>\n<h3></h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*9xpwm_56lgvHkFTKsmoMqg.gif\" class=\"graf-image\" /></figure>### Knex Cli\n<p>To use migrations (and to make Knex setup easier), we need to use <strong>knex cli</strong>. Install knex globally with <code>npm install -g knex</code>.</p>\n<p>This allows you to use Knex commands within any repo that has <code>knex</code> as a local dependency. If you have any issues with this global install, you can use the <code>npx knex</code> command instead.</p>\n<h3>Initializing Knex</h3>\n<p>To start, add the <code>knex</code> and <code>sqlite3</code> libraries to your repository.</p>\n<p><code>npm install knex sqlite3</code></p>\n<p>We’ve seen how to use manually create a config object to get started with Knex, but the best practice is to use the following command:</p>\n<pre><code>knex init\n</code></pre>\n<p>Or, if Knex isn’t globally installed:</p>\n<pre><code>npx knex init\n</code></pre>\n<p>This command will generate a file in your root folder called <code>knexfile.js</code>. It will be auto populated with three config objects, based on different environments. We can delete all except for the development object.</p>\n<pre><code>module.exports = {\n\ndevelopment: {\n    client: 'sqlite3',\n    connection: {\n      filename: './dev.sqlite3'\n    }\n  }\n\n};\n</code></pre>\n<p>We’ll need to update the location (or desired location) of the database as well as add the <code>useNullAsDefault</code> option. The latter option prevents crashes when working with <code>sqlite3</code>.</p>\n<pre><code>module.exports = {\n\ndevelopment: {\n    // our DBMS driver\n    client: 'sqlite3',\n    // the location of our db\n    connection: {\n      filename: './data/database_file.db3',\n    },\n    // necessary when using sqlite3\n    useNullAsDefault: true\n  }\n\n};\n</code></pre>\n<p>Now, wherever we configure our database, we may use the following syntax instead of hardcoding in a config object.</p>\n<pre><code>const knex = require('knex');\n\nconst config = require('../knexfile.js');\n\n// we must select the development object from our knexfile\nconst db = knex(config.development);\n\n// export for use in codebase\nmodule.exports = db;\n</code></pre>\n<h3>Knex Migrations</h3>\n<p>Once our <code>knexfile</code> is set up, we can begin creating <strong>migrations</strong>. Though it's not required, we are going to add an <code>addition</code> option to the config object to specify a directory for the migration files.</p>\n<pre><code>development: {\n    client: 'sqlite3',\n    connection: {\n      filename: './data/produce.db3',\n    },\n    useNullAsDefault: true,\n    // generates migration files in a data/migrations/ folder\n    migrations: {\n      directory: './data/migrations'\n    }\n  }\n</code></pre>\n<p>We can generate a new migration with the following command:</p>\n<p><code>knex migrate:make [migration-name]</code></p>\n<p>If we needed to create an accounts table, we might run:</p>\n<p><code>knex migrate:make create-accounts</code></p>\n<p>Note that inside <code>data/migrations/</code> a new file has appeared. Migrations have a timestamp in their filenames automatically. Wither you like this or not, <strong>do not edit migration names.</strong></p>\n<p>The migration file should have both an <code>up</code> and a <code>down</code> function. Within the <code>up</code> function, we write the ended database changes. Within the <code>down</code> function, we write the code to undo the <code>up</code> functions. This allows us to undo any changes made to the schema if necessary.</p>\n<pre><code>exports.up = function(knex, Promise) {\n  // don't forget the return statement\n  return knex.schema.createTable('accounts', tbl => {\n    // creates a primary key called id\n    tbl.increments();\n    // creates a text field called name which is both required and unique\n    tbl.text('name', 128).unique().notNullable();\n    // creates a numeric field called budget which is required\n    tbl.decimal('budget').notNullable();\n  });\n};\n\nexports.down = function(knex, Promise) {\n  // drops the entire table\n  return knex.schema.dropTableIfExists('accounts');\n};\n</code></pre>\n<p>References for these methods are found in the <strong>schema builder</strong> section of the <a href=\"https://knexjs.org/\" class=\"markup--anchor markup--p-anchor\">Knex docs (Links to an external site.)</a>.</p>\n<p>At this point, the table is <strong>not</strong> yet created. To run this (and any other) migrations, use the command:</p>\n<p><code>knex migrate:latest</code></p>\n<p>Note if the database does not exist, this command will auto-generate one. We can use SQLite Studio to confirm that the accounts table has been created.</p>\n<h3>Changes and Rollbacks</h3>\n<p>If later down the road, we realize you need to update your schema, you shouldn’t edit the migration file. Instead, you will want to create a new migration with the command:</p>\n<p><code>knex migrate:make accounts-schema-update</code></p>\n<p>Once we’ve written our updates into this file we save and close with:</p>\n<p><code>knex migrate:latest</code></p>\n<p>If we migrate our database and then quickly realize something isn’t right, we can edit the migration file. However, first, we need to <strong>rolllback</strong> (or undo) our last migration with:</p>\n<p><code>knex migrate:rollback</code></p>\n<p>Finally, we are free to rerun that file with <code>knex migrate</code> latest.</p>\n<p><strong>NOTE</strong>: A rollback should not be used to edit an old migration file once that file has accepted into a main branch. However, an entire team may use a rollback to return to a previous version of a database.</p>\n<h3>Overview</h3>\n<p>Often we want to pre-populate our database with sample data for testing. <strong>Seeds</strong> allow us to add and reset sample data easily.</p>\n<h3>Follow Along</h3>\n<p>The Knex command-line tool offers a way to <strong>seed</strong> our database; in other words, pre-populate our tables.</p>\n<p>Similarly to migrations, we want to customize where our seed files are generated using our <code>knexfile</code></p>\n<pre><code>development: {\n    client: 'sqlite3',\n    connection: {\n      filename: './data/produce.db3',\n    },\n    useNullAsDefault: true,\n    // generates migration files in a data/migrations/ folder\n    migrations: {\n      directory: './data/migrations'\n    },\n    seeds: {\n      directory: './data/seeds'\n    }\n  }\n</code></pre>\n<p>To create a seed run: <code>knex seed:make 001-seedName</code></p>\n<p>Numbering is a good idea because Knex doesn’t attach a timestamp to the name like migrate does. Adding numbers to the file name, we can control the order in which they run.</p>\n<p>We want to create seeds for our accounts table:</p>\n<p><code>knex seed:make 001-accounts</code></p>\n<p>A file will appear in the designated seed folder.</p>\n<pre><code>exports.seed = function(knex, Promise) {\n  // we want to remove all data before seeding\n  // truncate will reset the primary key each time\n  return knex('accounts').truncate()\n    .then(function () {\n      // add data into insert\n      return knex('accounts').insert([\n        { name: 'Stephenson', budget: 10000 },\n        { name: 'Gordon &#x26; Gale', budget: 40400 },\n      ]);\n    });\n};\n</code></pre>\n<p>Run the seed files by typing:</p>\n<p><code>knex seed:run</code></p>\n<p>You can now use SQLite Studio to confirm that the accounts table has two entries.</p>\n<hr>\n<h3></h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*9xpwm_56lgvHkFTKsmoMqg.gif\" class=\"graf-image\" /></figure>### SQL & PostgreSQL\n<p><strong>Foreign keys</strong> are a type of table field used for creating links between tables. Like <strong>primary keys</strong>, they are most often integers that identify (rather than store) data. However, whereas a primary key is used to id rows in a table, foreign keys are used to connect a record in one table to a record in a second table.</p>\n<h3></h3>\n<p>Consider the following <code>farms</code> and <code>ranchers</code> tables.</p>\n<p><a href=\"https://www.notion.so/5b20c5e233dd4a70a33d6ab2c2e1c8bb\" class=\"markup--anchor markup--p-anchor\">Untitled</a></p>\n<p><a href=\"https://www.notion.so/0b0a909c24a9474fb9df80938546f12a\" class=\"markup--anchor markup--p-anchor\">Untitled</a></p>\n<p>The <code>farm_id</code> in the <code>ranchers</code> table is an example of a <code>foreign key</code>. Each entry in the <code>farm_id</code> (foreign key) column corresponds to an <code>id</code> (primary key) in the <code>farms</code> table. This allows us to track which farm each rancher belongs to while keeping the tables normalized.</p>\n<p>If we could only see the <code>ranchers</code> table, we would know that John, Jane, and Jen all work together and that Jim and Jay also work together. However, to know where any of them work, we would need to look at the <code>farms</code> table.</p>\n<p>Now that we understand the basics of querying data from a single table, let’s move on to selecting data from multiple tables using JOIN operations.</p>\n<h3>Overview</h3>\n<p>We can use a <code>JOIN</code> to combine query data from multiple tables using a single <code>SELECT</code> statement.</p>\n<p>There are different types of joins; some are listed below:</p>\n<ul>\n<li><span id=\"d886\">inner joins.</span></li>\n<li><span id=\"43f5\">outer joins.</span></li>\n<li><span id=\"882e\">left joins.</span></li>\n<li><span id=\"ad86\">right joins.</span></li>\n<li><span id=\"4d8b\">cross joins.</span></li>\n<li><span id=\"eb21\">non-equality joins.</span></li>\n<li><span id=\"fc6a\">self joins.</span></li>\n</ul>\n<p>Using <code>joins</code> requires that the two tables of interest contain at least one field with shared information. For example, if a <em>departments</em> table has an <em>id</em> field, and an employee table has a <em>department</em>id_ field, and the values that exist in the <em>id</em> column of the <em>departments</em> table live in the <em>department</em>id_ field of the employee table, we can use those fields to join both tables like so:</p>\n<pre><code>select * from employees\njoin departments on employees.department_id = departments.id\n</code></pre>\n<p>This query will return the data from both tables for every instance where the <code>ON</code> condition is true. If there are employees with no value for department<em>id or where the value stored in the field does not correspond to an existing id in the</em> departments <em>table, then that record will NOT be returned. In a similar fashion, any records from the</em> departments <em>table that don't have an employee associated with them will also be omitted from the results. Basically, if the</em> id* does not show as the value of department_id for an employee, it won't be able to join.</p>\n<p>We can shorten the condition by giving the table names an alias. This is a common practice. Below is the same example using aliases, picking which fields to return and sorting the results:</p>\n<pre><code>select d.id, d.name, e.id, e.first_name, e.last_name, e.salary\nfrom employees as e\njoin departments as d\n  on e.department_id = d.id\norder by d.name, e.last_name\n</code></pre>\n<p>Notice that we can take advantage of white space and indentation to make queries more readable.</p>\n<p>There are several ways of writing joins, but the one shown here should work on all database management systems and avoid some pitfalls, so we recommend it.</p>\n<p>The syntax for performing a similar join using Knex is as follows:</p>\n<pre><code>db('employees as e')\n  .join('departments as d', 'e.department_id', 'd.id')\n  .select('d.id', 'd.name', 'e.first_name', 'e.last_name', 'e.salary')\n</code></pre>\n<h3>Follow Along</h3>\n<p>A good explanation of how the different types of joins can be seen <a href=\"https://www.w3resource.com/sql/joins/sql-joins.php\" class=\"markup--anchor markup--p-anchor\">in this article from w3resource.com (Links to an external site.)</a>.</p>\n<h3>What is SQL Joins?</h3>\n<p>An SQL JOIN clause combines rows from two or more tables. It creates a set of rows in a temporary table.</p>\n<h3>How to Join two tables in SQL?</h3>\n<p>A JOIN works on two or more tables if they have at least one common field and have a relationship between them.</p>\n<p>JOIN keeps the base tables (structure and data) unchanged.</p>\n<h3>Join vs. Subquery</h3>\n<ul>\n<li><span id=\"6fdc\">JOINs are faster than a subquery and it is very rare that the opposite.</span></li>\n<li><span id=\"c648\">In JOINs the RDBMS calculates an execution plan, that can predict, what data should be loaded and how much it will take to processed and as a result this process save some times, unlike the subquery there is no pre-process calculation and run all the queries and load all their data to do the processing.</span></li>\n<li><span id=\"d59c\">A JOIN is checked conditions first and then put it into table and displays; where as a subquery take separate temp table internally and checking condition.</span></li>\n<li><span id=\"08ff\">When joins are using, there should be connection between two or more than two tables and each table has a relation with other while subquery means query inside another query, has no need to relation, it works on columns and conditions.</span></li>\n</ul>\n<h3>SQL JOINS: EQUI JOIN and NON EQUI JOIN</h3>\n<p>The are two types of SQL JOINS — EQUI JOIN and NON EQUI JOIN</p>\n<ol>\n<li><span id=\"2bb1\">SQL EQUI JOIN :</span></li>\n</ol>\n<p>The SQL EQUI JOIN is a simple SQL join uses the equal sign(=) as the comparison operator for the condition. It has two types — SQL Outer join and SQL Inner join.</p>\n<ol>\n<li><span id=\"a9be\">SQL NON EQUI JOIN :</span></li>\n</ol>\n<p>The <strong>SQL NON EQUI JOIN</strong> is a join uses comparison operator other than the equal sign like >, &#x3C;, >=, &#x3C;= with the condition.</p>\n<p><strong>SQL EQUI JOIN : INNER JOIN and OUTER JOIN</strong></p>\n<p>The SQL EQUI JOIN can be classified into two types — INNER JOIN and OUTER JOIN</p>\n<ol>\n<li><span id=\"cf44\">SQL INNER JOIN</span></li>\n</ol>\n<p>This type of EQUI JOIN returns all rows from tables where the key record of one table is equal to the key records of another table.</p>\n<ol>\n<li><span id=\"22a6\">SQL OUTER JOIN</span></li>\n</ol>\n<p>This type of EQUI JOIN returns all rows from one table and only those rows from the secondary table where the joined condition is satisfying i.e. the columns are equal in both tables.</p>\n<p>In order to perform a JOIN query, the required information we need are:</p>\n<p><strong>a)</strong> The name of the tables<strong>b)</strong> Name of the columns of two or more tables, based on which a condition will perform.</p>\n<p><strong>Syntax:</strong></p>\n<pre><code>FROM table1\njoin_type table2\n[ON (join_condition)]\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p><a href=\"https://www.notion.so/5522c3e6d5d0443eb870f7a34f60c7ff\" class=\"markup--anchor markup--p-anchor\">Untitled</a></p>\n<p><strong>Pictorial Presentation of SQL Joins:</strong></p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*2DcsnJXF_FOGhUtL.gif\" class=\"graf-image\" /></figure>**Example:**\n<p><strong>Sample table: company</strong></p>\n<p><strong>Sample table: foods</strong></p>\n<p>To join two tables ‘company’ and ‘foods’, the following SQL statement can be used :</p>\n<p><strong>SQL Code:</strong></p>\n<pre><code>SELECT  company.company_id,company.company_name,\nfoods.item_id,foods.item_name\nFROM company,foods;\n</code></pre>\n<p>Copy</p>\n<p>Output:</p>\n<pre><code>COMPAN COMPANY_NAME              ITEM_ID  ITEM_NAME\n------ ------------------------- -------- ---------------\n18     Order All                 1        Chex Mix\n18     Order All                 6        Cheez-It\n18     Order All                 2        BN Biscuit\n18     Order All                 3        Mighty Munch\n18     Order All                 4        Pot Rice\n18     Order All                 5        Jaffa Cakes\n18     Order All                 7        Salt n Shake\n15     Jack Hill Ltd             1        Chex Mix\n15     Jack Hill Ltd             6        Cheez-It\n15     Jack Hill Ltd             2        BN Biscuit\n15     Jack Hill Ltd             3        Mighty Munch\n15     Jack Hill Ltd             4        Pot Rice\n15     Jack Hill Ltd             5        Jaffa Cakes\n15     Jack Hill Ltd             7        Salt n Shake\n16     Akas Foods                1        Chex Mix\n16     Akas Foods                6        Cheez-It\n16     Akas Foods                2        BN Biscuit\n16     Akas Foods                3        Mighty Munch\n16     Akas Foods                4        Pot Rice\n16     Akas Foods                5        Jaffa Cakes\n16     Akas Foods                7        Salt n Shake\n.........\n.........\n.........\n</code></pre>\n<h3>Overview</h3>\n<p>While we can write database code directly into our endpoints, best practices dictate that all database logic exists in separate, modular methods. These files containing database access helpers are often called <strong>models</strong></p>\n<h3>Follow Along</h3>\n<p>To handle CRUD operations for a single resource, we would want to create a <strong>model</strong> (or database access file) containing the following methods:</p>\n<pre><code>function find() {\n}\n\nfunction findById(id) {\n}\n\nfunction add(user) {\n}\n\nfunction update(changes, id) {\n}\n\nfunction remove(id) {\n}\n</code></pre>\n<p>Each of these functions would use Knex logic to perform the necessary database operation.</p>\n<pre><code>function find() {\n  return db('users');\n}\n</code></pre>\n<p>For each method, we can choose what value to return. For example, we may prefer <code>findById()</code> to return a single <code>user</code> object rather than an array.</p>\n<pre><code>function findById(id) {\n// first() returns the first entry in the db matching the query\n  return db('users').where({ id }).first();\n}\n</code></pre>\n<p>We can also use existing methods like <code>findById()</code> to help <code>add()</code> return the new user (instead of just the id).</p>\n<pre><code>function add(user) {\n  db('users').insert(user)\n    .then(ids => {\n      return findById(ids[0]);\n    });\n}\n</code></pre>\n<p>Once all methods are written as desired, we can export them like so:</p>\n<pre><code>module.exports = {\n  find,\n  findById,\n  add,\n  update,\n  delete,\n}\n</code></pre>\n<p>…and use the helpers in our endpoints</p>\n<pre><code>const User = require('./user-model.js');\n\nrouter.get('/', (req, res) => {\n  User.find()\n    .then(users => {\n      res.json(users);\n    })\n    .catch(&#x26;nbsp;err => {});\n});\n</code></pre>\n<p>There should no be <code>knex</code> code in the endpoints themselves.</p>\n<hr>\n<h3></h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*9xpwm_56lgvHkFTKsmoMqg.gif\" class=\"graf-image\" /></figure>###\n<p><code>Normalization</code> is the process of designing or refactoring database tables for maximum consistency and minimum redundancy.</p>\n<p>With objects, we’re used to <em>denormalized</em> data, stored with ease of use and speed in mind. Non-normalized tables are considered ineffective in relational databases.</p>\n<h3></h3>\n<p><strong>Data normalization</strong> is a deep topic in database design. To begin thinking about it, we’ll explore a few basic guidelines and some data examples that violate these rules.</p>\n<h3>Normalization Guidelines</h3>\n<blockquote>\n<p>Each record has a primary key.</p>\n</blockquote>\n<blockquote>\n<p>No fields are repeated.</p>\n</blockquote>\n<blockquote>\n<p>All fields relate directly to the key data.</p>\n</blockquote>\n<blockquote>\n<p>Each field entry contains a single data point.</p>\n</blockquote>\n<blockquote>\n<p>There are no redundant entries.</p>\n</blockquote>\n<h3>Denormalized Data</h3>\n<p><a href=\"https://www.notion.so/19a01f68a659470fb85bbe6906fb4bad\" class=\"markup--anchor markup--p-anchor\">Untitled</a></p>\n<p>This table has two issues. There is no proper id field (as multiple farms may have the same name), and multiple fields are representing the same type of data: animals.</p>\n<p><a href=\"https://www.notion.so/075ad6dd99ac48698625d7b56ca67bef\" class=\"markup--anchor markup--p-anchor\">Untitled</a></p>\n<p>While we have now eliminated the first two issues, we now have multiple entries in one field, separated by commas. This isn’t good either, as its another example of denormalization. There is no “array” data type in a relational database, so each field must contain only one data point.</p>\n<p><a href=\"https://www.notion.so/375a15b0cb3f444a8698cd6cb3a08fe0\" class=\"markup--anchor markup--p-anchor\">Untitled</a></p>\n<p>Now we’ve solved the multiple fields issue, but we created repeating data (the farm field), which is also an example of denormalization. As well, we can see that if we were tracking additional ranch information (such as annual revenue), that field is only vaguely related to the animal information.</p>\n<p><strong>When these issues begin arising in your schema design, it means that you should separate information into two or more tables.</strong></p>\n<h3>Anomalies</h3>\n<p>Obeying the above guidelines prevent <strong>anomalies</strong> in your database when inserting, updating, or deleting. For example, imagine if the revenue of Beech Ranch changed. With our denormalized schema, it may get updated in some records but not others:</p>\n<p><a href=\"https://www.notion.so/e05f5b2e8ff141798adc6f188f56f31e\" class=\"markup--anchor markup--p-anchor\">Untitled</a></p>\n<p>Similarly, if Beech Ranch shut down, there would be three (if not more) records that needed to be deleted to remove a single farm.</p>\n<p>Thus a denormalized table opens the door for contradictory, confusing, and unusable data.</p>\n<h3></h3>\n<p>What issues does the following table have?</p>\n<p><a href=\"https://www.notion.so/2793e8f6b70a47f48f9208779366e69e\" class=\"markup--anchor markup--p-anchor\">Untitled</a></p>\n<h3></h3>\n<p>There are three types of relationships:</p>\n<blockquote>\n<p>One to one.</p>\n</blockquote>\n<blockquote>\n<p>One to many.</p>\n</blockquote>\n<blockquote>\n<p>Many to many.</p>\n</blockquote>\n<p>Determining how data is related can provide a set of guidelines for table representation and guides the use of foreign keys to connect said tables.</p>\n<h3></h3>\n<h3>One to One Relationships</h3>\n<p>Imagine we are storing the financial projections for a series of farms.</p>\n<p>We may wish to attach fields like farm name, address, description, projected revenue, and projected expenses. We could divide these fields into two categories: information related to the farm directly (name, address, description) and information related to the financial projections (revenue, expenses).</p>\n<p>We would say that <code>farms</code> and <code>projections</code> have a <strong>one-to-one</strong> relationship. This is to say that every farm has exactly one projection, and every project corresponds to exactly one farm.</p>\n<p>This data can be represented in two tables: <code>farms</code> and <code>projections</code></p>\n<p><a href=\"https://www.notion.so/944e594f3464473ea06383bfdea13265\" class=\"markup--anchor markup--p-anchor\">Untitled</a></p>\n<p><a href=\"https://www.notion.so/de32fcf6760e45f284707274433fee92\" class=\"markup--anchor markup--p-anchor\">Untitled</a></p>\n<p>The <code>farm_id</code> is the foreign key that links <code>farms</code> and <code>projections</code> together.</p>\n<p>Notes about one-to-one relationships:</p>\n<ul>\n<li><span id=\"198d\">The foreign key should always have a <code>unique</code> constraint to prevent duplicate entries. In the example above, we wouldn't want to allow multiple projections records for one farm.</span></li>\n<li><span id=\"25c6\">The foreign key can be in either table. For example, we may have had a <code>projection_id</code> in the <code>farms</code> table instead. A good rule of thumb is to put the foreign key in whichever table is more auxiliary to the other.</span></li>\n<li><span id=\"960d\">You can represent one-to-one data in a single table <em>without</em> creating anomalies. However, it is sometimes prudent to use two tables as shown above to keep separate concerns in separate tables.</span></li>\n</ul>\n<h3>One to Many Relationships</h3>\n<p>Now imagine, we are storing the full-time ranchers employed at each farm. In this case, each rancher would only work at one farm however, each farm may have multiple ranchers.</p>\n<p>This is called a <strong>one-to-many</strong> relationship.</p>\n<p>This is the most common type of relationship between entities. Some other examples:</p>\n<ul>\n<li><span id=\"5627\">One <code>customer</code> can have many <code>orders</code>.</span></li>\n<li><span id=\"cc42\">One <code>user</code> can have many <code>posts</code>.</span></li>\n<li><span id=\"dae3\">One <code>post</code> can have many <code>comments</code>.</span></li>\n</ul>\n<p>Manage this type of relationship by adding a foreign key on the “many” table of the relationship that points to the primary key on the “one” table. Consider the <code>farms</code> and <code>ranchers</code> tables.</p>\n<p><a href=\"https://www.notion.so/7dfd2e69c9804a01845f2e9b716a5ac2\" class=\"markup--anchor markup--p-anchor\">Untitled</a></p>\n<p><a href=\"https://www.notion.so/c95f3d418db94ab4b4532eeba0e4f918\" class=\"markup--anchor markup--p-anchor\">Untitled</a></p>\n<p>In a many-to-many relationship, the foreign key (in this case <code>farm_id</code>) should <em>not</em> be unique.</p>\n<h3>Many to Many Relationships</h3>\n<p>If we want to track animals on a farm as well, we must explore the <strong>many-to-many</strong> relationship. A farm has multiple animals, and multiple of each type of animal is present at multiple different farms.</p>\n<p>Some other examples:</p>\n<ul>\n<li><span id=\"d757\">an <code>order</code> can have many <code>products</code> and the same <code>product</code> will appear in many <code>orders</code>.</span></li>\n<li><span id=\"0256\">a <code>book</code> can have more than one <code>author</code>, and an <code>author</code> can write more than one <code>book</code>.</span></li>\n</ul>\n<p>To model this relationship, we need to introduce an <strong>intermediary table</strong> that holds foreign keys that reference the primary key on the related tables. We now have a <code>farms</code>, <code>animals</code>, and <code>farm_animals</code> table.</p>\n<p><a href=\"https://www.notion.so/3269812d7c2a4578b1a9f6bc27e485b1\" class=\"markup--anchor markup--p-anchor\">Untitled</a></p>\n<p><a href=\"https://www.notion.so/c2642c7f632f489cb1b9639c80b8400d\" class=\"markup--anchor markup--p-anchor\">Untitled</a></p>\n<p><a href=\"https://www.notion.so/d0b0042c5e104edd9ed55e122af89084\" class=\"markup--anchor markup--p-anchor\">Untitled</a></p>\n<p>While each foreign key on the intermediary table is not unique, the combinations of keys should be unique.</p>\n<h3></h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*9xpwm_56lgvHkFTKsmoMqg.gif\" class=\"graf-image\" /></figure>The Knex query builder library also allows us to create multi-table schemas include foreign keys. However, there are a few extra things to keep in mind when designing a multi-table schema, such as using the correct order when creating tables, dropping tables, seeding data, and removing data.\n<p>We have to consider the way that <code>delete</code> and <code>updates</code> through our API will impact related data.</p>\n<h3></h3>\n<h3>Foreign Key Setup</h3>\n<p>In Knex, foreign key restrictions don’t automatically work. Whenever using foreign keys in your schema, add the following code to your <code>knexfile</code>. This will prevent users from entering bad data into a foreign key column.</p>\n<pre><code>development: {\n  client: 'sqlite3',\n  useNullAsDefault: true,\n  connection: {\n    filename: './data/database.db3',\n  },\n  // needed when using foreign keys\n  pool: {\n    afterCreate: (conn, done) => {\n      // runs after a connection is made to the sqlite engine\n      conn.run('PRAGMA foreign_keys = ON', done); // turn on FK enforcement\n    },\n  },\n},\n</code></pre>\n<h3>Migrations</h3>\n<p>Let’s look at how we might track our <code>farms</code> and <code>ranchers</code> using Knex. In our migration file's <code>up</code> function, we would want to create two tables:</p>\n<pre><code>exports.up = function(knex, Promise) {\n  return knex.schema\n    .createTable('farms', tbl => {\n      tbl.increments();\n      tbl.string('farm_name', 128)\n        .notNullable();\n    })\n    // we can chain together createTable\n    .createTable('ranchers', tbl => {\n      tbl.increments();\n      tbl.string('rancher_name', 128);\n      tbl.integer('farm_id')\n        // forces integer to be positive\n        .unsigned()\n        .notNullable()\n        .references('id')\n        // this table must exist already\n        .inTable('farms')\n    })\n};\n</code></pre>\n<p>Note that the foreign key can only be created <em>after</em> the reference table.</p>\n<p>In the down function, the opposite is true. We always want to drop a table with a foreign key <em>before</em> dropping the table it references.</p>\n<pre><code>exports.down = function(knex, Promise) {\n  // drop in the opposite order\n  return knex.schema\n    .dropTableIfExists('ranchers')\n    .dropTableIfExists('farms')\n};\n</code></pre>\n<p>In the case of a many-to-many relationship, the syntax for creating an intermediary table is identical, except for one additional piece. We need a way to make sure our combination of foreign keys is unique.</p>\n<pre><code>.createTable('farm_animals', tbl => {\n  tbl.integer('farm_id')\n    .unsigned()\n    .notNullable()\n    .references('id')\n    // this table must exist already\n    .inTable('farms')\n  tbl.integer('animal_id')\n    .unsigned()\n    .notNullable()\n    .references('id')\n    // this table must exist already\n    .inTable('animals')\n\n// the combination of the two keys becomes our primary key\n  // will enforce unique combinations of ids\n  tbl.primary(['farm_id', 'animal_id']);\n});\n</code></pre>\n<h3>Seeds</h3>\n<p>Order is also a concern when seeding. We want to create seeds in the <strong>same</strong> order we created our tables. In other words, don’t create a seed with a foreign key, until that reference record exists.</p>\n<p>In our example, make sure to write the <code>01-farms</code> seed file and then the <code>02-ranchers</code> seed file.</p>\n<p>However, we run into a problem with truncating our seeds, because we want to truncate <code>02-ranchers</code> <em>before</em> <code>01-farms</code>. A library called <code>knex-cleaner</code> provides an easy solution for us.</p>\n<p>Run <code>knex seed:make 00-cleanup</code> and <code>npm install knex-cleaner</code>. Inside the cleanup seed, use the following code.</p>\n<pre><code>const cleaner = require('knex-cleaner');\n\nexports.seed = function(knex) {\n  return cleaner.clean(knex, {\n    mode: 'truncate', // resets ids\n    ignoreTables: ['knex_migrations', 'knex_migrations_lock'], // don't empty migration tables\n  });\n};\n</code></pre>\n<p>This removes all tables (excluding the two tables that track migrations) in the correct order before any seed files run.</p>\n<h3>Cascading</h3>\n<p>If a user attempt to delete a record that is referenced by another record (such as attempting to delete <code>Morton Ranch</code> when entries in our <code>ranchers</code> table reference that record), by default, the database will block the action. The same thing can happen when updating a record when a foreign key reference.</p>\n<p>If we want that to override this default, we can delete or update with <strong>cascade</strong>. With cascade, deleting a record also deletes all referencing records, we can set that up in our schema.</p>\n<pre><code>.createTable('ranchers', tbl => {\n    tbl.increments();\n    tbl.string('rancher_name', 128);\n    tbl.integer('farm_id')\n    .unsigned()\n    .notNullable()\n    .references('id')\n    .inTable('farms')\n    .onUpdate('CASCADE');\n    .onDelete('CASCADE')\n})\n</code></pre>"},{"url":"/docs/docs/content/","relativePath":"docs/docs/content.md","relativeDir":"docs/docs","base":"content.md","name":"content","frontmatter":{"title":"Useful Snippets","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h3>A list of all of my articles to link to future posts</h3>\n<p><a href=\"https://bryanguner.medium.com/scope-closures-context-in-javascript-f126f1523104\" title=\"https://bryanguner.medium.com/scope-closures-context-in-javascript-f126f1523104\"><strong>Scope, Closures &#x26; Context In JavaScript</strong><br>\n<em>\"JavaScript's global scope is like a public toilet. You can't avoid going in there, but try to limit your contact with...</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/scope-closures-context-in-javascript-f126f1523104\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/fundamental-javascript-concepts-you-should-understand-81c4d839b827\" title=\"https://bryanguner.medium.com/fundamental-javascript-concepts-you-should-understand-81c4d839b827\"><strong>Fundamental Javascript Concepts You Should Understand</strong><br>\n<em>Plain Old JS Object Lesson Concepts</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/fundamental-javascript-concepts-you-should-understand-81c4d839b827\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/mutability-and-reference-vs-privative-types-in-javascript-5294422db4b0\" title=\"https://bryanguner.medium.com/mutability-and-reference-vs-privative-types-in-javascript-5294422db4b0\"><strong>Mutability And Reference VS Privative Types in JavaScript</strong><br>\n<em>Mutability &#x26;&#x26; Primitive &#x26;&#x26; Reference Examples</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/mutability-and-reference-vs-privative-types-in-javascript-5294422db4b0\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/array-callback-methods-implemented-with-for-loops-d08875df6777\" title=\"https://javascript.plainenglish.io/array-callback-methods-implemented-with-for-loops-d08875df6777\"><strong>Array Callback Methods Implemented With For Loops</strong><br>\n<em>How to implement array callback methods in JavaScript</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/array-callback-methods-implemented-with-for-loops-d08875df6777\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/\" title=\"https://javascript.plainenglish.io\"><strong>JavaScript in Plain English</strong><br>\n<em>New JavaScript and Web Development articles every day.</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/introductory-react-part-2-cda01615a186\" title=\"https://bryanguner.medium.com/introductory-react-part-2-cda01615a186\"><strong>Beginner's Guide To React Part 2</strong><br>\n<em>As I learn to build web applications in React I will blog about it in this series in an attempt to capture the...</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/introductory-react-part-2-cda01615a186\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/a-very-quick-guide-to-calculating-big-o-computational-complexity-eb1557e85fa3\" title=\"https://bryanguner.medium.com/a-very-quick-guide-to-calculating-big-o-computational-complexity-eb1557e85fa3\"><strong>A Very Quick Guide To Calculating Big O Computational Complexity</strong><br>\n<em>Big O: big picture, broad strokes, not details</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/a-very-quick-guide-to-calculating-big-o-computational-complexity-eb1557e85fa3\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/introduction-to-react-for-complete-beginners-8021738aa1ad\" title=\"https://javascript.plainenglish.io/introduction-to-react-for-complete-beginners-8021738aa1ad\"><strong>Introduction to React for Complete Beginners</strong><br>\n<em>All of the code examples below will be included a second time at the bottom of this article as an embedded gist.</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/introduction-to-react-for-complete-beginners-8021738aa1ad\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/scheduling-settimeout-and-setinterval-fcb2f40d16f7\" title=\"https://javascript.plainenglish.io/scheduling-settimeout-and-setinterval-fcb2f40d16f7\"><strong>Scheduling: setTimeout and setInterval</strong><br>\n<em>We may decide to execute a function not right now, but at a later time. That's called \"scheduling a call\".</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/scheduling-settimeout-and-setinterval-fcb2f40d16f7\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/css-animations-d196a20099a5\" title=\"https://bryanguner.medium.com/css-animations-d196a20099a5\"><strong>LocalStorage VS SessionStorage</strong><br>\n<em>Web storage objects localStorage and sessionStorage allow to save key/value pairs in the browser.</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/css-animations-d196a20099a5\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/these-are-the-bash-shell-commands-that-stand-between-me-and-insanity-984865ba5d1b\" title=\"https://bryanguner.medium.com/these-are-the-bash-shell-commands-that-stand-between-me-and-insanity-984865ba5d1b\"><strong>These Are The Bash Shell Commands That Stand Between Me And Insanity.</strong><br>\n<em>I will not profess to be a bash shell wizard... but I have managed to scour some pretty helpful little scripts from Stack...</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/these-are-the-bash-shell-commands-that-stand-between-me-and-insanity-984865ba5d1b\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/how-to-implement-native-es6-data-structures-using-arrays-objects-ce953b9f6a07\" title=\"https://bryanguner.medium.com/how-to-implement-native-es6-data-structures-using-arrays-objects-ce953b9f6a07\"><strong>How To Implement Native(ES6) Data Structures Using Arrays &#x26; Objects</strong><br>\n<em>Smart data structures and dumb code works better than the other way around -\"Eric S. Raymond\"</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/how-to-implement-native-es6-data-structures-using-arrays-objects-ce953b9f6a07\"></a></p>\n<p><a href=\"https://medium.com/codex/objects-in-javascript-cc578a781e1d\" title=\"https://medium.com/codex/objects-in-javascript-cc578a781e1d\"><strong>Objects in Javascript</strong><br>\n<em>Codepen with examples for you to practice with below!</em>medium.com</a><a href=\"https://medium.com/codex/objects-in-javascript-cc578a781e1d\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/absolute-beginners-guide-to-javascript-part-1-e222d166b6e1\" title=\"https://javascript.plainenglish.io/absolute-beginners-guide-to-javascript-part-1-e222d166b6e1\"><strong>The Beginner's Guide To JavaScript</strong><br>\n<em>Part 1</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/absolute-beginners-guide-to-javascript-part-1-e222d166b6e1\"></a></p>\n<p><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-4-fd686892b9eb\" title=\"https://medium.com/star-gazers/web-developer-resource-list-part-4-fd686892b9eb\"><strong>Web Developer Resource List Part 4</strong><br>\n<em>A all encompassing list of tools and resources for web developers</em>medium.com</a><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-4-fd686892b9eb\"></a></p>\n<p><a href=\"https://medium.com/star-gazers\" title=\"https://medium.com/star-gazers\"><strong>Star Gazers</strong><br>\n<em>The place that enthusiastic and stargazer to everything.</em>medium.com</a><a href=\"https://medium.com/star-gazers\"></a></p>\n<p><a href=\"https://medium.com/codex/vscode-extensions-specifically-for-javascript-development-ea91305cbd4a\" title=\"https://medium.com/codex/vscode-extensions-specifically-for-javascript-development-ea91305cbd4a\"><strong>VSCode Extensions Specifically for JavaScript Development</strong><br>\n<em>VSCode Extensions that are indispensable in JavaScript development</em>medium.com</a><a href=\"https://medium.com/codex/vscode-extensions-specifically-for-javascript-development-ea91305cbd4a\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/lists-stacks-and-queues-in-javascript-88466fae0fbb\" title=\"https://javascript.plainenglish.io/lists-stacks-and-queues-in-javascript-88466fae0fbb\"><strong>Fundamental Data Structures in JavaScript</strong><br>\n<em>A simple to follow guide to Lists Stacks and Queues, with animated gifs, diagrams, and code examples!</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/lists-stacks-and-queues-in-javascript-88466fae0fbb\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a\" title=\"https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a\"><strong>Web Development Resources Part 3</strong><br>\n<em>I'm the psychological equivalent of a physical hoarder only instead of empty soda cans and dead racoons it's lists of...</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a\"></a></p>\n<p><a href=\"https://medium.com/codex/web-development-interview-part-3-826ae81a9107\" title=\"https://medium.com/codex/web-development-interview-part-3-826ae81a9107\"><strong>Web Development Interview Part 3💻</strong><br>\n<em>This installment is going to be the least technically demanding thus far however these questions are a more realistic...</em>medium.com</a><a href=\"https://medium.com/codex/web-development-interview-part-3-826ae81a9107\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24\" title=\"https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24\"><strong>The Best Cloud-Based Code Playgrounds of 2021 (Part 1)</strong><br>\n<em>A plethora of front-end code playgrounds have appeared over the years. They offer a convenient way to experiment with...</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24\"></a></p>\n<p><a href=\"https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443\" title=\"https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443\"><strong>Front End Interview Questions Part 2</strong><br>\n<em>These will focus more on vocabulary and concepts than the application driven approach in my last post!</em>medium.com</a><a href=\"https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443\"></a></p>\n<p><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263\" title=\"https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263\"><strong>Web Developer Resource List Part 2</strong><br>\n<em>Because I compile these things compulsively anyway...</em>medium.com</a><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/http-basics-8f02a96a834a\" title=\"https://levelup.gitconnected.com/http-basics-8f02a96a834a\"><strong>HTTP Basics</strong><br>\n<em>\"If you want to build a ship, don't drum up the men and women to gather wood, divide the work, and give orders...</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/http-basics-8f02a96a834a\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35\" title=\"https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35\"><strong>JavaScript Frameworks &#x26; Libraries</strong><br>\n<em>My Awesome JavaScript List Part 2</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74\" title=\"https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74\"><strong>My 'awesome' list of JavaScript resources</strong><br>\n<em>Everyone's seen the 'Awesome' lists on GitHub... and they are indeed awesome... so today I am going to attempt to curate my...</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931\" title=\"https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931\"><strong>Everything You Need to Get Started With VSCode + Extensions &#x26; Resources</strong><br>\n<em>Commands:</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f\" title=\"https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f\"><strong>My Favorite VSCode <em>Themes</em></strong><br>\nThemeslevelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/object-oriented-programming-in-javascript-d45007d06333\" title=\"https://levelup.gitconnected.com/object-oriented-programming-in-javascript-d45007d06333\"><strong>Object Oriented Programming in JavaScript</strong><br>\n<em>Object-Oriented Programming</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/object-oriented-programming-in-javascript-d45007d06333\"></a></p>\n<p><a href=\"https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1\" title=\"https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1\"><strong>JavaScript Rotate (Array) ProblemWalkthrough</strong><br>\n<em>Explanation for Rotate Right</em>medium.com</a><a href=\"https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/\" title=\"https://bryanguner.medium.com/\"><strong>Bryan Guner - Medium</strong><br>\n<em>A plethora of front-end code playgrounds have appeared over the years. They offer a convenient way to experiment with...</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/\"></a></p>\n<p><a href=\"https://medium.com/codex/postgresql-cheat-sheet-718b813d3e31\" title=\"https://medium.com/codex/postgresql-cheat-sheet-718b813d3e31\"><strong>Postgresql Cheat Sheet</strong><br>\n<em>PostgreSQL commands</em>medium.com</a><a href=\"https://medium.com/codex/postgresql-cheat-sheet-718b813d3e31\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931\" title=\"https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931\"><strong>Everything You Need to Get Started With VSCode + Extensions &#x26; Resources</strong><br>\n<em>Commands:</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/super-simple-intro-to-html-651d695f9bc\" title=\"https://levelup.gitconnected.com/super-simple-intro-to-html-651d695f9bc\"><strong>Super Simple Intro To HTML</strong><br>\n<em>What is HTML, CSS &#x26; JS and why do we need all three?</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/super-simple-intro-to-html-651d695f9bc\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107\" title=\"https://levelup.gitconnected.com/understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107\"><strong>Understanding Git (A Beginners Guide Containing Cheat Sheets &#x26; Resources)</strong><br>\n<em>Basic Git Work Flow.</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/git-tricks-57e8d0292285\" title=\"https://bryanguner.medium.com/git-tricks-57e8d0292285\"><strong>Git-Tricks</strong><br>\n<em>Refs</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/git-tricks-57e8d0292285\"></a></p>\n<p><a href=\"https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522\" title=\"https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522\"><strong>A Quick Guide to Big-O Notation, Memoization, Tabulation, and Sorting Algorithms by Example</strong><br>\n<em>Curating Complexity: A Guide to Big-O Notation</em>medium.com</a><a href=\"https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\" title=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\"><strong>Python Study Guide for a JavaScript Programmer</strong><br>\n<em>A guide to commands in Python from what you know in JavaScript</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/lists-stacks-and-queues-in-javascript-88466fae0fbb\" title=\"https://bryanguner.medium.com/lists-stacks-and-queues-in-javascript-88466fae0fbb\"><strong>Lists Stacks and Queue's In JavaScript</strong><br>\n<em>A simple to follow guide to these fundamental data structures with animated gifs, diagrams, and code examples!</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/lists-stacks-and-queues-in-javascript-88466fae0fbb\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a\" title=\"https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a\"><strong>Web Development Resources Part 3</strong><br>\n<em>I'm the psychological equivalent of a physical hoarder only instead of empty soda cans and dead racoons it's lists of...</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74\" title=\"https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74\"><strong>My 'awesome' list of JavaScript resources</strong><br>\n<em>Everyone's seen the 'Awesome' lists on GitHub... and they are indeed awesome... so today I am going to attempt to curate my...</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74\"></a></p>\n<p><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263\" title=\"https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263\"><strong>Web Developer Resource List Part 2</strong><br>\n<em>Because I compile these things compulsively anyway...</em>medium.com</a><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/web-development-interview-part-3-826ae81a9107\" title=\"https://bryanguner.medium.com/web-development-interview-part-3-826ae81a9107\"><strong>Web Development Interview Part 3💻</strong><br>\n<em>This installment is going to be the least technically demanding thus far however these questions are a more realistic...</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/web-development-interview-part-3-826ae81a9107\"></a></p>\n<p><a href=\"https://medium.com/star-gazers/the-web-developers-technical-interview-e347d7db3822\" title=\"https://medium.com/star-gazers/the-web-developers-technical-interview-e347d7db3822\"><strong>The Web Developer's Technical Interview</strong><br>\n<em>Questions....Answers... and links to the missing pieces.</em>medium.com</a><a href=\"https://medium.com/star-gazers/the-web-developers-technical-interview-e347d7db3822\"></a></p>\n<p><a href=\"https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443\" title=\"https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443\"><strong>Front End Interview Questions Part 2</strong><br>\n<em>These will focus more on vocabulary and concepts than the application driven approach in my last post!</em>medium.com</a><a href=\"https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/running-list-of-interesting-articles-tools-and-ideas-as-i-explore-them-b87a2f04d9a6\" title=\"https://bryanguner.medium.com/running-list-of-interesting-articles-tools-and-ideas-as-i-explore-them-b87a2f04d9a6\"><strong>Running List Of Interesting Articles, Tools and Ideas... as I Explore Them</strong><br>\n<em>Translation if you read this today (3/21/2021) it will be exceedingly short... because it's just gonna accumulate entries...</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/running-list-of-interesting-articles-tools-and-ideas-as-i-explore-them-b87a2f04d9a6\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24\" title=\"https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24\"><strong>The Best Cloud-Based Code Playgrounds of 2021 (Part 1)</strong><br>\n<em>A plethora of front-end code playgrounds have appeared over the years. They offer a convenient way to experiment with...</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24\"></a></p>\n<p><a href=\"https://medium.com/codex/fundamental-data-structures-in-javascript-8f9f709c15b4\" title=\"https://medium.com/codex/fundamental-data-structures-in-javascript-8f9f709c15b4\"><strong>Fundamental Data Structures In JavaScript</strong><br>\n<em>Data structures in JavaScript</em>medium.com</a><a href=\"https://medium.com/codex/fundamental-data-structures-in-javascript-8f9f709c15b4\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/http-basics-8f02a96a834a\" title=\"https://levelup.gitconnected.com/http-basics-8f02a96a834a\"><strong>HTTP Basics</strong><br>\n<em>\"If you want to build a ship, don't drum up the men and women to gather wood, divide the work, and give orders...</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/http-basics-8f02a96a834a\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35\" title=\"https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35\"><strong>JavaScript Frameworks &#x26; Libraries</strong><br>\n<em>My Awesome JavaScript List Part 2</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35\"></a></p>\n<p><a href=\"https://github.com/bgoonz/Cumulative-Resource-List/tree/master/README-s\" title=\"https://github.com/bgoonz/Cumulative-Resource-List/tree/master/README-s\"><strong>bgoonz/Cumulative-Resource-List</strong><br>\n<em>List of useful cheatsheets Inspired by @sindresorhus awesome and improved by these amazing contributors . If you see a...</em>github.com</a><a href=\"https://github.com/bgoonz/Cumulative-Resource-List/tree/master/README-s\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f\" title=\"https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f\"><strong>My Favorite VSCode <em>Themes</em></strong><br>\nThemeslevelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f\"></a></p>\n<p><a href=\"https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1\" title=\"https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1\"><strong>JavaScript Rotate (Array) ProblemWalkthrough</strong><br>\n<em>Explanation for Rotate Right</em>medium.com</a><a href=\"https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/everything-you-need-to-know-about-relational-databases-sql-postgresql-and-sequelize-to-build-8acb68284a98\" title=\"https://bryanguner.medium.com/everything-you-need-to-know-about-relational-databases-sql-postgresql-and-sequelize-to-build-8acb68284a98\"><strong>Everything You Need To Know About Relational Databases, SQL, PostgreSQL and Sequelize To Build...</strong><br>\n<em>For Front end developers who like myself struggle with making the jump to fullstack.</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/everything-you-need-to-know-about-relational-databases-sql-postgresql-and-sequelize-to-build-8acb68284a98\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db\" title=\"https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db\"><strong>The Complete JavaScript Reference Guide</strong><br>\n<em>You will want to bookmark this</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db\"></a></p>\n<p><a href=\"https://medium.com/geekculture/modules-in-javascript-a55333e35978\" title=\"https://medium.com/geekculture/modules-in-javascript-a55333e35978\"><strong>Modules in Javascript</strong><br>\n<em>Differences between Node.js and browsers</em>medium.com</a><a href=\"https://medium.com/geekculture/modules-in-javascript-a55333e35978\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/an-introduction-to-markdown-bonus-markdown-templates-included-3497ce56de3\" title=\"https://levelup.gitconnected.com/an-introduction-to-markdown-bonus-markdown-templates-included-3497ce56de3\"><strong>An Introduction to Markdown (Bonus Markdown Templates Included)</strong><br>\n<em>Basic Syntax Guide</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/an-introduction-to-markdown-bonus-markdown-templates-included-3497ce56de3\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/web-dev-resources-ec1975773d7d\" title=\"https://levelup.gitconnected.com/web-dev-resources-ec1975773d7d\"><strong>Web Dev Resources</strong><br>\n<em>Web Development</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/web-dev-resources-ec1975773d7d\"></a></p>\n<p><a href=\"https://medium.com/codex/regular-expressions-4d8fb3eb146b\" title=\"https://medium.com/codex/regular-expressions-4d8fb3eb146b\"><strong>Regular Expressions</strong><br>\n<em>description:</em>medium.com</a><a href=\"https://medium.com/codex/regular-expressions-4d8fb3eb146b\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/a-collection-of-my-most-useful-gist-entries-f4314f3ba3ab\" title=\"https://bryanguner.medium.com/a-collection-of-my-most-useful-gist-entries-f4314f3ba3ab\"><strong>A Collection of my most useful Gist Entries</strong><br>\n<em>This list is in no particular order!</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/a-collection-of-my-most-useful-gist-entries-f4314f3ba3ab\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/vscode-extension-readme-compilation-92c60342cc8a\" title=\"https://bryanguner.medium.com/vscode-extension-readme-compilation-92c60342cc8a\"><strong>VsCode Extension Readme Compilation</strong><br>\n<em>Markdown PDF</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/vscode-extension-readme-compilation-92c60342cc8a\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/learn-css-so-that-your-site-doesnt-look-like-garbage-938871b4521a\" title=\"https://javascript.plainenglish.io/learn-css-so-that-your-site-doesnt-look-like-garbage-938871b4521a\"><strong>Learn CSS So That Your Site Doesn't Look Like Garbage</strong><br>\n<em>CSS Selectors</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/learn-css-so-that-your-site-doesnt-look-like-garbage-938871b4521a\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/postgresql-setup-for-windows-wsl-ubuntu-801672ab7089\" title=\"https://bryanguner.medium.com/postgresql-setup-for-windows-wsl-ubuntu-801672ab7089\"><strong>PostgreSQL Setup For Windows &#x26; WSL/Ubuntu</strong><br>\n<em>If you follow this guide to a tee... you will install PostgreSQL itself on your Windows installation. Then, you will...</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/postgresql-setup-for-windows-wsl-ubuntu-801672ab7089\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/emmet-cheat-sheet-24758e628d37\" title=\"https://bryanguner.medium.com/emmet-cheat-sheet-24758e628d37\"><strong>Emmet Cheat Sheet</strong><br>\n<em>EMMET</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/emmet-cheat-sheet-24758e628d37\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/express-quick-sheet-8f93762c59ca\" title=\"https://bryanguner.medium.com/express-quick-sheet-8f93762c59ca\"><strong>Express Quick Sheet</strong><br>\n<em>Settings</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/express-quick-sheet-8f93762c59ca\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/deploy-react-app-to-heroku-using-postgres-express-70b7ea807986\" title=\"https://bryanguner.medium.com/deploy-react-app-to-heroku-using-postgres-express-70b7ea807986\"><strong>Deploy React App To Heroku Using Postgres &#x26; Express</strong><br>\n<em>Heroku is an web application that makes deploying applications easy for a beginner.</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/deploy-react-app-to-heroku-using-postgres-express-70b7ea807986\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/basic-web-development-environment-setup-9f36c3f15afe\" title=\"https://levelup.gitconnected.com/basic-web-development-environment-setup-9f36c3f15afe\"><strong>Basic Web Development Environment Setup</strong><br>\n<em>Windows Subsystem for Linux (WSL) and Ubuntu</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/basic-web-development-environment-setup-9f36c3f15afe\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/fetch-quick-sheet-8872650742b4\" title=\"https://bryanguner.medium.com/fetch-quick-sheet-8872650742b4\"><strong><em>Fetch</em> Quick Sheet</strong><br>\nFetchbryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/fetch-quick-sheet-8872650742b4\"></a></p>\n<p>By <a href=\"https://medium.com/@bryanguner\">Bryan Guner</a> on <a href=\"https://medium.com/p/1f6f88ebdf5b\">March 22, 2021</a>.</p>\n<p><a href=\"https://medium.com/@bryanguner/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com/\">Medium</a> on July 13, 2021.</p>\n<p><a href=\"https://gist.github.com/bgoonz/674c3f169d75d5ab9453d4c7ffbdd821/raw/6df51b57737eabd32d1c68c57e110600f471619a/A-list-of-my-articles.md\">view raw</a><a href=\"https://gist.github.com/bgoonz/674c3f169d75d5ab9453d4c7ffbdd821#file-a-list-of-my-articles-md\">A-list-of-my-articles.md</a> hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<h1>A Very Quick Guide To Calculating Big O Computational Complexity</h1>\n<p>Big O: big picture, broad strokes, not details</p>\n<hr>\n<h3>A Very Quick Guide To Calculating Big O Computational Complexity</h3>\n<p><strong>Big O</strong>: big picture, broad strokes, not details</p>\n<p>For a more complete guide... checkout :</p>\n<p><a href=\"https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522\" title=\"https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522\"><strong>A Quick Guide to Big-O Notation, Memoization, Tabulation, and Sorting Algorithms by Example</strong><br>\n<em>Curating Complexity: A Guide to Big-O Notation</em>medium.com</a><a href=\"https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522\"></a></p>\n<p><a href=\"https://camo.githubusercontent.com/6413d09083755e2f7dcdfb53580fbc57ca8ce5cda09b970995c4f6442a2ef120/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a6c746538316d457667455059586f64422e706e67\"><img src=\"https://camo.githubusercontent.com/6413d09083755e2f7dcdfb53580fbc57ca8ce5cda09b970995c4f6442a2ef120/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a6c746538316d457667455059586f64422e706e67\"></a></p>\n<p>- way we analyze how efficient algorithms are without getting too mired in details - can model how much time any function will take given <code>n</code> inputs - interested in order of magnitude of number of the exact figure - O absorbs all fluff and n = biggest term - Big O of <code>3x^2 +x + 1</code> = <code>O(n^2)</code></p>\n<h3>Time Complexity</h3>\n<p>no loops or exit &#x26; return = O(1)</p>\n<p>0 nested loops = <code>O(n)</code><br>\n1 nested loops = <code>O(n^2)</code><br>\n2 nested loops = <code>O(n^3)</code><br>\n3 nested loops = <code>O(n^4)</code></p>\n<p><strong>recursive</strong>: as you add more terms, increase in time as you add input diminishes<br>\n<strong>recursion</strong>: when you define something in terms of itself, a function that calls itself</p>\n<ul>\n<li>used because of ability to maintain state at diffferent levels of recursion</li>\n<li>inherently carries large footprint</li>\n<li>every time function called, you add call to stack</li>\n</ul>\n<p><strong>iterative</strong>: use loops instead of recursion (preferred)</p>\n<ul>\n<li>favor readability over performance</li>\n</ul>\n<p><code>O(n log(n))</code> &#x26; <code>O(log(n))</code>: dividing/halving</p>\n<ul>\n<li>if code employs recursion/divide-and-conquer strategy</li>\n<li>what power do i need to power my base to get n</li>\n</ul>\n<h3>Time Definitions</h3>\n<ul>\n<li><strong>constant</strong>: does not scale with input, will take same amount of time</li>\n<li>for any input size n, constant time performs same number of operations every time</li>\n<li><strong>logarithmic</strong>: increases number of operations it performs as logarithmic function of input size n</li>\n<li>function log n grows very slowly, so as n gets longer, number of operations the algorithm needs to perform doesn't increase very much</li>\n<li>halving</li>\n<li><strong>linear</strong>: increases number of operations it performs as linear function of input size n</li>\n<li>number of additional operations needed to perform grows in direct proportion to increase in input size n</li>\n<li><strong>log-linear</strong>: increases number of operations it performs as log-linear function of input size n</li>\n<li>looking over every element and doing work on each one</li>\n<li><strong>quadratic</strong>: increases number of operations it performs as quadratic function of input size n</li>\n<li><strong>exponential</strong>: increases number of operations it performs as exponential function of input size n</li>\n<li>number of nested loops increases as function of n</li>\n<li><strong>polynomial</strong>: as size of input increases, runtime/space used will grow at a faster rate</li>\n<li><strong>factorial</strong>: as size of input increases, runtime/space used will grow astronomically even with relatively small inputs</li>\n<li><strong>rate of growth</strong>: how fast a function grows with input size</li>\n</ul>\n<p><a href=\"https://camo.githubusercontent.com/ef0eac5be0b1dfbf2b062560dc14031c3d971790e74f827eed32ac7643c1a526/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f312a35743275386e31754b68696f497a5a495858327a62672e706e67\"><img src=\"https://camo.githubusercontent.com/ef0eac5be0b1dfbf2b062560dc14031c3d971790e74f827eed32ac7643c1a526/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f312a35743275386e31754b68696f497a5a495858327a62672e706e67\"></a></p>\n<h3>Space Complexity</h3>\n<ul>\n<li>How does the space usage scale/change as input gets very large?</li>\n<li>What auxiliary space does your algorithm use or is it in place (constant)?</li>\n<li>Runtime stack space counts as part of space complexity unless told otherwise.</li>\n</ul>\n<h3>Sorting Algorithms</h3>\n<p><a href=\"https://camo.githubusercontent.com/3b0a3eba225e72bbd6f86cb081b8696137f089fcda73495a5a07645fb05f150e/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f312a4868586d4732634e64673879345a43435147547975512e706e67\"><img src=\"https://camo.githubusercontent.com/3b0a3eba225e72bbd6f86cb081b8696137f089fcda73495a5a07645fb05f150e/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f312a4868586d4732634e64673879345a43435147547975512e706e67\"></a></p>\n<p><a href=\"https://camo.githubusercontent.com/abfb2575e02cdc2fd9e9a4f1742e317c864f4fe15e584a980948ae5319680c42/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f312a554c6558785643446b4637334777687378794d5f32672e706e67\"><img src=\"https://camo.githubusercontent.com/abfb2575e02cdc2fd9e9a4f1742e317c864f4fe15e584a980948ae5319680c42/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f312a554c6558785643446b4637334777687378794d5f32672e706e67\"></a></p>\n<h3>Data Structures</h3>\n<p><a href=\"https://camo.githubusercontent.com/a5aa2e2f1b4f1e079dbec74d0c22a1527c41b79b05c5aa78082368c952632cb3/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f313230302f312a686b5a576c556746794f53614c443555736b763074512e706e67\"><img src=\"https://camo.githubusercontent.com/a5aa2e2f1b4f1e079dbec74d0c22a1527c41b79b05c5aa78082368c952632cb3/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f313230302f312a686b5a576c556746794f53614c443555736b763074512e706e67\"></a></p>\n<p><a href=\"https://camo.githubusercontent.com/dd60451585672884f84cc3381ab7ace9b426c0f462e69ce4ebf80028d9969558/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f323536302f312a434f6a7a756e6a302d46734d4a30643776375a2d36672e706e67\"><img src=\"https://camo.githubusercontent.com/dd60451585672884f84cc3381ab7ace9b426c0f462e69ce4ebf80028d9969558/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f323536302f312a434f6a7a756e6a302d46734d4a30643776375a2d36672e706e67\"></a></p>\n<p>For similar content check out my GitHub:</p>\n<p><a href=\"https://github.com/bgoonz\" title=\"https://github.com/bgoonz\"><strong>bgoonz - Overview</strong><br>\n_Web Developer, Electrical Engineer _</a><em><a href=\"https://bryanguner.medium.com/\">https://bryanguner.medium.com/</a> <a href=\"https://portfolio42.netlify.app/%E2%80%A6\">https://portfolio42.netlify.app/...</a></em>github.com<a href=\"https://github.com/bgoonz\"></a></p>\n<p>By <a href=\"https://medium.com/@bryanguner\">Bryan Guner</a> on <a href=\"https://medium.com/p/eb1557e85fa3\">May 19, 2021</a>.</p>\n<p><a href=\"https://medium.com/@bryanguner/a-very-quick-guide-to-calculating-big-o-computational-complexity-eb1557e85fa3\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com/\">Medium</a> on July 13, 2021.</p>\n<p><a href=\"https://gist.github.com/bgoonz/674c3f169d75d5ab9453d4c7ffbdd821/raw/6df51b57737eabd32d1c68c57e110600f471619a/A-Very-Qui.md\">view raw</a><a href=\"https://gist.github.com/bgoonz/674c3f169d75d5ab9453d4c7ffbdd821#file-a-very-qui-md\">A-Very-Qui.md</a> hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<h1>Array Callback Methods Implemented With For Loops</h1>\n<p>How to implement array callback methods in JavaScript</p>\n<hr>\n<h3>Array Callback Methods Implemented With For Loops</h3>\n<h4>How to implement array callback methods in JavaScript</h4>\n<p><a href=\"https://camo.githubusercontent.com/66698fc55382cdcada06a280bbd01030f2d8b3a1f6590aa4b380086ac26537b3/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a57704b714f6454735450687661707557\"><img src=\"https://camo.githubusercontent.com/66698fc55382cdcada06a280bbd01030f2d8b3a1f6590aa4b380086ac26537b3/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a57704b714f6454735450687661707557\"></a></p>\n<h4>Functions are called \"First Class Objects\" in JavaScript because:</h4>\n<ul>\n<li>A function is an instance of the Object type</li>\n<li>A function can have properties and has a link back to its constructor method</li>\n<li>You can store the function in a variable</li>\n<li>You can pass the function as a parameter to another function</li>\n<li>You can return the function from a function</li>\n</ul>\n<p>What do you think will be printed in the following:</p>\n<h4>Anonymous callback, a named callback</h4>\n<pre><code>function foo(callback) {\n    console.log('grape');\n    callback();\n}\n\nfunction bar() {\n    console.log('banana');\n}\n\nconst fruitBasket = function() {\n    console.log('apple');\n    bar();\n    foo(bar);\n    foo(function() {\n        console.log('orange');\n    });\n    console.log('pear');\n};\n\nfruitBasket();\n</code></pre>\n<h4>Function that takes in a value and two callbacks. The function should return the result of the callback who's invocation results in a larger value.</h4>\n<pre><code>function greaterValue(value, cb1, cb2) {\n    // compare cb1 invoked with value to cb2 invoked with value\n    // return the greater result\n\n    let res1 = cb1(value);\n    let res2 = cb2(value);\n    if (res1 > res2) {\n        // if this is false, we move out of if statement\n        return res1;\n    }\n    return res2;\n}\n\nlet negate = function(num) {\n    return num * -1;\n};\n\nlet addOne = function(num) {\n    return num + 1;\n};\n\nconsole.log(greaterValue(3, negate, addOne));\nconsole.log(greaterValue(-2, negate, addOne));\n</code></pre>\n<p><em>Note: we do not invoke</em> <code>negate</code> <em>or</em> <code>addOne</code> <em>(by using</em> <code>()</code> <em>to call them), we are passing the function itself.</em></p>\n<h4>Write a function, myMap, that takes in an array and a callback as arguments. The function should mimic the behavior of Array.prototype.map.</h4>\n<pre><code>function myMap(arr, callback) {\n    // iterate through the array, perform the cb on each element\n    // return a new array with those new values\n    let mapped = [];\n\n    for (let i = 0; i &#x3C; arr.length; i++) {\n        // remember that map passes three args with each element.\n        let val = callback(arr[i], i, arr);\n        mapped.push(val);\n    }\n\n    return mapped;\n}\n\nlet double = function(num) {\n    return num * 2;\n};\nconsole.log(myMap([1, 2, 3], double));\n</code></pre>\n<h4>Write a function, myFilter, that takes in an array and a callback as arguments. The function should mimic the behavior of Array.prototype.filter.</h4>\n<pre><code>function myFilter(arr, callback) {\n    let filtered = [];\n\n    for (let i = 0; i &#x3C; arr.length; i++) {\n        let element = arr[i];\n\n        if (callback(element, i, arr)) {\n            filtered.push(element);\n        }\n    }\n\n    return filtered;\n}\n</code></pre>\n<h4>Write a function, myEvery, that takes in an array and a callback as arguments. The function should mimic the behavior of Array.prototype.every.</h4>\n<pre><code>function myEvery(arr, callback) {\n    for (let i = 0; i &#x3C; arr.length; i++) {\n        let element = arr[i];\n\n        if (callback(element, i, arr) === false) {\n            return false;\n        }\n    }\n    return true;\n}\n</code></pre>\n<h3>Further Examples of the above concepts</h3>\n<pre><code>const createMeowValue = () => {\n  console.log(this.name);\n  let meow = function () {\n    console.log(this);\n    console.log(this.name + ' meows');\n  }\n  meow = meow.bind(this);\n  return meow;\n};\n\nconst name = 'Fluffy';\n\nconst cat = {\n  name: name,\n  age: 12,\n  createMeow: function () {\n    console.log(this.name);\n    let meow = () => {\n      const hello = 'hello';\n      console.log(this.name + ' meows');\n    };\n    let world = '';\n    if (true) {\n      world = 'world';\n    }\n    console.log(world);\n    // meow = meow.bind(this);\n    return meow;\n  }\n};\n\ncat.newKey = function () {\n  const outermostContext = this;\n  const innerFunc = () => {\n    secondContext = this;\n    console.log(secondContext === outermostContext)\n    return function () {\n      innermostContext = this;\n    }\n  };\n  return innerFunc.bind(outermostContext);\n};\n\nconst meow = cat.createMeow(); // method-style invocation\nmeow(); // function-style invocation\n\nconsole.log('-------')\n\nconst createMeow = cat.createMeow;\nconst globalMeow = createMeow(); // function-style\nglobalMeow(); // function-style\n\nfunction createSmoothie(ingredient) {\n  const ingredients = [ingredient];\n  return ingredients;\n}\n\n// console.log(createSmoothie('banana'));\n// console.log(createSmoothie('apple'));\n\n// one parameter only\n// first argument is a string\n// return an array\n// DO NOT USE forEach\n</code></pre>\n<p>References:</p>\n<p><a href=\"https://open.appacademy.io/learn\" title=\"https://open.appacademy.io/learn\"><strong>App Academy Open</strong><br>\n<em>App Academy Open is the first free, online web development course that's meant to get you hired as a developer. Get...</em>open.appacademy.io</a><a href=\"https://open.appacademy.io/learn\"></a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/\" title=\"https://developer.mozilla.org/en-US/\"><strong>MDN Web Docs</strong><br>\n<em>Read more at hacks.mozilla.org Roughly a year ago at Mozilla we started an effort to improve Firefox stability on...</em>developer.mozilla.org</a><a href=\"https://developer.mozilla.org/en-US/\"></a></p>\n<p><a href=\"https://javascript.info/callbacks\" title=\"https://javascript.info/callbacks\"><strong>Introduction: callbacks</strong><br>\n<em>To demonstrate the use of callbacks, promises and other abstract concepts, we'll be using some browser methods...</em>javascript.info</a><a href=\"https://javascript.info/callbacks\"></a></p>\n<p><em>More content at</em> <a href=\"http://plainenglish.io/\"><strong><em>plainenglish.io</em></strong></a></p>\n<p>By <a href=\"https://medium.com/@bryanguner\">Bryan Guner</a> on <a href=\"https://medium.com/p/d08875df6777\">May 27, 2021</a>.</p>\n<p><a href=\"https://medium.com/@bryanguner/array-callback-methods-implemented-with-for-loops-d08875df6777\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com/\">Medium</a> on July 13, 2021.</p>\n<p><a href=\"https://gist.github.com/bgoonz/674c3f169d75d5ab9453d4c7ffbdd821/raw/6df51b57737eabd32d1c68c57e110600f471619a/Array-Call.md\">view raw</a><a href=\"https://gist.github.com/bgoonz/674c3f169d75d5ab9453d4c7ffbdd821#file-array-call-md\">Array-Call.md</a> hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<h1>Bash Commands That Save Me Time and Frustration</h1>\n<p>Here's a list of bash commands that stand between me and insanity.</p>\n<hr>\n<h3>Bash Commands That Save Me Time and Frustration</h3>\n<h4>Here's a list of bash commands that stand between me and insanity.</h4>\n<p><a href=\"https://camo.githubusercontent.com/22b34f635d2c806b42121947a66b17cb69fe0b64d935cbdeabe81c3bccc74e8e/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a77304a3875366a5754696b59565a7a572e6a7067\"><img src=\"https://camo.githubusercontent.com/22b34f635d2c806b42121947a66b17cb69fe0b64d935cbdeabe81c3bccc74e8e/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a77304a3875366a5754696b59565a7a572e6a7067\"></a></p>\n<p><strong>This article will be accompanied by the following</strong> <a href=\"https://github.com/bgoonz/bash-commands-walkthrough\"><strong>github repository</strong></a> <strong>which will contain all the commands listed as well as folders that demonstrate before and after usage!</strong></p>\n<p><a href=\"https://github.com/bgoonz/bash-commands-walkthrough\" title=\"https://github.com/bgoonz/bash-commands-walkthrough\"><strong>bgoonz/bash-commands-walkthrough</strong><br>\n<em>to accompany the medium article I am writing. Contribute to bgoonz/bash-commands-walkthrough development by creating an...</em>github.com</a><a href=\"https://github.com/bgoonz/bash-commands-walkthrough\"></a></p>\n<blockquote>\n<p>The <a href=\"https://github.com/bgoonz/bash-commands-walkthrough#readme\">readme</a> for this git repo will provide a much more condensed list... whereas this article will break up the commands with explanations... images &#x26; links!</p>\n</blockquote>\n<p><strong>I will include the code examples as both github gists (for proper syntax highlighting) and as code snippets adjacent to said gists so that they can easily be copied and pasted... or ... if you're like me for instance; and like to use an extension to grab the markdown content of a page... the code will be included rather than just a link to the gist!</strong></p>\n<p><a href=\"https://camo.githubusercontent.com/a3dd21a18d0fcf7ac3c80b09877c193ba4f84657dcebde6487aea381d9aba9bf/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f313230302f312a336d5f5563514f41794b7449704851366a394a7a5a772e676966\"><img src=\"https://camo.githubusercontent.com/a3dd21a18d0fcf7ac3c80b09877c193ba4f84657dcebde6487aea381d9aba9bf/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f313230302f312a336d5f5563514f41794b7449704851366a394a7a5a772e676966\"></a></p>\n<h3>Here's a Cheatsheet:</h3>\n<h3>Getting Started (Advanced Users Skip Section):</h3>\n<hr>\n<h4>✔ Check the Current Directory ➡ <code>pwd</code>:</h4>\n<p>On the command line, it's important to know the directory we are currently working on. For that, we can use <code>pwd</code> command.</p>\n<p><a href=\"https://camo.githubusercontent.com/ede56713024434b9c0c8008f54475a7f4fcdcd15427580cbc504793e43a15b6d/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a64696d7a4c55726d44493455666576362e676966\"><img src=\"https://camo.githubusercontent.com/ede56713024434b9c0c8008f54475a7f4fcdcd15427580cbc504793e43a15b6d/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a64696d7a4c55726d44493455666576362e676966\"></a></p>\n<p>It shows that I'm working on my Desktop directory.</p>\n<h4>✔ Display List of Files ➡ <code>ls</code>:</h4>\n<p>To see the list of files and directories in the current directory use <code>ls</code> command in your CLI.</p>\n<p><a href=\"https://camo.githubusercontent.com/e9cfe3bfa6f8d2ff3cc9f7959a7896facb58708e7e707d012ad989edb589b6ec/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a48487a56724b324374545077546459542e676966\"><img src=\"https://camo.githubusercontent.com/e9cfe3bfa6f8d2ff3cc9f7959a7896facb58708e7e707d012ad989edb589b6ec/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a48487a56724b324374545077546459542e676966\"></a></p>\n<p>Shows all of my files and directories of my Desktop directory.</p>\n<ul>\n<li>To show the contents of a directory pass the directory name to the <code>ls</code> command i.e. <code>ls directory_name</code>.</li>\n<li>Some useful <code>ls</code> command options:-</li>\n</ul>\n<p>OptionDescriptionls -alist all files including hidden file starting with '.'ls -llist with the long formatls -lalist long format including hidden files</p>\n<h4>✔ Create a Directory ➡ <code>mkdir</code>:</h4>\n<p>We can create a new folder using the <code>mkdir</code> command. To use it type <code>mkdir folder_name</code>.</p>\n<p><a href=\"https://camo.githubusercontent.com/8c10a898b8f52be59dc0723ab2dd0784c22c12a325ffe5cc64a38f07341ef90e/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a6d33644479433976524a42555a5378522e676966\"><img src=\"https://camo.githubusercontent.com/8c10a898b8f52be59dc0723ab2dd0784c22c12a325ffe5cc64a38f07341ef90e/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a6d33644479433976524a42555a5378522e676966\"></a></p>\n<p>Use <code>ls</code> command to see the directory is created or not.</p>\n<p>I created a cli-practice directory in my working directory i.e. Desktop directory.</p>\n<h4>✔ Move Between Directories ➡ <code>cd</code>:</h4>\n<p>It's used to change directory or to move other directories. To use it type <code>cd directory_name</code>.</p>\n<p><a href=\"https://camo.githubusercontent.com/d78e325dda59d59be4bd151dd85d3b1966324cb205da2eb540f1372e8195b280/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a33344b4778543247386f4e4d446e49632e676966\"><img src=\"https://camo.githubusercontent.com/d78e325dda59d59be4bd151dd85d3b1966324cb205da2eb540f1372e8195b280/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a33344b4778543247386f4e4d446e49632e676966\"></a></p>\n<p>Can use <code>pwd</code> command to confirm your directory name.</p>\n<p>Changed my directory to the cli-practice directory. And the rest of the tutorial I'm gonna work within this directory.</p>\n<h4>✔ Parent Directory ➡ <code>..</code>:</h4>\n<p>We have seen <code>cd</code> command to change directory but if we want to move back or want to move to the parent directory we can use a special symbol <code>..</code> after <code>cd</code> command, like <code>cd ..</code></p>\n<h4>✔ Create Files ➡ <code>touch</code>:</h4>\n<p>We can create an empty file by typing <code>touch file_name</code>. It's going to create a new file in the current directory (the directory you are currently in) with your provided name.</p>\n<p><a href=\"https://camo.githubusercontent.com/97e82f91cb8cfcf342cf97e8b572b49d1bc264cbe9929c7e23d0f72589d6708d/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a78753177747637674a324e4d765036302e676966\"><img src=\"https://camo.githubusercontent.com/97e82f91cb8cfcf342cf97e8b572b49d1bc264cbe9929c7e23d0f72589d6708d/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a78753177747637674a324e4d765036302e676966\"></a></p>\n<p>I created a hello.txt file in my current working directory. Again you can use <code>ls</code> command to see the file is created or not.</p>\n<p>Now open your hello.txt file in your text editor and write <em>Hello Everyone!</em> into your hello.txt file and save it.</p>\n<h4>✔ Display the Content of a File ➡ <code>cat</code>:</h4>\n<p>We can display the content of a file using the <code>cat</code> command. To use it type <code>cat file_name</code>.</p>\n<p><a href=\"https://camo.githubusercontent.com/ffe71e48a1a9bd9b118265c18a81e0b49a515cf40453416134dfca52567bb82c/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a694b6635773951464e43654c527638612e676966\"><img src=\"https://camo.githubusercontent.com/ffe71e48a1a9bd9b118265c18a81e0b49a515cf40453416134dfca52567bb82c/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a694b6635773951464e43654c527638612e676966\"></a></p>\n<p>Shows the content of my hello.txt file.</p>\n<h4>✔ Move Files &#x26; Directories ➡ <code>mv</code>:</h4>\n<p>To move a file and directory, we use <code>mv</code> command.</p>\n<p>By typing <code>mv file_to_move destination_directory</code>, you can move a file to the specified directory.</p>\n<p>By entering <code>mv directory_to_move destination_directory</code>, you can move all the files and directories under that directory.</p>\n<p>Before using this command, we are going to create two more directories and another txt file in our cli-practice directory.</p>\n<p><code>mkdir html css touch bye.txt</code></p>\n<p><a href=\"https://camo.githubusercontent.com/7197994733b63ae597fb12ba8c29509ed3c714f274d4e51542c64a942c069336/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a70696141517a5f4d51707a6f374450482e676966\"><img src=\"https://camo.githubusercontent.com/7197994733b63ae597fb12ba8c29509ed3c714f274d4e51542c64a942c069336/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a70696141517a5f4d51707a6f374450482e676966\"></a></p>\n<p>Yes, we can use multiple directories &#x26; files names one after another to create multiple directories &#x26; files in one command.</p>\n<p><a href=\"https://camo.githubusercontent.com/5db5a79472f5bffa91c5bfd8c892437523b68072d930c7b4334c8b622ecb55de/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a356a6d6a5f5a794e7a34364775514b7a2e676966\"><img src=\"https://camo.githubusercontent.com/5db5a79472f5bffa91c5bfd8c892437523b68072d930c7b4334c8b622ecb55de/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a356a6d6a5f5a794e7a34364775514b7a2e676966\"></a></p>\n<p>Moved my bye.txt file into my css directory and then moved my css directory into my html directory.</p>\n<h4>✔ Rename Files &#x26; Directories ➡ <code>mv</code>:</h4>\n<p><code>mv</code> command can also be used to rename a file and a directory.</p>\n<p>You can rename a file by typing <code>mv old_file_name new_file_name</code> &#x26; also rename a directory by typing <code>mv old_directory_name new_directory_name</code>.</p>\n<p><a href=\"https://camo.githubusercontent.com/3feb1289a79b907796c1d736e119730dc3d2dbcd60c6ba072ee226cc8cb69b75/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a575456753164643667722d6e6d5768442e676966\"><img src=\"https://camo.githubusercontent.com/3feb1289a79b907796c1d736e119730dc3d2dbcd60c6ba072ee226cc8cb69b75/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a575456753164643667722d6e6d5768442e676966\"></a></p>\n<p>Renamed my hello.txt file to the hi.txt file and html directory to the folder directory.</p>\n<h4>✔ Copy Files &#x26; Directories ➡ <code>cp</code>:</h4>\n<p>To do this, we use the <code>cp</code> command.</p>\n<ul>\n<li>You can copy a file by entering <code>cp file_to_copy new_file_name</code>.</li>\n</ul>\n<p><a href=\"https://camo.githubusercontent.com/9b67b2ef374ba0f1457b24007824ea5b65ca861a100397322d1a13f30a70818f/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a6b434c56744b4e396f4b5062486652462e676966\"><img src=\"https://camo.githubusercontent.com/9b67b2ef374ba0f1457b24007824ea5b65ca861a100397322d1a13f30a70818f/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a6b434c56744b4e396f4b5062486652462e676966\"></a></p>\n<p>Copied my hi.txt file content into hello.txt file. For confirmation open your hello.txt file in your text editor.</p>\n<ul>\n<li>You can also copy a directory by adding the <code>-r</code> option, like <code>cp -r directory_to_copy new_directory_name</code>.</li>\n</ul>\n<p><em>The</em> <code>-r</code> <em>option for \"recursive\" means that it will copy all of the files including the files inside of subfolders.</em></p>\n<p><a href=\"https://camo.githubusercontent.com/b914824b683c77cb019300487919155d05a805fb82b0a743ecdce67fd22bab55/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a4d6e6d7a4d69696f495943754b3932422e676966\"><img src=\"https://camo.githubusercontent.com/b914824b683c77cb019300487919155d05a805fb82b0a743ecdce67fd22bab55/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a4d6e6d7a4d69696f495943754b3932422e676966\"></a></p>\n<p>Here I copied all of the files from the folder to folder-copy.</p>\n<h4>✔ Remove Files &#x26; Directories ➡ <code>rm</code>:</h4>\n<p>To do this, we use the <code>rm</code> command.</p>\n<ul>\n<li>To remove a file, you can use the command like <code>rm file_to_remove</code>.</li>\n</ul>\n<p><a href=\"https://camo.githubusercontent.com/e35ef5a179966ed8271639d381b997455862bb77794f0b8c219f7ffada7168da/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a6f68436d6474686439325f4841365a652e676966\"><img src=\"https://camo.githubusercontent.com/e35ef5a179966ed8271639d381b997455862bb77794f0b8c219f7ffada7168da/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a6f68436d6474686439325f4841365a652e676966\"></a></p>\n<p>Here I removed my hi.txt file.</p>\n<ul>\n<li>To remove a directory, use the command like <code>rm -r directory_to_remove</code>.</li>\n</ul>\n<p><a href=\"https://camo.githubusercontent.com/5622af09767bfd626db8e52f5e040afeaf16be692b75a3069f7b01d74c1c4ee6/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a766f44627a7753707732344132526a512e676966\"><img src=\"https://camo.githubusercontent.com/5622af09767bfd626db8e52f5e040afeaf16be692b75a3069f7b01d74c1c4ee6/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a766f44627a7753707732344132526a512e676966\"></a></p>\n<p>I removed my folder-copy directory from my cli-practice directory i.e. current working directory.</p>\n<h4>✔ Clear Screen ➡ <code>clear</code>:</h4>\n<p>Clear command is used to clear the terminal screen.</p>\n<h4>✔ Home Directory ➡ <code>~</code>:</h4>\n<p>The Home directory is represented by <code>~</code>. The Home directory refers to the base directory for the user. If we want to move to the Home directory we can use <code>cd ~</code> command. Or we can only use <code>cd</code> command.</p>\n<hr>\n<h3>MY COMMANDS:</h3>\n<h3>1.) Recursively unzip zip files and then delete the archives when finished:</h3>\n<p><strong>here is a</strong> <a href=\"https://github.com/bgoonz/bash-commands-walkthrough/tree/master/steps/1-recursive-unzip\"><strong>folde</strong></a><strong>r containing the before and after... I had to change folder names slightly due to a limit on the length of file-paths in a github repo.</strong></p>\n<pre><code>find . -name \"*.zip\" | while read filename; do unzip -o -d \"`dirname \"$filename\"`\" \"$filename\"; done;\n\nfind . -name \"*.zip\" -type f -print -delete\n</code></pre>\n<hr>\n<h3>2.) Install node modules recursively:</h3>\n<pre><code>npm i -g recursive-install\n\nnpm-recursive-install\n</code></pre>\n<hr>\n<h3>3.) Clean up unnecessary files/folders in git repo:</h3>\n<pre><code>find . -empty -type f -print -delete #Remove empty files\n\n# -------------------------------------------------------\nfind . -empty -type d -print -delete #Remove empty folders\n\n# -------------------------------------------------------\n\n# This will remove .git folders...    .gitmodule files as well as .gitattributes and .gitignore files.\n\nfind . \\( -name \".git\" -o -name \".gitignore\" -o -name \".gitmodules\" -o -name \".gitattributes\" \\) -exec rm -rf -- {} +\n\n# -------------------------------------------------------\n\n# This will remove the filenames you see listed below that just take up space if a repo has been downloaded for use exclusively in your personal file system (in which case the following files just take up space)# Disclaimer... you should not use this command in a repo that you intend to use with your work as it removes files that attribute the work to their original creators!\n\nfind . \\( -name \"*SECURITY.txt\" -o -name \"*RELEASE.txt\" -o -name \"*CHANGELOG.txt\" -o -name \"*LICENSE.txt\" -o -name \"*CONTRIBUTING.txt\" -name \"*HISTORY.md\" -o -name \"*LICENSE\" -o -name \"*SECURITY.md\" -o -name \"*RELEASE.md\" -o -name \"*CHANGELOG.md\" -o -name \"*LICENSE.md\" -o -name \"*CODE_OF_CONDUCT.md\" -o -name \"\\*CONTRIBUTING.md\" \\) -exec rm -rf -- {} +\n</code></pre>\n<h4>In Action:</h4>\n<p>The following output from my bash shell corresponds to the directory:</p>\n<p><a href=\"https://github.com/bgoonz/bash-commands-walkthrough/tree/master/steps/3-clean-up-fluf/DS-ALGO-OFFICIAL-master\" title=\"https://github.com/bgoonz/bash-commands-walkthrough/tree/master/steps/3-clean-up-fluf/DS-ALGO-OFFICIAL-master\"><strong>bgoonz/bash-commands-walkthrough</strong><br>\n<em>Deployment github-pages Navigation Big O notation is the language we use for talking about how long an algorithm takes...</em>github.com</a><a href=\"https://github.com/bgoonz/bash-commands-walkthrough/tree/master/steps/3-clean-up-fluf/DS-ALGO-OFFICIAL-master\"></a></p>\n<h4>which was created by running the aforementioned commands in in a perfect copy of this directory:</h4>\n<p><a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\" title=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\"><strong>bgoonz/DS-ALGO-OFFICIAL</strong><br>\n<em>Deployment github-pages Navigation Big O notation is the language we use for talking about how long an algorithm takes...</em>github.com</a><a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\"></a></p>\n<blockquote>\n<p><strong>.....below is the terminal output for the following commands:</strong></p>\n</blockquote>\n<pre><code>pwd\n/mnt/c/Users/bryan/Downloads/bash-commands/steps/3-clean-up-fluf/DS-ALGO-OFFICIAL-master\n</code></pre>\n<blockquote>\n<p><strong>After printing the working directory for good measure:</strong></p>\n</blockquote>\n<pre><code>find . -empty -type f -print -delete\n</code></pre>\n<blockquote>\n<p><strong>The above command deletes empty files recursively starting from the directory in which it was run:</strong></p>\n</blockquote>\n<pre><code>./CONTENT/DS-n-Algos/File-System/file-utilities/node_modules/line-reader/test/data/empty_file.txt\n./CONTENT/DS-n-Algos/_Extra-Practice/free-code-camp/nodejs/http-collect.js\n./CONTENT/Resources/Comments/node_modules/mime/.npmignore\n./markdown/tree2.md\n./node_modules/loadashes6/lodash/README.md\n./node_modules/loadashes6/lodash/release.md\n./node_modules/web-dev-utils/Markdown-Templates/Markdown-Templates-master/filled-out-readme.md\n|01:33:16|bryan@LAPTOP-9LGJ3JGS:[DS-ALGO-OFFICIAL-master] DS-ALGO-OFFICIAL-master_exitstatus:0[╗___________o>\n</code></pre>\n<blockquote>\n<p><strong>The command seen below deletes empty folders recursively starting from the directory in which it was run:</strong></p>\n</blockquote>\n<pre><code>find . -empty -type d -print -delete\n</code></pre>\n<blockquote>\n<p>The resulting directories....</p>\n</blockquote>\n<pre><code>|01:33:16|bryan@LAPTOP-9LGJ3JGS:[DS-ALGO-OFFICIAL-master] DS-ALGO-OFFICIAL-master_exitstatus:0[╗___________o>\n\nfind . -empty -type d -print -delete\n./.git/branches\n./.git/objects/info\n./.git/refs/tags\n|01:33:31|bryan@LAPTOP-9LGJ3JGS:[DS-ALGO-OFFICIAL-master] DS-ALGO-OFFICIAL-master_exitstatus:0[╗___________o>\n</code></pre>\n<blockquote>\n<p><strong>The command seen below deletes .git folders as well as .gitignore, .gitattributes, .gitmodule files</strong></p>\n</blockquote>\n<pre><code>find . \\( -name \".git\" -o -name \".gitignore\" -o -name \".gitmodules\" -o -name \".gitattributes\" \\) -exec rm -rf -- {} +\n</code></pre>\n<p><strong>The command seen below deletes most SECURITY, RELEASE, CHANGELOG, LICENSE, CONTRIBUTING, &#x26; HISTORY files that take up pointless space in repo's you wish to keep exclusively for your own reference.</strong></p>\n<h3>!!!Use with caution as this command removes the attribution of the work from it's original authors!!!!!</h3>\n<p><a href=\"https://camo.githubusercontent.com/ea68eea425581d8683031170810ceb578f8bafb975c1d5323100965dd912a3fa/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a72356447687462655a3456644f353455\"><img src=\"https://camo.githubusercontent.com/ea68eea425581d8683031170810ceb578f8bafb975c1d5323100965dd912a3fa/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a72356447687462655a3456644f353455\" alt=\"!!!Use with caution as this command removes the attribution of the work from it&#x27;s original authors!!!!!\"></a></p>\n<p>!!!Use with caution as this command removes the attribution of the work from it's original authors!!!!!find . ( -name \"<em>SECURITY.txt\" -o -name \"</em>RELEASE.txt\" -o -name \"<em>CHANGELOG.txt\" -o -name \"</em>LICENSE.txt\" -o -name \"<em>CONTRIBUTING.txt\" -name \"</em>HISTORY.md\" -o -name \"<em>LICENSE\" -o -name \"</em>SECURITY.md\" -o -name \"<em>RELEASE.md\" -o -name \"</em>CHANGELOG.md\" -o -name \"<em>LICENSE.md\" -o -name \"</em>CODE<em>OF</em>CONDUCT.md\" -o -name \"*CONTRIBUTING.md\" ) -exec rm -rf -- {} +</p>\n<hr>\n<h3>4.) Generate index.html file that links to all other files in working directory:</h3>\n<pre><code>#!/bin/sh\n# find ./ | grep -i \"\\.*$\" >files\nfind ./ | sed -E -e 's/([^ ]+[ ]+){8}//' | grep -i \"\\.*$\">files\nlisting=\"files\"\nout=\"\"\nhtml=\"index.html\"\nout=\"basename $out.html\"\nhtml=\"index.html\"\ncmd() {\n  echo '  &#x3C;!DOCTYPE html>'\n  echo '&#x3C;html>'\n  echo '&#x3C;head>'\n  echo '  &#x3C;meta http-equiv=\"Content-Type\" content=\"text/html\">'\n  echo '  &#x3C;meta name=\"Author\" content=\"Bryan Guner\">'\n  echo '&#x3C;link rel=\"stylesheet\" href=\"./assets/prism.css\">'\n  echo ' &#x3C;link rel=\"stylesheet\" href=\"./assets/style.css\">'\n  echo ' &#x3C;script async defer src=\"./assets/prism.js\">&#x3C;/script>'\n  echo \"  &#x3C;title> directory &#x3C;/title>\"\n  echo \"\"\n  echo '&#x3C;style>'\necho '    a {'\necho '      color: black;'\necho '    }'\necho ''\necho '    li {'\necho '      border: 1px solid black !important;'\necho '      font-size: 20px;'\necho '      letter-spacing: 0px;'\necho '      font-weight: 700;'\necho '      line-height: 16px;'\necho '      text-decoration: none !important;'\necho '      text-transform: uppercase;'\necho '      background: #194ccdaf !important;'\necho '      color: black !important;'\necho '      border: none;'\necho '      cursor: pointer;'\necho '      justify-content: center;'\necho '      padding: 30px 60px;'\necho '      height: 48px;'\necho '      text-align: center;'\necho '      white-space: normal;'\necho '      border-radius: 10px;'\necho '      min-width: 45em;'\necho '      padding: 1.2em 1em 0;'\necho '      box-shadow: 0 0 5px;'\necho '      margin: 1em;'\necho '      display: grid;'\necho '      -webkit-border-radius: 10px;'\necho '      -moz-border-radius: 10px;'\necho '      -ms-border-radius: 10px;'\necho '      -o-border-radius: 10px;'\necho '    }'\necho '  &#x3C;/style>'\n  echo '&#x3C;/head>'\n  echo '&#x3C;body>'\n  echo \"\"\n  # continue with the HTML stuff\n  echo \"\"\n  echo \"\"\n  echo \"&#x3C;ul>\"\n  awk '{print \"&#x3C;li>&#x3C;a href=\\\"\"$1\"\\\">\",$1,\"&#x26;nbsp;&#x3C;/a>&#x3C;/li>\"}' $listing\n  # awk '{print \"&#x3C;li>\"};\n  #  {print \" &#x3C;a href=\\\"\"$1\"\\\">\",$1,\"&#x3C;/a>&#x3C;/li>&#x26;nbsp;\"}' \\ $listing\n  echo \"\"\n  echo \"&#x3C;/ul>\"\n  echo \"&#x3C;/body>\"\n  echo \"&#x3C;/html>\"\n}\ncmd $listing --sort=extension >>$html\n</code></pre>\n<h4>In Action:</h4>\n<p><strong>I will use this copy of my Data Structures Practice Site to demonstrate the result:</strong></p>\n<p><a href=\"https://github.com/side-projects-42/DS-Bash-Examples-Deploy\" title=\"https://github.com/side-projects-42/DS-Bash-Examples-Deploy\"><strong>side-projects-42/DS-Bash-Examples-Deploy</strong><br>\n<em>Deployment github-pages Navigation Big O notation is the language we use for talking about how long an algorithm takes...</em>github.com</a><a href=\"https://github.com/side-projects-42/DS-Bash-Examples-Deploy\"></a></p>\n<p><a href=\"https://camo.githubusercontent.com/0f97bdb9d1167b14f340044bcdca3eb0472acc4c80dcc9c1db4f13ad6900bf20/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f312a5075754454557669583547366d6a612d35654b5549772e706e67\"><img src=\"https://camo.githubusercontent.com/0f97bdb9d1167b14f340044bcdca3eb0472acc4c80dcc9c1db4f13ad6900bf20/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f312a5075754454557669583547366d6a612d35654b5549772e706e67\"></a></p>\n<h4>The result is a index.html file that contains a list of links to each file in the directory:</h4>\n<blockquote>\n<p>here is a link to and photo of the resulting html file:</p>\n</blockquote>\n<p><a href=\"https://quirky-meninsky-4181b5.netlify.app/\" title=\"https://quirky-meninsky-4181b5.netlify.app/\"><strong>index.html</strong><br>\n<em>CONTENT/DS-n-Algos/</em>quirky-meninsky-4181b5.netlify.app</a><a href=\"https://quirky-meninsky-4181b5.netlify.app/\"></a></p>\n<p><a href=\"https://camo.githubusercontent.com/ce04a06e4fc2c23c62fd6a9dbea96125b5920b8c53a1c62434325989768cd1a7/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f312a414f5962577655474e39794a3463654e7a41474773772e706e67\"><img src=\"https://camo.githubusercontent.com/ce04a06e4fc2c23c62fd6a9dbea96125b5920b8c53a1c62434325989768cd1a7/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f312a414f5962577655474e39794a3463654e7a41474773772e706e67\"></a></p>\n<hr>\n<h3>5.) Download all links to a files of a specified extension on a user provided (url) webpage:</h3>\n<pre><code>wget -r -A.pdf https://overapi.com/gitwget --wait=2 --level=inf --limit-rate=20K --recursive --page-requisites --user-agent=Mozilla --no-parent --convert-links --adjust-extension --no-clobber -e robots=off\n</code></pre>\n<blockquote>\n<p>The result is stored in <a href=\"https://github.com/bgoonz/bash-commands-walkthrough/tree/master/steps/5-download-all-pdf\">this directory:</a></p>\n</blockquote>\n<p><a href=\"https://camo.githubusercontent.com/02861c1b49280db7ab6c017bc4dc93f0d22b7385e2b33e2154fc3e734b1da3c7/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f313230302f312a38657656504f5f7a2d5f5441547a6b634454703135512e706e67\"><img src=\"https://camo.githubusercontent.com/02861c1b49280db7ab6c017bc4dc93f0d22b7385e2b33e2154fc3e734b1da3c7/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f313230302f312a38657656504f5f7a2d5f5441547a6b634454703135512e706e67\"></a></p>\n<hr>\n<h3>6.)Recursively remove lines of text containing the string badFolder from files in the working directory.</h3>\n<pre><code>find . -type f -exec sed -i '/badFolder/d' ./* {} \\;\n\n# OR\n\nfind . -name 'result.md'  -type f -exec sed -i '/badFolder/d' ./* {} \\;\n</code></pre>\n<p><strong>As an example I will run this command on a file containing the text:</strong></p>\n<pre><code>Hacks Blog\n\nRead more at hacks.mozilla.org\n\nbadFolder\n\nbadFolder Implementing Private Fields for JavaScript\n\nWhen implementing a language feature for JavaScript, an implementer must make decisions about how the language in the specification maps to the implementation. Private fields is an example of where the specification language and implementation reality diverge, at least in SpiderMonkey-- the JavaScript engine which powers Firefox. To understand more, I'll explain what private fields are, a couple of models for thinking about them, and explain why our implementation diverges from the specification language.The post Implementing Private Fields for JavaScript appeared first on Mozilla Hacks - the Web developer blog.\n\nPosted Tuesday, June 8, 2021 by Matthew Gaudet\n\nLooking fine with Firefox 89\n\nFirefox 89 has smartened up and brings with it a slimmed-down, slightly more minimalist interface.badFolder Along with this new look, we get some great styling features including a force-colours feature for media queries and better control over how fonts are displayed. The long-awaited top-level await keyword for JavaScript modules is now enabled, as well as the PerformanceEventTiming interface, which is another addition to the performance suite of APIs: 89 really has been working out!The post Looking fine with Firefox 89 appeared first on Mozilla Hacks - the Web developer blog.\n\nbadFolder\n\nPosted Tuesday, June 1, 2021 by Chris Mills\n\nbadFolder\n\nImproving Firefox stability on Linux\n\nRoughly a year ago at Mozilla we started an effort to improve Firefox stability on Linux. This effort quickly became an example of good synergies between FOSS projects.The post Improving Firefox stability on Linux appeared first on Mozilla Hacks - the Web developer blog.\n\nPosted Wednesday, May 19, 2021 by Gabriele Svelto badFolder\n\nIntroducing Firefox's new Site Isolation Security Architecture\n\nLike any web browser, Firefox loads code from untrusted and potentially hostile websites and runs it on your computer. To protect you against new types of attacks from malicious sites and to meet the security principles of Mozilla, we set out to redesign Firefox on desktop.The post Introducing Firefox's new Site Isolation Security Architecture appeared first on Mozilla Hacks - the Web developer blog.\n\nPosted Tuesday, May 18, 2021 by Anny Gakhokidze\n\nPyodide Spin Out and 0.17 Release\n\nWe are happy to announce that Pyodide has become an independent and community-driven project. We are also pleased to announce the 0.17 release for Pyodide with many new features and improvements. Pyodide consists of the CPython 3.8 interpreter compiled to WebAssembly which allows Python to run in the browser.The post Pyodide Spin Out and 0.17 Release appeared first on Mozilla Hacks - the Web developer blog. badFolder\n\nPosted Thursday, April 22, 2021 by Teon Brooks\n</code></pre>\n<p><strong><em>I modified the command slightly to apply only to files called 'result.md':</em></strong></p>\n<blockquote>\n<p>The result is :</p>\n</blockquote>\n<pre><code>Hacks Blog\n\nRead more at hacks.mozilla.org\n\nWhen implementing a language feature for JavaScript, an implementer must make decisions about how the language in the specification maps to the implementation. Private fields is an example of where the specification language and implementation reality diverge, at least in SpiderMonkey-- the JavaScript engine which powers Firefox. To understand more, I'll explain what private fields are, a couple of models for thinking about them, and explain why our implementation diverges from the specification language.The post Implementing Private Fields for JavaScript appeared first on Mozilla Hacks - the Web developer blog.\n\nPosted Tuesday, June 8, 2021 by Matthew Gaudet\n\nLooking fine with Firefox 89\n\nPosted Tuesday, June 1, 2021 by Chris Mills\n\nImproving Firefox stability on Linux\n\nRoughly a year ago at Mozilla we started an effort to improve Firefox stability on Linux. This effort quickly became an example of good synergies between FOSS projects.The post Improving Firefox stability on Linux appeared first on Mozilla Hacks - the Web developer blog.\n\nIntroducing Firefox's new Site Isolation Security Architecture\n\nLike any web browser, Firefox loads code from untrusted and potentially hostile websites and runs it on your computer. To protect you against new types of attacks from malicious sites and to meet the security principles of Mozilla, we set out to redesign Firefox on desktop.The post Introducing Firefox's new Site Isolation Security Architecture appeared first on Mozilla Hacks - the Web developer blog.\n\nPosted Tuesday, May 18, 2021 by Anny Gakhokidze\n\nPyodide Spin Out and 0.17 Release\n\nPosted Thursday, April 22, 2021 by Teon Brooks\n</code></pre>\n<p><a href=\"https://camo.githubusercontent.com/4308e370c8f20afdfd06a497dcd7eb257b61b498a18c23a3c9584675b38b1a10/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f313230302f312a55703561732d4d6b4863486276495f715831417150772e706e67\"><img src=\"https://camo.githubusercontent.com/4308e370c8f20afdfd06a497dcd7eb257b61b498a18c23a3c9584675b38b1a10/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f313230302f312a55703561732d4d6b4863486276495f715831417150772e706e67\"></a></p>\n<p><strong>the test.txt and result.md files can be found here:</strong></p>\n<p><a href=\"https://github.com/bgoonz/bash-commands-walkthrough/tree/master/steps/6-remove-lines-contaning-bad-text\" title=\"https://github.com/bgoonz/bash-commands-walkthrough/tree/master/steps/6-remove-lines-contaning-bad-text\"><strong>bgoonz/bash-commands-walkthrough</strong><br>\n<em>to accompany the medium article I am writing. Contribute to bgoonz/bash-commands-walkthrough development by creating an...</em>github.com</a><a href=\"https://github.com/bgoonz/bash-commands-walkthrough/tree/master/steps/6-remove-lines-contaning-bad-text\"></a></p>\n<hr>\n<h3>7.) Execute command recursively:</h3>\n<p><strong>Here I have modified the command I wish to run recursively to account for the fact that the 'find' command already works recursively, by appending the -maxdepth 1 flag...</strong></p>\n<blockquote>\n<p><strong>I am essentially removing the recursive action of the find command...</strong></p>\n</blockquote>\n<p><strong>That way, if the command affects the more deeply nested folders we know the outer RecurseDirs function we are using to run the <em>find/pandoc</em> line once in every subfolder of the working directory... is working properly!</strong></p>\n<p><a href=\"https://camo.githubusercontent.com/b514da1e3cfcfeda7a09f9d691618ee89526a7ebe8ded7dd7140a5c88f5f9d3e/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3630302f312a35435f757a4c6e7543536c5469696f693245746e55412e706e67\"><img src=\"https://camo.githubusercontent.com/b514da1e3cfcfeda7a09f9d691618ee89526a7ebe8ded7dd7140a5c88f5f9d3e/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3630302f312a35435f757a4c6e7543536c5469696f693245746e55412e706e67\"></a></p>\n<p><strong>Run in the folder shown to the left... we would expect every .md file to be accompanied by a newly generated html file by the same name.</strong></p>\n<p><strong>The results of said operation can be found in the</strong> <a href=\"https://github.com/bgoonz/bash-commands-walkthrough/tree/master/steps/7-recursive-run\"><strong>following directory</strong></a></p>\n<h4>In Action:</h4>\n<p>🢃 Below 🢃</p>\n<p><a href=\"https://camo.githubusercontent.com/5f6bdf3692deea17ec807a6bb770b7474de94190813abae568dde34f9f8b5422/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f313230302f312a6b39633151524b593037544c4a6e7039536538396c512e676966\"><img src=\"https://camo.githubusercontent.com/5f6bdf3692deea17ec807a6bb770b7474de94190813abae568dde34f9f8b5422/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f313230302f312a6b39633151524b593037544c4a6e7039536538396c512e676966\"></a></p>\n<h4>The final result is:</h4>\n<p><a href=\"https://camo.githubusercontent.com/1d5d06c2c92fbb7a3f42080beacb2ae8e3e0e9887220cfe81ba851eff627c753/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f313230302f312a6a71726a4e654275526d5472447433766d5135304c512e706e67\"><img src=\"https://camo.githubusercontent.com/1d5d06c2c92fbb7a3f42080beacb2ae8e3e0e9887220cfe81ba851eff627c753/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f313230302f312a6a71726a4e654275526d5472447433766d5135304c512e706e67\"></a></p>\n<p><em>If you want to run any bash script recursively all you have to do is substitue out line #9 with the command you want to run once in every sub-folder.</em></p>\n<pre><code>function RecurseDirs ()\n{\n    oldIFS=$IFS\n    IFS=$'\\n'\n    for f in \"$@\"\n    do\n\n#Replace the line below with your own command!\n\n#find ./ -iname \"*.md\" -maxdepth 1 -type f -exec sh -c 'pandoc --standalone \"${0}\" -o \"${0%.md}.html\"' {} \\;\n\n#####################################################\n# YOUR CODE BELOW!\n\n#####################################################\n\nif [[ -d \"${f}\" ]]; then\n            cd \"${f}\"\n            RecurseDirs $(ls -1 \".\")\n            cd ..\n        fi\n    done\n    IFS=$oldIFS\n}\nRecurseDirs \"./\"\n</code></pre>\n<hr>\n<h3>TBC....</h3>\n<p><strong>Here are some of the other commands I will cover in greater detail... at a later time:</strong></p>\n<h3>9. Copy any text between <script> tags in a file called example.html to be inserted into a new file: out.js</h3>\n<pre><code>sed -n -e '/&#x3C;script>/,/&#x3C;\\/script>/p' example.html >out.js\n</code></pre>\n<hr>\n<h3>10. Recursively Delete node_modules folders</h3>\n<pre><code>find . -name 'node_modules' -type d -print -prune -exec rm -rf '{}' +\n</code></pre>\n<hr>\n<h3>11. Sanatize file and folder names to remove illegal characters and reserved words.</h3>\n<pre><code>sanitize() {\n  shopt -s extglob;\n\n  filename=$(basename \"$1\")\n  directory=$(dirname \"$1\")\n\n  filename_clean=$(echo \"$filename\" | sed -e 's/[\\\\/:\\*\\?\"&#x3C;>\\|\\x01-\\x1F\\x7F]//g' -e 's/^\\(nul\\|prn\\|con\\|lpt[0-9]\\|com[0-9]\\|aux\\)\\(\\.\\|$\\)//i' -e 's/^\\.*$//' -e 's/^$/NONAME/')\n\n  if (test \"$filename\" != \"$filename_clean\")\n  then\n    mv -v \"$1\" \"$directory/$filename_clean\"\n  fi\n}\n\nexport -f sanitize\n\nsanitize_dir() {\n  find \"$1\" -depth -exec bash -c 'sanitize \"$0\"' {} \\;\n\n}\n\nsanitize_dir '/path/to/somewhere'\n</code></pre>\n<hr>\n<h3>12. Start postgresql in terminal</h3>\n<pre><code>sudo -u postgres psql\n</code></pre>\n<hr>\n<h3>13. Add closing body and script tags to each html file in working directory.</h3>\n<pre><code>for f in * ; do\n  mv \"$f\" \"$f.html\"\ndoneecho \"&#x3C;form>\n &#x3C;input type=\"button\" value=\"Go back!\" onclick=\"history.back()\">\n&#x3C;/form>\n  &#x3C;/body>&#x3C;/html>\" | tee -a *.html\n</code></pre>\n<hr>\n<h3>14. Batch Download Videos</h3>\n<pre><code>#!/bin/bash\n\nlink=\"#insert url here#\"\n#links were a set of strings with just the index of the video as the variable\n\nnum=3\n#first video was numbered 3 - weird.\n\next=\".mp4\"\n\nwhile [ $num -le 66 ]\ndo\n      wget $link$num$ext -P ~/Downloads/\n      num=$(($num+1))\ndone\n</code></pre>\n<hr>\n<h3>15. Change File Extension from '.txt' to .doc for all files in working directory.</h3>\n<pre><code>sudo apt install rename\n\nrename 's/\\.txt$/.doc/' *.txt\n</code></pre>\n<h3>16. Recursivley change any file with extension .js.download to .js</h3>\n<pre><code>find . -name \"*.\\.js\\.download\" -exec rename 's/\\.js\\.download$/.js/' '{}' +\n</code></pre>\n<hr>\n<h3>17. Copy folder structure including only files of a specific extension into an ouput Folder</h3>\n<pre><code>find . -name '*.md' | cpio -pdm './../outputFolder'\n</code></pre>\n<hr>\n<h3>Discover More:</h3>\n<p><a href=\"https://bgoonz-blog.netlify.app/\" title=\"https://bgoonz-blog.netlify.app/\"><strong>Web-Dev-Hub</strong><br>\n<em>Memoization, Tabulation, and Sorting Algorithms by Example Why is looking at runtime not a reliable method of...</em>bgoonz-blog.netlify.app</a><a href=\"https://bgoonz-blog.netlify.app/\"></a></p>\n<h3>Part 2 of this series:</h3>\n<p><a href=\"https://medium.com/@bryanguner/life-saving-bash-scripts-part-2-b40c8ee22682\" title=\"https://medium.com/@bryanguner/life-saving-bash-scripts-part-2-b40c8ee22682\"><strong>Medium</strong><br>\n<em>Continued!!!medium.com</em></a><a href=\"https://medium.com/@bryanguner/life-saving-bash-scripts-part-2-b40c8ee22682\"></a></p>\n<hr>\n<p>By <a href=\"https://medium.com/@bryanguner\">Bryan Guner</a> on <a href=\"https://medium.com/p/920fb6ab9d0a\">June 29, 2021</a>.</p>\n<p><a href=\"https://medium.com/@bryanguner/bash-commands-that-save-time-920fb6ab9d0a\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com/\">Medium</a> on July 13, 2021.</p>\n<p><a href=\"https://gist.github.com/bgoonz/674c3f169d75d5ab9453d4c7ffbdd821/raw/6df51b57737eabd32d1c68c57e110600f471619a/Bash-Comma.md\">view raw</a><a href=\"https://gist.github.com/bgoonz/674c3f169d75d5ab9453d4c7ffbdd821#file-bash-comma-md\">Bash-Comma.md</a> hosted with ❤ by <a href=\"https://github.com/\">GitHub</a></p>\n<h1>Basic Web Development Environment Setup</h1>\n<p>Windows Subsystem for Linux (WSL) and Ubuntu</p>\n<hr>\n<h3>Basic Web Development Environment Setup</h3>\n<h4>Windows Subsystem for Linux (WSL) and Ubuntu</h4>\n<p>‌</p>\n<p><a href=\"https://camo.githubusercontent.com/305c753492ee50b499a95b10c6a817c07821f73ff6c734b45b073b8a7aeafebd/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a61714b503164724e486d4e6d33347a7a2e6a7067\"><img src=\"https://camo.githubusercontent.com/305c753492ee50b499a95b10c6a817c07821f73ff6c734b45b073b8a7aeafebd/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f302a61714b503164724e486d4e6d33347a7a2e6a7067\"></a></p>\n<p>Test if you have Ubuntu installed by typing \"Ubuntu\" in the search box in the bottom app bar that reads \"Type here to search\". If you see a search result that reads <strong>\"Ubuntu 20.04 LTS\"</strong> with \"App\" under it, then you have it installed.</p>\n<p>‌</p>\n<ol>\n<li>In the application search box in the bottom bar, type \"PowerShell\" to find the application named \"Windows PowerShell\"</li>\n<li>Right-click on \"Windows PowerShell\" and choose \"Run as administrator\" from the popup menu</li>\n<li>In the blue PowerShell window, type the following: <code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</code></li>\n<li>Restart your computer</li>\n<li>In the application search box in the bottom bar, type \"Store\" to find the application named \"Microsoft Store\"</li>\n<li>Click \"Microsoft Store\"</li>\n<li>Click the \"Search\" button in the upper-right corner of the window</li>\n<li>Type in \"Ubuntu\"</li>\n<li>Click \"Run Linux on Windows (Get the apps)\"</li>\n<li>Click the orange tile labeled <strong>\"Ubuntu\"</strong> Note that there are 3 versions in the Microsoft Store... you want the one just entitled 'Ubuntu'</li>\n<li>Click \"Install\"</li>\n<li>After it downloads, click \"Launch\"</li>\n<li>If you get the option, pin the application to the task bar. Otherwise, right-click on the orange Ubuntu icon in the task bar and choose \"Pin to taskbar\"</li>\n<li>When prompted to \"Enter new UNIX username\", type your first name with no spaces</li>\n<li>When prompted, enter and retype a password for this UNIX user (it can be the same as your Windows password)</li>\n<li>Confirm your installation by typing the command <code>whoami 'as in who-am-i'</code>followed by Enter at the prompt (it should print your first name)</li>\n<li>You need to update your packages, so type <code>sudo apt update</code> (if prompted for your password, enter it)</li>\n<li>You need to upgrade your packages, so type <code>sudo apt upgrade</code> (if prompted for your password, enter it)</li>\n</ol>\n<h3>Git</h3>\n<p>Git comes with Ubuntu, so there's nothing to install. However, you should configure it using the following instructions.</p>\n<p>‌Open an Ubuntu terminal if you don't have one open already.</p>\n<ol>\n<li>You need to configure Git, so type <code>git config --global user.name \"Your Name\"</code> with replacing \"Your Name\" with your real name.</li>\n<li>You need to configure Git, so type <code>git config --global user.email your@email.com</code> with replacing \"<a href=\"mailto:your@email.com\"></a><a href=\"mailto:your@email.com\">your@email.com</a>\" with your real email.</li>\n</ol>\n<p><strong>Note: if you want git to remember your login credentials type:</strong></p>\n<pre><code>$ git config --global credential.helper store\n</code></pre>\n<p>‌</p>\n<h3>Google Chrome</h3>\n<p>Test if you have Chrome installed by typing \"Chrome\" in the search box in the bottom app bar that reads \"Type here to search\". If you see a search result that reads \"Chrome\" with \"App\" under it, then you have it installed. Otherwise, follow these instructions to install Google Chrome.</p>\n<p>‌</p>\n<ol>\n<li>Open Microsoft Edge, the blue \"e\" in the task bar, and type in <a href=\"http://chrome.google.com/\"></a><a href=\"http://chrome.google.com/\">http://chrome.google.com</a>. Click the \"Download Chrome\" button. Click the \"Accept and Install\" button after reading the terms of service. Click \"Save\" in the \"What do you want to do with ChromeSetup.exe\" dialog at the bottom of the window. When you have the option to \"Run\" it, do so. Answer the questions as you'd like. Set it as the default browser.</li>\n<li>Right-click on the Chrome icon in the task bar and choose \"Pin to taskbar\".</li>\n</ol>\n<h3>Node.js</h3>\n<p>Test if you have Node.js installed by opening an Ubuntu terminal and typing <code>node --version</code>. If it reports \"Command 'node' not found\", then you need to follow these directions.</p>\n<ol>\n<li>In the Ubuntu terminal, type <code>sudo apt update</code> and press Enter</li>\n<li>In the Ubuntu terminal, type <code>sudo apt install build-essential</code> and press Enter</li>\n<li>In the Ubuntu terminal, type <code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash</code> and press Enter</li>\n<li>In the Ubuntu terminal, type <code>. ./.bashrc</code> and press Enter</li>\n<li>In the Ubuntu terminal, type <code>nvm install --lts</code> and press Enter</li>\n<li>Confirm that <strong>node</strong> is installed by typing <code>node --version</code> and seeing it print something that is not \"Command not found\"!</li>\n</ol>\n<h3>Unzip</h3>\n<p>You will often have to download a zip file and unzip it. It is easier to do this from the command line. So we need to install a linux unzip utility.</p>\n<p>‌In the Ubuntu terminal type: <code>sudo apt install unzip</code> and press Enter</p>\n<p>‌Mocha.js</p>\n<p>Test if you have Mocha.js installed by opening an Ubuntu terminal and typing <code>which mocha</code>. If it prints a path, then you're good. Otherwise, if it prints nothing, install Mocha.js by typing <code>npm install -g mocha</code>.</p>\n<p>‌</p>\n<h3>Python 3</h3>\n<p>Ubuntu does not come with Python 3. Install it using the command <code>sudo apt install python3</code>. Test it by typing <code>python3 --version</code> and seeing it print a number.</p>\n<p>‌</p>\n<h3>Note about WSL</h3>\n<p>‌</p>\n<p>As of the time of writing of this document, WSL has an issue renaming or deleting files if Visual Studio Code is open. So before doing any linux commands which manipulate files, make sure you <strong>close</strong> Visual Studio Code before running those commands in the Ubuntu terminal.</p>\n<p>‌</p>"},{"url":"/docs/docs/no-whiteboarding/","relativePath":"docs/docs/no-whiteboarding.md","relativeDir":"docs/docs","base":"no-whiteboarding.md","name":"no-whiteboarding","frontmatter":{"title":"lorem-ipsum","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h2>A - C\n\n</h2>\n<ul>\n<li><a href=\"https://www.ableton.com/en/about\">Ableton</a> | Berlin, Germany | Take-home programming task (discussed via Skype), then pair programming and debugging session on-site</li>\n<li><a href=\"https://angel.co/abstract/jobs\">Abstract</a> | San Francisco, CA</li>\n<li><a href=\"https://www.accenture.com/us-en/careers\">Accenture</a> | San Francisco, CA / Los Angeles, CA / New York, NY | Technical phone discussion with architecture manager, followed by behavioral interview focusing on soft skills</li>\n<li><a href=\"https://www.accredible.com/careers\">Accredible</a> | Cambridge, UK / San Francisco, CA / Remote | Take home project, then a pair-programming and discussion onsite / Skype round.</li>\n<li><a href=\"https://acko.com/\">Acko</a> | Mumbai, India | Phone interview, followed by a small take home problem. Finally a F2F or skype pair programming session</li>\n<li><a href=\"http://www.acumenci.com/joinourteam\">Acumen</a> | London, UK | Small take home test, and sit in on some sprint rituals on-site</li>\n<li><a href=\"https://www.addstones.com/\">Addstones</a> | Paris, FR / Singapore, SG / Bucharest, RO / London, UK | Multiple interviews, discussion of technical background and experiences. Sometimes we do a on-site unsupervised small exercise.</li>\n<li><a href=\"https://adnymics.com/\">Adnymics</a> | Munich, DE | Take home project, then work with the team for a day</li>\n<li><a href=\"http://adthena.com/\">Adthena</a> | London, UK | Takehome project and discussion on-site</li>\n<li><a href=\"https://angel.co/adwyze/jobs\">AdWyze</a> | Bangalore, India | Short takehome project + (for fulltime) onsite pairing</li>\n<li><a href=\"https://www.aerofs.com/company/careers\">AeroFS</a> | San Francisco, CA | Short takehome project + phone interview</li>\n<li><a href=\"https://affinity.recruiterbox.com/#content\">Affinity</a> | San Francisco, CA | Implementation of a children's game, then take-home project OR real-world design questions</li>\n<li><a href=\"https://ageno.pl/\">Ageno</a> | Bielsko-Biala, Poland | Simple Magento Take-home project and discussion on the real world problems.</li>\n<li><a href=\"https://angel.co/agilemd/jobs\">AgileMD</a> | San Francisco, CA | Takehome project</li>\n<li><a href=\"https://careersatagoda.com/departments/technology\">Agoda</a> | Bangkok, Thailand | Take-home project, then a discussion onsite round.</li>\n<li><a href=\"https://agrilyst.com/\">Agrilyst</a> | New York, NY / Remote | Short takehome project &#x26; remote pairing</li>\n<li><a href=\"https://airbrake.io/\">Airbrake</a> | San Francisco, CA / Remote | Take-home project &#x26; pair on a problem similar to daily work</li>\n<li><a href=\"http://aiwip.com/\">Aiwip</a> | London, UK | Skype/phone interview followed by takehome project or worksample (or whiteboard)</li>\n<li><a href=\"http://ajira.tech/\">Ajira</a> | Chennai, India / Austin, TX | Take home project, then pair programming, technical discussions, cultural fit</li>\n<li><a href=\"https://www.algolia.com/careers\">Algolia</a> | Paris, France / San Francisco, CA | Takehome project &#x26; Onsite discussions and presentation</li>\n<li><a href=\"https://www.allaboutapps.at/jobs\">all about apps GmbH</a> | Vienna, Austria | 2-phase technical discussion &#x26; examination with department heads and management.</li>\n<li><a href=\"https://allegro.pl/praca\">Allegro</a> | Warsaw, Poland; Poznan, Poland; Torun, Poland; Wroclaw, Poland; Krakow, Poland | Take home, simple project. Series of 2 technical interviews (how to build things, how to solve specific, real world problem) and meeting with a team leader.</li>\n<li><a href=\"https://alluvium.io/\">Alluvium</a> | Brooklyn, NY | Take-home assignment, on-site review dovetailing into collaborative project planning for extension.</li>\n<li><a href=\"https://engineering.alphasights.com/\">AlphaSights</a> | London, UK / New York, NY / Remote | Initial interview, pair programming then final round with general technical questions</li>\n<li><a href=\"https://amagi.io/\">AMAGI</a> | Makati, Philippines | 1) Review of your resume, portfolio, and/or GitHub profile; 2) 1 hour discussion (in-person or Skype) about your goals, experience, personal culture, and how to apply technical solutions to real problems;</li>\n<li><a href=\"https://gastrograph.com/\">Analytical Flavor Systems</a> | Manhattan, New York | Code sample or take-home project, both with discussion.</li>\n<li><a href=\"https://apolloagriculture.com/\">Apollo Agriculture</a> | Nairobi, Kenya/Remote | Takehome project or Worksample (or whiteboard)</li>\n<li><a href=\"https://www.beapplied.com/\">Applied</a> | London, UK | Situational judgement tests focusing on real-world soft skills (online then in structured interview)</li>\n<li><a href=\"https://angel.co/arachnys/jobs/220465-software-engineer\">Arachnys</a> | London, UK | Take home test, real world pair programming</li>\n<li><a href=\"https://articulate.com/company/careers\">Articulate</a> | Remote | Take-home project &#x26; pair program on a problem similar to daily work</li>\n<li><a href=\"https://www.artsy.net/jobs#engineering\">Artsy</a> | New York, NY / London, UK / Berlin, Germany / Los Angeles, CA / Hong Kong, Hong Kong / Remote | Our process: 1) Informal chat 2) Application 3) Phone screen 4) In-person interview with 1 lead, 2 individual contributors and 1 non-engineer (30-45 mins each), focusing on your work habits and expertise as demonstrated in your previous work 5) ~4 in-depth professional reference calls (30-45 mins each).</li>\n<li><a href=\"https://www.asidatascience.com/careers\">ASI Data Science</a> | London, UK | Project to work at home, general technical questions, pair programming with engineers</li>\n<li><a href=\"https://jobs.asos.com/epostings/index.cfm?fuseaction=app.jobsearch&#x26;company_id=30071&#x26;version=1&#x26;byBusinessUnit=5\">ASOS</a> | London, UK | Take home or in-person code refactoring exercise, in-person walk-though of solution including software crafstmanship principles and design decisions, in-person freestyle architecture walk-through</li>\n<li><a href=\"https://jobs.ataccama.com/\">Ataccama</a> | Prague, Czech Republic | Face to face interview (skype or onsite), coding task for 30 min, meeting with team members</li>\n<li><a href=\"https://atech.media/\">aTech Media</a> | London, UK | Face to face interview, review of existing open source contributions or, if none are available, asked to write a library for something that interests them</li>\n<li><a href=\"https://auraframes.com/jobs?gh_src=2ef5cfa32\">Aura Frames</a> | New York, NY / San Francisco, CA | Simplified real-world coding task on Coderpad.io, followed by a few hours onsite writing code in our actual codebase.</li>\n<li><a href=\"https://www.aurorasolar.com/careers\">Aurora Solar</a> | San Francisco, CA | Our process: 1) Initial phone call 2) 1 hour take home project in CoderPad along with a few essay questions relating to JavaScript, testing, etc. 3) Remote pairing session solving a problem similar to day to day work. 4) In-person interview with additional pairing exercise done on a laptop as well as culture interviews.</li>\n<li><a href=\"https://auth0.com/blog/how-we-hire-engineers\">Auth0</a> | Bellevue, WA / Buenos Aires, Argentina / Remote | Series of interviews, go over technical background and past experiences, take-home project</li>\n<li><a href=\"https://www.auto1-group.com/jobs\">Auto1</a> | Berlin, DE | Series of Skype interviews which covers general technical questions, followed by a take-home assignment</li>\n<li><a href=\"https://automattic.com/work-with-us\">Automattic</a> | Remote | short take-home real-world task, then a few weeks-long real-world, part-time, and paid project on production code</li>\n<li><a href=\"https://github.com/AutoScout24/hiring\">AutoScout24</a> | Munich, Germany | Skype interview followed by home assignment from our day-to-day business and then on-site interview including lunch with a team</li>\n<li><a href=\"https://avant.com/jobs\">Avant</a> | Chicago, IL | Pair programming interviews.</li>\n<li><a href=\"https://www.avarteq.com/career\">Avarteq GmbH</a> | Berlin, Germany / Saarbrücken, Germany | Technical interview with our developers on-site or remote followed by a work sample in a pair programming session or a previous take-home project with a follow-up discussion and detailed feedback.</li>\n<li><a href=\"https://www.avocarrot.com/company\">Avocarrot</a> | Athens, Greece | on-site real world problem discussion and pair programming</li>\n<li><a href=\"https://www.axelerant.com/careers\">Axelerant</a> | Remote | Take-home project, interviews with hr and engineering team.</li>\n<li><a href=\"https://axiacore.com/\">Axiacore</a> | Bogota, Colombia | We talk about on how is your process when solving problems.</li>\n<li><a href=\"https://www.axios.com/about#jobs\">Axios</a> | Arlington, VA / New York, NY / San Francisco, CA / Remote | Take-home project, with discussion.</li>\n<li><a href=\"https://boards.greenhouse.io/b12#.WMlLfRIrJTa\">B12</a> | New York, NY | Take-home exercises and pair-programming with the team.</li>\n<li><a href=\"http://somos.b2wdigital.com/bit\">B2W Digital</a> | Rio de Janeiro, Brazil; São Paulo, Brazil | Time-boxed coding exercise at home, on-site pair programming with engineers and live software architecture challenges based on real situations.</li>\n<li><a href=\"https://github.com/Babylonpartners/iOS-Interview-Demo\">Babylon Health iOS Team</a> | London, UK | Take-home project, on-site presentation and discussion, design and product interview.</li>\n<li><a href=\"http://careers.backbase.com/\">Backbase</a> | Amsterdam, Netherlands; Cardiff, Wales; London, UK; Atlanta, GA | Takehome project, interviews</li>\n<li><a href=\"https://jobs.badi.com/\">Badi</a> | Barcelona, Spain | Phone Screen, Take-home project, then a discussion onsite round.</li>\n<li><a href=\"https://team.badoo.com/jobs\">Badoo</a> | London, UK | Take-home project, then a discussion onsite round.</li>\n<li><a href=\"https://career012.successfactors.eu/sfcareer/jobreqcareer?jobId=46145&#x26;company=BAE\">BAE Systems Applied Intelligence</a> | London, UK | Initial interview with experience based technical questions, second interview pair programming on problem similar to daily work</li>\n<li><a href=\"https://bakkenbaeck.com/jobs\">Bakken &#x26; Bæck</a> | Oslo, Norway; Amsterdam, Netherlands; Bonn, Germany | Skype interview followed by take-home assignment and a visit to one of our offices</li>\n<li><a href=\"https://career.balabit.com/\">Balabit</a> | Budapest, Hungary | Take-home project (medium size, with restrictions, e.g. only stdlib may be used), then discussion on-site</li>\n<li><a href=\"https://www.barracuda.com/company/careers\">Barracuda View Team</a> | Chelmsford, MA / Remote | Phone screen, remote pair programming session, technical discussion interview, culture fit interview</li>\n<li><a href=\"https://basecamp.com/about/jobs\">Basecamp</a> | Chicago, IL / Remote</li>\n<li><a href=\"https://beam.dental/jobs\">Beam Dental</a> | Columbus, OH | Phone Screen, Take Home Project, In-Person Pairing and Cross-Functional Interview</li>\n<li><a href=\"http://belka.us/lavora-con-no\">Belka</a> | Trento, Italy; Munich, Germany | We give you a small task that you can do alone and then we evaluate your work with you</li>\n<li><a href=\"https://bemind.recruitee.com/\">Bemind Interactive</a> | Biella, Italy / Latina, Italy / Remote | Series of interviews, discussion about technical background and past experiences, take-home project &#x26; pair programming</li>\n<li><a href=\"https://bendyworks.com/careers\">Bendyworks</a> | Madison, WI | Interviews and pair programming on personal projects</li>\n<li><a href=\"https://www.betterment.com/careers\">Betterment</a> | New York, NY | Phone interview followed by on-site pair programming to simulate a Betterment feature build.</li>\n<li><a href=\"https://www.betterpt.com/\">BetterPT</a> | New York, NY | Initial phone interview, project using our tech stack, on-site code review/pair programming and \"meet the team\".</li>\n<li><a href=\"https://www.bignerdranch.com/about/careers\">Big Nerd Ranch</a> | Atlanta, GA &#x26; Remote | Interviews and pair programming on an internal project or problem.</li>\n<li><a href=\"https://www.bioconnect.com/company/careers\">BioConnect</a> | Toronto, Canada | Take-home assignment &#x26; discussion</li>\n<li><a href=\"https://www.bitexpert.de/karriere\">bitExpert AG</a> | Mannheim, Germany | Interview with experience based technical questions</li>\n<li><a href=\"https://www.bitsoflove.be/careers\">Bits of Love</a> | Bruges, Belgium | In-person interview to evaluate experience and motivation, potentially followed by take-home project.</li>\n<li><a href=\"http://blackdotsolutions.com/\">Blackdot Solutions</a> | Cambridge, UK | Take-home project followed by on-site face-to-face walkthru of your code focusing on decisions/reasoning/technology used.</li>\n<li><a href=\"http://bleacherreport.com/\">Bleacher Report</a> | San Francisco, CA, USA | Take-home project; on-site discussion about the project and meeting with different teams</li>\n<li><a href=\"https://blendle.homerun.co/?lang=en\">Blendle</a> | Utrecht, The Netherlands | Take-home project &#x26; pair program on a problem similar to daily work</li>\n<li><a href=\"https://github.com/blogfoster/join-the-engineering-team\">blogfoster</a> | Berlin, Germany | Take-home project, discussion on-site</li>\n<li><a href=\"https://www.bluebottlecoffee.com/careers\">Blue Bottle Coffee</a> | Oakland, CA | Technical Phone Screen, Take Home Challenge, Technical in-persons.</li>\n<li><a href=\"http://www.bluesoft.com.br/\">Bluesoft</a> | São Paulo, Brazil | Takehome project and an interview to evaluate the candidate's previous experience.</li>\n<li><a href=\"https://bocoup.com/careers\">Bocoup</a> | Boston, MA / Remote | Pair programming with personal laptop on typical problem seen at work</li>\n<li><a href=\"http://careers.bolste.com/\">Bolste</a> | Phoenix, AZ | Conversational in-person interviews with team members and pair programming through real world problems</li>\n<li><a href=\"https://www.bookingsync.com/en/jobs\">BookingSync</a> | Remote | Small takehome project, interviews over skype with team members.</li>\n<li><a href=\"http://boomtownroi.com/\">BoomTown</a> | Charleston, SC / Atlanta, GA / Remote | Conversational in-person interviews with potential team members and managers that revolve around past experience and how that could be applied to future work</li>\n<li><a href=\"http://www.bouvet.no/\">Bouvet</a> | Bergen, Norway | Pair programming with senior engineers</li>\n<li><a href=\"https://brainn.co/\">brainn.co</a> | São Paulo, BR | Zoom/On-site interview, take-home project and interview with a team leader.</li>\n<li><a href=\"http://brainstation-23.com/\">BrainStation-23</a> | Dhaka, BD | A practical project followed by series of in-person interview sessions</li>\n<li><a href=\"https://breather.com/jobs\">Breather</a> | Montreal, Canada | Series of interviews including a conversation about the candidate’s experience and a technical discussion involving real world problems</li>\n<li><a href=\"http://www.brightbytes.net/careers\">BrightBytes</a> | San Francisco, CA | Time-boxed coding exercise at home and on-site pair programming with engineers</li>\n<li><a href=\"https://www.brighthr.com/careers\">BrightHR</a> | Manchester, UK | Telephone conversation, coding exercise at home, on-site pairing with a cultural interview, meet the team.</li>\n<li><a href=\"https://angel.co/brightwheel/jobs\">brightwheel</a> | San Francisco, CA | Take home exercise, and systems design.</li>\n<li><a href=\"https://www.broadinstitute.org/data-sciences-platform\">Broad Institute's Data Sciences Platform</a> | Cambridge, MA | Phone screen, small take home project, both a technical and non-technical discussion panel, and a panel following up on the take home project walking through the solution and making a modification to the original code</li>\n<li><a href=\"https://www.bubbl.in/about\">Bubblin Superbooks</a> | Remote | View code, projects, libraries or any other open source story that you have been a part of, a small take-home project with real code occasionally.</li>\n<li><a href=\"https://buffer.com/journey\">Buffer</a> | Remote | Interviews over video call, code walkthrough of real code focussing on decisions and reasoning, then a 45 day full time, fully paid contract project working on production code.</li>\n<li><a href=\"https://www.bugcrowd.com/about/careers/\">Bugcrowd</a> | San Francisco, CA / Sydney, NSW | Take home exercise, half-day onsite walking through code, and pair programming.</li>\n<li><a href=\"http://www.buhlergroup.com/\">Buhler Group</a> | Prague, CZ | Interview with a couple of technical questions. No task needed. Depending on the team there is another round with the guys in the HQ via skype.</li>\n<li><a href=\"https://www.bulb.co.uk/\">Bulb</a> | London, UK | Phone screening, followed by a 2-4 hours take home task. If successful, on-site interview to discuss and extend with the reviewer and one other engineer, followed by 2x informal \"Meet the team\" interviews.</li>\n<li><a href=\"https://www.busbud.com/en/careers\">Busbud</a> | Montreal, Canada | Phone screening, followed by a 2-4 hours take home assignment. If the challenge is a success, on-site or remote interview with team members, including someone who reviewed it, to talk about it and potential next steps if the challenge was a real life task.</li>\n<li><a href=\"https://www.bustle.com/labs\">Bustle</a> | New York City, Ny / Remote | Half day pair programming on a task for production or one of our Open Source projects. We'll also buy you lunch with the team.</li>\n<li><a href=\"https://www.busuu.com/jobs\">busuu</a> | London, UK | Video call to show real code as first stage. In office pair programming, white board real world problem that we've encountered before, and history/experience discussion.</li>\n<li><a href=\"https://buttercms.com/\">ButterCMS</a> | Chicago, IL; Remote | Take home exercise and half-day of pair programming</li>\n<li><a href=\"https://www.bybox.com/company/careers/\">ByBox</a> | Remote | Phone interview followed by interview with devs (ideally in person but sometimes Skype) covering technical experience and coding exercise with real code.</li>\n<li><a href=\"http://careers.caci.com/ListJobs/All/Search/location/rome/state/ny/country/us\">CACI Rome</a> | Rome, NY; Remote | Phone interview followed by in-person or Skype screen sharing interview with a coding exercise in either Java, web (Node.js + frontend), or both. Interview format is exclusive to the Rome, NY office and may not be shared by other regional CACI offices.</li>\n<li><a href=\"http://www.cakesolutions.net/careers\">Cake Solutions</a> | Manchester, UK; London, UK; New York, NY | Skype / Hangouts / phone call to explain the technical background, current position and set expectations about the salary, relocation, etc; if all good, what to expect next. Then take-home exercise for roughly 4 hours to demonstrate good thinking and ability to pick up new things, explain &#x26; document the solution, finishing with pair programming with senior developers (remote or in person); use the code as a talking point around the more difficult things after getting through the simple starter tasks.</li>\n<li><a href=\"https://www.uk.capgemini.com/\">Capgemini UK Java Team</a> | London, UK; Woking, UK; Bristol, UK; Cardiff, Wales; Birmingham, UK; Manchester, UK; Leeds, UK; Rotherham, UK; Liverpool, UK; Newcastle, UK; Edinburgh, Scotland; Glasgow, Scotland | Technical telephone interview (30 minutes), take-home non-CompSci coding exercise (3-4 hours), face-to-face role-played consulting scenario involving a solution architecture and a delivery plan (two hours)</li>\n<li><a href=\"http://www.caravelo.com/softdev\">Caravelo</a> | Barcelona, Spain | Take home project, then technical discussion about the code in-person or Skype and hang out with the team.</li>\n<li><a href=\"http://www.cartegraph.com/company/careers/\">Cartegraph</a> | Dubuque, IA / Remote | Phone screen, hiring manager interview, small take-home coding project, and team code review/interview</li>\n<li><a href=\"http://www.carto.com/careers/\">CARTO</a> | Madrid, Spain | Phone screen, take-home project, team code review/interview, hiring manager interview</li>\n<li><a href=\"https://casetext.com/jobs\">Casetext</a> | San Francisco, CA | Submit code sample for review/discussion, contract for one full day (paid)</li>\n<li><a href=\"https://cashlink.de/\">CASHLINK</a> | Frankfurt, Germany | Skype/phone interview, take-home project</li>\n<li><a href=\"http://www.causeway.com/content/opportunity\">Causeway</a> | United Kingdom, India | Skype or Telephonic discussion on approaches and experience in regards to solve projects related work, then face to face round to write small solutions to common problems in related field.</li>\n<li><a href=\"https://centroida.co/contact.html\">Centroida</a> | Sofia, Bulgaria | Series of interviews, pair programming and take-home projects</li>\n<li><a href=\"http://chainreaction.io/\">Chain.Reaction</a> | Budapest, Hungary | Partnership-fit discussion, code-review and trial days.</li>\n<li><a href=\"https://chargify.com/jobs\">Chargify</a> | San Antonio, TX / Remote | Take-home project &#x26; pair on a problem similar to daily work</li>\n<li><a href=\"https://checkout51.com/jobs\">Checkout 51</a> | Toronto, Canada | Phone conversation (15-20 minutes) followed by on-site pair programming and discussion focused on understanding decisions made during on-site work</li>\n<li><a href=\"http://ctic-inc.com/careers/\">Chesapeake Technology</a> | Denver, CO / Santa Barbara, CA / Camarillo, CA / Dulles, VA / California, MD / Remote | Phone screen (30 minutes), take home at leisure question based on real development followed by in person review of solution and general technical questions with actual team and opportunity for you to ask questions and provide feedback ( 2-3 hours)</li>\n<li><a href=\"https://circleci.com/\">CircleCI</a> | San Francisco, CA / Remote | Take-home project and discussion, followed by on-site interview that includes pair programming on actual CircleCI bugs/feature requests.</li>\n<li><a href=\"https://boston.gov/analytics\">City of Boston's Analytics Team</a> | Boston, MA | Take-home project and in-person or phone/Skype interviews</li>\n<li><a href=\"https://beta.phila.gov/departments/office-of-open-data-and-digital-transformation/jobs\">City of Philadelphia's Office of Open Data &#x26; Digital Transformation</a> | Philadelphia, PA | Take-home project</li>\n<li><a href=\"https://www.civisanalytics.com/careers\">Civis Analytics</a> | Chicago, IL | Take-home project and discussion via Skype, followed by pair programming exercise</li>\n<li><a href=\"http://jobs.cj.com/jobs/category/engineering/\">CJ Affiliate</a> | Los Angeles, CA &#x26; Westlake Village, CA | Phone coding design exercise (no algorithms), followed by an on-site final interview that includes pair programming on a realistic object-oriented design problem</li>\n<li><a href=\"https://clara.com/careers\">Clara Lending</a> | San Francisco, CA | Phone conversation around technical background and experience, followed by take-home project, pair programming and discussion</li>\n<li><a href=\"https://angel.co/clerkie/jobs\">Clerkie</a> | San Francisco, CA | Phone conversation followed by take-home project</li>\n<li><a href=\"https://www.clickmagick.com/\">ClickMagick</a> | Austin, TX / Remote | Phone conversations and examples of Free Software/Open Source work</li>\n<li><a href=\"https://clippings.com/\">Clippings</a> | Sofia, Bulgaria | Video screening first, then send us code they've recently wrote, then technical interview. We could ask questions about the code they wrote at home.</li>\n<li><a href=\"https://www.cwconsult.dk/\">Clockwork Consulting</a> | Copenhagen, Denmark | Interviews, discussion of technical background and experiences.</li>\n<li><a href=\"https://www.cloudistics.com/careers\">Cloudistics</a> | Reston, VA | Multiple interviews, discussion of technical background and experiences.</li>\n<li><a href=\"https://www.clubhouse.io/hiring\">Clubhouse</a> | New York, NY &#x26; Remote | Phone interview, followed by onsite discussions and pair programming</li>\n<li><a href=\"https://www.cogent.co.jp/\">Cogent Labs</a> | Tokyo, Japan | On-site or video call conversation around technical background and experience, followed by take-home project that resembles a problem Cogent Labs solves for. This project will serve as the base of discussion with the developers for the second interview.</li>\n<li><a href=\"https://www.cognitect.com/jobs\">Cognitect, Inc.</a> | Remote | Phone interview followed by pair programming.</li>\n<li><a href=\"http://www.cognitran.com/employment-opportunities\">Cognitran</a> | Essex, UK / Szczecin, Poland / Detroit, MI | Skype/phone interview followed by pair programming.</li>\n<li><a href=\"https://www.collabora.com/careers.html\">Collabora</a> | Cambridge, UK / Montreal, Canada / Remote | On-site or video interview, discussion of technical experience and sometimes approach for tackling a hypothetical problem.</li>\n<li><a href=\"https://www.compeon.de/karriere\">COMPEON</a> | Duesseldorf, Germany | Phone interview, followed by onsite discussions and pair programming with our developers</li>\n<li><a href=\"http://about.cph.org/careers.html\">Concordia Publishing House</a> | St Louis, MO | Take-home project followed by discussion of it on-site with future teammates.</li>\n<li><a href=\"http://contactlab.com/en/careers\">Contactlab</a> | Milan, Italy | Recruiter interview, tech interview (technical background and experiences), both on-site.</li>\n<li><a href=\"https://www.contentful.com/careers\">Contentful</a> | Berlin, Germany &#x26; SF, USA | Multiple interviews, discussion of technical background &#x26; live coding challenge (you can use the internet).</li>\n<li><a href=\"https://www.contentsquare.com/careers\">ContentSquare</a> | Paris, France | Real-world challenges with open discussions.</li>\n<li><a href=\"https://cookpad.com/us\">Cookpad</a> | Tokyo, Japan; Bristol, UK | Interviews, discussion of technical background and experiences, remotely pair with devs.</li>\n<li><a href=\"https://www.coorpacademy.com/\">Coorp Academy</a> | Paris, France | Technical interview as an open discussion</li>\n<li><a href=\"https://www.coverhound.com/\">CoverHound, Inc.</a> | San Francisco, CA | Open technical discussion, short on-site coding challenge.</li>\n<li><a href=\"https://creditkudos.com/jobs\">Credit Kudos</a> | London, UK | Take-home project and pair programming via Skype or on-site.</li>\n<li><a href=\"https://crossbrowsertesting.com/\">CrossBrowserTesting</a> | Memphis, TN | Take home project that resembles a problem support engineers deal with on a daily basis. On-Site interviews in a comfortable environement with a focus on hiring talented people vs exact skill-sets.</li>\n<li><a href=\"https://jobs.jobvite.com/careers/crowdstrike/jobs\">Crowdstrike</a> | Remote | Multiple interviews onsite or remote as appropriate followed by small take-home project.</li>\n<li><a href=\"https://crownstone.rocks/jobs\">Crownstone</a> | Rotterdam, Netherlands | Technical interaction using previously created Github projects, followed by in-person interview with a focus on someone's professional ambition in the short and long term.</li>\n<li><a href=\"https://www.cube19.com/work-with-us/\">cube19</a> | London, UK | Take-home project, then an on-site discussion about the code and previous experience.</li>\n<li><a href=\"https://cultivatehq.com/\">Cultivate</a> | Edinburgh, UK | 30 minute pair-programming screening interview on a simple exercise (remote or in-person). Half day pair programming, with 3 or 4 different team members plus informal chat, typically on-site.</li>\n<li><a href=\"https://www.culturefoundry.com/\">Culture Foundry</a> | Austin, TX | Paid take-home project</li>\n<li><a href=\"https://www.currencytransfer.com/\">CurrencyTransfer</a> | London, UK &#x26; Remote | Take-home project</li>\n</ul>\n<h2>D - F</h2>\n<ul>\n<li><a href=\"https://darksky.net/jobs\">Dark Sky</a> | Cambridge, MA | Phone interviews and a very short, real paid project</li>\n<li><a href=\"http://www.datatheorem.com/\">Data Theorem</a> | Palo Alto, CA; Paris, Fr; Bangladesh, India | Phone interview, then a take home project and finally in-person interview.</li>\n<li><a href=\"https://datalogue.github.io/recruiting\">Datalogue</a> | Montreal, Canada | We Ask candidates to contribute meaningfully to an Open source project that reflects the stack they will be working with and send us a link to the PR.</li>\n<li><a href=\"https://datamade.us/\">DataMade</a> | Chicago, IL | After submitting an application, selected applicants are moved on to a round of interviews and will be asked to submit a piece of code for review. If you don’t have any code you can share, DataMade will provide a short exercise for you to complete. An in-person (or remote) interview will be scheduled to go over your background, what draws you to DataMade, and your code sample.</li>\n<li><a href=\"https://datascope.co/careers\">Datascope</a> | Chicago, IL | Take home exploratory data project with public data, discussion about the project via video chat, and in-person office visit.</li>\n<li><a href=\"http://www.datlinq.com/en/vacancies\">Datlinq</a> | Rotterdam, Netherlands | Take-home project based on actual work on data done by the team and in-person or Skype interviews</li>\n<li><a href=\"https://dealtap.ca/\">DealTap</a> | Toronto, Canada | Technical Interview, Solution Design, Take Home Assignment, then Culture fit interview with the team, and optional pair programming.</li>\n<li><a href=\"https://www.defmethod.com/\">Def Method</a> | NYC, NY | Take home test, pair programming with dev on test and client work, receive offer same day as pairing interview</li>\n<li><a href=\"https://deliveroo.co.uk/careers\">Deliveroo</a> | London, UK &#x26; Remote | Short take-home project and pair programming</li>\n<li><a href=\"https://angel.co/dentolo\">Dentolo</a> | Berlin, Germany | Phone interview with the HR department, take-home project and technical interview to discuss your skill set + general questions</li>\n<li><a href=\"https://www.deskbookers.com/en-gb/jobs\">Deskbookers</a> | Amsterdam, Netherlands | Phone screen, take-home project, on-site interview</li>\n<li><a href=\"https://www.desmart.com/\">DeSmart</a> | Gdynia, Poland | Technical interview, take-home project and talk about your experience</li>\n<li><a href=\"https://despark.com/\">Despark</a> | Sofia, Bulgaria &#x26; Remote | Culture add interview, sample code review and paid pair programming with team member or take-home project.</li>\n<li><a href=\"https://www.detroitlabs.com/careers\">Detroit Labs</a> | Detroit, MI | Our technical interview starts with a take-home assignment that we will look at during the interview. You'll walk us though your thought process, add functionality if applicable to the interview, and talk about your experience. We believe that showing us your work in a practical setting is more telling of your abilities and what you will bring to the table, than writing code on a whiteboard.</li>\n<li><a href=\"https://www.devmynd.com/\">DevMynd</a> | Chicago, IL; San Francisco, CA | Take-home project, take-home project phone review, a few hour-long pairing sessions on real projects.</li>\n<li><a href=\"https://www.dg-i.net/\">DG-i</a> | Cologne, Germany | Take-home project and/or discussion on-site about past experiences</li>\n<li><a href=\"http://www.dice.se/\">DICE</a> | Stockholm, Sweden | Take-home project and code review at the on-site</li>\n<li><a href=\"http://www.di.fm/jobs\">Digitally Imported</a> | Denver, Colorado &#x26; Remote | Video meetings on past experience and high level tech questions, take-home project</li>\n<li><a href=\"https://www.dollarshaveclub.com/\">Dollar Shave Club</a> | Venice, California | Phone interview, take-home projects, on-site interview</li>\n<li><a href=\"http://door2door.io/\">door2door</a> | Berlin, Germany | Take home challenge + on-site interview + trial day</li>\n<li><a href=\"https://doordash.com/careers\">DoorDash 🏃💨</a> | San Francisco, CA | Take home project + an on-site interview building off the project!</li>\n<li><a href=\"https://docs.google.com/document/d/1fC_-liTPpYQOoE_5iKj0O3AwSdPggQGnOsjUKahfbkQ/edit?usp=sharing\">Draft Fantasy</a> | Tel Aviv, Israel | Talk about past experience and what the developer has actually built as well as pair programming or a programming exercise.</li>\n<li><a href=\"https://www.drawbotics.com/en/join-us\">Drawbotics</a> | Brussels, Belgium | Take-home project, bootcamp on-site</li>\n<li><a href=\"https://www.drchrono.com/careers\">drchrono</a> | Mountain View, CA | Hackerrank test (but not CS trivia, it's real product problems) &#x26; on-site/take-home project w/ presentation</li>\n<li><a href=\"https://www.drivy.com/\">Drivy</a> | Paris, France | Phone screening followed by a take-home assignment, \"Resume\" interview, technical interview, product interview, interview with another team, finalizing the hire</li>\n<li><a href=\"https://www.dronedeploy.com/careers.html\">DroneDeploy</a> | San Francisco, CA | Pair program on a problem similar to daily work</li>\n<li><a href=\"https://www.droneseed.co/jobs/\">DroneSeed</a> | Seattle, WA | Take home assignment of a real problem we've worked on, group code review in subsequent interview.</li>\n<li><a href=\"http://blog.dubizzle.com/uae/job-vacancies\">dubizzle</a> | Dubai, UAE | Take home assignment, general technical questions, pair programming with engineers or tech leads</li>\n<li><a href=\"https://www.e-accent.com/\">E-accent</a> | Hilversum, Netherlands; Remote | Skype conversation, take-home assignment</li>\n<li><a href=\"http://easytaxi.com.br/\">Easy Taxi</a> | São Paulo, Brazil | Take-home project, interview to evaluate the candidate's previous experience.</li>\n<li><a href=\"https://eaze.com/careers\">Eaze</a> | San Francisco, CA | Take home project, on-site interview building off of the project</li>\n<li><a href=\"https://careers.ebayinc.com/join-our-team/start-your-search/find-jobs-by-location/detail/germany\">eBay Kleinanzeigen</a> | Berlin, Germany | 45 mins technical phone interview, take-home project/review, on-site interview including pair programming with team lead and agile interview with product manager.</li>\n<li><a href=\"https://echobind.com/careers\">Echobind</a> | Boston, MA; Remote | Meet the entire team, share examples of previous work and pair with one team member</li>\n<li><a href=\"https://jobs.edenspiekermann.com/\">Edenspiekermann</a> | Amsterdam, Netherlands / Berlin, Germany / Los Angeles, CA / San Francisco, CA / Singapore, Singapore | On-site chat about skills and past experiences, review some code samples or a take-home assignment</li>\n<li><a href=\"https://careers.ef.com/\">EF Education First</a> | London, UK; Boston, MA | Short phone interview, take-home project, discussion of project and real world engineering problems, meet the team.</li>\n<li><a href=\"http://eidu.com/\">Eidu</a> | Berlin, Germany | Take-home project, discussion of results with team, and test days with pair programming</li>\n<li><a href=\"http://www.elpassion.com/\">El Passion</a> | Warsaw, Poland | Take-home project, interview to 1) discuss delivered solution and 2) previous projects</li>\n<li><a href=\"https://www.electricpulp.com/\">Electric Pulp</a> | Sioux Falls, SD, USA | Phone interviews with leadership team and technical team leads. We are a tight knit team, so emphasis on a great personal fit is as important as technical prowess.</li>\n<li><a href=\"https://www.elements.nl/careers\">Elements Interactive</a> | Almere, The Netherlands &#x26; Barcelona, Spain | Take-home project &#x26; discussion via Skype or on-site</li>\n<li><a href=\"https://www.ellucian.com/About-Us/Careers/\">Ellucian</a> | Reston, VA, USA | Discussion of real world problems (from resume, if possible)</li>\n<li><a href=\"https://elmah.io/\">elmah.io</a> | Aarhus, Denmark / Remote | Discussion about code and looking at hobby projects (if any)</li>\n<li><a href=\"https://www.elvie.com/\">Elvie</a> | London, England | Discussing real code, pairing and a paid day to see how you work with the team. No coding for free or time-restricted take-home projects, code challenges or abstract algorithm tests</li>\n<li><a href=\"https://goo.gl/N7SMKl\">eMarketer</a> | New York, NY | Short phone interview, then come in and meet the team, check out our space, and have a discussion with team members about real-world problems</li>\n<li><a href=\"https://www.emarsys.com/\">Emarsys</a> | Budapest, Hungary | Take-home project (small, 1-2 days to solve), then discussion on-site</li>\n<li><a href=\"http://www.endava.com/en/Careers\">Endava</a> | Belgrade, Serbia; Bucharest, Romania; Chisinau, Moldova; Cluj-Napoca, Romania; Iasi, Romania; Pitesti, Romania; Skopje, Macedonia; Sofia, Bulgaria; Frankfurt, Germany; Glasgow, Scotland; Hilversum, Netherlands; London, UK; Oxford, UK; Bogota, Colombia; Atlanta, GA; New Jersey, NJ; New York, NY | On-site discussion about previous experience and technical questions about the target technologies.</li>\n<li><a href=\"https://www.engelvoelkers.com/en/tech/\">Engel &#x26; Völkers Technology</a> | Hamburg, Germany | Remote technical interview with an Engineering Manager, followed by a practical coding challenge implemented in 5 hours, ending with a technical discussion with the team on the produced code either remotely or on-site based on geographical practicality.</li>\n<li><a href=\"https://enhancv.com/about.html\">Enhancv</a> | Sofia, Bulgaria | Talk is cheap, show us your code: github profile or other project examples. Explain them in person / remotely. Discuss habits and interests to see if we have a culture fit.</li>\n<li><a href=\"https://www.enigma.com/\">Enigma</a> | New York, NY | 2-part takehome project, followed by a pair programming exercise</li>\n<li><a href=\"https://enki.com/\">Enki</a> | London, UK | Skype/phone interview followed by takehome project</li>\n<li><a href=\"https://ento.com/blog/ento-interview-process-101\">Ento.com</a> | Melbourne, Australia | On-site interview to talk about your experiences and what you're looking for in your next role, followed by a take-home practical test relevant to the work you'll be undertaking at Ento.</li>\n<li><a href=\"https://www.equalexperts.com/\">Equal Experts</a> | London, UK; Manchester, UK; New York, NY; Pune, India; Lisbon, Portugal; Calgary, Canada | Fizzbuzz test done at home followed by Pair Programming session at office and finally face to face technical and attitude interview.</li>\n<li><a href=\"https://www.ericsson.com/\">Ericsson</a> | Dublin, Ireland | Skype/phone interview followed by Face 2 Face interview, discussions and architecture questions followed by final small project on a problem similar to daily work.</li>\n<li><a href=\"https://esharesinc.com/jobs\">eShares, Inc</a> | San Francisco, CA; Palo Alto, CA; Seattle, WA; Rio de Janeiro, Brazil; London, UK; New York, NY | Phone call, practical technical screen, on site to meet the team &#x26; explore the company</li>\n<li><a href=\"https://www.etixeverywhere.com/en/job-offers\">Etix Everywhere</a> | Luxembourg City, Luxembourg</li>\n<li><a href=\"https://euranova.eu/\">EURA NOVA</a> | Mont-Saint-Guibert, Belgium; Marseille, France; Tunis, Tunisia | attitude interview, unpaid take-home project, technical discussion with 1 or 2 technical employees (remote or face 2 face), face 2 face discussion with HR, partner, and technical staff to have a foretaste of the collaboration</li>\n<li><a href=\"http://www.europaymentgroup.com/\">Euro Payment Group</a> | Frankfurt, Germany | Take-home project followed by face to face interview</li>\n<li><a href=\"https://exoscale.ch/\">Exoscale</a> | Bern, Switzerland | Take-home project. Discussion and presentation. Then entire team meet.</li>\n<li><a href=\"https://fdex.com.br/\">F(x)</a> | São Paulo, Brazil | Skype interview, Take-home project and onsite interview to evaluate the candidate</li>\n<li><a href=\"https://www.falcon.io/jobs/\">Falcon.io</a> | Copenhagen, Denmark | Initial call/Skype culture interview. Take-home tech assignment (game) and code review. On-site Interview about your experience and meeting the team.</li>\n<li><a href=\"https://www.fatmap.com/\">FATMAP</a> | London, UK; Berlin, Germany; Vilnius, Lithuania | Skype discussion, Take-home project, Face to face</li>\n<li><a href=\"https://fauna.com/\">Fauna</a> | San Francisco, CA / Remote | Take home project, then follow up with interviews on-site or remote. Interviews are both technical and non-technical. Technical interviews comprehend the scope of the home project.</li>\n<li><a href=\"https://feather-cfm.com/\">Feather</a> | Remote | Take-home challenge, portfolio discussion &#x26; team meeting</li>\n<li><a href=\"https://blog.findy.us/findy-saiyo\">Findy</a> | Tokyo, Japan | Tech interview + On-site discussion</li>\n<li><a href=\"https://www.wearefine.com/careers\">FINE</a> | Portland, OR | Small take-home challenge + follow-up discussion</li>\n<li><a href=\"https://www.firemind.io/\">Firemind</a> | Maidstone, UK; London, UK; Remote | Small pre-interview challenge on github + discussion face to face in person or via video</li>\n<li><a href=\"https://thefitbot.com/careers.html\">Fitbot</a> | Boulder, CO | Pairing &#x26; writing code with the founders for a few hours</li>\n<li><a href=\"https://flatfox.ch/\">Flatfox</a> | Zurich, Switzerland | Informal conversation to check mutual fit, small (4h) take-home assignment, discussion in team</li>\n<li><a href=\"https://fluidly.com/\">Fluidly</a> | London, UK | Casual 30min phone call. ~1hr take home tech exercise (not pass or fail). 1 stage onsite interview - discussion about experience, 1 hour pair programming on the real code base, then your turn to interview us!</li>\n<li><a href=\"https://food52.com/jobs\">Food52</a> | New York, NY; Remote | Take-home project, discussion on-site or remote, interviews with both technical and non-technical staff</li>\n<li><a href=\"https://fooji.com/\">Fooji</a> | Lexington, KY; Remote | Take-home project</li>\n<li><a href=\"https://www.formidable.com/careers\">Formidable Labs</a> | Seattle, WA; London, UK; Remote | Take-home project, remote pair programming, discussion on-site or remote</li>\n<li><a href=\"https://fortumo.com/careers\">Fortumo</a> | Tallinn, Estonia; Tartu, Estonia | After a 30-min call you get a simplified version of a task that has recently been a challenge for the engineering team</li>\n<li><a href=\"https://founders.as/joinus\">Founders</a> | Copenhagen, Denmark | Take Home project + Interviews</li>\n<li><a href=\"http://www.foundryinteractive.com/contact\">Foundry Interactive</a> | Seattle, WA | On-site or remote discussion, paid trial project with pairing and code reviews</li>\n<li><a href=\"https://www.fournova.com/jobs\">fournova</a> | Remote | Take-home project, discussion via video call</li>\n<li><a href=\"https://www.freeagent.com/company/careers\">FreeAgent</a> | Edinburgh, UK | Take-home project, pair programming, discussion and interviews</li>\n<li><a href=\"https://www.freeletics.com/en/corporate/jobs\">Freeletics</a> | Munich, Germany | Small real-world challenge, multiple interviews on-site/remote and social gathering with team.</li>\n<li><a href=\"https://www.freetrade.io/careers\">Freetrade</a> | London, England | Initial hangout with fizz buzz style question followed by an on-site real world coding question and systems design conversation.</li>\n<li><a href=\"https://friday-jobs.personio.de/\">FRIDAY</a> | Berlin, Germany | Take-home real-world challenge, interview on-site or remote</li>\n<li><a href=\"https://frontside.io/careers\">Frontside</a> | Austin, Texas | Phone interview with remote pairing session. Followed by in person pairing (paid for the day) and lunch with the team.</li>\n<li><a href=\"https://www.funda.nl/vacatures\">Funda</a> | Amsterdam, The Netherlands | Take Home test + Discussion On-Site/Remote</li>\n<li><a href=\"https://www.fundapps.co/about-us/join-our-team\">FundApps</a> | London, UK | Coffee with an Engineer; take-home kata; code review + on-site pair programming exercise.</li>\n</ul>\n<h2>G - I</h2>\n<ul>\n<li><a href=\"https://www.gamevycareers.com/\">Gamevy</a> | London, UK; Bilbao, ES; Remote | Informal culture discussions, pair programming with our engineers</li>\n<li><a href=\"https://www.garnercorp.com/\">Garner</a> | Toronto, Canada | step 1: online chat with hiring manager, step 2: at home assignment solving real-life problem, step 3: on-site pair programming with engineers, step 4: offer</li>\n<li><a href=\"https://gathercontent.com/careers/designer\">GatherContent</a> | Remote | Culture-first interviews, pair programming and remote, informal technical discussions</li>\n<li><a href=\"https://generalui.com/\">GeneralUI</a> | Seattle, WA | A short phone screen with questions regarding general knowledge related to the open position, then a half day pair programming interview.</li>\n<li><a href=\"http://jobs.ginetta.net/\">Ginetta</a> | Zurich, Switzerland; Braga, Portugal | Culture-first interviews, take home assignment that resembles a real-world problem we often solve, then discussion about the assignment in-person with pair-programming improvement sessions with our developers.</li>\n<li><a href=\"https://github.com/about/careers\">GitHub</a> | Remote; San Francisco, CA; Boulder, CO| Take-home exercise, code review and technical discussions.</li>\n<li><a href=\"https://www.gitprime.com/\">GitPrime</a> | Denver, CO; Remote | small short term real-world project, paid project on production code</li>\n<li><a href=\"https://glints.com/sg/inside/careers/\">Glints</a> | Singapore, Singapore; Jakarta, Indonesia | Culture fit interview, take home assignment that resembles a real-world problem, walkthrough about the assignment</li>\n<li><a href=\"https://gocardless.com/about/jobs\">GoCardless</a> | London, UK | Project to work at home, general technical questions, pair programming with engineers</li>\n<li><a href=\"https://www.godaddy.com/careers/overview\">GoDaddy</a> | Sunnyvale, CA | Pair programming with senior engineers</li>\n<li><a href=\"https://www.gojek.io/\">GoJek</a> | Bangalore, India; Jakarta, Indonesia; Singapore, SG; Bangkok, Thailand | Take-home exercise, Pair programming with senior engineer, Techinal problem solving and discussion, Cultural Fit</li>\n<li><a href=\"http://gower.st/\">Gower Street Analytics</a> | Remote; London, UK | Initial telephone chat, then either a) work with us, fully paid, for a day on real code with the team; or b) pair-programming on a code kata with the team members for four pomodoros. Your choice.</li>\n<li><a href=\"https://www.graffino.com/\">Graffino</a> | Sibiu, Romania | Take-home project, discussion on-site</li>\n<li><a href=\"https://graftonstudio.com/\">Grafton Studio</a> | Boston, MA | Take-home project, discussion on-site</li>\n<li><a href=\"http://www.gramercytech.com/\">Gramercy Tech</a> | New York, NY | Pair programming &#x26; discussion on-site</li>\n<li><a href=\"https://www.grandcentrix.net/jobs\">grandcentrix</a> | Cologne, Germany | Take-home project, discussion on-site</li>\n<li><a href=\"https://www.chatgrape.com/jobs/\">Grape</a> | Vienna, Austria / Remote | Github or code samples -> Pair programming -> Skype/phone interview</li>\n<li><a href=\"https://www.graph.cool/\">Graphcool</a> | Berlin, Germany | On-site pair programming of a small, isolated real world task</li>\n<li><a href=\"http://www.graphicacy.com/\">Graphicacy</a> | Washington, DC | Phone interview; in-person or virtual interview depending on location and availability; two brief technical assignments focused on flexibility, creativity, and general competency</li>\n<li><a href=\"https://www.graphistry.com/careers\">Graphistry</a> | Oakland, CA; San Francisco, CA; Remote | Engineering, culture, and product discussions, and for junior developers, choice of take home or code review.</li>\n<li><a href=\"https://www.grok-interactive.com/\">Grok Interactive</a> | San Antonio, TX | Take-home project with code review and a follow-up in-person interview.</li>\n<li><a href=\"http://www.gruntwork.io/\">Gruntwork</a> | Remote | Paid, take-home project with pair coding</li>\n<li><a href=\"https://gtmsportswear.com/careers\">GTM Sportswear</a> | Manhattan, KS / Remote | Remote pairing session, then a take-home test.</li>\n<li><a href=\"https://happyteam.io/\">Happy Team</a> | Warsaw, Poland; Remote | General technical questions, takehome paid exercise with feedback/discussion during implementation</li>\n<li><a href=\"http://www.happypie.com/\">Happypie</a> | Uppsala, Sweden | Takehome excercise with code review after, in-person interview</li>\n<li><a href=\"https://www.hash.com.br/index.html\">Hash</a> | Sao Paulo, Brazil | Take-home project and/or discussion (on-site or remote)</li>\n<li><a href=\"https://hashrocket.com/\">Hashrocket</a> | Chicago, IL/Jacksonville Beach, FL | Remote pairing session, paid week pair programming with everyone on the team</li>\n<li><a href=\"https://headspring.com/about/careers\">Headspring</a> | Austin, TX; Houston, TX; Monterrey, Mexico | Take-home situational questionnaire and code exercise, with in-person follow up to discuss and pair for changes</li>\n<li><a href=\"https://healthify.us/\">Healthify</a> | Remote &#x26; New York City, NY | Take-home project, discussion via Zoom, pair programming with us on our app for a day.</li>\n<li><a href=\"https://www.heetch.com/\">Heetch</a> | Paris, France | Values-fit interview (via zoom.us), Take-home project with review, Team Discussions (via zoom.us), on-site day</li>\n<li><a href=\"https://helabs.com/\">HE:labs</a> | Rio de Janeiro, Brazil &#x26; Remote | Take-home project and discussion via Skype.</li>\n<li><a href=\"https://www.hellofresh.com/jobs\">HelloFresh</a> | Berlin, Germany | Take-home project, discussion via Skype or on-site</li>\n<li><a href=\"https://www.heptio.com/jobs\">Heptio</a> | Seattle, WA; Remote | Take-home project, discussion on-site</li>\n<li><a href=\"http://www.hhcc.com/careers\">Hill Holliday</a> | Boston, MA | Take-home project on GitHub, in-person interview / culture fit interview</li>\n<li><a href=\"http://www.hireology.com/careers\">Hireology</a> | Chicago, IL; Remote | Walk through personal/work projects and discuss experience</li>\n<li><a href=\"https://www.hiventive.com/\">Hiventive</a> | Pessac, France | Phone interview, home coding challenge, on-site interview with general programming questions, discussion of proposed solutions and personal experience.</li>\n<li><a href=\"https://holidaypirates.group/en/jobs\">HolidayPirates</a> | Berlin, Germany | Take-home project, discussion via Skype or on-site</li>\n<li><a href=\"https://www.holobuilder.com/\">HoloBuilder</a> | Aachen, Germany | Take-home project, discussion via Skype or on-site</li>\n<li><a href=\"https://www.homechef.com/careers\">Home Chef</a> | Chicago, IL; Remote | Get-to-know-you meeting with the team, followed by a half-day collaborative coding session</li>\n<li><a href=\"https://www.homelight.com/engineering\">HomeLight</a> | San Francisco, CA; Scottsdale, AZ; Seattle, WA | Phone screen, take home that is close to production code, onsite with pair programming</li>\n<li><a href=\"https://jobs.hoxhunt.com/\">HoxHunt</a> | Helsinki, Finland | Take-home project, pair programming on-site</li>\n<li><a href=\"http://humanapi.co/company/careers\">Human API</a> | Redwood City, CA | Technical phone interview, then on-site pair programming and design discussion</li>\n<li><a href=\"https://io.co.za/opportunities\">I|O</a> | Cape Town, South Africa</li>\n<li><a href=\"http://icalialabs.com/\">Icalia Labs</a> | Monterrey, Mexico | Pair programming, cultural fit session</li>\n<li><a href=\"http://iconstituent.com/careers/\">iConstituent</a> | Washington, DC | Take-home project and code review in-person</li>\n<li><a href=\"https://ideamotive.co/\">Ideamotive</a> | Warsaw, Poland &#x26; Remote | Take-home project, technical interview with developer</li>\n<li><a href=\"https://www.ideo.com/jobs\">IDEO</a> | San Francisco, CA; New York, NY; Chicago, IL; Cambridge, MA | Take home project that resembles a problem IDEO solves for, then pairing session in person or over video chat.</li>\n<li><a href=\"https://boards.greenhouse.io/scout24\">ImmobilienScout24</a> | Berlin, Germany | Take-home project, discussion on-site</li>\n<li><a href=\"http://jobs.impraise.com/\">Impraise</a> | Amsterdam, The Netherlands | Take home test, real world pair programming</li>\n<li><a href=\"https://jobs.incloud.de/\">Incloud</a> | Darmstadt, Germany | Technical interview with developers, followed by a full day on site with a practical project</li>\n<li><a href=\"http://www.indellient.com/careers\">Indellient</a> | Oakville, Canada | Series of interviews both technical and non-technical</li>\n<li><a href=\"https://www.influxdata.com/careers\">InfluxData</a> | San Francisco, CA &#x26; Remote | Technical and non-technical interviews, pair programming, with prospective manager and multiple prospective teammates</li>\n<li><a href=\"https://www.infosum.com/\">InfoSum</a> | Basingstoke, UK | On-site unsupervised exercise &#x26; discussion.</li>\n<li><a href=\"https://inkindcapital.com/\">inKind Capital</a> | Boulder, CO | Discussing real-world problems, pair programming, dinner &#x26; drinks with the team</li>\n<li><a href=\"https://www.inmar.com/careers\">Inmar</a> | Winston-Salem, NC; Austin, TX &#x26; Remote | Take-home project and conversation-style interviews</li>\n<li><a href=\"https://www.innoplexus.com/careers/\">Innoplexus</a> | Pune, India; Frankfurt, Germany | Take-home projects and On-site pair programming assignment.</li>\n<li><a href=\"https://careers.instacart.com/\">Instacart</a> | San Francisco, CA | Take-home real world project, pair programming on-site</li>\n<li><a href=\"https://internshala.com/internships/internship-at-InstantPost\">InstantPost</a> | Bangaluru, India | Remote assignment followed by Technical and Team round interview</li>\n<li><a href=\"https://www.integral.io/\">Integral.</a> | Detroit, MI | Initial remote technical screen featuring test-driven development &#x26; pair programming, then on-site full day interview that involves pair programming on production code using test-driven development.</li>\n<li><a href=\"https://www.intelipost.com.br/\">Intelipost</a> | São Paulo, BR | Take-home project, on-site code review and presentation (skype available if needed), discussion involving real world problems and interviews with different teams</li>\n<li><a href=\"https://www.intercom.com/careers\">Intercom</a> | San Francisco, CA; Chicago, IL; Dublin, Ireland | Real-world technical design and problem discussion, pair programming on-site</li>\n<li><a href=\"https://interset.com/careers\">Interset</a> | Ottawa, Canada | Discussion of technical background and past experience. Relevant take-home project for junior developers</li>\n<li><a href=\"https://www.ithaka.travel/\">Ithaka</a> | Mumbai, India | Phone interview followed by a small development task. Finally a phone interview with CEO.</li>\n<li><a href=\"http://itrellis.com/\">iTrellis</a> | Seattle, WA | Phone screen, then a take-home project, then pairing (remote or on-site) with 3 developers on the take-home project.</li>\n<li><a href=\"https://jobs.izettle.com/jobs\">iZettle</a> | Stockholm, Sweden | Remote pair programming exercise, propose an architecture for an application and discuss about it in an informal format.</li>\n</ul>\n<h2>J - L</h2>\n<ul>\n<li><a href=\"http://www.jamasoftware.com/\">Jamasoftware</a> | Portland, OR | Initial phone screen with hiring manager. In person pairing on project similar to day-to-day work with a separate cultural interview</li>\n<li><a href=\"https://jamitlabs.com/jobs\">Jamit Labs</a> | Karlsruhe, Germany | Phone interview or on-site interview &#x26; take-home code challenge or on-site programming session</li>\n<li><a href=\"https://www.jiminny.com/\">Jiminny</a> | Sofia, Bulgaria | Phone screen. Take-home exercise. Follow-up discussion.</li>\n<li><a href=\"https://www.jitbit.com/\">Jitbit</a> | Remote; London, UK; Tel-Aviv, Israel | Take-home real-world task</li>\n<li><a href=\"https://weare.jobtome.com/careers\">Jobtome</a> | Stabio, Switzerland | Phone screen introduction with hiring manager. In site (or screen call) with Engineer Manager for a talk on skills and cultural fit.</li>\n<li><a href=\"https://journaltech.com/jobs\">Journal Tech</a> | Los Angeles, CA | Mini take-home project, phone interview, discussion on-site</li>\n<li><a href=\"http://www.jplusplus.org/\">Journalism++</a> | Berlin, Germany | Apply through a <a href=\"http://internship.jplusplus.org/\">relevant online challenge</a> to show your technical skills and your capacity to investigate</li>\n<li><a href=\"https://www.justwatch.com/us/talent\">JustWatch</a> | Berlin, Germany | Take-Home project, discussion on-site</li>\n<li><a href=\"https://www.khealth.ai/\">K Health</a> | Tel Aviv, Israel | Phone screening to discuss technical background and past experience. Take-home assignment followed by on-site code review and interview. Cultural fit assessment</li>\n<li><a href=\"https://www.getkahoot.com/jobs\">Kahoot!</a> | London, UK / Oslo, Norway | Phone screening to discuss technical background and past experience. Take-home assignment followed by on-site code review and interview. Cultural fit assessment</li>\n<li><a href=\"https://kata.ai/\">Kata.ai</a> | Malang, Indonesia / Jakarta, Indonesia | Take-home assignment, then invited to discuss the assignment and interview.</li>\n<li><a href=\"https://www.kayako.com/\">Kayako</a> | London, UK / Gurgaon, India | Take-home assignment, series of experience based interviews, cultural fit assessment</li>\n<li><a href=\"https://www.kentik.com/careers\">Kentik</a> | San Francisco, CA | Phone screening to discuss technical background and past experience. Take-home assignment followed by on-site code review and interview. Cultural fit assessment</li>\n<li><a href=\"https://keymetrics.io/\">Keymetrics</a> | Paris, France | Phone Interview, Take-home project based on our <a href=\"https://github.com/keymetrics/keymetrics-api\">API</a>, IRL meeting with the whole team</li>\n<li><a href=\"https://careers.kindredplc.com/\">Kindred Group, Native Apps Team</a> | Stockholm SE, London UK | On-site/Skype programming task, Interview</li>\n<li><a href=\"https://www.kinnek.com/jointeam\">Kinnek</a> | New York, NY | Phone screen, on-site pairing session, take-home project</li>\n<li><a href=\"https://code.kiwi.com/\">Kiwi.com</a> | Brno, Czech Republic | Phone Interview, Take-home projects, On-site code review &#x26; interview</li>\n<li><a href=\"https://knplabs.com/\">KNPLabs</a> | Nantes, France | First step: screening call directly with the CEO, to discuss company vision, assess cultural fit and experience. Second step: call or IRL interview with a developer and a project facilitator , technical discussions with focus on soft skills. The goal of the interview is for the 2 KNPeers to be able to answer: “Do I want to work with this person ?” If both say yes, the person is hired. If even at least one says no, the person is not hired.</li>\n<li><a href=\"http://www.koddi.com/open-positions\">Koddi Inc.</a> | Fort Worth, TX | Phone Interview(s), take-home project, on-site interview</li>\n<li><a href=\"https://www.konghq.com/careers\">Kong</a> | San Francisco, CA | Phone interview. Pairing and technical interviews. Take home assigment.</li>\n<li><a href=\"http://www.kongregate.com/jobs\">Kongregate</a> | Portland, OR | Phone screening. Take home project. On-site pairing and conversational technical interviews.</li>\n<li><a href=\"https://www.korbit.co.kr/about/jobs\">Korbit</a> | Seoul, South Korea | Take home assignment followed by on-site code review and interview</li>\n<li><a href=\"http://lab.coop/\">Lab.Coop</a> | Budapest, Hungary | Partnership-fit discussion, code-review and trial days.</li>\n<li><a href=\"https://landing.jobs/at/landing-jobs\">Landing.jobs</a> | Lisbon, Portugal | Interviews (in-person or remote), Take home coding project</li>\n<li><a href=\"http://engineering.lanetix.com/\">Lanetix</a> | San Francisco, CA | <a href=\"https://engineering.lanetix.com/2015-10-20/hiring-process\">Our Hiring Process</a></li>\n<li><a href=\"http://careers.laterooms.com/\">LateRooms</a> | Manchester, UK | Telephone interview followed by coding problem at home. Suitable submissions proceed to an onsite interview.</li>\n<li><a href=\"https://launchacademy.com/careers\">Launch Academy</a> | Boston, Philadelphia | Nontechnical phone screen, pair programming with team member, and potentially a \"guest lecture\" for our students</li>\n<li><a href=\"https://launchdarkly.com/careers\">LaunchDarkly</a> | Oakland, CA | Informational phone screen with Eng leadership, take home project, onsite interviews</li>\n<li><a href=\"https://learningbank.dk/\">Learningbank</a> | Copenhagen, DK | Take home assignment, followed by on-site code review.</li>\n<li><a href=\"https://www.legalstart.fr/\">Legalstart.fr</a> | Paris, France | Telephone interview followed by take-home challenges. Suitable applicants are asked to do further on-pair interviews on site.</li>\n<li><a href=\"https://www.leverton.ai/\">Leverton</a> | Berlin, Germany | Initial chat with the HR continued with 1-2 rounds chat with the team; followed by a technical test and finally a chat with the CTO/MD. <a href=\"http://leverton-jobs.personio.de/\">Jobs page</a></li>\n<li><a href=\"https://www.libertymutualgroup.com/careers\">Liberty Mutual</a> | Seattle, WA; Boston, MA; Indianapolis, IN | Initial interview, discussion on-site, interview with peers</li>\n<li><a href=\"https://www.librato.com/jobs\">Librato</a> | San Francisco, CA; Boston, MA; Austin, TX; Vancouver, Canada; Krakow, Poland | Take home coding project, conversational technical interviews on-site</li>\n<li><a href=\"http://lightningjar.agency/\">Lightning Jar</a> | San Antonio, Tx | Remote pairing session, Initial interview,discussion on-site</li>\n<li><a href=\"http://www.lightricks.com/\">Lightricks</a> | Jerusalem, Israel | Initial interview, Take home project, discussion on-site</li>\n<li><a href=\"http://jobs.linkresearchtools.com/job-offers\">LinkResearchTools</a> | Vienna, Austria | Skype interview, mini take-home exercise, discussion on-site / personal interview</li>\n<li><a href=\"https://listium.com/jobs\">Listium</a> | Melbourne, Australia | Design and code proof of concept features with the team</li>\n<li><a href=\"https://litmus.com/careers#openings\">Litmus</a> | Remote | General technical questions, take-home code challenge, discussion, on-site programming session, meet &#x26; greet with the team</li>\n<li><a href=\"https://www.littlethings.com/careers.html\">LittleThings</a> | New York, NY | Take home code challenge, Discussion</li>\n<li><a href=\"https://loanzen.in/team.html#Career\">LoanZen</a> | Bengaluru, India | Initial phone interview about experience, a solve-at-home project based on the kind of work we do at our company, on-site interview discussing the submitted solution and a general discussion with the whole team</li>\n<li><a href=\"https://lob.com/careers\">Lob</a> | San Francisco, CA | Initial phone screen followed by an on-site interview. Technical problems discussed during the interview are all simplified versions of problems we've had to solve in production. Our entire interview process and what we're looking for is described in our blog post <a href=\"https://lob.com/blog/how-we-interview-engineers\">How We Interview Engineers</a>.</li>\n<li><a href=\"https://www.locastic.com/posao\">Locastic</a> | Split, Croatia | Take-home code challenge, tehnical discussion &#x26; on-site programming session, meet &#x26; greet with the team</li>\n<li><a href=\"https://www.locaweb.com.br/carreira\">Locaweb</a> | São Paulo, Brazil | Skype interview, take-home project and discussion on-site</li>\n<li><a href=\"https://logiball.de/en/jobs/\">LOGIBALL GmbH</a> | Berlin, Hannover and Herne in Germany | Interviews and discussion</li>\n<li><a href=\"https://logicsoft.co.in/\">Logic Soft</a> | Chennai, India | Phone discussion, F2F pair programming exercise + discussion</li>\n<li><a href=\"https://www.lonres.com/public/working-us\">LonRes</a> | London, United Kingdom | Quick introduction call with tech (Skype), coding task for ≈1 hour, face-to-face interview (or via Skype) and meeting with team members.</li>\n<li><a href=\"http://www.lookbookhq.com/about/careers\">LookBookHQ</a> | Toronto, Canada | On-site discussion, pair programming exercise</li>\n<li><a href=\"https://www.useloom.com/careers\">Loom</a> | San Francisco, CA | Google Hangouts resume dive on past experience, take-home project OR architectural phone screen, on-site interviews (2 technical architecture related to work, 1 or 2 non-technical)</li>\n<li><a href=\"https://lydia-app.com/en/company/jobs\">Lydia</a> | Paris, FR | Mini take-home project, phone interview, discussion on-site</li>\n<li><a href=\"https://lyft.com/jobs\">Lyft</a> | San Francisco, CA | Pair programming on-site with your own personal laptop</li>\n<li><a href=\"http://www.lyoness-corporate.com/de-AT/Karriere/Jobangebote\">Lyoness Austria GmbH</a> | Graz, Austria | Take-Home project, discussion on-site</li>\n</ul>\n<h2>M - O</h2>\n<ul>\n<li><a href=\"https://www.madetech.com/careers\">Made Tech</a> | London, UK | <a href=\"https://github.com/madetech/handbook/tree/master/guides/hiring#20-minute-phone-conversation\">Our hiring process</a></li>\n<li><a href=\"https://magnetis.workable.com/\">Magnetis</a> | São Paulo, Brazil &#x26; Remote | Phone interview + take home assignment, followed by pair programming and informal meeting with the team.</li>\n<li><a href=\"https://careers-mlssoccer.icims.com/jobs/search?ss=1&#x26;searchCategory=20285\">Major League Soccer</a> | New York, NY | Phone interview + short take home project, which is daily work focused. In person interview could involve discussing past projects or pair programming.</li>\n<li><a href=\"http://www.makemusic.com/careers/\">MakeMusic</a> | Boulder, CO; Denver, CO | Phone screen, take home project, remote and on-site interviews for technical and cultural fit</li>\n<li><a href=\"https://maketime.workable.com/\">MakeTime</a> | Lexington, KY | Practical exercise and/or a pairing session on site</li>\n<li><a href=\"http://www.mango-solutions.com/wp/about-mango/team\">Mango Solutions</a> | London (UK), Chippenham (UK) | Initial phone interview, followed by on-site interview with take-home assignment</li>\n<li><a href=\"https://www.mapbox.com/jobs\">Mapbox</a> | San Francisco, CA; Washington, DC; Ayacucho, Peru; Bangalore, India; Berlin, Germany; Remote | Conversational interviews, paid onsite project with team.</li>\n<li><a href=\"https://www.mavenlink.com/careers\">Mavenlink</a> | San Francisco, CA; Irvine, CA; Salt Lake City, UT | On-site pairing with multiple engineers. Pairing exercises and pairing on company code.</li>\n<li><a href=\"https://www.maxwellhealth.com/careers\">Maxwell Health</a> | Boston, MA | Take-home exercise or pairing session with team. Then conversational meetings with members of the team.</li>\n<li><a href=\"https://me-company.de/jobs/\">Me &#x26; Company</a> | Düsseldorf, Germany | You join us for one or two paid trial days to work on an assignment and to meet the team.</li>\n<li><a href=\"https://mediapop.co/\">Media Pop</a> | Singapore, Singapore | Take-home or unsupervised (onsite) real-world assignment</li>\n<li><a href=\"https://www.meetrics.com/\">Meetrics</a> | Berlin, Germany | Initial interview, take-home code challenge and review</li>\n<li><a href=\"http://underthehood.meltwater.com/jobs\">Meltwater</a> | Manchester, NH | Small take home exercise that will be presented to the team during a QA style interview</li>\n<li><a href=\"https://mention.workable.com/\">Mention</a> | Paris, FR | Take-home small exercise followed up by on site meetings with your future coworkers</li>\n<li><a href=\"https://www.mercatus.com/company/careers\">Mercatus</a> | Toronto, Canada | Practical on-site project similar to daily work</li>\n<li><a href=\"https://www.mfind.pl/dolacz-do-nas/\">mfind</a> | Warsaw, PL | Phone call about technical experience, Take-home project or technical test(depends on experience), Onsite interview with technical lead.</li>\n<li><a href=\"https://midrive.com/careers\">miDrive</a> | London, UK | Phone screen, Take-home project / technical test, Onsite interview with senior and peer.</li>\n<li><a href=\"https://www.milchundzucker.de/\">milch &#x26; zucker</a> | Gießen, Germany | Interview with direct feedback, applicants providing working sample, code review (product code or personal code of applications)</li>\n<li><a href=\"https://mimirhq.com/jobs/\">Mimir</a> | Indianapolis, Indiana | Take home interview, phone screen, in person interview where you decide how you want to be interviewed (questions, pair programming, etc.)</li>\n<li><a href=\"http://www.minutemedia.com/careers/\">Minute Media</a> | Tel-Aviv, Israel | Phone screening with engineer. On-site real-world challenge questions with two engineers. Sometimes a take-home assignment or existing code sample submission.</li>\n<li><a href=\"https://mirumee.com/jobs\">Mirumee</a> | Wroclaw, Poland; Remote | Pair programming and code review using one of the issues (or Pull Requests) in our open-source Saleor project, general discussion about programming, technology and candidate's experience</li>\n<li><a href=\"https://mixmax.com/careers\">Mixmax</a> | San Francisco, CA | Takehome assignment purely based on their platform, followed by phone interview</li>\n<li><a href=\"https://www.mobilecashout.com/\">MobileCashout</a> | Barcelona, Spain; Valencia, Spain | Quick introduction video call with a tech (less than 10-15 minutes). On-site open source contribution to a project of candidates choosing, paired with a tech from the team. Interview and a short questionaire about software design and relevant technologies. Interview and presentation of the company with a HR rep.</li>\n<li><a href=\"https://mobilethinking.ch/\">Mobilethinking</a> | Geneva, Switzerland | 1 hour discussion about technical background and past experiences, preferably in-person</li>\n<li><a href=\"https://about.modeanalytics.com/careers\">Mode</a> | San Francisco, CA | Phone interview followed by onsite pair-architecting and discussion</li>\n<li><a href=\"http://mokahr.com/\">MokaHR</a> | Beijing, China | Take home project/challenge, then on-site programming session taken from problems we encounter at work</li>\n<li><a href=\"https://moneytree.jp/\">Moneytree Front-end Web Team</a> | Tokyo, Japan | Pair programming exercise and social gathering with team</li>\n<li><a href=\"https://monzo.com/\">Monzo</a> | London, UK &#x26; Remote | Phone interview with another engineer. Take-home assignment. Call to debrief on take-home assignment. Half-day interview (on-site or Hangouts) with three conversational sessions: (1) building on take-home test &#x26; real-world system design (verbal and collaborative); (2) digging into knowledge &#x26; understanding in 1-2 other relevant technical areas; (3) general background, teams and ways of working.</li>\n<li><a href=\"https://www.moteefe.com/jobs\">Moteefe</a> | London, UK &#x26; Remote | Interview with CTO. Take home project/challenge.</li>\n<li><a href=\"https://mutualmobile.com/careers\">Mutual Mobile</a> | Austin, TX; Hyderabad, India | Technical discussion, code test based on actual work you'll be doing, panel style discussions for cross-functional and culture-fit.</li>\n<li><a href=\"http://www.mutualofomaha.com/careers\">Mutual of Omaha</a> | Omaha, NE, USA | Panel Style Interviews analyzing problem solving, ability to adapt well to change, and interpersonal communication skills.</li>\n<li><a href=\"https://www.mutuallyhuman.com/\">Mutually Human Software</a> | MI, OH, WA | Collaborative problem analysis and design exercise, pairing exercise</li>\n<li><a href=\"https://nanobox.io/\">Nanobox</a> | Lehi, UT; Remote | A phone/video/person-to–person interview with a look at past projects (github, bitbucket, source code, etc.)</li>\n<li><a href=\"https://www.native-instruments.com/\">Native Instruments</a> | Berlin, Germany | Takehome programming assignment and personal interviews with part of the hiring team.</li>\n<li><a href=\"https://nearsoft.com/join-us/\">Nearsoft Inc</a> | Hermosillo, Mexico; Chihuahua, Mexico; Mexico City, Mexico | Takehome <a href=\"https://nearsoft.com/blog/the-logic-behind-nearsofts-logic-test/\">logic test</a>, english interview to check communication skills, short technical interview about experience, long technical discussion about languages/tools/practices you will use on daily basis, pair programming session.</li>\n<li><a href=\"http://lifeatnedap.com/vacatures\">Nedap</a> | Groenlo, Netherlands / Remote | A simple conversation, human to human and a small on-site project</li>\n<li><a href=\"https://neoteric.eu/career/\">Neoteric</a> | Gdańsk, Warsaw Poland; Remote | Face2Face conversation, take home exercise &#x26; pair programming session</li>\n<li><a href=\"https://jobs.netflix.com/jobs/867042\">Netflix</a> | Los Gatos, CA | Takehome exercise, series of real-world interviews with engineers, HR, engineering managers and our director</li>\n<li><a href=\"https://www.netguru.co/career\">Netguru</a> | Warsaw, Poland; Remote | Takehome exercise &#x26; pair programming session</li>\n<li><a href=\"https://www.netlandish.com/\">Netlandish</a> | Los Angeles, CA; Remote | Takehome exercise, chat interview, video interview</li>\n<li><a href=\"https://www.netlify.com/careers\">Netlify</a> | San Francisco, CA | Paid takehome project and online/onsite discussion</li>\n<li><a href=\"https://newrelic.com/about/careers\">New Relic</a> | San Francisco, CA | Takehome exercise &#x26;/ or pair programming session depending on the team</li>\n<li><a href=\"https://www.newstore.com/careers/\">NewStore</a> | Berlin, Germany; Hannover, Germany; Erfurt, Germany; Boston, MA | Telephone technical interview, code sample submission or takeaway coding exercise, on-site pair programming, design session (1/2 day)</li>\n<li><a href=\"https://www.newvoicemedia.com/about-newvoicemedia/careers\">NewVoiceMedia</a> | Basingstoke, England; Wroclaw, Poland | Telephone interview, takeaway coding exercise, on-site pair programming, code review &#x26; technical discussion (1/2 day)</li>\n<li><a href=\"https://nexcess.net/\">Nexcess.net</a> | Southfield, MI | We mostly chat to get a feel on both ends if there's a good cultural fit. We ask questions to see what experience you have and how you think as a programmer. At some point we look at some of your code or have you work on some of ours (1 hour).</li>\n<li><a href=\"https://www.workhiro.com/companies/nimbl3\">Nimbl3</a> | Bangkok, Thailand | Takehome exercise and specific role discussion</li>\n<li><a href=\"http://www.niteoweb.com/careers\">Niteoweb</a> | Ljubljana, Slovenia | Join us for a week to see if we fit</li>\n<li><a href=\"https://www.gonitro.com/about/jobs\">Nitro</a> | Dublin, Ireland; San Francisco, CA | Phone Call, Take Home Test, Hiring Manager Phone Interview followed by an onsite discussion</li>\n<li><a href=\"https://www.noa.one/\">Noa</a> | Berlin, Germany; San Francisco, CA | 1 technical chat, 2-3 cultural chats with colleagues from different departments in the team, if these work a pair programming exercise</li>\n<li><a href=\"http://nodesource.com/careers\">NodeSource</a> | Remote | A person-to–person walk through of a past project of yours</li>\n<li><a href=\"https://www.nomoko.world/jobs\">Nomoko,camera</a> | Zurich, Switzerland | Three interrogations</li>\n<li><a href=\"https://www.nordsoftware.com/en/jobs\">Nord Software</a> | Helsinki, Finland; Tampere, Finland; Stockholm, Sweden | Take-home exercise &#x26; interview with CEO and senior developer</li>\n<li><a href=\"https://www.noredink.com/jobs\">NoRedInk</a> | San Francisco, CA | Take-home exercise &#x26; pair programming session</li>\n<li><a href=\"https://novicap.com/en/careers.html\">NoviCap</a> | Barcelona, Spain | Takehome exercise &#x26; discussion on-site</li>\n<li><a href=\"https://novoda.com/hiring\">Novoda</a> | London, UK; Liverpool, UK; Berlin, Germany; Barcelona, Spain; Remote | 2 x Pairing sessions &#x26; conversational interviews <a href=\"https://github.com/novoda/dojos\">(public repo)</a></li>\n<li><a href=\"https://www.novus.com/jobs\">Novus Partners</a> | New York, NY | Take-home exercise &#x26; on-site exercises (choice of laptop or whiteboard)</li>\n<li><a href=\"https://nozbe.com/jobs\">Nozbe</a> | Remote | Take-home exercise &#x26; interview with the team</li>\n<li><a href=\"https://npmjs.com/jobs\">npm, Inc</a> | Oakland, CA / Remote | No technical challenges. Just interview conversations.</li>\n<li><a href=\"https://nubank.workable.com/\">Nubank</a> | São Paulo, BR | Phone conversation, take-home exercise, code walkthrough, on-site code pairing.</li>\n<li><a href=\"https://www.numberly.com/\">numberly</a> | Paris, France | Series of interviews, that go over technical background, past experiences and cultural knowledge</li>\n<li><a href=\"https://angel.co/numerai/jobs\">numer.ai</a> | San Francisco, CA</li>\n<li><a href=\"https://www.nutshell.com/jobs\">Nutshell</a> | Ann Arbor, MI, US | Email screen / take-home programming excercise (<a href=\"https://github.com/nutshellcrm/join-the-team\">public repo</a>)</li>\n<li><a href=\"https://www.nyon.nl/vacatures\">Nyon</a> | Amsterdam, The Netherlands | 1. Skype (or real life) interview 2. Take home exercise (3-4 hours) 3. Meet entire team and pair programming sessions</li>\n<li><a href=\"https://oreilly.com/jobs\">O'Reilly Media</a> | Sebastopol, CA; Boston, MA; Remote | Phone conversation, take-home exercise or pair programming session, team interview, all via Google Hangout</li>\n<li><a href=\"https://objectpartners.com/careers/\">Object Partners, Inc.</a> | Minneapolis, MN; Omaha, NE | Phone interview to gauge mutual interest, followed by a slightly more in-depth technical round-table interview</li>\n<li><a href=\"https://www.objectiveinc.com/careers\">Objective, Inc.</a> | Salt Lake City, UT | Take-home programming exercise, then onsite friendly chat with team</li>\n<li><a href=\"http://rejoins.octo.com/\">OCTO Technology</a> | Paris, France | HR interview to go over your experiences and cultural knowledge. Then more or less informal discussion with two future team members about architecture design, agile practices, take-home project, pair programming...</li>\n<li><a href=\"https://olist.com/\">Olist</a> | Curitiba, Brazil | Take-home project and remote or on-site interviews</li>\n<li><a href=\"https://www.omadahealth.com/jobs\">Omada Health</a> | San Francisco, CA | Take home exercise and/or pair programming session.</li>\n<li><a href=\"https://onfido.com/jobs\">Onfido</a> | London, UK; Lisbon, Portugal | Take-home exercise and on-site interview/discussion with potential team</li>\n<li><a href=\"https://ontame.io/\">Ontame.io</a> | Copenhagen, Denmark | Take home exercise and specific role discussion</li>\n<li><a href=\"https://opbeat.com/jobs#seniorbackendengineer\">Opbeat</a> | Copenhagen, Denmark | Pairing on a real-world problem</li>\n<li><a href=\"https://www.openmindonline.it/\">Openmind</a> | Monza, Italy | On-site interviews</li>\n<li><a href=\"http://www.optoro.com/open_position_item/?oid=134960\">Optoro</a> | Washington, DC | Take home exercise. Review your code onsite.</li>\n<li><a href=\"http://www.ostmodern.co.uk/\">Ostmodern</a> | London, UK | Take-home exercise &#x26; discussion on-site</li>\n<li><a href=\"https://www.outbrain.com/jobs\">Outbrain</a> | NYC, Israel | Take-home exercise &#x26; discussion</li>\n<li><a href=\"https://outlandish.com/\">Outlandish</a> | London, UK | Take-home exercise, real-world pair programming session, friendly chat with team</li>\n<li><a href=\"https://github.com/outlook/jobs\">Outlook iOS &#x26; Android</a> | San Francisco, CA / New York, NY | Take-home project &#x26; online / onsite discussion</li>\n<li><a href=\"https://www.nerdery.com/careers\">The Nerdery</a> | Minneapolis, MN; Chicago, IL; Phoenix, AZ; Kansas City, KS | Take-home exercise</li>\n<li><a href=\"https://boards.greenhouse.io/theoutline\">The Outline</a> | New York, NY | Take-home exercise</li>\n</ul>\n<h2>P - R</h2>\n<ul>\n<li><a href=\"https://www.pace.car/jobs\">PACE Telematics</a> | Karlsruhe, Germany | Culture and mindset check, on-site meet and great, small code challenge to see development style and strategy</li>\n<li><a href=\"https://www.paessler.com/company/career/jobs\">Paessler AG</a> | Nuremberg, Germany | Pairing with different engineers on a real problem</li>\n<li><a href=\"https://pagar.me/\">Pagar.me</a> | São Paulo, BR | Skype interview, on-site pairing task and-or real world problem solving process / presentation</li>\n<li><a href=\"https://pager.com/\">Pager</a> | New York, NY; Remote | Short phone interview, conversational interviews, take-home exercise &#x26; discussion</li>\n<li><a href=\"https://pagerduty.com/careers\">PagerDuty</a> | San Francisco, CA / Toronto, Canada / Atlanta, GA | Zoom / on-site pair programming and tasks</li>\n<li><a href=\"https://tech.palatinategroup.com/\">Palatinate Tech</a> | London, UK | Hangout/Skype/phone followed by (normally) on-site pairing task</li>\n<li><a href=\"http://parabol.co/\">Parabol</a> | New York, NY; Los Angeles, CA; Remote | Culture check followed by compensated, <a href=\"https://github.com/ParabolInc/action/projects\">open-source contribution</a> skills evaluation</li>\n<li><a href=\"http://parivedasolutions.com/\">Pariveda Solutions</a> | Dallas, TX / Houston, TX / Atlana, GA / Washington, DC / New York, NY / Chicago, IL / San Francisco, CA / Seattle, WA / Los Angeles, CA | Personality assessment (Predictive Index) and case study. Programming aptitude test (language independent) for college hires.</li>\n<li><a href=\"https://passfort.com/about#jobs\">PassFort</a> | London, UK | Skype interview, and on-site pairing task</li>\n<li><a href=\"https://paws.com/careers\">Paws</a> | London, UK | Phone screening, take-home project, on-site pairing/discussion on your solution and meet the team.</li>\n<li><a href=\"https://paybase.io/\">Paybase</a> | London, UK | Phone screening, Take home project, On-site interview for technical and culture fit, Open Q&#x26;A session with team</li>\n<li><a href=\"https://www.paybyphone.com/careers\">PayByPhone</a> | Vancouver, Canada | Remote programming interview, on-site \"meet the team\"</li>\n<li><a href=\"https://peaksware.com/\">Peaksware Companies (TrainingPeaks, TrainHeroic, MakeMusic)</a> | Boulder, CO; Denver, CO | Phone screen, take home project, remote and on-site interviews for technical and cultural fit</li>\n<li><a href=\"https://info.peerstreet.com/careers\">PeerStreet</a> | Los Angeles, CA | Phone, take home project &#x26; on-site to meet the team</li>\n<li><a href=\"https://angel.co/pento/jobs\">Pento</a> | Remote | Quick personal interview, take home project</li>\n<li><a href=\"https://www.persgroep.nl/werken-bij-it\">Persgroep, de</a> | Amsterdam, Netherlands | Tech interview (technical background and experiences) and culture fit, both on-site</li>\n<li><a href=\"https://angel.co/pexeso/jobs\">Pex</a> | Los Angeles, CA; Remote | 3 sessions: brief phone conversation (30 min); take home assignment (2 hours); on-site or video discussion without any coding (2 hours)</li>\n<li><a href=\"https://www.phoodster.com/\">Phoodster</a> | Stockholm, Sweden | Take-home exercise + on-site discussion</li>\n<li><a href=\"http://pillartechnology.com/careers\">Pillar Technology</a> | Ann Arbor, MI; Columbus, OH; Des Moines, IA | Phone, take home exercise, in-person pairing session and site visit.</li>\n<li><a href=\"https://pilot.co/become-a-partner\">Pilot</a> | Remote | Two calls. Introduction one (30m) + verification of communication skills and remote work experience (15m)</li>\n<li><a href=\"https://pivotal.io/careers\">Pivotal</a> | San Francisco, CA; Los Angeles, CA; New York, NY; Boston, MA; Denver, CO; Atlanta, GA; Chicago, IL; Seattle, WA; Washington, D.C.; London, UK; Sydney, Australia; Toronto, Canada; Paris, France; Berlin, Germany; Tokyo, Japan | Initial remote technical screen featuring pair programming; on-site pair programming interview, generally a full day pairing on production code using test-driven development.</li>\n<li><a href=\"https://platform.sh/\">Platform.sh</a> | Paris, International | Remote Interview, Wide-Ranging discussions on many diverse subjects. Remote interviews with team members.</li>\n<li><a href=\"https://platform45.com/\">Platform45</a> | Johannesburg, South Africa; Cape Town, South Africa | On-site interview, take-home project and culture fit day</li>\n<li><a href=\"https://getcatalyst.in/careers\">Playlyfe</a> | Bangalore, India | Short personal interview, on-site demonstration of programming in browser devtools followed by discussion about the problem</li>\n<li><a href=\"https://www.pluralsight.com/careers\">Pluralsight</a> | Salt Lake City, UT; San Francisco, CA; Boston, MA; Orlando, FL | Takehome exercise &#x26; pair programming session</li>\n<li><a href=\"http://pointman.bamboohr.com/jobs/\">Pointman</a> | Buffalo, NY | Takehome exercise + on-site discussion</li>\n<li><a href=\"http://jobs.poki.com/\">Poki</a> | Amsterdam, The Netherlands | Pair programming on-site w/ two engineers where we focus on teamwork, googling relevant documentation and fixing things together.</li>\n<li><a href=\"http://polar.me/company/careers\">Polar</a> | Toronto, Canada | Phone interview, followed by 1-2 onsite pair-programming interviews based on their platform</li>\n<li><a href=\"http://www.popstand.com/\">Popstand</a> | Los Angeles, CA | Build MVPs for startups</li>\n<li><a href=\"http://www.popularpays.com/\">Popular Pays</a> | Chicago, IL | Phone chat/coffee to determine what will be worked on during a day of pair-programming on a real problem that the candidate thinks best demonstrates their skills.</li>\n<li><a href=\"https://pragma.team/talent\">Pragmateam</a> | Sydney, Australia | Engineering Consultancy And Delivery - Takehome exercise &#x26; discussion</li>\n<li><a href=\"https://www.premiumbeat.com/careers\">PremiumBeat</a> | Montreal, Canada | Discussion and general, high level questions</li>\n<li><a href=\"https://www.primary.com/jobs\">Primary</a> | New York, NY / Remote | Phone chat, take home exercise, pair program and discuss onsite.</li>\n<li><a href=\"https://www.promptworks.com/jobs\">PromptWorks</a> | Philadelphia, PA | Take-home project, pair programming, discussion on-site</li>\n<li><a href=\"https://pusher.com/jobs\">Pusher</a> | London, UK | Solve a real-world problem through a design session with our engineers</li>\n<li><a href=\"http://pygmalios.com/en\">Pygmalios</a> | Bratislava, Slovakia | Take-home project related to business and discussion with our engineers.</li>\n<li><a href=\"https://quietlightcom.com/positions-web.php\">Quiet Light Communications</a> | Rockford, IL, USA | Discussion, work samples and/or small freelance project</li>\n<li><a href=\"http://www.workatquintype.com/\">Quintype</a> | Bengaluru, India / San Mateo, USA | Take home project, pair programming, discussion on-site</li>\n<li><a href=\"https://quizizz.com/\">Quizizz</a> | Bengaluru, India | Phone chat, real world assignment, discussion w/ developers, pair programming, discussion on-site</li>\n<li><a href=\"https://ragnarson.com/\">Ragnarson</a> | Lodz, Poland; Remote | Take-home exercise &#x26; pair programming session</li>\n<li><a href=\"https://www.railslove.com/\">Railslove</a> | Cologne, Germany | Have a coffee in our office, casual chat with us, pair programming on a real project</li>\n<li><a href=\"https://www.raisingit.com/\">Raising IT</a> | London, UK | Coffee with a team member, on-site pair programming and discussion</li>\n<li><a href=\"https://jobs.rakuten.careers/careersection/rakuten_ext_cs/jobdetail.ftl?job=00000751&#x26;tz=GMT%2B09%3A00\">Rakuten</a> | Tokyo, Japan | Discuss about relevant experience</li>\n<li><a href=\"http://www.rapyuta-robotics.com/pages/jobs.html\">Rapyuta Robotics</a> | Bengaluru, India / Tokyo, Japan / Zurich, Switzerland | Take-home assignment related to our ongoing projects, series of technical / experience based interviews, candidate presentation</li>\n<li><a href=\"https://rayfeed.com/\">Rayfeed</a> | Vancouver, Warsaw | Video-call interview followed by a take-home exercise</li>\n<li><a href=\"https://razorpay.com/jobs\">Razorpay</a> | Bangalore, India | Phone screen, On-site pair programming, and ocassionally a take home project.</li>\n<li><a href=\"https://reactiveops.com/careers\">ReactiveOps</a> | Remote | Start with a brief talk with CTO or VP of Engineering, take home coding challenge, then remote interviews with several people on the engineering team</li>\n<li><a href=\"https://reaktor.com/careers\">Reaktor</a> | New York, NY; Amsterdam, Netherlands; Helsinki, Finland; Tokyo, Japan | Discussion, work samples from previous projects (work or hobby), take-home exercise if needed for further info</li>\n<li><a href=\"https://realhq.com/jobs\">Real HQ</a> | Austin, TX / Chicago, IL / Remote | Phone/video interviews, a take-home coding exercise, and a remote pair programming session.</li>\n<li><a href=\"https://realync.com/careers\">Realync</a> | Chicago, IL / Carmel, IN / Remote | Quick phone interview, then a take home project and finally in person interview (open discussions instead of quizzes - anything technical are real-world problems).</li>\n<li><a href=\"https://red-badger.com/about-us/join-us\">Red Badger</a> | London, UK | Phone &#x26; Skype interview, take home exercise, On-site interview</li>\n<li><a href=\"https://www.redcarpetup.com/jobs\">RedCarpet</a> | New Delhi, India | Interview, work sample/take-home project and discussion/code reviews</li>\n<li><a href=\"https://www.reflektive.com/careers/\">Reflektive</a> | San Francisco, CA; Bengaluru, India | A short take home project/assignment, followed by a couple of technical and non-technical discussions online and offline.</li>\n<li><a href=\"https://relabe.com/\">Relabe</a> | San Juan, PR | First we screen for cultural fit then check for technical proficiency. 2-3 Interviews max in SJ</li>\n<li><a href=\"https://www.rentify.com/jobs\">Rentify</a> | London, UK | Phone call, take home real-world project, on-site pair programming, product discussion</li>\n<li><a href=\"https://www.rentomojo.com/about/careers\">RentoMojo</a> | Bangalore, India | Short takehome project + phone interview</li>\n<li><a href=\"https://resin.io/\">Resin.io</a> | Remote | Take home real-world project and a couple of technical and non-technical discussions</li>\n<li><a href=\"https://www.respark.co.uk/\">ReSpark</a> | London, UK | Phone conversation followed by on-site interview w/ task relevant to daily role.</li>\n<li><a href=\"https://www.restaurantops.co/\">RestaurantOps</a> | Scottsdale, AZ | Take Home Project &#x26; pair programming session</li>\n<li><a href=\"https://revlv.net/\">Revlv</a> | Manila, Philippines | Discussion about developer skills, previous projects and experiences.</li>\n<li><a href=\"https://www.rexsoftware.com/careers\">Rex Software</a> | Brisbane, Australia | Take home project, feedback + interview</li>\n<li><a href=\"https://rizk.com/\">Rizk.com</a> | Ta' Xbiex, Malta | Take-home assignment, discussion w/ developers</li>\n<li><a href=\"http://www.rockode.com/\">Rockode</a> | Bangalore, India | Real world assignment, group hack session, discussions</li>\n<li><a href=\"http://rosedigital.co/\">Rose Digital</a> | New York, NY | Phone conversation followed by pair coding components that mirror day to day work, in person discussion about code, take home project if needed for more info</li>\n<li><a href=\"https://rubygarage.org/\">RubyGarage</a> | Dnipro, UA | Take-home project, code review and discussion on-site</li>\n<li><a href=\"https://www.runtastic.com/\">Runtastic</a> | Linz, Austria; Vienna, Austria | Video call with recruiting staff, take home project, video call for code review, discussion, questions</li>\n</ul>\n<h2>S - U</h2>\n<ul>\n<li><a href=\"https://www.sahajsoft.com/\">Sahaj Software Solutions</a> | Bangalore, India; Chennai, India; San Jose, CA | Take home code + Pairing + Discussion</li>\n<li><a href=\"http://www.salesforce.org/\">Salesforce.org Tech &#x26; Products</a> | Remote | Phone screen, hands-on programming test solving real-world problems, Google Hangouts video sessions with engineers</li>\n<li><a href=\"https://salesloft.com/\">Salesloft</a> | Atlanta, GA | Phone interview, take-home project, cultural-fit interview, technical interview where candidate modifies take-home project</li>\n<li><a href=\"https://www.samsara.com/jobs\">Samsara</a> | San Francisco, CA; Atlanta, GA; London, UK | Phone interview, onsite interview (technical challenges based on real problems we've faced at Samsara)</li>\n<li><a href=\"https://sc5.io/careers\">SC5 Online</a> | Helsinki, Finland; Jyväskylä, Finland | Take-home assignment (intentionally short, takes at most an hour to complete), discussion and review assignments</li>\n<li><a href=\"https://segment.com/\">Segment</a> | San Francisco, CA; Vancouver, Canada | Phone interview, take-home assignment (small fun project), onsite interview (technical + core/culture) -> intended to set you up for success</li>\n<li><a href=\"https://sensortower.com/jobs\">Sensor Tower</a> | San Francisco, CA | Phone call, on-site interview including discussion about projects/skills and a short real-world programming challenge</li>\n<li><a href=\"https://sensu.io/\">Sensu</a> | Remote | Video call, choice of pairing session or take home programming assignment</li>\n<li><a href=\"http://sentisis.com/trabaja-con-nosotros\">Séntisis</a> | Madrid, Spain; Mexico City, Mexico; Bogotá, Colombia; Santiago de Chile, Chile; Remote | Phone call, on-site/remote interview including discussion about projects/skills and a short real-world pair-programming exercise</li>\n<li><a href=\"https://serpapi.com/\">SerpApi</a> | Austin, TX / Remote | Skype core value and culture interview, review of contributions on GitHub or other platforms, and take-home project if online contributions are not enough.</li>\n<li><a href=\"https://sertiscorp.com/\">Sertis</a> | Bangkok, Thailand | Technical &#x26; culture fit interview, take-home project, follow-up discussion</li>\n<li><a href=\"https://setapp.pl/career\">Setapp Sp. z o.o.</a> | Poznan, Poland | Online/face-to-face discussion with developers about everyday programming dilemmas &#x26; reviewing your own code</li>\n<li><a href=\"https://www.sharoo.com/jobs/\">Sharoo</a> | Zurich, Switzerland; Remote | Soft skills interview, take home project, technical interview based on take home project.</li>\n<li><a href=\"https://getshogun.com/\">Shogun</a> | Remote | Discussion about software development and past experience, code samples, paid trial period.</li>\n<li><a href=\"https://blog.showmax.com/engineering-careers\">Showmax</a> | Beroun, Czechia; Prague, Czechia; Remote | Take home project, then a pair-programming and discussion onsite / Hangouts round.</li>\n<li><a href=\"https://shuttlecloud.com/jobs\">ShuttleCloud</a> | Chicago, IL / Madrid, Spain | Take-home project, then on-site code walk through and a real world problem discussion.</li>\n<li><a href=\"https://www.signal-ai.com/about-us/careers\">Signal AI</a> | London, UK | Phone screen; take home code exercise; on-site code extension with pair programming and discussion</li>\n<li><a href=\"https://www.simple.com/\">Simple</a> | Portland, OR | Discussion about software development and architecture skills and experience.</li>\n<li><a href=\"https://www.simpli.fi/about-us/careers\">Simpli.fi</a> | Fort Worth, TX, USA | Takehome code challenge and review</li>\n<li><a href=\"http://www.welcometothejungle.co/companies/simplifield/jobs\">SimpliField</a> | Lille, France | Interview with the CTO and the developer team</li>\n<li><a href=\"https://www.simplybusiness.co.uk/about-us/careers/tech\">Simply Business</a> | London, UK / Remote | Three stage, one day interview with quick feedback. One of the stages is 1.5h pair-programming session, where interviewee is assigned a task and interviewing developer plays role of Product Owner.</li>\n<li><a href=\"https://www.skyrisepro.com/\">Skyrise Pro</a> | Chicago, IL | Take-home coding project, on-site interview including coding enhancements to the take-home project, offsite group activity</li>\n<li><a href=\"https://slack.com/jobs\">Slack</a> | San Francisco, CA | Call with recruiter, 1 week take-home project, call with hiring manager, on-site interview covering high-level system design, best software development practices and culture-fit</li>\n<li><a href=\"https://www.small-improvements.com/careers\">Small Improvements</a> | Berlin, Germany</li>\n<li><a href=\"http://www.socialtables.com/\">Social Tables</a> | Washington, DC | Chat about skills and past experiences + bring in a code sample from previous work or side project to discuss</li>\n<li><a href=\"http://www.socialcops.com/\">SocialCops</a> | New Delhi, India | A mini project (to be done within 8 days), followed by a discussion with the team you're applying to. Then as the final step, a call with one of the founders.</li>\n<li><a href=\"http://nl.softwear.nl/vacatures\">Softwear</a> | Amsterdam, Netherlands | Writing software for the fashion industry – remotely – in an international team.</li>\n<li><a href=\"http://sogilis.com/\">Sogilis</a> | Grenoble, France | Discussion about interests, practices, and motivation. Presentation/code review/pair programming on a personal or professional project.</li>\n<li><a href=\"https://about.sourcegraph.com/jobs\">Sourcegraph</a> | San Francisco, CA &#x26; Remote | Tailored to the candidate, often consists of take-home work, discussion of real-world eng challenges, and product familiarity.</li>\n<li><a href=\"https://jobs.splice.com/\">Splice</a> | New York, NY; Remote | Call with recruiter, 4 hr take-home project, video interview w two engs on take-home exercise, video call with hiring manager, video call w VPE &#x26; principal eng to talk about architecture.</li>\n<li><a href=\"https://www.spreedly.com/jobs\">Spreedly</a> | Durham, NC | Take-home project <a href=\"https://engineering.spreedly.com/blog/programming-puzzles-are-not-the-answer-how-spreedly-does-work-samples.html\">related to business</a></li>\n<li><a href=\"https://www.natureasia.com/\">Springer Nature (Asia)</a> | Tokyo, Japan | Discussion &#x26; Pair programming session</li>\n<li><a href=\"https://sndigital.springernature.com/\">Springer Nature Digital</a> | Berlin, Germany; London, UK | Phone chat; take-home project; then a pairing session based on the project, a technical chat, and a chat with non-technical team members</li>\n<li><a href=\"https://www.spronq.nl/\">SpronQ</a> | Amsterdam, Netherlands | Takehome coding challenge</li>\n<li><a href=\"https://squareup.com/careers\">Square</a> | San Francisco, CA | Pair programming in a work environment</li>\n<li><a href=\"http://srijan.net/\">Srijan Technologies</a> | Delhi, India | General high level questions/discussion followed by Pair programming OR take-home coding challenge</li>\n<li><a href=\"http://stardog.com/\">Stardog Union</a> | Washington, DC; Remote | Technical discussion and general interest conversations</li>\n<li><a href=\"http://statflo.com/\">Statflo</a> | Toronto, Canada | Phone screening, take home project, on-site interview discussing the take home project, high-level architectural brainstorm, and questions about career and team work.</li>\n<li><a href=\"https://www.store2be.com/de/jobs/tech\">store2be</a> | Berlin, Germany | Skype/on-site interview, take-home project</li>\n<li><a href=\"https://www.stormx.io/about#jobs\">Storm</a> | Seattle, WA; Remote | Phone/skype screen --> Take-home coding assignment --> on-site/skype interview loop to discuss assignment; meet-and-greet with other teams --> +1/-1 based on team consensus</li>\n<li><a href=\"http://www.stylabs.in/\">STYLABS</a> | Mumbai, India | Phone Screen, Take-home project and discussion on-site</li>\n<li><a href=\"https://verticalchange.com/job_posts\">Subvertical (VerticalChange)</a> | Remote | Phone screening, live pair programming &#x26; personal project code review</li>\n<li><a href=\"https://sulvo.com/careers\">Sulvo</a> | New York, NY / Remote | Interview over video call for cultural fit first, if you pass we proceed with technical interview that doesn't include coding games or challenges</li>\n<li><a href=\"https://superplayer.fm/\">Superplayer</a> | Porto Alegre, Brazil | Skype/On-site interview, take-home project and interview with CTO and CEO</li>\n<li><a href=\"https://surveysparrow.com/careers\">SurveySparrow</a> | Kochi, India | Skype interview, take home project and code review, interview with CTO and CEO</li>\n<li><a href=\"http://svti.svt.se/\">SVTi (Sveriges Television)</a> | Stockholm, Sweden | On-site interview, take-home project, follow up interview where you walk through how you chose to solve the task.</li>\n<li><a href=\"https://sweetiq.com/about/careers\">SweetIQ</a> | Montreal, Canada | Discussion and general, high level questions</li>\n<li><a href=\"https://www.symphonycommerce.com/careers\">Symphony Commerce</a> | San Francisco, CA / Remote | Take-home project (phone), design discussion, review and critique <em>our</em> code, debugging questions</li>\n<li><a href=\"https://www.symplicity.com/about/join-us\">Symplicity</a> | Arlington, VA | Take-home project and code review in-person</li>\n<li><a href=\"http://sysgarage.com/\">SysGarage</a> | Buenos Aires, Argentina | Take-home project and real world pair programming</li>\n<li><a href=\"https://corp.tablecheck.com/en/jobs\">TableCheck</a> | Tokyo, Japan | Show us your code! Brief Skype interview and take-home project or pairing for those without code.</li>\n<li><a href=\"https://tailorbrands.com/jobs\">Tailor Brands</a> | Tel Aviv-Yafo, Israel | Discuss knowledge and interests, explore previous work experience, during the technical interview we discuss real-life problems.</li>\n<li><a href=\"https://tails.com/careers\">tails.com</a> | Richmond (London), UK | Live pair programming or take home project with review</li>\n<li><a href=\"http://tanookilabs.com/\">Tanooki Labs</a> | New York, NY | Paid half-day take home project with followup review and discussion</li>\n<li><a href=\"https://www.tattoodo.com/\">Tattoodo</a> | Copenhagen, Denmark | Takehome exercise</li>\n<li><a href=\"https://labs.telus.com/\">Telus Digital</a> | Toronto, Canada; Vancouver, Canada | Discuss knowledge and interest, explore previous work, pair with developers when possible, alternatively take home project.</li>\n<li><a href=\"https://tenthousandcoffees.com/\">Ten Thousand Coffees</a> | Toronto, Canada | Take home project, then explain how you solved the project</li>\n<li><a href=\"https://engineering.tes.com/recruitment/\">Tes</a> | Remote; London, UK | Remote pair programming session on React/Node kata with small takehome exercise as prep. Remote interview with senior engineers about previous experience, technical knowledge and interests.</li>\n<li><a href=\"https://www.tesco.com/\">Tesco PLC</a> | London, United Kingdom | Pair programming and casual hypothetical system design discussion</li>\n<li><a href=\"https://testdouble.com/join/developer\">Test Double</a> | Remote | Initial conversation, Consulting interview, Technical interview, Pair programming, Takehome exercise.</li>\n<li><a href=\"https://textio.com/careers/?utm_source=github&#x26;utm_medium=forum&#x26;utm_campaign=textio-careers-engineering&#x26;utm_content=poteto-hiring-without-whiteboards\">Textio</a> | Seattle, WA | Initial screen to discuss experience and interest in a role at Textio; then a take-home programming task is discussed during a 1-hour tech screen (on-site or remote); finally a larger take-home project, simulating real work, is discussed during an on-site presentation plus 1-1s; <a href=\"https://textio.ai/how-we-hire-a74cdbadd1e8\">How we hire</a></li>\n<li><a href=\"https://thebookofeveryone.workable.com/\">The Book of Everyone</a> | Barcelona, Spain | Quick interview, meet the team, pairing with developers on your own project</li>\n<li><a href=\"http://mobile.thescore.com/careers\">theScore</a> | Toronto, Canada | Coding challenge &#x26; systems design challenge</li>\n<li><a href=\"https://www.thinkmill.com.au/\">Thinkmill</a> | Sydney, Australia | Initial meet and greet interview with Thinkmillers from the relevant team, take home assignment followed by tech review on a followup interview.</li>\n<li><a href=\"http://www.thinslices.com/\">Thinslices</a> | Iasi, Romania | Takehome exercise &#x26; in person pair programming on a simple Kata.</li>\n<li><a href=\"https://thoughtbot.com/jobs\">thoughtbot</a> | San Francisco, CA; London, UK | <a href=\"https://thoughtbot.com/playbook/our-company/hiring#interviewing\">Our interview process</a></li>\n<li><a href=\"https://www.thoughtworks.com/careers\">ThoughtWorks</a> | San Francisco, CA | Interviews with ThoughtWorkers of diverse backgrounds and roles; take home assignment followed by in person pairing session.</li>\n<li><a href=\"https://www.thread.com/jobs\">Thread</a> | London, UK | Take home test, real world architecture design, real world pair programming.</li>\n<li><a href=\"https://www.threatspike.com/\">ThreatSpike Labs</a> | London, UK | Take home computing and security related challenges to be completed over a week.</li>\n<li><a href=\"http://www.tilde.io/\">Tilde</a> | Portland, OR | Pair programming sessions with each member of the team, working on problems similar to daily work.</li>\n<li><a href=\"https://www.timbuktutravel.com/\">Timbuktu</a> | Cape Town, South Africa | On site interview and pair programming exercise</li>\n<li><a href=\"https://titanium.codes/\">Titanium</a> | Moldova, Chisinau | High level review of public activity on GitHub/BitBucket/Gitlab (if applicable) and screening via phone, On-site technical &#x26; Team fit interview, Formal \"Meet the Team\" meeting</li>\n<li><a href=\"https://toggl.com/jobs\">Toggl</a> | Remote / Tallinn, Estonia | Online test on basic programming skills, followed by interview (typically includes get-to-know questions and technical skill testing). Depending on the team, there may be a take-home or live coding assignment. <strong>Paid test week</strong> to work with the team on actual bugs/features.</li>\n<li><a href=\"https://jobs.jointorii.co/\">Torii</a> | Raanana, Israel | Take-home fun full-stack-app exercise followed by an on-site review</li>\n<li><a href=\"http://toucantoco.com/fr/team#jobs\">Toucan Toco</a> | Paris, France | Pair-programming and TDD</li>\n<li><a href=\"https://gotouche.com/\">Touché</a> | Singapore, Singapore; Barcelona, Spain | Skype / Phone / on-site interview, take-home project, technical interview to discuss the project, team interview.</li>\n<li><a href=\"https://trademark.vision/\">TrademarkVision</a> | Brisbane, Australia | On site interview and quick take-home excercise</li>\n<li><a href=\"http://trainheroic.com/careers/\">TrainHeroic</a> | Boulder, CO; Denver, CO | Phone screen, take home project, remote and on-site interviews for technical and cultural fit</li>\n<li><a href=\"http://www.trainingpeaks.com/careers.html\">TrainingPeaks</a> | Boulder, CO; Denver, CO | Phone screen, take home project, remote and on-site interviews for technical and cultural fit</li>\n<li><a href=\"http://www.tripstack.com/company/careers/\">TripStack</a> | Toronto, Canada | Take-home assignment, followed up by a face to face code walk through</li>\n<li><a href=\"https://www.trivago.com/\">Trivago</a> | Düsseldorf, Germany | Case Study, Skype Interview, On site Interview with some code review exercises</li>\n<li><a href=\"https://boards.greenhouse.io/trov\">Trōv</a> | Remote | Take-home project with followup interview from actual prospective teammates</li>\n<li><a href=\"https://truefit.io/about/\">Truefit</a> | Pittsburgh, PA | Phone screen, Take-home project, In-person interview with the team that you would join</li>\n<li><a href=\"https://truora.com/\">Truora</a> | Bogotá, Colombia; Cali, Colombia; Remote | Take-home project, followed by phone interview with tech leads to discuss the project.</li>\n<li><a href=\"https://truss.works/jobs\">Truss</a> | San Francisco, CA; Remote | Phone screen/ Take-home project that resembles a problem Truss has seen many times before / Followup interview about the project / Closing Interview, all interviews done remotely</li>\n<li><a href=\"https://www.twistlock.com/\">Twistlock</a> | Tel Aviv, Israel | Takehome</li>\n<li><a href=\"https://uberall.com/en/careers\">uberall</a> | Berlin, Germany | 30-min coding on-site, then a trial day</li>\n<li><a href=\"https://ubiome.com/careers\">uBiome</a> | San Francisco, CA / Santiago, Chile | High level screening over the phone or on-site, take home project, code review and discussion</li>\n<li><a href=\"http://ubots.com.br/\">Ubots</a> | Porto Alegre, Brazil | Skype/On-site interview, take-home project, technical interview</li>\n<li><a href=\"https://unbounce.com/\">Unbounce</a> | Vancouver, BC | Phone screen, take-home project, project discussion, technical interview</li>\n<li><a href=\"https://unboxed.co/\">Unboxed</a> | London, UK | Take home feature requests, pairing with developers to extend solution, team-fit interviews, chat with a director</li>\n<li><a href=\"http://www.unearthlabs.com/careers\">Unearth</a> | Seattle, WA | Take home project, team-fit interviews, technical discussion</li>\n<li><a href=\"https://unito.io/careers/\">Unito</a> | Montreal, Canada | Team-fit interviews, technical discussion, take home project</li>\n<li><a href=\"https://www.untappd.com/\">Untappd</a> | Wilmington, NC; New York, NY; Los Angeles, CA | Review portfolio - What projects have you worked on? + personality assessment, + interview</li>\n<li><a href=\"http://www.updater.com/jobs/openings\">Updater</a> | New York, NY | Begin-at-home assignment highly relevant to role, presented and discussed during on-site.</li>\n<li><a href=\"http://uprise.se/\">Uprise</a> | Uppsala, Sweden | Take-home assignment, code review and discussion on-site</li>\n<li><a href=\"https://www.urbanmassage.com/jobs\">Urban Massage</a> | London, UK | Project done at home, in-person walk through. Meeting the team is an integral part.</li>\n<li><a href=\"https://www.usertesting.com/about-us/jobs\">UserTesting</a> | Atlanta, GA; San Francisco, CA; Mountain View, CA | Initial interview, pair programming, and offer</li>\n<li><a href=\"https://www.uswitch.com/vacancies\">uSwitch</a> | London, UK | Take-home project related to our business area, followed by pairing with developers to extend it</li>\n</ul>\n<h2>V - X</h2>\n<ul>\n<li><a href=\"http://www.valassis.com/digital-advertising\">Valassis Digital</a> | Seattle, WA; San Francisco, CA; Lansing, MI; Hamburg, Germany | Phone screen, on-site interview with group, paired whiteboard problem solving and discussion, take-home project and follow-up review</li>\n<li><a href=\"https://valuemotive.com/en/career\">Valuemotive</a> | Helsinki, Finland | Code examples from previous projects (work or hobby) or take-home exercise</li>\n<li><a href=\"https://www.varsitytutors.com/\">Varsity Tutors</a> | Remote | Take home assignment, presentation of assignment, live code review with team. Advanced / high-level chat with team based on skillset and role.</li>\n<li><a href=\"http://vayu.com.au/\">Vayu Technology</a> | Sydney, Australia; Kathmandu, Nepal | Short interview, general programming questions and short take home challenge.</li>\n<li><a href=\"https://www.venminder.com/\">Venminder, Inc.</a> | Elizabethtown, KY; Louisville, KY | Initial phone screen to explain position. If candidate interested they get a take home assignment followed by a non-scripted in-person interview with team members to judge personality fit.</li>\n<li><a href=\"https://verve.co/careers\">Verve</a> | London, UK | An intentionally short, take home exercise that mirrors real project work and incorporates code review elements</li>\n<li><a href=\"https://careers.vingle.net/\">Vingle</a> | Seoul, Korea | Written interview, takehome project, in-person, conversational code review and interviews with engineers and engineering managers</li>\n<li><a href=\"http://virtual7.de/de/karriere\">virtual7</a> | Kalrsruhe, Germany | Phone interview and on-site interview based on personal experience.</li>\n<li><a href=\"https://www.e-conomic.dk/om/job\">Visma e-conomic</a> | Copenhagen, Denmark | Take home assignment, assignment presentation and discussion</li>\n<li><a href=\"https://voltra.co/\">Voltra Co.</a> | Amsterdam, Netherlands / New York, NY / Remote | Show us your github account, tell us what you know. Let's pair on an OSS PR!</li>\n<li><a href=\"https://https//vsx.net/jobs\">VSX</a> | Dresden, Germany | On-site interview, home coding challenge, presentation/discussion of proposed solutions</li>\n<li><a href=\"http://lab.vtex.com/careers\">VTEX</a> | Rio de Janeiro, Brazil | Take-home project, Skype interview and then in-person talk.</li>\n<li><a href=\"https://buildingvts.com/\">VTS</a> | New York City, New York | Technical Phone Screen, Pair programming on-site &#x26; in-person talks with multiple engineers</li>\n<li><a href=\"https://waymark.com/jobs\">Waymark</a> | Detroit, MI | Technical phone screen, take-home project, going over the project in person, follow up day in the office</li>\n<li><a href=\"https://www.wealthsimple.com/work-with-us\">Wealthsimple</a> | Toronto, Canada | Pair programming on a problem similar to daily work, discussion of system design</li>\n<li><a href=\"http://www.wearehive.co.uk/\">WeAreHive</a> | London, UK | Just walk us through your best code or we give you a small real-world exercise to do at home.</li>\n<li><a href=\"https://webantic.co.uk/careers\">Webantic</a> | Manchester, UK | Basic TNA self-assessment and real-world problem-solving</li>\n<li><a href=\"https://webflow.com/\">Webflow</a> | San Francisco, CA &#x26; Remote | Short take-home challenge, followed by a paid 3-5 day freelance contract project</li>\n<li><a href=\"http://careers.weebly.com/\">Weebly</a> | San Francisco, CA; Scottsdale, AZ; New York, NY | Phone screens (30 min to 1 hour) by a recruiter, an engineering manager (focused on your past experiences), an engineer (focused on system / db / api design). Followed by a paid 3 day onsite where you work on a project and then present it to a team of engineers.</li>\n<li><a href=\"https://weedmaps.com/careers\">Weedmaps</a> | Irvine, CA; Denver, CO; Tucson, AZ; Madrid, Spain; Remote | Phone screen, Group interview, and possible code review</li>\n<li><a href=\"https://wemake.services/\">wemake.services</a> | Remote | Short unpaid take-home challenge, code review, portfolio discussion</li>\n<li><a href=\"https://www.weployapp.com/join-our-team/\">Weploy</a> | Melbourne, Australia; Sydney, Australia | Phase 1: Face to face interview to get to know the candidate. Phase 2: Problem solving session that involves designing a solution to a real-world problem followed by 1/2 day of pairing with a senior dev on implementing the proposed solution.</li>\n<li><a href=\"https://wetransfer.homerun.co/\">WeTransfer</a> | Amsterdam, Netherlands | Culture fit and fundamentals chat, skills interview - no whiteboarding! - and take-home project, communication and collaboration interview, meet with the VP of Engineering</li>\n<li><a href=\"https://wheely.com/en/careers\">Wheely</a> | Moscow, Russia | Get to know each other in under 30 minutes on-site or via Skype, take-home challenge, on-site review and interview with the team.</li>\n<li><a href=\"https://wildbit.com/\">Wildbit</a> | Philadelphia, PA &#x26; Remote | Take-home project followed by interviews.</li>\n<li><a href=\"https://wirecardbrasil.workable.com/\">Wirecard Brasil</a> | São Paulo, Brazil | Phone or on-site Cultural Fit interview, take-home coding challenge, code review and discussing in-person.</li>\n<li><a href=\"https://worldgaming.com/\">WorldGaming</a> | Toronto, Canada | Technical Interview, Solution Design, Take Home Assignment, then Culture fit interview with the team</li>\n<li><a href=\"https://woumedia.com/\">woumedia</a> | Remote | Getting to know each other and aligning expectations. Talking about past experiences, projects you are proud of and latest challenges you faced. It’s followed by a use case study from one of our current projects.</li>\n<li><a href=\"https://wyeworks.com/\">WyeWorks</a> | Montevideo, Uruguay | Take-home project and discussion on-site</li>\n<li><a href=\"http://x-team.com/\">X-Team</a> | Remote | A short, fun Node.js challenge, followed by a series of culture-based interview questions, followed by a creative mock project with tons of freedom on how to approach, and follow-up questions about the approach they chose to discuss the tradeoffs. Usually a 10-30 day paid training is rewarded to top candidates to prep them for remote communication skills needed to join a team.</li>\n<li><a href=\"https://www.xing.com/\">XING</a> | Hamburg, Germany | Take-home coding challenge, on-site review and short interviews with future team.</li>\n</ul>\n<h2>Y -</h2>\n<ul>\n<li><a href=\"http://www.1000mercis.com/#!/careers/?lang=en\">1000mercis group</a> | Paris, France | Series of interviews, that go over technical background, past experiences and cultural knowledge</li>\n<li><a href=\"https://18f.gsa.gov/join/\">18F</a> | Remote; Washington, DC; New York, NY; Chicago, IL; San Francisco, CA | take-home coding exercise (2-4 hours), technical and values-match interviews over video chat</li>\n<li><a href=\"https://3dhubs.com/jobs\">3D Hubs</a> | Amsterdam, The Netherlands | Take-home code challenge from our product's domain followed by discussion remote/on-site, sometimes do an additional on-site pair programming session.</li>\n<li><a href=\"http://500friends.com/who-we-are/careers\">500friends</a> | San Francisco, CA; Remote | Take home challenge followed by onsite expansion of the submission and high level discussions (design exercise or overview of past projects)</li>\n<li><a href=\"https://500tech.com/\">500Tech</a> | Tel Aviv, Israel | Pair programming on a laptop in working env</li>\n<li><a href=\"https://8thlight.com/\">8th Light</a> | Chicago, IL; London, UK; Los Angeles, CA; New York, NY | Take home code challenge, discussion, pair programming session</li>\n<li><a href=\"https://www.yhat.com/jobs\">Yhat</a> | Brooklyn, NY | Demo something cool you built and walk us thru the code + design decisions</li>\n<li><a href=\"https://yld.breezy.hr/\">YLD</a> | London, UK | Take home-code challenge, pair-programming session and discussion about past experience</li>\n<li><a href=\"https://yodas.com/\">Yodas</a> | Binyamina, Israel | Coding tasks over github repository</li>\n<li><a href=\"http://yoyowallet.com/\">Yoyo Wallet</a> | London, UK | Take home code challenge, discussion of the code challenge, and general, high level questions</li>\n<li><a href=\"http://www.yunojuno.com/\">YunoJuno</a> | London, UK | Code challenge based on a realistic feature request on a real open-source package created and used at YunoJuno; phone/video interview with members of the Product team to explore technical background, experiences, interests, cultural fit; on-site interview, usually with Product Manager and CTO</li>\n<li><a href=\"https://jobs.kenoby.com/grupozap/\">ZAP Group</a> | São Paulo, Brazil | Takehome exercise, series of real-world interviews with engineers, HR, engineering managers and product managers on site.</li>\n<li><a href=\"https://www.zencargo.com/careers\">Zencargo</a> | London, UK | Initial interview with CTO, covering professional experience interests and expectations, followed by one technical interview focused on fundamentals and familiarity with best practices. A further short chat with co-founders to get to know each other - - either onsite or remote.</li>\n<li><a href=\"https://www.zenefits.com/careers\">Zenefits (UI Team)</a> | San Francisco, CA | One technical phone screen focused on JS fundamentals and/or one timeboxed take-home challenge. The onsite is a series of interviews designed to test your understanding of JS, HTML/CSS, design, etc.</li>\n<li><a href=\"https://zerodha.com/careers\">Zerodha</a> | Bengaluru, India | Technical call at the beginning and one take home programming task.</li>\n<li><a href=\"https://boards.greenhouse.io/zype\">Zype</a> | New York, NY &#x26; Remote | Skype/Video call with VP of Product and a take-home challenge.</li>\n</ul>"},{"url":"/docs/python/cheat-sheet/","relativePath":"docs/python/cheat-sheet.md","relativeDir":"docs/python","base":"cheat-sheet.md","name":"cheat-sheet","frontmatter":{"title":"Python Cheat Sheet","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"python cheat sheet","description":"cheat sheet for python developers","robots":[],"extra":[{"name":"og:image","value":"images/py-code.png","keyName":"property","relativeUrl":true},{"name":"twitter:title","value":"python cheat sheet","keyName":"name","relativeUrl":false}]},"template":"docs"},"html":"<h2>Lorem ipsum</h2>\n<h1>Python Cheat Sheet</h1>\n<h2>Python Basics</h2>\n<h3>Math Operators</h3>\n<p>From <strong>Highest</strong> to <strong>Lowest</strong> precedence:</p>\n<table>\n<thead>\n<tr>\n<th>Operators</th>\n<th>Operation</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>**</td>\n<td>Exponent</td>\n<td><code>2 ** 3 = 8</code></td>\n</tr>\n<tr>\n<td>%</td>\n<td>Modulus/Remaider</td>\n<td><code>22 % 8 = 6</code></td>\n</tr>\n<tr>\n<td>//</td>\n<td>Integer division</td>\n<td><code>22 // 8 = 2</code></td>\n</tr>\n<tr>\n<td>/</td>\n<td>Division</td>\n<td><code>22 / 8 = 2.75</code></td>\n</tr>\n<tr>\n<td>*</td>\n<td>Multiplication</td>\n<td><code>3 * 3 = 9</code></td>\n</tr>\n<tr>\n<td>-</td>\n<td>Subtraction</td>\n<td><code>5 - 2 = 3</code></td>\n</tr>\n<tr>\n<td>+</td>\n<td>Addition</td>\n<td><code>2 + 2 = 4</code></td>\n</tr>\n</tbody>\n</table>\n<p>Examples of expressions in the interactive shell:</p>\n<pre><code class=\"language-python\">2 + 3 * 6\n</code></pre>\n<pre><code class=\"language-python\">(2 + 3) * 6\n</code></pre>\n<pre><code class=\"language-python\">2 ** 8\n</code></pre>\n<pre><code class=\"language-python\">23 // 7\n</code></pre>\n<pre><code class=\"language-python\">23 % 7\n</code></pre>\n<pre><code class=\"language-python\">(5 - 1) * ((7 + 1) / (3 - 1))\n</code></pre>\n<h3>Data Types</h3>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Examples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Integers</td>\n<td><code>-2, -1, 0, 1, 2, 3, 4, 5</code></td>\n</tr>\n<tr>\n<td>Floating-point numbers</td>\n<td><code>-1.25, -1.0, --0.5, 0.0, 0.5, 1.0, 1.25</code></td>\n</tr>\n<tr>\n<td>Strings</td>\n<td><code>'a', 'aa', 'aaa', 'Hello!', '11 cats'</code></td>\n</tr>\n</tbody>\n</table>\n<h3>String Concatenation and Replication</h3>\n<p>String concatenation:</p>\n<pre><code class=\"language-python\">'Alice' 'Bob'\n</code></pre>\n<p>Note: Avoid <code>+</code> operator for string concatenation. Prefer string formatting.</p>\n<p>String Replication:</p>\n<pre><code class=\"language-python\">'Alice' * 5\n</code></pre>\n<h3>Variables</h3>\n<p>You can name a variable anything as long as it obeys the following three rules:</p>\n<ol>\n<li>It can be only one word.</li>\n<li>It can use only letters, numbers, and the underscore (<code>_</code>) character.</li>\n<li>It can’t begin with a number.</li>\n<li>Variable name starting with an underscore (<code>_</code>) are considered as \"unuseful`.</li>\n</ol>\n<p>Example:</p>\n<pre><code class=\"language-python\">spam = 'Hello'\n</code></pre>\n<pre><code class=\"language-python\">_spam = 'Hello'\n</code></pre>\n<p><code>_spam</code> should not be used again in the code.</p>\n<h3>Comments</h3>\n<p>Inline comment:</p>\n<pre><code class=\"language-python\"># This is a comment\n</code></pre>\n<p>Multiline comment:</p>\n<pre><code class=\"language-Python\"># This is a\n# multiline comment\n</code></pre>\n<p>Code with a comment:</p>\n<pre><code class=\"language-python\">a = 1  # initialization\n</code></pre>\n<p>Please note the two spaces in front of the comment.</p>\n<p>Function docstring:</p>\n<pre><code class=\"language-python\">def foo():\n    \"\"\"\n    This is a function docstring\n    You can also use:\n    ''' Function Docstring '''\n    \"\"\"\n</code></pre>\n<h3>The print Function</h3>\n<pre><code class=\"language-python\">print('Hello world!')\n</code></pre>\n<pre><code class=\"language-python\">a = 1\nprint('Hello world!', a)\n</code></pre>\n<h3>The input Function</h3>\n<p>Example Code:</p>\n<pre><code class=\"language-python\">print('What is your name?')   # ask for their name\nmyName = input()\nprint('It is good to meet you, {}'.format(myName))\n</code></pre>\n<h3>The len Function</h3>\n<p>Evaluates to the integer value of the number of characters in a string:</p>\n<pre><code class=\"language-python\">len('hello')\n</code></pre>\n<p>Note: test of emptiness of strings, lists, dictionary, etc, should <strong>not</strong> use len, but prefer direct\nboolean evaluation.</p>\n<pre><code class=\"language-python\">a = [1, 2, 3]\nif a:\n    print(\"the list is not empty!\")\n</code></pre>\n<h3>The str, int, and float Functions</h3>\n<p>Integer to String or Float:</p>\n<pre><code class=\"language-python\">str(29)\n</code></pre>\n<pre><code class=\"language-python\">print('I am {} years old.'.format(str(29)))\n</code></pre>\n<pre><code class=\"language-python\">str(-3.14)\n</code></pre>\n<p>Float to Integer:</p>\n<pre><code class=\"language-python\">int(7.7)\n</code></pre>\n<pre><code class=\"language-python\">int(7.7) + 1\n</code></pre>\n<h2>Flow Control</h2>\n<h3>Comparison Operators</h3>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>==</code></td>\n<td>Equal to</td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td>Not equal to</td>\n</tr>\n<tr>\n<td><code>&#x3C;</code></td>\n<td>Less than</td>\n</tr>\n<tr>\n<td><code>></code></td>\n<td>Greater Than</td>\n</tr>\n<tr>\n<td><code>&#x3C;=</code></td>\n<td>Less than or Equal to</td>\n</tr>\n<tr>\n<td><code>>=</code></td>\n<td>Greater than or Equal to</td>\n</tr>\n</tbody>\n</table>\n<p>These operators evaluate to True or False depending on the values you give them.</p>\n<p>Examples:</p>\n<pre><code class=\"language-python\">42 == 42\n</code></pre>\n<pre><code class=\"language-python\">40 == 42\n</code></pre>\n<pre><code class=\"language-python\">'hello' == 'hello'\n</code></pre>\n<pre><code class=\"language-python\">'hello' == 'Hello'\n</code></pre>\n<pre><code class=\"language-python\">'dog' != 'cat'\n</code></pre>\n<pre><code class=\"language-python\">42 == 42.0\n</code></pre>\n<pre><code class=\"language-python\">42 == '42'\n</code></pre>\n<h3>Boolean evaluation</h3>\n<p>Never use <code>==</code> or <code>!=</code> operator to evaluate boolean operation. Use the <code>is</code> or <code>is not</code> operators,\nor use implicit boolean evaluation.</p>\n<p>NO (even if they are valid Python):</p>\n<pre><code class=\"language-python\">True == True\n</code></pre>\n<pre><code class=\"language-python\">True != False\n</code></pre>\n<p>YES (even if they are valid Python):</p>\n<pre><code class=\"language-python\">True is True\n</code></pre>\n<pre><code class=\"language-python\">True is not False\n</code></pre>\n<p>These statements are equivalent:</p>\n<pre><code class=\"language-Python\">if a is True:\n   pass\nif a is not False:\n   pass\nif a:\n   pass\n</code></pre>\n<p>And these as well:</p>\n<pre><code class=\"language-Python\">if a is False:\n   pass\nif a is not True:\n   pass\nif not a:\n   pass\n</code></pre>\n<h3>Boolean Operators</h3>\n<p>There are three Boolean operators: and, or, and not.</p>\n<p>The <em>and</em> Operator’s <em>Truth</em> Table:</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Evaluates to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>True and True</td>\n<td>True</td>\n</tr>\n<tr>\n<td>True and False</td>\n<td>False</td>\n</tr>\n<tr>\n<td>False and True</td>\n<td>False</td>\n</tr>\n<tr>\n<td>False and False</td>\n<td>False</td>\n</tr>\n</tbody>\n</table>\n<p>The <em>or</em> Operator’s <em>Truth</em> Table:</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Evaluates to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>True or True</td>\n<td>True</td>\n</tr>\n<tr>\n<td>True or False</td>\n<td>True</td>\n</tr>\n<tr>\n<td>False or True</td>\n<td>True</td>\n</tr>\n<tr>\n<td>False or False</td>\n<td>False</td>\n</tr>\n</tbody>\n</table>\n<p>The <em>not</em> Operator’s <em>Truth</em> Table:</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Evaluates to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>not True</td>\n<td>False</td>\n</tr>\n<tr>\n<td>not False</td>\n<td>True</td>\n</tr>\n</tbody>\n</table>\n<h3>Mixing Boolean and Comparison Operators</h3>\n<pre><code class=\"language-python\">(4 &#x3C; 5) and (5 &#x3C; 6)\n</code></pre>\n<pre><code class=\"language-python\">(4 &#x3C; 5) and (9 &#x3C; 6)\n</code></pre>\n<pre><code class=\"language-python\">(1 == 2) or (2 == 2)\n</code></pre>\n<p>You can also use multiple Boolean operators in an expression, along with the comparison operators:</p>\n<pre><code class=\"language-python\">2 + 2 == 4 and not 2 + 2 == 5 and 2 * 2 == 2 + 2\n</code></pre>\n<h3>if Statements</h3>\n<pre><code class=\"language-python\">if name == 'Alice':\n    print('Hi, Alice.')\n</code></pre>\n<h3>else Statements</h3>\n<pre><code class=\"language-python\">name = 'Bob'\n\nif name == 'Alice':\n    print('Hi, Alice.')\nelse:\n    print('Hello, stranger.')\n</code></pre>\n<h3>elif Statements</h3>\n<pre><code class=\"language-python\">name = 'Bob'\nage = 5\n\nif name == 'Alice':\n    print('Hi, Alice.')\nelif age &#x3C; 12:\n    print('You are not Alice, kiddo.')\n</code></pre>\n<pre><code class=\"language-python\">name = 'Bob'\nage = 30\n\nif name == 'Alice':\n    print('Hi, Alice.')\nelif age &#x3C; 12:\n    print('You are not Alice, kiddo.')\nelse:\n    print('You are neither Alice nor a little kid.')\n</code></pre>\n<h3>while Loop Statements</h3>\n<pre><code class=\"language-python\">spam = 0\n\nwhile spam &#x3C; 5:\n    print('Hello, world.')\n    spam = spam + 1\n</code></pre>\n<h3>break Statements</h3>\n<p>If the execution reaches a break statement, it immediately exits the while loop’s clause:</p>\n<pre><code class=\"language-python\">while True:\n    print('Please type your name.')\n    name = input()\n    if name == 'your name':\n        break\n\nprint('Thank you!')\n</code></pre>\n<h3>continue Statements</h3>\n<p>When the program execution reaches a continue statement, the program execution immediately jumps back to the start of the loop.</p>\n<pre><code class=\"language-python\">while True:\n    print('Who are you?')\n    name = input()\n    if name != 'Joe':\n        continue\n    print('Hello, Joe. What is the password? (It is a fish.)')\n    password = input()\n    if password == 'swordfish':\n        break\n\nprint('Access granted.')\n</code></pre>\n<h3>for Loops and the range() Function</h3>\n<pre><code class=\"language-python\">print('My name is')\nfor i in range(5):\n    print('Jimmy Five Times ({})'.format(str(i)))\n</code></pre>\n<p>The <em>range()</em> function can also be called with three arguments. The first two arguments will be the start and stop values, and the third will be the step argument. The step is the amount that the variable is increased by after each iteration.</p>\n<pre><code class=\"language-python\">for i in range(0, 10, 2):\n   print(i)\n</code></pre>\n<p>You can even use a negative number for the step argument to make the for loop count down instead of up.</p>\n<pre><code class=\"language-python\">for i in range(5, -1, -1):\n    print(i)\n</code></pre>\n<h3>For else statement</h3>\n<p>This allows to specify a statement to execute in case of the full loop has been executed. Only\nuseful when a <code>break</code> condition can occur in the loop:</p>\n<pre><code class=\"language-python\">for i in [1, 2, 3, 4, 5]:\n   if i == 3:\n       break\nelse:\n   print(\"only executed when no item of the list is equal to 3\")\n</code></pre>\n<h3>Importing Modules</h3>\n<pre><code class=\"language-python\">import random\n\nfor i in range(5):\n    print(random.randint(1, 10))\n</code></pre>\n<pre><code class=\"language-python\">import random, sys, os, math\n</code></pre>\n<pre><code class=\"language-python\">from random import *.\n</code></pre>\n<h3>Ending a Program with sys.exit</h3>\n<pre><code class=\"language-python\">import sys\n\nwhile True:\n    print('Type exit to exit.')\n    response = input()\n    if response == 'exit':\n        sys.exit()\n    print('You typed {}.'.format(response))\n</code></pre>\n<h2>Functions</h2>\n<pre><code class=\"language-python\">def hello(name):\n    print('Hello {}'.format(name))\n</code></pre>\n<h3>Return Values and return Statements</h3>\n<p>When creating a function using the def statement, you can specify what the return value should be with a return statement. A return statement consists of the following:</p>\n<ul>\n<li>The return keyword.</li>\n<li>The value or expression that the function should return.</li>\n</ul>\n<pre><code class=\"language-python\">import random\ndef getAnswer(answerNumber):\n    if answerNumber == 1:\n        return 'It is certain'\n    elif answerNumber == 2:\n        return 'It is decidedly so'\n    elif answerNumber == 3:\n        return 'Yes'\n    elif answerNumber == 4:\n        return 'Reply hazy try again'\n    elif answerNumber == 5:\n        return 'Ask again later'\n    elif answerNumber == 6:\n        return 'Concentrate and ask again'\n    elif answerNumber == 7:\n        return 'My reply is no'\n    elif answerNumber == 8:\n        return 'Outlook not so good'\n    elif answerNumber == 9:\n        return 'Very doubtful'\n\nr = random.randint(1, 9)\nfortune = getAnswer(r)\nprint(fortune)\n</code></pre>\n<h3>The None Value</h3>\n<pre><code class=\"language-python\">spam = print('Hello!')\nspam is None\n</code></pre>\n<p>Note: never compare to <code>None</code> with the <code>==</code> operator. Always use <code>is</code>.</p>\n<h3>print Keyword Arguments</h3>\n<pre><code class=\"language-python\">print('Hello', end='')\nprint('World')\n</code></pre>\n<pre><code class=\"language-python\">print('cats', 'dogs', 'mice')\n</code></pre>\n<pre><code class=\"language-python\">print('cats', 'dogs', 'mice', sep=',')\n</code></pre>\n<h3>Local and Global Scope</h3>\n<ul>\n<li>Code in the global scope cannot use any local variables.</li>\n<li>However, a local scope can access global variables.</li>\n<li>Code in a function’s local scope cannot use variables in any other local scope.</li>\n<li>You can use the same name for different variables if they are in different scopes. That is, there can be a local variable named spam and a global variable also named spam.</li>\n</ul>\n<h3>The global Statement</h3>\n<p>If you need to modify a global variable from within a function, use the global statement:</p>\n<pre><code class=\"language-python\">def spam():\n    global eggs\n    eggs = 'spam'\n\neggs = 'global'\nspam()\nprint(eggs)\n</code></pre>\n<p>There are four rules to tell whether a variable is in a local scope or global scope:</p>\n<ol>\n<li>If a variable is being used in the global scope (that is, outside of all functions), then it is always a global variable.</li>\n<li>If there is a global statement for that variable in a function, it is a global variable.</li>\n<li>Otherwise, if the variable is used in an assignment statement in the function, it is a local variable.</li>\n<li>But if the variable is not used in an assignment statement, it is a global variable.</li>\n</ol>\n<h2>Exception Handling</h2>\n<h3>Basic exception handling</h3>\n<pre><code class=\"language-python\">def spam(divideBy):\n    try:\n        return 42 / divideBy\n    except ZeroDivisionError as e:\n        print('Error: Invalid argument: {}'.format(e))\n\nprint(spam(2))\nprint(spam(12))\nprint(spam(0))\nprint(spam(1))\n</code></pre>\n<h3>Final code in exception handling</h3>\n<p>Code inside the <code>finally</code> section is always executed, no matter if an exception has been raised or\nnot, and even if an exception is not caught.</p>\n<pre><code class=\"language-python\">def spam(divideBy):\n    try:\n        return 42 / divideBy\n    except ZeroDivisionError as e:\n        print('Error: Invalid argument: {}'.format(e))\n    finally:\n        print(\"-- division finished --\")\n\nprint(spam(12))\nprint(spam(0))\n</code></pre>\n<h2>Lists</h2>\n<pre><code class=\"language-python\">['cat', 'bat', 'rat', 'elephant']\n</code></pre>\n<h3>Getting Individual Values in a List with Indexes</h3>\n<pre><code class=\"language-python\">spam = ['cat', 'bat', 'rat', 'elephant']\nspam[0]\n</code></pre>\n<pre><code class=\"language-python\">spam[1]\n</code></pre>\n<pre><code class=\"language-python\">spam[2]\n</code></pre>\n<pre><code class=\"language-python\">spam[3]\n</code></pre>\n<h3>Negative Indexes</h3>\n<pre><code class=\"language-python\">spam = ['cat', 'bat', 'rat', 'elephant']\nspam[-1]\n</code></pre>\n<pre><code class=\"language-python\">spam[-3]\n</code></pre>\n<pre><code class=\"language-python\">'The {} is afraid of the {}.'.format(spam[-1], spam[-3])\n</code></pre>\n<h3>Getting Sublists with Slices</h3>\n<pre><code class=\"language-python\">spam = ['cat', 'bat', 'rat', 'elephant']\nspam[0:4]\n</code></pre>\n<pre><code class=\"language-python\">spam[1:3]\n</code></pre>\n<pre><code class=\"language-python\">spam[0:-1]\n</code></pre>\n<pre><code class=\"language-python\">spam = ['cat', 'bat', 'rat', 'elephant']\nspam[:2]\n</code></pre>\n<pre><code class=\"language-python\">spam[1:]\n</code></pre>\n<pre><code class=\"language-python\">spam[:]\n</code></pre>\n<h3>Getting a list Length with len</h3>\n<pre><code class=\"language-python\">spam = ['cat', 'dog', 'moose']\nlen(spam)\n</code></pre>\n<h3>Changing Values in a List with Indexes</h3>\n<pre><code class=\"language-python\">spam = ['cat', 'bat', 'rat', 'elephant']\nspam[1] = 'aardvark'\nspam\n</code></pre>\n<pre><code class=\"language-python\">spam[2] = spam[1]\nspam\n</code></pre>\n<pre><code class=\"language-python\">spam[-1] = 12345\nspam\n</code></pre>\n<h3>List Concatenation and List Replication</h3>\n<pre><code class=\"language-python\">[1, 2, 3] + ['A', 'B', 'C']\n</code></pre>\n<pre><code class=\"language-python\">['X', 'Y', 'Z'] * 3\n</code></pre>\n<pre><code class=\"language-python\">spam = [1, 2, 3]\nspam = spam + ['A', 'B', 'C']\nspam\n</code></pre>\n<h3>Removing Values from Lists with del Statements</h3>\n<pre><code class=\"language-python\">spam = ['cat', 'bat', 'rat', 'elephant']\ndel spam[2]\nspam\n</code></pre>\n<pre><code class=\"language-python\">del spam[2]\nspam\n</code></pre>\n<h3>Using for Loops with Lists</h3>\n<pre><code class=\"language-python\">supplies = ['pens', 'staplers', 'flame-throwers', 'binders']\n\nfor i, supply in enumerate(supplies):\n    print('Index {} in supplies is: {}'.format(str(i), supply))\n</code></pre>\n<h3>Looping Through Multiple Lists with zip</h3>\n<pre><code class=\"language-python\">name = ['Pete', 'John', 'Elizabeth']\nage = [6, 23, 44]\n\nfor n, a in zip(name, age):\n    print('{} is {} years old'.format(n, a))\n</code></pre>\n<h3>The in and not in Operators</h3>\n<pre><code class=\"language-python\">'howdy' in ['hello', 'hi', 'howdy', 'heyas']\n</code></pre>\n<pre><code class=\"language-python\">spam = ['hello', 'hi', 'howdy', 'heyas']\nFalse\n</code></pre>\n<pre><code class=\"language-python\">'howdy' not in spam\n</code></pre>\n<pre><code class=\"language-python\">'cat' not in spam\n</code></pre>\n<h3>The Multiple Assignment Trick</h3>\n<p>The multiple assignment trick is a shortcut that lets you assign multiple variables with the values in a list in one line of code. So instead of doing this:</p>\n<pre><code class=\"language-python\">cat = ['fat', 'orange', 'loud']\nsize = cat[0]\ncolor = cat[1]\ndisposition = cat[2]\n</code></pre>\n<p>You could type this line of code:</p>\n<pre><code class=\"language-python\">cat = ['fat', 'orange', 'loud']\nsize, color, disposition = cat\n</code></pre>\n<p>The multiple assignment trick can also be used to swap the values in two variables:</p>\n<pre><code class=\"language-python\">a, b = 'Alice', 'Bob'\na, b = b, a\nprint(a)\n</code></pre>\n<pre><code class=\"language-python\">print(b)\n</code></pre>\n<h3>Augmented Assignment Operators</h3>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Equivalent</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>spam += 1</code></td>\n<td><code>spam = spam + 1</code></td>\n</tr>\n<tr>\n<td><code>spam -= 1</code></td>\n<td><code>spam = spam - 1</code></td>\n</tr>\n<tr>\n<td><code>spam *= 1</code></td>\n<td><code>spam = spam * 1</code></td>\n</tr>\n<tr>\n<td><code>spam /= 1</code></td>\n<td><code>spam = spam / 1</code></td>\n</tr>\n<tr>\n<td><code>spam %= 1</code></td>\n<td><code>spam = spam % 1</code></td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre><code class=\"language-python\">spam = 'Hello'\nspam += ' world!'\nspam\n</code></pre>\n<pre><code class=\"language-python\">bacon = ['Zophie']\nbacon *= 3\nbacon\n</code></pre>\n<h3>Finding a Value in a List with the index Method</h3>\n<pre><code class=\"language-python\">spam = ['Zophie', 'Pooka', 'Fat-tail', 'Pooka']\nspam.index('Pooka')\n</code></pre>\n<h3>Adding Values to Lists with append and insert</h3>\n<p><strong>append()</strong>:</p>\n<pre><code class=\"language-python\">spam = ['cat', 'dog', 'bat']\nspam.append('moose')\nspam\n</code></pre>\n<p><strong>insert()</strong>:</p>\n<pre><code class=\"language-python\">spam = ['cat', 'dog', 'bat']\nspam.insert(1, 'chicken')\nspam\n</code></pre>\n<h3>Removing Values from Lists with remove</h3>\n<pre><code class=\"language-python\">spam = ['cat', 'bat', 'rat', 'elephant']\nspam.remove('bat')\nspam\n</code></pre>\n<p>If the value appears multiple times in the list, only the first instance of the value will be removed.</p>\n<h3>Sorting the Values in a List with sort</h3>\n<pre><code class=\"language-python\">spam = [2, 5, 3.14, 1, -7]\nspam.sort()\nspam\n</code></pre>\n<pre><code class=\"language-python\">spam = ['ants', 'cats', 'dogs', 'badgers', 'elephants']\nspam.sort()\nspam\n</code></pre>\n<p>You can also pass True for the reverse keyword argument to have sort() sort the values in reverse order:</p>\n<pre><code class=\"language-python\">spam.sort(reverse=True)\nspam\n</code></pre>\n<p>If you need to sort the values in regular alphabetical order, pass str. lower for the key keyword argument in the sort() method call:</p>\n<pre><code class=\"language-python\">spam = ['a', 'z', 'A', 'Z']\nspam.sort(key=str.lower)\nspam\n</code></pre>\n<p>You can use the built-in function <code>sorted</code> to return a new list:</p>\n<pre><code class=\"language-python\">spam = ['ants', 'cats', 'dogs', 'badgers', 'elephants']\nsorted(spam)\n</code></pre>\n<h2>Tuple Data Type</h2>\n<pre><code class=\"language-python\">eggs = ('hello', 42, 0.5)\neggs[0]\n</code></pre>\n<pre><code class=\"language-python\">eggs[1:3]\n</code></pre>\n<pre><code class=\"language-python\">len(eggs)\n</code></pre>\n<p>The main way that tuples are different from lists is that tuples, like strings, are immutable.</p>\n<h2>Converting Types with the list and tuple Functions</h2>\n<pre><code class=\"language-python\">tuple(['cat', 'dog', 5])\n</code></pre>\n<pre><code class=\"language-python\">list(('cat', 'dog', 5))\n</code></pre>\n<pre><code class=\"language-python\">list('hello')\n</code></pre>\n<h2>Dictionaries and Structuring Data</h2>\n<p>Example Dictionary:</p>\n<pre><code class=\"language-python\">myCat = {'size': 'fat', 'color': 'gray', 'disposition': 'loud'}\n</code></pre>\n<h3>The keys, values, and items Methods</h3>\n<p>values():</p>\n<pre><code class=\"language-python\">spam = {'color': 'red', 'age': 42}\n\nfor v in spam.values():\n    print(v)\n</code></pre>\n<p>keys():</p>\n<pre><code class=\"language-python\">for k in spam.keys():\n    print(k)\n</code></pre>\n<p>items():</p>\n<pre><code class=\"language-python\">for i in spam.items():\n    print(i)\n</code></pre>\n<p>Using the keys(), values(), and items() methods, a for loop can iterate over the keys, values, or key-value pairs in a dictionary, respectively.</p>\n<pre><code class=\"language-python\">spam = {'color': 'red', 'age': 42}\n\nfor k, v in spam.items():\n    print('Key: {} Value: {}'.format(k, str(v)))\n</code></pre>\n<h3>Checking if a Key or Value Exists in a Dictionary</h3>\n<pre><code class=\"language-python\">spam = {'name': 'Zophie', 'age': 7}\n'name' in spam.keys()\n</code></pre>\n<pre><code class=\"language-python\">'Zophie' in spam.values()\n</code></pre>\n<pre><code class=\"language-python\"># You can omit the call to keys() when checking for a key\n'color' in spam\n</code></pre>\n<pre><code class=\"language-python\">'color' not in spam\n</code></pre>\n<pre><code class=\"language-python\">'color' in spam\n</code></pre>\n<h3>The get Method</h3>\n<pre><code class=\"language-python\">picnic_items = {'apples': 5, 'cups': 2}\n'I am bringing {} cups.'.format(str(picnic_items.get('cups', 0)))\n</code></pre>\n<pre><code class=\"language-python\">'I am bringing {} eggs.'.format(str(picnic_items.get('eggs', 0)))\n</code></pre>\n<h3>The setdefault Method</h3>\n<p>Let's consider this code:</p>\n<pre><code class=\"language-python\">spam = {'name': 'Pooka', 'age': 5}\nif 'color' not in spam:\n    spam['color'] = 'black'\n</code></pre>\n<p>Using <code>setdefault</code> we could make the same code more shortly:</p>\n<pre><code class=\"language-python\">spam = {'name': 'Pooka', 'age': 5}\nspam.setdefault('color', 'black')\n</code></pre>\n<pre><code class=\"language-python\">spam\n</code></pre>\n<pre><code class=\"language-python\">spam.setdefault('color', 'white')\n</code></pre>\n<pre><code class=\"language-python\">spam\n</code></pre>\n<h3>Pretty Printing</h3>\n<pre><code class=\"language-python\">import pprint\n\nmessage = 'It was a bright cold day in April, and the clocks were striking thirteen.'\ncount = {}\n\nfor character in message:\n    count.setdefault(character, 0)\n    count[character] = count[character] + 1\n\npprint.pprint(count)\n</code></pre>\n<h3>Merge two dictionaries</h3>\n<pre><code class=\"language-python\"># in Python 3.5+:\nx = {'a': 1, 'b': 2}\ny = {'b': 3, 'c': 4}\nz = {**x, **y}\nz\n</code></pre>\n<h2>sets</h2>\n<p>From the Python 3 <a href=\"https://docs.python.org/3/tutorial/datastructures.html\">documentation</a></p>\n<blockquote>\n<p>A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.</p>\n</blockquote>\n<h3>Initializing a set</h3>\n<p>There are two ways to create sets: using curly braces <code>{}</code> and the bult-in function <code>set()</code></p>\n<pre><code class=\"language-python\">s = {1, 2, 3}\ns = set([1, 2, 3])\n</code></pre>\n<p>When creating an empty set, be sure to not use the curly braces <code>{}</code> or you will get an empty dictionary instead.</p>\n<pre><code class=\"language-python\">s = {}\ntype(s)\n</code></pre>\n<h3>sets: unordered collections of unique elements</h3>\n<p>A set automatically remove all the duplicate values.</p>\n<pre><code class=\"language-python\">s = {1, 2, 3, 2, 3, 4}\ns\n</code></pre>\n<p>And as an unordered data type, they can't be indexed.</p>\n<pre><code class=\"language-python\">s = {1, 2, 3}\ns(0)\n</code></pre>\n<h3>set add and update</h3>\n<p>Using the <code>add()</code> method we can add a single element to the set.</p>\n<pre><code class=\"language-python\">s = {1, 2, 3}\ns.add(4)\ns\n</code></pre>\n<p>And with <code>update()</code>, multiple ones .</p>\n<pre><code class=\"language-python\">s = {1, 2, 3}\ns.update([2, 3, 4, 5, 6])\ns  # remember, sets automatically remove duplicates\n</code></pre>\n<h3>set remove and discard</h3>\n<p>Both methods will remove an element from the set, but <code>remove()</code> will raise a <code>key error</code> if the value doesn't exist.</p>\n<pre><code class=\"language-python\">s = {1, 2, 3}\ns.remove(3)\ns\n</code></pre>\n<pre><code class=\"language-python\">s.remove(3)\n</code></pre>\n<p><code>discard()</code> won't raise any errors.</p>\n<pre><code class=\"language-python\">s = {1, 2, 3}\ns.discard(3)\ns\n</code></pre>\n<pre><code class=\"language-python\">s.discard(3)\n</code></pre>\n<h3>set union</h3>\n<p><code>union()</code> or <code>|</code> will create a new set that contains all the elements from the sets provided.</p>\n<pre><code class=\"language-python\">s1 = {1, 2, 3}\ns2 = {3, 4, 5}\ns1.union(s2)  # or 's1 | s2'\n</code></pre>\n<h3>set intersection</h3>\n<p><code>intersection</code> or <code>&#x26;</code> will return a set containing only the elements that are common to all of them.</p>\n<pre><code class=\"language-python\">s1 = {1, 2, 3}\ns2 = {2, 3, 4}\ns3 = {3, 4, 5}\ns1.intersection(s2, s3)  # or 's1 &#x26; s2 &#x26; s3'\n</code></pre>\n<h3>set difference</h3>\n<p><code>difference</code> or <code>-</code> will return only the elements that are in one of the sets.</p>\n<pre><code class=\"language-python\">s1 = {1, 2, 3}\ns2 = {2, 3, 4}\ns1.difference(s2)  # or 's1 - s2'\n</code></pre>\n<h3>set symetric_difference</h3>\n<p><code>symetric_difference</code> or <code>^</code> will return all the elements that are not common between them.</p>\n<pre><code class=\"language-python\">s1 = {1, 2, 3}\ns2 = {2, 3, 4}\ns1.symmetric_difference(s2)  # or 's1 ^ s2'\n</code></pre>\n<h2>itertools Module</h2>\n<p>The <em>itertools</em> module is a collection of tools intented to be fast and use memory efficiently when handling iterators (like <a href=\"#lists\">lists</a> or <a href=\"#dictionaries-and-structuring-data\">dictionaries</a>).</p>\n<p>From the official <a href=\"https://docs.python.org/3/library/itertools.html\">Python 3.x documentation</a>:</p>\n<blockquote>\n<p>The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an “iterator algebra” making it possible to construct specialized tools succinctly and efficiently in pure Python.</p>\n</blockquote>\n<p>The <em>itertools</em> module comes in the standard library and must be imported.</p>\n<p>The <a href=\"https://docs.python.org/3/library/operator.html\">operator</a> module will also be used. This module is not necessary when using itertools, but needed for some of the examples below.</p>\n<pre><code class=\"language-python\">import itertools\nimport operator\n</code></pre>\n<h3>accumulate</h3>\n<p>Makes an iterator that returns the results of a function.</p>\n<pre><code class=\"language-python\">itertools.accumulate(iterable[, func])\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">data = [1, 2, 3, 4, 5]\nresult = itertools.accumulate(data, operator.mul)\nfor each in result:\n   print(each)\n</code></pre>\n<p>The operator.mul takes two numbers and multiplies them:</p>\n<pre><code class=\"language-python\">operator.mul(1, 2)\n</code></pre>\n<pre><code class=\"language-python\">operator.mul(2, 3)\n</code></pre>\n<pre><code class=\"language-python\">operator.mul(6, 4)\n</code></pre>\n<pre><code class=\"language-python\">operator.mul(24, 5)\n</code></pre>\n<p>Passing a function is optional:</p>\n<pre><code class=\"language-python\">data = [5, 2, 6, 4, 5, 9, 1]\nresult = itertools.accumulate(data)\n\nfor each in result:\n   print(each)\n</code></pre>\n<p>If no function is designated the items will be summed:</p>\n<pre><code class=\"language-python\">5\n5 + 2 = 7\n7 + 6 = 13\n13 + 4 = 17\n17 + 5 = 22\n22 + 9 = 31\n31 + 1 = 32\n</code></pre>\n<h3>combinations</h3>\n<p>Takes an iterable and a integer. This will create all the unique combination that have r members.</p>\n<pre><code class=\"language-python\">itertools.combinations(iterable, r)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">shapes = ['circle', 'triangle', 'square',]\nresult = itertools.combinations(shapes, 2)\n\nfor each in result:\n   print(each)\n</code></pre>\n<h3>combinations<em>with</em>replacement</h3>\n<p>Just like combinations(), but allows individual elements to be repeated more than once.</p>\n<pre><code class=\"language-python\">itertools.combinations_with_replacement(iterable, r)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">shapes = ['circle', 'triangle', 'square']\nresult = itertools.combinations_with_replacement(shapes, 2)\n\nfor each in result:\n   print(each)\n</code></pre>\n<h3>count</h3>\n<p>Makes an iterator that returns evenly spaced values starting with number start.</p>\n<pre><code class=\"language-python\">itertools.count(start=0, step=1)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">for i in itertools.count(10,3):\n   print(i)\n   if i > 20:\n       break\n</code></pre>\n<h3>cycle</h3>\n<p>This function cycles through an iterator endlessly.</p>\n<pre><code class=\"language-python\">itertools.cycle(iterable)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">colors = ['red', 'orange', 'yellow', 'green', 'blue', 'violet']\nfor color in itertools.cycle(colors):\n   print(color)\n</code></pre>\n<p>When reached the end of the iterable it start over again from the beginning.</p>\n<h3>chain</h3>\n<p>Take a series of iterables and return them as one long iterable.</p>\n<pre><code class=\"language-python\">itertools.chain(*iterables)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">colors = ['red', 'orange', 'yellow', 'green', 'blue']\nshapes = ['circle', 'triangle', 'square', 'pentagon']\nresult = itertools.chain(colors, shapes)\n\nfor each in result:\n   print(each)\n</code></pre>\n<h3>compress</h3>\n<p>Filters one iterable with another.</p>\n<pre><code class=\"language-python\">itertools.compress(data, selectors)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">shapes = ['circle', 'triangle', 'square', 'pentagon']\nselections = [True, False, True, False]\nresult = itertools.compress(shapes, selections)\n\nfor each in result:\n   print(each)\n</code></pre>\n<h3>dropwhile</h3>\n<p>Make an iterator that drops elements from the iterable as long as the predicate is true; afterwards, returns every element.</p>\n<pre><code class=\"language-python\">itertools.dropwhile(predicate, iterable)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]\nresult = itertools.dropwhile(lambda x: x&#x3C;5, data)\n\nfor each in result:\n   print(each)\n</code></pre>\n<h3>filterfalse</h3>\n<p>Makes an iterator that filters elements from iterable returning only those for which the predicate is False.</p>\n<pre><code class=\"language-python\">itertools.filterfalse(predicate, iterable)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = itertools.filterfalse(lambda x: x&#x3C;5, data)\n\nfor each in result:\n   print(each)\n</code></pre>\n<h3>groupby</h3>\n<p>Simply put, this function groups things together.</p>\n<pre><code class=\"language-python\">itertools.groupby(iterable, key=None)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">robots = [{\n    'name': 'blaster',\n    'faction': 'autobot'\n}, {\n    'name': 'galvatron',\n    'faction': 'decepticon'\n}, {\n    'name': 'jazz',\n    'faction': 'autobot'\n}, {\n    'name': 'metroplex',\n    'faction': 'autobot'\n}, {\n    'name': 'megatron',\n    'faction': 'decepticon'\n}, {\n    'name': 'starcream',\n    'faction': 'decepticon'\n}]\n\nfor key, group in itertools.groupby(robots, key=lambda x: x['faction']):\n   print(key)\n   print(list(group))\n</code></pre>\n<h3>islice</h3>\n<p>This function is very much like slices. This allows you to cut out a piece of an iterable.</p>\n<pre><code class=\"language-python\">itertools.islice(iterable, start, stop[, step])\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">colors = ['red', 'orange', 'yellow', 'green', 'blue',]\nfew_colors = itertools.islice(colors, 2)\n\nfor each in few_colors:\n   print(each)\n</code></pre>\n<h3>permutations</h3>\n<pre><code class=\"language-python\">itertools.permutations(iterable, r=None)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">alpha_data = ['a', 'b', 'c']\nresult = itertools.permutations(alpha_data)\n\nfor each in result:\n   print(each)\n</code></pre>\n<h3>product</h3>\n<p>Creates the cartesian products from a series of iterables.</p>\n<pre><code class=\"language-python\">num_data = [1, 2, 3]\nalpha_data = ['a', 'b', 'c']\nresult = itertools.product(num_data, alpha_data)\n\nfor each in result:\n    print(each)\n</code></pre>\n<h3>repeat</h3>\n<p>This function will repeat an object over and over again. Unless, there is a times argument.</p>\n<pre><code class=\"language-python\">itertools.repeat(object[, times])\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">for i in itertools.repeat(\"spam\", 3):\n    print(i)\n</code></pre>\n<h3>starmap</h3>\n<p>Makes an iterator that computes the function using arguments obtained from the iterable.</p>\n<pre><code class=\"language-python\">itertools.starmap(function, iterable)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">data = [(2, 6), (8, 4), (7, 3)]\nresult = itertools.starmap(operator.mul, data)\n\nfor each in result:\n   print(each)\n</code></pre>\n<h3>takewhile</h3>\n<p>The opposite of dropwhile(). Makes an iterator and returns elements from the iterable as long as the predicate is true.</p>\n<pre><code class=\"language-python\">itertools.takewhile(predicate, iterable)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]\nresult = itertools.takewhile(lambda x: x&#x3C;5, data)\n\nfor each in result:\n   print(each)\n</code></pre>\n<h3>tee</h3>\n<p>Return n independent iterators from a single iterable.</p>\n<pre><code class=\"language-python\">itertools.tee(iterable, n=2)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">colors = ['red', 'orange', 'yellow', 'green', 'blue']\nalpha_colors, beta_colors = itertools.tee(colors)\n\nfor each in alpha_colors:\n   print(each)\n</code></pre>\n<pre><code class=\"language-python\">colors = ['red', 'orange', 'yellow', 'green', 'blue']\nalpha_colors, beta_colors = itertools.tee(colors)\n\nfor each in beta_colors:\n   print(each)\n</code></pre>\n<h3>zip_longest</h3>\n<p>Makes an iterator that aggregates elements from each of the iterables. If the iterables are of uneven length, missing values are filled-in with fillvalue. Iteration continues until the longest iterable is exhausted.</p>\n<pre><code class=\"language-python\">itertools.zip_longest(*iterables, fillvalue=None)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">colors = ['red', 'orange', 'yellow', 'green', 'blue',]\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,]\n\nfor each in itertools.zip_longest(colors, data, fillvalue=None):\n   print(each)\n</code></pre>\n<h2>Comprehensions</h2>\n<h3>List comprehension</h3>\n<pre><code class=\"language-python\">a = [1, 3, 5, 7, 9, 11]\n[i - 1 for i in a]\n</code></pre>\n<h3>Set comprehension</h3>\n<pre><code class=\"language-python\">b = {\"abc\", \"def\"}\n{s.upper() for s in b}\n</code></pre>\n<h3>Dict comprehension</h3>\n<pre><code class=\"language-python\">c = {'name': 'Pooka', 'age': 5}\n{v, k for k, v in c.items()}\n</code></pre>\n<p>A List comprehension can be generated from a dictionary:</p>\n<pre><code class=\"language-python\">c = {'name': 'Pooka', 'first_name': 'Oooka'}\n[\"{}:{}\".format(k.upper(), v.upper()) for k, v in c.items()]\n</code></pre>\n<h2>Manipulating Strings</h2>\n<h3>Escape Characters</h3>\n<table>\n<thead>\n<tr>\n<th>Escape character</th>\n<th>Prints as</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\'</code></td>\n<td>Single quote</td>\n</tr>\n<tr>\n<td><code>\\\"</code></td>\n<td>Double quote</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>Tab</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>Newline (line break)</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>Backslash</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre><code class=\"language-python\">print(\"Hello there!\\nHow are you?\\nI\\'m doing fine.\")\nHello there!\nHow are you?\n</code></pre>\n<h3>Raw Strings</h3>\n<p>A raw string completely ignores all escape characters and prints any backslash that appears in the string.</p>\n<pre><code class=\"language-python\">print(r'That is Carol\\'s cat.')\n</code></pre>\n<p>Note: mostly used for regular expression definition (see <code>re</code> package)</p>\n<h3>Multiline Strings with Triple Quotes</h3>\n<pre><code class=\"language-python\">print('''Dear Alice,\n\nEve's cat has been arrested for catnapping, cat burglary, and extortion.\n\nSincerely,\nBob''')\n</code></pre>\n<p>To keep a nicer flow in your code, you can use the <code>dedent</code> function from the <code>textwrap</code> standard package.</p>\n<pre><code class=\"language-python\">from textwrap import dedent\n\ndef my_function():\n    print('''\n        Dear Alice,\n\n        Eve's cat has been arrested for catnapping, cat burglary, and extortion.\n\n        Sincerely,\n        Bob\n        ''').strip()\n</code></pre>\n<p>This generates the same string than before.</p>\n<h3>Indexing and Slicing Strings</h3>\n<pre><code>H   e   l   l   o       w   o   r   l   d    !\n0   1   2   3   4   5   6   7   8   9   10   11\n</code></pre>\n<pre><code class=\"language-python\">spam = 'Hello world!'\nspam[0]\n</code></pre>\n<pre><code class=\"language-python\">spam[4]\n</code></pre>\n<pre><code class=\"language-python\">spam[-1]\n</code></pre>\n<p>Slicing:</p>\n<pre><code class=\"language-python\">spam[0:5]\n</code></pre>\n<pre><code class=\"language-python\">spam[:5]\n</code></pre>\n<pre><code class=\"language-python\">spam[6:]\n</code></pre>\n<pre><code class=\"language-python\">spam[6:-1]\n</code></pre>\n<pre><code class=\"language-python\">spam[:-1]\n</code></pre>\n<pre><code class=\"language-python\">spam[::-1]\n</code></pre>\n<pre><code class=\"language-python\">spam = 'Hello world!'\nfizz = spam[0:5]\nfizz\n</code></pre>\n<h3>The in and not in Operators with Strings</h3>\n<pre><code class=\"language-python\">'Hello' in 'Hello World'\n</code></pre>\n<pre><code class=\"language-python\">'Hello' in 'Hello'\n</code></pre>\n<pre><code class=\"language-python\">'HELLO' in 'Hello World'\n</code></pre>\n<pre><code class=\"language-python\">'' in 'spam'\n</code></pre>\n<pre><code class=\"language-python\">'cats' not in 'cats and dogs'\n</code></pre>\n<h3>The in and not in Operators with list</h3>\n<pre><code class=\"language-python\">a = [1, 2, 3, 4]\n5 in a\n</code></pre>\n<pre><code class=\"language-python\">2 in a\n</code></pre>\n<h3>The upper, lower, isupper, and islower String Methods</h3>\n<p><code>upper()</code> and <code>lower()</code>:</p>\n<pre><code class=\"language-python\">spam = 'Hello world!'\nspam = spam.upper()\nspam\n</code></pre>\n<pre><code class=\"language-python\">spam = spam.lower()\nspam\n</code></pre>\n<p>isupper() and islower():</p>\n<pre><code class=\"language-python\">spam = 'Hello world!'\nspam.islower()\n</code></pre>\n<pre><code class=\"language-python\">spam.isupper()\n</code></pre>\n<pre><code class=\"language-python\">'HELLO'.isupper()\n</code></pre>\n<pre><code class=\"language-python\">'abc12345'.islower()\n</code></pre>\n<pre><code class=\"language-python\">'12345'.islower()\n</code></pre>\n<pre><code class=\"language-python\">'12345'.isupper()\n</code></pre>\n<h3>The isX String Methods</h3>\n<ul>\n<li><strong>isalpha()</strong> returns True if the string consists only of letters and is not blank.</li>\n<li><strong>isalnum()</strong> returns True if the string consists only of lettersand numbers and is not blank.</li>\n<li><strong>isdecimal()</strong> returns True if the string consists only ofnumeric characters and is not blank.</li>\n<li><strong>isspace()</strong> returns True if the string consists only of spaces,tabs, and new-lines and is not blank.</li>\n<li><strong>istitle()</strong> returns True if the string consists only of wordsthat begin with an uppercase letter followed by onlylowercase letters.</li>\n</ul>\n<h3>The startswith and endswith String Methods</h3>\n<pre><code class=\"language-python\">'Hello world!'.startswith('Hello')\n</code></pre>\n<pre><code class=\"language-python\">'Hello world!'.endswith('world!')\n</code></pre>\n<pre><code class=\"language-python\">'abc123'.startswith('abcdef')\n</code></pre>\n<pre><code class=\"language-python\">'abc123'.endswith('12')\n</code></pre>\n<pre><code class=\"language-python\">'Hello world!'.startswith('Hello world!')\n</code></pre>\n<pre><code class=\"language-python\">'Hello world!'.endswith('Hello world!')\n</code></pre>\n<h3>The join and split String Methods</h3>\n<p>join():</p>\n<pre><code class=\"language-python\">', '.join(['cats', 'rats', 'bats'])\n</code></pre>\n<pre><code class=\"language-python\">' '.join(['My', 'name', 'is', 'Simon'])\n</code></pre>\n<pre><code class=\"language-python\">'ABC'.join(['My', 'name', 'is', 'Simon'])\n</code></pre>\n<p>split():</p>\n<pre><code class=\"language-python\">'My name is Simon'.split()\n</code></pre>\n<pre><code class=\"language-python\">'MyABCnameABCisABCSimon'.split('ABC')\n</code></pre>\n<pre><code class=\"language-python\">'My name is Simon'.split('m')\n</code></pre>\n<h3>Justifying Text with rjust, ljust, and center</h3>\n<p>rjust() and ljust():</p>\n<pre><code class=\"language-python\">'Hello'.rjust(10)\n</code></pre>\n<pre><code class=\"language-python\">'Hello'.rjust(20)\n</code></pre>\n<pre><code class=\"language-python\">'Hello World'.rjust(20)\n</code></pre>\n<pre><code class=\"language-python\">'Hello'.ljust(10)\n</code></pre>\n<p>An optional second argument to rjust() and ljust() will specify a fill character other than a space character. Enter the following into the interactive shell:</p>\n<pre><code class=\"language-python\">'Hello'.rjust(20, '*')\n</code></pre>\n<pre><code class=\"language-python\">'Hello'.ljust(20, '-')\n</code></pre>\n<p>center():</p>\n<pre><code class=\"language-python\">'Hello'.center(20)\n</code></pre>\n<pre><code class=\"language-python\">'Hello'.center(20, '=')\n</code></pre>\n<h3>Removing Whitespace with strip, rstrip, and lstrip</h3>\n<pre><code class=\"language-python\">spam = '    Hello World     '\nspam.strip()\n</code></pre>\n<pre><code class=\"language-python\">spam.lstrip()\n</code></pre>\n<pre><code class=\"language-python\">spam.rstrip()\n</code></pre>\n<pre><code class=\"language-python\">spam = 'SpamSpamBaconSpamEggsSpamSpam'\nspam.strip('ampS')\n</code></pre>\n<h3>Copying and Pasting Strings with the pyperclip Module</h3>\n<p>First, install <code>pypeerclip</code> with pip:</p>\n<pre><code class=\"language-shell\">pip install pyperclip\n</code></pre>\n<pre><code class=\"language-python\">import pyperclip\n\npyperclip.copy('Hello world!')\npyperclip.paste()\n</code></pre>\n<h2>String Formatting</h2>\n<h3>% operator</h3>\n<pre><code class=\"language-python\">name = 'Pete'\n'Hello %s' % name\n</code></pre>\n<p>We can use the <code>%x</code> format specifier to convert an int value to a string:</p>\n<pre><code class=\"language-python\">num = 5\n'I have %x apples' % num\n</code></pre>\n<p>Note: For new code, using str.format or f-strings is strongly recommended over the <code>%</code> operator.</p>\n<h3>str.format</h3>\n<p>Python 3 introduced a new way to do string formatting that was later back-ported to Python 2.7. This makes the syntax for string formatting more regular.</p>\n<pre><code class=\"language-python\">name = 'John'\nage = 20'\n\n\"Hello I'm {}, my age is {}\".format(name, age)\n</code></pre>\n<pre><code class=\"language-python\">\"Hello I'm {0}, my age is {1}\".format(name, age)\n</code></pre>\n<p>The official <a href=\"https://docs.python.org/3/library/stdtypes.html?highlight=sprintf#printf-style-string-formatting\">Python 3.x documentation</a> recommend <code>str.format</code> over the <code>%</code> operator:</p>\n<blockquote>\n<p>The formatting operations described here exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly). Using the newer formatted string literals or the str.format() interface helps avoid these errors. These alternatives also provide more powerful, flexible and extensible approaches to formatting text.</p>\n</blockquote>\n<h3>Lazy string formatting</h3>\n<p>You would only use <code>%s</code> string formatting on functions that can do lazy parameters evaluation,\nthe most common being logging:</p>\n<p>Prefer:</p>\n<pre><code class=\"language-python\">name = \"alice\"\nlogging.debug(\"User name: %s\", name)\n</code></pre>\n<p>Over:</p>\n<pre><code class=\"language-python\">logging.debug(\"User name: {}\".format(name))\n</code></pre>\n<p>Or:</p>\n<pre><code class=\"language-python\">logging.debug(\"User name: \" + name)\n</code></pre>\n<h3>Formatted String Literals or f-strings</h3>\n<p>Python 3.6+</p>\n<pre><code class=\"language-python\">name = 'Elizabeth'\nf'Hello {name}!'\n</code></pre>\n<p>It is even possible to do inline arithmetic with it:</p>\n<pre><code class=\"language-python\">a = 5\nb = 10\nf'Five plus ten is {a + b} and not {2 * (a + b)}.'\n</code></pre>\n<h3>Template Strings</h3>\n<p>A simpler and less powerful mechanism, but it is recommended when handling format strings generated by users. Due to their reduced complexity template strings are a safer choice.</p>\n<pre><code class=\"language-python\">from string import Template\n\nname = 'Elizabeth'\nt = Template('Hey $name!')\nt.substitute(name=name)\n</code></pre>\n<h2>Regular Expressions</h2>\n<ol>\n<li>Import the regex module with <code>import re</code>.</li>\n<li>Create a Regex object with the <code>re.compile()</code> function. (Remember to use a raw string.)</li>\n<li>Pass the string you want to search into the Regex object’s <code>search()</code> method. This returns a <code>Match</code> object.</li>\n<li>Call the Match object’s <code>group()</code> method to return a string of the actual matched text.</li>\n</ol>\n<p>All the regex functions in Python are in the re module:</p>\n<pre><code class=\"language-python\">import re\n</code></pre>\n<h3>Matching Regex Objects</h3>\n<pre><code class=\"language-python\">phone_num_regex = re.compile(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d')\nmo = phone_num_regex.search('My number is 415-555-4242.')\nprint('Phone number found: {}'.format(mo.group()))\n</code></pre>\n<h3>Grouping with Parentheses</h3>\n<pre><code class=\"language-python\">phone_num_regex = re.compile(r'(\\d\\d\\d)-(\\d\\d\\d-\\d\\d\\d\\d)')\nmo = phone_num_regex.search('My number is 415-555-4242.')\nmo.group(1)\n</code></pre>\n<pre><code class=\"language-python\">mo.group(2)\n</code></pre>\n<pre><code class=\"language-python\">mo.group(0)\n</code></pre>\n<pre><code class=\"language-python\">mo.group()\n</code></pre>\n<p>To retrieve all the groups at once: use the groups() method—note the plural form for the name.</p>\n<pre><code class=\"language-python\">mo.groups()\narea_code, main_number = mo.groups()\n</code></pre>\n<pre><code class=\"language-python\">print(area_code)\n</code></pre>\n<pre><code class=\"language-python\">print(main_number)\n</code></pre>\n<h3>Matching Multiple Groups with the Pipe</h3>\n<p>The | character is called a pipe. You can use it anywhere you want to match one of many expressions. For example, the regular expression r'Batman|Tina Fey' will match either 'Batman' or 'Tina Fey'.</p>\n<pre><code class=\"language-python\">hero_regex = re.compile (r'Batman|Tina Fey')\nmo1 = hero_regex.search('Batman and Tina Fey.')\nmo1.group()\n</code></pre>\n<pre><code class=\"language-python\">mo2 = hero_regex.search('Tina Fey and Batman.')\nmo2.group()\n</code></pre>\n<p>You can also use the pipe to match one of several patterns as part of your regex:</p>\n<pre><code class=\"language-python\">bat_regex = re.compile(r'Bat(man|mobile|copter|bat)')\nmo = bat_regex.search('Batmobile lost a wheel')\nmo.group()\n</code></pre>\n<pre><code class=\"language-python\">mo.group(1)\n</code></pre>\n<h3>Optional Matching with the Question Mark</h3>\n<p>The ? character flags the group that precedes it as an optional part of the pattern.</p>\n<pre><code class=\"language-python\">bat_regex = re.compile(r'Bat(wo)?man')\nmo1 = bat_regex.search('The Adventures of Batman')\nmo1.group()\n</code></pre>\n<pre><code class=\"language-python\">mo2 = bat_regex.search('The Adventures of Batwoman')\nmo2.group()\n</code></pre>\n<h3>Matching Zero or More with the Star</h3>\n<p>The * (called the star or asterisk) means “match zero or more”—the group that precedes the star can occur any number of times in the text.</p>\n<pre><code class=\"language-python\">bat_regex = re.compile(r'Bat(wo)*man')\nmo1 = bat_regex.search('The Adventures of Batman')\nmo1.group()\n</code></pre>\n<pre><code class=\"language-python\">mo2 = bat_regex.search('The Adventures of Batwoman')\nmo2.group()\n</code></pre>\n<pre><code class=\"language-python\">mo3 = bat_regex.search('The Adventures of Batwowowowoman')\nmo3.group()\n</code></pre>\n<h3>Matching One or More with the Plus</h3>\n<p>While * means “match zero or more,” the + (or plus) means “match one or more”. The group preceding a plus must appear at least once. It is not optional:</p>\n<pre><code class=\"language-python\">bat_regex = re.compile(r'Bat(wo)+man')\nmo1 = bat_regex.search('The Adventures of Batwoman')\nmo1.group()\n</code></pre>\n<pre><code class=\"language-python\">mo2 = bat_regex.search('The Adventures of Batwowowowoman')\nmo2.group()\n</code></pre>\n<pre><code class=\"language-python\">mo3 = bat_regex.search('The Adventures of Batman')\nmo3 is None\n</code></pre>\n<h3>Matching Specific Repetitions with Curly Brackets</h3>\n<p>If you have a group that you want to repeat a specific number of times, follow the group in your regex with a number in curly brackets. For example, the regex (Ha){3} will match the string 'HaHaHa', but it will not match 'HaHa', since the latter has only two repeats of the (Ha) group.</p>\n<p>Instead of one number, you can specify a range by writing a minimum, a comma, and a maximum in between the curly brackets. For example, the regex (Ha){3,5} will match 'HaHaHa', 'HaHaHaHa', and 'HaHaHaHaHa'.</p>\n<pre><code class=\"language-python\">ha_regex = re.compile(r'(Ha){3}')\nmo1 = ha_regex.search('HaHaHa')\nmo1.group()\n</code></pre>\n<pre><code class=\"language-python\">mo2 = ha_regex.search('Ha')\nmo2 is None\n</code></pre>\n<h3>Greedy and Nongreedy Matching</h3>\n<p>Python’s regular expressions are greedy by default, which means that in ambiguous situations they will match the longest string possible. The non-greedy version of the curly brackets, which matches the shortest string possible, has the closing curly bracket followed by a question mark.</p>\n<pre><code class=\"language-python\">greedy_ha_regex = re.compile(r'(Ha){3,5}')\nmo1 = greedy_ha_regex.search('HaHaHaHaHa')\nmo1.group()\n</code></pre>\n<pre><code class=\"language-python\">nongreedy_ha_regex = re.compile(r'(Ha){3,5}?')\nmo2 = nongreedy_ha_regex.search('HaHaHaHaHa')\nmo2.group()\n</code></pre>\n<h3>The findall Method</h3>\n<p>In addition to the search() method, Regex objects also have a findall() method. While search() will return a Match object of the first matched text in the searched string, the findall() method will return the strings of every match in the searched string.</p>\n<pre><code class=\"language-python\">phone_num_regex = re.compile(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d') # has no groups\nphone_num_regex.findall('Cell: 415-555-9999 Work: 212-555-0000')\n</code></pre>\n<p>To summarize what the findall() method returns, remember the following:</p>\n<ul>\n<li>When called on a regex with no groups, such as \\d-\\d\\d\\d-\\d\\d\\d\\d, the method findall() returns a list of ng matches, such as ['415-555-9999', '212-555-0000'].</li>\n<li>When called on a regex that has groups, such as (\\d\\d\\d)-d\\d)-(\\d\\ d\\d\\d), the method findall() returns a list of es of strings (one string for each group), such as [('415', ', '9999'), ('212', '555', '0000')].</li>\n</ul>\n<h3>Making Your Own Character Classes</h3>\n<p>There are times when you want to match a set of characters but the shorthand character classes (\\d, \\w, \\s, and so on) are too broad. You can define your own character class using square brackets. For example, the character class [aeiouAEIOU] will match any vowel, both lowercase and uppercase.</p>\n<pre><code class=\"language-python\">vowel_regex = re.compile(r'[aeiouAEIOU]')\nvowel_regex.findall('Robocop eats baby food. BABY FOOD.')\n</code></pre>\n<p>You can also include ranges of letters or numbers by using a hyphen. For example, the character class [a-zA-Z0-9] will match all lowercase letters, uppercase letters, and numbers.</p>\n<p>By placing a caret character (^) just after the character class’s opening bracket, you can make a negative character class. A negative character class will match all the characters that are not in the character class. For example, enter the following into the interactive shell:</p>\n<pre><code class=\"language-python\">consonant_regex = re.compile(r'[^aeiouAEIOU]')\nconsonant_regex.findall('Robocop eats baby food. BABY FOOD.')\n</code></pre>\n<h3>The Caret and Dollar Sign Characters</h3>\n<ul>\n<li>You can also use the caret symbol (^) at the start of a regex to indicate that a match must occur at the beginning of the searched text.</li>\n<li>Likewise, you can put a dollar sign ($) at the end of the regex to indicate the string must end with this regex pattern.</li>\n<li>And you can use the ^ and $ together to indicate that the entire string must match the regex—that is, it’s not enough for a match to be made on some subset of the string.</li>\n</ul>\n<p>The r'^Hello' regular expression string matches strings that begin with 'Hello':</p>\n<pre><code class=\"language-python\">begins_with_hello = re.compile(r'^Hello')\nbegins_with_hello.search('Hello world!')\n</code></pre>\n<pre><code class=\"language-python\">begins_with_hello.search('He said hello.') is None\n</code></pre>\n<p>The r'\\d$' regular expression string matches strings that end with a numeric character from 0 to 9:</p>\n<pre><code class=\"language-python\">whole_string_is_num = re.compile(r'^\\d+$')\nwhole_string_is_num.search('1234567890')\n</code></pre>\n<pre><code class=\"language-python\">whole_string_is_num.search('12345xyz67890') is None\n</code></pre>\n<pre><code class=\"language-python\">whole_string_is_num.search('12 34567890') is None\n</code></pre>\n<h3>The Wildcard Character</h3>\n<p>The . (or dot) character in a regular expression is called a wildcard and will match any character except for a newline:</p>\n<pre><code class=\"language-python\">at_regex = re.compile(r'.at')\nat_regex.findall('The cat in the hat sat on the flat mat.')\n</code></pre>\n<h3>Matching Everything with Dot-Star</h3>\n<pre><code class=\"language-python\">name_regex = re.compile(r'First Name: (.*) Last Name: (.*)')\nmo = name_regex.search('First Name: Some Last Name: One')\nmo.group(1)\n</code></pre>\n<pre><code class=\"language-python\">mo.group(2)\n</code></pre>\n<p>The dot-star uses greedy mode: It will always try to match as much text as possible. To match any and all text in a nongreedy fashion, use the dot, star, and question mark (.*?). The question mark tells Python to match in a nongreedy way:</p>\n<pre><code class=\"language-python\">nongreedy_regex = re.compile(r'&#x3C;.*?>')\nmo = nongreedy_regex.search('&#x3C;To serve man> for dinner.>')\nmo.group()\n</code></pre>\n<pre><code class=\"language-python\">greedy_regex = re.compile(r'&#x3C;.*>')\nmo = greedy_regex.search('&#x3C;To serve man> for dinner.>')\nmo.group()\n</code></pre>\n<h3>Matching Newlines with the Dot Character</h3>\n<p>The dot-star will match everything except a newline. By passing re.DOTALL as the second argument to re.compile(), you can make the dot character match all characters, including the newline character:</p>\n<pre><code class=\"language-python\">no_newline_regex = re.compile('.*')\nno_newline_regex.search('Serve the public trust.\\nProtect the innocent.\\nUphold the law.').group()\n</code></pre>\n<pre><code class=\"language-python\">newline_regex = re.compile('.*', re.DOTALL)\nnewline_regex.search('Serve the public trust.\\nProtect the innocent.\\nUphold the law.').group()\n</code></pre>\n<h3>Review of Regex Symbols</h3>\n<table>\n<thead>\n<tr>\n<th>Symbol</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>?</code></td>\n<td>zero or one of the preceding group.</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>zero or more of the preceding group.</td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>one or more of the preceding group.</td>\n</tr>\n<tr>\n<td><code>{n}</code></td>\n<td>exactly n of the preceding group.</td>\n</tr>\n<tr>\n<td><code>{n,}</code></td>\n<td>n or more of the preceding group.</td>\n</tr>\n<tr>\n<td><code>{,m}</code></td>\n<td>0 to m of the preceding group.</td>\n</tr>\n<tr>\n<td><code>{n,m}</code></td>\n<td>at least n and at most m of the preceding p.</td>\n</tr>\n<tr>\n<td><code>{n,m}?</code> or <code>*?</code> or <code>+?</code></td>\n<td>performs a nongreedy match of the preceding p.</td>\n</tr>\n<tr>\n<td><code>^spam</code></td>\n<td>means the string must begin with spam.</td>\n</tr>\n<tr>\n<td><code>spam$</code></td>\n<td>means the string must end with spam.</td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td>any character, except newline characters.</td>\n</tr>\n<tr>\n<td><code>\\d</code>, <code>\\w</code>, and <code>\\s</code></td>\n<td>a digit, word, or space character, resectively.</td>\n</tr>\n<tr>\n<td><code>\\D</code>, <code>\\W</code>, and <code>\\S</code></td>\n<td>anything except a digit, word, or space acter, respectively.</td>\n</tr>\n<tr>\n<td><code>[abc]</code></td>\n<td>any character between the brackets (such as a, b, ).</td>\n</tr>\n<tr>\n<td><code>[^abc]</code></td>\n<td>any character that isn’t between the brackets.</td>\n</tr>\n</tbody>\n</table>\n<h3>Case-Insensitive Matching</h3>\n<p>To make your regex case-insensitive, you can pass re.IGNORECASE or re.I as a second argument to re.compile():</p>\n<pre><code class=\"language-python\">robocop = re.compile(r'robocop', re.I)\nrobocop.search('Robocop is part man, part machine, all cop.').group()\n</code></pre>\n<pre><code class=\"language-python\">robocop.search('ROBOCOP protects the innocent.').group()\n</code></pre>\n<pre><code class=\"language-python\">robocop.search('Al, why does your programming book talk about robocop so much?').group()\n</code></pre>\n<h3>Substituting Strings with the sub() Method</h3>\n<p>The sub() method for Regex objects is passed two arguments:</p>\n<ol>\n<li>The first argument is a string to replace any matches.</li>\n<li>The second is the string for the regular expression.</li>\n</ol>\n<p>The sub() method returns a string with the substitutions applied:</p>\n<pre><code class=\"language-python\">names_regex = re.compile(r'Agent \\w+')\nnames_regex.sub('CENSORED', 'Agent Alice gave the secret documents to Agent Bob.')\n</code></pre>\n<p>Another example:</p>\n<pre><code class=\"language-python\">agent_names_regex = re.compile(r'Agent (\\w)\\w*')\nagent_names_regex.sub(r'\\1****', 'Agent Alice told Agent Carol that Agent Eve knew Agent Bob was a double agent.')\n</code></pre>\n<h3>Managing Complex Regexes</h3>\n<p>To tell the re.compile() function to ignore whitespace and comments inside the regular expression string, “verbose mode” can be enabled by passing the variable re.VERBOSE as the second argument to re.compile().</p>\n<p>Now instead of a hard-to-read regular expression like this:</p>\n<pre><code class=\"language-python\">phone_regex = re.compile(r'((\\d{3}|\\(\\d{3}\\))?(\\s|-|\\.)?\\d{3}(\\s|-|\\.)\\d{4}(\\s*(ext|x|ext.)\\s*\\d{2,5})?)')\n</code></pre>\n<p>you can spread the regular expression over multiple lines with comments like this:</p>\n<pre><code class=\"language-python\">phone_regex = re.compile(r'''(\n    (\\d{3}|\\(\\d{3}\\))?            # area code\n    (\\s|-|\\.)?                    # separator\n    \\d{3}                         # first 3 digits\n    (\\s|-|\\.)                     # separator\n    \\d{4}                         # last 4 digits\n    (\\s*(ext|x|ext.)\\s*\\d{2,5})?  # extension\n    )''', re.VERBOSE)\n</code></pre>\n<h2>Handling File and Directory Paths</h2>\n<p>There are two main modules in Python that deals with path manipulation.\nOne is the <code>os.path</code> module and the other is the <code>pathlib</code> module.\nThe <code>pathlib</code> module was added in Python 3.4, offering an object-oriented way\nto handle file system paths.</p>\n<h3>Backslash on Windows and Forward Slash on OS X and Linux</h3>\n<p>On Windows, paths are written using backslashes () as the separator between\nfolder names. On Unix based operating system such as macOS, Linux, and BSDs,\nthe forward slash (/) is used as the path separator. Joining paths can be\na headache if your code needs to work on different platforms.</p>\n<p>Fortunately, Python provides easy ways to handle this. We will showcase\nhow to deal with this with both <code>os.path.join</code> and <code>pathlib.Path.joinpath</code></p>\n<p>Using <code>os.path.join</code> on Windows:</p>\n<pre><code class=\"language-python\">import os\n\nos.path.join('usr', 'bin', 'spam')\n</code></pre>\n<p>And using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">from pathlib import Path\n\nprint(Path('usr').joinpath('bin').joinpath('spam'))\n</code></pre>\n<p><code>pathlib</code> also provides a shortcut to joinpath using the <code>/</code> operator:</p>\n<pre><code class=\"language-python\">from pathlib import Path\n\nprint(Path('usr') / 'bin' / 'spam')\n</code></pre>\n<p>Notice the path separator is different between Windows and Unix based operating\nsystem, that's why you want to use one of the above methods instead of\nadding strings together to join paths together.</p>\n<p>Joining paths is helpful if you need to create different file paths under\nthe same directory.</p>\n<p>Using <code>os.path.join</code> on Windows:</p>\n<pre><code class=\"language-python\">my_files = ['accounts.txt', 'details.csv', 'invite.docx']\n\nfor filename in my_files:\n    print(os.path.join('C:\\\\Users\\\\asweigart', filename))\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">my_files = ['accounts.txt', 'details.csv', 'invite.docx']\nhome = Path.home()\nfor filename in my_files:\n    print(home / filename)\n</code></pre>\n<h3>The Current Working Directory</h3>\n<p>Using <code>os</code> on Windows:</p>\n<pre><code class=\"language-python\">import os\n\nos.getcwd()\n</code></pre>\n<pre><code class=\"language-python\">os.chdir('C:\\\\Windows\\\\System32')\nos.getcwd()\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">from pathlib import Path\nfrom os import chdir\n\nprint(Path.cwd())\n</code></pre>\n<pre><code class=\"language-python\">chdir('/usr/lib/python3.6')\nprint(Path.cwd())\n</code></pre>\n<h3>Creating New Folders</h3>\n<p>Using <code>os</code> on Windows:</p>\n<pre><code class=\"language-python\">import os\n\nos.makedirs('C:\\\\delicious\\\\walnut\\\\waffles')\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">from pathlib import Path\ncwd = Path.cwd()\n(cwd / 'delicious' / 'walnut' / 'waffles').mkdir()\n</code></pre>\n<p>Oh no, we got a nasty error! The reason is that the 'delicious' directory does\nnot exist, so we cannot make the 'walnut' and the 'waffles' directories under\nit. To fix this, do:</p>\n<pre><code class=\"language-python\">from pathlib import Path\ncwd = Path.cwd()\n(cwd / 'delicious' / 'walnut' / 'waffles').mkdir(parents=True)\n</code></pre>\n<p>And all is good :)</p>\n<h3>Absolute vs. Relative Paths</h3>\n<p>There are two ways to specify a file path.</p>\n<ul>\n<li>An absolute path, which always begins with the root folder</li>\n<li>A relative path, which is relative to the program’s current working directory</li>\n</ul>\n<p>There are also the dot (.) and dot-dot (..) folders. These are not real folders but special names that can be used in a path. A single period (“dot”) for a folder name is shorthand for “this directory.” Two periods (“dot-dot”) means “the parent folder.”</p>\n<h3>Handling Absolute and Relative Paths</h3>\n<p>To see if a path is an absolute path:</p>\n<p>Using <code>os.path</code> on *nix:</p>\n<pre><code class=\"language-python\">import os\n\nos.path.isabs('/')\n</code></pre>\n<pre><code class=\"language-python\">os.path.isabs('..')\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">from pathlib import Path\nPath('/').is_absolute()\n</code></pre>\n<pre><code class=\"language-python\">Path('..').is_absolute()\n</code></pre>\n<p>You can extract an absolute path with both <code>os.path</code> and <code>pathlib</code></p>\n<p>Using <code>os.path</code> on *nix:</p>\n<pre><code class=\"language-python\">import os\n\nos.getcwd()\n</code></pre>\n<pre><code class=\"language-python\">os.path.abspath('..')\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">from pathlib import Path\n\nprint(Path.cwd())\n</code></pre>\n<pre><code class=\"language-python\">print(Path('..').resolve())\n</code></pre>\n<p>You can get a relative path from a starting path to another path.</p>\n<p>Using <code>os.path</code> on *nix:</p>\n<pre><code class=\"language-python\">import os\n\nos.path.relpath('/etc/passwd', '/')\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">from pathlib import Path\n\nprint(Path('/etc/passwd').relative_to('/'))\n</code></pre>\n<h3>Checking Path Validity</h3>\n<p>Checking if a file/directory exists:</p>\n<p>Using <code>os.path</code> on *nix:</p>\n<pre><code class=\"language-python\">import os\nos.path.exists('.')\n</code></pre>\n<pre><code class=\"language-python\">os.path.exists('setup.py')\n</code></pre>\n<pre><code class=\"language-python\">os.path.exists('/etc')\n</code></pre>\n<pre><code class=\"language-python\">os.path.exists('nonexistentfile')\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">from pathlib import Path\nPath('.').exists()\n</code></pre>\n<pre><code class=\"language-python\">Path('setup.py').exists()\n</code></pre>\n<pre><code class=\"language-python\">Path('/etc').exists()\n</code></pre>\n<pre><code class=\"language-python\">Path('nonexistentfile').exists()\n</code></pre>\n<p>Checking if a path is a file:</p>\n<p>Using <code>os.path</code> on *nix:</p>\n<pre><code class=\"language-python\">import os\nos.path.isfile('setup.py')\n</code></pre>\n<pre><code class=\"language-python\">os.path.isfile('/home')\n</code></pre>\n<pre><code class=\"language-python\">os.path.isfile('nonexistentfile')\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">from pathlib import Path\n\nPath('setup.py').is_file()\n</code></pre>\n<pre><code class=\"language-python\">Path('/home').is_file()\n</code></pre>\n<pre><code class=\"language-python\">Path('nonexistentfile').is_file()\n</code></pre>\n<p>Checking if a path is a directory:</p>\n<p>Using <code>os.path</code> on *nix:</p>\n<pre><code class=\"language-python\">import os\nos.path.isdir('/')\n</code></pre>\n<pre><code class=\"language-python\">os.path.isdir('setup.py')\n</code></pre>\n<pre><code class=\"language-python\">os.path.isdir('/spam')\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">from pathlib import Path\n\nPath('/').is_dir()\n</code></pre>\n<pre><code class=\"language-python\">Path('setup.py').is_dir()\n</code></pre>\n<pre><code class=\"language-python\">Path('/spam').is_dir()\n</code></pre>\n<h3>Finding File Sizes and Folder Contents</h3>\n<p>Getting a file's size in bytes:</p>\n<p>Using <code>os.path</code> on Windows:</p>\n<pre><code class=\"language-python\">import os\nos.path.getsize('C:\\\\Windows\\\\System32\\\\calc.exe')\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">from pathlib import Path\n\nstat = Path('/bin/python3.6').stat()\nprint(stat) # stat contains some other information about the file as well\n</code></pre>\n<pre><code class=\"language-python\">print(stat.st_size) # size in bytes\n</code></pre>\n<p>Listing directory contents using <code>os.listdir</code> on Windows:</p>\n<pre><code class=\"language-python\">import os\nos.listdir('C:\\\\Windows\\\\System32')\n</code></pre>\n<p>Listing directory contents using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">from pathlib import Path\n\nfor f in Path('/usr/bin').iterdir():\n    print(f)\n</code></pre>\n<p>To find the total size of all the files in this directory:</p>\n<p><strong>WARNING</strong>: Directories themselves also have a size! So you might want to\ncheck for whether a path is a file or directory using the methods in the methods discussed in the above section!</p>\n<p>Using <code>os.path.getsize()</code> and <code>os.listdir()</code> together on Windows:</p>\n<pre><code class=\"language-python\">import os\n\ntotal_size = 0\n\nfor filename in os.listdir('C:\\\\Windows\\\\System32'):\n      total_size = total_size + os.path.getsize(os.path.join('C:\\\\Windows\\\\System32', filename))\n\nprint(total_size)\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">from pathlib import Path\ntotal_size = 0\n\nfor sub_path in Path('/usr/bin').iterdir():\n    total_size += sub_path.stat().st_size\n\nprint(total_size)\n</code></pre>\n<h3>Copying Files and Folders</h3>\n<p>The shutil module provides functions for copying files, as well as entire folders.</p>\n<pre><code class=\"language-python\">import shutil, os\n\nos.chdir('C:\\\\')\n\nshutil.copy('C:\\\\spam.txt', 'C:\\\\delicious')\n</code></pre>\n<pre><code class=\"language-python\">shutil.copy('eggs.txt', 'C:\\\\delicious\\\\eggs2.txt')\n   'C:\\\\delicious\\\\eggs2.txt'\n</code></pre>\n<p>While shutil.copy() will copy a single file, shutil.copytree() will copy an entire folder and every folder and file contained in it:</p>\n<pre><code class=\"language-python\">import shutil, os\n\nos.chdir('C:\\\\')\nshutil.copytree('C:\\\\bacon', 'C:\\\\bacon_backup')\n</code></pre>\n<h3>Moving and Renaming Files and Folders</h3>\n<pre><code class=\"language-python\">import shutil\n\nshutil.move('C:\\\\bacon.txt', 'C:\\\\eggs')\n</code></pre>\n<p>The destination path can also specify a filename. In the following example, the source file is moved and renamed:</p>\n<pre><code class=\"language-python\">shutil.move('C:\\\\bacon.txt', 'C:\\\\eggs\\\\new_bacon.txt')\n</code></pre>\n<p>If there is no eggs folder, then move() will rename bacon.txt to a file named eggs.</p>\n<pre><code class=\"language-python\">shutil.move('C:\\\\bacon.txt', 'C:\\\\eggs')\n</code></pre>\n<h3>Permanently Deleting Files and Folders</h3>\n<ul>\n<li>Calling os.unlink(path) or Path.unlink() will delete the file at path.</li>\n<li>Calling os.rmdir(path) or Path.rmdir() will delete the folder at path. This folder must be empty of any files or folders.</li>\n<li>Calling shutil.rmtree(path) will remove the folder at path, and all files and folders it contains will also be deleted.</li>\n</ul>\n<h3>Safe Deletes with the send2trash Module</h3>\n<p>You can install this module by running pip install send2trash from a Terminal window.</p>\n<pre><code class=\"language-python\">import send2trash\n\nwith open('bacon.txt', 'a') as bacon_file: # creates the file\n    bacon_file.write('Bacon is not a vegetable.')\n\nsend2trash.send2trash('bacon.txt')\n</code></pre>\n<h3>Walking a Directory Tree</h3>\n<pre><code class=\"language-python\">import os\n\nfor folder_name, subfolders, filenames in os.walk('C:\\\\delicious'):\n    print('The current folder is {}'.format(folder_name))\n\n    for subfolder in subfolders:\n        print('SUBFOLDER OF {}: {}'.format(folder_name, subfolder))\n    for filename in filenames:\n        print('FILE INSIDE {}: {}'.format(folder_name, filename))\n\n    print('')\n</code></pre>\n<p><code>pathlib</code> provides a lot more functionality than the ones listed above,\nlike getting file name, getting file extension, reading/writing a file without\nmanually opening it, etc. Check out the\n<a href=\"https://docs.python.org/3/library/pathlib.html\">official documentation</a>\nif you want to know more!</p>\n<h2>Reading and Writing Files</h2>\n<h3>The File Reading/Writing Process</h3>\n<p>To read/write to a file in Python, you will want to use the <code>with</code>\nstatement, which will close the file for you after you are done.</p>\n<h3>Opening and reading files with the open function</h3>\n<pre><code class=\"language-python\">with open('C:\\\\Users\\\\your_home_folder\\\\hello.txt') as hello_file:\n    hello_content = hello_file.read()\n\nhello_content\n</code></pre>\n<p>Alternatively, you can use the <em>readlines()</em> method to get a list of string values from the file, one string for each line of text:</p>\n<pre><code class=\"language-python\">with open('sonnet29.txt') as sonnet_file:\n    sonnet_file.readlines()\n</code></pre>\n<p>You can also iterate through the file line by line:</p>\n<pre><code class=\"language-python\">with open('sonnet29.txt') as sonnet_file:\n    for line in sonnet_file: # note the new line character will be included in the line\n        print(line, end='')\n</code></pre>\n<h3>Writing to Files</h3>\n<pre><code class=\"language-python\">with open('bacon.txt', 'w') as bacon_file:\n    bacon_file.write('Hello world!\\n')\n</code></pre>\n<pre><code class=\"language-python\">with open('bacon.txt', 'a') as bacon_file:\n    bacon_file.write('Bacon is not a vegetable.')\n</code></pre>\n<pre><code class=\"language-python\">with open('bacon.txt') as bacon_file:\n    content = bacon_file.read()\n\nprint(content)\n</code></pre>\n<h3>Saving Variables with the shelve Module</h3>\n<p>To save variables:</p>\n<pre><code class=\"language-python\">import shelve\n\ncats = ['Zophie', 'Pooka', 'Simon']\nwith shelve.open('mydata') as shelf_file:\n    shelf_file['cats'] = cats\n</code></pre>\n<p>To open and read variables:</p>\n<pre><code class=\"language-python\">with shelve.open('mydata') as shelf_file:\n    print(type(shelf_file))\n    print(shelf_file['cats'])\n</code></pre>\n<p>Just like dictionaries, shelf values have keys() and values() methods that will return list-like values of the keys and values in the shelf. Since these methods return list-like values instead of true lists, you should pass them to the list() function to get them in list form.</p>\n<pre><code class=\"language-python\">with shelve.open('mydata') as shelf_file:\n    print(list(shelf_file.keys()))\n    print(list(shelf_file.values()))\n</code></pre>\n<h3>Saving Variables with pprint.pformat</h3>\n<pre><code class=\"language-python\">import pprint\n\ncats = [{'name': 'Zophie', 'desc': 'chubby'}, {'name': 'Pooka', 'desc': 'fluffy'}]\npprint.pformat(cats)\n</code></pre>\n<pre><code class=\"language-python\">with open('myCats.py', 'w') as file_obj:\n    file_obj.write('cats = {}\\n'.format(pprint.pformat(cats)))\n</code></pre>\n<h3>Reading ZIP Files</h3>\n<pre><code class=\"language-python\">import zipfile, os\n\nos.chdir('C:\\\\')    # move to the folder with example.zip\nwith zipfile.ZipFile('example.zip') as example_zip:\n    print(example_zip.namelist())\n    spam_info = example_zip.getinfo('spam.txt')\n    print(spam_info.file_size)\n    print(spam_info.compress_size)\n    print('Compressed file is %sx smaller!' % (round(spam_info.file_size / spam_info.compress_size, 2)))\n</code></pre>\n<h3>Extracting from ZIP Files</h3>\n<p>The extractall() method for ZipFile objects extracts all the files and folders from a ZIP file into the current working directory.</p>\n<pre><code class=\"language-python\">import zipfile, os\n\nos.chdir('C:\\\\')    # move to the folder with example.zip\n\nwith zipfile.ZipFile('example.zip') as example_zip:\n    example_zip.extractall()\n</code></pre>\n<p>The extract() method for ZipFile objects will extract a single file from the ZIP file. Continue the interactive shell example:</p>\n<pre><code class=\"language-python\">with zipfile.ZipFile('example.zip') as example_zip:\n    print(example_zip.extract('spam.txt'))\n    print(example_zip.extract('spam.txt', 'C:\\\\some\\\\new\\\\folders'))\n</code></pre>\n<h3>Creating and Adding to ZIP Files</h3>\n<pre><code class=\"language-python\">import zipfile\n\nwith zipfile.ZipFile('new.zip', 'w') as new_zip:\n    new_zip.write('spam.txt', compress_type=zipfile.ZIP_DEFLATED)\n</code></pre>\n<p>This code will create a new ZIP file named new.zip that has the compressed contents of spam.txt.</p>\n<h2>JSON, YAML and configuration files</h2>\n<h3>JSON</h3>\n<p>Open a JSON file with:</p>\n<pre><code class=\"language-python\">import json\nwith open(\"filename.json\", \"r\") as f:\n    content = json.loads(f.read())\n</code></pre>\n<p>Write a JSON file with:</p>\n<pre><code class=\"language-python\">import json\n\ncontent = {\"name\": \"Joe\", \"age\": 20}\nwith open(\"filename.json\", \"w\") as f:\n    f.write(json.dumps(content, indent=2))\n</code></pre>\n<h3>YAML</h3>\n<p>Compared to JSON, YAML allows a much better humain maintainance and gives ability to add comments.\nIt is a convinient choice for configuration files where human will have to edit.</p>\n<p>There are two main librairies allowing to access to YAML files:</p>\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/PyYAML\">PyYaml</a></li>\n<li><a href=\"https://pypi.python.org/pypi/ruamel.yaml\">Ruamel.yaml</a></li>\n</ul>\n<p>Install them using <code>pip install</code> in your virtual environment.</p>\n<p>The first one it easier to use but the second one, Ruamel, implements much better the YAML\nspecification, and allow for example to modify a YAML content without altering comments.</p>\n<p>Open a YAML file with:</p>\n<pre><code class=\"language-python\">from ruamel.yaml import YAML\n\nwith open(\"filename.yaml\") as f:\n    yaml=YAML()\n    yaml.load(f)\n</code></pre>\n<h3>Anyconfig</h3>\n<p><a href=\"https://pypi.python.org/pypi/anyconfig\">Anyconfig</a> is a very handy package allowing to abstract completly the underlying configuration file format. It allows to load a Python dictionary from JSON, YAML, TOML, and so on.</p>\n<p>Install it with:</p>\n<pre><code class=\"language-bash\">pip install anyconfig\n</code></pre>\n<p>Usage:</p>\n<pre><code class=\"language-python\">import anyconfig\n\nconf1 = anyconfig.load(\"/path/to/foo/conf.d/a.yml\")\n</code></pre>\n<h2>Debugging</h2>\n<h3>Raising Exceptions</h3>\n<p>Exceptions are raised with a raise statement. In code, a raise statement consists of the following:</p>\n<ul>\n<li>The raise keyword</li>\n<li>A call to the Exception() function</li>\n<li>A string with a helpful error message passed to the Exception() function</li>\n</ul>\n<pre><code class=\"language-python\">raise Exception('This is the error message.')\nTraceback (most recent call last):\n  File \"&#x3C;pyshell#191>\", line 1, in &#x3C;module>\n    raise Exception('This is the error message.')\nException: This is the error message.\n</code></pre>\n<p>Often it’s the code that calls the function, not the function itself, that knows how to handle an expection. So you will commonly see a raise statement inside a function and the try and except statements in the code calling the function.</p>\n<pre><code class=\"language-python\">def box_print(symbol, width, height):\n    if len(symbol) != 1:\n      raise Exception('Symbol must be a single character string.')\n    if width &#x3C;= 2:\n      raise Exception('Width must be greater than 2.')\n    if height &#x3C;= 2:\n      raise Exception('Height must be greater than 2.')\n    print(symbol * width)\n    for i in range(height - 2):\n        print(symbol + (' ' * (width - 2)) + symbol)\n    print(symbol * width)\nfor sym, w, h in (('*', 4, 4), ('O', 20, 5), ('x', 1, 3), ('ZZ', 3, 3)):\n    try:\n        box_print(sym, w, h)\n    except Exception as err:\n        print('An exception happened: ' + str(err))\n</code></pre>\n<h3>Getting the Traceback as a String</h3>\n<p>The traceback is displayed by Python whenever a raised exception goes unhandled. But can also obtain it as a string by calling traceback.format_exc(). This function is useful if you want the information from an exception’s traceback but also want an except statement to gracefully handle the exception. You will need to import Python’s traceback module before calling this function.</p>\n<pre><code class=\"language-python\">import traceback\n\ntry:\n     raise Exception('This is the error message.')\nexcept:\n     with open('errorInfo.txt', 'w') as error_file:\n         error_file.write(traceback.format_exc())\n     print('The traceback info was written to errorInfo.txt.')\n</code></pre>\n<p>The 116 is the return value from the write() method, since 116 characters were written to the file. The traceback text was written to errorInfo.txt.</p>\n<pre><code>Traceback (most recent call last):\n  File \"&#x3C;pyshell#28>\", line 2, in &#x3C;module>\nException: This is the error message.\n</code></pre>\n<h3>Assertions</h3>\n<p>An assertion is a sanity check to make sure your code isn’t doing something obviously wrong. These sanity checks are performed by assert statements. If the sanity check fails, then an AssertionError exception is raised. In code, an assert statement consists of the following:</p>\n<ul>\n<li>The assert keyword</li>\n<li>A condition (that is, an expression that evaluates to True or False)</li>\n<li>A comma</li>\n<li>A string to display when the condition is False</li>\n</ul>\n<pre><code class=\"language-python\">pod_bay_door_status = 'open'\n\nassert pod_bay_door_status == 'open', 'The pod bay doors need to be \"open\".'\n\npod_bay_door_status = 'I\\'m sorry, Dave. I\\'m afraid I can\\'t do that.'\n\nassert pod_bay_door_status == 'open', 'The pod bay doors need to be \"open\".'\n</code></pre>\n<p>In plain English, an assert statement says, “I assert that this condition holds true, and if not, there is a bug somewhere in the program.” Unlike exceptions, your code should not handle assert statements with try and except; if an assert fails, your program should crash. By failing fast like this, you shorten the time between the original cause of the bug and when you first notice the bug. This will reduce the amount of code you will have to check before finding the code that’s causing the bug.</p>\n<p>Disabling Assertions</p>\n<p>Assertions can be disabled by passing the -O option when running Python.</p>\n<h3>Logging</h3>\n<p>To enable the logging module to display log messages on your screen as your program runs, copy the following to the top of your program (but under the #! python shebang line):</p>\n<pre><code class=\"language-python\">import logging\n\nlogging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s- %(message)s')\n</code></pre>\n<p>Say you wrote a function to calculate the factorial of a number. In mathematics, factorial 4 is 1 × 2 × 3 × 4, or 24. Factorial 7 is 1 × 2 × 3 × 4 × 5 × 6 × 7, or 5,040. Open a new file editor window and enter the following code. It has a bug in it, but you will also enter several log messages to help yourself figure out what is going wrong. Save the program as factorialLog.py.</p>\n<pre><code class=\"language-python\">import logging\n\nlogging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s- %(message)s')\n\nlogging.debug('Start of program')\n\ndef factorial(n):\n\n    logging.debug('Start of factorial(%s)' % (n))\n    total = 1\n\n    for i in range(1, n + 1):\n        total *= i\n        logging.debug('i is ' + str(i) + ', total is ' + str(total))\n\n    logging.debug('End of factorial(%s)' % (n))\n\n    return total\n\nprint(factorial(5))\nlogging.debug('End of program')\n</code></pre>\n<h3>Logging Levels</h3>\n<p>Logging levels provide a way to categorize your log messages by importance. There are five logging levels, described in Table 10-1 from least to most important. Messages can be logged at each level using a different logging function.</p>\n<table>\n<thead>\n<tr>\n<th>Level</th>\n<th>Logging Function</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>DEBUG</code></td>\n<td><code>logging.debug()</code></td>\n<td>The lowest level. Used for small details. Usually you care about these messages only when diagnosing problems.</td>\n</tr>\n<tr>\n<td><code>INFO</code></td>\n<td><code>logging.info()</code></td>\n<td>Used to record information on general events in your program or confirm that things are working at their point in the program.</td>\n</tr>\n<tr>\n<td><code>WARNING</code></td>\n<td><code>logging.warning()</code></td>\n<td>Used to indicate a potential problem that doesn’t prevent the program from working but might do so in the future.</td>\n</tr>\n<tr>\n<td><code>ERROR</code></td>\n<td><code>logging.error()</code></td>\n<td>Used to record an error that caused the program to fail to do something.</td>\n</tr>\n<tr>\n<td><code>CRITICAL</code></td>\n<td><code>logging.critical()</code></td>\n<td>The highest level. Used to indicate a fatal error that has caused or is about to cause the program to stop running entirely.</td>\n</tr>\n</tbody>\n</table>\n<h3>Disabling Logging</h3>\n<p>After you’ve debugged your program, you probably don’t want all these log messages cluttering the screen. The logging.disable() function disables these so that you don’t have to go into your program and remove all the logging calls by hand.</p>\n<pre><code class=\"language-python\">import logging\n\nlogging.basicConfig(level=logging.INFO, format=' %(asctime)s -%(levelname)s - %(message)s')\nlogging.critical('Critical error! Critical error!')\nlogging.disable(logging.CRITICAL)\nlogging.critical('Critical error! Critical error!')\nlogging.error('Error! Error!')\n</code></pre>\n<h3>Logging to a File</h3>\n<p>Instead of displaying the log messages to the screen, you can write them to a text file. The logging.basicConfig() function takes a filename keyword argument, like so:</p>\n<pre><code class=\"language-python\">import logging\n\nlogging.basicConfig(filename='myProgramLog.txt', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')\n</code></pre>\n<h2>Lambda Functions</h2>\n<p>This function:</p>\n<pre><code class=\"language-python\">def add(x, y):\n        return x + y\n\nadd(5, 3)\n</code></pre>\n<p>Is equivalent to the <em>lambda</em> function:</p>\n<pre><code class=\"language-python\">add = lambda x, y: x + y\nadd(5, 3)\n</code></pre>\n<p>It's not even need to bind it to a name like add before:</p>\n<pre><code class=\"language-python\">(lambda x, y: x + y)(5, 3)\n</code></pre>\n<p>Like regular nested functions, lambdas also work as lexical closures:</p>\n<pre><code class=\"language-python\">def make_adder(n):\n        return lambda x: x + n\n\nplus_3 = make_adder(3)\nplus_5(4)\n</code></pre>\n<p>Note: lambda can only evaluate an expression, like a single line of code.</p>\n<h2>Ternary Conditional Operator</h2>\n<p>Many programming languages have a ternary operator, which define a conditional expression. The most common usage is to make a terse simple conditional assignment statement. In other words, it offers one-line code to evaluate the first expression if the condition is true, otherwise it evaluates the second expression.</p>\n<pre><code>&#x3C;expression1> if &#x3C;condition> else &#x3C;expression2>\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">age = 15\n\nprint('kid' if age &#x3C; 18 else 'adult')\n</code></pre>\n<p>Ternary operators can be changed:</p>\n<pre><code class=\"language-python\">age = 15\nprint('kid' if age &#x3C; 13 else 'teenager' if age &#x3C; 18 else 'adult')\n</code></pre>\n<p>The code above is equivalent to:</p>\n<pre><code class=\"language-python\">if age &#x3C; 18:\n    if age &#x3C; 12:\n        print('kid')\n    else:\n        print('teenager')\nelse:\n    print('adult')\n</code></pre>\n<h2>args and kwargs</h2>\n<p>The names <code>args and kwargs</code> are arbitrary - the important thing are the <code>*</code> and <code>**</code> operators. They can mean:</p>\n<ol>\n<li>In a function declaration, <code>*</code> means “pack all remaining positional arguments into a tuple named <code>&#x3C;name></code>”, while <code>**</code> is the same for keyword arguments (except it uses a dictionary, not a tuple).</li>\n<li>In a function call, <code>*</code> means “unpack tuple or list named <code>&#x3C;name></code> to positional arguments at this position”, while <code>**</code> is the same for keyword arguments.</li>\n</ol>\n<p>For example you can make a function that you can use to call any other function, no matter what parameters it has:</p>\n<pre><code class=\"language-python\">def forward(f, *args, **kwargs):\n    return f(*args, **kwargs)\n</code></pre>\n<p>Inside forward, args is a tuple (of all positional arguments except the first one, because we specified it - the f), kwargs is a dict. Then we call f and unpack them so they become normal arguments to f.</p>\n<p>You use <code>*args</code> when you have an indefinite amount of positional arguments.</p>\n<pre><code class=\"language-python\">def fruits(*args):\n   for fruit in args:\n      print(fruit)\n\nfruits(\"apples\", \"bananas\", \"grapes\")\n</code></pre>\n<p>Similarly, you use <code>**kwargs</code> when you have an indefinite number of keyword arguments.</p>\n<pre><code class=\"language-python\">def fruit(**kwargs):\n   for key, value in kwargs.items():\n       print(\"{0}: {1}\".format(key, value))\n\nfruit(name = \"apple\", color = \"red\")\n</code></pre>\n<pre><code class=\"language-python\">def show(arg1, arg2, *args, kwarg1=None, kwarg2=None, **kwargs):\n  print(arg1)\n  print(arg2)\n  print(args)\n  print(kwarg1)\n  print(kwarg2)\n  print(kwargs)\n\ndata1 = [1,2,3]\ndata2 = [4,5,6]\ndata3 = {'a':7,'b':8,'c':9}\n\nshow(*data1,*data2, kwarg1=\"python\",kwarg2=\"cheatsheet\",**data3)\n</code></pre>\n<pre><code class=\"language-python\">show(*data1, *data2, **data3)\n</code></pre>\n<p>If you do not specify ** for kwargs</p>\n<pre><code class=\"language-python\">show(*data1, *data2, *data3)\n</code></pre>\n<h3>Thinks to Remember(args)</h3>\n<ol>\n<li>Functions can accept a variable number of positional arguments by using <code>*args</code> in the def statement.</li>\n<li>You can use the items from a sequence as the positional arguments for a function with the <code>*</code> operator.</li>\n<li>Using the <code>*</code> operator with a generator may cause your program to run out of memory and crash.</li>\n<li>Adding new positional parameters to functions that accept <code>*args</code> can introduce hard-to-find bugs.</li>\n</ol>\n<h3>Thinks to remember(kwargs)</h3>\n<ol>\n<li>Function arguments can be specified by position or by keyword.</li>\n<li>Keywords make it clear what the purpose of each argument is when it would be confusing with only positional arguments.</li>\n<li>Keyword arguments with default values make it easy to add new behaviors to a function, especially when the function has existing callers.</li>\n<li>Optional keyword arguments should always be passed by keyword instead of by position.</li>\n</ol>\n<h2>Context Manager</h2>\n<p>While Python's context managers are widely used, few understand the purpose behind their use. These statements, commonly used with reading and writing files, assist the application in conserving system memory and improve resource management by ensuring specific resources are only in use for certain processes.</p>\n<h3>with statement</h3>\n<p>A context manager is an object that is notified when a context (a block of code) starts and ends. You commonly use one with the with statement. It takes care of the notifying.</p>\n<p>For example, file objects are context managers. When a context ends, the file object is closed automatically:</p>\n<pre><code class=\"language-python\">with open(filename) as f:\n    file_contents = f.read()\n\n# the open_file object has automatically been closed.\n</code></pre>\n<p>Anything that ends execution of the block causes the context manager's exit method to be called. This includes exceptions, and can be useful when an error causes you to prematurely exit from an open file or connection. Exiting a script without properly closing files/connections is a bad idea, that may cause data loss or other problems. By using a context manager you can ensure that precautions are always taken to prevent damage or loss in this way.</p>\n<h3>Writing your own contextmanager using generator syntax</h3>\n<p>It is also possible to write a context manager using generator syntax thanks to the <code>contextlib.contextmanager</code> decorator:</p>\n<pre><code class=\"language-python\">import contextlib\n\n@contextlib.contextmanager\ndef context_manager(num):\n    print('Enter')\n    yield num + 1\n    print('Exit')\nwith context_manager(2) as cm:\n    # the following instructions are run when the 'yield' point of the context\n    # manager is reached.\n    # 'cm' will have the value that was yielded\n    print('Right in the middle with cm = {}'.format(cm))\n</code></pre>\n<h2><code>__main__</code> Top-level script environment</h2>\n<p><code>__main__</code> is the name of the scope in which top-level code executes.\nA module’s <strong>name</strong> is set equal to <code>__main__</code> when read from standard input, a script, or from an interactive prompt.</p>\n<p>A module can discover whether or not it is running in the main scope by checking its own <code>__name__</code>, which allows a common idiom for conditionally executing code in a module when it is run as a script or with <code>python -m</code> but not when it is imported:</p>\n<pre><code class=\"language-python\">if __name__ == \"__main__\":\n    # execute only if run as a script\n    main()\n</code></pre>\n<p>For a package, the same effect can be achieved by including a <strong>main</strong>.py module, the contents of which will be executed when the module is run with -m.</p>\n<p>For example we are developing script which is designed to be used as module, we should do:</p>\n<pre><code class=\"language-python\"># Python program to execute function directly\ndef add(a, b):\n    return a+b\n\nadd(10, 20) # we can test it by calling the function save it as calculate.py\n</code></pre>\n<pre><code class=\"language-python\"># Now if we want to use that module by importing we have to comment out our call,\n# Instead we can write like this in calculate.py\nif __name__ == \"__main__\":\n    add(3, 5)\n</code></pre>\n<pre><code class=\"language-python\">import calculate\n\ncalculate.add(3, 5)\n</code></pre>\n<h3>Advantages</h3>\n<ol>\n<li>Every Python module has it’s <code>__name__</code> defined and if this is <code>__main__</code>, it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.</li>\n<li>If you import this script as a module in another script, the <strong>name</strong> is set to the name of the script/module.</li>\n<li>Python files can act as either reusable modules, or as standalone programs.</li>\n<li>if <code>__name__ == “main”:</code> is used to execute some code only if the file was run directly, and not imported.</li>\n</ol>\n<h2>setup.py</h2>\n<p>The setup script is the centre of all activity in building, distributing, and installing modules using the Distutils. The main purpose of the setup script is to describe your module distribution to the Distutils, so that the various commands that operate on your modules do the right thing.</p>\n<p>The <code>setup.py</code> file is at the heart of a Python project. It describes all of the metadata about your project. There a quite a few fields you can add to a project to give it a rich set of metadata describing the project. However, there are only three required fields: name, version, and packages. The name field must be unique if you wish to publish your package on the Python Package Index (PyPI). The version field keeps track of different releases of the project. The packages field describes where you’ve put the Python source code within your project.</p>\n<p>This allows you to easily install Python packages. Often it's enough to write:</p>\n<pre><code class=\"language-bash\">python setup.py install\n</code></pre>\n<p>and module will install itself.</p>\n<p>Our initial setup.py will also include information about the license and will re-use the README.txt file for the long_description field. This will look like:</p>\n<pre><code class=\"language-python\">from distutils.core import setup\nsetup(\n   name='pythonCheatsheet',\n   version='0.1',\n   packages=['pipenv',],\n   license='MIT',\n   long_description=open('README.txt').read(),\n)\n</code></pre>\n<p>Find more information visit <a href=\"http://docs.python.org/install/index.html\">http://docs.python.org/install/index.html</a>.</p>\n<h2>Dataclasses</h2>\n<p><code>Dataclasses</code> are python classes but are suited for storing data objects.\nThis module provides a decorator and functions for automatically adding generated special methods such as <code>__init__()</code> and <code>__repr__()</code> to user-defined classes.</p>\n<h3>Features</h3>\n<ol>\n<li>They store data and represent a certain data type. Ex: A number. For people familiar with ORMs, a model instance is a data object. It represents a specific kind of entity. It holds attributes that define or represent the entity.</li>\n<li>They can be compared to other objects of the same type. Ex: A number can be greater than, less than, or equal to another number.</li>\n</ol>\n<p>Python 3.7 provides a decorator dataclass that is used to convert a class into a dataclass.</p>\n<p>python 2.7</p>\n<pre><code class=\"language-python\">class Number:\n    def __init__(self, val):\n        self.val = val\n\nobj = Number(2)\nobj.val\n</code></pre>\n<p>with dataclass</p>\n<pre><code class=\"language-python\">from dataclasses import dataclass\n\n@dataclass\nclass Number:\n    val: int\n\nobj = Number(2)\nobj.val\n</code></pre>\n<h3>Default values</h3>\n<p>It is easy to add default values to the fields of your data class.</p>\n<pre><code class=\"language-python\">from dataclasses import dataclass\n\n@dataclass\nclass Product:\n    name: str\n    count: int = 0\n    price: float = 0.0\n\nobj = Product(\"Python\")\nobj.name\n</code></pre>\n<pre><code class=\"language-python\">obj.count\n</code></pre>\n<pre><code class=\"language-python\">obj.price\n</code></pre>\n<h3>Type hints</h3>\n<p>It is mandatory to define the data type in dataclass. However, If you don't want specify the datatype then, use <code>typing.Any</code>.</p>\n<pre><code class=\"language-python\">from dataclasses import dataclass\nfrom typing import Any\n\n@dataclass\nclass WithoutExplicitTypes:\n   name: Any\n   value: Any = 42\n</code></pre>\n<hr>\n<hr>\n<hr>\n<hr>\n<h1>PART 2:</h1>\n<h1>Single line comments start with a number symbol.</h1>\n<p>\"\"\" Multiline strings can be written\nusing three \"s, and are often used\nas documentation.\n\"\"\"</p>\n<p>####################################################</p>\n<h2>1. Primitive Datatypes and Operators</h2>\n<p>####################################################</p>\n<h1>You have numbers</h1>\n<p>3 # => 3</p>\n<h1>Math is what you would expect</h1>\n<p>1 + 1 # => 2\n8 - 1 # => 7\n10 * 2 # => 20\n35 / 5 # => 7.0</p>\n<h1>Integer division rounds down for both positive and negative numbers.</h1>\n<p>5 // 3 # => 1\n-5 // 3 # => -2\n5.0 // 3.0 # => 1.0 # works on floats too\n-5.0 // 3.0 # => -2.0</p>\n<h1>The result of division is always a float</h1>\n<p>10.0 / 3 # => 3.3333333333333335</p>\n<h1>Modulo operation</h1>\n<p>7 % 3 # => 1</p>\n<h1>Exponentiation (x**y, x to the yth power)</h1>\n<p>2**3 # => 8</p>\n<h1>Enforce precedence with parentheses</h1>\n<p>(1 + 3) * 2 # => 8</p>\n<h1>Boolean values are primitives (Note: the capitalization)</h1>\n<p>True\nFalse</p>\n<h1>negate with not</h1>\n<p>not True # => False\nnot False # => True</p>\n<h1>Boolean Operators</h1>\n<h1>Note \"and\" and \"or\" are case-sensitive</h1>\n<p>True and False # => False\nFalse or True # => True</p>\n<h1>True and False are actually 1 and 0 but with different keywords</h1>\n<p>True + True # => 2\nTrue * 8 # => 8\nFalse - 5 # => -5</p>\n<h1>Comparison operators look at the numerical value of True and False</h1>\n<p>0 == False # => True\n1 == True # => True\n2 == True # => False\n-5 != False # => True</p>\n<h1>Using boolean logical operators on ints casts them to booleans for evaluation, but their non-cast value is returned</h1>\n<h1>Don't mix up with bool(ints) and bitwise and/or (&#x26;,|)</h1>\n<p>bool(0) # => False\nbool(4) # => True\nbool(-6) # => True\n0 and 2 # => 0\n-5 or 0 # => -5</p>\n<h1>Equality is ==</h1>\n<p>1 == 1 # => True\n2 == 1 # => False</p>\n<h1>Inequality is !=</h1>\n<p>1 != 1 # => False\n2 != 1 # => True</p>\n<h1>More comparisons</h1>\n<p>1 &#x3C; 10 # => True\n1 > 10 # => False\n2 &#x3C;= 2 # => True\n2 >= 2 # => True</p>\n<h1>Seeing whether a value is in a range</h1>\n<p>1 &#x3C; 2 and 2 &#x3C; 3 # => True\n2 &#x3C; 3 and 3 &#x3C; 2 # => False</p>\n<h1>Chaining makes this look nicer</h1>\n<p>1 &#x3C; 2 &#x3C; 3 # => True\n2 &#x3C; 3 &#x3C; 2 # => False</p>\n<h1>(is vs. ==) is checks if two variables refer to the same object, but == checks</h1>\n<h1>if the objects pointed to have the same values.</h1>\n<p>a = [1, 2, 3, 4] # Point a at a new list, [1, 2, 3, 4]\nb = a # Point b at what a is pointing to\nb is a # => True, a and b refer to the same object\nb == a # => True, a's and b's objects are equal\nb = [1, 2, 3, 4] # Point b at a new list, [1, 2, 3, 4]\nb is a # => False, a and b do not refer to the same object\nb == a # => True, a's and b's objects are equal</p>\n<h1>Strings are created with \" or '</h1>\n<p>\"This is a string.\"\n'This is also a string.'</p>\n<h1>Strings can be added too! But try not to do this.</h1>\n<p>\"Hello \" + \"world!\" # => \"Hello world!\"</p>\n<h1>String literals (but not variables) can be concatenated without using '+'</h1>\n<p>\"Hello \" \"world!\" # => \"Hello world!\"</p>\n<h1>A string can be treated like a list of characters</h1>\n<p>\"This is a string\"[0] # => 'T'</p>\n<h1>You can find the length of a string</h1>\n<p>len(\"This is a string\") # => 16</p>\n<h1>.format can be used to format strings, like this:</h1>\n<p>\"{} can be {}\".format(\"Strings\", \"interpolated\") # => \"Strings can be interpolated\"</p>\n<h1>You can repeat the formatting arguments to save some typing.</h1>\n<p>\"{0} be nimble, {0} be quick, {0} jump over the {1}\".format(\"Jack\", \"candle stick\")</p>\n<h1>=> \"Jack be nimble, Jack be quick, Jack jump over the candle stick\"</h1>\n<h1>You can use keywords if you don't want to count.</h1>\n<p>\"{name} wants to eat {food}\".format(name=\"Bob\", food=\"lasagna\") # => \"Bob wants to eat lasagna\"</p>\n<h1>If your Python 3 code also needs to run on Python 2.5 and below, you can also</h1>\n<h1>still use the old style of formatting:</h1>\n<p>\"%s can be %s the %s way\" % (\"Strings\", \"interpolated\", \"old\") # => \"Strings can be interpolated the old way\"</p>\n<h1>You can also format using f-strings or formatted string literals (in Python 3.6+)</h1>\n<p>name = \"Reiko\"\nf\"She said her name is {name}.\" # => \"She said her name is Reiko\"</p>\n<h1>You can basically put any Python statement inside the braces and it will be output in the string.</h1>\n<p>f\"{name} is {len(name)} characters long.\" # => \"Reiko is 5 characters long.\"</p>\n<h1>None is an object</h1>\n<p>None # => None</p>\n<h1>Don't use the equality \"==\" symbol to compare objects to None</h1>\n<h1>Use \"is\" instead. This checks for equality of object identity.</h1>\n<p>\"etc\" is None # => False\nNone is None # => True</p>\n<h1>None, 0, and empty strings/lists/dicts/tuples all evaluate to False.</h1>\n<h1>All other values are True</h1>\n<p>bool(0) # => False\nbool(\"\") # => False\nbool([]) # => False\nbool({}) # => False\nbool(()) # => False</p>\n<p>####################################################</p>\n<h2>2. Variables and Collections</h2>\n<p>####################################################</p>\n<h1>Python has a print function</h1>\n<p>print(\"I'm Python. Nice to meet you!\") # => I'm Python. Nice to meet you!</p>\n<h1>By default the print function also prints out a newline at the end.</h1>\n<h1>Use the optional argument end to change the end string.</h1>\n<p>print(\"Hello, World\", end=\"!\") # => Hello, World!</p>\n<h1>Simple way to get input data from console</h1>\n<p>input<em>string</em>var = input(\"Enter some data: \") # Returns the data as a string</p>\n<h1>Note: In earlier versions of Python, input() method was named as raw_input()</h1>\n<h1>There are no declarations, only assignments.</h1>\n<h1>Convention is to use lower<em>case</em>with_underscores</h1>\n<p>some<em>var = 5\nsome</em>var # => 5</p>\n<h1>Accessing a previously unassigned variable is an exception.</h1>\n<h1>See Control Flow to learn more about exception handling.</h1>\n<p>some<em>unknown</em>var # Raises a NameError</p>\n<h1>if can be used as an expression</h1>\n<h1>Equivalent of C's '?:' ternary operator</h1>\n<p>\"yahoo!\" if 3 > 2 else 2 # => \"yahoo!\"</p>\n<h1>Lists store sequences</h1>\n<p>li = []</p>\n<h1>You can start with a prefilled list</h1>\n<p>other_li = [4, 5, 6]</p>\n<h1>Add stuff to the end of a list with append</h1>\n<p>li.append(1) # li is now [1]\nli.append(2) # li is now [1, 2]\nli.append(4) # li is now [1, 2, 4]\nli.append(3) # li is now [1, 2, 4, 3]</p>\n<h1>Remove from the end with pop</h1>\n<p>li.pop() # => 3 and li is now [1, 2, 4]</p>\n<h1>Let's put it back</h1>\n<p>li.append(3) # li is now [1, 2, 4, 3] again.</p>\n<h1>Access a list like you would any array</h1>\n<p>li[0] # => 1</p>\n<h1>Look at the last element</h1>\n<p>li[-1] # => 3</p>\n<h1>Looking out of bounds is an IndexError</h1>\n<p>li[4] # Raises an IndexError</p>\n<h1>You can look at ranges with slice syntax.</h1>\n<h1>The start index is included, the end index is not</h1>\n<h1>(It's a closed/open range for you mathy types.)</h1>\n<p>li[1:3] # Return list from index 1 to 3 => [2, 4]\nli[2:] # Return list starting from index 2 => [4, 3]\nli[:3] # Return list from beginning until index 3 => [1, 2, 4]\nli[::2] # Return list selecting every second entry => [1, 4]\nli[::-1] # Return list in reverse order => [3, 4, 2, 1]</p>\n<h1>Use any combination of these to make advanced slices</h1>\n<h1>li[start:end:step]</h1>\n<h1>Make a one layer deep copy using slices</h1>\n<p>li2 = li[:] # => li2 = [1, 2, 4, 3] but (li2 is li) will result in false.</p>\n<h1>Remove arbitrary elements from a list with \"del\"</h1>\n<p>del li[2] # li is now [1, 2, 3]</p>\n<h1>Remove first occurrence of a value</h1>\n<p>li.remove(2) # li is now [1, 3]\nli.remove(2) # Raises a ValueError as 2 is not in the list</p>\n<h1>Insert an element at a specific index</h1>\n<p>li.insert(1, 2) # li is now [1, 2, 3] again</p>\n<h1>Get the index of the first item found matching the argument</h1>\n<p>li.index(2) # => 1\nli.index(4) # Raises a ValueError as 4 is not in the list</p>\n<h1>You can add lists</h1>\n<h1>Note: values for li and for other_li are not modified.</h1>\n<p>li + other_li # => [1, 2, 3, 4, 5, 6]</p>\n<h1>Concatenate lists with \"extend()\"</h1>\n<p>li.extend(other_li) # Now li is [1, 2, 3, 4, 5, 6]</p>\n<h1>Check for existence in a list with \"in\"</h1>\n<p>1 in li # => True</p>\n<h1>Examine the length with \"len()\"</h1>\n<p>len(li) # => 6</p>\n<h1>Tuples are like lists but are immutable.</h1>\n<p>tup = (1, 2, 3)\ntup[0] # => 1\ntup[0] = 3 # Raises a TypeError</p>\n<h1>Note that a tuple of length one has to have a comma after the last element but</h1>\n<h1>tuples of other lengths, even zero, do not.</h1>\n<p>type((1)) # => &#x3C;class 'int'>\ntype((1,)) # => &#x3C;class 'tuple'>\ntype(()) # => &#x3C;class 'tuple'></p>\n<h1>You can do most of the list operations on tuples too</h1>\n<p>len(tup) # => 3\ntup + (4, 5, 6) # => (1, 2, 3, 4, 5, 6)\ntup[:2] # => (1, 2)\n2 in tup # => True</p>\n<h1>You can unpack tuples (or lists) into variables</h1>\n<p>a, b, c = (1, 2, 3) # a is now 1, b is now 2 and c is now 3</p>\n<h1>You can also do extended unpacking</h1>\n<p>a, *b, c = (1, 2, 3, 4) # a is now 1, b is now [2, 3] and c is now 4</p>\n<h1>Tuples are created by default if you leave out the parentheses</h1>\n<p>d, e, f = 4, 5, 6 # tuple 4, 5, 6 is unpacked into variables d, e and f</p>\n<h1>respectively such that d = 4, e = 5 and f = 6</h1>\n<h1>Now look how easy it is to swap two values</h1>\n<p>e, d = d, e # d is now 5 and e is now 4</p>\n<h1>Dictionaries store mappings from keys to values</h1>\n<p>empty_dict = {}</p>\n<h1>Here is a prefilled dictionary</h1>\n<p>filled_dict = {\"one\": 1, \"two\": 2, \"three\": 3}</p>\n<h1>Note keys for dictionaries have to be immutable types. This is to ensure that</h1>\n<h1>the key can be converted to a constant hash value for quick look-ups.</h1>\n<h1>Immutable types include ints, floats, strings, tuples.</h1>\n<p>invalid<em>dict = {[1,2,3]: \"123\"} # => Raises a TypeError: unhashable type: 'list'\nvalid</em>dict = {(1,2,3):[1,2,3]} # Values can be of any type, however.</p>\n<h1>Look up values with []</h1>\n<p>filled_dict[\"one\"] # => 1</p>\n<h1>Get all keys as an iterable with \"keys()\". We need to wrap the call in list()</h1>\n<h1>to turn it into a list. We'll talk about those later. Note - for Python</h1>\n<h1>versions &#x3C;3.7, dictionary key ordering is not guaranteed. Your results might</h1>\n<h1>not match the example below exactly. However, as of Python 3.7, dictionary</h1>\n<h1>items maintain the order at which they are inserted into the dictionary.</h1>\n<p>list(filled<em>dict.keys()) # => [\"three\", \"two\", \"one\"] in Python &#x3C;3.7\nlist(filled</em>dict.keys()) # => [\"one\", \"two\", \"three\"] in Python 3.7+</p>\n<h1>Get all values as an iterable with \"values()\". Once again we need to wrap it</h1>\n<h1>in list() to get it out of the iterable. Note - Same as above regarding key</h1>\n<h1>ordering.</h1>\n<p>list(filled<em>dict.values()) # => [3, 2, 1] in Python &#x3C;3.7\nlist(filled</em>dict.values()) # => [1, 2, 3] in Python 3.7+</p>\n<h1>Check for existence of keys in a dictionary with \"in\"</h1>\n<p>\"one\" in filled<em>dict # => True\n1 in filled</em>dict # => False</p>\n<h1>Looking up a non-existing key is a KeyError</h1>\n<p>filled_dict[\"four\"] # KeyError</p>\n<h1>Use \"get()\" method to avoid the KeyError</h1>\n<p>filled<em>dict.get(\"one\") # => 1\nfilled</em>dict.get(\"four\") # => None</p>\n<h1>The get method supports a default argument when the value is missing</h1>\n<p>filled<em>dict.get(\"one\", 4) # => 1\nfilled</em>dict.get(\"four\", 4) # => 4</p>\n<h1>\"setdefault()\" inserts into a dictionary only if the given key isn't present</h1>\n<p>filled<em>dict.setdefault(\"five\", 5) # filled</em>dict[\"five\"] is set to 5\nfilled<em>dict.setdefault(\"five\", 6) # filled</em>dict[\"five\"] is still 5</p>\n<h1>Adding to a dictionary</h1>\n<p>filled<em>dict.update({\"four\":4}) # => {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4}\nfilled</em>dict[\"four\"] = 4 # another way to add to dict</p>\n<h1>Remove keys from a dictionary with del</h1>\n<p>del filled_dict[\"one\"] # Removes the key \"one\" from filled dict</p>\n<h1>From Python 3.5 you can also use the additional unpacking options</h1>\n<p>{'a': 1, **{'b': 2}} # => {'a': 1, 'b': 2}\n{'a': 1, **{'a': 2}} # => {'a': 2}</p>\n<h1>Sets store ... well sets</h1>\n<p>empty_set = set()</p>\n<h1>Initialize a set with a bunch of values. Yeah, it looks a bit like a dict. Sorry.</h1>\n<p>some<em>set = {1, 1, 2, 2, 3, 4} # some</em>set is now {1, 2, 3, 4}</p>\n<h1>Similar to keys of a dictionary, elements of a set have to be immutable.</h1>\n<p>invalid<em>set = {[1], 1} # => Raises a TypeError: unhashable type: 'list'\nvalid</em>set = {(1,), 1}</p>\n<h1>Add one more item to the set</h1>\n<p>filled<em>set = some</em>set\nfilled<em>set.add(5) # filled</em>set is now {1, 2, 3, 4, 5}</p>\n<h1>Sets do not have duplicate elements</h1>\n<p>filled_set.add(5) # it remains as before {1, 2, 3, 4, 5}</p>\n<h1>Do set intersection with &#x26;</h1>\n<p>other<em>set = {3, 4, 5, 6}\nfilled</em>set &#x26; other_set # => {3, 4, 5}</p>\n<h1>Do set union with |</h1>\n<p>filled<em>set | other</em>set # => {1, 2, 3, 4, 5, 6}</p>\n<h1>Do set difference with -</h1>\n<p>{1, 2, 3, 4} - {2, 3, 5} # => {1, 4}</p>\n<h1>Do set symmetric difference with ^</h1>\n<p>{1, 2, 3, 4} ^ {2, 3, 5} # => {1, 4, 5}</p>\n<h1>Check if set on the left is a superset of set on the right</h1>\n<p>{1, 2} >= {1, 2, 3} # => False</p>\n<h1>Check if set on the left is a subset of set on the right</h1>\n<p>{1, 2} &#x3C;= {1, 2, 3} # => True</p>\n<h1>Check for existence in a set with in</h1>\n<p>2 in filled<em>set # => True\n10 in filled</em>set # => False</p>\n<p>####################################################</p>\n<h2>3. Control Flow and Iterables</h2>\n<p>####################################################</p>\n<h1>Let's just make a variable</h1>\n<p>some_var = 5</p>\n<h1>Here is an if statement. Indentation is significant in Python!</h1>\n<h1>Convention is to use four spaces, not tabs.</h1>\n<h1>This prints \"some_var is smaller than 10\"</h1>\n<p>if some<em>var > 10:\nprint(\"some</em>var is totally bigger than 10.\")\nelif some<em>var &#x3C; 10: # This elif clause is optional.\nprint(\"some</em>var is smaller than 10.\")\nelse: # This is optional too.\nprint(\"some_var is indeed 10.\")</p>\n<p>\"\"\"\nFor loops iterate over lists\nprints:\ndog is a mammal\ncat is a mammal\nmouse is a mammal\n\"\"\"\nfor animal in [\"dog\", \"cat\", \"mouse\"]: # You can use format() to interpolate formatted strings\nprint(\"{} is a mammal\".format(animal))</p>\n<p>\"\"\"\n\"range(number)\" returns an iterable of numbers\nfrom zero to the given number\nprints:\n0\n1\n2\n3\n\"\"\"\nfor i in range(4):\nprint(i)</p>\n<p>\"\"\"\n\"range(lower, upper)\" returns an iterable of numbers\nfrom the lower number to the upper number\nprints:\n4\n5\n6\n7\n\"\"\"\nfor i in range(4, 8):\nprint(i)</p>\n<p>\"\"\"\n\"range(lower, upper, step)\" returns an iterable of numbers\nfrom the lower number to the upper number, while incrementing\nby step. If step is not indicated, the default value is 1.\nprints:\n4\n6\n\"\"\"\nfor i in range(4, 8, 2):\nprint(i)</p>\n<p>\"\"\"\nTo loop over a list, and retrieve both the index and the value of each item in the list\nprints:\n0 dog\n1 cat\n2 mouse\n\"\"\"\nlist = [\"dog\", \"cat\", \"mouse\"]\nfor i, value in enumerate(list):\nprint(i, value)</p>\n<p>\"\"\"\nWhile loops go until a condition is no longer met.\nprints:\n0\n1\n2\n3\n\"\"\"\nx = 0\nwhile x &#x3C; 4:\nprint(x)\nx += 1 # Shorthand for x = x + 1</p>\n<h1>Handle exceptions with a try/except block</h1>\n<p>try: # Use \"raise\" to raise an error\nraise IndexError(\"This is an index error\")\nexcept IndexError as e:\npass # Pass is just a no-op. Usually you would do recovery here.\nexcept (TypeError, NameError):\npass # Multiple exceptions can be handled together, if required.\nelse: # Optional clause to the try/except block. Must follow all except blocks\nprint(\"All good!\") # Runs only if the code in try raises no exceptions\nfinally: # Execute under all circumstances\nprint(\"We can clean up resources here\")</p>\n<h1>Instead of try/finally to cleanup resources you can use a with statement</h1>\n<p>with open(\"myfile.txt\") as f:\nfor line in f:\nprint(line)</p>\n<h1>Writing to a file</h1>\n<p>contents = {\"aa\": 12, \"bb\": 21}\nwith open(\"myfile1.txt\", \"w+\") as file:\nfile.write(str(contents)) # writes a string to a file</p>\n<p>with open(\"myfile2.txt\", \"w+\") as file:\nfile.write(json.dumps(contents)) # writes an object to a file</p>\n<h1>Reading from a file</h1>\n<p>with open('myfile1.txt', \"r+\") as file:\ncontents = file.read() # reads a string from a file\nprint(contents)</p>\n<h1>print: {\"aa\": 12, \"bb\": 21}</h1>\n<p>with open('myfile2.txt', \"r+\") as file:\ncontents = json.load(file) # reads a json object from a file\nprint(contents)</p>\n<h1>print: {\"aa\": 12, \"bb\": 21}</h1>\n<h1>Python offers a fundamental abstraction called the Iterable.</h1>\n<h1>An iterable is an object that can be treated as a sequence.</h1>\n<h1>The object returned by the range function, is an iterable.</h1>\n<p>filled<em>dict = {\"one\": 1, \"two\": 2, \"three\": 3}\nour</em>iterable = filled<em>dict.keys()\nprint(our</em>iterable) # => dict_keys(['one', 'two', 'three']). This is an object that implements our Iterable interface.</p>\n<h1>We can loop over it.</h1>\n<p>for i in our_iterable:\nprint(i) # Prints one, two, three</p>\n<h1>However we cannot address elements by index.</h1>\n<p>our_iterable[1] # Raises a TypeError</p>\n<h1>An iterable is an object that knows how to create an iterator.</h1>\n<p>our<em>iterator = iter(our</em>iterable)</p>\n<h1>Our iterator is an object that can remember the state as we traverse through it.</h1>\n<h1>We get the next object with \"next()\".</h1>\n<p>next(our_iterator) # => \"one\"</p>\n<h1>It maintains state as we iterate.</h1>\n<p>next(our<em>iterator) # => \"two\"\nnext(our</em>iterator) # => \"three\"</p>\n<h1>After the iterator has returned all of its data, it raises a StopIteration exception</h1>\n<p>next(our_iterator) # Raises StopIteration</p>\n<h1>We can also loop over it, in fact, \"for\" does this implicitly!</h1>\n<p>our<em>iterator = iter(our</em>iterable)\nfor i in our_iterator:\nprint(i) # Prints one, two, three</p>\n<h1>You can grab all the elements of an iterable or iterator by calling list() on it.</h1>\n<p>list(our<em>iterable) # => Returns [\"one\", \"two\", \"three\"]\nlist(our</em>iterator) # => Returns [] because state is saved</p>\n<p>####################################################</p>\n<h2>4. Functions</h2>\n<p>####################################################</p>\n<h1>Use \"def\" to create new functions</h1>\n<p>def add(x, y):\nprint(\"x is {} and y is {}\".format(x, y))\nreturn x + y # Return values with a return statement</p>\n<h1>Calling functions with parameters</h1>\n<p>add(5, 6) # => prints out \"x is 5 and y is 6\" and returns 11</p>\n<h1>Another way to call functions is with keyword arguments</h1>\n<p>add(y=6, x=5) # Keyword arguments can arrive in any order.</p>\n<h1>You can define functions that take a variable number of</h1>\n<h1>positional arguments</h1>\n<p>def varargs(*args):\nreturn args</p>\n<p>varargs(1, 2, 3) # => (1, 2, 3)</p>\n<h1>You can define functions that take a variable number of</h1>\n<h1>keyword arguments, as well</h1>\n<p>def keyword_args(**kwargs):\nreturn kwargs</p>\n<h1>Let's call it to see what happens</h1>\n<p>keyword_args(big=\"foot\", loch=\"ness\") # => {\"big\": \"foot\", \"loch\": \"ness\"}</p>\n<h1>You can do both at once, if you like</h1>\n<p>def all<em>the</em>args(*args, **kwargs):\nprint(args)\nprint(kwargs)\n\"\"\"\nall<em>the</em>args(1, 2, a=3, b=4) prints:\n(1, 2)\n{\"a\": 3, \"b\": 4}\n\"\"\"</p>\n<h1>When calling functions, you can do the opposite of args/kwargs!</h1>\n<h1>Use * to expand tuples and use ** to expand kwargs.</h1>\n<p>args = (1, 2, 3, 4)\nkwargs = {\"a\": 3, \"b\": 4}\nall<em>the</em>args(<em>args) # equivalent to all<em>the</em>args(1, 2, 3, 4)\nall<em>the</em>args(\\</em>*kwargs) # equivalent to all<em>the</em>args(a=3, b=4)\nall<em>the</em>args(<em>args, \\</em>*kwargs) # equivalent to all<em>the</em>args(1, 2, 3, 4, a=3, b=4)</p>\n<h1>Returning multiple values (with tuple assignments)</h1>\n<p>def swap(x, y):\nreturn y, x # Return multiple values as a tuple without the parenthesis. # (Note: parenthesis have been excluded but can be included)</p>\n<p>x = 1\ny = 2\nx, y = swap(x, y) # => x = 2, y = 1</p>\n<h1>(x, y) = swap(x,y) # Again parenthesis have been excluded but can be included.</h1>\n<h1>Function Scope</h1>\n<p>x = 5</p>\n<p>def set_x(num): # Local var x not the same as global variable x\nx = num # => 43\nprint(x) # => 43</p>\n<p>def set<em>global</em>x(num):\nglobal x\nprint(x) # => 5\nx = num # global var x is now set to 6\nprint(x) # => 6</p>\n<p>set<em>x(43)\nset</em>global_x(6)</p>\n<h1>Python has first class functions</h1>\n<p>def create_adder(x):\ndef adder(y):\nreturn x + y\nreturn adder</p>\n<p>add<em>10 = create</em>adder(10)\nadd_10(3) # => 13</p>\n<h1>There are also anonymous functions</h1>\n<p>(lambda x: x > 2)(3) # => True\n(lambda x, y: x ** 2 + y ** 2)(2, 1) # => 5</p>\n<h1>There are built-in higher order functions</h1>\n<p>list(map(add_10, [1, 2, 3])) # => [11, 12, 13]\nlist(map(max, [1, 2, 3], [4, 2, 1])) # => [4, 2, 3]</p>\n<p>list(filter(lambda x: x > 5, [3, 4, 5, 6, 7])) # => [6, 7]</p>\n<h1>We can use list comprehensions for nice maps and filters</h1>\n<h1>List comprehension stores the output as a list which can itself be a nested list</h1>\n<p>[add_10(i) for i in [1, 2, 3]] # => [11, 12, 13]\n[x for x in [3, 4, 5, 6, 7] if x > 5] # => [6, 7]</p>\n<h1>You can construct set and dict comprehensions as well.</h1>\n<p>{x for x in 'abcddeef' if x not in 'abc'} # => {'d', 'e', 'f'}\n{x: x**2 for x in range(5)} # => {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}</p>\n<p>####################################################</p>\n<h2>5. Modules</h2>\n<p>####################################################</p>\n<h1>You can import modules</h1>\n<p>import math\nprint(math.sqrt(16)) # => 4.0</p>\n<h1>You can get specific functions from a module</h1>\n<p>from math import ceil, floor\nprint(ceil(3.7)) # => 4.0\nprint(floor(3.7)) # => 3.0</p>\n<h1>You can import all functions from a module.</h1>\n<h1>Warning: this is not recommended</h1>\n<p>from math import *</p>\n<h1>You can shorten module names</h1>\n<p>import math as m\nmath.sqrt(16) == m.sqrt(16) # => True</p>\n<h1>Python modules are just ordinary Python files. You</h1>\n<h1>can write your own, and import them. The name of the</h1>\n<h1>module is the same as the name of the file.</h1>\n<h1>You can find out which functions and attributes</h1>\n<h1>are defined in a module.</h1>\n<p>import math\ndir(math)</p>\n<h1>If you have a Python script named math.py in the same</h1>\n<h1>folder as your current script, the file math.py will</h1>\n<h1>be loaded instead of the built-in Python module.</h1>\n<h1>This happens because the local folder has priority</h1>\n<h1>over Python's built-in libraries.</h1>\n<p>####################################################</p>\n<h2>6. Classes</h2>\n<p>####################################################</p>\n<h1>We use the \"class\" statement to create a class</h1>\n<p>class Human:</p>\n<pre><code># A class attribute. It is shared by all instances of this class\nspecies = \"H. sapiens\"\n\n# Basic initializer, this is called when this class is instantiated.\n# Note that the double leading and trailing underscores denote objects\n# or attributes that are used by Python but that live in user-controlled\n# namespaces. Methods(or objects or attributes) like: __init__, __str__,\n# __repr__ etc. are called special methods (or sometimes called dunder methods)\n# You should not invent such names on your own.\ndef __init__(self, name):\n    # Assign the argument to the instance's name attribute\n    self.name = name\n\n    # Initialize property\n    self._age = 0\n\n# An instance method. All methods take \"self\" as the first argument\ndef say(self, msg):\n    print(\"{name}: {message}\".format(name=self.name, message=msg))\n\n# Another instance method\ndef sing(self):\n    return 'yo... yo... microphone check... one two... one two...'\n\n# A class method is shared among all instances\n# They are called with the calling class as the first argument\n@classmethod\ndef get_species(cls):\n    return cls.species\n\n# A static method is called without a class or instance reference\n@staticmethod\ndef grunt():\n    return \"*grunt*\"\n\n# A property is just like a getter.\n# It turns the method age() into an read-only attribute of the same name.\n# There's no need to write trivial getters and setters in Python, though.\n@property\ndef age(self):\n    return self._age\n\n# This allows the property to be set\n@age.setter\ndef age(self, age):\n    self._age = age\n\n# This allows the property to be deleted\n@age.deleter\ndef age(self):\n    del self._age\n</code></pre>\n<h1>When a Python interpreter reads a source file it executes all its code.</h1>\n<h1>This <strong>name</strong> check makes sure this code block is only executed when this</h1>\n<h1>module is the main program.</h1>\n<p>if <strong>name</strong> == '<strong>main</strong>': # Instantiate a class\ni = Human(name=\"Ian\")\ni.say(\"hi\") # \"Ian: hi\"\nj = Human(\"Joel\")\nj.say(\"hello\") # \"Joel: hello\" # i and j are instances of type Human, or in other words: they are Human objects</p>\n<pre><code># Call our class method\ni.say(i.get_species())          # \"Ian: H. sapiens\"\n# Change the shared attribute\nHuman.species = \"H. neanderthalensis\"\ni.say(i.get_species())          # => \"Ian: H. neanderthalensis\"\nj.say(j.get_species())          # => \"Joel: H. neanderthalensis\"\n\n# Call the static method\nprint(Human.grunt())            # => \"*grunt*\"\n\n# Cannot call static method with instance of object\n# because i.grunt() will automatically put \"self\" (the object i) as an argument\nprint(i.grunt())                # => TypeError: grunt() takes 0 positional arguments but 1 was given\n\n# Update the property for this instance\ni.age = 42\n# Get the property\ni.say(i.age)                    # => \"Ian: 42\"\nj.say(j.age)                    # => \"Joel: 0\"\n# Delete the property\ndel i.age\n# i.age                         # => this would raise an AttributeError\n</code></pre>\n<p>####################################################</p>\n<h2>6.1 Inheritance</h2>\n<p>####################################################</p>\n<h1>Inheritance allows new child classes to be defined that inherit methods and</h1>\n<h1>variables from their parent class.</h1>\n<h1>Using the Human class defined above as the base or parent class, we can</h1>\n<h1>define a child class, Superhero, which inherits the class variables like</h1>\n<h1>\"species\", \"name\", and \"age\", as well as methods, like \"sing\" and \"grunt\"</h1>\n<h1>from the Human class, but can also have its own unique properties.</h1>\n<h1>To take advantage of modularization by file you could place the classes above in their own files,</h1>\n<h1>say, human.py</h1>\n<h1>To import functions from other files use the following format</h1>\n<h1>from \"filename-without-extension\" import \"function-or-class\"</h1>\n<p>from human import Human</p>\n<h1>Specify the parent class(es) as parameters to the class definition</h1>\n<p>class Superhero(Human):</p>\n<pre><code># If the child class should inherit all of the parent's definitions without\n# any modifications, you can just use the \"pass\" keyword (and nothing else)\n# but in this case it is commented out to allow for a unique child class:\n# pass\n\n# Child classes can override their parents' attributes\nspecies = 'Superhuman'\n\n# Children automatically inherit their parent class's constructor including\n# its arguments, but can also define additional arguments or definitions\n# and override its methods such as the class constructor.\n# This constructor inherits the \"name\" argument from the \"Human\" class and\n# adds the \"superpower\" and \"movie\" arguments:\ndef __init__(self, name, movie=False,\n             superpowers=[\"super strength\", \"bulletproofing\"]):\n\n    # add additional class attributes:\n    self.fictional = True\n    self.movie = movie\n    # be aware of mutable default values, since defaults are shared\n    self.superpowers = superpowers\n\n    # The \"super\" function lets you access the parent class's methods\n    # that are overridden by the child, in this case, the __init__ method.\n    # This calls the parent class constructor:\n    super().__init__(name)\n\n# override the sing method\ndef sing(self):\n    return 'Dun, dun, DUN!'\n\n# add an additional instance method\ndef boast(self):\n    for power in self.superpowers:\n        print(\"I wield the power of {pow}!\".format(pow=power))\n</code></pre>\n<p>if <strong>name</strong> == '<strong>main</strong>':\nsup = Superhero(name=\"Tick\")</p>\n<pre><code># Instance type checks\nif isinstance(sup, Human):\n    print('I am human')\nif type(sup) is Superhero:\n    print('I am a superhero')\n\n# Get the Method Resolution search Order used by both getattr() and super()\n# This attribute is dynamic and can be updated\nprint(Superhero.__mro__)    # => (&#x3C;class '__main__.Superhero'>,\n                            # => &#x3C;class 'human.Human'>, &#x3C;class 'object'>)\n\n# Calls parent method but uses its own class attribute\nprint(sup.get_species())    # => Superhuman\n\n# Calls overridden method\nprint(sup.sing())           # => Dun, dun, DUN!\n\n# Calls method from Human\nsup.say('Spoon')            # => Tick: Spoon\n\n# Call method that exists only in Superhero\nsup.boast()                 # => I wield the power of super strength!\n                            # => I wield the power of bulletproofing!\n\n# Inherited class attribute\nsup.age = 31\nprint(sup.age)              # => 31\n\n# Attribute that only exists within Superhero\nprint('Am I Oscar eligible? ' + str(sup.movie))\n</code></pre>\n<p>####################################################</p>\n<h2>6.2 Multiple Inheritance</h2>\n<p>####################################################</p>\n<h1>Another class definition</h1>\n<h1>bat.py</h1>\n<p>class Bat:</p>\n<pre><code>species = 'Baty'\n\ndef __init__(self, can_fly=True):\n    self.fly = can_fly\n\n# This class also has a say method\ndef say(self, msg):\n    msg = '... ... ...'\n    return msg\n\n# And its own method as well\ndef sonar(self):\n    return '))) ... ((('\n</code></pre>\n<p>if <strong>name</strong> == '<strong>main</strong>':\nb = Bat()\nprint(b.say('hello'))\nprint(b.fly)</p>\n<h1>And yet another class definition that inherits from Superhero and Bat</h1>\n<h1>superhero.py</h1>\n<p>from superhero import Superhero\nfrom bat import Bat</p>\n<h1>Define Batman as a child that inherits from both Superhero and Bat</h1>\n<p>class Batman(Superhero, Bat):</p>\n<pre><code>def __init__(self, *args, **kwargs):\n    # Typically to inherit attributes you have to call super:\n    # super(Batman, self).__init__(*args, **kwargs)\n    # However we are dealing with multiple inheritance here, and super()\n    # only works with the next base class in the MRO list.\n    # So instead we explicitly call __init__ for all ancestors.\n    # The use of *args and **kwargs allows for a clean way to pass arguments,\n    # with each parent \"peeling a layer of the onion\".\n    Superhero.__init__(self, 'anonymous', movie=True,\n                       superpowers=['Wealthy'], *args, **kwargs)\n    Bat.__init__(self, *args, can_fly=False, **kwargs)\n    # override the value for the name attribute\n    self.name = 'Sad Affleck'\n\ndef sing(self):\n    return 'nan nan nan nan nan batman!'\n</code></pre>\n<p>if <strong>name</strong> == '<strong>main</strong>':\nsup = Batman()</p>\n<pre><code># Get the Method Resolution search Order used by both getattr() and super().\n# This attribute is dynamic and can be updated\nprint(Batman.__mro__)       # => (&#x3C;class '__main__.Batman'>,\n                            # => &#x3C;class 'superhero.Superhero'>,\n                            # => &#x3C;class 'human.Human'>,\n                            # => &#x3C;class 'bat.Bat'>, &#x3C;class 'object'>)\n\n# Calls parent method but uses its own class attribute\nprint(sup.get_species())    # => Superhuman\n\n# Calls overridden method\nprint(sup.sing())           # => nan nan nan nan nan batman!\n\n# Calls method from Human, because inheritance order matters\nsup.say('I agree')          # => Sad Affleck: I agree\n\n# Call method that exists only in 2nd ancestor\nprint(sup.sonar())          # => ))) ... (((\n\n# Inherited class attribute\nsup.age = 100\nprint(sup.age)              # => 100\n\n# Inherited attribute from 2nd ancestor whose default value was overridden.\nprint('Can I fly? ' + str(sup.fly)) # => Can I fly? False\n</code></pre>\n<p>####################################################</p>\n<h2>7. Advanced</h2>\n<p>####################################################</p>\n<h1>Generators help you make lazy code.</h1>\n<p>def double_numbers(iterable):\nfor i in iterable:\nyield i + i</p>\n<h1>Generators are memory-efficient because they only load the data needed to</h1>\n<h1>process the next value in the iterable. This allows them to perform</h1>\n<h1>operations on otherwise prohibitively large value ranges.</h1>\n<h1>NOTE: <code>range</code> replaces <code>xrange</code> in Python 3.</h1>\n<p>for i in double_numbers(range(1, 900000000)): # <code>range</code> is a generator.\nprint(i)\nif i >= 30:\nbreak</p>\n<h1>Just as you can create a list comprehension, you can create generator</h1>\n<h1>comprehensions as well.</h1>\n<p>values = (-x for x in [1,2,3,4,5])\nfor x in values:\nprint(x) # prints -1 -2 -3 -4 -5 to console/terminal</p>\n<h1>You can also cast a generator comprehension directly to a list.</h1>\n<p>values = (-x for x in [1,2,3,4,5])\ngen<em>to</em>list = list(values)\nprint(gen<em>to</em>list) # => [-1, -2, -3, -4, -5]</p>\n<h1>Decorators</h1>\n<h1>In this example <code>beg</code> wraps <code>say</code>. If say_please is True then it</h1>\n<h1>will change the returned message.</h1>\n<p>from functools import wraps</p>\n<p>def beg(target<em>function):\n@wraps(target</em>function)\ndef wrapper(<em>args, \\</em>*kwargs):\nmsg, say<em>please = target</em>function(<em>args, \\</em>*kwargs)\nif say_please:\nreturn \"{} {}\".format(msg, \"Please! I am poor :(\")\nreturn msg</p>\n<pre><code>return wrapper\n</code></pre>\n<p>@beg\ndef say(say<em>please=False):\nmsg = \"Can you buy me a beer?\"\nreturn msg, say</em>please</p>\n<p>print(say()) # Can you buy me a beer?\nprint(say(say_please=True)) # Can you buy me a beer? Please! I am poor :(</p>"},{"url":"/docs/python/comprehensive-guide/","relativePath":"docs/python/comprehensive-guide.md","relativeDir":"docs/python","base":"comprehensive-guide.md","name":"comprehensive-guide","frontmatter":{"title":"lorem-ipsum","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"docs"},"html":"<h2>Comprehensive Python Guide</h2>\n<ul>\n<li>\n<p><a href=\"#about\">About</a></p>\n<ul>\n<li><a href=\"#contribute\">Contribute</a></li>\n<li><a href=\"#read-it\">Read It</a></li>\n<li><a href=\"#python-cheatsheet\">Python Cheatsheet</a></li>\n<li><a href=\"#the-zen-of-python\">The Zen of Python</a></li>\n<li>\n<p><a href=\"#python-basics\">Python Basics</a></p>\n<ul>\n<li><a href=\"#math-operators\">Math Operators</a></li>\n<li><a href=\"#data-types\">Data Types</a></li>\n<li><a href=\"#string-concatenation-and-replication\">String Concatenation and Replication</a></li>\n<li><a href=\"#variables\">Variables</a></li>\n<li><a href=\"#comments\">Comments</a></li>\n<li><a href=\"#the-print-function\">The print() Function</a></li>\n<li><a href=\"#the-input-function\">The input() Function</a></li>\n<li><a href=\"#the-len-function\">The len() Function</a></li>\n<li><a href=\"#the-str-int-and-float-functions\">The str(), int(), and float() Functions</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#flow-control\">Flow Control</a></p>\n<ul>\n<li><a href=\"#comparison-operators\">Comparison Operators</a></li>\n<li><a href=\"#boolean-evaluation\">Boolean evaluation</a></li>\n<li><a href=\"#boolean-operators\">Boolean Operators</a></li>\n<li><a href=\"#mixing-boolean-and-comparison-operators\">Mixing Boolean and Comparison Operators</a></li>\n<li><a href=\"#if-statements\">if Statements</a></li>\n<li><a href=\"#else-statements\">else Statements</a></li>\n<li><a href=\"#elif-statements\">elif Statements</a></li>\n<li><a href=\"#while-loop-statements\">while Loop Statements</a></li>\n<li><a href=\"#break-statements\">break Statements</a></li>\n<li><a href=\"#continue-statements\">continue Statements</a></li>\n<li><a href=\"#for-loops-and-the-range-function\">for Loops and the range() Function</a></li>\n<li><a href=\"#for-else-statement\">For else statement</a></li>\n<li><a href=\"#importing-modules\">Importing Modules</a></li>\n<li><a href=\"#ending-a-program-early-with-sysexit\">Ending a Program Early with sys.exit()</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#functions\">Functions</a></p>\n<ul>\n<li><a href=\"#return-values-and-return-statements\">Return Values and return Statements</a></li>\n<li><a href=\"#the-none-value\">The None Value</a></li>\n<li><a href=\"#keyword-arguments-and-print\">Keyword Arguments and print()</a></li>\n<li><a href=\"#local-and-global-scope\">Local and Global Scope</a></li>\n<li><a href=\"#the-global-statement\">The global Statement</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#exception-handling\">Exception Handling</a></p>\n<ul>\n<li><a href=\"#basic-exception-handling\">Basic exception handling</a></li>\n<li><a href=\"#final-code-in-exception-handling\">Final code in exception handling</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#lists\">Lists</a></p>\n<ul>\n<li><a href=\"#getting-individual-values-in-a-list-with-indexes\">Getting Individual Values in a List with Indexes</a></li>\n<li><a href=\"#negative-indexes\">Negative Indexes</a></li>\n<li><a href=\"#getting-sublists-with-slices\">Getting Sublists with Slices</a></li>\n<li><a href=\"#getting-a-lists-length-with-len\">Getting a List’s Length with len()</a></li>\n<li><a href=\"#changing-values-in-a-list-with-indexes\">Changing Values in a List with Indexes</a></li>\n<li><a href=\"#list-concatenation-and-list-replication\">List Concatenation and List Replication</a></li>\n<li><a href=\"#removing-values-from-lists-with-del-statements\">Removing Values from Lists with del Statements</a></li>\n<li><a href=\"#using-for-loops-with-lists\">Using for Loops with Lists</a></li>\n<li><a href=\"#looping-through-multiple-lists-with-zip\">Looping Through Multiple Lists with zip()</a></li>\n<li><a href=\"#the-in-and-not-in-operators\">The in and not in Operators</a></li>\n<li><a href=\"#the-multiple-assignment-trick\">The Multiple Assignment Trick</a></li>\n<li><a href=\"#augmented-assignment-operators\">Augmented Assignment Operators</a></li>\n<li><a href=\"#finding-a-value-in-a-list-with-the-index-method\">Finding a Value in a List with the index() Method</a></li>\n<li><a href=\"#adding-values-to-lists-with-the-append-and-insert-methods\">Adding Values to Lists with the append() and insert() Methods</a></li>\n<li><a href=\"#removing-values-from-lists-with-remove\">Removing Values from Lists with remove()</a></li>\n<li><a href=\"#removing-values-from-lists-with-pop\">Removing Values from Lists with pop()</a></li>\n<li><a href=\"#sorting-the-values-in-a-list-with-the-sort-method\">Sorting the Values in a List with the sort() Method</a></li>\n<li><a href=\"#tuple-data-type\">Tuple Data Type</a></li>\n<li><a href=\"#converting-types-with-the-list-and-tuple-functions\">Converting Types with the list() and tuple() Functions</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dictionaries-and-structuring-data\">Dictionaries and Structuring Data</a></p>\n<ul>\n<li><a href=\"#the-keys-values-and-items-methods\">The keys(), values(), and items() Methods</a></li>\n<li><a href=\"#checking-whether-a-key-or-value-exists-in-a-dictionary\">Checking Whether a Key or Value Exists in a Dictionary</a></li>\n<li><a href=\"#the-get-method\">The get() Method</a></li>\n<li><a href=\"#the-setdefault-method\">The setdefault() Method</a></li>\n<li><a href=\"#pretty-printing\">Pretty Printing</a></li>\n<li><a href=\"#merge-two-dictionaries\">Merge two dictionaries</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#sets\">sets</a></p>\n<ul>\n<li><a href=\"#initializing-a-set\">Initializing a set</a></li>\n<li><a href=\"#sets-unordered-collections-of-unique-elements\">sets: unordered collections of unique elements</a></li>\n<li><a href=\"#set-add-and-update\">set add() and update()</a></li>\n<li><a href=\"#set-remove-and-discard\">set remove() and discard()</a></li>\n<li><a href=\"#set-union\">set union()</a></li>\n<li><a href=\"#set-intersection\">set intersection</a></li>\n<li><a href=\"#set-difference\">set difference</a></li>\n<li><a href=\"#set-symetric_difference\">set symetric_difference</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#itertools-module\">itertools Module</a></p>\n<ul>\n<li><a href=\"#accumulate\">accumulate()</a></li>\n<li><a href=\"#combinations\">combinations()</a></li>\n<li><a href=\"#combinations_with_replacement\">combinations<em>with</em>replacement()</a></li>\n<li><a href=\"#count\">count()</a></li>\n<li><a href=\"#cycle\">cycle()</a></li>\n<li><a href=\"#chain\">chain()</a></li>\n<li><a href=\"#compress\">compress()</a></li>\n<li><a href=\"#dropwhile\">dropwhile()</a></li>\n<li><a href=\"#filterfalse\">filterfalse()</a></li>\n<li><a href=\"#groupby\">groupby()</a></li>\n<li><a href=\"#islice\">islice()</a></li>\n<li><a href=\"#permutations\">permutations()</a></li>\n<li><a href=\"#product\">product()</a></li>\n<li><a href=\"#repeat\">repeat()</a></li>\n<li><a href=\"#starmap\">starmap()</a></li>\n<li><a href=\"#takewhile\">takewhile()</a></li>\n<li><a href=\"#tee\">tee()</a></li>\n<li><a href=\"#zip_longest\">zip_longest()</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#comprehensions\">Comprehensions</a></p>\n<ul>\n<li><a href=\"#list-comprehension\">List comprehension</a></li>\n<li><a href=\"#set-comprehension\">Set comprehension</a></li>\n<li><a href=\"#dict-comprehension\">Dict comprehension</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#manipulating-strings\">Manipulating Strings</a></p>\n<ul>\n<li><a href=\"#escape-characters\">Escape Characters</a></li>\n<li><a href=\"#raw-strings\">Raw Strings</a></li>\n<li><a href=\"#multiline-strings-with-triple-quotes\">Multiline Strings with Triple Quotes</a></li>\n<li><a href=\"#indexing-and-slicing-strings\">Indexing and Slicing Strings</a></li>\n<li><a href=\"#the-in-and-not-in-operators-with-strings\">The in and not in Operators with Strings</a></li>\n<li><a href=\"#the-in-and-not-in-operators-with-list\">The in and not in Operators with list</a></li>\n<li><a href=\"#the-upper-lower-isupper-and-islower-string-methods\">The upper(), lower(), isupper(), and islower() String Methods</a></li>\n<li><a href=\"#the-isx-string-methods\">The isX String Methods</a></li>\n<li><a href=\"#the-startswith-and-endswith-string-methods\">The startswith() and endswith() String Methods</a></li>\n<li><a href=\"#the-join-and-split-string-methods\">The join() and split() String Methods</a></li>\n<li><a href=\"#justifying-text-with-rjust-ljust-and-center\">Justifying Text with rjust(), ljust(), and center()</a></li>\n<li><a href=\"#removing-whitespace-with-strip-rstrip-and-lstrip\">Removing Whitespace with strip(), rstrip(), and lstrip()</a></li>\n<li><a href=\"#copying-and-pasting-strings-with-the-pyperclip-module-need-pip-install\">Copying and Pasting Strings with the pyperclip Module (need pip install)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#string-formatting\">String Formatting</a></p>\n<ul>\n<li><a href=\"#-operator\">% operator</a></li>\n<li><a href=\"#string-formatting-strformat\">String Formatting (str.format)</a></li>\n<li><a href=\"#lazy-string-formatting\">Lazy string formatting</a></li>\n<li><a href=\"#formatted-string-literals-or-f-strings-python-36\">Formatted String Literals or f-strings (Python 3.6+)</a></li>\n<li><a href=\"#template-strings\">Template Strings</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#regular-expressions\">Regular Expressions</a></p>\n<ul>\n<li><a href=\"#matching-regex-objects\">Matching Regex Objects</a></li>\n<li><a href=\"#grouping-with-parentheses\">Grouping with Parentheses</a></li>\n<li><a href=\"#matching-multiple-groups-with-the-pipe\">Matching Multiple Groups with the Pipe</a></li>\n<li><a href=\"#optional-matching-with-the-question-mark\">Optional Matching with the Question Mark</a></li>\n<li><a href=\"#matching-zero-or-more-with-the-star\">Matching Zero or More with the Star</a></li>\n<li><a href=\"#matching-one-or-more-with-the-plus\">Matching One or More with the Plus</a></li>\n<li><a href=\"#matching-specific-repetitions-with-curly-brackets\">Matching Specific Repetitions with Curly Brackets</a></li>\n<li><a href=\"#greedy-and-nongreedy-matching\">Greedy and Nongreedy Matching</a></li>\n<li><a href=\"#the-findall-method\">The findall() Method</a></li>\n<li><a href=\"#making-your-own-character-classes\">Making Your Own Character Classes</a></li>\n<li><a href=\"#the-caret-and-dollar-sign-characters\">The Caret and Dollar Sign Characters</a></li>\n<li><a href=\"#the-wildcard-character\">The Wildcard Character</a></li>\n<li><a href=\"#matching-everything-with-dot-star\">Matching Everything with Dot-Star</a></li>\n<li><a href=\"#matching-newlines-with-the-dot-character\">Matching Newlines with the Dot Character</a></li>\n<li><a href=\"#review-of-regex-symbols\">Review of Regex Symbols</a></li>\n<li><a href=\"#case-insensitive-matching\">Case-Insensitive Matching</a></li>\n<li><a href=\"#substituting-strings-with-the-sub-method\">Substituting Strings with the sub() Method</a></li>\n<li><a href=\"#managing-complex-regexes\">Managing Complex Regexes</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#handling-file-and-directory-paths\">Handling File and Directory Paths</a></p>\n<ul>\n<li><a href=\"#backslash-on-windows-and-forward-slash-on-os-x-and-linux\">Backslash on Windows and Forward Slash on OS X and Linux</a></li>\n<li><a href=\"#the-current-working-directory\">The Current Working Directory</a></li>\n<li><a href=\"#creating-new-folders\">Creating New Folders</a></li>\n<li><a href=\"#absolute-vs-relative-paths\">Absolute vs. Relative Paths</a></li>\n<li><a href=\"#handling-absolute-and-relative-paths\">Handling Absolute and Relative Paths</a></li>\n<li><a href=\"#checking-path-validity\">Checking Path Validity</a></li>\n<li><a href=\"#finding-file-sizes-and-folder-contents\">Finding File Sizes and Folder Contents</a></li>\n<li><a href=\"#copying-files-and-folders\">Copying Files and Folders</a></li>\n<li><a href=\"#moving-and-renaming-files-and-folders\">Moving and Renaming Files and Folders</a></li>\n<li><a href=\"#permanently-deleting-files-and-folders\">Permanently Deleting Files and Folders</a></li>\n<li><a href=\"#safe-deletes-with-the-send2trash-module\">Safe Deletes with the send2trash Module</a></li>\n<li><a href=\"#walking-a-directory-tree\">Walking a Directory Tree</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reading-and-writing-files\">Reading and Writing Files</a></p>\n<ul>\n<li><a href=\"#the-file-readingwriting-process\">The File Reading/Writing Process</a></li>\n<li><a href=\"#opening-and-reading-files-with-the-open-function\">Opening and reading files with the open() function</a></li>\n<li><a href=\"#writing-to-files\">Writing to Files</a></li>\n<li><a href=\"#saving-variables-with-the-shelve-module\">Saving Variables with the shelve Module</a></li>\n<li><a href=\"#saving-variables-with-the-pprintpformat-function\">Saving Variables with the pprint.pformat() Function</a></li>\n<li><a href=\"#reading-zip-files\">Reading ZIP Files</a></li>\n<li><a href=\"#extracting-from-zip-files\">Extracting from ZIP Files</a></li>\n<li><a href=\"#creating-and-adding-to-zip-files\">Creating and Adding to ZIP Files</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#json-yaml-and-configuration-files\">JSON, YAML and configuration files</a></p>\n<ul>\n<li><a href=\"#json\">JSON</a></li>\n<li><a href=\"#yaml\">YAML</a></li>\n<li><a href=\"#anyconfig\">Anyconfig</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#debugging\">Debugging</a></p>\n<ul>\n<li><a href=\"#raising-exceptions\">Raising Exceptions</a></li>\n<li><a href=\"#getting-the-traceback-as-a-string\">Getting the Traceback as a String</a></li>\n<li><a href=\"#assertions\">Assertions</a></li>\n<li><a href=\"#logging\">Logging</a></li>\n<li><a href=\"#logging-levels\">Logging Levels</a></li>\n<li><a href=\"#disabling-logging\">Disabling Logging</a></li>\n<li><a href=\"#logging-to-a-file\">Logging to a File</a></li>\n</ul>\n</li>\n<li><a href=\"#lambda-functions\">Lambda Functions</a></li>\n<li><a href=\"#ternary-conditional-operator\">Ternary Conditional Operator</a></li>\n<li>\n<p><a href=\"#args-and-kwargs\">args and kwargs</a></p>\n<ul>\n<li><a href=\"#things-to-rememberargs\">Things to Remember(args)</a></li>\n<li><a href=\"#things-to-rememberkwargs\">Things to Remember(kwargs)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#context-manager\">Context Manager</a></p>\n<ul>\n<li><a href=\"#with-statement\">with statement</a></li>\n<li><a href=\"#writing-your-own-contextmanager-using-generator-syntax\">Writing your own contextmanager using generator syntax</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#__main__-top-level-script-environment\"><code>__main__</code> Top-level script environment</a></p>\n<ul>\n<li><a href=\"#advantages\">Advantages</a></li>\n</ul>\n</li>\n<li><a href=\"#setuppy\">setup.py</a></li>\n<li>\n<p><a href=\"#dataclasses\">Dataclasses</a></p>\n<ul>\n<li><a href=\"#features\">Features</a></li>\n<li><a href=\"#default-values\">Default values</a></li>\n<li><a href=\"#type-hints\">Type hints</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#virtual-environment\">Virtual Environment</a></p>\n<ul>\n<li><a href=\"#virtualenv\">virtualenv</a></li>\n<li><a href=\"#poetry\">poetry</a></li>\n<li><a href=\"#pipenv\">pipenv</a></li>\n<li><a href=\"#anaconda\">anaconda</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>The Zen of Python</h2>\n<p>From the <a href=\"https://www.python.org/dev/peps/pep-0020/\">PEP 20 -- The Zen of Python</a>:</p>\n<blockquote>\n<p>Long time Pythoneer Tim Peters succinctly channels the BDFL's guiding principles for Python's design into 20 aphorisms, only 19 of which have been written down.</p>\n</blockquote>\n<pre><code class=\"language-python\">>>> import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>Python Basics</h2>\n<h3>Math Operators</h3>\n<p>From <strong>Highest</strong> to <strong>Lowest</strong> precedence:</p>\n<table>\n<thead>\n<tr>\n<th>Operators</th>\n<th>Operation</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>**</td>\n<td>Exponent</td>\n<td><code>2 ** 3 = 8</code></td>\n</tr>\n<tr>\n<td>%</td>\n<td>Modulus/Remainder</td>\n<td><code>22 % 8 = 6</code></td>\n</tr>\n<tr>\n<td>//</td>\n<td>Integer division</td>\n<td><code>22 // 8 = 2</code></td>\n</tr>\n<tr>\n<td>/</td>\n<td>Division</td>\n<td><code>22 / 8 = 2.75</code></td>\n</tr>\n<tr>\n<td>*</td>\n<td>Multiplication</td>\n<td><code>3 * 3 = 9</code></td>\n</tr>\n<tr>\n<td>-</td>\n<td>Subtraction</td>\n<td><code>5 - 2 = 3</code></td>\n</tr>\n<tr>\n<td>+</td>\n<td>Addition</td>\n<td><code>2 + 2 = 4</code></td>\n</tr>\n</tbody>\n</table>\n<p>Examples of expressions in the interactive shell:</p>\n<pre><code class=\"language-python\">>>> 2 + 3 * 6\n20\n</code></pre>\n<pre><code class=\"language-python\">>>> (2 + 3) * 6\n30\n</code></pre>\n<pre><code class=\"language-python\">>>> 2 ** 8\n256\n</code></pre>\n<pre><code class=\"language-python\">>>> 23 // 7\n3\n</code></pre>\n<pre><code class=\"language-python\">>>> 23 % 7\n2\n</code></pre>\n<pre><code class=\"language-python\">>>> (5 - 1) * ((7 + 1) / (3 - 1))\n16.0\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Data Types</h3>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Examples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Integers</td>\n<td><code>-2, -1, 0, 1, 2, 3, 4, 5</code></td>\n</tr>\n<tr>\n<td>Floating-point numbers</td>\n<td><code>-1.25, -1.0, --0.5, 0.0, 0.5, 1.0, 1.25</code></td>\n</tr>\n<tr>\n<td>Strings</td>\n<td><code>'a', 'aa', 'aaa', 'Hello!', '11 cats'</code></td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>String Concatenation and Replication</h3>\n<p>String concatenation:</p>\n<pre><code class=\"language-python\">>>> 'Alice' 'Bob'\n'AliceBob'\n</code></pre>\n<p>Note: Avoid <code>+</code> operator for string concatenation. Prefer string formatting.</p>\n<p>String Replication:</p>\n<pre><code class=\"language-python\">>>> 'Alice' * 5\n'AliceAliceAliceAliceAlice'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Variables</h3>\n<p>You can name a variable anything as long as it obeys the following rules:</p>\n<ol>\n<li>It can be only one word.</li>\n<li>It can use only letters, numbers, and the underscore (<code>_</code>) character.</li>\n<li>It can’t begin with a number.</li>\n<li>Variable name starting with an underscore (<code>_</code>) are considered as \"unuseful`.</li>\n</ol>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> spam = 'Hello'\n>>> spam\n'Hello'\n</code></pre>\n<pre><code class=\"language-python\">>>> _spam = 'Hello'\n</code></pre>\n<p><code>_spam</code> should not be used again in the code.</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Comments</h3>\n<p>Inline comment:</p>\n<pre><code class=\"language-python\"># This is a comment\n</code></pre>\n<p>Multiline comment:</p>\n<pre><code class=\"language-Python\"># This is a\n# multiline comment\n</code></pre>\n<p>Code with a comment:</p>\n<pre><code class=\"language-python\">a = 1  # initialization\n</code></pre>\n<p>Please note the two spaces in front of the comment.</p>\n<p>Function docstring:</p>\n<pre><code class=\"language-python\">def foo():\n    \"\"\"\n    This is a function docstring\n    You can also use:\n    ''' Function Docstring '''\n    \"\"\"\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>The print() Function</h3>\n<pre><code class=\"language-python\">>>> print('Hello world!')\nHello world!\n</code></pre>\n<pre><code class=\"language-python\">>>> a = 1\n>>> print('Hello world!', a)\nHello world! 1\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>The input() Function</h3>\n<p>Example Code:</p>\n<pre><code class=\"language-python\">>>> print('What is your name?')   # ask for their name\n>>> myName = input()\n>>> print('It is good to meet you, {}'.format(myName))\nWhat is your name?\nAl\nIt is good to meet you, Al\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>The len() Function</h3>\n<p>Evaluates to the integer value of the number of characters in a string:</p>\n<pre><code class=\"language-python\">>>> len('hello')\n5\n</code></pre>\n<p>Note: test of emptiness of strings, lists, dictionary, etc, should <strong>not</strong> use len, but prefer direct\nboolean evaluation.</p>\n<pre><code class=\"language-python\">>>> a = [1, 2, 3]\n>>> if a:\n>>>     print(\"the list is not empty!\")\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>The str(), int(), and float() Functions</h3>\n<p>Integer to String or Float:</p>\n<pre><code class=\"language-python\">>>> str(29)\n'29'\n</code></pre>\n<pre><code class=\"language-python\">>>> print('I am {} years old.'.format(str(29)))\nI am 29 years old.\n</code></pre>\n<pre><code class=\"language-python\">>>> str(-3.14)\n'-3.14'\n</code></pre>\n<p>Float to Integer:</p>\n<pre><code class=\"language-python\">>>> int(7.7)\n7\n</code></pre>\n<pre><code class=\"language-python\">>>> int(7.7) + 1\n8\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>Flow Control</h2>\n<h3>Comparison Operators</h3>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>==</code></td>\n<td>Equal to</td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td>Not equal to</td>\n</tr>\n<tr>\n<td><code>&#x3C;</code></td>\n<td>Less than</td>\n</tr>\n<tr>\n<td><code>></code></td>\n<td>Greater Than</td>\n</tr>\n<tr>\n<td><code>&#x3C;=</code></td>\n<td>Less than or Equal to</td>\n</tr>\n<tr>\n<td><code>>=</code></td>\n<td>Greater than or Equal to</td>\n</tr>\n</tbody>\n</table>\n<p>These operators evaluate to True or False depending on the values you give them.</p>\n<p>Examples:</p>\n<pre><code class=\"language-python\">>>> 42 == 42\nTrue\n</code></pre>\n<pre><code class=\"language-python\">>>> 40 == 42\nFalse\n</code></pre>\n<pre><code class=\"language-python\">>>> 'hello' == 'hello'\nTrue\n</code></pre>\n<pre><code class=\"language-python\">>>> 'hello' == 'Hello'\nFalse\n</code></pre>\n<pre><code class=\"language-python\">>>> 'dog' != 'cat'\nTrue\n</code></pre>\n<pre><code class=\"language-python\">>>> 42 == 42.0\nTrue\n</code></pre>\n<pre><code class=\"language-python\">>>> 42 == '42'\nFalse\n</code></pre>\n<h3>Boolean evaluation</h3>\n<p>Never use <code>==</code> or <code>!=</code> operator to evaluate boolean operation. Use the <code>is</code> or <code>is not</code> operators,\nor use implicit boolean evaluation.</p>\n<p>NO (even if they are valid Python):</p>\n<pre><code class=\"language-python\">>>> True == True\nTrue\n</code></pre>\n<pre><code class=\"language-python\">>>> True != False\nTrue\n</code></pre>\n<p>YES (even if they are valid Python):</p>\n<pre><code class=\"language-python\">>>> True is True\nTrue\n</code></pre>\n<pre><code class=\"language-python\">>>> True is not False\nTrue\n</code></pre>\n<p>These statements are equivalent:</p>\n<pre><code class=\"language-Python\">>>> if a is True:\n>>>    pass\n>>> if a is not False:\n>>>    pass\n>>> if a:\n>>>    pass\n</code></pre>\n<p>And these as well:</p>\n<pre><code class=\"language-Python\">>>> if a is False:\n>>>    pass\n>>> if a is not True:\n>>>    pass\n>>> if not a:\n>>>    pass\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Boolean Operators</h3>\n<p>There are three Boolean operators: and, or, and not.</p>\n<p>The <em>and</em> Operator’s <em>Truth</em> Table:</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Evaluates to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>True and True</code></td>\n<td><code>True</code></td>\n</tr>\n<tr>\n<td><code>True and False</code></td>\n<td><code>False</code></td>\n</tr>\n<tr>\n<td><code>False and True</code></td>\n<td><code>False</code></td>\n</tr>\n<tr>\n<td><code>False and False</code></td>\n<td><code>False</code></td>\n</tr>\n</tbody>\n</table>\n<p>The <em>or</em> Operator’s <em>Truth</em> Table:</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Evaluates to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>True or True</code></td>\n<td><code>True</code></td>\n</tr>\n<tr>\n<td><code>True or False</code></td>\n<td><code>True</code></td>\n</tr>\n<tr>\n<td><code>False or True</code></td>\n<td><code>True</code></td>\n</tr>\n<tr>\n<td><code>False or False</code></td>\n<td><code>False</code></td>\n</tr>\n</tbody>\n</table>\n<p>The <em>not</em> Operator’s <em>Truth</em> Table:</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Evaluates to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>not True</code></td>\n<td><code>False</code></td>\n</tr>\n<tr>\n<td><code>not False</code></td>\n<td><code>True</code></td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Mixing Boolean and Comparison Operators</h3>\n<pre><code class=\"language-python\">>>> (4 &#x3C; 5) and (5 &#x3C; 6)\nTrue\n</code></pre>\n<pre><code class=\"language-python\">>>> (4 &#x3C; 5) and (9 &#x3C; 6)\nFalse\n</code></pre>\n<pre><code class=\"language-python\">>>> (1 == 2) or (2 == 2)\nTrue\n</code></pre>\n<p>You can also use multiple Boolean operators in an expression, along with the comparison operators:</p>\n<pre><code class=\"language-python\">>>> 2 + 2 == 4 and not 2 + 2 == 5 and 2 * 2 == 2 + 2\nTrue\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>if Statements</h3>\n<pre><code class=\"language-python\">if name == 'Alice':\n    print('Hi, Alice.')\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>else Statements</h3>\n<pre><code class=\"language-python\">name = 'Bob'\nif name == 'Alice':\n    print('Hi, Alice.')\nelse:\n    print('Hello, stranger.')\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>elif Statements</h3>\n<pre><code class=\"language-python\">name = 'Bob'\nage = 5\nif name == 'Alice':\n    print('Hi, Alice.')\nelif age &#x3C; 12:\n    print('You are not Alice, kiddo.')\n</code></pre>\n<pre><code class=\"language-python\">name = 'Bob'\nage = 30\nif name == 'Alice':\n    print('Hi, Alice.')\nelif age &#x3C; 12:\n    print('You are not Alice, kiddo.')\nelse:\n    print('You are neither Alice nor a little kid.')\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>while Loop Statements</h3>\n<pre><code class=\"language-python\">spam = 0\nwhile spam &#x3C; 5:\n    print('Hello, world.')\n    spam = spam + 1\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>break Statements</h3>\n<p>If the execution reaches a break statement, it immediately exits the while loop’s clause:</p>\n<pre><code class=\"language-python\">while True:\n    print('Please type your name.')\n    name = input()\n    if name == 'your name':\n        break\nprint('Thank you!')\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>continue Statements</h3>\n<p>When the program execution reaches a continue statement, the program execution immediately jumps back to the start of the loop.</p>\n<pre><code class=\"language-python\">while True:\n    print('Who are you?')\n    name = input()\n    if name != 'Joe':\n        continue\n    print('Hello, Joe. What is the password? (It is a fish.)')\n    password = input()\n    if password == 'swordfish':\n        break\nprint('Access granted.')\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>for Loops and the range() Function</h3>\n<pre><code class=\"language-python\">>>> print('My name is')\n>>> for i in range(5):\n>>>     print('Jimmy Five Times ({})'.format(str(i)))\nMy name is\nJimmy Five Times (0)\nJimmy Five Times (1)\nJimmy Five Times (2)\nJimmy Five Times (3)\nJimmy Five Times (4)\n</code></pre>\n<p>The <em>range()</em> function can also be called with three arguments. The first two arguments will be the start and stop values, and the third will be the step argument. The step is the amount that the variable is increased by after each iteration.</p>\n<pre><code class=\"language-python\">>>> for i in range(0, 10, 2):\n>>>    print(i)\n0\n2\n4\n6\n8\n</code></pre>\n<p>You can even use a negative number for the step argument to make the for loop count down instead of up.</p>\n<pre><code class=\"language-python\">>>> for i in range(5, -1, -1):\n>>>     print(i)\n5\n4\n3\n2\n1\n0\n</code></pre>\n<h3>For else statement</h3>\n<p>This allows to specify a statement to execute in case of the full loop has been executed. Only\nuseful when a <code>break</code> condition can occur in the loop:</p>\n<pre><code class=\"language-python\">>>> for i in [1, 2, 3, 4, 5]:\n>>>    if i == 3:\n>>>        break\n>>> else:\n>>>    print(\"only executed when no item of the list is equal to 3\")\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Importing Modules</h3>\n<pre><code class=\"language-python\">import random\nfor i in range(5):\n    print(random.randint(1, 10))\n</code></pre>\n<pre><code class=\"language-python\">import random, sys, os, math\n</code></pre>\n<pre><code class=\"language-python\">from random import *\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Ending a Program Early with sys.exit()</h3>\n<pre><code class=\"language-python\">import sys\n\nwhile True:\n    print('Type exit to exit.')\n    response = input()\n    if response == 'exit':\n        sys.exit()\n    print('You typed {}.'.format(response))\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>Functions</h2>\n<pre><code class=\"language-python\">>>> def hello(name):\n>>>     print('Hello {}'.format(name))\n>>>\n>>> hello('Alice')\n>>> hello('Bob')\nHello Alice\nHello Bob\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Return Values and return Statements</h3>\n<p>When creating a function using the def statement, you can specify what the return value should be with a return statement. A return statement consists of the following:</p>\n<ul>\n<li>The return keyword.</li>\n<li>The value or expression that the function should return.</li>\n</ul>\n<pre><code class=\"language-python\">import random\ndef getAnswer(answerNumber):\n    if answerNumber == 1:\n        return 'It is certain'\n    elif answerNumber == 2:\n        return 'It is decidedly so'\n    elif answerNumber == 3:\n        return 'Yes'\n    elif answerNumber == 4:\n        return 'Reply hazy try again'\n    elif answerNumber == 5:\n        return 'Ask again later'\n    elif answerNumber == 6:\n        return 'Concentrate and ask again'\n    elif answerNumber == 7:\n        return 'My reply is no'\n    elif answerNumber == 8:\n        return 'Outlook not so good'\n    elif answerNumber == 9:\n        return 'Very doubtful'\n\nr = random.randint(1, 9)\nfortune = getAnswer(r)\nprint(fortune)\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>The None Value</h3>\n<pre><code class=\"language-python\">>>> spam = print('Hello!')\nHello!\n</code></pre>\n<pre><code class=\"language-python\">>>> spam is None\nTrue\n</code></pre>\n<p>Note: never compare to <code>None</code> with the <code>==</code> operator. Always use <code>is</code>.</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Keyword Arguments and print()</h3>\n<pre><code class=\"language-python\">>>> print('Hello', end='')\n>>> print('World')\nHelloWorld\n</code></pre>\n<pre><code class=\"language-python\">>>> print('cats', 'dogs', 'mice')\ncats dogs mice\n</code></pre>\n<pre><code class=\"language-python\">>>> print('cats', 'dogs', 'mice', sep=',')\ncats,dogs,mice\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Local and Global Scope</h3>\n<ul>\n<li>Code in the global scope cannot use any local variables.</li>\n<li>However, a local scope can access global variables.</li>\n<li>Code in a function’s local scope cannot use variables in any other local scope.</li>\n<li>You can use the same name for different variables if they are in different scopes. That is, there can be a local variable named spam and a global variable also named spam.</li>\n</ul>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>The global Statement</h3>\n<p>If you need to modify a global variable from within a function, use the global statement:</p>\n<pre><code class=\"language-python\">>>> def spam():\n>>>     global eggs\n>>>     eggs = 'spam'\n>>>\n>>> eggs = 'global'\n>>> spam()\n>>> print(eggs)\nspam\n</code></pre>\n<p>There are four rules to tell whether a variable is in a local scope or global scope:</p>\n<ol>\n<li>If a variable is being used in the global scope (that is, outside of all functions), then it is always a global variable.</li>\n<li>If there is a global statement for that variable in a function, it is a global variable.</li>\n<li>Otherwise, if the variable is used in an assignment statement in the function, it is a local variable.</li>\n<li>But if the variable is not used in an assignment statement, it is a global variable.</li>\n</ol>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>Exception Handling</h2>\n<h3>Basic exception handling</h3>\n<pre><code class=\"language-python\">>>> def spam(divideBy):\n>>>     try:\n>>>         return 42 / divideBy\n>>>     except ZeroDivisionError as e:\n>>>         print('Error: Invalid argument: {}'.format(e))\n>>>\n>>> print(spam(2))\n>>> print(spam(12))\n>>> print(spam(0))\n>>> print(spam(1))\n21.0\n3.5\nError: Invalid argument: division by zero\nNone\n42.0\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Final code in exception handling</h3>\n<p>Code inside the <code>finally</code> section is always executed, no matter if an exception has been raised or\nnot, and even if an exception is not caught.</p>\n<pre><code class=\"language-python\">>>> def spam(divideBy):\n>>>     try:\n>>>         return 42 / divideBy\n>>>     except ZeroDivisionError as e:\n>>>         print('Error: Invalid argument: {}'.format(e))\n>>>     finally:\n>>>         print(\"-- division finished --\")\n>>> print(spam(2))\n-- division finished --\n21.0\n>>> print(spam(12))\n-- division finished --\n3.5\n>>> print(spam(0))\nError: Invalid Argument division by zero\n-- division finished --\nNone\n>>> print(spam(1))\n-- division finished --\n42.0\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>Lists</h2>\n<pre><code class=\"language-python\">>>> spam = ['cat', 'bat', 'rat', 'elephant']\n\n>>> spam\n['cat', 'bat', 'rat', 'elephant']\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Getting Individual Values in a List with Indexes</h3>\n<pre><code class=\"language-python\">>>> spam = ['cat', 'bat', 'rat', 'elephant']\n>>> spam[0]\n'cat'\n</code></pre>\n<pre><code class=\"language-python\">>>> spam[1]\n'bat'\n</code></pre>\n<pre><code class=\"language-python\">>>> spam[2]\n'rat'\n</code></pre>\n<pre><code class=\"language-python\">>>> spam[3]\n'elephant'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Negative Indexes</h3>\n<pre><code class=\"language-python\">>>> spam = ['cat', 'bat', 'rat', 'elephant']\n>>> spam[-1]\n'elephant'\n</code></pre>\n<pre><code class=\"language-python\">>>> spam[-3]\n'bat'\n</code></pre>\n<pre><code class=\"language-python\">>>> 'The {} is afraid of the {}.'.format(spam[-1], spam[-3])\n'The elephant is afraid of the bat.'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Getting Sublists with Slices</h3>\n<pre><code class=\"language-python\">>>> spam = ['cat', 'bat', 'rat', 'elephant']\n>>> spam[0:4]\n['cat', 'bat', 'rat', 'elephant']\n</code></pre>\n<pre><code class=\"language-python\">>>> spam[1:3]\n['bat', 'rat']\n</code></pre>\n<pre><code class=\"language-python\">>>> spam[0:-1]\n['cat', 'bat', 'rat']\n</code></pre>\n<pre><code class=\"language-python\">>>> spam = ['cat', 'bat', 'rat', 'elephant']\n>>> spam[:2]\n['cat', 'bat']\n</code></pre>\n<pre><code class=\"language-python\">>>> spam[1:]\n['bat', 'rat', 'elephant']\n</code></pre>\n<p>Slicing the complete list will perform a copy:</p>\n<pre><code class=\"language-python\">>>> spam2 = spam[:]\n['cat', 'bat', 'rat', 'elephant']\n>>> spam.append('dog')\n>>> spam\n['cat', 'bat', 'rat', 'elephant', 'dog']\n>>> spam2\n['cat', 'bat', 'rat', 'elephant']\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Getting a List’s Length with len()</h3>\n<pre><code class=\"language-python\">>>> spam = ['cat', 'dog', 'moose']\n>>> len(spam)\n3\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Changing Values in a List with Indexes</h3>\n<pre><code class=\"language-python\">>>> spam = ['cat', 'bat', 'rat', 'elephant']\n>>> spam[1] = 'aardvark'\n\n>>> spam\n['cat', 'aardvark', 'rat', 'elephant']\n\n>>> spam[2] = spam[1]\n\n>>> spam\n['cat', 'aardvark', 'aardvark', 'elephant']\n\n>>> spam[-1] = 12345\n\n>>> spam\n['cat', 'aardvark', 'aardvark', 12345]\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>List Concatenation and List Replication</h3>\n<pre><code class=\"language-python\">>>> [1, 2, 3] + ['A', 'B', 'C']\n[1, 2, 3, 'A', 'B', 'C']\n\n>>> ['X', 'Y', 'Z'] * 3\n['X', 'Y', 'Z', 'X', 'Y', 'Z', 'X', 'Y', 'Z']\n\n>>> spam = [1, 2, 3]\n\n>>> spam = spam + ['A', 'B', 'C']\n\n>>> spam\n[1, 2, 3, 'A', 'B', 'C']\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Removing Values from Lists with del Statements</h3>\n<pre><code class=\"language-python\">>>> spam = ['cat', 'bat', 'rat', 'elephant']\n>>> del spam[2]\n>>> spam\n['cat', 'bat', 'elephant']\n</code></pre>\n<pre><code class=\"language-python\">>>> del spam[2]\n>>> spam\n['cat', 'bat']\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Using for Loops with Lists</h3>\n<pre><code class=\"language-python\">>>> supplies = ['pens', 'staplers', 'flame-throwers', 'binders']\n>>> for i, supply in enumerate(supplies):\n>>>     print('Index {} in supplies is: {}'.format(str(i), supply))\nIndex 0 in supplies is: pens\nIndex 1 in supplies is: staplers\nIndex 2 in supplies is: flame-throwers\nIndex 3 in supplies is: binders\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Looping Through Multiple Lists with zip()</h3>\n<pre><code class=\"language-python\">>>> name = ['Pete', 'John', 'Elizabeth']\n>>> age = [6, 23, 44]\n>>> for n, a in zip(name, age):\n>>>     print('{} is {} years old'.format(n, a))\nPete is 6 years old\nJohn is 23 years old\nElizabeth is 44 years old\n</code></pre>\n<h3>The in and not in Operators</h3>\n<pre><code class=\"language-python\">>>> 'howdy' in ['hello', 'hi', 'howdy', 'heyas']\nTrue\n</code></pre>\n<pre><code class=\"language-python\">>>> spam = ['hello', 'hi', 'howdy', 'heyas']\n>>> 'cat' in spam\nFalse\n</code></pre>\n<pre><code class=\"language-python\">>>> 'howdy' not in spam\nFalse\n</code></pre>\n<pre><code class=\"language-python\">>>> 'cat' not in spam\nTrue\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>The Multiple Assignment Trick</h3>\n<p>The multiple assignment trick is a shortcut that lets you assign multiple variables with the values in a list in one line of code. So instead of doing this:</p>\n<pre><code class=\"language-python\">>>> cat = ['fat', 'orange', 'loud']\n\n>>> size = cat[0]\n\n>>> color = cat[1]\n\n>>> disposition = cat[2]\n</code></pre>\n<p>You could type this line of code:</p>\n<pre><code class=\"language-python\">>>> cat = ['fat', 'orange', 'loud']\n\n>>> size, color, disposition = cat\n</code></pre>\n<p>The multiple assignment trick can also be used to swap the values in two variables:</p>\n<pre><code class=\"language-python\">>>> a, b = 'Alice', 'Bob'\n>>> a, b = b, a\n>>> print(a)\n'Bob'\n</code></pre>\n<pre><code class=\"language-python\">>>> print(b)\n'Alice'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Augmented Assignment Operators</h3>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Equivalent</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>spam += 1</code></td>\n<td><code>spam = spam + 1</code></td>\n</tr>\n<tr>\n<td><code>spam -= 1</code></td>\n<td><code>spam = spam - 1</code></td>\n</tr>\n<tr>\n<td><code>spam *= 1</code></td>\n<td><code>spam = spam * 1</code></td>\n</tr>\n<tr>\n<td><code>spam /= 1</code></td>\n<td><code>spam = spam / 1</code></td>\n</tr>\n<tr>\n<td><code>spam %= 1</code></td>\n<td><code>spam = spam % 1</code></td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre><code class=\"language-python\">>>> spam = 'Hello'\n>>> spam += ' world!'\n>>> spam\n'Hello world!'\n\n>>> bacon = ['Zophie']\n>>> bacon *= 3\n>>> bacon\n['Zophie', 'Zophie', 'Zophie']\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Finding a Value in a List with the index() Method</h3>\n<pre><code class=\"language-python\">>>> spam = ['Zophie', 'Pooka', 'Fat-tail', 'Pooka']\n\n>>> spam.index('Pooka')\n1\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Adding Values to Lists with the append() and insert() Methods</h3>\n<p><strong>append()</strong>:</p>\n<pre><code class=\"language-python\">>>> spam = ['cat', 'dog', 'bat']\n\n>>> spam.append('moose')\n\n>>> spam\n['cat', 'dog', 'bat', 'moose']\n</code></pre>\n<p><strong>insert()</strong>:</p>\n<pre><code class=\"language-python\">>>> spam = ['cat', 'dog', 'bat']\n\n>>> spam.insert(1, 'chicken')\n\n>>> spam\n['cat', 'chicken', 'dog', 'bat']\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Removing Values from Lists with remove()</h3>\n<pre><code class=\"language-python\">>>> spam = ['cat', 'bat', 'rat', 'elephant']\n\n>>> spam.remove('bat')\n\n>>> spam\n['cat', 'rat', 'elephant']\n</code></pre>\n<p>If the value appears multiple times in the list, only the first instance of the value will be removed.</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Removing Values from Lists with pop()</h3>\n<pre><code class=\"language-python\">>>> spam = ['cat', 'bat', 'rat', 'elephant']\n\n>>> spam.pop()\n'elephant'\n\n>>> spam\n['cat', 'bat', 'rat']\n\n>>> spam.pop(0)\n'cat'\n\n>>> spam\n['bat', 'rat']\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Sorting the Values in a List with the sort() Method</h3>\n<pre><code class=\"language-python\">>>> spam = [2, 5, 3.14, 1, -7]\n>>> spam.sort()\n>>> spam\n[-7, 1, 2, 3.14, 5]\n</code></pre>\n<pre><code class=\"language-python\">>>> spam = ['ants', 'cats', 'dogs', 'badgers', 'elephants']\n>>> spam.sort()\n>>> spam\n['ants', 'badgers', 'cats', 'dogs', 'elephants']\n</code></pre>\n<p>You can also pass True for the reverse keyword argument to have sort() sort the values in reverse order:</p>\n<pre><code class=\"language-python\">>>> spam.sort(reverse=True)\n>>> spam\n['elephants', 'dogs', 'cats', 'badgers', 'ants']\n</code></pre>\n<p>If you need to sort the values in regular alphabetical order, pass str. lower for the key keyword argument in the sort() method call:</p>\n<pre><code class=\"language-python\">>>> spam = ['a', 'z', 'A', 'Z']\n>>> spam.sort(key=str.lower)\n>>> spam\n['a', 'A', 'z', 'Z']\n</code></pre>\n<p>You can use the built-in function <code>sorted</code> to return a new list:</p>\n<pre><code class=\"language-python\">>>> spam = ['ants', 'cats', 'dogs', 'badgers', 'elephants']\n>>> sorted(spam)\n['ants', 'badgers', 'cats', 'dogs', 'elephants']\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Tuple Data Type</h3>\n<pre><code class=\"language-python\">>>> eggs = ('hello', 42, 0.5)\n>>> eggs[0]\n'hello'\n</code></pre>\n<pre><code class=\"language-python\">>>> eggs[1:3]\n(42, 0.5)\n</code></pre>\n<pre><code class=\"language-python\">>>> len(eggs)\n3\n</code></pre>\n<p>The main way that tuples are different from lists is that tuples, like strings, are immutable.</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Converting Types with the list() and tuple() Functions</h3>\n<pre><code class=\"language-python\">>>> tuple(['cat', 'dog', 5])\n('cat', 'dog', 5)\n</code></pre>\n<pre><code class=\"language-python\">>>> list(('cat', 'dog', 5))\n['cat', 'dog', 5]\n</code></pre>\n<pre><code class=\"language-python\">>>> list('hello')\n['h', 'e', 'l', 'l', 'o']\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>Dictionaries and Structuring Data</h2>\n<p>Example Dictionary:</p>\n<pre><code class=\"language-python\">myCat = {'size': 'fat', 'color': 'gray', 'disposition': 'loud'}\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>The keys(), values(), and items() Methods</h3>\n<p>values():</p>\n<pre><code class=\"language-python\">>>> spam = {'color': 'red', 'age': 42}\n>>> for v in spam.values():\n>>>     print(v)\nred\n42\n</code></pre>\n<p>keys():</p>\n<pre><code class=\"language-python\">>>> for k in spam.keys():\n>>>     print(k)\ncolor\nage\n</code></pre>\n<p>items():</p>\n<pre><code class=\"language-python\">>>> for i in spam.items():\n>>>     print(i)\n('color', 'red')\n('age', 42)\n</code></pre>\n<p>Using the keys(), values(), and items() methods, a for loop can iterate over the keys, values, or key-value pairs in a dictionary, respectively.</p>\n<pre><code class=\"language-python\">>>> spam = {'color': 'red', 'age': 42}\n>>>\n>>> for k, v in spam.items():\n>>>     print('Key: {} Value: {}'.format(k, str(v)))\nKey: age Value: 42\nKey: color Value: red\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Checking Whether a Key or Value Exists in a Dictionary</h3>\n<pre><code class=\"language-python\">>>> spam = {'name': 'Zophie', 'age': 7}\n</code></pre>\n<pre><code class=\"language-python\">>>> 'name' in spam.keys()\nTrue\n</code></pre>\n<pre><code class=\"language-python\">>>> 'Zophie' in spam.values()\nTrue\n</code></pre>\n<pre><code class=\"language-python\">>>> # You can omit the call to keys() when checking for a key\n>>> 'color' in spam\nFalse\n</code></pre>\n<pre><code class=\"language-python\">>>> 'color' not in spam\nTrue\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>The get() Method</h3>\n<p>Get has two parameters: key and default value if the key did not exist</p>\n<pre><code class=\"language-python\">>>> picnic_items = {'apples': 5, 'cups': 2}\n\n>>> 'I am bringing {} cups.'.format(str(picnic_items.get('cups', 0)))\n'I am bringing 2 cups.'\n</code></pre>\n<pre><code class=\"language-python\">>>> 'I am bringing {} eggs.'.format(str(picnic_items.get('eggs', 0)))\n'I am bringing 0 eggs.'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>The setdefault() Method</h3>\n<p>Let's consider this code:</p>\n<pre><code class=\"language-python\">spam = {'name': 'Pooka', 'age': 5}\n\nif 'color' not in spam:\n    spam['color'] = 'black'\n</code></pre>\n<p>Using <code>setdefault</code> we could write the same code more succinctly:</p>\n<pre><code class=\"language-python\">>>> spam = {'name': 'Pooka', 'age': 5}\n>>> spam.setdefault('color', 'black')\n'black'\n</code></pre>\n<pre><code class=\"language-python\">>>> spam\n{'color': 'black', 'age': 5, 'name': 'Pooka'}\n</code></pre>\n<pre><code class=\"language-python\">>>> spam.setdefault('color', 'white')\n'black'\n</code></pre>\n<pre><code class=\"language-python\">>>> spam\n{'color': 'black', 'age': 5, 'name': 'Pooka'}\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Pretty Printing</h3>\n<pre><code class=\"language-python\">>>> import pprint\n>>>\n>>> message = 'It was a bright cold day in April, and the clocks were striking\n>>> thirteen.'\n>>> count = {}\n>>>\n>>> for character in message:\n>>>     count.setdefault(character, 0)\n>>>     count[character] = count[character] + 1\n>>>\n>>> pprint.pprint(count)\n{' ': 13,\n ',': 1,\n '.': 1,\n 'A': 1,\n 'I': 1,\n 'a': 4,\n 'b': 1,\n 'c': 3,\n 'd': 3,\n 'e': 5,\n 'g': 2,\n 'h': 3,\n 'i': 6,\n 'k': 2,\n 'l': 3,\n 'n': 4,\n 'o': 2,\n 'p': 1,\n 'r': 5,\n 's': 3,\n 't': 6,\n 'w': 2,\n 'y': 1}\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Merge two dictionaries</h3>\n<pre><code class=\"language-python\"># in Python 3.5+:\n>>> x = {'a': 1, 'b': 2}\n>>> y = {'b': 3, 'c': 4}\n>>> z = {**x, **y}\n>>> z\n{'c': 4, 'a': 1, 'b': 3}\n\n# in Python 2.7\n>>> z = dict(x, **y)\n>>> z\n{'c': 4, 'a': 1, 'b': 3}\n</code></pre>\n<h2>sets</h2>\n<p>From the Python 3 <a href=\"https://docs.python.org/3/tutorial/datastructures.html\">documentation</a></p>\n<blockquote>\n<p>A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.</p>\n</blockquote>\n<h3>Initializing a set</h3>\n<p>There are two ways to create sets: using curly braces <code>{}</code> and the built-in function <code>set()</code></p>\n<pre><code class=\"language-python\">>>> s = {1, 2, 3}\n>>> s = set([1, 2, 3])\n</code></pre>\n<p>When creating an empty set, be sure to not use the curly braces <code>{}</code> or you will get an empty dictionary instead.</p>\n<pre><code class=\"language-python\">>>> s = {}\n>>> type(s)\n&#x3C;class 'dict'>\n</code></pre>\n<h3>sets: unordered collections of unique elements</h3>\n<p>A set automatically remove all the duplicate values.</p>\n<pre><code class=\"language-python\">>>> s = {1, 2, 3, 2, 3, 4}\n>>> s\n{1, 2, 3, 4}\n</code></pre>\n<p>And as an unordered data type, they can't be indexed.</p>\n<pre><code class=\"language-python\">>>> s = {1, 2, 3}\n>>> s[0]\nTraceback (most recent call last):\n  File \"&#x3C;stdin>\", line 1, in &#x3C;module>\nTypeError: 'set' object does not support indexing\n>>>\n</code></pre>\n<h3>set add() and update()</h3>\n<p>Using the <code>add()</code> method we can add a single element to the set.</p>\n<pre><code class=\"language-python\">>>> s = {1, 2, 3}\n>>> s.add(4)\n>>> s\n{1, 2, 3, 4}\n</code></pre>\n<p>And with <code>update()</code>, multiple ones .</p>\n<pre><code class=\"language-python\">>>> s = {1, 2, 3}\n>>> s.update([2, 3, 4, 5, 6])\n>>> s\n{1, 2, 3, 4, 5, 6}  # remember, sets automatically remove duplicates\n</code></pre>\n<h3>set remove() and discard()</h3>\n<p>Both methods will remove an element from the set, but <code>remove()</code> will raise a <code>key error</code> if the value doesn't exist.</p>\n<pre><code class=\"language-python\">>>> s = {1, 2, 3}\n>>> s.remove(3)\n>>> s\n{1, 2}\n>>> s.remove(3)\nTraceback (most recent call last):\n  File \"&#x3C;stdin>\", line 1, in &#x3C;module>\nKeyError: 3\n</code></pre>\n<p><code>discard()</code> won't raise any errors.</p>\n<pre><code class=\"language-python\">>>> s = {1, 2, 3}\n>>> s.discard(3)\n>>> s\n{1, 2}\n>>> s.discard(3)\n>>>\n</code></pre>\n<h3>set union()</h3>\n<p><code>union()</code> or <code>|</code> will create a new set that contains all the elements from the sets provided.</p>\n<pre><code class=\"language-python\">>>> s1 = {1, 2, 3}\n>>> s2 = {3, 4, 5}\n>>> s1.union(s2)  # or 's1 | s2'\n{1, 2, 3, 4, 5}\n</code></pre>\n<h3>set intersection</h3>\n<p><code>intersection</code> or <code>&#x26;</code> will return a set containing only the elements that are common to all of them.</p>\n<pre><code class=\"language-python\">>>> s1 = {1, 2, 3}\n>>> s2 = {2, 3, 4}\n>>> s3 = {3, 4, 5}\n>>> s1.intersection(s2, s3)  # or 's1 &#x26; s2 &#x26; s3'\n{3}\n</code></pre>\n<h3>set difference</h3>\n<p><code>difference</code> or <code>-</code> will return only the elements that are unique to the first set (invoked set).</p>\n<pre><code class=\"language-python\">>>> s1 = {1, 2, 3}\n>>> s2 = {2, 3, 4}\n>>> s1.difference(s2)  # or 's1 - s2'\n{1}\n>>> s2.difference(s1) # or 's2 - s1'\n{4}\n</code></pre>\n<h3>set symetric_difference</h3>\n<p><code>symetric_difference</code> or <code>^</code> will return all the elements that are not common between them.</p>\n<pre><code class=\"language-python\">>>> s1 = {1, 2, 3}\n>>> s2 = {2, 3, 4}\n>>> s1.symmetric_difference(s2)  # or 's1 ^ s2'\n{1, 4}\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>itertools Module</h2>\n<p>The <em>itertools</em> module is a collection of tools intended to be fast and use memory efficiently when handling iterators (like <a href=\"#lists\">lists</a> or <a href=\"#dictionaries-and-structuring-data\">dictionaries</a>).</p>\n<p>From the official <a href=\"https://docs.python.org/3/library/itertools.html\">Python 3.x documentation</a>:</p>\n<blockquote>\n<p>The module standardizes a core set of fast, memory efficient tools that are useful by themselves or in combination. Together, they form an “iterator algebra” making it possible to construct specialized tools succinctly and efficiently in pure Python.</p>\n</blockquote>\n<p>The <em>itertools</em> module comes in the standard library and must be imported.</p>\n<p>The <a href=\"https://docs.python.org/3/library/operator.html\">operator</a> module will also be used. This module is not necessary when using itertools, but needed for some of the examples below.</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>accumulate()</h3>\n<p>Makes an iterator that returns the results of a function.</p>\n<pre><code class=\"language-python\">itertools.accumulate(iterable[, func])\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> data = [1, 2, 3, 4, 5]\n>>> result = itertools.accumulate(data, operator.mul)\n>>> for each in result:\n>>>    print(each)\n1\n2\n6\n24\n120\n</code></pre>\n<p>The operator.mul takes two numbers and multiplies them:</p>\n<pre><code class=\"language-python\">operator.mul(1, 2)\n2\noperator.mul(2, 3)\n6\noperator.mul(6, 4)\n24\noperator.mul(24, 5)\n120\n</code></pre>\n<p>Passing a function is optional:</p>\n<pre><code class=\"language-python\">>>> data = [5, 2, 6, 4, 5, 9, 1]\n>>> result = itertools.accumulate(data)\n>>> for each in result:\n>>>    print(each)\n5\n7\n13\n17\n22\n31\n32\n</code></pre>\n<p>If no function is designated the items will be summed:</p>\n<pre><code class=\"language-python\">5\n5 + 2 = 7\n7 + 6 = 13\n13 + 4 = 17\n17 + 5 = 22\n22 + 9 = 31\n31 + 1 = 32\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>combinations()</h3>\n<p>Takes an iterable and a integer. This will create all the unique combination that have r members.</p>\n<pre><code class=\"language-python\">itertools.combinations(iterable, r)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> shapes = ['circle', 'triangle', 'square',]\n>>> result = itertools.combinations(shapes, 2)\n>>> for each in result:\n>>>    print(each)\n('circle', 'triangle')\n('circle', 'square')\n('triangle', 'square')\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>combinations<em>with</em>replacement()</h3>\n<p>Just like combinations(), but allows individual elements to be repeated more than once.</p>\n<pre><code class=\"language-python\">itertools.combinations_with_replacement(iterable, r)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> shapes = ['circle', 'triangle', 'square']\n>>> result = itertools.combinations_with_replacement(shapes, 2)\n>>> for each in result:\n>>>    print(each)\n('circle', 'circle')\n('circle', 'triangle')\n('circle', 'square')\n('triangle', 'triangle')\n('triangle', 'square')\n('square', 'square')\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>count()</h3>\n<p>Makes an iterator that returns evenly spaced values starting with number start.</p>\n<pre><code class=\"language-python\">itertools.count(start=0, step=1)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> for i in itertools.count(10,3):\n>>>    print(i)\n>>>    if i > 20:\n>>>        break\n10\n13\n16\n19\n22\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>cycle()</h3>\n<p>This function cycles through an iterator endlessly.</p>\n<pre><code class=\"language-python\">itertools.cycle(iterable)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> colors = ['red', 'orange', 'yellow', 'green', 'blue', 'violet']\n>>> for color in itertools.cycle(colors):\n>>>    print(color)\nred\norange\nyellow\ngreen\nblue\nviolet\nred\norange\n</code></pre>\n<p>When reached the end of the iterable it start over again from the beginning.</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>chain()</h3>\n<p>Take a series of iterables and return them as one long iterable.</p>\n<pre><code class=\"language-python\">itertools.chain(*iterables)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> colors = ['red', 'orange', 'yellow', 'green', 'blue']\n>>> shapes = ['circle', 'triangle', 'square', 'pentagon']\n>>> result = itertools.chain(colors, shapes)\n>>> for each in result:\n>>>    print(each)\nred\norange\nyellow\ngreen\nblue\ncircle\ntriangle\nsquare\npentagon\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>compress()</h3>\n<p>Filters one iterable with another.</p>\n<pre><code class=\"language-python\">itertools.compress(data, selectors)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> shapes = ['circle', 'triangle', 'square', 'pentagon']\n>>> selections = [True, False, True, False]\n>>> result = itertools.compress(shapes, selections)\n>>> for each in result:\n>>>    print(each)\ncircle\nsquare\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>dropwhile()</h3>\n<p>Make an iterator that drops elements from the iterable as long as the predicate is true; afterwards, returns every element.</p>\n<pre><code class=\"language-python\">itertools.dropwhile(predicate, iterable)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]\n>>> result = itertools.dropwhile(lambda x: x&#x3C;5, data)\n>>> for each in result:\n>>>    print(each)\n5\n6\n7\n8\n9\n10\n1\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>filterfalse()</h3>\n<p>Makes an iterator that filters elements from iterable returning only those for which the predicate is False.</p>\n<pre><code class=\"language-python\">itertools.filterfalse(predicate, iterable)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]\n>>> result = itertools.filterfalse(lambda x: x&#x3C;5, data)\n>>> for each in result:\n>>>    print(each)\n5\n6\n7\n8\n9\n10\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>groupby()</h3>\n<p>Simply put, this function groups things together.</p>\n<pre><code class=\"language-python\">itertools.groupby(iterable, key=None)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> robots = [{\n    'name': 'blaster',\n    'faction': 'autobot'\n}, {\n    'name': 'galvatron',\n    'faction': 'decepticon'\n}, {\n    'name': 'jazz',\n    'faction': 'autobot'\n}, {\n    'name': 'metroplex',\n    'faction': 'autobot'\n}, {\n    'name': 'megatron',\n    'faction': 'decepticon'\n}, {\n    'name': 'starcream',\n    'faction': 'decepticon'\n}]\n>>> for key, group in itertools.groupby(robots, key=lambda x: x['faction']):\n>>>    print(key)\n>>>    print(list(group))\nautobot\n[{'name': 'blaster', 'faction': 'autobot'}]\ndecepticon\n[{'name': 'galvatron', 'faction': 'decepticon'}]\nautobot\n[{'name': 'jazz', 'faction': 'autobot'}, {'name': 'metroplex', 'faction': 'autobot'}]\ndecepticon\n[{'name': 'megatron', 'faction': 'decepticon'}, {'name': 'starcream', 'faction': 'decepticon'}]\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>islice()</h3>\n<p>This function is very much like slices. This allows you to cut out a piece of an iterable.</p>\n<pre><code class=\"language-python\">itertools.islice(iterable, start, stop[, step])\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> colors = ['red', 'orange', 'yellow', 'green', 'blue',]\n>>> few_colors = itertools.islice(colors, 2)\n>>> for each in few_colors:\n>>>    print(each)\nred\norange\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>permutations()</h3>\n<pre><code class=\"language-python\">itertools.permutations(iterable, r=None)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> alpha_data = ['a', 'b', 'c']\n>>> result = itertools.permutations(alpha_data)\n>>> for each in result:\n>>>    print(each)\n('a', 'b', 'c')\n('a', 'c', 'b')\n('b', 'a', 'c')\n('b', 'c', 'a')\n('c', 'a', 'b')\n('c', 'b', 'a')\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>product()</h3>\n<p>Creates the cartesian products from a series of iterables.</p>\n<pre><code class=\"language-python\">>>> num_data = [1, 2, 3]\n>>> alpha_data = ['a', 'b', 'c']\n>>> result = itertools.product(num_data, alpha_data)\n>>> for each in result:\n    print(each)\n(1, 'a')\n(1, 'b')\n(1, 'c')\n(2, 'a')\n(2, 'b')\n(2, 'c')\n(3, 'a')\n(3, 'b')\n(3, 'c')\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>repeat()</h3>\n<p>This function will repeat an object over and over again. Unless, there is a times argument.</p>\n<pre><code class=\"language-python\">itertools.repeat(object[, times])\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> for i in itertools.repeat(\"spam\", 3):\n    print(i)\nspam\nspam\nspam\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>starmap()</h3>\n<p>Makes an iterator that computes the function using arguments obtained from the iterable.</p>\n<pre><code class=\"language-python\">itertools.starmap(function, iterable)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> data = [(2, 6), (8, 4), (7, 3)]\n>>> result = itertools.starmap(operator.mul, data)\n>>> for each in result:\n>>>    print(each)\n12\n32\n21\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>takewhile()</h3>\n<p>The opposite of dropwhile(). Makes an iterator and returns elements from the iterable as long as the predicate is true.</p>\n<pre><code class=\"language-python\">itertools.takewhile(predicate, iterable)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]\n>>> result = itertools.takewhile(lambda x: x&#x3C;5, data)\n>>> for each in result:\n>>>    print(each)\n1\n2\n3\n4\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>tee()</h3>\n<p>Return n independent iterators from a single iterable.</p>\n<pre><code class=\"language-python\">itertools.tee(iterable, n=2)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> colors = ['red', 'orange', 'yellow', 'green', 'blue']\n>>> alpha_colors, beta_colors = itertools.tee(colors)\n>>> for each in alpha_colors:\n>>>    print(each)\nred\norange\nyellow\ngreen\nblue\n</code></pre>\n<pre><code class=\"language-python\">>>> colors = ['red', 'orange', 'yellow', 'green', 'blue']\n>>> alpha_colors, beta_colors = itertools.tee(colors)\n>>> for each in beta_colors:\n>>>    print(each)\nred\norange\nyellow\ngreen\nblue\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>zip_longest()</h3>\n<p>Makes an iterator that aggregates elements from each of the iterables. If the iterables are of uneven length, missing values are filled-in with fillvalue. Iteration continues until the longest iterable is exhausted.</p>\n<pre><code class=\"language-python\">itertools.zip_longest(*iterables, fillvalue=None)\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> colors = ['red', 'orange', 'yellow', 'green', 'blue',]\n>>> data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,]\n>>> for each in itertools.zip_longest(colors, data, fillvalue=None):\n>>>    print(each)\n('red', 1)\n('orange', 2)\n('yellow', 3)\n('green', 4)\n('blue', 5)\n(None, 6)\n(None, 7)\n(None, 8)\n(None, 9)\n(None, 10)\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>Comprehensions</h2>\n<h3>List comprehension</h3>\n<pre><code class=\"language-python\">>>> a = [1, 3, 5, 7, 9, 11]\n\n>>> [i - 1 for i in a]\n[0, 2, 4, 6, 8, 10]\n</code></pre>\n<h3>Set comprehension</h3>\n<pre><code class=\"language-python\">>>> b = {\"abc\", \"def\"}\n>>> {s.upper() for s in b}\n{\"ABC\", \"DEF\"}\n</code></pre>\n<h3>Dict comprehension</h3>\n<pre><code class=\"language-python\">>>> c = {'name': 'Pooka', 'age': 5}\n>>> {v: k for k, v in c.items()}\n{'Pooka': 'name', 5: 'age'}\n</code></pre>\n<p>A List comprehension can be generated from a dictionary:</p>\n<pre><code class=\"language-python\">>>> c = {'name': 'Pooka', 'first_name': 'Oooka'}\n>>> [\"{}:{}\".format(k.upper(), v.upper()) for k, v in c.items()]\n['NAME:POOKA', 'FIRST_NAME:OOOKA']\n</code></pre>\n<h2>Manipulating Strings</h2>\n<h3>Escape Characters</h3>\n<table>\n<thead>\n<tr>\n<th>Escape character</th>\n<th>Prints as</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\'</code></td>\n<td>Single quote</td>\n</tr>\n<tr>\n<td><code>\\\"</code></td>\n<td>Double quote</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>Tab</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>Newline (line break)</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>Backslash</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>Backspace</td>\n</tr>\n<tr>\n<td><code>\\ooo</code></td>\n<td>Octal value</td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>Carriage Return</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> print(\"Hello there!\\nHow are you?\\nI\\'m doing fine.\")\nHello there!\nHow are you?\nI'm doing fine.\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Raw Strings</h3>\n<p>A raw string completely ignores all escape characters and prints any backslash that appears in the string.</p>\n<pre><code class=\"language-python\">>>> print(r'That is Carol\\'s cat.')\nThat is Carol\\'s cat.\n</code></pre>\n<p>Note: mostly used for regular expression definition (see <code>re</code> package)</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Multiline Strings with Triple Quotes</h3>\n<pre><code class=\"language-python\">>>> print('''Dear Alice,\n>>>\n>>> Eve's cat has been arrested for catnapping, cat burglary, and extortion.\n>>>\n>>> Sincerely,\n>>> Bob''')\nDear Alice,\n\nEve's cat has been arrested for catnapping, cat burglary, and extortion.\n\nSincerely,\nBob\n</code></pre>\n<p>To keep a nicer flow in your code, you can use the <code>dedent</code> function from the <code>textwrap</code> standard package.</p>\n<pre><code class=\"language-python\">>>> from textwrap import dedent\n>>>\n>>> def my_function():\n>>>     print('''\n>>>         Dear Alice,\n>>>\n>>>         Eve's cat has been arrested for catnapping, cat burglary, and extortion.\n>>>\n>>>         Sincerely,\n>>>         Bob\n>>>         ''').strip()\n</code></pre>\n<p>This generates the same string than before.</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Indexing and Slicing Strings</h3>\n<pre><code>H   e   l   l   o       w   o   r   l   d    !\n0   1   2   3   4   5   6   7   8   9   10   11\n</code></pre>\n<pre><code class=\"language-python\">>>> spam = 'Hello world!'\n\n>>> spam[0]\n'H'\n</code></pre>\n<pre><code class=\"language-python\">>>> spam[4]\n'o'\n</code></pre>\n<pre><code class=\"language-python\">>>> spam[-1]\n'!'\n</code></pre>\n<p>Slicing:</p>\n<pre><code class=\"language-python\">>>> spam[0:5]\n'Hello'\n</code></pre>\n<pre><code class=\"language-python\">>>> spam[:5]\n'Hello'\n</code></pre>\n<pre><code class=\"language-python\">>>> spam[6:]\n'world!'\n</code></pre>\n<pre><code class=\"language-python\">>>> spam[6:-1]\n'world'\n</code></pre>\n<pre><code class=\"language-python\">>>> spam[:-1]\n'Hello world'\n</code></pre>\n<pre><code class=\"language-python\">>>> spam[::-1]\n'!dlrow olleH'\n</code></pre>\n<pre><code class=\"language-python\">>>> spam = 'Hello world!'\n>>> fizz = spam[0:5]\n>>> fizz\n'Hello'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>The in and not in Operators with Strings</h3>\n<pre><code class=\"language-python\">>>> 'Hello' in 'Hello World'\nTrue\n</code></pre>\n<pre><code class=\"language-python\">>>> 'Hello' in 'Hello'\nTrue\n</code></pre>\n<pre><code class=\"language-python\">>>> 'HELLO' in 'Hello World'\nFalse\n</code></pre>\n<pre><code class=\"language-python\">>>> '' in 'spam'\nTrue\n</code></pre>\n<pre><code class=\"language-python\">>>> 'cats' not in 'cats and dogs'\nFalse\n</code></pre>\n<h3>The in and not in Operators with list</h3>\n<pre><code class=\"language-python\">>>> a = [1, 2, 3, 4]\n>>> 5 in a\nFalse\n</code></pre>\n<pre><code class=\"language-python\">>>> 2 in a\nTrue\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>The upper(), lower(), isupper(), and islower() String Methods</h3>\n<p><code>upper()</code> and <code>lower()</code>:</p>\n<pre><code class=\"language-python\">>>> spam = 'Hello world!'\n>>> spam = spam.upper()\n>>> spam\n'HELLO WORLD!'\n</code></pre>\n<pre><code class=\"language-python\">>>> spam = spam.lower()\n>>> spam\n'hello world!'\n</code></pre>\n<p>isupper() and islower():</p>\n<pre><code class=\"language-python\">>>> spam = 'Hello world!'\n>>> spam.islower()\nFalse\n</code></pre>\n<pre><code class=\"language-python\">>>> spam.isupper()\nFalse\n</code></pre>\n<pre><code class=\"language-python\">>>> 'HELLO'.isupper()\nTrue\n</code></pre>\n<pre><code class=\"language-python\">>>> 'abc12345'.islower()\nTrue\n</code></pre>\n<pre><code class=\"language-python\">>>> '12345'.islower()\nFalse\n</code></pre>\n<pre><code class=\"language-python\">>>> '12345'.isupper()\nFalse\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>The isX String Methods</h3>\n<ul>\n<li><strong>isalpha()</strong> returns True if the string consists only of letters and is not blank.</li>\n<li><strong>isalnum()</strong> returns True if the string consists only of letters and numbers and is not blank.</li>\n<li><strong>isdecimal()</strong> returns True if the string consists only of numeric characters and is not blank.</li>\n<li><strong>isspace()</strong> returns True if the string consists only of spaces,tabs, and new-lines and is not blank.</li>\n<li><strong>istitle()</strong> returns True if the string consists only of words that begin with an uppercase letter followed by only lowercase letters.</li>\n</ul>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>The startswith() and endswith() String Methods</h3>\n<pre><code class=\"language-python\">>>> 'Hello world!'.startswith('Hello')\nTrue\n</code></pre>\n<pre><code class=\"language-python\">>>> 'Hello world!'.endswith('world!')\nTrue\n</code></pre>\n<pre><code class=\"language-python\">>>> 'abc123'.startswith('abcdef')\nFalse\n</code></pre>\n<pre><code class=\"language-python\">>>> 'abc123'.endswith('12')\nFalse\n</code></pre>\n<pre><code class=\"language-python\">>>> 'Hello world!'.startswith('Hello world!')\nTrue\n</code></pre>\n<pre><code class=\"language-python\">>>> 'Hello world!'.endswith('Hello world!')\nTrue\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>The join() and split() String Methods</h3>\n<p>join():</p>\n<pre><code class=\"language-python\">>>> ', '.join(['cats', 'rats', 'bats'])\n'cats, rats, bats'\n</code></pre>\n<pre><code class=\"language-python\">>>> ' '.join(['My', 'name', 'is', 'Simon'])\n'My name is Simon'\n</code></pre>\n<pre><code class=\"language-python\">>>> 'ABC'.join(['My', 'name', 'is', 'Simon'])\n'MyABCnameABCisABCSimon'\n</code></pre>\n<p>split():</p>\n<pre><code class=\"language-python\">>>> 'My name is Simon'.split()\n['My', 'name', 'is', 'Simon']\n</code></pre>\n<pre><code class=\"language-python\">>>> 'MyABCnameABCisABCSimon'.split('ABC')\n['My', 'name', 'is', 'Simon']\n</code></pre>\n<pre><code class=\"language-python\">>>> 'My name is Simon'.split('m')\n['My na', 'e is Si', 'on']\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Justifying Text with rjust(), ljust(), and center()</h3>\n<p>rjust() and ljust():</p>\n<pre><code class=\"language-python\">>>> 'Hello'.rjust(10)\n'     Hello'\n</code></pre>\n<pre><code class=\"language-python\">>>> 'Hello'.rjust(20)\n'               Hello'\n</code></pre>\n<pre><code class=\"language-python\">>>> 'Hello World'.rjust(20)\n'         Hello World'\n</code></pre>\n<pre><code class=\"language-python\">>>> 'Hello'.ljust(10)\n'Hello     '\n</code></pre>\n<p>An optional second argument to rjust() and ljust() will specify a fill character other than a space character. Enter the following into the interactive shell:</p>\n<pre><code class=\"language-python\">>>> 'Hello'.rjust(20, '*')\n'***************Hello'\n</code></pre>\n<pre><code class=\"language-python\">>>> 'Hello'.ljust(20, '-')\n'Hello---------------'\n</code></pre>\n<p>center():</p>\n<pre><code class=\"language-python\">>>> 'Hello'.center(20)\n'       Hello       '\n</code></pre>\n<pre><code class=\"language-python\">>>> 'Hello'.center(20, '=')\n'=======Hello========'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Removing Whitespace with strip(), rstrip(), and lstrip()</h3>\n<pre><code class=\"language-python\">>>> spam = '    Hello World     '\n>>> spam.strip()\n'Hello World'\n</code></pre>\n<pre><code class=\"language-python\">>>> spam.lstrip()\n'Hello World '\n</code></pre>\n<pre><code class=\"language-python\">>>> spam.rstrip()\n'    Hello World'\n</code></pre>\n<pre><code class=\"language-python\">>>> spam = 'SpamSpamBaconSpamEggsSpamSpam'\n>>> spam.strip('ampS')\n'BaconSpamEggs'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Copying and Pasting Strings with the pyperclip Module (need pip install)</h3>\n<pre><code class=\"language-python\">>>> import pyperclip\n\n>>> pyperclip.copy('Hello world!')\n\n>>> pyperclip.paste()\n'Hello world!'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>String Formatting</h2>\n<h3>% operator</h3>\n<pre><code class=\"language-python\">>>> name = 'Pete'\n>>> 'Hello %s' % name\n\"Hello Pete\"\n</code></pre>\n<p>We can use the <code>%x</code> format specifier to convert an int value to a string:</p>\n<pre><code class=\"language-python\">>>> num = 5\n>>> 'I have %x apples' % num\n\"I have 5 apples\"\n</code></pre>\n<p>Note: For new code, using <a href=\"#string-formatting-strformat\">str.format</a> or <a href=\"#formatted-string-literals-or-f-strings-python-36\">f-strings</a> (Python 3.6+) is strongly recommended over the <code>%</code> operator.</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>String Formatting (str.format)</h3>\n<p>Python 3 introduced a new way to do string formatting that was later back-ported to Python 2.7. This makes the syntax for string formatting more regular.</p>\n<pre><code class=\"language-python\">>>> name = 'John'\n>>> age = 20'\n\n>>> \"Hello I'm {}, my age is {}\".format(name, age)\n\"Hello I'm John, my age is 20\"\n</code></pre>\n<pre><code class=\"language-python\">>>> \"Hello I'm {0}, my age is {1}\".format(name, age)\n\"Hello I'm John, my age is 20\"\n</code></pre>\n<p>The official <a href=\"https://docs.python.org/3/library/stdtypes.html?highlight=sprintf#printf-style-string-formatting\">Python 3.x documentation</a> recommend <code>str.format</code> over the <code>%</code> operator:</p>\n<blockquote>\n<p>The formatting operations described here exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly). Using the newer formatted string literals or the str.format() interface helps avoid these errors. These alternatives also provide more powerful, flexible and extensible approaches to formatting text.</p>\n</blockquote>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Lazy string formatting</h3>\n<p>You would only use <code>%s</code> string formatting on functions that can do lazy parameters evaluation,\nthe most common being logging:</p>\n<p>Prefer:</p>\n<pre><code class=\"language-python\">>>> name = \"alice\"\n>>> logging.debug(\"User name: %s\", name)\n</code></pre>\n<p>Over:</p>\n<pre><code class=\"language-python\">>>> logging.debug(\"User name: {}\".format(name))\n</code></pre>\n<p>Or:</p>\n<pre><code class=\"language-python\">>>> logging.debug(\"User name: \" + name)\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Formatted String Literals or f-strings (Python 3.6+)</h3>\n<pre><code class=\"language-python\">>>> name = 'Elizabeth'\n>>> f'Hello {name}!'\n'Hello Elizabeth!\n</code></pre>\n<p>It is even possible to do inline arithmetic with it:</p>\n<pre><code class=\"language-python\">>>> a = 5\n>>> b = 10\n>>> f'Five plus ten is {a + b} and not {2 * (a + b)}.'\n'Five plus ten is 15 and not 30.'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Template Strings</h3>\n<p>A simpler and less powerful mechanism, but it is recommended when handling format strings generated by users. Due to their reduced complexity template strings are a safer choice.</p>\n<pre><code class=\"language-python\">>>> from string import Template\n>>> name = 'Elizabeth'\n>>> t = Template('Hey $name!')\n>>> t.substitute(name=name)\n'Hey Elizabeth!'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>Regular Expressions</h2>\n<ol>\n<li>Import the regex module with <code>import re</code>.</li>\n<li>Create a Regex object with the <code>re.compile()</code> function. (Remember to use a raw string.)</li>\n<li>Pass the string you want to search into the Regex object’s <code>search()</code> method. This returns a <code>Match</code> object.</li>\n<li>Call the Match object’s <code>group()</code> method to return a string of the actual matched text.</li>\n</ol>\n<p>All the regex functions in Python are in the re module:</p>\n<pre><code class=\"language-python\">>>> import re\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Matching Regex Objects</h3>\n<pre><code class=\"language-python\">>>> phone_num_regex = re.compile(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d')\n\n>>> mo = phone_num_regex.search('My number is 415-555-4242.')\n\n>>> print('Phone number found: {}'.format(mo.group()))\nPhone number found: 415-555-4242\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Grouping with Parentheses</h3>\n<pre><code class=\"language-python\">>>> phone_num_regex = re.compile(r'(\\d\\d\\d)-(\\d\\d\\d-\\d\\d\\d\\d)')\n\n>>> mo = phone_num_regex.search('My number is 415-555-4242.')\n\n>>> mo.group(1)\n'415'\n\n>>> mo.group(2)\n'555-4242'\n\n>>> mo.group(0)\n'415-555-4242'\n\n>>> mo.group()\n'415-555-4242'\n</code></pre>\n<p>To retrieve all the groups at once: use the groups() method—note the plural form for the name.</p>\n<pre><code class=\"language-python\">>>> mo.groups()\n('415', '555-4242')\n\n>>> area_code, main_number = mo.groups()\n\n>>> print(area_code)\n415\n\n>>> print(main_number)\n555-4242\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Matching Multiple Groups with the Pipe</h3>\n<p>The | character is called a pipe. You can use it anywhere you want to match one of many expressions. For example, the regular expression r'Batman|Tina Fey' will match either 'Batman' or 'Tina Fey'.</p>\n<pre><code class=\"language-python\">>>> hero_regex = re.compile (r'Batman|Tina Fey')\n\n>>> mo1 = hero_regex.search('Batman and Tina Fey.')\n\n>>> mo1.group()\n'Batman'\n\n>>> mo2 = hero_regex.search('Tina Fey and Batman.')\n\n>>> mo2.group()\n'Tina Fey'\n</code></pre>\n<p>You can also use the pipe to match one of several patterns as part of your regex:</p>\n<pre><code class=\"language-python\">>>> bat_regex = re.compile(r'Bat(man|mobile|copter|bat)')\n\n>>> mo = bat_regex.search('Batmobile lost a wheel')\n\n>>> mo.group()\n'Batmobile'\n\n>>> mo.group(1)\n'mobile'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Optional Matching with the Question Mark</h3>\n<p>The ? character flags the group that precedes it as an optional part of the pattern.</p>\n<pre><code class=\"language-python\">>>> bat_regex = re.compile(r'Bat(wo)?man')\n>>> mo1 = bat_regex.search('The Adventures of Batman')\n>>> mo1.group()\n'Batman'\n\n>>> mo2 = bat_regex.search('The Adventures of Batwoman')\n>>> mo2.group()\n'Batwoman'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Matching Zero or More with the Star</h3>\n<p>The * (called the star or asterisk) means “match zero or more”—the group that precedes the star can occur any number of times in the text.</p>\n<pre><code class=\"language-python\">>>> bat_regex = re.compile(r'Bat(wo)*man')\n>>> mo1 = bat_regex.search('The Adventures of Batman')\n>>> mo1.group()\n'Batman'\n\n>>> mo2 = bat_regex.search('The Adventures of Batwoman')\n>>> mo2.group()\n'Batwoman'\n\n>>> mo3 = bat_regex.search('The Adventures of Batwowowowoman')\n>>> mo3.group()\n'Batwowowowoman'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Matching One or More with the Plus</h3>\n<p>While * means “match zero or more,” the + (or plus) means “match one or more”. The group preceding a plus must appear at least once. It is not optional:</p>\n<pre><code class=\"language-python\">>>> bat_regex = re.compile(r'Bat(wo)+man')\n>>> mo1 = bat_regex.search('The Adventures of Batwoman')\n>>> mo1.group()\n'Batwoman'\n</code></pre>\n<pre><code class=\"language-python\">>>> mo2 = bat_regex.search('The Adventures of Batwowowowoman')\n>>> mo2.group()\n'Batwowowowoman'\n</code></pre>\n<pre><code class=\"language-python\">>>> mo3 = bat_regex.search('The Adventures of Batman')\n>>> mo3 is None\nTrue\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Matching Specific Repetitions with Curly Brackets</h3>\n<p>If you have a group that you want to repeat a specific number of times, follow the group in your regex with a number in curly brackets. For example, the regex (Ha){3} will match the string 'HaHaHa', but it will not match 'HaHa', since the latter has only two repeats of the (Ha) group.</p>\n<p>Instead of one number, you can specify a range by writing a minimum, a comma, and a maximum in between the curly brackets. For example, the regex (Ha){3,5} will match 'HaHaHa', 'HaHaHaHa', and 'HaHaHaHaHa'.</p>\n<pre><code class=\"language-python\">>>> ha_regex = re.compile(r'(Ha){3}')\n>>> mo1 = ha_regex.search('HaHaHa')\n>>> mo1.group()\n'HaHaHa'\n</code></pre>\n<pre><code class=\"language-python\">>>> mo2 = ha_regex.search('Ha')\n>>> mo2 is None\nTrue\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Greedy and Nongreedy Matching</h3>\n<p>Python’s regular expressions are greedy by default, which means that in ambiguous situations they will match the longest string possible. The non-greedy version of the curly brackets, which matches the shortest string possible, has the closing curly bracket followed by a question mark.</p>\n<pre><code class=\"language-python\">>>> greedy_ha_regex = re.compile(r'(Ha){3,5}')\n>>> mo1 = greedy_ha_regex.search('HaHaHaHaHa')\n>>> mo1.group()\n'HaHaHaHaHa'\n</code></pre>\n<pre><code class=\"language-python\">>>> nongreedy_ha_regex = re.compile(r'(Ha){3,5}?')\n>>> mo2 = nongreedy_ha_regex.search('HaHaHaHaHa')\n>>> mo2.group()\n'HaHaHa'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>The findall() Method</h3>\n<p>In addition to the search() method, Regex objects also have a findall() method. While search() will return a Match object of the first matched text in the searched string, the findall() method will return the strings of every match in the searched string.</p>\n<pre><code class=\"language-python\">>>> phone_num_regex = re.compile(r'\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d') # has no groups\n\n>>> phone_num_regex.findall('Cell: 415-555-9999 Work: 212-555-0000')\n['415-555-9999', '212-555-0000']\n</code></pre>\n<p>To summarize what the findall() method returns, remember the following:</p>\n<ul>\n<li>When called on a regex with no groups, such as \\d-\\d\\d\\d-\\d\\d\\d\\d, the method findall() returns a list of ng matches, such as ['415-555-9999', '212-555-0000'].</li>\n<li>When called on a regex that has groups, such as (\\d\\d\\d)-(d\\d)-(\\d\\d\\d\\d), the method findall() returns a list of es of strings (one string for each group), such as [('415', '555', '9999'), ('212', '555', '0000')].</li>\n</ul>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Making Your Own Character Classes</h3>\n<p>There are times when you want to match a set of characters but the shorthand character classes (\\d, \\w, \\s, and so on) are too broad. You can define your own character class using square brackets. For example, the character class [aeiouAEIOU] will match any vowel, both lowercase and uppercase.</p>\n<pre><code class=\"language-python\">>>> vowel_regex = re.compile(r'[aeiouAEIOU]')\n\n>>> vowel_regex.findall('Robocop eats baby food. BABY FOOD.')\n['o', 'o', 'o', 'e', 'a', 'a', 'o', 'o', 'A', 'O', 'O']\n</code></pre>\n<p>You can also include ranges of letters or numbers by using a hyphen. For example, the character class [a-zA-Z0-9] will match all lowercase letters, uppercase letters, and numbers.</p>\n<p>By placing a caret character (^) just after the character class’s opening bracket, you can make a negative character class. A negative character class will match all the characters that are not in the character class. For example, enter the following into the interactive shell:</p>\n<pre><code class=\"language-python\">>>> consonant_regex = re.compile(r'[^aeiouAEIOU]')\n\n>>> consonant_regex.findall('Robocop eats baby food. BABY FOOD.')\n['R', 'b', 'c', 'p', ' ', 't', 's', ' ', 'b', 'b', 'y', ' ', 'f', 'd', '.', '\n', 'B', 'B', 'Y', ' ', 'F', 'D', '.']\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>The Caret and Dollar Sign Characters</h3>\n<ul>\n<li>You can also use the caret symbol (^) at the start of a regex to indicate that a match must occur at the beginning of the searched text.</li>\n<li>Likewise, you can put a dollar sign ($) at the end of the regex to indicate the string must end with this regex pattern.</li>\n<li>And you can use the ^ and $ together to indicate that the entire string must match the regex—that is, it’s not enough for a match to be made on some subset of the string.</li>\n</ul>\n<p>The r'^Hello' regular expression string matches strings that begin with 'Hello':</p>\n<pre><code class=\"language-python\">>>> begins_with_hello = re.compile(r'^Hello')\n\n>>> begins_with_hello.search('Hello world!')\n&#x3C;_sre.SRE_Match object; span=(0, 5), match='Hello'>\n\n>>> begins_with_hello.search('He said hello.') is None\nTrue\n</code></pre>\n<p>The r'\\d$' regular expression string matches strings that end with a numeric character from 0 to 9:</p>\n<pre><code class=\"language-python\">>>> whole_string_is_num = re.compile(r'^\\d+$')\n\n>>> whole_string_is_num.search('1234567890')\n&#x3C;_sre.SRE_Match object; span=(0, 10), match='1234567890'>\n\n>>> whole_string_is_num.search('12345xyz67890') is None\nTrue\n\n>>> whole_string_is_num.search('12 34567890') is None\nTrue\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>The Wildcard Character</h3>\n<p>The . (or dot) character in a regular expression is called a wildcard and will match any character except for a newline:</p>\n<pre><code class=\"language-python\">>>> at_regex = re.compile(r'.at')\n\n>>> at_regex.findall('The cat in the hat sat on the flat mat.')\n['cat', 'hat', 'sat', 'lat', 'mat']\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Matching Everything with Dot-Star</h3>\n<pre><code class=\"language-python\">>>> name_regex = re.compile(r'First Name: (.*) Last Name: (.*)')\n\n>>> mo = name_regex.search('First Name: Al Last Name: Sweigart')\n\n>>> mo.group(1)\n'Al'\n</code></pre>\n<pre><code class=\"language-python\">>>> mo.group(2)\n'Sweigart'\n</code></pre>\n<p>The dot-star uses greedy mode: It will always try to match as much text as possible. To match any and all text in a nongreedy fashion, use the dot, star, and question mark (.*?). The question mark tells Python to match in a nongreedy way:</p>\n<pre><code class=\"language-python\">>>> nongreedy_regex = re.compile(r'&#x3C;.*?>')\n>>> mo = nongreedy_regex.search('&#x3C;To serve man> for dinner.>')\n>>> mo.group()\n'&#x3C;To serve man>'\n</code></pre>\n<pre><code class=\"language-python\">>>> greedy_regex = re.compile(r'&#x3C;.*>')\n>>> mo = greedy_regex.search('&#x3C;To serve man> for dinner.>')\n>>> mo.group()\n'&#x3C;To serve man> for dinner.>'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Matching Newlines with the Dot Character</h3>\n<p>The dot-star will match everything except a newline. By passing re.DOTALL as the second argument to re.compile(), you can make the dot character match all characters, including the newline character:</p>\n<pre><code class=\"language-python\">>>> no_newline_regex = re.compile('.*')\n>>> no_newline_regex.search('Serve the public trust.\\nProtect the innocent.\\nUphold the law.').group()\n'Serve the public trust.'\n</code></pre>\n<pre><code class=\"language-python\">>>> newline_regex = re.compile('.*', re.DOTALL)\n>>> newline_regex.search('Serve the public trust.\\nProtect the innocent.\\nUphold the law.').group()\n'Serve the public trust.\\nProtect the innocent.\\nUphold the law.'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Review of Regex Symbols</h3>\n<table>\n<thead>\n<tr>\n<th>Symbol</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>?</code></td>\n<td>zero or one of the preceding group.</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>zero or more of the preceding group.</td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>one or more of the preceding group.</td>\n</tr>\n<tr>\n<td><code>{n}</code></td>\n<td>exactly n of the preceding group.</td>\n</tr>\n<tr>\n<td><code>{n,}</code></td>\n<td>n or more of the preceding group.</td>\n</tr>\n<tr>\n<td><code>{,m}</code></td>\n<td>0 to m of the preceding group.</td>\n</tr>\n<tr>\n<td><code>{n,m}</code></td>\n<td>at least n and at most m of the preceding p.</td>\n</tr>\n<tr>\n<td><code>{n,m}?</code> or <code>*?</code> or <code>+?</code></td>\n<td>performs a nongreedy match of the preceding p.</td>\n</tr>\n<tr>\n<td><code>^spam</code></td>\n<td>means the string must begin with spam.</td>\n</tr>\n<tr>\n<td><code>spam$</code></td>\n<td>means the string must end with spam.</td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td>any character, except newline characters.</td>\n</tr>\n<tr>\n<td><code>\\d</code>, <code>\\w</code>, and <code>\\s</code></td>\n<td>a digit, word, or space character, respectively.</td>\n</tr>\n<tr>\n<td><code>\\D</code>, <code>\\W</code>, and <code>\\S</code></td>\n<td>anything except a digit, word, or space, respectively.</td>\n</tr>\n<tr>\n<td><code>[abc]</code></td>\n<td>any character between the brackets (such as a, b, ).</td>\n</tr>\n<tr>\n<td><code>[^abc]</code></td>\n<td>any character that isn’t between the brackets.</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Case-Insensitive Matching</h3>\n<p>To make your regex case-insensitive, you can pass re.IGNORECASE or re.I as a second argument to re.compile():</p>\n<pre><code class=\"language-python\">>>> robocop = re.compile(r'robocop', re.I)\n\n>>> robocop.search('Robocop is part man, part machine, all cop.').group()\n'Robocop'\n</code></pre>\n<pre><code class=\"language-python\">>>> robocop.search('ROBOCOP protects the innocent.').group()\n'ROBOCOP'\n</code></pre>\n<pre><code class=\"language-python\">>>> robocop.search('Al, why does your programming book talk about robocop so much?').group()\n'robocop'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Substituting Strings with the sub() Method</h3>\n<p>The sub() method for Regex objects is passed two arguments:</p>\n<ol>\n<li>The first argument is a string to replace any matches.</li>\n<li>The second is the string for the regular expression.</li>\n</ol>\n<p>The sub() method returns a string with the substitutions applied:</p>\n<pre><code class=\"language-python\">>>> names_regex = re.compile(r'Agent \\w+')\n\n>>> names_regex.sub('CENSORED', 'Agent Alice gave the secret documents to Agent Bob.')\n'CENSORED gave the secret documents to CENSORED.'\n</code></pre>\n<p>Another example:</p>\n<pre><code class=\"language-python\">>>> agent_names_regex = re.compile(r'Agent (\\w)\\w*')\n\n>>> agent_names_regex.sub(r'\\1****', 'Agent Alice told Agent Carol that Agent Eve knew Agent Bob was a double agent.')\nA**** told C**** that E**** knew B**** was a double agent.'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Managing Complex Regexes</h3>\n<p>To tell the re.compile() function to ignore whitespace and comments inside the regular expression string, “verbose mode” can be enabled by passing the variable re.VERBOSE as the second argument to re.compile().</p>\n<p>Now instead of a hard-to-read regular expression like this:</p>\n<pre><code class=\"language-python\">phone_regex = re.compile(r'((\\d{3}|\\(\\d{3}\\))?(\\s|-|\\.)?\\d{3}(\\s|-|\\.)\\d{4}(\\s*(ext|x|ext.)\\s*\\d{2,5})?)')\n</code></pre>\n<p>you can spread the regular expression over multiple lines with comments like this:</p>\n<pre><code class=\"language-python\">phone_regex = re.compile(r'''(\n    (\\d{3}|\\(\\d{3}\\))?            # area code\n    (\\s|-|\\.)?                    # separator\n    \\d{3}                         # first 3 digits\n    (\\s|-|\\.)                     # separator\n    \\d{4}                         # last 4 digits\n    (\\s*(ext|x|ext.)\\s*\\d{2,5})?  # extension\n    )''', re.VERBOSE)\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>Handling File and Directory Paths</h2>\n<p>There are two main modules in Python that deals with path manipulation.\nOne is the <code>os.path</code> module and the other is the <code>pathlib</code> module.\nThe <code>pathlib</code> module was added in Python 3.4, offering an object-oriented way\nto handle file system paths.</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Backslash on Windows and Forward Slash on OS X and Linux</h3>\n<p>On Windows, paths are written using backslashes (<code>\\</code>) as the separator between\nfolder names. On Unix based operating system such as macOS, Linux, and BSDs,\nthe forward slash (<code>/</code>) is used as the path separator. Joining paths can be\na headache if your code needs to work on different platforms.</p>\n<p>Fortunately, Python provides easy ways to handle this. We will showcase\nhow to deal with this with both <code>os.path.join</code> and <code>pathlib.Path.joinpath</code></p>\n<p>Using <code>os.path.join</code> on Windows:</p>\n<pre><code class=\"language-python\">>>> import os\n\n>>> os.path.join('usr', 'bin', 'spam')\n'usr\\\\bin\\\\spam'\n</code></pre>\n<p>And using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">>>> from pathlib import Path\n\n>>> print(Path('usr').joinpath('bin').joinpath('spam'))\nusr/bin/spam\n</code></pre>\n<p><code>pathlib</code> also provides a shortcut to joinpath using the <code>/</code> operator:</p>\n<pre><code class=\"language-python\">>>> from pathlib import Path\n\n>>> print(Path('usr') / 'bin' / 'spam')\nusr/bin/spam\n</code></pre>\n<p>Notice the path separator is different between Windows and Unix based operating\nsystem, that's why you want to use one of the above methods instead of\nadding strings together to join paths together.</p>\n<p>Joining paths is helpful if you need to create different file paths under\nthe same directory.</p>\n<p>Using <code>os.path.join</code> on Windows:</p>\n<pre><code class=\"language-python\">>>> my_files = ['accounts.txt', 'details.csv', 'invite.docx']\n\n>>> for filename in my_files:\n>>>     print(os.path.join('C:\\\\Users\\\\asweigart', filename))\nC:\\Users\\asweigart\\accounts.txt\nC:\\Users\\asweigart\\details.csv\nC:\\Users\\asweigart\\invite.docx\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">>>> my_files = ['accounts.txt', 'details.csv', 'invite.docx']\n>>> home = Path.home()\n>>> for filename in my_files:\n>>>     print(home / filename)\n/home/asweigart/accounts.txt\n/home/asweigart/details.csv\n/home/asweigart/invite.docx\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>The Current Working Directory</h3>\n<p>Using <code>os</code> on Windows:</p>\n<pre><code class=\"language-python\">>>> import os\n\n>>> os.getcwd()\n'C:\\\\Python34'\n>>> os.chdir('C:\\\\Windows\\\\System32')\n\n>>> os.getcwd()\n'C:\\\\Windows\\\\System32'\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">>>> from pathlib import Path\n>>> from os import chdir\n\n>>> print(Path.cwd())\n/home/asweigart\n\n>>> chdir('/usr/lib/python3.6')\n>>> print(Path.cwd())\n/usr/lib/python3.6\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Creating New Folders</h3>\n<p>Using <code>os</code> on Windows:</p>\n<pre><code class=\"language-python\">>>> import os\n>>> os.makedirs('C:\\\\delicious\\\\walnut\\\\waffles')\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">>>> from pathlib import Path\n>>> cwd = Path.cwd()\n>>> (cwd / 'delicious' / 'walnut' / 'waffles').mkdir()\nTraceback (most recent call last):\n  File \"&#x3C;stdin>\", line 1, in &#x3C;module>\n  File \"/usr/lib/python3.6/pathlib.py\", line 1226, in mkdir\n    self._accessor.mkdir(self, mode)\n  File \"/usr/lib/python3.6/pathlib.py\", line 387, in wrapped\n    return strfunc(str(pathobj), *args)\nFileNotFoundError: [Errno 2] No such file or directory: '/home/asweigart/delicious/walnut/waffles'\n</code></pre>\n<p>Oh no, we got a nasty error! The reason is that the 'delicious' directory does\nnot exist, so we cannot make the 'walnut' and the 'waffles' directories under\nit. To fix this, do:</p>\n<pre><code class=\"language-python\">>>> from pathlib import Path\n>>> cwd = Path.cwd()\n>>> (cwd / 'delicious' / 'walnut' / 'waffles').mkdir(parents=True)\n</code></pre>\n<p>And all is good :)</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Absolute vs. Relative Paths</h3>\n<p>There are two ways to specify a file path.</p>\n<ul>\n<li>An absolute path, which always begins with the root folder</li>\n<li>A relative path, which is relative to the program’s current working directory</li>\n</ul>\n<p>There are also the dot (.) and dot-dot (..) folders. These are not real folders but special names that can be used in a path. A single period (“dot”) for a folder name is shorthand for “this directory.” Two periods (“dot-dot”) means “the parent folder.”</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Handling Absolute and Relative Paths</h3>\n<p>To see if a path is an absolute path:</p>\n<p>Using <code>os.path</code> on *nix:</p>\n<pre><code class=\"language-python\">>>> import os\n>>> os.path.isabs('/')\nTrue\n>>> os.path.isabs('..')\nFalse\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">>>> from pathlib import Path\n>>> Path('/').is_absolute()\nTrue\n>>> Path('..').is_absolute()\nFalse\n</code></pre>\n<p>You can extract an absolute path with both <code>os.path</code> and <code>pathlib</code></p>\n<p>Using <code>os.path</code> on *nix:</p>\n<pre><code class=\"language-python\">>>> import os\n>>> os.getcwd()\n'/home/asweigart'\n>>> os.path.abspath('..')\n'/home'\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">from pathlib import Path\nprint(Path.cwd())\n/home/asweigart\nprint(Path('..').resolve())\n/home\n</code></pre>\n<p>You can get a relative path from a starting path to another path.</p>\n<p>Using <code>os.path</code> on *nix:</p>\n<pre><code class=\"language-python\">>>> import os\n>>> os.path.relpath('/etc/passwd', '/')\n'etc/passwd'\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">>>> from pathlib import Path\n>>> print(Path('/etc/passwd').relative_to('/'))\netc/passwd\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Checking Path Validity</h3>\n<p>Checking if a file/directory exists:</p>\n<p>Using <code>os.path</code> on *nix:</p>\n<pre><code class=\"language-python\">import os\n>>> os.path.exists('.')\nTrue\n>>> os.path.exists('setup.py')\nTrue\n>>> os.path.exists('/etc')\nTrue\n>>> os.path.exists('nonexistentfile')\nFalse\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">from pathlib import Path\n>>> Path('.').exists()\nTrue\n>>> Path('setup.py').exists()\nTrue\n>>> Path('/etc').exists()\nTrue\n>>> Path('nonexistentfile').exists()\nFalse\n</code></pre>\n<p>Checking if a path is a file:</p>\n<p>Using <code>os.path</code> on *nix:</p>\n<pre><code class=\"language-python\">>>> import os\n>>> os.path.isfile('setup.py')\nTrue\n>>> os.path.isfile('/home')\nFalse\n>>> os.path.isfile('nonexistentfile')\nFalse\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">>>> from pathlib import Path\n>>> Path('setup.py').is_file()\nTrue\n>>> Path('/home').is_file()\nFalse\n>>> Path('nonexistentfile').is_file()\nFalse\n</code></pre>\n<p>Checking if a path is a directory:</p>\n<p>Using <code>os.path</code> on *nix:</p>\n<pre><code class=\"language-python\">>>> import os\n>>> os.path.isdir('/')\nTrue\n>>> os.path.isdir('setup.py')\nFalse\n>>> os.path.isdir('/spam')\nFalse\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">>>> from pathlib import Path\n>>> Path('/').is_dir()\nTrue\n>>> Path('setup.py').is_dir()\nFalse\n>>> Path('/spam').is_dir()\nFalse\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Finding File Sizes and Folder Contents</h3>\n<p>Getting a file's size in bytes:</p>\n<p>Using <code>os.path</code> on Windows:</p>\n<pre><code class=\"language-python\">>>> import os\n>>> os.path.getsize('C:\\\\Windows\\\\System32\\\\calc.exe')\n776192\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">>>> from pathlib import Path\n>>> stat = Path('/bin/python3.6').stat()\n>>> print(stat) # stat contains some other information about the file as well\nos.stat_result(st_mode=33261, st_ino=141087, st_dev=2051, st_nlink=2, st_uid=0,\n--snip--\nst_gid=0, st_size=10024, st_atime=1517725562, st_mtime=1515119809, st_ctime=1517261276)\n>>> print(stat.st_size) # size in bytes\n10024\n</code></pre>\n<p>Listing directory contents using <code>os.listdir</code> on Windows:</p>\n<pre><code class=\"language-python\">>>> import os\n>>> os.listdir('C:\\\\Windows\\\\System32')\n['0409', '12520437.cpx', '12520850.cpx', '5U877.ax', 'aaclient.dll',\n--snip--\n'xwtpdui.dll', 'xwtpw32.dll', 'zh-CN', 'zh-HK', 'zh-TW', 'zipfldr.dll']\n</code></pre>\n<p>Listing directory contents using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">>>> from pathlib import Path\n>>> for f in Path('/usr/bin').iterdir():\n>>>     print(f)\n...\n/usr/bin/tiff2rgba\n/usr/bin/iconv\n/usr/bin/ldd\n/usr/bin/cache_restore\n/usr/bin/udiskie\n/usr/bin/unix2dos\n/usr/bin/t1reencode\n/usr/bin/epstopdf\n/usr/bin/idle3\n...\n</code></pre>\n<p>To find the total size of all the files in this directory:</p>\n<p><strong>WARNING</strong>: Directories themselves also have a size! So you might want to\ncheck for whether a path is a file or directory using the methods in the methods discussed in the above section!</p>\n<p>Using <code>os.path.getsize()</code> and <code>os.listdir()</code> together on Windows:</p>\n<pre><code class=\"language-python\">>>> import os\n>>> total_size = 0\n\n>>> for filename in os.listdir('C:\\\\Windows\\\\System32'):\n      total_size = total_size + os.path.getsize(os.path.join('C:\\\\Windows\\\\System32', filename))\n\n>>> print(total_size)\n1117846456\n</code></pre>\n<p>Using <code>pathlib</code> on *nix:</p>\n<pre><code class=\"language-python\">>>> from pathlib import Path\n>>> total_size = 0\n\n>>> for sub_path in Path('/usr/bin').iterdir():\n...     total_size += sub_path.stat().st_size\n>>>\n>>> print(total_size)\n1903178911\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Copying Files and Folders</h3>\n<p>The shutil module provides functions for copying files, as well as entire folders.</p>\n<pre><code class=\"language-python\">>>> import shutil, os\n\n>>> os.chdir('C:\\\\')\n\n>>> shutil.copy('C:\\\\spam.txt', 'C:\\\\delicious')\n   'C:\\\\delicious\\\\spam.txt'\n\n>>> shutil.copy('eggs.txt', 'C:\\\\delicious\\\\eggs2.txt')\n   'C:\\\\delicious\\\\eggs2.txt'\n</code></pre>\n<p>While shutil.copy() will copy a single file, shutil.copytree() will copy an entire folder and every folder and file contained in it:</p>\n<pre><code class=\"language-python\">>>> import shutil, os\n\n>>> os.chdir('C:\\\\')\n\n>>> shutil.copytree('C:\\\\bacon', 'C:\\\\bacon_backup')\n'C:\\\\bacon_backup'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Moving and Renaming Files and Folders</h3>\n<pre><code class=\"language-python\">>>> import shutil\n>>> shutil.move('C:\\\\bacon.txt', 'C:\\\\eggs')\n'C:\\\\eggs\\\\bacon.txt'\n</code></pre>\n<p>The destination path can also specify a filename. In the following example, the source file is moved and renamed:</p>\n<pre><code class=\"language-python\">>>> shutil.move('C:\\\\bacon.txt', 'C:\\\\eggs\\\\new_bacon.txt')\n'C:\\\\eggs\\\\new_bacon.txt'\n</code></pre>\n<p>If there is no eggs folder, then move() will rename bacon.txt to a file named eggs.</p>\n<pre><code class=\"language-python\">>>> shutil.move('C:\\\\bacon.txt', 'C:\\\\eggs')\n'C:\\\\eggs'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Permanently Deleting Files and Folders</h3>\n<ul>\n<li>Calling os.unlink(path) or Path.unlink() will delete the file at path.</li>\n<li>Calling os.rmdir(path) or Path.rmdir() will delete the folder at path. This folder must be empty of any files or folders.</li>\n<li>Calling shutil.rmtree(path) will remove the folder at path, and all files and folders it contains will also be deleted.</li>\n</ul>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Safe Deletes with the send2trash Module</h3>\n<p>You can install this module by running pip install send2trash from a Terminal window.</p>\n<pre><code class=\"language-python\">>>> import send2trash\n\n>>> with open('bacon.txt', 'a') as bacon_file: # creates the file\n...     bacon_file.write('Bacon is not a vegetable.')\n25\n\n>>> send2trash.send2trash('bacon.txt')\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Walking a Directory Tree</h3>\n<pre><code class=\"language-python\">>>> import os\n>>>\n>>> for folder_name, subfolders, filenames in os.walk('C:\\\\delicious'):\n>>>     print('The current folder is {}'.format(folder_name))\n>>>\n>>>     for subfolder in subfolders:\n>>>         print('SUBFOLDER OF {}: {}'.format(folder_name, subfolder))\n>>>     for filename in filenames:\n>>>         print('FILE INSIDE {}: {}'.format(folder_name, filename))\n>>>\n>>>     print('')\nThe current folder is C:\\delicious\nSUBFOLDER OF C:\\delicious: cats\nSUBFOLDER OF C:\\delicious: walnut\nFILE INSIDE C:\\delicious: spam.txt\n\nThe current folder is C:\\delicious\\cats\nFILE INSIDE C:\\delicious\\cats: catnames.txt\nFILE INSIDE C:\\delicious\\cats: zophie.jpg\n\nThe current folder is C:\\delicious\\walnut\nSUBFOLDER OF C:\\delicious\\walnut: waffles\n\nThe current folder is C:\\delicious\\walnut\\waffles\nFILE INSIDE C:\\delicious\\walnut\\waffles: butter.txt\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<p><code>pathlib</code> provides a lot more functionality than the ones listed above,\nlike getting file name, getting file extension, reading/writing a file without\nmanually opening it, etc. Check out the\n<a href=\"https://docs.python.org/3/library/pathlib.html\">official documentation</a>\nif you want to know more!</p>\n<h2>Reading and Writing Files</h2>\n<h3>The File Reading/Writing Process</h3>\n<p>To read/write to a file in Python, you will want to use the <code>with</code>\nstatement, which will close the file for you after you are done.</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Opening and reading files with the open() function</h3>\n<pre><code class=\"language-python\">>>> with open('C:\\\\Users\\\\your_home_folder\\\\hello.txt') as hello_file:\n...     hello_content = hello_file.read()\n>>> hello_content\n'Hello World!'\n\n>>> # Alternatively, you can use the *readlines()* method to get a list of string values from the file, one string for each line of text:\n\n>>> with open('sonnet29.txt') as sonnet_file:\n...     sonnet_file.readlines()\n[When, in disgrace with fortune and men's eyes,\\n', ' I all alone beweep my\noutcast state,\\n', And trouble deaf heaven with my bootless cries,\\n', And\nlook upon myself and curse my fate,']\n\n>>> # You can also iterate through the file line by line:\n>>> with open('sonnet29.txt') as sonnet_file:\n...     for line in sonnet_file: # note the new line character will be included in the line\n...         print(line, end='')\n\nWhen, in disgrace with fortune and men's eyes,\nI all alone beweep my outcast state,\nAnd trouble deaf heaven with my bootless cries,\nAnd look upon myself and curse my fate,\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Writing to Files</h3>\n<pre><code class=\"language-python\">>>> with open('bacon.txt', 'w') as bacon_file:\n...     bacon_file.write('Hello world!\\n')\n13\n\n>>> with open('bacon.txt', 'a') as bacon_file:\n...     bacon_file.write('Bacon is not a vegetable.')\n25\n\n>>> with open('bacon.txt') as bacon_file:\n...     content = bacon_file.read()\n\n>>> print(content)\nHello world!\nBacon is not a vegetable.\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Saving Variables with the shelve Module</h3>\n<p>To save variables:</p>\n<pre><code class=\"language-python\">>>> import shelve\n\n>>> cats = ['Zophie', 'Pooka', 'Simon']\n>>> with shelve.open('mydata') as shelf_file:\n...     shelf_file['cats'] = cats\n</code></pre>\n<p>To open and read variables:</p>\n<pre><code class=\"language-python\">>>> with shelve.open('mydata') as shelf_file:\n...     print(type(shelf_file))\n...     print(shelf_file['cats'])\n&#x3C;class 'shelve.DbfilenameShelf'>\n['Zophie', 'Pooka', 'Simon']\n</code></pre>\n<p>Just like dictionaries, shelf values have keys() and values() methods that will return list-like values of the keys and values in the shelf. Since these methods return list-like values instead of true lists, you should pass them to the list() function to get them in list form.</p>\n<pre><code class=\"language-python\">>>> with shelve.open('mydata') as shelf_file:\n...     print(list(shelf_file.keys()))\n...     print(list(shelf_file.values()))\n['cats']\n[['Zophie', 'Pooka', 'Simon']]\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Saving Variables with the pprint.pformat() Function</h3>\n<pre><code class=\"language-python\">>>> import pprint\n\n>>> cats = [{'name': 'Zophie', 'desc': 'chubby'}, {'name': 'Pooka', 'desc': 'fluffy'}]\n\n>>> pprint.pformat(cats)\n\"[{'desc': 'chubby', 'name': 'Zophie'}, {'desc': 'fluffy', 'name': 'Pooka'}]\"\n\n>>> with open('myCats.py', 'w') as file_obj:\n...     file_obj.write('cats = {}\\n'.format(pprint.pformat(cats)))\n83\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Reading ZIP Files</h3>\n<pre><code class=\"language-python\">>>> import zipfile, os\n\n>>> os.chdir('C:\\\\')    # move to the folder with example.zip\n>>> with zipfile.ZipFile('example.zip') as example_zip:\n...     print(example_zip.namelist())\n...     spam_info = example_zip.getinfo('spam.txt')\n...     print(spam_info.file_size)\n...     print(spam_info.compress_size)\n...     print('Compressed file is %sx smaller!' % (round(spam_info.file_size / spam_info.compress_size, 2)))\n\n['spam.txt', 'cats/', 'cats/catnames.txt', 'cats/zophie.jpg']\n13908\n3828\n'Compressed file is 3.63x smaller!'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Extracting from ZIP Files</h3>\n<p>The extractall() method for ZipFile objects extracts all the files and folders from a ZIP file into the current working directory.</p>\n<pre><code class=\"language-python\">>>> import zipfile, os\n\n>>> os.chdir('C:\\\\')    # move to the folder with example.zip\n\n>>> with zipfile.ZipFile('example.zip') as example_zip:\n...     example_zip.extractall()\n</code></pre>\n<p>The extract() method for ZipFile objects will extract a single file from the ZIP file. Continue the interactive shell example:</p>\n<pre><code class=\"language-python\">>>> with zipfile.ZipFile('example.zip') as example_zip:\n...     print(example_zip.extract('spam.txt'))\n...     print(example_zip.extract('spam.txt', 'C:\\\\some\\\\new\\\\folders'))\n'C:\\\\spam.txt'\n'C:\\\\some\\\\new\\\\folders\\\\spam.txt'\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Creating and Adding to ZIP Files</h3>\n<pre><code class=\"language-python\">>>> import zipfile\n\n>>> with zipfile.ZipFile('new.zip', 'w') as new_zip:\n...     new_zip.write('spam.txt', compress_type=zipfile.ZIP_DEFLATED)\n</code></pre>\n<p>This code will create a new ZIP file named new.zip that has the compressed contents of spam.txt.</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>JSON, YAML and configuration files</h2>\n<h3>JSON</h3>\n<p>Open a JSON file with:</p>\n<pre><code class=\"language-python\">import json\nwith open(\"filename.json\", \"r\") as f:\n    content = json.loads(f.read())\n</code></pre>\n<p>Write a JSON file with:</p>\n<pre><code class=\"language-python\">import json\n\ncontent = {\"name\": \"Joe\", \"age\": 20}\nwith open(\"filename.json\", \"w\") as f:\n    f.write(json.dumps(content, indent=2))\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>YAML</h3>\n<p>Compared to JSON, YAML allows for much better human maintainability and gives you the option to add comments.\nIt is a convenient choice for configuration files where humans will have to edit it.</p>\n<p>There are two main libraries allowing to access to YAML files:</p>\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/PyYAML\">PyYaml</a></li>\n<li><a href=\"https://pypi.python.org/pypi/ruamel.yaml\">Ruamel.yaml</a></li>\n</ul>\n<p>Install them using <code>pip install</code> in your virtual environment.</p>\n<p>The first one it easier to use but the second one, Ruamel, implements much better the YAML\nspecification, and allow for example to modify a YAML content without altering comments.</p>\n<p>Open a YAML file with:</p>\n<pre><code class=\"language-python\">from ruamel.yaml import YAML\n\nwith open(\"filename.yaml\") as f:\n    yaml=YAML()\n    yaml.load(f)\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Anyconfig</h3>\n<p><a href=\"https://pypi.python.org/pypi/anyconfig\">Anyconfig</a> is a very handy package allowing to abstract completely the underlying configuration file format. It allows to load a Python dictionary from JSON, YAML, TOML, and so on.</p>\n<p>Install it with:</p>\n<pre><code class=\"language-bash\">pip install anyconfig\n</code></pre>\n<p>Usage:</p>\n<pre><code class=\"language-python\">import anyconfig\n\nconf1 = anyconfig.load(\"/path/to/foo/conf.d/a.yml\")\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>Debugging</h2>\n<h3>Raising Exceptions</h3>\n<p>Exceptions are raised with a raise statement. In code, a raise statement consists of the following:</p>\n<ul>\n<li>The raise keyword</li>\n<li>A call to the Exception() function</li>\n<li>A string with a helpful error message passed to the Exception() function</li>\n</ul>\n<pre><code class=\"language-python\">>>> raise Exception('This is the error message.')\nTraceback (most recent call last):\n  File \"&#x3C;pyshell#191>\", line 1, in &#x3C;module>\n    raise Exception('This is the error message.')\nException: This is the error message.\n</code></pre>\n<p>Often it’s the code that calls the function, not the function itself, that knows how to handle an exception. So you will commonly see a raise statement inside a function and the try and except statements in the code calling the function.</p>\n<pre><code class=\"language-python\">def box_print(symbol, width, height):\n    if len(symbol) != 1:\n      raise Exception('Symbol must be a single character string.')\n    if width &#x3C;= 2:\n      raise Exception('Width must be greater than 2.')\n    if height &#x3C;= 2:\n      raise Exception('Height must be greater than 2.')\n    print(symbol * width)\n    for i in range(height - 2):\n        print(symbol + (' ' * (width - 2)) + symbol)\n    print(symbol * width)\nfor sym, w, h in (('*', 4, 4), ('O', 20, 5), ('x', 1, 3), ('ZZ', 3, 3)):\n    try:\n        box_print(sym, w, h)\n    except Exception as err:\n        print('An exception happened: ' + str(err))\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Getting the Traceback as a String</h3>\n<p>The traceback is displayed by Python whenever a raised exception goes unhandled. But can also obtain it as a string by calling traceback.format_exc(). This function is useful if you want the information from an exception’s traceback but also want an except statement to gracefully handle the exception. You will need to import Python’s traceback module before calling this function.</p>\n<pre><code class=\"language-python\">>>> import traceback\n\n>>> try:\n>>>      raise Exception('This is the error message.')\n>>> except:\n>>>      with open('errorInfo.txt', 'w') as error_file:\n>>>          error_file.write(traceback.format_exc())\n>>>      print('The traceback info was written to errorInfo.txt.')\n116\nThe traceback info was written to errorInfo.txt.\n</code></pre>\n<p>The 116 is the return value from the write() method, since 116 characters were written to the file. The traceback text was written to errorInfo.txt.</p>\n<pre><code>Traceback (most recent call last):\n  File \"&#x3C;pyshell#28>\", line 2, in &#x3C;module>\nException: This is the error message.\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Assertions</h3>\n<p>An assertion is a sanity check to make sure your code isn’t doing something obviously wrong. These sanity checks are performed by assert statements. If the sanity check fails, then an AssertionError exception is raised. In code, an assert statement consists of the following:</p>\n<ul>\n<li>The assert keyword</li>\n<li>A condition (that is, an expression that evaluates to True or False)</li>\n<li>A comma</li>\n<li>A string to display when the condition is False</li>\n</ul>\n<pre><code class=\"language-python\">>>> pod_bay_door_status = 'open'\n\n>>> assert pod_bay_door_status == 'open', 'The pod bay doors need to be \"open\".'\n\n>>> pod_bay_door_status = 'I\\'m sorry, Dave. I\\'m afraid I can\\'t do that.'\n\n>>> assert pod_bay_door_status == 'open', 'The pod bay doors need to be \"open\".'\n\nTraceback (most recent call last):\n  File \"&#x3C;pyshell#10>\", line 1, in &#x3C;module>\n    assert pod_bay_door_status == 'open', 'The pod bay doors need to be \"open\".'\nAssertionError: The pod bay doors need to be \"open\".\n</code></pre>\n<p>In plain English, an assert statement says, “I assert that this condition holds true, and if not, there is a bug somewhere in the program.” Unlike exceptions, your code should not handle assert statements with try and except; if an assert fails, your program should crash. By failing fast like this, you shorten the time between the original cause of the bug and when you first notice the bug. This will reduce the amount of code you will have to check before finding the code that’s causing the bug.</p>\n<p>Disabling Assertions</p>\n<p>Assertions can be disabled by passing the -O option when running Python.</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Logging</h3>\n<p>To enable the logging module to display log messages on your screen as your program runs, copy the following to the top of your program (but under the #! python shebang line):</p>\n<pre><code class=\"language-python\">import logging\n\nlogging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s- %(message)s')\n</code></pre>\n<p>Say you wrote a function to calculate the factorial of a number. In mathematics, factorial 4 is 1 × 2 × 3 × 4, or 24. Factorial 7 is 1 × 2 × 3 × 4 × 5 × 6 × 7, or 5,040. Open a new file editor window and enter the following code. It has a bug in it, but you will also enter several log messages to help yourself figure out what is going wrong. Save the program as factorialLog.py.</p>\n<pre><code class=\"language-python\">>>> import logging\n>>>\n>>> logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s- %(message)s')\n>>>\n>>> logging.debug('Start of program')\n>>>\n>>> def factorial(n):\n>>>\n>>>     logging.debug('Start of factorial(%s)' % (n))\n>>>     total = 1\n>>>\n>>>     for i in range(1, n + 1):\n>>>         total *= i\n>>>         logging.debug('i is ' + str(i) + ', total is ' + str(total))\n>>>\n>>>     logging.debug('End of factorial(%s)' % (n))\n>>>\n>>>     return total\n>>>\n>>> print(factorial(5))\n>>> logging.debug('End of program')\n2015-05-23 16:20:12,664 - DEBUG - Start of program\n2015-05-23 16:20:12,664 - DEBUG - Start of factorial(5)\n2015-05-23 16:20:12,665 - DEBUG - i is 0, total is 0\n2015-05-23 16:20:12,668 - DEBUG - i is 1, total is 0\n2015-05-23 16:20:12,670 - DEBUG - i is 2, total is 0\n2015-05-23 16:20:12,673 - DEBUG - i is 3, total is 0\n2015-05-23 16:20:12,675 - DEBUG - i is 4, total is 0\n2015-05-23 16:20:12,678 - DEBUG - i is 5, total is 0\n2015-05-23 16:20:12,680 - DEBUG - End of factorial(5)\n0\n2015-05-23 16:20:12,684 - DEBUG - End of program\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Logging Levels</h3>\n<p>Logging levels provide a way to categorize your log messages by importance. There are five logging levels, described in Table 10-1 from least to most important. Messages can be logged at each level using a different logging function.</p>\n<table>\n<thead>\n<tr>\n<th>Level</th>\n<th>Logging Function</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>DEBUG</code></td>\n<td><code>logging.debug()</code></td>\n<td>The lowest level. Used for small details. Usually you care about these messages only when diagnosing problems.</td>\n</tr>\n<tr>\n<td><code>INFO</code></td>\n<td><code>logging.info()</code></td>\n<td>Used to record information on general events in your program or confirm that things are working at their point in the program.</td>\n</tr>\n<tr>\n<td><code>WARNING</code></td>\n<td><code>logging.warning()</code></td>\n<td>Used to indicate a potential problem that doesn’t prevent the program from working but might do so in the future.</td>\n</tr>\n<tr>\n<td><code>ERROR</code></td>\n<td><code>logging.error()</code></td>\n<td>Used to record an error that caused the program to fail to do something.</td>\n</tr>\n<tr>\n<td><code>CRITICAL</code></td>\n<td><code>logging.critical()</code></td>\n<td>The highest level. Used to indicate a fatal error that has caused or is about to cause the program to stop running entirely.</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Disabling Logging</h3>\n<p>After you’ve debugged your program, you probably don’t want all these log messages cluttering the screen. The logging.disable() function disables these so that you don’t have to go into your program and remove all the logging calls by hand.</p>\n<pre><code class=\"language-python\">>>> import logging\n\n>>> logging.basicConfig(level=logging.INFO, format=' %(asctime)s -%(levelname)s - %(message)s')\n\n>>> logging.critical('Critical error! Critical error!')\n2015-05-22 11:10:48,054 - CRITICAL - Critical error! Critical error!\n\n>>> logging.disable(logging.CRITICAL)\n\n>>> logging.critical('Critical error! Critical error!')\n\n>>> logging.error('Error! Error!')\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Logging to a File</h3>\n<p>Instead of displaying the log messages to the screen, you can write them to a text file. The logging.basicConfig() function takes a filename keyword argument, like so:</p>\n<pre><code class=\"language-python\">import logging\n\nlogging.basicConfig(filename='myProgramLog.txt', level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>Lambda Functions</h2>\n<p>This function:</p>\n<pre><code class=\"language-python\">>>> def add(x, y):\n        return x + y\n\n>>> add(5, 3)\n8\n</code></pre>\n<p>Is equivalent to the <em>lambda</em> function:</p>\n<pre><code class=\"language-python\">>>> add = lambda x, y: x + y\n>>> add(5, 3)\n8\n</code></pre>\n<p>It's not even need to bind it to a name like add before:</p>\n<pre><code class=\"language-python\">>>> (lambda x, y: x + y)(5, 3)\n8\n</code></pre>\n<p>Like regular nested functions, lambdas also work as lexical closures:</p>\n<pre><code class=\"language-python\">>>> def make_adder(n):\n        return lambda x: x + n\n\n>>> plus_3 = make_adder(3)\n>>> plus_5 = make_adder(5)\n\n>>> plus_3(4)\n7\n>>> plus_5(4)\n9\n</code></pre>\n<p>Note: lambda can only evaluate an expression, like a single line of code.</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>Ternary Conditional Operator</h2>\n<p>Many programming languages have a ternary operator, which define a conditional expression. The most common usage is to make a terse simple conditional assignment statement. In other words, it offers one-line code to evaluate the first expression if the condition is true, otherwise it evaluates the second expression.</p>\n<pre><code>&#x3C;expression1> if &#x3C;condition> else &#x3C;expression2>\n</code></pre>\n<p>Example:</p>\n<pre><code class=\"language-python\">>>> age = 15\n\n>>> print('kid' if age &#x3C; 18 else 'adult')\nkid\n</code></pre>\n<p>Ternary operators can be chained:</p>\n<pre><code class=\"language-python\">>>> age = 15\n\n>>> print('kid' if age &#x3C; 13 else 'teenager' if age &#x3C; 18 else 'adult')\nteenager\n</code></pre>\n<p>The code above is equivalent to:</p>\n<pre><code class=\"language-python\">if age &#x3C; 18:\n    if age &#x3C; 13:\n        print('kid')\n    else:\n        print('teenager')\nelse:\n    print('adult')\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>args and kwargs</h2>\n<p>The names <code>args and kwargs</code> are arbitrary - the important thing are the <code>*</code> and <code>**</code> operators. They can mean:</p>\n<ol>\n<li>In a function declaration, <code>*</code> means “pack all remaining positional arguments into a tuple named <code>&#x3C;name></code>”, while <code>**</code> is the same for keyword arguments (except it uses a dictionary, not a tuple).</li>\n<li>In a function call, <code>*</code> means “unpack tuple or list named <code>&#x3C;name></code> to positional arguments at this position”, while <code>**</code> is the same for keyword arguments.</li>\n</ol>\n<p>For example you can make a function that you can use to call any other function, no matter what parameters it has:</p>\n<pre><code class=\"language-python\">def forward(f, *args, **kwargs):\n    return f(*args, **kwargs)\n</code></pre>\n<p>Inside forward, args is a tuple (of all positional arguments except the first one, because we specified it - the f), kwargs is a dict. Then we call f and unpack them so they become normal arguments to f.</p>\n<p>You use <code>*args</code> when you have an indefinite amount of positional arguments.</p>\n<pre><code class=\"language-python\">>>> def fruits(*args):\n>>>    for fruit in args:\n>>>       print(fruit)\n\n>>> fruits(\"apples\", \"bananas\", \"grapes\")\n\n\"apples\"\n\"bananas\"\n\"grapes\"\n</code></pre>\n<p>Similarly, you use <code>**kwargs</code> when you have an indefinite number of keyword arguments.</p>\n<pre><code class=\"language-python\">>>> def fruit(**kwargs):\n>>>    for key, value in kwargs.items():\n>>>        print(\"{0}: {1}\".format(key, value))\n\n>>> fruit(name = \"apple\", color = \"red\")\n\nname: apple\ncolor: red\n</code></pre>\n<pre><code class=\"language-python\">>>> def show(arg1, arg2, *args, kwarg1=None, kwarg2=None, **kwargs):\n>>>   print(arg1)\n>>>   print(arg2)\n>>>   print(args)\n>>>   print(kwarg1)\n>>>   print(kwarg2)\n>>>   print(kwargs)\n\n>>> data1 = [1,2,3]\n>>> data2 = [4,5,6]\n>>> data3 = {'a':7,'b':8,'c':9}\n\n>>> show(*data1,*data2, kwarg1=\"python\",kwarg2=\"cheatsheet\",**data3)\n1\n2\n(3, 4, 5, 6)\npython\ncheatsheet\n{'a': 7, 'b': 8, 'c': 9}\n\n>>> show(*data1, *data2, **data3)\n1\n2\n(3, 4, 5, 6)\nNone\nNone\n{'a': 7, 'b': 8, 'c': 9}\n\n# If you do not specify ** for kwargs\n>>> show(*data1, *data2, *data3)\n1\n2\n(3, 4, 5, 6, \"a\", \"b\", \"c\")\nNone\nNone\n{}\n</code></pre>\n<h3>Things to Remember(args)</h3>\n<ol>\n<li>Functions can accept a variable number of positional arguments by using <code>*args</code> in the def statement.</li>\n<li>You can use the items from a sequence as the positional arguments for a function with the <code>*</code> operator.</li>\n<li>Using the <code>*</code> operator with a generator may cause your program to run out of memory and crash.</li>\n<li>Adding new positional parameters to functions that accept <code>*args</code> can introduce hard-to-find bugs.</li>\n</ol>\n<h3>Things to Remember(kwargs)</h3>\n<ol>\n<li>Function arguments can be specified by position or by keyword.</li>\n<li>Keywords make it clear what the purpose of each argument is when it would be confusing with only positional arguments.</li>\n<li>Keyword arguments with default values make it easy to add new behaviors to a function, especially when the function has existing callers.</li>\n<li>Optional keyword arguments should always be passed by keyword instead of by position.</li>\n</ol>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>Context Manager</h2>\n<p>While Python's context managers are widely used, few understand the purpose behind their use. These statements, commonly used with reading and writing files, assist the application in conserving system memory and improve resource management by ensuring specific resources are only in use for certain processes.</p>\n<h3>with statement</h3>\n<p>A context manager is an object that is notified when a context (a block of code) starts and ends. You commonly use one with the with statement. It takes care of the notifying.</p>\n<p>For example, file objects are context managers. When a context ends, the file object is closed automatically:</p>\n<pre><code class=\"language-python\">>>> with open(filename) as f:\n>>>     file_contents = f.read()\n\n# the open_file object has automatically been closed.\n</code></pre>\n<p>Anything that ends execution of the block causes the context manager's exit method to be called. This includes exceptions, and can be useful when an error causes you to prematurely exit from an open file or connection. Exiting a script without properly closing files/connections is a bad idea, that may cause data loss or other problems. By using a context manager you can ensure that precautions are always taken to prevent damage or loss in this way.</p>\n<h3>Writing your own contextmanager using generator syntax</h3>\n<p>It is also possible to write a context manager using generator syntax thanks to the <code>contextlib.contextmanager</code> decorator:</p>\n<pre><code class=\"language-python\">>>> import contextlib\n>>> @contextlib.contextmanager\n... def context_manager(num):\n...     print('Enter')\n...     yield num + 1\n...     print('Exit')\n>>> with context_manager(2) as cm:\n...     # the following instructions are run when the 'yield' point of the context\n...     # manager is reached.\n...     # 'cm' will have the value that was yielded\n...     print('Right in the middle with cm = {}'.format(cm))\nEnter\nRight in the middle with cm = 3\nExit\n\n>>>\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2><code>__main__</code> Top-level script environment</h2>\n<p><code>__main__</code> is the name of the scope in which top-level code executes.\nA module’s <strong>name</strong> is set equal to <code>__main__</code> when read from standard input, a script, or from an interactive prompt.</p>\n<p>A module can discover whether or not it is running in the main scope by checking its own <code>__name__</code>, which allows a common idiom for conditionally executing code in a module when it is run as a script or with <code>python -m</code> but not when it is imported:</p>\n<pre><code class=\"language-python\">>>> if __name__ == \"__main__\":\n...     # execute only if run as a script\n...     main()\n</code></pre>\n<p>For a package, the same effect can be achieved by including a <strong>main</strong>.py module, the contents of which will be executed when the module is run with -m</p>\n<p>For example we are developing script which is designed to be used as module, we should do:</p>\n<pre><code class=\"language-python\">>>> # Python program to execute function directly\n>>> def add(a, b):\n...     return a+b\n...\n>>> add(10, 20) # we can test it by calling the function save it as calculate.py\n30\n>>> # Now if we want to use that module by importing we have to comment out our call,\n>>> # Instead we can write like this in calculate.py\n>>> if __name__ == \"__main__\":\n...     add(3, 5)\n...\n>>> import calculate\n>>> calculate.add(3, 5)\n8\n</code></pre>\n<h3>Advantages</h3>\n<ol>\n<li>Every Python module has it’s <code>__name__</code> defined and if this is <code>__main__</code>, it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.</li>\n<li>If you import this script as a module in another script, the <strong>name</strong> is set to the name of the script/module.</li>\n<li>Python files can act as either reusable modules, or as standalone programs.</li>\n<li>if <code>__name__ == “main”:</code> is used to execute some code only if the file was run directly, and not imported.</li>\n</ol>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>setup.py</h2>\n<p>The setup script is the centre of all activity in building, distributing, and installing modules using the Distutils. The main purpose of the setup script is to describe your module distribution to the Distutils, so that the various commands that operate on your modules do the right thing.</p>\n<p>The <code>setup.py</code> file is at the heart of a Python project. It describes all of the metadata about your project. There a quite a few fields you can add to a project to give it a rich set of metadata describing the project. However, there are only three required fields: name, version, and packages. The name field must be unique if you wish to publish your package on the Python Package Index (PyPI). The version field keeps track of different releases of the project. The packages field describes where you’ve put the Python source code within your project.</p>\n<p>This allows you to easily install Python packages. Often it's enough to write:</p>\n<pre><code class=\"language-bash\">python setup.py install\n</code></pre>\n<p>and module will install itself.</p>\n<p>Our initial setup.py will also include information about the license and will re-use the README.txt file for the long_description field. This will look like:</p>\n<pre><code class=\"language-python\">>>> from distutils.core import setup\n>>> setup(\n...    name='pythonCheatsheet',\n...    version='0.1',\n...    packages=['pipenv',],\n...    license='MIT',\n...    long_description=open('README.txt').read(),\n... )\n</code></pre>\n<p>Find more information visit <a href=\"http://docs.python.org/install/index.html\">http://docs.python.org/install/index.html</a>.</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>Dataclasses</h2>\n<p><code>Dataclasses</code> are python classes but are suited for storing data objects.\nThis module provides a decorator and functions for automatically adding generated special methods such as <code>__init__()</code> and <code>__repr__()</code> to user-defined classes.</p>\n<h3>Features</h3>\n<ol>\n<li>They store data and represent a certain data type. Ex: A number. For people familiar with ORMs, a model instance is a data object. It represents a specific kind of entity. It holds attributes that define or represent the entity.</li>\n<li>They can be compared to other objects of the same type. Ex: A number can be greater than, less than, or equal to another number.</li>\n</ol>\n<p>Python 3.7 provides a decorator dataclass that is used to convert a class into a dataclass.</p>\n<p>python 2.7</p>\n<pre><code class=\"language-python\">>>> class Number:\n...     def __init__(self, val):\n...         self.val = val\n...\n>>> obj = Number(2)\n>>> obj.val\n2\n</code></pre>\n<p>with dataclass</p>\n<pre><code class=\"language-python\">>>> @dataclass\n... class Number:\n...     val: int\n...\n>>> obj = Number(2)\n>>> obj.val\n2\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>Default values</h3>\n<p>It is easy to add default values to the fields of your data class.</p>\n<pre><code class=\"language-python\">>>> @dataclass\n... class Product:\n...     name: str\n...     count: int = 0\n...     price: float = 0.0\n...\n>>> obj = Product(\"Python\")\n>>> obj.name\nPython\n>>> obj.count\n0\n>>> obj.price\n0.0\n</code></pre>\n<h3>Type hints</h3>\n<p>It is mandatory to define the data type in dataclass. However, If you don't want specify the datatype then, use <code>typing.Any</code>.</p>\n<pre><code class=\"language-python\">>>> from dataclasses import dataclass\n>>> from typing import Any\n\n>>> @dataclass\n... class WithoutExplicitTypes:\n...    name: Any\n...    value: Any = 42\n...\n</code></pre>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h2>Virtual Environment</h2>\n<p>The use of a Virtual Environment is to test python code in encapsulated environments and to also avoid filling the base Python installation with libraries we might use for only one project.</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>virtualenv</h3>\n<ol>\n<li>\n<p>Install virtualenv</p>\n<pre><code>pip install virtualenv\n</code></pre>\n</li>\n<li>\n<p>Install virtualenvwrapper-win (Windows)</p>\n<pre><code>pip install virtualenvwrapper-win\n</code></pre>\n</li>\n</ol>\n<p>Usage:</p>\n<ol>\n<li>\n<p>Make a Virtual Environment</p>\n<pre><code>mkvirtualenv HelloWold\n</code></pre>\n<p>Anything we install now will be specific to this project. And available to the projects we connect to this environment.</p>\n</li>\n<li>\n<p>Set Project Directory</p>\n<p>To bind our virtualenv with our current working directory we simply enter:</p>\n<pre><code>setprojectdir .\n</code></pre>\n</li>\n<li>\n<p>Deactivate</p>\n<p>To move onto something else in the command line type ‘deactivate’ to deactivate your environment.</p>\n<pre><code>deactivate\n</code></pre>\n<p>Notice how the parenthesis disappear.</p>\n</li>\n<li>\n<p>Workon</p>\n<p>Open up the command prompt and type ‘workon HelloWold’ to activate the environment and move into your root project folder</p>\n<pre><code>workon HelloWold\n</code></pre>\n</li>\n</ol>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>poetry</h3>\n<blockquote>\n<p><a href=\"https://poetry.eustace.io/\">Poetry</a> is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.</p>\n</blockquote>\n<ol>\n<li>\n<p>Install Poetry</p>\n<pre><code>pip install --user poetry\n</code></pre>\n</li>\n<li>\n<p>Create a new project</p>\n<pre><code>poetry new my-project\n</code></pre>\n<p>This will create a my-project directory:</p>\n<pre><code>my-project\n├── pyproject.toml\n├── README.rst\n├── poetry_demo\n│   └── __init__.py\n└── tests\n    ├── __init__.py\n    └── test_poetry_demo.py\n</code></pre>\n<p>The pyproject.toml file will orchestrate your project and its dependencies:</p>\n<pre><code>[tool.poetry]\nname = \"my-project\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"your name &#x3C;your@mail.com>\"]\n\n[tool.poetry.dependencies]\npython = \"*\"\n\n[tool.poetry.dev-dependencies]\npytest = \"^3.4\"\n</code></pre>\n</li>\n<li>\n<p>Packages</p>\n<p>To add dependencies to your project, you can specify them in the tool.poetry.dependencies section:</p>\n<pre><code>[tool.poetry.dependencies]\npendulum = \"^1.4\"\n</code></pre>\n<p>Also, instead of modifying the pyproject.toml file by hand, you can use the add command and it will automatically find a suitable version constraint.</p>\n<pre><code>$ poetry add pendulum\n</code></pre>\n<p>To install the dependencies listed in the pyproject.toml:</p>\n<pre><code>poetry install\n</code></pre>\n<p>To remove dependencies:</p>\n<pre><code>poetry remove pendulum\n</code></pre>\n</li>\n</ol>\n<p>For more information, check the <a href=\"https://poetry.eustace.io/docs/\">documentation</a>.</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>pipenv</h3>\n<blockquote>\n<p><a href=\"https://pipenv.readthedocs.io/en/latest/\">Pipenv</a> is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. Windows is a first-class citizen, in our world.</p>\n</blockquote>\n<ol>\n<li>\n<p>Install pipenv</p>\n<pre><code>pip install pipenv\n</code></pre>\n</li>\n<li>\n<p>Enter your Project directory and install the Packages for your project</p>\n<pre><code>cd my_project\npipenv install &#x3C;package>\n</code></pre>\n<p>Pipenv will install your package and create a Pipfile for you in your project’s directory. The Pipfile is used to track which dependencies your project needs in case you need to re-install them.</p>\n</li>\n<li>\n<p>Uninstall Packages</p>\n<pre><code>pipenv uninstall &#x3C;package>\n</code></pre>\n</li>\n<li>\n<p>Activate the Virtual Environment associated with your Python project</p>\n<pre><code>pipenv shell\n</code></pre>\n</li>\n<li>\n<p>Exit the Virtual Environment</p>\n<pre><code>exit\n</code></pre>\n</li>\n</ol>\n<p>Find more information and a video in <a href=\"https://docs.pipenv.org/\">docs.pipenv.org</a>.</p>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>\n<h3>anaconda</h3>\n<p><a href=\"https://anaconda.org/\">Anaconda</a> is another popular tool to manage python packages.</p>\n<blockquote>\n<p>Where packages, notebooks, projects and environments are shared.\nYour place for free public conda package hosting.</p>\n</blockquote>\n<p>Usage:</p>\n<ol>\n<li>\n<p>Make a Virtual Environment</p>\n<pre><code>conda create -n HelloWorld\n</code></pre>\n</li>\n<li>\n<p>To use the Virtual Environment, activate it by:</p>\n<pre><code>conda activate HelloWorld\n</code></pre>\n<p>Anything installed now will be specific to the project HelloWorld</p>\n</li>\n<li>\n<p>Exit the Virtual Environment</p>\n<pre><code>conda deactivate\n</code></pre>\n</li>\n</ol>\n<p><a href=\"#python-cheatsheet\"><em>Return to the Top</em></a></p>"},{"url":"/docs/quick-reference/awesome-lists/","relativePath":"docs/quick-reference/awesome-lists.md","relativeDir":"docs/quick-reference","base":"awesome-lists.md","name":"awesome-lists","frontmatter":{"title":"Awesome Lists","weight":1,"excerpt":"this is an awesome list of awesome lists","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h2>Awesome Lists:</h2>\n<iframe src=\"https://search-awesome.vercel.app/\" height=\"800px\" width=\"1600px\" scrolling=\"yes\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<ul>\n<li><a href=\"https://github.com/sindresorhus/awesome-nodejs\"><strong>sindresorhus/awesome-nodejs</strong></a></li>\n<li><a href=\"https://github.com/bcoe/awesome-cross-platform-nodejs\"><strong>bcoe/awesome-cross-platform-nodejs</strong></a></li>\n<li><a href=\"https://github.com/dypsilon/frontend-dev-bookmarks\"><strong>dypsilon/frontend-dev-bookmarks</strong></a></li>\n<li><a href=\"https://github.com/vsouza/awesome-ios\"><strong>vsouza/awesome-ios</strong></a></li>\n<li><a href=\"https://github.com/JStumpp/awesome-android\"><strong>JStumpp/awesome-android</strong></a></li>\n<li><a href=\"https://github.com/weblancaster/awesome-IoT-hybrid\"><strong>weblancaster/awesome-IoT-hybrid</strong></a></li>\n<li><a href=\"https://github.com/sindresorhus/awesome-electron\"><strong>sindresorhus/awesome-electron</strong></a></li>\n<li><a href=\"https://github.com/busterc/awesome-cordova\"><strong>busterc/awesome-cordova</strong></a></li>\n<li><a href=\"https://github.com/jondot/awesome-react-native\"><strong>jondot/awesome-react-native</strong></a></li>\n<li><a href=\"https://github.com/XamSome/awesome-xamarin\"><strong>XamSome/awesome-xamarin</strong></a></li>\n<li><a href=\"https://github.com/inputsh/awesome-linux\"><strong>inputsh/awesome-linux</strong></a></li>\n<li><a href=\"https://github.com/Friz-zy/awesome-linux-containers\"><strong>Friz-zy/awesome-linux-containers</strong></a></li>\n<li><a href=\"https://github.com/zoidbergwill/awesome-ebpf\"><strong>zoidbergwill/awesome-ebpf</strong></a></li>\n<li><a href=\"https://github.com/PandaFoss/Awesome-Arch\"><strong>PandaFoss/Awesome-Arch</strong></a></li>\n<li><a href=\"https://github.com/iCHAIT/awesome-macOS\"><strong>iCHAIT/awesome-macOS</strong></a></li>\n<li><a href=\"https://github.com/herrbischoff/awesome-macos-command-line\"><strong>herrbischoff/awesome-macos-command-line</strong></a></li>\n<li><a href=\"https://github.com/agarrharr/awesome-macos-screensavers\"><strong>agarrharr/awesome-macos-screensavers</strong></a></li>\n<li><a href=\"https://github.com/jaywcjlove/awesome-mac\"><strong>jaywcjlove/awesome-mac</strong></a></li>\n<li><a href=\"https://github.com/serhii-londar/open-source-mac-os-apps\"><strong>serhii-londar/open-source-mac-os-apps</strong></a></li>\n<li><a href=\"https://github.com/yenchenlin/awesome-watchos\"><strong>yenchenlin/awesome-watchos</strong></a></li>\n<li><a href=\"https://github.com/deephacks/awesome-jvm\"><strong>deephacks/awesome-jvm</strong></a></li>\n<li><a href=\"https://github.com/mailtoharshit/awesome-salesforce\"><strong>mailtoharshit/awesome-salesforce</strong></a></li>\n<li><a href=\"https://github.com/donnemartin/awesome-aws\"><strong>donnemartin/awesome-aws</strong></a></li>\n<li><a href=\"https://github.com/Awesome-Windows/Awesome\"><strong>Awesome-Windows/Awesome</strong></a></li>\n<li><a href=\"https://github.com/ipfs/awesome-ipfs\"><strong>ipfs/awesome-ipfs</strong></a></li>\n<li><a href=\"https://github.com/fuse-compound/awesome-fuse\"><strong>fuse-compound/awesome-fuse</strong></a></li>\n<li><a href=\"https://github.com/ianstormtaylor/awesome-heroku\"><strong>ianstormtaylor/awesome-heroku</strong></a></li>\n<li><a href=\"https://github.com/thibmaek/awesome-raspberry-pi\"><strong>thibmaek/awesome-raspberry-pi</strong></a></li>\n<li><a href=\"https://github.com/JesseTG/awesome-qt\"><strong>JesseTG/awesome-qt</strong></a></li>\n<li><a href=\"https://github.com/fregante/Awesome-WebExtensions\"><strong>fregante/Awesome-WebExtensions</strong></a></li>\n<li><a href=\"https://github.com/motion-open-source/awesome-rubymotion\"><strong>motion-open-source/awesome-rubymotion</strong></a></li>\n<li><a href=\"https://github.com/vitalets/awesome-smart-tv\"><strong>vitalets/awesome-smart-tv</strong></a></li>\n<li><a href=\"https://github.com/Kazhnuz/awesome-gnome\"><strong>Kazhnuz/awesome-gnome</strong></a></li>\n<li><a href=\"https://github.com/francoism90/awesome-kde\"><strong>francoism90/awesome-kde</strong></a></li>\n<li><a href=\"https://github.com/quozd/awesome-dotnet\"><strong>quozd/awesome-dotnet</strong></a></li>\n<li><a href=\"https://github.com/thangchung/awesome-dotnet-core\"><strong>thangchung/awesome-dotnet-core</strong></a></li>\n<li><a href=\"https://github.com/ironcev/awesome-roslyn\"><strong>ironcev/awesome-roslyn</strong></a></li>\n<li><a href=\"https://github.com/miguelmota/awesome-amazon-alexa\"><strong>miguelmota/awesome-amazon-alexa</strong></a></li>\n<li><a href=\"https://github.com/jonleibowitz/awesome-digitalocean\"><strong>jonleibowitz/awesome-digitalocean</strong></a></li>\n<li><a href=\"https://github.com/Solido/awesome-flutter\"><strong>Solido/awesome-flutter</strong></a></li>\n<li><a href=\"https://github.com/frenck/awesome-home-assistant\"><strong>frenck/awesome-home-assistant</strong></a></li>\n<li><a href=\"https://github.com/victorshinya/awesome-ibmcloud\"><strong>victorshinya/awesome-ibmcloud</strong></a></li>\n<li><a href=\"https://github.com/jthegedus/awesome-firebase\"><strong>jthegedus/awesome-firebase</strong></a></li>\n<li><a href=\"https://github.com/fkromer/awesome-ros2\"><strong>fkromer/awesome-ros2</strong></a></li>\n<li><a href=\"https://github.com/adafruit/awesome-adafruitio\"><strong>adafruit/awesome-adafruitio</strong></a></li>\n<li><a href=\"https://github.com/irazasyed/awesome-cloudflare\"><strong>irazasyed/awesome-cloudflare</strong></a></li>\n<li><a href=\"https://github.com/ravirupareliya/awesome-actions-on-google\"><strong>ravirupareliya/awesome-actions-on-google</strong></a></li>\n<li><a href=\"https://github.com/agucova/awesome-esp\"><strong>agucova/awesome-esp</strong></a></li>\n<li><a href=\"https://github.com/denolib/awesome-deno\"><strong>denolib/awesome-deno</strong></a></li>\n<li><a href=\"https://github.com/balintkissdev/awesome-dos\"><strong>balintkissdev/awesome-dos</strong></a></li>\n<li><a href=\"https://github.com/nix-community/awesome-nix\"><strong>nix-community/awesome-nix</strong></a></li>\n<li><a href=\"https://github.com/sorrycc/awesome-javascript\"><strong>sorrycc/awesome-javascript</strong></a></li>\n<li><a href=\"https://github.com/wbinnssmith/awesome-promises\"><strong>wbinnssmith/awesome-promises</strong></a></li>\n<li><a href=\"https://github.com/standard/awesome-standard\"><strong>standard/awesome-standard</strong></a></li>\n<li><a href=\"https://github.com/bolshchikov/js-must-watch\"><strong>bolshchikov/js-must-watch</strong></a></li>\n<li><a href=\"https://github.com/loverajoel/jstips\"><strong>loverajoel/jstips</strong></a></li>\n<li><a href=\"https://github.com/Kikobeats/awesome-network-js\"><strong>Kikobeats/awesome-network-js</strong></a></li>\n<li><a href=\"https://github.com/parro-it/awesome-micro-npm-packages\"><strong>parro-it/awesome-micro-npm-packages</strong></a></li>\n<li><a href=\"https://github.com/feross/awesome-mad-science\"><strong>feross/awesome-mad-science</strong></a></li>\n<li><a href=\"https://github.com/maxogden/maintenance-modules\"><strong>maxogden/maintenance-modules</strong></a></li>\n<li><a href=\"https://github.com/sindresorhus/awesome-npm\"><strong>sindresorhus/awesome-npm</strong></a></li>\n<li><a href=\"https://github.com/avajs/awesome-ava\"><strong>avajs/awesome-ava</strong></a></li>\n<li><a href=\"https://github.com/dustinspecker/awesome-eslint\"><strong>dustinspecker/awesome-eslint</strong></a></li>\n<li><a href=\"https://github.com/stoeffel/awesome-fp-js\"><strong>stoeffel/awesome-fp-js</strong></a></li>\n<li><a href=\"https://github.com/sindresorhus/awesome-observables\"><strong>sindresorhus/awesome-observables</strong></a></li>\n<li><a href=\"https://github.com/RyanZim/awesome-npm-scripts\"><strong>RyanZim/awesome-npm-scripts</strong></a></li>\n<li><a href=\"https://github.com/30-seconds/30-seconds-of-code\"><strong>30-seconds/30-seconds-of-code</strong></a></li>\n<li><a href=\"https://github.com/Richienb/awesome-ponyfills\"><strong>Richienb/awesome-ponyfills</strong></a></li>\n<li><a href=\"https://github.com/matteocrippa/awesome-swift\"><strong>matteocrippa/awesome-swift</strong></a></li>\n<li><a href=\"https://github.com/hsavit1/Awesome-Swift-Education\"><strong>hsavit1/Awesome-Swift-Education</strong></a></li>\n<li><a href=\"https://github.com/uraimo/Awesome-Swift-Playgrounds\"><strong>uraimo/Awesome-Swift-Playgrounds</strong></a></li>\n<li><a href=\"https://github.com/vinta/awesome-python\"><strong>vinta/awesome-python</strong></a></li>\n<li><a href=\"https://github.com/timofurrer/awesome-asyncio\"><strong>timofurrer/awesome-asyncio</strong></a></li>\n<li><a href=\"https://github.com/faroit/awesome-python-scientific-audio\"><strong>faroit/awesome-python-scientific-audio</strong></a></li>\n<li><a href=\"https://github.com/adafruit/awesome-circuitpython\"><strong>adafruit/awesome-circuitpython</strong></a></li>\n<li><a href=\"https://github.com/krzjoa/awesome-python-data-science\"><strong>krzjoa/awesome-python-data-science</strong></a></li>\n<li><a href=\"https://github.com/typeddjango/awesome-python-typing\"><strong>typeddjango/awesome-python-typing</strong></a></li>\n<li><a href=\"https://github.com/mcauser/awesome-micropython\"><strong>mcauser/awesome-micropython</strong></a></li>\n<li><a href=\"https://github.com/rust-unofficial/awesome-rust\"><strong>rust-unofficial/awesome-rust</strong></a></li>\n<li><a href=\"https://github.com/krispo/awesome-haskell\"><strong>krispo/awesome-haskell</strong></a></li>\n<li><a href=\"https://github.com/passy/awesome-purescript\"><strong>passy/awesome-purescript</strong></a></li>\n<li><a href=\"https://github.com/avelino/awesome-go\"><strong>avelino/awesome-go</strong></a></li>\n<li><a href=\"https://github.com/lauris/awesome-scala\"><strong>lauris/awesome-scala</strong></a></li>\n<li><a href=\"https://github.com/tindzk/awesome-scala-native\"><strong>tindzk/awesome-scala-native</strong></a></li>\n<li><a href=\"https://github.com/markets/awesome-ruby\"><strong>markets/awesome-ruby</strong></a></li>\n<li><a href=\"https://github.com/razum2um/awesome-clojure\"><strong>razum2um/awesome-clojure</strong></a></li>\n<li><a href=\"https://github.com/hantuzun/awesome-clojurescript\"><strong>hantuzun/awesome-clojurescript</strong></a></li>\n<li><a href=\"https://github.com/h4cc/awesome-elixir\"><strong>h4cc/awesome-elixir</strong></a></li>\n<li><a href=\"https://github.com/sporto/awesome-elm\"><strong>sporto/awesome-elm</strong></a></li>\n<li><a href=\"https://github.com/drobakowski/awesome-erlang\"><strong>drobakowski/awesome-erlang</strong></a></li>\n<li><a href=\"https://github.com/svaksha/Julia.jl\"><strong>svaksha/Julia.jl</strong></a></li>\n<li><a href=\"https://github.com/LewisJEllis/awesome-lua\"><strong>LewisJEllis/awesome-lua</strong></a></li>\n<li><a href=\"https://github.com/inputsh/awesome-c\"><strong>inputsh/awesome-c</strong></a></li>\n<li><a href=\"https://github.com/fffaraz/awesome-cpp\"><strong>fffaraz/awesome-cpp</strong></a></li>\n<li><a href=\"https://github.com/qinwf/awesome-R\"><strong>qinwf/awesome-R</strong></a></li>\n<li><a href=\"https://github.com/iamericfletcher/awesome-r-learning-resources\"><strong>iamericfletcher/awesome-r-learning-resources</strong></a></li>\n<li><a href=\"https://github.com/dlang-community/awesome-d\"><strong>dlang-community/awesome-d</strong></a></li>\n<li><a href=\"https://github.com/CodyReichert/awesome-cl\"><strong>CodyReichert/awesome-cl</strong></a></li>\n<li><a href=\"https://github.com/GustavBertram/awesome-common-lisp-learning\"><strong>GustavBertram/awesome-common-lisp-learning</strong></a></li>\n<li><a href=\"https://github.com/hachiojipm/awesome-perl\"><strong>hachiojipm/awesome-perl</strong></a></li>\n<li><a href=\"https://github.com/kdabir/awesome-groovy\"><strong>kdabir/awesome-groovy</strong></a></li>\n<li><a href=\"https://github.com/yissachar/awesome-dart\"><strong>yissachar/awesome-dart</strong></a></li>\n<li><a href=\"https://github.com/akullpp/awesome-java\"><strong>akullpp/awesome-java</strong></a></li>\n<li><a href=\"https://github.com/eleventigers/awesome-rxjava\"><strong>eleventigers/awesome-rxjava</strong></a></li>\n<li><a href=\"https://github.com/KotlinBy/awesome-kotlin\"><strong>KotlinBy/awesome-kotlin</strong></a></li>\n<li><a href=\"https://github.com/ocaml-community/awesome-ocaml\"><strong>ocaml-community/awesome-ocaml</strong></a></li>\n<li><a href=\"https://github.com/seancoyne/awesome-coldfusion\"><strong>seancoyne/awesome-coldfusion</strong></a></li>\n<li><a href=\"https://github.com/rabbiabram/awesome-fortran\"><strong>rabbiabram/awesome-fortran</strong></a></li>\n<li><a href=\"https://github.com/ziadoz/awesome-php\"><strong>ziadoz/awesome-php</strong></a></li>\n<li><a href=\"https://github.com/jakoch/awesome-composer\"><strong>jakoch/awesome-composer</strong></a></li>\n<li><a href=\"https://github.com/Fr0sT-Brutal/awesome-pascal\"><strong>Fr0sT-Brutal/awesome-pascal</strong></a></li>\n<li><a href=\"https://github.com/ahkscript/awesome-AutoHotkey\"><strong>ahkscript/awesome-AutoHotkey</strong></a></li>\n<li><a href=\"https://github.com/J2TeaM/awesome-AutoIt\"><strong>J2TeaM/awesome-AutoIt</strong></a></li>\n<li><a href=\"https://github.com/veelenga/awesome-crystal\"><strong>veelenga/awesome-crystal</strong></a></li>\n<li><a href=\"https://github.com/sfischer13/awesome-frege\"><strong>sfischer13/awesome-frege</strong></a></li>\n<li><a href=\"https://github.com/onqtam/awesome-cmake\"><strong>onqtam/awesome-cmake</strong></a></li>\n<li><a href=\"https://github.com/robinrodricks/awesome-actionscript3\"><strong>robinrodricks/awesome-actionscript3</strong></a></li>\n<li><a href=\"https://github.com/sfischer13/awesome-eta\"><strong>sfischer13/awesome-eta</strong></a></li>\n<li><a href=\"https://github.com/joaomilho/awesome-idris\"><strong>joaomilho/awesome-idris</strong></a></li>\n<li><a href=\"https://github.com/ohenley/awesome-ada\"><strong>ohenley/awesome-ada</strong></a></li>\n<li><a href=\"https://github.com/ebraminio/awesome-qsharp\"><strong>ebraminio/awesome-qsharp</strong></a></li>\n<li><a href=\"https://github.com/koolamusic/awesome-imba\"><strong>koolamusic/awesome-imba</strong></a></li>\n<li><a href=\"https://github.com/desiderantes/awesome-vala\"><strong>desiderantes/awesome-vala</strong></a></li>\n<li><a href=\"https://github.com/coq-community/awesome-coq\"><strong>coq-community/awesome-coq</strong></a></li>\n<li><a href=\"https://github.com/vlang/awesome-v\"><strong>vlang/awesome-v</strong></a></li>\n<li><a href=\"https://github.com/addyosmani/es6-tools\"><strong>addyosmani/es6-tools</strong></a></li>\n<li><a href=\"https://github.com/davidsonfellipe/awesome-wpo\"><strong>davidsonfellipe/awesome-wpo</strong></a></li>\n<li><a href=\"https://github.com/lvwzhen/tools\"><strong>lvwzhen/tools</strong></a></li>\n<li><a href=\"https://github.com/awesome-css-group/awesome-css\"><strong>awesome-css-group/awesome-css</strong></a></li>\n<li><a href=\"https://github.com/addyosmani/critical-path-css-tools\"><strong>addyosmani/critical-path-css-tools</strong></a></li>\n<li><a href=\"https://github.com/davidtheclark/scalable-css-reading-list\"><strong>davidtheclark/scalable-css-reading-list</strong></a></li>\n<li><a href=\"https://github.com/AllThingsSmitty/must-watch-css\"><strong>AllThingsSmitty/must-watch-css</strong></a></li>\n<li><a href=\"https://github.com/AllThingsSmitty/css-protips\"><strong>AllThingsSmitty/css-protips</strong></a></li>\n<li><a href=\"https://github.com/troxler/awesome-css-frameworks\"><strong>troxler/awesome-css-frameworks</strong></a></li>\n<li><a href=\"https://github.com/enaqx/awesome-react\"><strong>enaqx/awesome-react</strong></a></li>\n<li><a href=\"https://github.com/expede/awesome-relay\"><strong>expede/awesome-relay</strong></a></li>\n<li><a href=\"https://github.com/glauberfc/awesome-react-hooks\"><strong>glauberfc/awesome-react-hooks</strong></a></li>\n<li><a href=\"https://github.com/mateusortiz/webcomponents-the-right-way\"><strong>mateusortiz/webcomponents-the-right-way</strong></a></li>\n<li><a href=\"https://github.com/Granze/awesome-polymer\"><strong>Granze/awesome-polymer</strong></a></li>\n<li><a href=\"https://github.com/PatrickJS/awesome-angular\"><strong>PatrickJS/awesome-angular</strong></a></li>\n<li><a href=\"https://github.com/sadcitizen/awesome-backbone\"><strong>sadcitizen/awesome-backbone</strong></a></li>\n<li><a href=\"https://github.com/diegocard/awesome-html5\"><strong>diegocard/awesome-html5</strong></a></li>\n<li><a href=\"https://github.com/willianjusten/awesome-svg\"><strong>willianjusten/awesome-svg</strong></a></li>\n<li><a href=\"https://github.com/raphamorim/awesome-canvas\"><strong>raphamorim/awesome-canvas</strong></a></li>\n<li><a href=\"https://github.com/dnbard/awesome-knockout\"><strong>dnbard/awesome-knockout</strong></a></li>\n<li><a href=\"https://github.com/petk/awesome-dojo\"><strong>petk/awesome-dojo</strong></a></li>\n<li><a href=\"https://github.com/NoahBuscher/Inspire\"><strong>NoahBuscher/Inspire</strong></a></li>\n<li><a href=\"https://github.com/ember-community-russia/awesome-ember\"><strong>ember-community-russia/awesome-ember</strong></a></li>\n<li><a href=\"https://github.com/wasabeef/awesome-android-ui\"><strong>wasabeef/awesome-android-ui</strong></a></li>\n<li><a href=\"https://github.com/cjwirth/awesome-ios-ui\"><strong>cjwirth/awesome-ios-ui</strong></a></li>\n<li><a href=\"https://github.com/Urigo/awesome-meteor\"><strong>Urigo/awesome-meteor</strong></a></li>\n<li><a href=\"https://github.com/sturobson/BEM-resources\"><strong>sturobson/BEM-resources</strong></a></li>\n<li><a href=\"https://github.com/afonsopacifer/awesome-flexbox\"><strong>afonsopacifer/awesome-flexbox</strong></a></li>\n<li><a href=\"https://github.com/deanhume/typography\"><strong>deanhume/typography</strong></a></li>\n<li><a href=\"https://github.com/brunopulis/awesome-a11y\"><strong>brunopulis/awesome-a11y</strong></a></li>\n<li><a href=\"https://github.com/sachin1092/awesome-material\"><strong>sachin1092/awesome-material</strong></a></li>\n<li><a href=\"https://github.com/wbkd/awesome-d3\"><strong>wbkd/awesome-d3</strong></a></li>\n<li><a href=\"https://github.com/jonathandion/awesome-emails\"><strong>jonathandion/awesome-emails</strong></a></li>\n<li><a href=\"https://github.com/petk/awesome-jquery\"><strong>petk/awesome-jquery</strong></a></li>\n<li><a href=\"https://github.com/AllThingsSmitty/jquery-tips-everyone-should-know\"><strong>AllThingsSmitty/jquery-tips-everyone-should-know</strong></a></li>\n<li><a href=\"https://github.com/notthetup/awesome-webaudio\"><strong>notthetup/awesome-webaudio</strong></a></li>\n<li><a href=\"https://github.com/pazguille/offline-first\"><strong>pazguille/offline-first</strong></a></li>\n<li><a href=\"https://github.com/agarrharr/awesome-static-website-services\"><strong>agarrharr/awesome-static-website-services</strong></a></li>\n<li><a href=\"https://github.com/cyclejs-community/awesome-cyclejs\"><strong>cyclejs-community/awesome-cyclejs</strong></a></li>\n<li><a href=\"https://github.com/dok/awesome-text-editing\"><strong>dok/awesome-text-editing</strong></a></li>\n<li><a href=\"https://github.com/fliptheweb/motion-ui-design\"><strong>fliptheweb/motion-ui-design</strong></a></li>\n<li><a href=\"https://github.com/vuejs/awesome-vue\"><strong>vuejs/awesome-vue</strong></a></li>\n<li><a href=\"https://github.com/sadcitizen/awesome-marionette\"><strong>sadcitizen/awesome-marionette</strong></a></li>\n<li><a href=\"https://github.com/aurelia-contrib/awesome-aurelia\"><strong>aurelia-contrib/awesome-aurelia</strong></a></li>\n<li><a href=\"https://github.com/zingchart/awesome-charting\"><strong>zingchart/awesome-charting</strong></a></li>\n<li><a href=\"https://github.com/candelibas/awesome-ionic\"><strong>candelibas/awesome-ionic</strong></a></li>\n<li><a href=\"https://github.com/ChromeDevTools/awesome-chrome-devtools\"><strong>ChromeDevTools/awesome-chrome-devtools</strong></a></li>\n<li><a href=\"https://github.com/jdrgomes/awesome-postcss\"><strong>jdrgomes/awesome-postcss</strong></a></li>\n<li><a href=\"https://github.com/nikgraf/awesome-draft-js\"><strong>nikgraf/awesome-draft-js</strong></a></li>\n<li><a href=\"https://github.com/TalAter/awesome-service-workers\"><strong>TalAter/awesome-service-workers</strong></a></li>\n<li><a href=\"https://github.com/TalAter/awesome-progressive-web-apps\"><strong>TalAter/awesome-progressive-web-apps</strong></a></li>\n<li><a href=\"https://github.com/choojs/awesome-choo\"><strong>choojs/awesome-choo</strong></a></li>\n<li><a href=\"https://github.com/brillout/awesome-redux\"><strong>brillout/awesome-redux</strong></a></li>\n<li><a href=\"https://github.com/webpack-contrib/awesome-webpack\"><strong>webpack-contrib/awesome-webpack</strong></a></li>\n<li><a href=\"https://github.com/browserify/awesome-browserify\"><strong>browserify/awesome-browserify</strong></a></li>\n<li><a href=\"https://github.com/Famolus/awesome-sass\"><strong>Famolus/awesome-sass</strong></a></li>\n<li><a href=\"https://github.com/websemantics/awesome-ant-design\"><strong>websemantics/awesome-ant-design</strong></a></li>\n<li><a href=\"https://github.com/LucasBassetti/awesome-less\"><strong>LucasBassetti/awesome-less</strong></a></li>\n<li><a href=\"https://github.com/sjfricke/awesome-webgl\"><strong>sjfricke/awesome-webgl</strong></a></li>\n<li><a href=\"https://github.com/preactjs/awesome-preact\"><strong>preactjs/awesome-preact</strong></a></li>\n<li><a href=\"https://github.com/jbmoelker/progressive-enhancement-resources\"><strong>jbmoelker/progressive-enhancement-resources</strong></a></li>\n<li><a href=\"https://github.com/unicodeveloper/awesome-nextjs\"><strong>unicodeveloper/awesome-nextjs</strong></a></li>\n<li><a href=\"https://github.com/web-padawan/awesome-lit-html\"><strong>web-padawan/awesome-lit-html</strong></a></li>\n<li><a href=\"https://github.com/automata/awesome-jamstack\"><strong>automata/awesome-jamstack</strong></a></li>\n<li><a href=\"https://github.com/henrikwirth/awesome-wordpress-gatsby\"><strong>henrikwirth/awesome-wordpress-gatsby</strong></a></li>\n<li><a href=\"https://github.com/myshov/awesome-mobile-web-development\"><strong>myshov/awesome-mobile-web-development</strong></a></li>\n<li><a href=\"https://github.com/lauthieb/awesome-storybook\"><strong>lauthieb/awesome-storybook</strong></a></li>\n<li><a href=\"https://github.com/AdrienTorris/awesome-blazor\"><strong>AdrienTorris/awesome-blazor</strong></a></li>\n<li><a href=\"https://github.com/csabapalfi/awesome-pagespeed-metrics\"><strong>csabapalfi/awesome-pagespeed-metrics</strong></a></li>\n<li><a href=\"https://github.com/aniftyco/awesome-tailwindcss\"><strong>aniftyco/awesome-tailwindcss</strong></a></li>\n<li><a href=\"https://github.com/seed-rs/awesome-seed-rs\"><strong>seed-rs/awesome-seed-rs</strong></a></li>\n<li><a href=\"https://github.com/pajaydev/awesome-web-performance-budget\"><strong>pajaydev/awesome-web-performance-budget</strong></a></li>\n<li><a href=\"https://github.com/sergey-pimenov/awesome-web-animation\"><strong>sergey-pimenov/awesome-web-animation</strong></a></li>\n<li><a href=\"https://github.com/jetli/awesome-yew\"><strong>jetli/awesome-yew</strong></a></li>\n<li><a href=\"https://github.com/nadunindunil/awesome-material-ui\"><strong>nadunindunil/awesome-material-ui</strong></a></li>\n<li><a href=\"https://github.com/componently-com/awesome-building-blocks-for-web-apps\"><strong>componently-com/awesome-building-blocks-for-web-apps</strong></a></li>\n<li><a href=\"https://github.com/TheComputerM/awesome-svelte\"><strong>TheComputerM/awesome-svelte</strong></a></li>\n<li><a href=\"https://github.com/klaufel/awesome-design-systems\"><strong>klaufel/awesome-design-systems</strong></a></li>\n<li><a href=\"https://github.com/innocenzi/awesome-inertiajs\"><strong>innocenzi/awesome-inertiajs</strong></a></li>\n<li><a href=\"https://github.com/mdbootstrap/awesome-mdbootstrap\"><strong>mdbootstrap/awesome-mdbootstrap</strong></a></li>\n<li><a href=\"https://github.com/mjhea0/awesome-flask\"><strong>mjhea0/awesome-flask</strong></a></li>\n<li><a href=\"https://github.com/veggiemonk/awesome-docker\"><strong>veggiemonk/awesome-docker</strong></a></li>\n<li><a href=\"https://github.com/iJackUA/awesome-vagrant\"><strong>iJackUA/awesome-vagrant</strong></a></li>\n<li><a href=\"https://github.com/uralbash/awesome-pyramid\"><strong>uralbash/awesome-pyramid</strong></a></li>\n<li><a href=\"https://github.com/PerfectCarl/awesome-play1\"><strong>PerfectCarl/awesome-play1</strong></a></li>\n<li><a href=\"https://github.com/friendsofcake/awesome-cakephp\"><strong>friendsofcake/awesome-cakephp</strong></a></li>\n<li><a href=\"https://github.com/sitepoint-editors/awesome-symfony\"><strong>sitepoint-editors/awesome-symfony</strong></a></li>\n<li><a href=\"https://github.com/pehapkari/awesome-symfony-education\"><strong>pehapkari/awesome-symfony-education</strong></a></li>\n<li><a href=\"https://github.com/chiraggude/awesome-laravel\"><strong>chiraggude/awesome-laravel</strong></a></li>\n<li><a href=\"https://github.com/fukuball/Awesome-Laravel-Education\"><strong>fukuball/Awesome-Laravel-Education</strong></a></li>\n<li><a href=\"https://github.com/blade-ui-kit/awesome-tall-stack\"><strong>blade-ui-kit/awesome-tall-stack</strong></a></li>\n<li><a href=\"https://github.com/gramantin/awesome-rails\"><strong>gramantin/awesome-rails</strong></a></li>\n<li><a href=\"https://github.com/hothero/awesome-rails-gem\"><strong>hothero/awesome-rails-gem</strong></a></li>\n<li><a href=\"https://github.com/phalcon/awesome-phalcon\"><strong>phalcon/awesome-phalcon</strong></a></li>\n<li><a href=\"https://github.com/phanan/htaccess\"><strong>phanan/htaccess</strong></a></li>\n<li><a href=\"https://github.com/fcambus/nginx-resources\"><strong>fcambus/nginx-resources</strong></a></li>\n<li><a href=\"https://github.com/stve/awesome-dropwizard\"><strong>stve/awesome-dropwizard</strong></a></li>\n<li><a href=\"https://github.com/ramitsurana/awesome-kubernetes\"><strong>ramitsurana/awesome-kubernetes</strong></a></li>\n<li><a href=\"https://github.com/unicodeveloper/awesome-lumen\"><strong>unicodeveloper/awesome-lumen</strong></a></li>\n<li><a href=\"https://github.com/pmuens/awesome-serverless\"><strong>pmuens/awesome-serverless</strong></a></li>\n<li><a href=\"https://github.com/PhantomYdn/awesome-wicket\"><strong>PhantomYdn/awesome-wicket</strong></a></li>\n<li><a href=\"https://github.com/vert-x3/vertx-awesome\"><strong>vert-x3/vertx-awesome</strong></a></li>\n<li><a href=\"https://github.com/shuaibiyy/awesome-terraform\"><strong>shuaibiyy/awesome-terraform</strong></a></li>\n<li><a href=\"https://github.com/Cellane/awesome-vapor\"><strong>Cellane/awesome-vapor</strong></a></li>\n<li><a href=\"https://github.com/ucg8j/awesome-dash\"><strong>ucg8j/awesome-dash</strong></a></li>\n<li><a href=\"https://github.com/mjhea0/awesome-fastapi\"><strong>mjhea0/awesome-fastapi</strong></a></li>\n<li><a href=\"https://github.com/kolomied/awesome-cdk\"><strong>kolomied/awesome-cdk</strong></a></li>\n<li><a href=\"https://github.com/kdeldycke/awesome-iam\"><strong>kdeldycke/awesome-iam</strong></a></li>\n<li><a href=\"https://github.com/prakhar1989/awesome-courses\"><strong>prakhar1989/awesome-courses</strong></a></li>\n<li><a href=\"https://github.com/academic/awesome-datascience\"><strong>academic/awesome-datascience</strong></a></li>\n<li><a href=\"https://github.com/siboehm/awesome-learn-datascience\"><strong>siboehm/awesome-learn-datascience</strong></a></li>\n<li><a href=\"https://github.com/josephmisiti/awesome-machine-learning\"><strong>josephmisiti/awesome-machine-learning</strong></a></li>\n<li><a href=\"https://github.com/ujjwalkarn/Machine-Learning-Tutorials\"><strong>ujjwalkarn/Machine-Learning-Tutorials</strong></a></li>\n<li><a href=\"https://github.com/arbox/machine-learning-with-ruby\"><strong>arbox/machine-learning-with-ruby</strong></a></li>\n<li><a href=\"https://github.com/likedan/Awesome-CoreML-Models\"><strong>likedan/Awesome-CoreML-Models</strong></a></li>\n<li><a href=\"https://github.com/h2oai/awesome-h2o\"><strong>h2oai/awesome-h2o</strong></a></li>\n<li><a href=\"https://github.com/SE-ML/awesome-seml\"><strong>SE-ML/awesome-seml</strong></a></li>\n<li><a href=\"https://github.com/georgezouq/awesome-ai-in-finance\"><strong>georgezouq/awesome-ai-in-finance</strong></a></li>\n<li><a href=\"https://github.com/n2cholas/awesome-jax\"><strong>n2cholas/awesome-jax</strong></a></li>\n<li><a href=\"https://github.com/altamiracorp/awesome-xai\"><strong>altamiracorp/awesome-xai</strong></a></li>\n<li><a href=\"https://github.com/edobashira/speech-language-processing\"><strong>edobashira/speech-language-processing</strong></a></li>\n<li><a href=\"https://github.com/dav009/awesome-spanish-nlp\"><strong>dav009/awesome-spanish-nlp</strong></a></li>\n<li><a href=\"https://github.com/arbox/nlp-with-ruby\"><strong>arbox/nlp-with-ruby</strong></a></li>\n<li><a href=\"https://github.com/seriousran/awesome-qa\"><strong>seriousran/awesome-qa</strong></a></li>\n<li><a href=\"https://github.com/tokenmill/awesome-nlg\"><strong>tokenmill/awesome-nlg</strong></a></li>\n<li><a href=\"https://github.com/theimpossibleastronaut/awesome-linguistics\"><strong>theimpossibleastronaut/awesome-linguistics</strong></a></li>\n<li><a href=\"https://github.com/sobolevn/awesome-cryptography\"><strong>sobolevn/awesome-cryptography</strong></a></li>\n<li><a href=\"https://github.com/pFarb/awesome-crypto-papers\"><strong>pFarb/awesome-crypto-papers</strong></a></li>\n<li><a href=\"https://github.com/jbhuang0604/awesome-computer-vision\"><strong>jbhuang0604/awesome-computer-vision</strong></a></li>\n<li><a href=\"https://github.com/ChristosChristofidis/awesome-deep-learning\"><strong>ChristosChristofidis/awesome-deep-learning</strong></a></li>\n<li><a href=\"https://github.com/jtoy/awesome-tensorflow\"><strong>jtoy/awesome-tensorflow</strong></a></li>\n<li><a href=\"https://github.com/aaronhma/awesome-tensorflow-js\"><strong>aaronhma/awesome-tensorflow-js</strong></a></li>\n<li><a href=\"https://github.com/margaretmz/awesome-tensorflow-lite\"><strong>margaretmz/awesome-tensorflow-lite</strong></a></li>\n<li><a href=\"https://github.com/terryum/awesome-deep-learning-papers\"><strong>terryum/awesome-deep-learning-papers</strong></a></li>\n<li><a href=\"https://github.com/guillaume-chevalier/awesome-deep-learning-resources\"><strong>guillaume-chevalier/awesome-deep-learning-resources</strong></a></li>\n<li><a href=\"https://github.com/kjw0612/awesome-deep-vision\"><strong>kjw0612/awesome-deep-vision</strong></a></li>\n<li><a href=\"https://github.com/ossu/computer-science\"><strong>ossu/computer-science</strong></a></li>\n<li><a href=\"https://github.com/lucasviola/awesome-functional-programming\"><strong>lucasviola/awesome-functional-programming</strong></a></li>\n<li><a href=\"https://github.com/dspinellis/awesome-msr\"><strong>dspinellis/awesome-msr</strong></a></li>\n<li><a href=\"https://github.com/analysis-tools-dev/static-analysis\"><strong>analysis-tools-dev/static-analysis</strong></a></li>\n<li><a href=\"https://github.com/harpribot/awesome-information-retrieval\"><strong>harpribot/awesome-information-retrieval</strong></a></li>\n<li><a href=\"https://github.com/desireevl/awesome-quantum-computing\"><strong>desireevl/awesome-quantum-computing</strong></a></li>\n<li><a href=\"https://github.com/mostafatouny/awesome-theoretical-computer-science\"><strong>mostafatouny/awesome-theoretical-computer-science</strong></a></li>\n<li><a href=\"https://github.com/onurakpolat/awesome-bigdata\"><strong>onurakpolat/awesome-bigdata</strong></a></li>\n<li><a href=\"https://github.com/awesomedata/awesome-public-datasets\"><strong>awesomedata/awesome-public-datasets</strong></a></li>\n<li><a href=\"https://github.com/youngwookim/awesome-hadoop\"><strong>youngwookim/awesome-hadoop</strong></a></li>\n<li><a href=\"https://github.com/igorbarinov/awesome-data-engineering\"><strong>igorbarinov/awesome-data-engineering</strong></a></li>\n<li><a href=\"https://github.com/manuzhang/awesome-streaming\"><strong>manuzhang/awesome-streaming</strong></a></li>\n<li><a href=\"https://github.com/awesome-spark/awesome-spark\"><strong>awesome-spark/awesome-spark</strong></a></li>\n<li><a href=\"https://github.com/ambster-public/awesome-qlik\"><strong>ambster-public/awesome-qlik</strong></a></li>\n<li><a href=\"https://github.com/sduff/awesome-splunk\"><strong>sduff/awesome-splunk</strong></a></li>\n<li><a href=\"https://github.com/papers-we-love/papers-we-love\"><strong>papers-we-love/papers-we-love</strong></a></li>\n<li><a href=\"https://github.com/JanVanRyswyck/awesome-talks\"><strong>JanVanRyswyck/awesome-talks</strong></a></li>\n<li><a href=\"https://github.com/tayllan/awesome-algorithms\"><strong>tayllan/awesome-algorithms</strong></a></li>\n<li><a href=\"https://github.com/gaerae/awesome-algorithms-education\"><strong>gaerae/awesome-algorithms-education</strong></a></li>\n<li><a href=\"https://github.com/enjalot/algovis\"><strong>enjalot/algovis</strong></a></li>\n<li><a href=\"https://github.com/owainlewis/awesome-artificial-intelligence\"><strong>owainlewis/awesome-artificial-intelligence</strong></a></li>\n<li><a href=\"https://github.com/marcobiedermann/search-engine-optimization\"><strong>marcobiedermann/search-engine-optimization</strong></a></li>\n<li><a href=\"https://github.com/lnishan/awesome-competitive-programming\"><strong>lnishan/awesome-competitive-programming</strong></a></li>\n<li><a href=\"https://github.com/rossant/awesome-math\"><strong>rossant/awesome-math</strong></a></li>\n<li><a href=\"https://github.com/passy/awesome-recursion-schemes\"><strong>passy/awesome-recursion-schemes</strong></a></li>\n<li><a href=\"https://github.com/EbookFoundation/free-programming-books\"><strong>EbookFoundation/free-programming-books</strong></a></li>\n<li><a href=\"https://github.com/dariubs/GoBooks\"><strong>dariubs/GoBooks</strong></a></li>\n<li><a href=\"https://github.com/RomanTsegelskyi/rbooks\"><strong>RomanTsegelskyi/rbooks</strong></a></li>\n<li><a href=\"https://github.com/hackerkid/Mind-Expanding-Books\"><strong>hackerkid/Mind-Expanding-Books</strong></a></li>\n<li><a href=\"https://github.com/TalAter/awesome-book-authoring\"><strong>TalAter/awesome-book-authoring</strong></a></li>\n<li><a href=\"https://github.com/sger/ElixirBooks\"><strong>sger/ElixirBooks</strong></a></li>\n<li><a href=\"https://github.com/dreikanter/sublime-bookmarks\"><strong>dreikanter/sublime-bookmarks</strong></a></li>\n<li><a href=\"https://github.com/mhinz/vim-galore\"><strong>mhinz/vim-galore</strong></a></li>\n<li><a href=\"https://github.com/emacs-tw/awesome-emacs\"><strong>emacs-tw/awesome-emacs</strong></a></li>\n<li><a href=\"https://github.com/mehcode/awesome-atom\"><strong>mehcode/awesome-atom</strong></a></li>\n<li><a href=\"https://github.com/viatsko/awesome-vscode\"><strong>viatsko/awesome-vscode</strong></a></li>\n<li><a href=\"https://github.com/ellisonleao/magictools\"><strong>ellisonleao/magictools</strong></a></li>\n<li><a href=\"https://github.com/hzoo/awesome-gametalks\"><strong>hzoo/awesome-gametalks</strong></a></li>\n<li><a href=\"https://github.com/godotengine/awesome-godot\"><strong>godotengine/awesome-godot</strong></a></li>\n<li><a href=\"https://github.com/leereilly/games\"><strong>leereilly/games</strong></a></li>\n<li><a href=\"https://github.com/RyanNielson/awesome-unity\"><strong>RyanNielson/awesome-unity</strong></a></li>\n<li><a href=\"https://github.com/hkirat/awesome-chess\"><strong>hkirat/awesome-chess</strong></a></li>\n<li><a href=\"https://github.com/love2d-community/awesome-love2d\"><strong>love2d-community/awesome-love2d</strong></a></li>\n<li><a href=\"https://github.com/pico-8/awesome-PICO-8\"><strong>pico-8/awesome-PICO-8</strong></a></li>\n<li><a href=\"https://github.com/gbdev/awesome-gbdev\"><strong>gbdev/awesome-gbdev</strong></a></li>\n<li><a href=\"https://github.com/WebCreationClub/awesome-construct\"><strong>WebCreationClub/awesome-construct</strong></a></li>\n<li><a href=\"https://github.com/stetso/awesome-gideros\"><strong>stetso/awesome-gideros</strong></a></li>\n<li><a href=\"https://github.com/bs-community/awesome-minecraft\"><strong>bs-community/awesome-minecraft</strong></a></li>\n<li><a href=\"https://github.com/leomaurodesenv/game-datasets\"><strong>leomaurodesenv/game-datasets</strong></a></li>\n<li><a href=\"https://github.com/Dvergar/awesome-haxe-gamedev\"><strong>Dvergar/awesome-haxe-gamedev</strong></a></li>\n<li><a href=\"https://github.com/rafaskb/awesome-libgdx\"><strong>rafaskb/awesome-libgdx</strong></a></li>\n<li><a href=\"https://github.com/playcanvas/awesome-playcanvas\"><strong>playcanvas/awesome-playcanvas</strong></a></li>\n<li><a href=\"https://github.com/radek-sprta/awesome-game-remakes\"><strong>radek-sprta/awesome-game-remakes</strong></a></li>\n<li><a href=\"https://github.com/flame-engine/awesome-flame\"><strong>flame-engine/awesome-flame</strong></a></li>\n<li><a href=\"https://github.com/mhxion/awesome-discord-communities\"><strong>mhxion/awesome-discord-communities</strong></a></li>\n<li><a href=\"https://github.com/tobiasvl/awesome-chip-8\"><strong>tobiasvl/awesome-chip-8</strong></a></li>\n<li><a href=\"https://github.com/michelpereira/awesome-games-of-coding\"><strong>michelpereira/awesome-games-of-coding</strong></a></li>\n<li><a href=\"https://github.com/sindresorhus/quick-look-plugins\"><strong>sindresorhus/quick-look-plugins</strong></a></li>\n<li><a href=\"https://github.com/jondot/awesome-devenv\"><strong>jondot/awesome-devenv</strong></a></li>\n<li><a href=\"https://github.com/webpro/awesome-dotfiles\"><strong>webpro/awesome-dotfiles</strong></a></li>\n<li><a href=\"https://github.com/alebcay/awesome-shell\"><strong>alebcay/awesome-shell</strong></a></li>\n<li><a href=\"https://github.com/jorgebucaran/awsm.fish\"><strong>jorgebucaran/awsm.fish</strong></a></li>\n<li><a href=\"https://github.com/agarrharr/awesome-cli-apps\"><strong>agarrharr/awesome-cli-apps</strong></a></li>\n<li><a href=\"https://github.com/unixorn/awesome-zsh-plugins\"><strong>unixorn/awesome-zsh-plugins</strong></a></li>\n<li><a href=\"https://github.com/phillipadsmith/awesome-github\"><strong>phillipadsmith/awesome-github</strong></a></li>\n<li><a href=\"https://github.com/stefanbuck/awesome-browser-extensions-for-github\"><strong>stefanbuck/awesome-browser-extensions-for-github</strong></a></li>\n<li><a href=\"https://github.com/tiimgreen/github-cheat-sheet\"><strong>tiimgreen/github-cheat-sheet</strong></a></li>\n<li><a href=\"https://github.com/matchai/awesome-pinned-gists\"><strong>matchai/awesome-pinned-gists</strong></a></li>\n<li><a href=\"https://github.com/arslanbilal/git-cheat-sheet\"><strong>arslanbilal/git-cheat-sheet</strong></a></li>\n<li><a href=\"https://github.com/git-tips/tips\"><strong>git-tips/tips</strong></a></li>\n<li><a href=\"https://github.com/stevemao/awesome-git-addons\"><strong>stevemao/awesome-git-addons</strong></a></li>\n<li><a href=\"https://github.com/compscilauren/awesome-git-hooks\"><strong>compscilauren/awesome-git-hooks</strong></a></li>\n<li><a href=\"https://github.com/moul/awesome-ssh\"><strong>moul/awesome-ssh</strong></a></li>\n<li><a href=\"https://github.com/tvvocold/FOSS-for-Dev\"><strong>tvvocold/FOSS-for-Dev</strong></a></li>\n<li><a href=\"https://github.com/bnb/awesome-hyper\"><strong>bnb/awesome-hyper</strong></a></li>\n<li><a href=\"https://github.com/janikvonrotz/awesome-powershell\"><strong>janikvonrotz/awesome-powershell</strong></a></li>\n<li><a href=\"https://github.com/alfred-workflows/awesome-alfred-workflows\"><strong>alfred-workflows/awesome-alfred-workflows</strong></a></li>\n<li><a href=\"https://github.com/k4m4/terminals-are-sexy\"><strong>k4m4/terminals-are-sexy</strong></a></li>\n<li><a href=\"https://github.com/sdras/awesome-actions\"><strong>sdras/awesome-actions</strong></a></li>\n<li><a href=\"https://github.com/sindresorhus/awesome-scifi\"><strong>sindresorhus/awesome-scifi</strong></a></li>\n<li><a href=\"https://github.com/RichardLitt/awesome-fantasy\"><strong>RichardLitt/awesome-fantasy</strong></a></li>\n<li><a href=\"https://github.com/ayr-ton/awesome-geek-podcasts\"><strong>ayr-ton/awesome-geek-podcasts</strong></a></li>\n<li><a href=\"https://github.com/zudochkin/awesome-newsletters\"><strong>zudochkin/awesome-newsletters</strong></a></li>\n<li><a href=\"https://github.com/victorlaerte/awesome-it-quotes\"><strong>victorlaerte/awesome-it-quotes</strong></a></li>\n<li><a href=\"https://github.com/numetriclabz/awesome-db\"><strong>numetriclabz/awesome-db</strong></a></li>\n<li><a href=\"https://github.com/shlomi-noach/awesome-mysql\"><strong>shlomi-noach/awesome-mysql</strong></a></li>\n<li><a href=\"https://github.com/dahlia/awesome-sqlalchemy\"><strong>dahlia/awesome-sqlalchemy</strong></a></li>\n<li><a href=\"https://github.com/mark-rushakoff/awesome-influxdb\"><strong>mark-rushakoff/awesome-influxdb</strong></a></li>\n<li><a href=\"https://github.com/neueda/awesome-neo4j\"><strong>neueda/awesome-neo4j</strong></a></li>\n<li><a href=\"https://github.com/ramnes/awesome-mongodb\"><strong>ramnes/awesome-mongodb</strong></a></li>\n<li><a href=\"https://github.com/d3viant0ne/awesome-rethinkdb\"><strong>d3viant0ne/awesome-rethinkdb</strong></a></li>\n<li><a href=\"https://github.com/mohataher/awesome-tinkerpop\"><strong>mohataher/awesome-tinkerpop</strong></a></li>\n<li><a href=\"https://github.com/dhamaniasad/awesome-postgres\"><strong>dhamaniasad/awesome-postgres</strong></a></li>\n<li><a href=\"https://github.com/quangv/awesome-couchdb\"><strong>quangv/awesome-couchdb</strong></a></li>\n<li><a href=\"https://github.com/rayokota/awesome-hbase\"><strong>rayokota/awesome-hbase</strong></a></li>\n<li><a href=\"https://github.com/erictleung/awesome-nosql-guides\"><strong>erictleung/awesome-nosql-guides</strong></a></li>\n<li><a href=\"https://github.com/chrislatorres/awesome-contexture\"><strong>chrislatorres/awesome-contexture</strong></a></li>\n<li><a href=\"https://github.com/mgramin/awesome-db-tools\"><strong>mgramin/awesome-db-tools</strong></a></li>\n<li><a href=\"https://github.com/vaticle/typedb-awesome\"><strong>vaticle/typedb-awesome</strong></a></li>\n<li><a href=\"https://github.com/Anant/awesome-cassandra\"><strong>Anant/awesome-cassandra</strong></a></li>\n<li><a href=\"https://github.com/shime/creative-commons-media\"><strong>shime/creative-commons-media</strong></a></li>\n<li><a href=\"https://github.com/brabadu/awesome-fonts\"><strong>brabadu/awesome-fonts</strong></a></li>\n<li><a href=\"https://github.com/chrissimpkins/codeface\"><strong>chrissimpkins/codeface</strong></a></li>\n<li><a href=\"https://github.com/neutraltone/awesome-stock-resources\"><strong>neutraltone/awesome-stock-resources</strong></a></li>\n<li><a href=\"https://github.com/davisonio/awesome-gif\"><strong>davisonio/awesome-gif</strong></a></li>\n<li><a href=\"https://github.com/ciconia/awesome-music\"><strong>ciconia/awesome-music</strong></a></li>\n<li><a href=\"https://github.com/44bits/awesome-opensource-documents\"><strong>44bits/awesome-opensource-documents</strong></a></li>\n<li><a href=\"https://github.com/willianjusten/awesome-audio-visualization\"><strong>willianjusten/awesome-audio-visualization</strong></a></li>\n<li><a href=\"https://github.com/ebu/awesome-broadcasting\"><strong>ebu/awesome-broadcasting</strong></a></li>\n<li><a href=\"https://github.com/Siilwyn/awesome-pixel-art\"><strong>Siilwyn/awesome-pixel-art</strong></a></li>\n<li><a href=\"https://github.com/transitive-bullshit/awesome-ffmpeg\"><strong>transitive-bullshit/awesome-ffmpeg</strong></a></li>\n<li><a href=\"https://github.com/notlmn/awesome-icons\"><strong>notlmn/awesome-icons</strong></a></li>\n<li><a href=\"https://github.com/stingalleman/awesome-audiovisual\"><strong>stingalleman/awesome-audiovisual</strong></a></li>\n<li><a href=\"https://github.com/mfkl/awesome-vlc\"><strong>mfkl/awesome-vlc</strong></a></li>\n<li><a href=\"https://github.com/therebelrobot/awesome-workshopper\"><strong>therebelrobot/awesome-workshopper</strong></a></li>\n<li><a href=\"https://github.com/karlhorky/learn-to-program\"><strong>karlhorky/learn-to-program</strong></a></li>\n<li><a href=\"https://github.com/matteofigus/awesome-speaking\"><strong>matteofigus/awesome-speaking</strong></a></li>\n<li><a href=\"https://github.com/lucasviola/awesome-tech-videos\"><strong>lucasviola/awesome-tech-videos</strong></a></li>\n<li><a href=\"https://github.com/hangtwenty/dive-into-machine-learning\"><strong>hangtwenty/dive-into-machine-learning</strong></a></li>\n<li><a href=\"https://github.com/watson/awesome-computer-history\"><strong>watson/awesome-computer-history</strong></a></li>\n<li><a href=\"https://github.com/HollyAdele/awesome-programming-for-kids\"><strong>HollyAdele/awesome-programming-for-kids</strong></a></li>\n<li><a href=\"https://github.com/yrgo/awesome-educational-games\"><strong>yrgo/awesome-educational-games</strong></a></li>\n<li><a href=\"https://github.com/micromata/awesome-javascript-learning\"><strong>micromata/awesome-javascript-learning</strong></a></li>\n<li><a href=\"https://github.com/micromata/awesome-css-learning\"><strong>micromata/awesome-css-learning</strong></a></li>\n<li><a href=\"https://github.com/dend/awesome-product-management\"><strong>dend/awesome-product-management</strong></a></li>\n<li><a href=\"https://github.com/liuchong/awesome-roadmaps\"><strong>liuchong/awesome-roadmaps</strong></a></li>\n<li><a href=\"https://github.com/JoseDeFreitas/awesome-youtubers\"><strong>JoseDeFreitas/awesome-youtubers</strong></a></li>\n<li><a href=\"https://github.com/paragonie/awesome-appsec\"><strong>paragonie/awesome-appsec</strong></a></li>\n<li><a href=\"https://github.com/sbilly/awesome-security\"><strong>sbilly/awesome-security</strong></a></li>\n<li><a href=\"https://github.com/apsdehal/awesome-ctf\"><strong>apsdehal/awesome-ctf</strong></a></li>\n<li><a href=\"https://github.com/rshipp/awesome-malware-analysis\"><strong>rshipp/awesome-malware-analysis</strong></a></li>\n<li><a href=\"https://github.com/ashishb/android-security-awesome\"><strong>ashishb/android-security-awesome</strong></a></li>\n<li><a href=\"https://github.com/carpedm20/awesome-hacking\"><strong>carpedm20/awesome-hacking</strong></a></li>\n<li><a href=\"https://github.com/paralax/awesome-honeypots\"><strong>paralax/awesome-honeypots</strong></a></li>\n<li><a href=\"https://github.com/meirwah/awesome-incident-response\"><strong>meirwah/awesome-incident-response</strong></a></li>\n<li><a href=\"https://github.com/jaredthecoder/awesome-vehicle-security\"><strong>jaredthecoder/awesome-vehicle-security</strong></a></li>\n<li><a href=\"https://github.com/qazbnm456/awesome-web-security\"><strong>qazbnm456/awesome-web-security</strong></a></li>\n<li><a href=\"https://github.com/fabacab/awesome-lockpicking\"><strong>fabacab/awesome-lockpicking</strong></a></li>\n<li><a href=\"https://github.com/fabacab/awesome-cybersecurity-blueteam\"><strong>fabacab/awesome-cybersecurity-blueteam</strong></a></li>\n<li><a href=\"https://github.com/cpuu/awesome-fuzzing\"><strong>cpuu/awesome-fuzzing</strong></a></li>\n<li><a href=\"https://github.com/fkie-cad/awesome-embedded-and-iot-security\"><strong>fkie-cad/awesome-embedded-and-iot-security</strong></a></li>\n<li><a href=\"https://github.com/bakke92/awesome-gdpr\"><strong>bakke92/awesome-gdpr</strong></a></li>\n<li><a href=\"https://github.com/TaptuIT/awesome-devsecops\"><strong>TaptuIT/awesome-devsecops</strong></a></li>\n<li><a href=\"https://github.com/umbraco-community/awesome-umbraco\"><strong>umbraco-community/awesome-umbraco</strong></a></li>\n<li><a href=\"https://github.com/refinerycms-contrib/awesome-refinerycms\"><strong>refinerycms-contrib/awesome-refinerycms</strong></a></li>\n<li><a href=\"https://github.com/springload/awesome-wagtail\"><strong>springload/awesome-wagtail</strong></a></li>\n<li><a href=\"https://github.com/drmonkeyninja/awesome-textpattern\"><strong>drmonkeyninja/awesome-textpattern</strong></a></li>\n<li><a href=\"https://github.com/nirgn975/awesome-drupal\"><strong>nirgn975/awesome-drupal</strong></a></li>\n<li><a href=\"https://github.com/craftcms/awesome\"><strong>craftcms/awesome</strong></a></li>\n<li><a href=\"https://github.com/MartinMiles/Awesome-Sitecore\"><strong>MartinMiles/Awesome-Sitecore</strong></a></li>\n<li><a href=\"https://github.com/wernerkrauss/awesome-silverstripe-cms\"><strong>wernerkrauss/awesome-silverstripe-cms</strong></a></li>\n<li><a href=\"https://github.com/Kiloreux/awesome-robotics\"><strong>Kiloreux/awesome-robotics</strong></a></li>\n<li><a href=\"https://github.com/HQarroum/awesome-iot\"><strong>HQarroum/awesome-iot</strong></a></li>\n<li><a href=\"https://github.com/kitspace/awesome-electronics\"><strong>kitspace/awesome-electronics</strong></a></li>\n<li><a href=\"https://github.com/rabschi/awesome-beacon\"><strong>rabschi/awesome-beacon</strong></a></li>\n<li><a href=\"https://github.com/gitfrage/guitarspecs\"><strong>gitfrage/guitarspecs</strong></a></li>\n<li><a href=\"https://github.com/beardicus/awesome-plotters\"><strong>beardicus/awesome-plotters</strong></a></li>\n<li><a href=\"https://github.com/protontypes/awesome-robotic-tooling\"><strong>protontypes/awesome-robotic-tooling</strong></a></li>\n<li><a href=\"https://github.com/szenergy/awesome-lidar\"><strong>szenergy/awesome-lidar</strong></a></li>\n<li><a href=\"https://github.com/opencompany/awesome-open-company\"><strong>opencompany/awesome-open-company</strong></a></li>\n<li><a href=\"https://github.com/mmccaff/PlacesToPostYourStartup\"><strong>mmccaff/PlacesToPostYourStartup</strong></a></li>\n<li><a href=\"https://github.com/domenicosolazzo/awesome-okr\"><strong>domenicosolazzo/awesome-okr</strong></a></li>\n<li><a href=\"https://github.com/LappleApple/awesome-leading-and-managing\"><strong>LappleApple/awesome-leading-and-managing</strong></a></li>\n<li><a href=\"https://github.com/mezod/awesome-indie\"><strong>mezod/awesome-indie</strong></a></li>\n<li><a href=\"https://github.com/cjbarber/ToolsOfTheTrade\"><strong>cjbarber/ToolsOfTheTrade</strong></a></li>\n<li><a href=\"https://github.com/nglgzz/awesome-clean-tech\"><strong>nglgzz/awesome-clean-tech</strong></a></li>\n<li><a href=\"https://github.com/wardley-maps-community/awesome-wardley-maps\"><strong>wardley-maps-community/awesome-wardley-maps</strong></a></li>\n<li><a href=\"https://github.com/RayBB/awesome-social-enterprise\"><strong>RayBB/awesome-social-enterprise</strong></a></li>\n<li><a href=\"https://github.com/kdeldycke/awesome-engineering-team-management\"><strong>kdeldycke/awesome-engineering-team-management</strong></a></li>\n<li><a href=\"https://github.com/agamm/awesome-developer-first\"><strong>agamm/awesome-developer-first</strong></a></li>\n<li><a href=\"https://github.com/kdeldycke/awesome-billing\"><strong>kdeldycke/awesome-billing</strong></a></li>\n<li><a href=\"https://github.com/matiassingers/awesome-slack\"><strong>matiassingers/awesome-slack</strong></a></li>\n<li><a href=\"https://github.com/filipelinhares/awesome-slack\"><strong>filipelinhares/awesome-slack</strong></a></li>\n<li><a href=\"https://github.com/lukasz-madon/awesome-remote-job\"><strong>lukasz-madon/awesome-remote-job</strong></a></li>\n<li><a href=\"https://github.com/jyguyomarch/awesome-productivity\"><strong>jyguyomarch/awesome-productivity</strong></a></li>\n<li><a href=\"https://github.com/tramcar/awesome-job-boards\"><strong>tramcar/awesome-job-boards</strong></a></li>\n<li><a href=\"https://github.com/DopplerHQ/awesome-interview-questions\"><strong>DopplerHQ/awesome-interview-questions</strong></a></li>\n<li><a href=\"https://github.com/joho/awesome-code-review\"><strong>joho/awesome-code-review</strong></a></li>\n<li><a href=\"https://github.com/j0hnm4r5/awesome-creative-technology\"><strong>j0hnm4r5/awesome-creative-technology</strong></a></li>\n<li><a href=\"https://github.com/lodthe/awesome-internships\"><strong>lodthe/awesome-internships</strong></a></li>\n<li><a href=\"https://github.com/sdnds-tw/awesome-sdn\"><strong>sdnds-tw/awesome-sdn</strong></a></li>\n<li><a href=\"https://github.com/briatte/awesome-network-analysis\"><strong>briatte/awesome-network-analysis</strong></a></li>\n<li><a href=\"https://github.com/caesar0301/awesome-pcaptools\"><strong>caesar0301/awesome-pcaptools</strong></a></li>\n<li><a href=\"https://github.com/rtckit/awesome-rtc\"><strong>rtckit/awesome-rtc</strong></a></li>\n<li><a href=\"https://github.com/igorbarinov/awesome-bitcoin\"><strong>igorbarinov/awesome-bitcoin</strong></a></li>\n<li><a href=\"https://github.com/vhpoet/awesome-ripple\"><strong>vhpoet/awesome-ripple</strong></a></li>\n<li><a href=\"https://github.com/machinomy/awesome-non-financial-blockchain\"><strong>machinomy/awesome-non-financial-blockchain</strong></a></li>\n<li><a href=\"https://github.com/tleb/awesome-mastodon\"><strong>tleb/awesome-mastodon</strong></a></li>\n<li><a href=\"https://github.com/ttumiel/Awesome-Ethereum\"><strong>ttumiel/Awesome-Ethereum</strong></a></li>\n<li><a href=\"https://github.com/steven2358/awesome-blockchain-ai\"><strong>steven2358/awesome-blockchain-ai</strong></a></li>\n<li><a href=\"https://github.com/DanailMinchev/awesome-eosio\"><strong>DanailMinchev/awesome-eosio</strong></a></li>\n<li><a href=\"https://github.com/chainstack/awesome-corda\"><strong>chainstack/awesome-corda</strong></a></li>\n<li><a href=\"https://github.com/msmolyakov/awesome-waves\"><strong>msmolyakov/awesome-waves</strong></a></li>\n<li><a href=\"https://github.com/substrate-developer-hub/awesome-substrate\"><strong>substrate-developer-hub/awesome-substrate</strong></a></li>\n<li><a href=\"https://github.com/golemfactory/awesome-golem\"><strong>golemfactory/awesome-golem</strong></a></li>\n<li><a href=\"https://github.com/friedger/awesome-stacks-chain\"><strong>friedger/awesome-stacks-chain</strong></a></li>\n<li><a href=\"https://github.com/eselkin/awesome-computational-neuroscience\"><strong>eselkin/awesome-computational-neuroscience</strong></a></li>\n<li><a href=\"https://github.com/maehr/awesome-digital-history\"><strong>maehr/awesome-digital-history</strong></a></li>\n<li><a href=\"https://github.com/writing-resources/awesome-scientific-writing\"><strong>writing-resources/awesome-scientific-writing</strong></a></li>\n<li><a href=\"https://github.com/danvoyce/awesome-creative-tech-events\"><strong>danvoyce/awesome-creative-tech-events</strong></a></li>\n<li><a href=\"https://github.com/ildoc/awesome-italy-events\"><strong>ildoc/awesome-italy-events</strong></a></li>\n<li><a href=\"https://github.com/awkward/awesome-netherlands-events\"><strong>awkward/awesome-netherlands-events</strong></a></li>\n<li><a href=\"https://github.com/TheJambo/awesome-testing\"><strong>TheJambo/awesome-testing</strong></a></li>\n<li><a href=\"https://github.com/mojoaxel/awesome-regression-testing\"><strong>mojoaxel/awesome-regression-testing</strong></a></li>\n<li><a href=\"https://github.com/christian-bromann/awesome-selenium\"><strong>christian-bromann/awesome-selenium</strong></a></li>\n<li><a href=\"https://github.com/SrinivasanTarget/awesome-appium\"><strong>SrinivasanTarget/awesome-appium</strong></a></li>\n<li><a href=\"https://github.com/sindresorhus/awesome-tap\"><strong>sindresorhus/awesome-tap</strong></a></li>\n<li><a href=\"https://github.com/aliesbelik/awesome-jmeter\"><strong>aliesbelik/awesome-jmeter</strong></a></li>\n<li><a href=\"https://github.com/k6io/awesome-k6\"><strong>k6io/awesome-k6</strong></a></li>\n<li><a href=\"https://github.com/mxschmitt/awesome-playwright\"><strong>mxschmitt/awesome-playwright</strong></a></li>\n<li><a href=\"https://github.com/fityanos/awesome-quality-assurance-roadmap\"><strong>fityanos/awesome-quality-assurance-roadmap</strong></a></li>\n<li><a href=\"https://github.com/burningtree/awesome-json\"><strong>burningtree/awesome-json</strong></a></li>\n<li><a href=\"https://github.com/tmcw/awesome-geojson\"><strong>tmcw/awesome-geojson</strong></a></li>\n<li><a href=\"https://github.com/jdorfman/awesome-json-datasets\"><strong>jdorfman/awesome-json-datasets</strong></a></li>\n<li><a href=\"https://github.com/secretGeek/awesomeCSV\"><strong>secretGeek/awesomeCSV</strong></a></li>\n<li><a href=\"https://github.com/AchoArnold/discount-for-student-dev\"><strong>AchoArnold/discount-for-student-dev</strong></a></li>\n<li><a href=\"https://github.com/kyleterry/awesome-radio\"><strong>kyleterry/awesome-radio</strong></a></li>\n<li><a href=\"https://github.com/sindresorhus/awesome\"><strong>sindresorhus/awesome</strong></a></li>\n<li><a href=\"https://github.com/onurakpolat/awesome-analytics\"><strong>onurakpolat/awesome-analytics</strong></a></li>\n<li><a href=\"https://github.com/marmelab/awesome-rest\"><strong>marmelab/awesome-rest</strong></a></li>\n<li><a href=\"https://github.com/cicdops/awesome-ciandcd\"><strong>cicdops/awesome-ciandcd</strong></a></li>\n<li><a href=\"https://github.com/mmcgrana/services-engineering\"><strong>mmcgrana/services-engineering</strong></a></li>\n<li><a href=\"https://github.com/ripienaar/free-for-dev\"><strong>ripienaar/free-for-dev</strong></a></li>\n<li><a href=\"https://github.com/cyberglot/awesome-answers\"><strong>cyberglot/awesome-answers</strong></a></li>\n<li><a href=\"https://github.com/diessica/awesome-sketch\"><strong>diessica/awesome-sketch</strong></a></li>\n<li><a href=\"https://github.com/melvin0008/awesome-projects-boilerplates\"><strong>melvin0008/awesome-projects-boilerplates</strong></a></li>\n<li><a href=\"https://github.com/matiassingers/awesome-readme\"><strong>matiassingers/awesome-readme</strong></a></li>\n<li><a href=\"https://github.com/NARKOZ/guides\"><strong>NARKOZ/guides</strong></a></li>\n<li><a href=\"https://github.com/kilimchoi/engineering-blogs\"><strong>kilimchoi/engineering-blogs</strong></a></li>\n<li><a href=\"https://github.com/awesome-selfhosted/awesome-selfhosted\"><strong>awesome-selfhosted/awesome-selfhosted</strong></a></li>\n<li><a href=\"https://github.com/DataDaoDe/awesome-foss-apps\"><strong>DataDaoDe/awesome-foss-apps</strong></a></li>\n<li><a href=\"https://github.com/alferov/awesome-gulp\"><strong>alferov/awesome-gulp</strong></a></li>\n<li><a href=\"https://github.com/sindresorhus/amas\"><strong>sindresorhus/amas</strong></a></li>\n<li><a href=\"https://github.com/stoeffel/awesome-ama-answers\"><strong>stoeffel/awesome-ama-answers</strong></a></li>\n<li><a href=\"https://github.com/ibaaj/awesome-OpenSourcePhotography\"><strong>ibaaj/awesome-OpenSourcePhotography</strong></a></li>\n<li><a href=\"https://github.com/eug/awesome-opengl\"><strong>eug/awesome-opengl</strong></a></li>\n<li><a href=\"https://github.com/chentsulin/awesome-graphql\"><strong>chentsulin/awesome-graphql</strong></a></li>\n<li><a href=\"https://github.com/APA-Technology-Division/urban-and-regional-planning-resources\"><strong>APA-Technology-Division/urban-and-regional-planning-resources</strong></a></li>\n<li><a href=\"https://github.com/CUTR-at-USF/awesome-transit\"><strong>CUTR-at-USF/awesome-transit</strong></a></li>\n<li><a href=\"https://github.com/emptymalei/awesome-research\"><strong>emptymalei/awesome-research</strong></a></li>\n<li><a href=\"https://github.com/fasouto/awesome-dataviz\"><strong>fasouto/awesome-dataviz</strong></a></li>\n<li><a href=\"https://github.com/vinkla/shareable-links\"><strong>vinkla/shareable-links</strong></a></li>\n<li><a href=\"https://github.com/mfornos/awesome-microservices\"><strong>mfornos/awesome-microservices</strong></a></li>\n<li><a href=\"https://github.com/jagracey/Awesome-Unicode\"><strong>jagracey/Awesome-Unicode</strong></a></li>\n<li><a href=\"https://github.com/Codepoints/awesome-codepoints\"><strong>Codepoints/awesome-codepoints</strong></a></li>\n<li><a href=\"https://github.com/MunGell/awesome-for-beginners\"><strong>MunGell/awesome-for-beginners</strong></a></li>\n<li><a href=\"https://github.com/gamontal/awesome-katas\"><strong>gamontal/awesome-katas</strong></a></li>\n<li><a href=\"https://github.com/drewrwilson/toolsforactivism\"><strong>drewrwilson/toolsforactivism</strong></a></li>\n<li><a href=\"https://github.com/dylanrees/citizen-science\"><strong>dylanrees/citizen-science</strong></a></li>\n<li><a href=\"https://github.com/hobbyquaker/awesome-mqtt\"><strong>hobbyquaker/awesome-mqtt</strong></a></li>\n<li><a href=\"https://github.com/daviddias/awesome-hacking-locations\"><strong>daviddias/awesome-hacking-locations</strong></a></li>\n<li><a href=\"https://github.com/cristianoliveira/awesome4girls\"><strong>cristianoliveira/awesome4girls</strong></a></li>\n<li><a href=\"https://github.com/vorpaljs/awesome-vorpal\"><strong>vorpaljs/awesome-vorpal</strong></a></li>\n<li><a href=\"https://github.com/vinjn/awesome-vulkan\"><strong>vinjn/awesome-vulkan</strong></a></li>\n<li><a href=\"https://github.com/egeerardyn/awesome-LaTeX\"><strong>egeerardyn/awesome-LaTeX</strong></a></li>\n<li><a href=\"https://github.com/antontarasenko/awesome-economics\"><strong>antontarasenko/awesome-economics</strong></a></li>\n<li><a href=\"https://github.com/sublimino/awesome-funny-markov\"><strong>sublimino/awesome-funny-markov</strong></a></li>\n<li><a href=\"https://github.com/danielecook/Awesome-Bioinformatics\"><strong>danielecook/Awesome-Bioinformatics</strong></a></li>\n<li><a href=\"https://github.com/hsiaoyi0504/awesome-cheminformatics\"><strong>hsiaoyi0504/awesome-cheminformatics</strong></a></li>\n<li><a href=\"https://github.com/Siddharth11/Colorful\"><strong>Siddharth11/Colorful</strong></a></li>\n<li><a href=\"https://github.com/scholtzm/awesome-steam\"><strong>scholtzm/awesome-steam</strong></a></li>\n<li><a href=\"https://github.com/hackerkid/bots\"><strong>hackerkid/bots</strong></a></li>\n<li><a href=\"https://github.com/dastergon/awesome-sre\"><strong>dastergon/awesome-sre</strong></a></li>\n<li><a href=\"https://github.com/KimberlyMunoz/empathy-in-engineering\"><strong>KimberlyMunoz/empathy-in-engineering</strong></a></li>\n<li><a href=\"https://github.com/xen0l/awesome-dtrace\"><strong>xen0l/awesome-dtrace</strong></a></li>\n<li><a href=\"https://github.com/bvolpato/awesome-userscripts\"><strong>bvolpato/awesome-userscripts</strong></a></li>\n<li><a href=\"https://github.com/tobiasbueschel/awesome-pokemon\"><strong>tobiasbueschel/awesome-pokemon</strong></a></li>\n<li><a href=\"https://github.com/exAspArk/awesome-chatops\"><strong>exAspArk/awesome-chatops</strong></a></li>\n<li><a href=\"https://github.com/kdeldycke/awesome-falsehood\"><strong>kdeldycke/awesome-falsehood</strong></a></li>\n<li><a href=\"https://github.com/heynickc/awesome-ddd\"><strong>heynickc/awesome-ddd</strong></a></li>\n<li><a href=\"https://github.com/woop/awesome-quantified-self\"><strong>woop/awesome-quantified-self</strong></a></li>\n<li><a href=\"https://github.com/hbokh/awesome-saltstack\"><strong>hbokh/awesome-saltstack</strong></a></li>\n<li><a href=\"https://github.com/nicolesaidy/awesome-web-design\"><strong>nicolesaidy/awesome-web-design</strong></a></li>\n<li><a href=\"https://github.com/terkelg/awesome-creative-coding\"><strong>terkelg/awesome-creative-coding</strong></a></li>\n<li><a href=\"https://github.com/aviaryan/awesome-no-login-web-apps\"><strong>aviaryan/awesome-no-login-web-apps</strong></a></li>\n<li><a href=\"https://github.com/johnjago/awesome-free-software\"><strong>johnjago/awesome-free-software</strong></a></li>\n<li><a href=\"https://github.com/podo/awesome-framer\"><strong>podo/awesome-framer</strong></a></li>\n<li><a href=\"https://github.com/BubuAnabelas/awesome-markdown\"><strong>BubuAnabelas/awesome-markdown</strong></a></li>\n<li><a href=\"https://github.com/mislavcimpersak/awesome-dev-fun\"><strong>mislavcimpersak/awesome-dev-fun</strong></a></li>\n<li><a href=\"https://github.com/kakoni/awesome-healthcare\"><strong>kakoni/awesome-healthcare</strong></a></li>\n<li><a href=\"https://github.com/DavidLambauer/awesome-magento2\"><strong>DavidLambauer/awesome-magento2</strong></a></li>\n<li><a href=\"https://github.com/xiaohanyu/awesome-tikz\"><strong>xiaohanyu/awesome-tikz</strong></a></li>\n<li><a href=\"https://github.com/analyticalmonk/awesome-neuroscience\"><strong>analyticalmonk/awesome-neuroscience</strong></a></li>\n<li><a href=\"https://github.com/johnjago/awesome-ad-free\"><strong>johnjago/awesome-ad-free</strong></a></li>\n<li><a href=\"https://github.com/angrykoala/awesome-esolangs\"><strong>angrykoala/awesome-esolangs</strong></a></li>\n<li><a href=\"https://github.com/roaldnefs/awesome-prometheus\"><strong>roaldnefs/awesome-prometheus</strong></a></li>\n<li><a href=\"https://github.com/homematic-community/awesome-homematic\"><strong>homematic-community/awesome-homematic</strong></a></li>\n<li><a href=\"https://github.com/sfischer13/awesome-ledger\"><strong>sfischer13/awesome-ledger</strong></a></li>\n<li><a href=\"https://github.com/thomasbnt/awesome-web-monetization\"><strong>thomasbnt/awesome-web-monetization</strong></a></li>\n<li><a href=\"https://github.com/johnjago/awesome-uncopyright\"><strong>johnjago/awesome-uncopyright</strong></a></li>\n<li><a href=\"https://github.com/Zheaoli/awesome-coins\"><strong>Zheaoli/awesome-coins</strong></a></li>\n<li><a href=\"https://github.com/folkswhocode/awesome-diversity\"><strong>folkswhocode/awesome-diversity</strong></a></li>\n<li><a href=\"https://github.com/zachflower/awesome-open-source-supporters\"><strong>zachflower/awesome-open-source-supporters</strong></a></li>\n<li><a href=\"https://github.com/robinstickel/awesome-design-principles\"><strong>robinstickel/awesome-design-principles</strong></a></li>\n<li><a href=\"https://github.com/johnjago/awesome-theravada\"><strong>johnjago/awesome-theravada</strong></a></li>\n<li><a href=\"https://github.com/inspectit-labs/awesome-inspectit\"><strong>inspectit-labs/awesome-inspectit</strong></a></li>\n<li><a href=\"https://github.com/nayafia/awesome-maintainers\"><strong>nayafia/awesome-maintainers</strong></a></li>\n<li><a href=\"https://github.com/xxczaki/awesome-calculators\"><strong>xxczaki/awesome-calculators</strong></a></li>\n<li><a href=\"https://github.com/ZYSzys/awesome-captcha\"><strong>ZYSzys/awesome-captcha</strong></a></li>\n<li><a href=\"https://github.com/markusschanta/awesome-jupyter\"><strong>markusschanta/awesome-jupyter</strong></a></li>\n<li><a href=\"https://github.com/andrewda/awesome-frc\"><strong>andrewda/awesome-frc</strong></a></li>\n<li><a href=\"https://github.com/humanetech-community/awesome-humane-tech\"><strong>humanetech-community/awesome-humane-tech</strong></a></li>\n<li><a href=\"https://github.com/karlhorky/awesome-speakers\"><strong>karlhorky/awesome-speakers</strong></a></li>\n<li><a href=\"https://github.com/edm00se/awesome-board-games\"><strong>edm00se/awesome-board-games</strong></a></li>\n<li><a href=\"https://github.com/uraimo/awesome-software-patreons\"><strong>uraimo/awesome-software-patreons</strong></a></li>\n<li><a href=\"https://github.com/ecohealthalliance/awesome-parasite\"><strong>ecohealthalliance/awesome-parasite</strong></a></li>\n<li><a href=\"https://github.com/jzarca01/awesome-food\"><strong>jzarca01/awesome-food</strong></a></li>\n<li><a href=\"https://github.com/dreamingechoes/awesome-mental-health\"><strong>dreamingechoes/awesome-mental-health</strong></a></li>\n<li><a href=\"https://github.com/alexk111/awesome-bitcoin-payment-processors\"><strong>alexk111/awesome-bitcoin-payment-processors</strong></a></li>\n<li><a href=\"https://github.com/nschloe/awesome-scientific-computing\"><strong>nschloe/awesome-scientific-computing</strong></a></li>\n<li><a href=\"https://github.com/ScaleLeap/awesome-amazon-seller\"><strong>ScaleLeap/awesome-amazon-seller</strong></a></li>\n<li><a href=\"https://github.com/brycejohnston/awesome-agriculture\"><strong>brycejohnston/awesome-agriculture</strong></a></li>\n<li><a href=\"https://github.com/matttga/awesome-product-design\"><strong>matttga/awesome-product-design</strong></a></li>\n<li><a href=\"https://github.com/catalinmiron/awesome-prisma\"><strong>catalinmiron/awesome-prisma</strong></a></li>\n<li><a href=\"https://github.com/simskij/awesome-software-architecture\"><strong>simskij/awesome-software-architecture</strong></a></li>\n<li><a href=\"https://github.com/stevesong/awesome-connectivity-info\"><strong>stevesong/awesome-connectivity-info</strong></a></li>\n<li><a href=\"https://github.com/stackshareio/awesome-stacks\"><strong>stackshareio/awesome-stacks</strong></a></li>\n<li><a href=\"https://github.com/cytodata/awesome-cytodata\"><strong>cytodata/awesome-cytodata</strong></a></li>\n<li><a href=\"https://github.com/davisonio/awesome-irc\"><strong>davisonio/awesome-irc</strong></a></li>\n<li><a href=\"https://github.com/cenoura/awesome-ads\"><strong>cenoura/awesome-ads</strong></a></li>\n<li><a href=\"https://github.com/philsturgeon/awesome-earth\"><strong>philsturgeon/awesome-earth</strong></a></li>\n<li><a href=\"https://github.com/gruhn/awesome-naming\"><strong>gruhn/awesome-naming</strong></a></li>\n<li><a href=\"https://github.com/caufieldjh/awesome-bioie\"><strong>caufieldjh/awesome-bioie</strong></a></li>\n<li><a href=\"https://github.com/iipc/awesome-web-archiving\"><strong>iipc/awesome-web-archiving</strong></a></li>\n<li><a href=\"https://github.com/schlessera/awesome-wp-cli\"><strong>schlessera/awesome-wp-cli</strong></a></li>\n<li><a href=\"https://github.com/mourarthur/awesome-credit-modeling\"><strong>mourarthur/awesome-credit-modeling</strong></a></li>\n<li><a href=\"https://github.com/KeyboardInterrupt/awesome-ansible\"><strong>KeyboardInterrupt/awesome-ansible</strong></a></li>\n<li><a href=\"https://github.com/keller-mark/awesome-biological-visualizations\"><strong>keller-mark/awesome-biological-visualizations</strong></a></li>\n<li><a href=\"https://github.com/aureooms/awesome-qr-code\"><strong>aureooms/awesome-qr-code</strong></a></li>\n<li><a href=\"https://github.com/sdassow/awesome-veganism\"><strong>sdassow/awesome-veganism</strong></a></li>\n<li><a href=\"https://github.com/mbiesiad/awesome-translations\"><strong>mbiesiad/awesome-translations</strong></a></li>\n<li><a href=\"https://github.com/dersvenhesse/awesome-scriptable\"><strong>dersvenhesse/awesome-scriptable</strong></a></li>\n<li><a href=\"https://github.com/topics/awesome\"><strong>topics/awesome</strong></a></li>\n<li><a href=\"https://awesome-indexed.mathew-davies.co.uk\"><strong>https://awesome-indexed.mathew-davies.co.uk</strong></a></li>\n<li><a href=\"https://awesomelists.top\"><strong>https://awesomelists.top</strong></a></li>\n<li><a href=\"https://github.com/basharovV/StumbleUponAwesome\"><strong>basharovV/StumbleUponAwesome</strong></a></li>\n<li><a href=\"https://github.com/umutphp/awesome-cli\"><strong>umutphp/awesome-cli</strong></a></li>\n<li><a href=\"http://awesome.digitalbunker.dev\"><strong>http://awesome.digitalbunker.dev</strong></a></li>\n<li><a href=\"https://www.trackawesomelist.com\"><strong>https://www.trackawesomelist.com</strong></a></li>\n<li><a href=\"https://github.com/sindresorhus/awesome-nodejs\"><strong>sindresorhus/awesome-nodejs</strong></a></li>\n<li><a href=\"https://github.com/bcoe/awesome-cross-platform-nodejs\"><strong>bcoe/awesome-cross-platform-nodejs</strong></a></li>\n<li><a href=\"https://github.com/dypsilon/frontend-dev-bookmarks\"><strong>dypsilon/frontend-dev-bookmarks</strong></a></li>\n<li><a href=\"https://github.com/vsouza/awesome-ios\"><strong>vsouza/awesome-ios</strong></a></li>\n<li><a href=\"https://github.com/JStumpp/awesome-android\"><strong>JStumpp/awesome-android</strong></a></li>\n<li><a href=\"https://github.com/weblancaster/awesome-IoT-hybrid\"><strong>weblancaster/awesome-IoT-hybrid</strong></a></li>\n<li><a href=\"https://github.com/sindresorhus/awesome-electron\"><strong>sindresorhus/awesome-electron</strong></a></li>\n<li><a href=\"https://github.com/busterc/awesome-cordova\"><strong>busterc/awesome-cordova</strong></a></li>\n<li><a href=\"https://github.com/jondot/awesome-react-native\"><strong>jondot/awesome-react-native</strong></a></li>\n<li><a href=\"https://github.com/XamSome/awesome-xamarin\"><strong>XamSome/awesome-xamarin</strong></a></li>\n<li><a href=\"https://github.com/inputsh/awesome-linux\"><strong>inputsh/awesome-linux</strong></a></li>\n<li><a href=\"https://github.com/Friz-zy/awesome-linux-containers\"><strong>Friz-zy/awesome-linux-containers</strong></a></li>\n<li><a href=\"https://github.com/zoidbergwill/awesome-ebpf\"><strong>zoidbergwill/awesome-ebpf</strong></a></li>\n<li><a href=\"https://github.com/PandaFoss/Awesome-Arch\"><strong>PandaFoss/Awesome-Arch</strong></a></li>\n<li><a href=\"https://github.com/iCHAIT/awesome-macOS\"><strong>iCHAIT/awesome-macOS</strong></a></li>\n<li><a href=\"https://github.com/herrbischoff/awesome-macos-command-line\"><strong>herrbischoff/awesome-macos-command-line</strong></a></li>\n<li><a href=\"https://github.com/agarrharr/awesome-macos-screensavers\"><strong>agarrharr/awesome-macos-screensavers</strong></a></li>\n<li><a href=\"https://github.com/jaywcjlove/awesome-mac\"><strong>jaywcjlove/awesome-mac</strong></a></li>\n<li><a href=\"https://github.com/serhii-londar/open-source-mac-os-apps\"><strong>serhii-londar/open-source-mac-os-apps</strong></a></li>\n<li><a href=\"https://github.com/yenchenlin/awesome-watchos\"><strong>yenchenlin/awesome-watchos</strong></a></li>\n<li><a href=\"https://github.com/deephacks/awesome-jvm\"><strong>deephacks/awesome-jvm</strong></a></li>\n<li><a href=\"https://github.com/mailtoharshit/awesome-salesforce\"><strong>mailtoharshit/awesome-salesforce</strong></a></li>\n<li><a href=\"https://github.com/donnemartin/awesome-aws\"><strong>donnemartin/awesome-aws</strong></a></li>\n<li><a href=\"https://github.com/Awesome-Windows/Awesome\"><strong>Awesome-Windows/Awesome</strong></a></li>\n<li><a href=\"https://github.com/ipfs/awesome-ipfs\"><strong>ipfs/awesome-ipfs</strong></a></li>\n<li><a href=\"https://github.com/fuse-compound/awesome-fuse\"><strong>fuse-compound/awesome-fuse</strong></a></li>\n<li><a href=\"https://github.com/ianstormtaylor/awesome-heroku\"><strong>ianstormtaylor/awesome-heroku</strong></a></li>\n<li><a href=\"https://github.com/thibmaek/awesome-raspberry-pi\"><strong>thibmaek/awesome-raspberry-pi</strong></a></li>\n<li><a href=\"https://github.com/JesseTG/awesome-qt\"><strong>JesseTG/awesome-qt</strong></a></li>\n<li><a href=\"https://github.com/fregante/Awesome-WebExtensions\"><strong>fregante/Awesome-WebExtensions</strong></a></li>\n<li><a href=\"https://github.com/motion-open-source/awesome-rubymotion\"><strong>motion-open-source/awesome-rubymotion</strong></a></li>\n<li><a href=\"https://github.com/vitalets/awesome-smart-tv\"><strong>vitalets/awesome-smart-tv</strong></a></li>\n<li><a href=\"https://github.com/Kazhnuz/awesome-gnome\"><strong>Kazhnuz/awesome-gnome</strong></a></li>\n<li><a href=\"https://github.com/francoism90/awesome-kde\"><strong>francoism90/awesome-kde</strong></a></li>\n<li><a href=\"https://github.com/quozd/awesome-dotnet\"><strong>quozd/awesome-dotnet</strong></a></li>\n<li><a href=\"https://github.com/thangchung/awesome-dotnet-core\"><strong>thangchung/awesome-dotnet-core</strong></a></li>\n<li><a href=\"https://github.com/ironcev/awesome-roslyn\"><strong>ironcev/awesome-roslyn</strong></a></li>\n<li><a href=\"https://github.com/miguelmota/awesome-amazon-alexa\"><strong>miguelmota/awesome-amazon-alexa</strong></a></li>\n<li><a href=\"https://github.com/jonleibowitz/awesome-digitalocean\"><strong>jonleibowitz/awesome-digitalocean</strong></a></li>\n<li><a href=\"https://github.com/Solido/awesome-flutter\"><strong>Solido/awesome-flutter</strong></a></li>\n<li><a href=\"https://github.com/frenck/awesome-home-assistant\"><strong>frenck/awesome-home-assistant</strong></a></li>\n<li><a href=\"https://github.com/victorshinya/awesome-ibmcloud\"><strong>victorshinya/awesome-ibmcloud</strong></a></li>\n<li><a href=\"https://github.com/jthegedus/awesome-firebase\"><strong>jthegedus/awesome-firebase</strong></a></li>\n<li><a href=\"https://github.com/fkromer/awesome-ros2\"><strong>fkromer/awesome-ros2</strong></a></li>\n<li><a href=\"https://github.com/adafruit/awesome-adafruitio\"><strong>adafruit/awesome-adafruitio</strong></a></li>\n<li><a href=\"https://github.com/irazasyed/awesome-cloudflare\"><strong>irazasyed/awesome-cloudflare</strong></a></li>\n<li><a href=\"https://github.com/ravirupareliya/awesome-actions-on-google\"><strong>ravirupareliya/awesome-actions-on-google</strong></a></li>\n<li><a href=\"https://github.com/agucova/awesome-esp\"><strong>agucova/awesome-esp</strong></a></li>\n<li><a href=\"https://github.com/denolib/awesome-deno\"><strong>denolib/awesome-deno</strong></a></li>\n<li><a href=\"https://github.com/balintkissdev/awesome-dos\"><strong>balintkissdev/awesome-dos</strong></a></li>\n<li><a href=\"https://github.com/nix-community/awesome-nix\"><strong>nix-community/awesome-nix</strong></a></li>\n<li><a href=\"https://github.com/sorrycc/awesome-javascript\"><strong>sorrycc/awesome-javascript</strong></a></li>\n<li><a href=\"https://github.com/wbinnssmith/awesome-promises\"><strong>wbinnssmith/awesome-promises</strong></a></li>\n<li><a href=\"https://github.com/standard/awesome-standard\"><strong>standard/awesome-standard</strong></a></li>\n<li><a href=\"https://github.com/bolshchikov/js-must-watch\"><strong>bolshchikov/js-must-watch</strong></a></li>\n<li><a href=\"https://github.com/loverajoel/jstips\"><strong>loverajoel/jstips</strong></a></li>\n<li><a href=\"https://github.com/Kikobeats/awesome-network-js\"><strong>Kikobeats/awesome-network-js</strong></a></li>\n<li><a href=\"https://github.com/parro-it/awesome-micro-npm-packages\"><strong>parro-it/awesome-micro-npm-packages</strong></a></li>\n<li><a href=\"https://github.com/feross/awesome-mad-science\"><strong>feross/awesome-mad-science</strong></a></li>\n<li><a href=\"https://github.com/maxogden/maintenance-modules\"><strong>maxogden/maintenance-modules</strong></a></li>\n<li><a href=\"https://github.com/sindresorhus/awesome-npm\"><strong>sindresorhus/awesome-npm</strong></a></li>\n<li><a href=\"https://github.com/avajs/awesome-ava\"><strong>avajs/awesome-ava</strong></a></li>\n<li><a href=\"https://github.com/dustinspecker/awesome-eslint\"><strong>dustinspecker/awesome-eslint</strong></a></li>\n<li><a href=\"https://github.com/stoeffel/awesome-fp-js\"><strong>stoeffel/awesome-fp-js</strong></a></li>\n<li><a href=\"https://github.com/sindresorhus/awesome-observables\"><strong>sindresorhus/awesome-observables</strong></a></li>\n<li><a href=\"https://github.com/RyanZim/awesome-npm-scripts\"><strong>RyanZim/awesome-npm-scripts</strong></a></li>\n<li><a href=\"https://github.com/30-seconds/30-seconds-of-code\"><strong>30-seconds/30-seconds-of-code</strong></a></li>\n<li><a href=\"https://github.com/Richienb/awesome-ponyfills\"><strong>Richienb/awesome-ponyfills</strong></a></li>\n<li><a href=\"https://github.com/matteocrippa/awesome-swift\"><strong>matteocrippa/awesome-swift</strong></a></li>\n<li><a href=\"https://github.com/hsavit1/Awesome-Swift-Education\"><strong>hsavit1/Awesome-Swift-Education</strong></a></li>\n<li><a href=\"https://github.com/uraimo/Awesome-Swift-Playgrounds\"><strong>uraimo/Awesome-Swift-Playgrounds</strong></a></li>\n<li><a href=\"https://github.com/vinta/awesome-python\"><strong>vinta/awesome-python</strong></a></li>\n<li><a href=\"https://github.com/timofurrer/awesome-asyncio\"><strong>timofurrer/awesome-asyncio</strong></a></li>\n<li><a href=\"https://github.com/faroit/awesome-python-scientific-audio\"><strong>faroit/awesome-python-scientific-audio</strong></a></li>\n<li><a href=\"https://github.com/adafruit/awesome-circuitpython\"><strong>adafruit/awesome-circuitpython</strong></a></li>\n<li><a href=\"https://github.com/krzjoa/awesome-python-data-science\"><strong>krzjoa/awesome-python-data-science</strong></a></li>\n<li><a href=\"https://github.com/typeddjango/awesome-python-typing\"><strong>typeddjango/awesome-python-typing</strong></a></li>\n<li><a href=\"https://github.com/mcauser/awesome-micropython\"><strong>mcauser/awesome-micropython</strong></a></li>\n<li><a href=\"https://github.com/rust-unofficial/awesome-rust\"><strong>rust-unofficial/awesome-rust</strong></a></li>\n<li><a href=\"https://github.com/krispo/awesome-haskell\"><strong>krispo/awesome-haskell</strong></a></li>\n<li><a href=\"https://github.com/passy/awesome-purescript\"><strong>passy/awesome-purescript</strong></a></li>\n<li><a href=\"https://github.com/avelino/awesome-go\"><strong>avelino/awesome-go</strong></a></li>\n<li><a href=\"https://github.com/lauris/awesome-scala\"><strong>lauris/awesome-scala</strong></a></li>\n<li><a href=\"https://github.com/tindzk/awesome-scala-native\"><strong>tindzk/awesome-scala-native</strong></a></li>\n<li><a href=\"https://github.com/markets/awesome-ruby\"><strong>markets/awesome-ruby</strong></a></li>\n<li><a href=\"https://github.com/razum2um/awesome-clojure\"><strong>razum2um/awesome-clojure</strong></a></li>\n<li><a href=\"https://github.com/hantuzun/awesome-clojurescript\"><strong>hantuzun/awesome-clojurescript</strong></a></li>\n<li><a href=\"https://github.com/h4cc/awesome-elixir\"><strong>h4cc/awesome-elixir</strong></a></li>\n<li><a href=\"https://github.com/sporto/awesome-elm\"><strong>sporto/awesome-elm</strong></a></li>\n<li><a href=\"https://github.com/drobakowski/awesome-erlang\"><strong>drobakowski/awesome-erlang</strong></a></li>\n<li><a href=\"https://github.com/svaksha/Julia.jl\"><strong>svaksha/Julia.jl</strong></a></li>\n<li><a href=\"https://github.com/LewisJEllis/awesome-lua\"><strong>LewisJEllis/awesome-lua</strong></a></li>\n<li><a href=\"https://github.com/inputsh/awesome-c\"><strong>inputsh/awesome-c</strong></a></li>\n<li><a href=\"https://github.com/fffaraz/awesome-cpp\"><strong>fffaraz/awesome-cpp</strong></a></li>\n<li><a href=\"https://github.com/qinwf/awesome-R\"><strong>qinwf/awesome-R</strong></a></li>\n<li><a href=\"https://github.com/iamericfletcher/awesome-r-learning-resources\"><strong>iamericfletcher/awesome-r-learning-resources</strong></a></li>\n<li><a href=\"https://github.com/dlang-community/awesome-d\"><strong>dlang-community/awesome-d</strong></a></li>\n<li><a href=\"https://github.com/CodyReichert/awesome-cl\"><strong>CodyReichert/awesome-cl</strong></a></li>\n<li><a href=\"https://github.com/GustavBertram/awesome-common-lisp-learning\"><strong>GustavBertram/awesome-common-lisp-learning</strong></a></li>\n<li><a href=\"https://github.com/hachiojipm/awesome-perl\"><strong>hachiojipm/awesome-perl</strong></a></li>\n<li><a href=\"https://github.com/kdabir/awesome-groovy\"><strong>kdabir/awesome-groovy</strong></a></li>\n<li><a href=\"https://github.com/yissachar/awesome-dart\"><strong>yissachar/awesome-dart</strong></a></li>\n<li><a href=\"https://github.com/akullpp/awesome-java\"><strong>akullpp/awesome-java</strong></a></li>\n<li><a href=\"https://github.com/eleventigers/awesome-rxjava\"><strong>eleventigers/awesome-rxjava</strong></a></li>\n<li><a href=\"https://github.com/KotlinBy/awesome-kotlin\"><strong>KotlinBy/awesome-kotlin</strong></a></li>\n<li><a href=\"https://github.com/ocaml-community/awesome-ocaml\"><strong>ocaml-community/awesome-ocaml</strong></a></li>\n<li><a href=\"https://github.com/seancoyne/awesome-coldfusion\"><strong>seancoyne/awesome-coldfusion</strong></a></li>\n<li><a href=\"https://github.com/rabbiabram/awesome-fortran\"><strong>rabbiabram/awesome-fortran</strong></a></li>\n<li><a href=\"https://github.com/ziadoz/awesome-php\"><strong>ziadoz/awesome-php</strong></a></li>\n<li><a href=\"https://github.com/jakoch/awesome-composer\"><strong>jakoch/awesome-composer</strong></a></li>\n<li><a href=\"https://github.com/Fr0sT-Brutal/awesome-pascal\"><strong>Fr0sT-Brutal/awesome-pascal</strong></a></li>\n<li><a href=\"https://github.com/ahkscript/awesome-AutoHotkey\"><strong>ahkscript/awesome-AutoHotkey</strong></a></li>\n<li><a href=\"https://github.com/J2TeaM/awesome-AutoIt\"><strong>J2TeaM/awesome-AutoIt</strong></a></li>\n<li><a href=\"https://github.com/veelenga/awesome-crystal\"><strong>veelenga/awesome-crystal</strong></a></li>\n<li><a href=\"https://github.com/sfischer13/awesome-frege\"><strong>sfischer13/awesome-frege</strong></a></li>\n<li><a href=\"https://github.com/onqtam/awesome-cmake\"><strong>onqtam/awesome-cmake</strong></a></li>\n<li><a href=\"https://github.com/robinrodricks/awesome-actionscript3\"><strong>robinrodricks/awesome-actionscript3</strong></a></li>\n<li><a href=\"https://github.com/sfischer13/awesome-eta\"><strong>sfischer13/awesome-eta</strong></a></li>\n<li><a href=\"https://github.com/joaomilho/awesome-idris\"><strong>joaomilho/awesome-idris</strong></a></li>\n<li><a href=\"https://github.com/ohenley/awesome-ada\"><strong>ohenley/awesome-ada</strong></a></li>\n<li><a href=\"https://github.com/ebraminio/awesome-qsharp\"><strong>ebraminio/awesome-qsharp</strong></a></li>\n<li><a href=\"https://github.com/koolamusic/awesome-imba\"><strong>koolamusic/awesome-imba</strong></a></li>\n<li><a href=\"https://github.com/desiderantes/awesome-vala\"><strong>desiderantes/awesome-vala</strong></a></li>\n<li><a href=\"https://github.com/coq-community/awesome-coq\"><strong>coq-community/awesome-coq</strong></a></li>\n<li><a href=\"https://github.com/vlang/awesome-v\"><strong>vlang/awesome-v</strong></a></li>\n<li><a href=\"https://github.com/addyosmani/es6-tools\"><strong>addyosmani/es6-tools</strong></a></li>\n<li><a href=\"https://github.com/davidsonfellipe/awesome-wpo\"><strong>davidsonfellipe/awesome-wpo</strong></a></li>\n<li><a href=\"https://github.com/lvwzhen/tools\"><strong>lvwzhen/tools</strong></a></li>\n<li><a href=\"https://github.com/awesome-css-group/awesome-css\"><strong>awesome-css-group/awesome-css</strong></a></li>\n<li><a href=\"https://github.com/addyosmani/critical-path-css-tools\"><strong>addyosmani/critical-path-css-tools</strong></a></li>\n<li><a href=\"https://github.com/davidtheclark/scalable-css-reading-list\"><strong>davidtheclark/scalable-css-reading-list</strong></a></li>\n<li><a href=\"https://github.com/AllThingsSmitty/must-watch-css\"><strong>AllThingsSmitty/must-watch-css</strong></a></li>\n<li><a href=\"https://github.com/AllThingsSmitty/css-protips\"><strong>AllThingsSmitty/css-protips</strong></a></li>\n<li><a href=\"https://github.com/troxler/awesome-css-frameworks\"><strong>troxler/awesome-css-frameworks</strong></a></li>\n<li><a href=\"https://github.com/enaqx/awesome-react\"><strong>enaqx/awesome-react</strong></a></li>\n<li><a href=\"https://github.com/expede/awesome-relay\"><strong>expede/awesome-relay</strong></a></li>\n<li><a href=\"https://github.com/glauberfc/awesome-react-hooks\"><strong>glauberfc/awesome-react-hooks</strong></a></li>\n<li><a href=\"https://github.com/mateusortiz/webcomponents-the-right-way\"><strong>mateusortiz/webcomponents-the-right-way</strong></a></li>\n<li><a href=\"https://github.com/Granze/awesome-polymer\"><strong>Granze/awesome-polymer</strong></a></li>\n<li><a href=\"https://github.com/PatrickJS/awesome-angular\"><strong>PatrickJS/awesome-angular</strong></a></li>\n<li><a href=\"https://github.com/sadcitizen/awesome-backbone\"><strong>sadcitizen/awesome-backbone</strong></a></li>\n<li><a href=\"https://github.com/diegocard/awesome-html5\"><strong>diegocard/awesome-html5</strong></a></li>\n<li><a href=\"https://github.com/willianjusten/awesome-svg\"><strong>willianjusten/awesome-svg</strong></a></li>\n<li><a href=\"https://github.com/raphamorim/awesome-canvas\"><strong>raphamorim/awesome-canvas</strong></a></li>\n<li><a href=\"https://github.com/dnbard/awesome-knockout\"><strong>dnbard/awesome-knockout</strong></a></li>\n<li><a href=\"https://github.com/petk/awesome-dojo\"><strong>petk/awesome-dojo</strong></a></li>\n<li><a href=\"https://github.com/NoahBuscher/Inspire\"><strong>NoahBuscher/Inspire</strong></a></li>\n<li><a href=\"https://github.com/ember-community-russia/awesome-ember\"><strong>ember-community-russia/awesome-ember</strong></a></li>\n<li><a href=\"https://github.com/wasabeef/awesome-android-ui\"><strong>wasabeef/awesome-android-ui</strong></a></li>\n<li><a href=\"https://github.com/cjwirth/awesome-ios-ui\"><strong>cjwirth/awesome-ios-ui</strong></a></li>\n<li><a href=\"https://github.com/Urigo/awesome-meteor\"><strong>Urigo/awesome-meteor</strong></a></li>\n<li><a href=\"https://github.com/sturobson/BEM-resources\"><strong>sturobson/BEM-resources</strong></a></li>\n<li><a href=\"https://github.com/afonsopacifer/awesome-flexbox\"><strong>afonsopacifer/awesome-flexbox</strong></a></li>\n<li><a href=\"https://github.com/deanhume/typography\"><strong>deanhume/typography</strong></a></li>\n<li><a href=\"https://github.com/brunopulis/awesome-a11y\"><strong>brunopulis/awesome-a11y</strong></a></li>\n<li><a href=\"https://github.com/sachin1092/awesome-material\"><strong>sachin1092/awesome-material</strong></a></li>\n<li><a href=\"https://github.com/wbkd/awesome-d3\"><strong>wbkd/awesome-d3</strong></a></li>\n<li><a href=\"https://github.com/jonathandion/awesome-emails\"><strong>jonathandion/awesome-emails</strong></a></li>\n<li><a href=\"https://github.com/petk/awesome-jquery\"><strong>petk/awesome-jquery</strong></a></li>\n<li><a href=\"https://github.com/AllThingsSmitty/jquery-tips-everyone-should-know\"><strong>AllThingsSmitty/jquery-tips-everyone-should-know</strong></a></li>\n<li><a href=\"https://github.com/notthetup/awesome-webaudio\"><strong>notthetup/awesome-webaudio</strong></a></li>\n<li><a href=\"https://github.com/pazguille/offline-first\"><strong>pazguille/offline-first</strong></a></li>\n<li><a href=\"https://github.com/agarrharr/awesome-static-website-services\"><strong>agarrharr/awesome-static-website-services</strong></a></li>\n<li><a href=\"https://github.com/cyclejs-community/awesome-cyclejs\"><strong>cyclejs-community/awesome-cyclejs</strong></a></li>\n<li><a href=\"https://github.com/dok/awesome-text-editing\"><strong>dok/awesome-text-editing</strong></a></li>\n<li><a href=\"https://github.com/fliptheweb/motion-ui-design\"><strong>fliptheweb/motion-ui-design</strong></a></li>\n<li><a href=\"https://github.com/vuejs/awesome-vue\"><strong>vuejs/awesome-vue</strong></a></li>\n<li><a href=\"https://github.com/sadcitizen/awesome-marionette\"><strong>sadcitizen/awesome-marionette</strong></a></li>\n<li><a href=\"https://github.com/aurelia-contrib/awesome-aurelia\"><strong>aurelia-contrib/awesome-aurelia</strong></a></li>\n<li><a href=\"https://github.com/zingchart/awesome-charting\"><strong>zingchart/awesome-charting</strong></a></li>\n<li><a href=\"https://github.com/candelibas/awesome-ionic\"><strong>candelibas/awesome-ionic</strong></a></li>\n<li><a href=\"https://github.com/ChromeDevTools/awesome-chrome-devtools\"><strong>ChromeDevTools/awesome-chrome-devtools</strong></a></li>\n<li><a href=\"https://github.com/jdrgomes/awesome-postcss\"><strong>jdrgomes/awesome-postcss</strong></a></li>\n<li><a href=\"https://github.com/nikgraf/awesome-draft-js\"><strong>nikgraf/awesome-draft-js</strong></a></li>\n<li><a href=\"https://github.com/TalAter/awesome-service-workers\"><strong>TalAter/awesome-service-workers</strong></a></li>\n<li><a href=\"https://github.com/TalAter/awesome-progressive-web-apps\"><strong>TalAter/awesome-progressive-web-apps</strong></a></li>\n<li><a href=\"https://github.com/choojs/awesome-choo\"><strong>choojs/awesome-choo</strong></a></li>\n<li><a href=\"https://github.com/brillout/awesome-redux\"><strong>brillout/awesome-redux</strong></a></li>\n<li><a href=\"https://github.com/webpack-contrib/awesome-webpack\"><strong>webpack-contrib/awesome-webpack</strong></a></li>\n<li><a href=\"https://github.com/browserify/awesome-browserify\"><strong>browserify/awesome-browserify</strong></a></li>\n<li><a href=\"https://github.com/Famolus/awesome-sass\"><strong>Famolus/awesome-sass</strong></a></li>\n<li><a href=\"https://github.com/websemantics/awesome-ant-design\"><strong>websemantics/awesome-ant-design</strong></a></li>\n<li><a href=\"https://github.com/LucasBassetti/awesome-less\"><strong>LucasBassetti/awesome-less</strong></a></li>\n<li><a href=\"https://github.com/sjfricke/awesome-webgl\"><strong>sjfricke/awesome-webgl</strong></a></li>\n<li><a href=\"https://github.com/preactjs/awesome-preact\"><strong>preactjs/awesome-preact</strong></a></li>\n<li><a href=\"https://github.com/jbmoelker/progressive-enhancement-resources\"><strong>jbmoelker/progressive-enhancement-resources</strong></a></li>\n<li><a href=\"https://github.com/unicodeveloper/awesome-nextjs\"><strong>unicodeveloper/awesome-nextjs</strong></a></li>\n<li><a href=\"https://github.com/web-padawan/awesome-lit-html\"><strong>web-padawan/awesome-lit-html</strong></a></li>\n<li><a href=\"https://github.com/automata/awesome-jamstack\"><strong>automata/awesome-jamstack</strong></a></li>\n<li><a href=\"https://github.com/henrikwirth/awesome-wordpress-gatsby\"><strong>henrikwirth/awesome-wordpress-gatsby</strong></a></li>\n<li><a href=\"https://github.com/myshov/awesome-mobile-web-development\"><strong>myshov/awesome-mobile-web-development</strong></a></li>\n<li><a href=\"https://github.com/lauthieb/awesome-storybook\"><strong>lauthieb/awesome-storybook</strong></a></li>\n<li><a href=\"https://github.com/AdrienTorris/awesome-blazor\"><strong>AdrienTorris/awesome-blazor</strong></a></li>\n<li><a href=\"https://github.com/csabapalfi/awesome-pagespeed-metrics\"><strong>csabapalfi/awesome-pagespeed-metrics</strong></a></li>\n<li><a href=\"https://github.com/aniftyco/awesome-tailwindcss\"><strong>aniftyco/awesome-tailwindcss</strong></a></li>\n<li><a href=\"https://github.com/seed-rs/awesome-seed-rs\"><strong>seed-rs/awesome-seed-rs</strong></a></li>\n<li><a href=\"https://github.com/pajaydev/awesome-web-performance-budget\"><strong>pajaydev/awesome-web-performance-budget</strong></a></li>\n<li><a href=\"https://github.com/sergey-pimenov/awesome-web-animation\"><strong>sergey-pimenov/awesome-web-animation</strong></a></li>\n<li><a href=\"https://github.com/jetli/awesome-yew\"><strong>jetli/awesome-yew</strong></a></li>\n<li><a href=\"https://github.com/nadunindunil/awesome-material-ui\"><strong>nadunindunil/awesome-material-ui</strong></a></li>\n<li><a href=\"https://github.com/componently-com/awesome-building-blocks-for-web-apps\"><strong>componently-com/awesome-building-blocks-for-web-apps</strong></a></li>\n<li><a href=\"https://github.com/TheComputerM/awesome-svelte\"><strong>TheComputerM/awesome-svelte</strong></a></li>\n<li><a href=\"https://github.com/klaufel/awesome-design-systems\"><strong>klaufel/awesome-design-systems</strong></a></li>\n<li><a href=\"https://github.com/innocenzi/awesome-inertiajs\"><strong>innocenzi/awesome-inertiajs</strong></a></li>\n<li><a href=\"https://github.com/mdbootstrap/awesome-mdbootstrap\"><strong>mdbootstrap/awesome-mdbootstrap</strong></a></li>\n<li><a href=\"https://github.com/mjhea0/awesome-flask\"><strong>mjhea0/awesome-flask</strong></a></li>\n<li><a href=\"https://github.com/veggiemonk/awesome-docker\"><strong>veggiemonk/awesome-docker</strong></a></li>\n<li><a href=\"https://github.com/iJackUA/awesome-vagrant\"><strong>iJackUA/awesome-vagrant</strong></a></li>\n<li><a href=\"https://github.com/uralbash/awesome-pyramid\"><strong>uralbash/awesome-pyramid</strong></a></li>\n<li><a href=\"https://github.com/PerfectCarl/awesome-play1\"><strong>PerfectCarl/awesome-play1</strong></a></li>\n<li><a href=\"https://github.com/friendsofcake/awesome-cakephp\"><strong>friendsofcake/awesome-cakephp</strong></a></li>\n<li><a href=\"https://github.com/sitepoint-editors/awesome-symfony\"><strong>sitepoint-editors/awesome-symfony</strong></a></li>\n<li><a href=\"https://github.com/pehapkari/awesome-symfony-education\"><strong>pehapkari/awesome-symfony-education</strong></a></li>\n<li><a href=\"https://github.com/chiraggude/awesome-laravel\"><strong>chiraggude/awesome-laravel</strong></a></li>\n<li><a href=\"https://github.com/fukuball/Awesome-Laravel-Education\"><strong>fukuball/Awesome-Laravel-Education</strong></a></li>\n<li><a href=\"https://github.com/blade-ui-kit/awesome-tall-stack\"><strong>blade-ui-kit/awesome-tall-stack</strong></a></li>\n<li><a href=\"https://github.com/gramantin/awesome-rails\"><strong>gramantin/awesome-rails</strong></a></li>\n<li><a href=\"https://github.com/hothero/awesome-rails-gem\"><strong>hothero/awesome-rails-gem</strong></a></li>\n<li><a href=\"https://github.com/phalcon/awesome-phalcon\"><strong>phalcon/awesome-phalcon</strong></a></li>\n<li><a href=\"https://github.com/phanan/htaccess\"><strong>phanan/htaccess</strong></a></li>\n<li><a href=\"https://github.com/fcambus/nginx-resources\"><strong>fcambus/nginx-resources</strong></a></li>\n<li><a href=\"https://github.com/stve/awesome-dropwizard\"><strong>stve/awesome-dropwizard</strong></a></li>\n<li><a href=\"https://github.com/ramitsurana/awesome-kubernetes\"><strong>ramitsurana/awesome-kubernetes</strong></a></li>\n<li><a href=\"https://github.com/unicodeveloper/awesome-lumen\"><strong>unicodeveloper/awesome-lumen</strong></a></li>\n<li><a href=\"https://github.com/pmuens/awesome-serverless\"><strong>pmuens/awesome-serverless</strong></a></li>\n<li><a href=\"https://github.com/PhantomYdn/awesome-wicket\"><strong>PhantomYdn/awesome-wicket</strong></a></li>\n<li><a href=\"https://github.com/vert-x3/vertx-awesome\"><strong>vert-x3/vertx-awesome</strong></a></li>\n<li><a href=\"https://github.com/shuaibiyy/awesome-terraform\"><strong>shuaibiyy/awesome-terraform</strong></a></li>\n<li><a href=\"https://github.com/Cellane/awesome-vapor\"><strong>Cellane/awesome-vapor</strong></a></li>\n<li><a href=\"https://github.com/ucg8j/awesome-dash\"><strong>ucg8j/awesome-dash</strong></a></li>\n<li><a href=\"https://github.com/mjhea0/awesome-fastapi\"><strong>mjhea0/awesome-fastapi</strong></a></li>\n<li><a href=\"https://github.com/kolomied/awesome-cdk\"><strong>kolomied/awesome-cdk</strong></a></li>\n<li><a href=\"https://github.com/kdeldycke/awesome-iam\"><strong>kdeldycke/awesome-iam</strong></a></li>\n<li><a href=\"https://github.com/prakhar1989/awesome-courses\"><strong>prakhar1989/awesome-courses</strong></a></li>\n<li><a href=\"https://github.com/academic/awesome-datascience\"><strong>academic/awesome-datascience</strong></a></li>\n<li><a href=\"https://github.com/siboehm/awesome-learn-datascience\"><strong>siboehm/awesome-learn-datascience</strong></a></li>\n<li><a href=\"https://github.com/josephmisiti/awesome-machine-learning\"><strong>josephmisiti/awesome-machine-learning</strong></a></li>\n<li><a href=\"https://github.com/ujjwalkarn/Machine-Learning-Tutorials\"><strong>ujjwalkarn/Machine-Learning-Tutorials</strong></a></li>\n<li><a href=\"https://github.com/arbox/machine-learning-with-ruby\"><strong>arbox/machine-learning-with-ruby</strong></a></li>\n<li><a href=\"https://github.com/likedan/Awesome-CoreML-Models\"><strong>likedan/Awesome-CoreML-Models</strong></a></li>\n<li><a href=\"https://github.com/h2oai/awesome-h2o\"><strong>h2oai/awesome-h2o</strong></a></li>\n<li><a href=\"https://github.com/SE-ML/awesome-seml\"><strong>SE-ML/awesome-seml</strong></a></li>\n<li><a href=\"https://github.com/georgezouq/awesome-ai-in-finance\"><strong>georgezouq/awesome-ai-in-finance</strong></a></li>\n<li><a href=\"https://github.com/n2cholas/awesome-jax\"><strong>n2cholas/awesome-jax</strong></a></li>\n<li><a href=\"https://github.com/altamiracorp/awesome-xai\"><strong>altamiracorp/awesome-xai</strong></a></li>\n<li><a href=\"https://github.com/edobashira/speech-language-processing\"><strong>edobashira/speech-language-processing</strong></a></li>\n<li><a href=\"https://github.com/dav009/awesome-spanish-nlp\"><strong>dav009/awesome-spanish-nlp</strong></a></li>\n<li><a href=\"https://github.com/arbox/nlp-with-ruby\"><strong>arbox/nlp-with-ruby</strong></a></li>\n<li><a href=\"https://github.com/seriousran/awesome-qa\"><strong>seriousran/awesome-qa</strong></a></li>\n<li><a href=\"https://github.com/tokenmill/awesome-nlg\"><strong>tokenmill/awesome-nlg</strong></a></li>\n<li><a href=\"https://github.com/theimpossibleastronaut/awesome-linguistics\"><strong>theimpossibleastronaut/awesome-linguistics</strong></a></li>\n<li><a href=\"https://github.com/sobolevn/awesome-cryptography\"><strong>sobolevn/awesome-cryptography</strong></a></li>\n<li><a href=\"https://github.com/pFarb/awesome-crypto-papers\"><strong>pFarb/awesome-crypto-papers</strong></a></li>\n<li><a href=\"https://github.com/jbhuang0604/awesome-computer-vision\"><strong>jbhuang0604/awesome-computer-vision</strong></a></li>\n<li><a href=\"https://github.com/ChristosChristofidis/awesome-deep-learning\"><strong>ChristosChristofidis/awesome-deep-learning</strong></a></li>\n<li><a href=\"https://github.com/jtoy/awesome-tensorflow\"><strong>jtoy/awesome-tensorflow</strong></a></li>\n<li><a href=\"https://github.com/aaronhma/awesome-tensorflow-js\"><strong>aaronhma/awesome-tensorflow-js</strong></a></li>\n<li><a href=\"https://github.com/margaretmz/awesome-tensorflow-lite\"><strong>margaretmz/awesome-tensorflow-lite</strong></a></li>\n<li><a href=\"https://github.com/terryum/awesome-deep-learning-papers\"><strong>terryum/awesome-deep-learning-papers</strong></a></li>\n<li><a href=\"https://github.com/guillaume-chevalier/awesome-deep-learning-resources\"><strong>guillaume-chevalier/awesome-deep-learning-resources</strong></a></li>\n<li><a href=\"https://github.com/kjw0612/awesome-deep-vision\"><strong>kjw0612/awesome-deep-vision</strong></a></li>\n<li><a href=\"https://github.com/ossu/computer-science\"><strong>ossu/computer-science</strong></a></li>\n<li><a href=\"https://github.com/lucasviola/awesome-functional-programming\"><strong>lucasviola/awesome-functional-programming</strong></a></li>\n<li><a href=\"https://github.com/dspinellis/awesome-msr\"><strong>dspinellis/awesome-msr</strong></a></li>\n<li><a href=\"https://github.com/analysis-tools-dev/static-analysis\"><strong>analysis-tools-dev/static-analysis</strong></a></li>\n<li><a href=\"https://github.com/harpribot/awesome-information-retrieval\"><strong>harpribot/awesome-information-retrieval</strong></a></li>\n<li><a href=\"https://github.com/desireevl/awesome-quantum-computing\"><strong>desireevl/awesome-quantum-computing</strong></a></li>\n<li><a href=\"https://github.com/mostafatouny/awesome-theoretical-computer-science\"><strong>mostafatouny/awesome-theoretical-computer-science</strong></a></li>\n<li><a href=\"https://github.com/onurakpolat/awesome-bigdata\"><strong>onurakpolat/awesome-bigdata</strong></a></li>\n<li><a href=\"https://github.com/awesomedata/awesome-public-datasets\"><strong>awesomedata/awesome-public-datasets</strong></a></li>\n<li><a href=\"https://github.com/youngwookim/awesome-hadoop\"><strong>youngwookim/awesome-hadoop</strong></a></li>\n<li><a href=\"https://github.com/igorbarinov/awesome-data-engineering\"><strong>igorbarinov/awesome-data-engineering</strong></a></li>\n<li><a href=\"https://github.com/manuzhang/awesome-streaming\"><strong>manuzhang/awesome-streaming</strong></a></li>\n<li><a href=\"https://github.com/awesome-spark/awesome-spark\"><strong>awesome-spark/awesome-spark</strong></a></li>\n<li><a href=\"https://github.com/ambster-public/awesome-qlik\"><strong>ambster-public/awesome-qlik</strong></a></li>\n<li><a href=\"https://github.com/sduff/awesome-splunk\"><strong>sduff/awesome-splunk</strong></a></li>\n<li><a href=\"https://github.com/papers-we-love/papers-we-love\"><strong>papers-we-love/papers-we-love</strong></a></li>\n<li><a href=\"https://github.com/JanVanRyswyck/awesome-talks\"><strong>JanVanRyswyck/awesome-talks</strong></a></li>\n<li><a href=\"https://github.com/tayllan/awesome-algorithms\"><strong>tayllan/awesome-algorithms</strong></a></li>\n<li><a href=\"https://github.com/gaerae/awesome-algorithms-education\"><strong>gaerae/awesome-algorithms-education</strong></a></li>\n<li><a href=\"https://github.com/enjalot/algovis\"><strong>enjalot/algovis</strong></a></li>\n<li><a href=\"https://github.com/owainlewis/awesome-artificial-intelligence\"><strong>owainlewis/awesome-artificial-intelligence</strong></a></li>\n<li><a href=\"https://github.com/marcobiedermann/search-engine-optimization\"><strong>marcobiedermann/search-engine-optimization</strong></a></li>\n<li><a href=\"https://github.com/lnishan/awesome-competitive-programming\"><strong>lnishan/awesome-competitive-programming</strong></a></li>\n<li><a href=\"https://github.com/rossant/awesome-math\"><strong>rossant/awesome-math</strong></a></li>\n<li><a href=\"https://github.com/passy/awesome-recursion-schemes\"><strong>passy/awesome-recursion-schemes</strong></a></li>\n<li><a href=\"https://github.com/EbookFoundation/free-programming-books\"><strong>EbookFoundation/free-programming-books</strong></a></li>\n<li><a href=\"https://github.com/dariubs/GoBooks\"><strong>dariubs/GoBooks</strong></a></li>\n<li><a href=\"https://github.com/RomanTsegelskyi/rbooks\"><strong>RomanTsegelskyi/rbooks</strong></a></li>\n<li><a href=\"https://github.com/hackerkid/Mind-Expanding-Books\"><strong>hackerkid/Mind-Expanding-Books</strong></a></li>\n<li><a href=\"https://github.com/TalAter/awesome-book-authoring\"><strong>TalAter/awesome-book-authoring</strong></a></li>\n<li><a href=\"https://github.com/sger/ElixirBooks\"><strong>sger/ElixirBooks</strong></a></li>\n<li><a href=\"https://github.com/dreikanter/sublime-bookmarks\"><strong>dreikanter/sublime-bookmarks</strong></a></li>\n<li><a href=\"https://github.com/mhinz/vim-galore\"><strong>mhinz/vim-galore</strong></a></li>\n<li><a href=\"https://github.com/emacs-tw/awesome-emacs\"><strong>emacs-tw/awesome-emacs</strong></a></li>\n<li><a href=\"https://github.com/mehcode/awesome-atom\"><strong>mehcode/awesome-atom</strong></a></li>\n<li><a href=\"https://github.com/viatsko/awesome-vscode\"><strong>viatsko/awesome-vscode</strong></a></li>\n<li><a href=\"https://github.com/ellisonleao/magictools\"><strong>ellisonleao/magictools</strong></a></li>\n<li><a href=\"https://github.com/hzoo/awesome-gametalks\"><strong>hzoo/awesome-gametalks</strong></a></li>\n<li><a href=\"https://github.com/godotengine/awesome-godot\"><strong>godotengine/awesome-godot</strong></a></li>\n<li><a href=\"https://github.com/leereilly/games\"><strong>leereilly/games</strong></a></li>\n<li><a href=\"https://github.com/RyanNielson/awesome-unity\"><strong>RyanNielson/awesome-unity</strong></a></li>\n<li><a href=\"https://github.com/hkirat/awesome-chess\"><strong>hkirat/awesome-chess</strong></a></li>\n<li><a href=\"https://github.com/love2d-community/awesome-love2d\"><strong>love2d-community/awesome-love2d</strong></a></li>\n<li><a href=\"https://github.com/pico-8/awesome-PICO-8\"><strong>pico-8/awesome-PICO-8</strong></a></li>\n<li><a href=\"https://github.com/gbdev/awesome-gbdev\"><strong>gbdev/awesome-gbdev</strong></a></li>\n<li><a href=\"https://github.com/WebCreationClub/awesome-construct\"><strong>WebCreationClub/awesome-construct</strong></a></li>\n<li><a href=\"https://github.com/stetso/awesome-gideros\"><strong>stetso/awesome-gideros</strong></a></li>\n<li><a href=\"https://github.com/bs-community/awesome-minecraft\"><strong>bs-community/awesome-minecraft</strong></a></li>\n<li><a href=\"https://github.com/leomaurodesenv/game-datasets\"><strong>leomaurodesenv/game-datasets</strong></a></li>\n<li><a href=\"https://github.com/Dvergar/awesome-haxe-gamedev\"><strong>Dvergar/awesome-haxe-gamedev</strong></a></li>\n<li><a href=\"https://github.com/rafaskb/awesome-libgdx\"><strong>rafaskb/awesome-libgdx</strong></a></li>\n<li><a href=\"https://github.com/playcanvas/awesome-playcanvas\"><strong>playcanvas/awesome-playcanvas</strong></a></li>\n<li><a href=\"https://github.com/radek-sprta/awesome-game-remakes\"><strong>radek-sprta/awesome-game-remakes</strong></a></li>\n<li><a href=\"https://github.com/flame-engine/awesome-flame\"><strong>flame-engine/awesome-flame</strong></a></li>\n<li><a href=\"https://github.com/mhxion/awesome-discord-communities\"><strong>mhxion/awesome-discord-communities</strong></a></li>\n<li><a href=\"https://github.com/tobiasvl/awesome-chip-8\"><strong>tobiasvl/awesome-chip-8</strong></a></li>\n<li><a href=\"https://github.com/michelpereira/awesome-games-of-coding\"><strong>michelpereira/awesome-games-of-coding</strong></a></li>\n<li><a href=\"https://github.com/sindresorhus/quick-look-plugins\"><strong>sindresorhus/quick-look-plugins</strong></a></li>\n<li><a href=\"https://github.com/jondot/awesome-devenv\"><strong>jondot/awesome-devenv</strong></a></li>\n<li><a href=\"https://github.com/webpro/awesome-dotfiles\"><strong>webpro/awesome-dotfiles</strong></a></li>\n<li><a href=\"https://github.com/alebcay/awesome-shell\"><strong>alebcay/awesome-shell</strong></a></li>\n<li><a href=\"https://github.com/jorgebucaran/awsm.fish\"><strong>jorgebucaran/awsm.fish</strong></a></li>\n<li><a href=\"https://github.com/agarrharr/awesome-cli-apps\"><strong>agarrharr/awesome-cli-apps</strong></a></li>\n<li><a href=\"https://github.com/unixorn/awesome-zsh-plugins\"><strong>unixorn/awesome-zsh-plugins</strong></a></li>\n<li><a href=\"https://github.com/phillipadsmith/awesome-github\"><strong>phillipadsmith/awesome-github</strong></a></li>\n<li><a href=\"https://github.com/stefanbuck/awesome-browser-extensions-for-github\"><strong>stefanbuck/awesome-browser-extensions-for-github</strong></a></li>\n<li><a href=\"https://github.com/tiimgreen/github-cheat-sheet\"><strong>tiimgreen/github-cheat-sheet</strong></a></li>\n<li><a href=\"https://github.com/matchai/awesome-pinned-gists\"><strong>matchai/awesome-pinned-gists</strong></a></li>\n<li><a href=\"https://github.com/arslanbilal/git-cheat-sheet\"><strong>arslanbilal/git-cheat-sheet</strong></a></li>\n<li><a href=\"https://github.com/git-tips/tips\"><strong>git-tips/tips</strong></a></li>\n<li><a href=\"https://github.com/stevemao/awesome-git-addons\"><strong>stevemao/awesome-git-addons</strong></a></li>\n<li><a href=\"https://github.com/compscilauren/awesome-git-hooks\"><strong>compscilauren/awesome-git-hooks</strong></a></li>\n<li><a href=\"https://github.com/moul/awesome-ssh\"><strong>moul/awesome-ssh</strong></a></li>\n<li><a href=\"https://github.com/tvvocold/FOSS-for-Dev\"><strong>tvvocold/FOSS-for-Dev</strong></a></li>\n<li><a href=\"https://github.com/bnb/awesome-hyper\"><strong>bnb/awesome-hyper</strong></a></li>\n<li><a href=\"https://github.com/janikvonrotz/awesome-powershell\"><strong>janikvonrotz/awesome-powershell</strong></a></li>\n<li><a href=\"https://github.com/alfred-workflows/awesome-alfred-workflows\"><strong>alfred-workflows/awesome-alfred-workflows</strong></a></li>\n<li><a href=\"https://github.com/k4m4/terminals-are-sexy\"><strong>k4m4/terminals-are-sexy</strong></a></li>\n<li><a href=\"https://github.com/sdras/awesome-actions\"><strong>sdras/awesome-actions</strong></a></li>\n<li><a href=\"https://github.com/sindresorhus/awesome-scifi\"><strong>sindresorhus/awesome-scifi</strong></a></li>\n<li><a href=\"https://github.com/RichardLitt/awesome-fantasy\"><strong>RichardLitt/awesome-fantasy</strong></a></li>\n<li><a href=\"https://github.com/ayr-ton/awesome-geek-podcasts\"><strong>ayr-ton/awesome-geek-podcasts</strong></a></li>\n<li><a href=\"https://github.com/zudochkin/awesome-newsletters\"><strong>zudochkin/awesome-newsletters</strong></a></li>\n<li><a href=\"https://github.com/victorlaerte/awesome-it-quotes\"><strong>victorlaerte/awesome-it-quotes</strong></a></li>\n<li><a href=\"https://github.com/numetriclabz/awesome-db\"><strong>numetriclabz/awesome-db</strong></a></li>\n<li><a href=\"https://github.com/shlomi-noach/awesome-mysql\"><strong>shlomi-noach/awesome-mysql</strong></a></li>\n<li><a href=\"https://github.com/dahlia/awesome-sqlalchemy\"><strong>dahlia/awesome-sqlalchemy</strong></a></li>\n<li><a href=\"https://github.com/mark-rushakoff/awesome-influxdb\"><strong>mark-rushakoff/awesome-influxdb</strong></a></li>\n<li><a href=\"https://github.com/neueda/awesome-neo4j\"><strong>neueda/awesome-neo4j</strong></a></li>\n<li><a href=\"https://github.com/ramnes/awesome-mongodb\"><strong>ramnes/awesome-mongodb</strong></a></li>\n<li><a href=\"https://github.com/d3viant0ne/awesome-rethinkdb\"><strong>d3viant0ne/awesome-rethinkdb</strong></a></li>\n<li><a href=\"https://github.com/mohataher/awesome-tinkerpop\"><strong>mohataher/awesome-tinkerpop</strong></a></li>\n<li><a href=\"https://github.com/dhamaniasad/awesome-postgres\"><strong>dhamaniasad/awesome-postgres</strong></a></li>\n<li><a href=\"https://github.com/quangv/awesome-couchdb\"><strong>quangv/awesome-couchdb</strong></a></li>\n<li><a href=\"https://github.com/rayokota/awesome-hbase\"><strong>rayokota/awesome-hbase</strong></a></li>\n<li><a href=\"https://github.com/erictleung/awesome-nosql-guides\"><strong>erictleung/awesome-nosql-guides</strong></a></li>\n<li><a href=\"https://github.com/chrislatorres/awesome-contexture\"><strong>chrislatorres/awesome-contexture</strong></a></li>\n<li><a href=\"https://github.com/mgramin/awesome-db-tools\"><strong>mgramin/awesome-db-tools</strong></a></li>\n<li><a href=\"https://github.com/vaticle/typedb-awesome\"><strong>vaticle/typedb-awesome</strong></a></li>\n<li><a href=\"https://github.com/Anant/awesome-cassandra\"><strong>Anant/awesome-cassandra</strong></a></li>\n<li><a href=\"https://github.com/shime/creative-commons-media\"><strong>shime/creative-commons-media</strong></a></li>\n<li><a href=\"https://github.com/brabadu/awesome-fonts\"><strong>brabadu/awesome-fonts</strong></a></li>\n<li><a href=\"https://github.com/chrissimpkins/codeface\"><strong>chrissimpkins/codeface</strong></a></li>\n<li><a href=\"https://github.com/neutraltone/awesome-stock-resources\"><strong>neutraltone/awesome-stock-resources</strong></a></li>\n<li><a href=\"https://github.com/davisonio/awesome-gif\"><strong>davisonio/awesome-gif</strong></a></li>\n<li><a href=\"https://github.com/ciconia/awesome-music\"><strong>ciconia/awesome-music</strong></a></li>\n<li><a href=\"https://github.com/44bits/awesome-opensource-documents\"><strong>44bits/awesome-opensource-documents</strong></a></li>\n<li><a href=\"https://github.com/willianjusten/awesome-audio-visualization\"><strong>willianjusten/awesome-audio-visualization</strong></a></li>\n<li><a href=\"https://github.com/ebu/awesome-broadcasting\"><strong>ebu/awesome-broadcasting</strong></a></li>\n<li><a href=\"https://github.com/Siilwyn/awesome-pixel-art\"><strong>Siilwyn/awesome-pixel-art</strong></a></li>\n<li><a href=\"https://github.com/transitive-bullshit/awesome-ffmpeg\"><strong>transitive-bullshit/awesome-ffmpeg</strong></a></li>\n<li><a href=\"https://github.com/notlmn/awesome-icons\"><strong>notlmn/awesome-icons</strong></a></li>\n<li><a href=\"https://github.com/stingalleman/awesome-audiovisual\"><strong>stingalleman/awesome-audiovisual</strong></a></li>\n<li><a href=\"https://github.com/mfkl/awesome-vlc\"><strong>mfkl/awesome-vlc</strong></a></li>\n<li><a href=\"https://github.com/therebelrobot/awesome-workshopper\"><strong>therebelrobot/awesome-workshopper</strong></a></li>\n<li><a href=\"https://github.com/karlhorky/learn-to-program\"><strong>karlhorky/learn-to-program</strong></a></li>\n<li><a href=\"https://github.com/matteofigus/awesome-speaking\"><strong>matteofigus/awesome-speaking</strong></a></li>\n<li><a href=\"https://github.com/lucasviola/awesome-tech-videos\"><strong>lucasviola/awesome-tech-videos</strong></a></li>\n<li><a href=\"https://github.com/hangtwenty/dive-into-machine-learning\"><strong>hangtwenty/dive-into-machine-learning</strong></a></li>\n<li><a href=\"https://github.com/watson/awesome-computer-history\"><strong>watson/awesome-computer-history</strong></a></li>\n<li><a href=\"https://github.com/HollyAdele/awesome-programming-for-kids\"><strong>HollyAdele/awesome-programming-for-kids</strong></a></li>\n<li><a href=\"https://github.com/yrgo/awesome-educational-games\"><strong>yrgo/awesome-educational-games</strong></a></li>\n<li><a href=\"https://github.com/micromata/awesome-javascript-learning\"><strong>micromata/awesome-javascript-learning</strong></a></li>\n<li><a href=\"https://github.com/micromata/awesome-css-learning\"><strong>micromata/awesome-css-learning</strong></a></li>\n<li><a href=\"https://github.com/dend/awesome-product-management\"><strong>dend/awesome-product-management</strong></a></li>\n<li><a href=\"https://github.com/liuchong/awesome-roadmaps\"><strong>liuchong/awesome-roadmaps</strong></a></li>\n<li><a href=\"https://github.com/JoseDeFreitas/awesome-youtubers\"><strong>JoseDeFreitas/awesome-youtubers</strong></a></li>\n<li><a href=\"https://github.com/paragonie/awesome-appsec\"><strong>paragonie/awesome-appsec</strong></a></li>\n<li><a href=\"https://github.com/sbilly/awesome-security\"><strong>sbilly/awesome-security</strong></a></li>\n<li><a href=\"https://github.com/apsdehal/awesome-ctf\"><strong>apsdehal/awesome-ctf</strong></a></li>\n<li><a href=\"https://github.com/rshipp/awesome-malware-analysis\"><strong>rshipp/awesome-malware-analysis</strong></a></li>\n<li><a href=\"https://github.com/ashishb/android-security-awesome\"><strong>ashishb/android-security-awesome</strong></a></li>\n<li><a href=\"https://github.com/carpedm20/awesome-hacking\"><strong>carpedm20/awesome-hacking</strong></a></li>\n<li><a href=\"https://github.com/paralax/awesome-honeypots\"><strong>paralax/awesome-honeypots</strong></a></li>\n<li><a href=\"https://github.com/meirwah/awesome-incident-response\"><strong>meirwah/awesome-incident-response</strong></a></li>\n<li><a href=\"https://github.com/jaredthecoder/awesome-vehicle-security\"><strong>jaredthecoder/awesome-vehicle-security</strong></a></li>\n<li><a href=\"https://github.com/qazbnm456/awesome-web-security\"><strong>qazbnm456/awesome-web-security</strong></a></li>\n<li><a href=\"https://github.com/fabacab/awesome-lockpicking\"><strong>fabacab/awesome-lockpicking</strong></a></li>\n<li><a href=\"https://github.com/fabacab/awesome-cybersecurity-blueteam\"><strong>fabacab/awesome-cybersecurity-blueteam</strong></a></li>\n<li><a href=\"https://github.com/cpuu/awesome-fuzzing\"><strong>cpuu/awesome-fuzzing</strong></a></li>\n<li><a href=\"https://github.com/fkie-cad/awesome-embedded-and-iot-security\"><strong>fkie-cad/awesome-embedded-and-iot-security</strong></a></li>\n<li><a href=\"https://github.com/bakke92/awesome-gdpr\"><strong>bakke92/awesome-gdpr</strong></a></li>\n<li><a href=\"https://github.com/TaptuIT/awesome-devsecops\"><strong>TaptuIT/awesome-devsecops</strong></a></li>\n<li><a href=\"https://github.com/umbraco-community/awesome-umbraco\"><strong>umbraco-community/awesome-umbraco</strong></a></li>\n<li><a href=\"https://github.com/refinerycms-contrib/awesome-refinerycms\"><strong>refinerycms-contrib/awesome-refinerycms</strong></a></li>\n<li><a href=\"https://github.com/springload/awesome-wagtail\"><strong>springload/awesome-wagtail</strong></a></li>\n<li><a href=\"https://github.com/drmonkeyninja/awesome-textpattern\"><strong>drmonkeyninja/awesome-textpattern</strong></a></li>\n<li><a href=\"https://github.com/nirgn975/awesome-drupal\"><strong>nirgn975/awesome-drupal</strong></a></li>\n<li><a href=\"https://github.com/craftcms/awesome\"><strong>craftcms/awesome</strong></a></li>\n<li><a href=\"https://github.com/MartinMiles/Awesome-Sitecore\"><strong>MartinMiles/Awesome-Sitecore</strong></a></li>\n<li><a href=\"https://github.com/wernerkrauss/awesome-silverstripe-cms\"><strong>wernerkrauss/awesome-silverstripe-cms</strong></a></li>\n<li><a href=\"https://github.com/Kiloreux/awesome-robotics\"><strong>Kiloreux/awesome-robotics</strong></a></li>\n<li><a href=\"https://github.com/HQarroum/awesome-iot\"><strong>HQarroum/awesome-iot</strong></a></li>\n<li><a href=\"https://github.com/kitspace/awesome-electronics\"><strong>kitspace/awesome-electronics</strong></a></li>\n<li><a href=\"https://github.com/rabschi/awesome-beacon\"><strong>rabschi/awesome-beacon</strong></a></li>\n<li><a href=\"https://github.com/gitfrage/guitarspecs\"><strong>gitfrage/guitarspecs</strong></a></li>\n<li><a href=\"https://github.com/beardicus/awesome-plotters\"><strong>beardicus/awesome-plotters</strong></a></li>\n<li><a href=\"https://github.com/protontypes/awesome-robotic-tooling\"><strong>protontypes/awesome-robotic-tooling</strong></a></li>\n<li><a href=\"https://github.com/szenergy/awesome-lidar\"><strong>szenergy/awesome-lidar</strong></a></li>\n<li><a href=\"https://github.com/opencompany/awesome-open-company\"><strong>opencompany/awesome-open-company</strong></a></li>\n<li><a href=\"https://github.com/mmccaff/PlacesToPostYourStartup\"><strong>mmccaff/PlacesToPostYourStartup</strong></a></li>\n<li><a href=\"https://github.com/domenicosolazzo/awesome-okr\"><strong>domenicosolazzo/awesome-okr</strong></a></li>\n<li><a href=\"https://github.com/LappleApple/awesome-leading-and-managing\"><strong>LappleApple/awesome-leading-and-managing</strong></a></li>\n<li><a href=\"https://github.com/mezod/awesome-indie\"><strong>mezod/awesome-indie</strong></a></li>\n<li><a href=\"https://github.com/cjbarber/ToolsOfTheTrade\"><strong>cjbarber/ToolsOfTheTrade</strong></a></li>\n<li><a href=\"https://github.com/nglgzz/awesome-clean-tech\"><strong>nglgzz/awesome-clean-tech</strong></a></li>\n<li><a href=\"https://github.com/wardley-maps-community/awesome-wardley-maps\"><strong>wardley-maps-community/awesome-wardley-maps</strong></a></li>\n<li><a href=\"https://github.com/RayBB/awesome-social-enterprise\"><strong>RayBB/awesome-social-enterprise</strong></a></li>\n<li><a href=\"https://github.com/kdeldycke/awesome-engineering-team-management\"><strong>kdeldycke/awesome-engineering-team-management</strong></a></li>\n<li><a href=\"https://github.com/agamm/awesome-developer-first\"><strong>agamm/awesome-developer-first</strong></a></li>\n<li><a href=\"https://github.com/kdeldycke/awesome-billing\"><strong>kdeldycke/awesome-billing</strong></a></li>\n<li><a href=\"https://github.com/matiassingers/awesome-slack\"><strong>matiassingers/awesome-slack</strong></a></li>\n<li><a href=\"https://github.com/filipelinhares/awesome-slack\"><strong>filipelinhares/awesome-slack</strong></a></li>\n<li><a href=\"https://github.com/lukasz-madon/awesome-remote-job\"><strong>lukasz-madon/awesome-remote-job</strong></a></li>\n<li><a href=\"https://github.com/jyguyomarch/awesome-productivity\"><strong>jyguyomarch/awesome-productivity</strong></a></li>\n<li><a href=\"https://github.com/tramcar/awesome-job-boards\"><strong>tramcar/awesome-job-boards</strong></a></li>\n<li><a href=\"https://github.com/DopplerHQ/awesome-interview-questions\"><strong>DopplerHQ/awesome-interview-questions</strong></a></li>\n<li><a href=\"https://github.com/joho/awesome-code-review\"><strong>joho/awesome-code-review</strong></a></li>\n<li><a href=\"https://github.com/j0hnm4r5/awesome-creative-technology\"><strong>j0hnm4r5/awesome-creative-technology</strong></a></li>\n<li><a href=\"https://github.com/lodthe/awesome-internships\"><strong>lodthe/awesome-internships</strong></a></li>\n<li><a href=\"https://github.com/sdnds-tw/awesome-sdn\"><strong>sdnds-tw/awesome-sdn</strong></a></li>\n<li><a href=\"https://github.com/briatte/awesome-network-analysis\"><strong>briatte/awesome-network-analysis</strong></a></li>\n<li><a href=\"https://github.com/caesar0301/awesome-pcaptools\"><strong>caesar0301/awesome-pcaptools</strong></a></li>\n<li><a href=\"https://github.com/rtckit/awesome-rtc\"><strong>rtckit/awesome-rtc</strong></a></li>\n<li><a href=\"https://github.com/igorbarinov/awesome-bitcoin\"><strong>igorbarinov/awesome-bitcoin</strong></a></li>\n<li><a href=\"https://github.com/vhpoet/awesome-ripple\"><strong>vhpoet/awesome-ripple</strong></a></li>\n<li><a href=\"https://github.com/machinomy/awesome-non-financial-blockchain\"><strong>machinomy/awesome-non-financial-blockchain</strong></a></li>\n<li><a href=\"https://github.com/tleb/awesome-mastodon\"><strong>tleb/awesome-mastodon</strong></a></li>\n<li><a href=\"https://github.com/ttumiel/Awesome-Ethereum\"><strong>ttumiel/Awesome-Ethereum</strong></a></li>\n<li><a href=\"https://github.com/steven2358/awesome-blockchain-ai\"><strong>steven2358/awesome-blockchain-ai</strong></a></li>\n<li><a href=\"https://github.com/DanailMinchev/awesome-eosio\"><strong>DanailMinchev/awesome-eosio</strong></a></li>\n<li><a href=\"https://github.com/chainstack/awesome-corda\"><strong>chainstack/awesome-corda</strong></a></li>\n<li><a href=\"https://github.com/msmolyakov/awesome-waves\"><strong>msmolyakov/awesome-waves</strong></a></li>\n<li><a href=\"https://github.com/substrate-developer-hub/awesome-substrate\"><strong>substrate-developer-hub/awesome-substrate</strong></a></li>\n<li><a href=\"https://github.com/golemfactory/awesome-golem\"><strong>golemfactory/awesome-golem</strong></a></li>\n<li><a href=\"https://github.com/friedger/awesome-stacks-chain\"><strong>friedger/awesome-stacks-chain</strong></a></li>\n<li><a href=\"https://github.com/eselkin/awesome-computational-neuroscience\"><strong>eselkin/awesome-computational-neuroscience</strong></a></li>\n<li><a href=\"https://github.com/maehr/awesome-digital-history\"><strong>maehr/awesome-digital-history</strong></a></li>\n<li><a href=\"https://github.com/writing-resources/awesome-scientific-writing\"><strong>writing-resources/awesome-scientific-writing</strong></a></li>\n<li><a href=\"https://github.com/danvoyce/awesome-creative-tech-events\"><strong>danvoyce/awesome-creative-tech-events</strong></a></li>\n<li><a href=\"https://github.com/ildoc/awesome-italy-events\"><strong>ildoc/awesome-italy-events</strong></a></li>\n<li><a href=\"https://github.com/awkward/awesome-netherlands-events\"><strong>awkward/awesome-netherlands-events</strong></a></li>\n<li><a href=\"https://github.com/TheJambo/awesome-testing\"><strong>TheJambo/awesome-testing</strong></a></li>\n<li><a href=\"https://github.com/mojoaxel/awesome-regression-testing\"><strong>mojoaxel/awesome-regression-testing</strong></a></li>\n<li><a href=\"https://github.com/christian-bromann/awesome-selenium\"><strong>christian-bromann/awesome-selenium</strong></a></li>\n<li><a href=\"https://github.com/SrinivasanTarget/awesome-appium\"><strong>SrinivasanTarget/awesome-appium</strong></a></li>\n<li><a href=\"https://github.com/sindresorhus/awesome-tap\"><strong>sindresorhus/awesome-tap</strong></a></li>\n<li><a href=\"https://github.com/aliesbelik/awesome-jmeter\"><strong>aliesbelik/awesome-jmeter</strong></a></li>\n<li><a href=\"https://github.com/k6io/awesome-k6\"><strong>k6io/awesome-k6</strong></a></li>\n<li><a href=\"https://github.com/mxschmitt/awesome-playwright\"><strong>mxschmitt/awesome-playwright</strong></a></li>\n<li><a href=\"https://github.com/fityanos/awesome-quality-assurance-roadmap\"><strong>fityanos/awesome-quality-assurance-roadmap</strong></a></li>\n<li><a href=\"https://github.com/burningtree/awesome-json\"><strong>burningtree/awesome-json</strong></a></li>\n<li><a href=\"https://github.com/tmcw/awesome-geojson\"><strong>tmcw/awesome-geojson</strong></a></li>\n<li><a href=\"https://github.com/jdorfman/awesome-json-datasets\"><strong>jdorfman/awesome-json-datasets</strong></a></li>\n<li><a href=\"https://github.com/secretGeek/awesomeCSV\"><strong>secretGeek/awesomeCSV</strong></a></li>\n<li><a href=\"https://github.com/AchoArnold/discount-for-student-dev\"><strong>AchoArnold/discount-for-student-dev</strong></a></li>\n<li><a href=\"https://github.com/kyleterry/awesome-radio\"><strong>kyleterry/awesome-radio</strong></a></li>\n<li><a href=\"https://github.com/sindresorhus/awesome\"><strong>sindresorhus/awesome</strong></a></li>\n<li><a href=\"https://github.com/onurakpolat/awesome-analytics\"><strong>onurakpolat/awesome-analytics</strong></a></li>\n<li><a href=\"https://github.com/marmelab/awesome-rest\"><strong>marmelab/awesome-rest</strong></a></li>\n<li><a href=\"https://github.com/cicdops/awesome-ciandcd\"><strong>cicdops/awesome-ciandcd</strong></a></li>\n<li><a href=\"https://github.com/mmcgrana/services-engineering\"><strong>mmcgrana/services-engineering</strong></a></li>\n<li><a href=\"https://github.com/ripienaar/free-for-dev\"><strong>ripienaar/free-for-dev</strong></a></li>\n<li><a href=\"https://github.com/cyberglot/awesome-answers\"><strong>cyberglot/awesome-answers</strong></a></li>\n<li><a href=\"https://github.com/diessica/awesome-sketch\"><strong>diessica/awesome-sketch</strong></a></li>\n<li><a href=\"https://github.com/melvin0008/awesome-projects-boilerplates\"><strong>melvin0008/awesome-projects-boilerplates</strong></a></li>\n<li><a href=\"https://github.com/matiassingers/awesome-readme\"><strong>matiassingers/awesome-readme</strong></a></li>\n<li><a href=\"https://github.com/NARKOZ/guides\"><strong>NARKOZ/guides</strong></a></li>\n<li><a href=\"https://github.com/kilimchoi/engineering-blogs\"><strong>kilimchoi/engineering-blogs</strong></a></li>\n<li><a href=\"https://github.com/awesome-selfhosted/awesome-selfhosted\"><strong>awesome-selfhosted/awesome-selfhosted</strong></a></li>\n<li><a href=\"https://github.com/DataDaoDe/awesome-foss-apps\"><strong>DataDaoDe/awesome-foss-apps</strong></a></li>\n<li><a href=\"https://github.com/alferov/awesome-gulp\"><strong>alferov/awesome-gulp</strong></a></li>\n<li><a href=\"https://github.com/sindresorhus/amas\"><strong>sindresorhus/amas</strong></a></li>\n<li><a href=\"https://github.com/stoeffel/awesome-ama-answers\"><strong>stoeffel/awesome-ama-answers</strong></a></li>\n<li><a href=\"https://github.com/ibaaj/awesome-OpenSourcePhotography\"><strong>ibaaj/awesome-OpenSourcePhotography</strong></a></li>\n<li><a href=\"https://github.com/eug/awesome-opengl\"><strong>eug/awesome-opengl</strong></a></li>\n<li><a href=\"https://github.com/chentsulin/awesome-graphql\"><strong>chentsulin/awesome-graphql</strong></a></li>\n<li><a href=\"https://github.com/APA-Technology-Division/urban-and-regional-planning-resources\"><strong>APA-Technology-Division/urban-and-regional-planning-resources</strong></a></li>\n<li><a href=\"https://github.com/CUTR-at-USF/awesome-transit\"><strong>CUTR-at-USF/awesome-transit</strong></a></li>\n<li><a href=\"https://github.com/emptymalei/awesome-research\"><strong>emptymalei/awesome-research</strong></a></li>\n<li><a href=\"https://github.com/fasouto/awesome-dataviz\"><strong>fasouto/awesome-dataviz</strong></a></li>\n<li><a href=\"https://github.com/vinkla/shareable-links\"><strong>vinkla/shareable-links</strong></a></li>\n<li><a href=\"https://github.com/mfornos/awesome-microservices\"><strong>mfornos/awesome-microservices</strong></a></li>\n<li><a href=\"https://github.com/jagracey/Awesome-Unicode\"><strong>jagracey/Awesome-Unicode</strong></a></li>\n<li><a href=\"https://github.com/Codepoints/awesome-codepoints\"><strong>Codepoints/awesome-codepoints</strong></a></li>\n<li><a href=\"https://github.com/MunGell/awesome-for-beginners\"><strong>MunGell/awesome-for-beginners</strong></a></li>\n<li><a href=\"https://github.com/gamontal/awesome-katas\"><strong>gamontal/awesome-katas</strong></a></li>\n<li><a href=\"https://github.com/drewrwilson/toolsforactivism\"><strong>drewrwilson/toolsforactivism</strong></a></li>\n<li><a href=\"https://github.com/dylanrees/citizen-science\"><strong>dylanrees/citizen-science</strong></a></li>\n<li><a href=\"https://github.com/hobbyquaker/awesome-mqtt\"><strong>hobbyquaker/awesome-mqtt</strong></a></li>\n<li><a href=\"https://github.com/daviddias/awesome-hacking-locations\"><strong>daviddias/awesome-hacking-locations</strong></a></li>\n<li><a href=\"https://github.com/cristianoliveira/awesome4girls\"><strong>cristianoliveira/awesome4girls</strong></a></li>\n<li><a href=\"https://github.com/vorpaljs/awesome-vorpal\"><strong>vorpaljs/awesome-vorpal</strong></a></li>\n<li><a href=\"https://github.com/vinjn/awesome-vulkan\"><strong>vinjn/awesome-vulkan</strong></a></li>\n<li><a href=\"https://github.com/egeerardyn/awesome-LaTeX\"><strong>egeerardyn/awesome-LaTeX</strong></a></li>\n<li><a href=\"https://github.com/antontarasenko/awesome-economics\"><strong>antontarasenko/awesome-economics</strong></a></li>\n<li><a href=\"https://github.com/sublimino/awesome-funny-markov\"><strong>sublimino/awesome-funny-markov</strong></a></li>\n<li><a href=\"https://github.com/danielecook/Awesome-Bioinformatics\"><strong>danielecook/Awesome-Bioinformatics</strong></a></li>\n<li><a href=\"https://github.com/hsiaoyi0504/awesome-cheminformatics\"><strong>hsiaoyi0504/awesome-cheminformatics</strong></a></li>\n<li><a href=\"https://github.com/Siddharth11/Colorful\"><strong>Siddharth11/Colorful</strong></a></li>\n<li><a href=\"https://github.com/scholtzm/awesome-steam\"><strong>scholtzm/awesome-steam</strong></a></li>\n<li><a href=\"https://github.com/hackerkid/bots\"><strong>hackerkid/bots</strong></a></li>\n<li><a href=\"https://github.com/dastergon/awesome-sre\"><strong>dastergon/awesome-sre</strong></a></li>\n<li><a href=\"https://github.com/KimberlyMunoz/empathy-in-engineering\"><strong>KimberlyMunoz/empathy-in-engineering</strong></a></li>\n<li><a href=\"https://github.com/xen0l/awesome-dtrace\"><strong>xen0l/awesome-dtrace</strong></a></li>\n<li><a href=\"https://github.com/bvolpato/awesome-userscripts\"><strong>bvolpato/awesome-userscripts</strong></a></li>\n<li><a href=\"https://github.com/tobiasbueschel/awesome-pokemon\"><strong>tobiasbueschel/awesome-pokemon</strong></a></li>\n<li><a href=\"https://github.com/exAspArk/awesome-chatops\"><strong>exAspArk/awesome-chatops</strong></a></li>\n<li><a href=\"https://github.com/kdeldycke/awesome-falsehood\"><strong>kdeldycke/awesome-falsehood</strong></a></li>\n<li><a href=\"https://github.com/heynickc/awesome-ddd\"><strong>heynickc/awesome-ddd</strong></a></li>\n<li><a href=\"https://github.com/woop/awesome-quantified-self\"><strong>woop/awesome-quantified-self</strong></a></li>\n<li><a href=\"https://github.com/hbokh/awesome-saltstack\"><strong>hbokh/awesome-saltstack</strong></a></li>\n<li><a href=\"https://github.com/nicolesaidy/awesome-web-design\"><strong>nicolesaidy/awesome-web-design</strong></a></li>\n<li><a href=\"https://github.com/terkelg/awesome-creative-coding\"><strong>terkelg/awesome-creative-coding</strong></a></li>\n<li><a href=\"https://github.com/aviaryan/awesome-no-login-web-apps\"><strong>aviaryan/awesome-no-login-web-apps</strong></a></li>\n<li><a href=\"https://github.com/johnjago/awesome-free-software\"><strong>johnjago/awesome-free-software</strong></a></li>\n<li><a href=\"https://github.com/podo/awesome-framer\"><strong>podo/awesome-framer</strong></a></li>\n<li><a href=\"https://github.com/BubuAnabelas/awesome-markdown\"><strong>BubuAnabelas/awesome-markdown</strong></a></li>\n<li><a href=\"https://github.com/mislavcimpersak/awesome-dev-fun\"><strong>mislavcimpersak/awesome-dev-fun</strong></a></li>\n<li><a href=\"https://github.com/kakoni/awesome-healthcare\"><strong>kakoni/awesome-healthcare</strong></a></li>\n<li><a href=\"https://github.com/DavidLambauer/awesome-magento2\"><strong>DavidLambauer/awesome-magento2</strong></a></li>\n<li><a href=\"https://github.com/xiaohanyu/awesome-tikz\"><strong>xiaohanyu/awesome-tikz</strong></a></li>\n<li><a href=\"https://github.com/analyticalmonk/awesome-neuroscience\"><strong>analyticalmonk/awesome-neuroscience</strong></a></li>\n<li><a href=\"https://github.com/johnjago/awesome-ad-free\"><strong>johnjago/awesome-ad-free</strong></a></li>\n<li><a href=\"https://github.com/angrykoala/awesome-esolangs\"><strong>angrykoala/awesome-esolangs</strong></a></li>\n<li><a href=\"https://github.com/roaldnefs/awesome-prometheus\"><strong>roaldnefs/awesome-prometheus</strong></a></li>\n<li><a href=\"https://github.com/homematic-community/awesome-homematic\"><strong>homematic-community/awesome-homematic</strong></a></li>\n<li><a href=\"https://github.com/sfischer13/awesome-ledger\"><strong>sfischer13/awesome-ledger</strong></a></li>\n<li><a href=\"https://github.com/thomasbnt/awesome-web-monetization\"><strong>thomasbnt/awesome-web-monetization</strong></a></li>\n<li><a href=\"https://github.com/johnjago/awesome-uncopyright\"><strong>johnjago/awesome-uncopyright</strong></a></li>\n<li><a href=\"https://github.com/Zheaoli/awesome-coins\"><strong>Zheaoli/awesome-coins</strong></a></li>\n<li><a href=\"https://github.com/folkswhocode/awesome-diversity\"><strong>folkswhocode/awesome-diversity</strong></a></li>\n<li><a href=\"https://github.com/zachflower/awesome-open-source-supporters\"><strong>zachflower/awesome-open-source-supporters</strong></a></li>\n<li><a href=\"https://github.com/robinstickel/awesome-design-principles\"><strong>robinstickel/awesome-design-principles</strong></a></li>\n<li><a href=\"https://github.com/johnjago/awesome-theravada\"><strong>johnjago/awesome-theravada</strong></a></li>\n<li><a href=\"https://github.com/inspectit-labs/awesome-inspectit\"><strong>inspectit-labs/awesome-inspectit</strong></a></li>\n<li><a href=\"https://github.com/nayafia/awesome-maintainers\"><strong>nayafia/awesome-maintainers</strong></a></li>\n<li><a href=\"https://github.com/xxczaki/awesome-calculators\"><strong>xxczaki/awesome-calculators</strong></a></li>\n<li><a href=\"https://github.com/ZYSzys/awesome-captcha\"><strong>ZYSzys/awesome-captcha</strong></a></li>\n<li><a href=\"https://github.com/markusschanta/awesome-jupyter\"><strong>markusschanta/awesome-jupyter</strong></a></li>\n<li><a href=\"https://github.com/andrewda/awesome-frc\"><strong>andrewda/awesome-frc</strong></a></li>\n<li><a href=\"https://github.com/humanetech-community/awesome-humane-tech\"><strong>humanetech-community/awesome-humane-tech</strong></a></li>\n<li><a href=\"https://github.com/karlhorky/awesome-speakers\"><strong>karlhorky/awesome-speakers</strong></a></li>\n<li><a href=\"https://github.com/edm00se/awesome-board-games\"><strong>edm00se/awesome-board-games</strong></a></li>\n<li><a href=\"https://github.com/uraimo/awesome-software-patreons\"><strong>uraimo/awesome-software-patreons</strong></a></li>\n<li><a href=\"https://github.com/ecohealthalliance/awesome-parasite\"><strong>ecohealthalliance/awesome-parasite</strong></a></li>\n<li><a href=\"https://github.com/jzarca01/awesome-food\"><strong>jzarca01/awesome-food</strong></a></li>\n<li><a href=\"https://github.com/dreamingechoes/awesome-mental-health\"><strong>dreamingechoes/awesome-mental-health</strong></a></li>\n<li><a href=\"https://github.com/alexk111/awesome-bitcoin-payment-processors\"><strong>alexk111/awesome-bitcoin-payment-processors</strong></a></li>\n<li><a href=\"https://github.com/nschloe/awesome-scientific-computing\"><strong>nschloe/awesome-scientific-computing</strong></a></li>\n<li><a href=\"https://github.com/ScaleLeap/awesome-amazon-seller\"><strong>ScaleLeap/awesome-amazon-seller</strong></a></li>\n<li><a href=\"https://github.com/brycejohnston/awesome-agriculture\"><strong>brycejohnston/awesome-agriculture</strong></a></li>\n<li><a href=\"https://github.com/matttga/awesome-product-design\"><strong>matttga/awesome-product-design</strong></a></li>\n<li><a href=\"https://github.com/catalinmiron/awesome-prisma\"><strong>catalinmiron/awesome-prisma</strong></a></li>\n<li><a href=\"https://github.com/simskij/awesome-software-architecture\"><strong>simskij/awesome-software-architecture</strong></a></li>\n<li><a href=\"https://github.com/stevesong/awesome-connectivity-info\"><strong>stevesong/awesome-connectivity-info</strong></a></li>\n<li><a href=\"https://github.com/stackshareio/awesome-stacks\"><strong>stackshareio/awesome-stacks</strong></a></li>\n<li><a href=\"https://github.com/cytodata/awesome-cytodata\"><strong>cytodata/awesome-cytodata</strong></a></li>\n<li><a href=\"https://github.com/davisonio/awesome-irc\"><strong>davisonio/awesome-irc</strong></a></li>\n<li><a href=\"https://github.com/cenoura/awesome-ads\"><strong>cenoura/awesome-ads</strong></a></li>\n<li><a href=\"https://github.com/philsturgeon/awesome-earth\"><strong>philsturgeon/awesome-earth</strong></a></li>\n<li><a href=\"https://github.com/gruhn/awesome-naming\"><strong>gruhn/awesome-naming</strong></a></li>\n<li><a href=\"https://github.com/caufieldjh/awesome-bioie\"><strong>caufieldjh/awesome-bioie</strong></a></li>\n<li><a href=\"https://github.com/iipc/awesome-web-archiving\"><strong>iipc/awesome-web-archiving</strong></a></li>\n<li><a href=\"https://github.com/schlessera/awesome-wp-cli\"><strong>schlessera/awesome-wp-cli</strong></a></li>\n<li><a href=\"https://github.com/mourarthur/awesome-credit-modeling\"><strong>mourarthur/awesome-credit-modeling</strong></a></li>\n<li><a href=\"https://github.com/KeyboardInterrupt/awesome-ansible\"><strong>KeyboardInterrupt/awesome-ansible</strong></a></li>\n<li><a href=\"https://github.com/keller-mark/awesome-biological-visualizations\"><strong>keller-mark/awesome-biological-visualizations</strong></a></li>\n<li><a href=\"https://github.com/aureooms/awesome-qr-code\"><strong>aureooms/awesome-qr-code</strong></a></li>\n<li><a href=\"https://github.com/sdassow/awesome-veganism\"><strong>sdassow/awesome-veganism</strong></a></li>\n<li><a href=\"https://github.com/mbiesiad/awesome-translations\"><strong>mbiesiad/awesome-translations</strong></a></li>\n<li><a href=\"https://github.com/dersvenhesse/awesome-scriptable\"><strong>dersvenhesse/awesome-scriptable</strong></a></li>\n<li><a href=\"https://github.com/topics/awesome\"><strong>topics/awesome</strong></a></li>\n<li><a href=\"https://awesome-indexed.mathew-davies.co.uk\"><strong>https://awesome-indexed.mathew-davies.co.uk</strong></a></li>\n<li><a href=\"https://awesomelists.top\"><strong>https://awesomelists.top</strong></a></li>\n<li><a href=\"https://github.com/basharovV/StumbleUponAwesome\"><strong>basharovV/StumbleUponAwesome</strong></a></li>\n<li><a href=\"https://github.com/umutphp/awesome-cli\"><strong>umutphp/awesome-cli</strong></a></li>\n<li><a href=\"http://awesome.digitalbunker.dev\"><strong>http://awesome.digitalbunker.dev</strong></a></li>\n<li><a href=\"https://www.trackawesomelist.com\"><strong>https://www.trackawesomelist.com</strong></a></li>\n</ul>"},{"url":"/docs/python/snippets/","relativePath":"docs/python/snippets.md","relativeDir":"docs/python","base":"snippets.md","name":"snippets","frontmatter":{"title":"Python Snippets","weight":0,"excerpt":"Snippets","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>Python Snippets</h1>\n<hr>\n<hr>\n<h3>Calculates the date of <code>n</code> days from the given date.</h3>\n<ul>\n<li>Use <code>datetime.timedelta</code> and the <code>+</code> operator to calculate the new <code>datetime.datetime</code> value after adding <code>n</code> days to <code>d</code>.</li>\n<li>Omit the second argument, <code>d</code>, to use a default value of <code>datetime.today()</code>.</li>\n</ul>\n<pre><code class=\"language-py\">from datetime import datetime, timedelta\n\ndef add_days(n, d = datetime.today()):\n  return d + timedelta(n)\n</code></pre>\n<pre><code class=\"language-py\">from datetime import date\n\nadd_days(5, date(2020, 10, 25)) # date(2020, 10, 30)\nadd_days(-5, date(2020, 10, 25)) # date(2020, 10, 20)\n</code></pre>\n<hr>\n<hr>\n<h3>Checks if all elements in a list are equal.</h3>\n<ul>\n<li>Use <code>set()</code> to eliminate duplicate elements and then use <code>len()</code> to check if length is <code>1</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def all_equal(lst):\n  return len(set(lst)) == 1\n</code></pre>\n<pre><code class=\"language-py\">all_equal([1, 2, 3, 4, 5, 6]) # False\nall_equal([1, 1, 1, 1]) # True\n</code></pre>\n<hr>\n<hr>\n<h3>Checks if all the values in a list are unique.</h3>\n<ul>\n<li>Use <code>set()</code> on the given list to keep only unique occurrences.</li>\n<li>Use <code>len()</code> to compare the length of the unique values to the original list.</li>\n</ul>\n<pre><code class=\"language-py\">def all_unique(lst):\n  return len(lst) == len(set(lst))\n</code></pre>\n<pre><code class=\"language-py\">x = [1, 2, 3, 4, 5, 6]\ny = [1, 2, 2, 3, 4, 5]\nall_unique(x) # True\nall_unique(y) # False\n</code></pre>\n<hr>\n<hr>\n<h3>Generates a list of numbers in the arithmetic progression starting with the given positive integer and up to the specified limit.</h3>\n<ul>\n<li>Use <code>range()</code> and <code>list()</code> with the appropriate start, step and end values.</li>\n</ul>\n<pre><code class=\"language-py\">def arithmetic_progression(n, lim):\n  return list(range(n, lim + 1, n))\n</code></pre>\n<pre><code class=\"language-py\">arithmetic_progression(5, 25) # [5, 10, 15, 20, 25]\n</code></pre>\n<hr>\n<hr>\n<h3>Calculates the average of two or more numbers.</h3>\n<ul>\n<li>Use <code>sum()</code> to sum all of the <code>args</code> provided, divide by <code>len()</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def average(*args):\n  return sum(args, 0.0) / len(args)\n</code></pre>\n<pre><code class=\"language-py\">average(*[1, 2, 3]) # 2.0\naverage(1, 2, 3) # 2.0\n</code></pre>\n<hr>\n<hr>\n<h3>Calculates the average of a list, after mapping each element to a value using the provided function.</h3>\n<ul>\n<li>Use <code>map()</code> to map each element to the value returned by <code>fn</code>.</li>\n<li>Use <code>sum()</code> to sum all of the mapped values, divide by <code>len(lst)</code>.</li>\n<li>Omit the last argument, <code>fn</code>, to use the default identity function.</li>\n</ul>\n<pre><code class=\"language-py\">def average_by(lst, fn = lambda x: x):\n  return sum(map(fn, lst), 0.0) / len(lst)\n</code></pre>\n<pre><code class=\"language-py\">average_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda x: x['n'])\n# 5.0\n</code></pre>\n<hr>\n<hr>\n<h3>Splits values into two groups, based on the result of the given <code>filter</code> list.</h3>\n<ul>\n<li>Use a list comprehension and <code>zip()</code> to add elements to groups, based on <code>filter</code>.</li>\n<li>If <code>filter</code> has a truthy value for any element, add it to the first group, otherwise add it to the second group.</li>\n</ul>\n<pre><code class=\"language-py\">def bifurcate(lst, filter):\n  return [\n    [x for x, flag in zip(lst, filter) if flag],\n    [x for x, flag in zip(lst, filter) if not flag]\n  ]\n</code></pre>\n<pre><code class=\"language-py\">bifurcate(['beep', 'boop', 'foo', 'bar'], [True, True, False, True])\n# [ ['beep', 'boop', 'bar'], ['foo'] ]\n</code></pre>\n<hr>\n<hr>\n<h3>Splits values into two groups, based on the result of the given filtering function.</h3>\n<ul>\n<li>Use a list comprehension to add elements to groups, based on the value returned by <code>fn</code> for each element.</li>\n<li>If <code>fn</code> returns a truthy value for any element, add it to the first group, otherwise add it to the second group.</li>\n</ul>\n<pre><code class=\"language-py\">def bifurcate_by(lst, fn):\n  return [\n    [x for x in lst if fn(x)],\n    [x for x in lst if not fn(x)]\n  ]\n</code></pre>\n<pre><code class=\"language-py\">bifurcate_by(['beep', 'boop', 'foo', 'bar'], lambda x: x[0] == 'b')\n# [ ['beep', 'boop', 'bar'], ['foo'] ]\n</code></pre>\n<hr>\n<hr>\n<h3>Calculates the number of ways to choose <code>k</code> items from <code>n</code> items without repetition and without order.</h3>\n<ul>\n<li>Use <code>math.comb()</code> to calculate the binomial coefficient.</li>\n</ul>\n<pre><code class=\"language-py\">from math import comb\n\ndef binomial_coefficient(n, k):\n  return comb(n, k)\n</code></pre>\n<pre><code class=\"language-py\">binomial_coefficient(8, 2) # 28\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the length of a string in bytes.</h3>\n<ul>\n<li>Use <code>str.encode('utf-8')</code> to encode the given string and return its length.</li>\n</ul>\n<pre><code class=\"language-py\">def byte_size(s):\n  return len(s.encode('utf-8'))\n</code></pre>\n<pre><code class=\"language-py\">byte_size('😀') # 4\nbyte_size('Hello World') # 11\n</code></pre>\n<hr>\n<hr>\n<h3>Converts a string to camelcase.</h3>\n<ul>\n<li>Use <code>re.sub()</code> to replace any <code>-</code> or <code>_</code> with a space, using the regexp <code>r\"(_|-)+\"</code>.</li>\n<li>Use <code>str.title()</code> to capitalize the first letter of each word and convert the rest to lowercase.</li>\n<li>Finally, use <code>str.replace()</code> to remove spaces between words.</li>\n</ul>\n<pre><code class=\"language-py\">from re import sub\n\ndef camel(s):\n  s = sub(r\"(_|-)+\", \" \", s).title().replace(\" \", \"\")\n  return ''.join([s[0].lower(), s[1:]])\n</code></pre>\n<pre><code class=\"language-py\">camel('some_database_field_name') # 'someDatabaseFieldName'\ncamel('Some label that needs to be camelized')\n# 'someLabelThatNeedsToBeCamelized'\ncamel('some-javascript-property') # 'someJavascriptProperty'\ncamel('some-mixed_string with spaces_underscores-and-hyphens')\n# 'someMixedStringWithSpacesUnderscoresAndHyphens'\n</code></pre>\n<hr>\n<hr>\n<h3>Capitalizes the first letter of a string.</h3>\n<ul>\n<li>Use list slicing and <code>str.upper()</code> to capitalize the first letter of the string.</li>\n<li>Use <code>str.join()</code> to combine the capitalized first letter with the rest of the characters.</li>\n<li>Omit the <code>lower_rest</code> parameter to keep the rest of the string intact, or set it to <code>True</code> to convert to lowercase.</li>\n</ul>\n<pre><code class=\"language-py\">def capitalize(s, lower_rest = False):\n  return ''.join([s[:1].upper(), (s[1:].lower() if lower_rest else s[1:])])\n</code></pre>\n<pre><code class=\"language-py\">capitalize('fooBar') # 'FooBar'\ncapitalize('fooBar', True) # 'Foobar'\n</code></pre>\n<hr>\n<hr>\n<h3>Capitalizes the first letter of every word in a string.</h3>\n<ul>\n<li>Use <code>str.title()</code> to capitalize the first letter of every word in the string.</li>\n</ul>\n<pre><code class=\"language-py\">def capitalize_every_word(s):\n  return s.title()\n</code></pre>\n<pre><code class=\"language-py\">capitalize_every_word('hello world!') # 'Hello World!'\n</code></pre>\n<hr>\n<hr>\n<h3>Casts the provided value as a list if it's not one.</h3>\n<ul>\n<li>Use <code>isinstance()</code> to check if the given value is enumerable.</li>\n<li>Return it by using <code>list()</code> or encapsulated in a list accordingly.</li>\n</ul>\n<pre><code class=\"language-py\">def cast_list(val):\n  return list(val) if isinstance(val, (tuple, list, set, dict)) else [val]\n</code></pre>\n<pre><code class=\"language-py\">cast_list('foo') # ['foo']\ncast_list([1]) # [1]\ncast_list(('foo', 'bar')) # ['foo', 'bar']\n</code></pre>\n<hr>\n<h2>unlisted: true</h2>\n<p>Converts Celsius to Fahrenheit.</p>\n<ul>\n<li>Follow the conversion formula <code>F = 1.8 * C + 32</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def celsius_to_fahrenheit(degrees):\n  return ((degrees * 1.8) + 32)\n</code></pre>\n<pre><code class=\"language-py\">celsius_to_fahrenheit(180) # 356.0\n</code></pre>\n<hr>\n<hr>\n<h3>Creates a function that will invoke a predicate function for the specified property on a given object.</h3>\n<ul>\n<li>Return a <code>lambda</code> function that takes an object and applies the predicate function, <code>fn</code> to the specified property.</li>\n</ul>\n<pre><code class=\"language-py\">def check_prop(fn, prop):\n  return lambda obj: fn(obj[prop])\n</code></pre>\n<pre><code class=\"language-py\">check_age = check_prop(lambda x: x >= 18, 'age')\nuser = {'name': 'Mark', 'age': 18}\ncheck_age(user) # True\n</code></pre>\n<hr>\n<hr>\n<h3>Chunks a list into smaller lists of a specified size.</h3>\n<ul>\n<li>Use <code>list()</code> and <code>range()</code> to create a list of the desired <code>size</code>.</li>\n<li>Use <code>map()</code> on the list and fill it with splices of the given list.</li>\n<li>Finally, return the created list.</li>\n</ul>\n<pre><code class=\"language-py\">from math import ceil\n\ndef chunk(lst, size):\n  return list(\n    map(lambda x: lst[x * size:x * size + size],\n      list(range(ceil(len(lst) / size)))))\n</code></pre>\n<pre><code class=\"language-py\">chunk([1, 2, 3, 4, 5], 2) # [[1, 2], [3, 4], [5]]\n</code></pre>\n<hr>\n<hr>\n<h3>Chunks a list into <code>n</code> smaller lists.</h3>\n<ul>\n<li>Use <code>math.ceil()</code> and <code>len()</code> to get the size of each chunk.</li>\n<li>Use <code>list()</code> and <code>range()</code> to create a new list of size <code>n</code>.</li>\n<li>Use <code>map()</code> to map each element of the new list to a chunk the length of <code>size</code>.</li>\n<li>If the original list can't be split evenly, the final chunk will contain the remaining elements.</li>\n</ul>\n<pre><code class=\"language-py\">from math import ceil\n\ndef chunk_into_n(lst, n):\n  size = ceil(len(lst) / n)\n  return list(\n    map(lambda x: lst[x * size:x * size + size],\n    list(range(n)))\n  )\n</code></pre>\n<pre><code class=\"language-py\">chunk_into_n([1, 2, 3, 4, 5, 6, 7], 4) # [[1, 2], [3, 4], [5, 6], [7]]\n</code></pre>\n<hr>\n<hr>\n<h3>Clamps <code>num</code> within the inclusive range specified by the boundary values.</h3>\n<ul>\n<li>If <code>num</code> falls within the range (<code>a</code>, <code>b</code>), return <code>num</code>.</li>\n<li>Otherwise, return the nearest number in the range.</li>\n</ul>\n<pre><code class=\"language-py\">def clamp_number(num, a, b):\n  return max(min(num, max(a, b)), min(a, b))\n</code></pre>\n<pre><code class=\"language-py\">clamp_number(2, 3, 5) # 3\nclamp_number(1, -1, -5) # -1\n</code></pre>\n<hr>\n<hr>\n<h3>Inverts a dictionary with non-unique hashable values.</h3>\n<ul>\n<li>Create a <code>collections.defaultdict</code> with <code>list</code> as the default value for each key.</li>\n<li>Use <code>dictionary.items()</code> in combination with a loop to map the values of the dictionary to keys using <code>dict.append()</code>.</li>\n<li>Use <code>dict()</code> to convert the <code>collections.defaultdict</code> to a regular dictionary.</li>\n</ul>\n<pre><code class=\"language-py\">from collections import defaultdict\n\ndef collect_dictionary(obj):\n  inv_obj = defaultdict(list)\n  for key, value in obj.items():\n    inv_obj[value].append(key)\n  return dict(inv_obj)\n</code></pre>\n<pre><code class=\"language-py\">ages = {\n  'Peter': 10,\n  'Isabel': 10,\n  'Anna': 9,\n}\ncollect_dictionary(ages) # { 10: ['Peter', 'Isabel'], 9: ['Anna'] }\n</code></pre>\n<hr>\n<hr>\n<h3>Combines two or more dictionaries, creating a list of values for each key.</h3>\n<ul>\n<li>Create a new <code>collections.defaultdict</code> with <code>list</code> as the default value for each key and loop over <code>dicts</code>.</li>\n<li>Use <code>dict.append()</code> to map the values of the dictionary to keys.</li>\n<li>Use <code>dict()</code> to convert the <code>collections.defaultdict</code> to a regular dictionary.</li>\n</ul>\n<pre><code class=\"language-py\">from collections import defaultdict\n\ndef combine_values(*dicts):\n  res = defaultdict(list)\n  for d in dicts:\n    for key in d:\n      res[key].append(d[key])\n  return dict(res)\n</code></pre>\n<pre><code class=\"language-py\">d1 = {'a': 1, 'b': 'foo', 'c': 400}\nd2 = {'a': 3, 'b': 200, 'd': 400}\n\ncombine_values(d1, d2) # {'a': [1, 3], 'b': ['foo', 200], 'c': [400], 'd': [400]}\n</code></pre>\n<hr>\n<hr>\n<h3>Removes falsy values from a list.</h3>\n<ul>\n<li>Use <code>filter()</code> to filter out falsy values (<code>False</code>, <code>None</code>, <code>0</code>, and <code>\"\"</code>).</li>\n</ul>\n<pre><code class=\"language-py\">def compact(lst):\n  return list(filter(None, lst))\n</code></pre>\n<pre><code class=\"language-py\">compact([0, 1, False, 2, '', 3, 'a', 's', 34]) # [ 1, 2, 3, 'a', 's', 34 ]\n</code></pre>\n<hr>\n<hr>\n<h3>Performs right-to-left function composition.</h3>\n<ul>\n<li>Use <code>functools.reduce()</code> to perform right-to-left function composition.</li>\n<li>The last (rightmost) function can accept one or more arguments; the remaining functions must be unary.</li>\n</ul>\n<pre><code class=\"language-py\">from functools import reduce\n\ndef compose(*fns):\n  return reduce(lambda f, g: lambda *args: f(g(*args)), fns)\n</code></pre>\n<pre><code class=\"language-py\">add5 = lambda x: x + 5\nmultiply = lambda x, y: x * y\nmultiply_and_add_5 = compose(add5, multiply)\nmultiply_and_add_5(5, 2) # 15\n</code></pre>\n<hr>\n<hr>\n<h3>Performs left-to-right function composition.</h3>\n<ul>\n<li>Use <code>functools.reduce()</code> to perform left-to-right function composition.</li>\n<li>The first (leftmost) function can accept one or more arguments; the remaining functions must be unary.</li>\n</ul>\n<pre><code class=\"language-py\">from functools import reduce\n\ndef compose_right(*fns):\n  return reduce(lambda f, g: lambda *args: g(f(*args)), fns)\n</code></pre>\n<pre><code class=\"language-py\">add = lambda x, y: x + y\nsquare = lambda x: x * x\nadd_and_square = compose_right(add, square)\nadd_and_square(1, 2) # 9\n</code></pre>\n<hr>\n<hr>\n<h3>Groups the elements of a list based on the given function and returns the count of elements in each group.</h3>\n<ul>\n<li>Use <code>collections.defaultdict</code> to initialize a dictionary.</li>\n<li>Use <code>map()</code> to map the values of the given list using the given function.</li>\n<li>Iterate over the map and increase the element count each time it occurs.</li>\n</ul>\n<pre><code class=\"language-py\">from collections import defaultdict\n\ndef count_by(lst, fn = lambda x: x):\n  count = defaultdict(int)\n  for val in map(fn, lst):\n    count[val] += 1\n  return dict(count)\n</code></pre>\n<pre><code class=\"language-py\">from math import floor\n\ncount_by([6.1, 4.2, 6.3], floor) # {6: 2, 4: 1}\ncount_by(['one', 'two', 'three'], len) # {3: 2, 5: 1}\n</code></pre>\n<hr>\n<hr>\n<h3>Counts the occurrences of a value in a list.</h3>\n<ul>\n<li>Use <code>list.count()</code> to count the number of occurrences of <code>val</code> in <code>lst</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def count_occurrences(lst, val):\n  return lst.count(val)\n</code></pre>\n<pre><code class=\"language-py\">count_occurrences([1, 1, 2, 1, 2, 3], 1) # 3\n</code></pre>\n<hr>\n<hr>\n<h3>Creates a list of partial sums.</h3>\n<ul>\n<li>Use <code>itertools.accumulate()</code> to create the accumulated sum for each element.</li>\n<li>Use <code>list()</code> to convert the result into a list.</li>\n</ul>\n<pre><code class=\"language-py\">from itertools import accumulate\n\ndef cumsum(lst):\n  return list(accumulate(lst))\n</code></pre>\n<pre><code class=\"language-py\">cumsum(range(0, 15, 3)) # [0, 3, 9, 18, 30]\n</code></pre>\n<hr>\n<hr>\n<h3>Curries a function.</h3>\n<ul>\n<li>Use <code>functools.partial()</code> to return a new partial object which behaves like <code>fn</code> with the given arguments, <code>args</code>, partially applied.</li>\n</ul>\n<pre><code class=\"language-py\">from functools import partial\n\ndef curry(fn, *args):\n  return partial(fn, *args)\n</code></pre>\n<pre><code class=\"language-py\">add = lambda x, y: x + y\nadd10 = curry(add, 10)\nadd10(20) # 30\n</code></pre>\n<hr>\n<hr>\n<h3>Creates a list of dates between <code>start</code> (inclusive) and <code>end</code> (not inclusive).</h3>\n<ul>\n<li>Use <code>datetime.timedelta.days</code> to get the days between <code>start</code> and <code>end</code>.</li>\n<li>Use <code>int()</code> to convert the result to an integer and <code>range()</code> to iterate over each day.</li>\n<li>Use a list comprehension and <code>datetime.timedelta()</code> to create a list of <code>datetime.date</code> objects.</li>\n</ul>\n<pre><code class=\"language-py\">from datetime import timedelta, date\n\ndef daterange(start, end):\n  return [start + timedelta(n) for n in range(int((end - start).days))]\n</code></pre>\n<pre><code class=\"language-py\">from datetime import date\n\ndaterange(date(2020, 10, 1), date(2020, 10, 5))\n# [date(2020, 10, 1), date(2020, 10, 2), date(2020, 10, 3), date(2020, 10, 4)]\n</code></pre>\n<hr>\n<hr>\n<h3>Calculates the date of <code>n</code> days ago from today.</h3>\n<ul>\n<li>Use <code>datetime.date.today()</code> to get the current day.</li>\n<li>Use <code>datetime.timedelta</code> to subtract <code>n</code> days from today's date.</li>\n</ul>\n<pre><code class=\"language-py\">from datetime import timedelta, date\n\ndef days_ago(n):\n  return date.today() - timedelta(n)\n</code></pre>\n<pre><code class=\"language-py\">days_ago(5) # date(2020, 10, 23)\n</code></pre>\n<hr>\n<hr>\n<h3>Calculates the day difference between two dates.</h3>\n<ul>\n<li>Subtract <code>start</code> from <code>end</code> and use <code>datetime.timedelta.days</code> to get the day difference.</li>\n</ul>\n<pre><code class=\"language-py\">def days_diff(start, end):\n  return (end - start).days\n</code></pre>\n<pre><code class=\"language-py\">from datetime import date\n\ndays_diff(date(2020, 10, 25), date(2020, 10, 28)) # 3\n</code></pre>\n<hr>\n<hr>\n<h3>Calculates the date of <code>n</code> days from today.</h3>\n<ul>\n<li>Use <code>datetime.date.today()</code> to get the current day.</li>\n<li>Use <code>datetime.timedelta</code> to add <code>n</code> days from today's date.</li>\n</ul>\n<pre><code class=\"language-py\">from datetime import timedelta, date\n\ndef days_from_now(n):\n  return date.today() + timedelta(n)\n</code></pre>\n<pre><code class=\"language-py\">days_from_now(5) # date(2020, 11, 02)\n</code></pre>\n<hr>\n<hr>\n<h3>Decapitalizes the first letter of a string.</h3>\n<ul>\n<li>Use list slicing and <code>str.lower()</code> to decapitalize the first letter of the string.</li>\n<li>Use <code>str.join()</code> to combine the lowercase first letter with the rest of the characters.</li>\n<li>Omit the <code>upper_rest</code> parameter to keep the rest of the string intact, or set it to <code>True</code> to convert to uppercase.</li>\n</ul>\n<pre><code class=\"language-py\">def decapitalize(s, upper_rest = False):\n  return ''.join([s[:1].lower(), (s[1:].upper() if upper_rest else s[1:])])\n</code></pre>\n<pre><code class=\"language-py\">decapitalize('FooBar') # 'fooBar'\ndecapitalize('FooBar', True) # 'fOOBAR'\n</code></pre>\n<hr>\n<hr>\n<h3>Deep flattens a list.</h3>\n<ul>\n<li>Use recursion.</li>\n<li>Use <code>isinstance()</code> with <code>collections.abc.Iterable</code> to check if an element is iterable.</li>\n<li>If it is iterable, apply <code>deep_flatten()</code> recursively, otherwise return <code>[lst]</code>.</li>\n</ul>\n<pre><code class=\"language-py\">from collections.abc import Iterable\n\ndef deep_flatten(lst):\n  return ([a for i in lst for a in\n          deep_flatten(i)] if isinstance(lst, Iterable) else [lst])\n</code></pre>\n<pre><code class=\"language-py\">deep_flatten([1, [2], [[3], 4], 5]) # [1, 2, 3, 4, 5]\n</code></pre>\n<hr>\n<hr>\n<h3>Converts an angle from degrees to radians.</h3>\n<ul>\n<li>Use <code>math.pi</code> and the degrees to radians formula to convert the angle from degrees to radians.</li>\n</ul>\n<pre><code class=\"language-py\">from math import pi\n\ndef degrees_to_rads(deg):\n  return (deg * pi) / 180.0\n</code></pre>\n<pre><code class=\"language-py\">degrees_to_rads(180) # ~3.1416\n</code></pre>\n<hr>\n<hr>\n<h3>Invokes the provided function after <code>ms</code> milliseconds.</h3>\n<ul>\n<li>Use <code>time.sleep()</code> to delay the execution of <code>fn</code> by <code>ms / 1000</code> seconds.</li>\n</ul>\n<pre><code class=\"language-py\">from time import sleep\n\ndef delay(fn, ms, *args):\n  sleep(ms / 1000)\n  return fn(*args)\n</code></pre>\n<pre><code class=\"language-py\">delay(lambda x: print(x), 1000, 'later') # prints 'later' after one second\n</code></pre>\n<hr>\n<hr>\n<h3>Converts a dictionary to a list of tuples.</h3>\n<ul>\n<li>Use <code>dict.items()</code> and <code>list()</code> to get a list of tuples from the given dictionary.</li>\n</ul>\n<pre><code class=\"language-py\">def dict_to_list(d):\n  return list(d.items())\n</code></pre>\n<pre><code class=\"language-py\">d = {'one': 1, 'three': 3, 'five': 5, 'two': 2, 'four': 4}\ndict_to_list(d)\n# [('one', 1), ('three', 3), ('five', 5), ('two', 2), ('four', 4)]\n</code></pre>\n<hr>\n<hr>\n<h3>Calculates the difference between two iterables, without filtering duplicate values.</h3>\n<ul>\n<li>Create a <code>set</code> from <code>b</code>.</li>\n<li>Use a list comprehension on <code>a</code> to only keep values not contained in the previously created set, <code>_b</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def difference(a, b):\n  _b = set(b)\n  return [item for item in a if item not in _b]\n</code></pre>\n<pre><code class=\"language-py\">difference([1, 2, 3], [1, 2, 4]) # [3]\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the difference between two lists, after applying the provided function to each list element of both.</h3>\n<ul>\n<li>Create a <code>set</code>, using <code>map()</code> to apply <code>fn</code> to each element in <code>b</code>.</li>\n<li>Use a list comprehension in combination with <code>fn</code> on <code>a</code> to only keep values not contained in the previously created set, <code>_b</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def difference_by(a, b, fn):\n  _b = set(map(fn, b))\n  return [item for item in a if fn(item) not in _b]\n</code></pre>\n<pre><code class=\"language-py\">from math import floor\n\ndifference_by([2.1, 1.2], [2.3, 3.4], floor) # [1.2]\ndifference_by([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], lambda v : v['x'])\n# [ { x: 2 } ]\n</code></pre>\n<hr>\n<hr>\n<h3>Converts a number to a list of digits.</h3>\n<ul>\n<li>Use <code>map()</code> combined with <code>int</code> on the string representation of <code>n</code> and return a list from the result.</li>\n</ul>\n<pre><code class=\"language-py\">def digitize(n):\n  return list(map(int, str(n)))\n</code></pre>\n<pre><code class=\"language-py\">digitize(123) # [1, 2, 3]\n</code></pre>\n<hr>\n<hr>\n<h3>Returns a list with <code>n</code> elements removed from the left.</h3>\n<ul>\n<li>Use slice notation to remove the specified number of elements from the left.</li>\n<li>Omit the last argument, <code>n</code>, to use a default value of <code>1</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def drop(a, n = 1):\n  return a[n:]\n</code></pre>\n<pre><code class=\"language-py\">drop([1, 2, 3]) # [2, 3]\ndrop([1, 2, 3], 2) # [3]\ndrop([1, 2, 3], 42) # []\n</code></pre>\n<hr>\n<hr>\n<h3>Returns a list with <code>n</code> elements removed from the right.</h3>\n<ul>\n<li>Use slice notation to remove the specified number of elements from the right.</li>\n<li>Omit the last argument, <code>n</code>, to use a default value of <code>1</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def drop_right(a, n = 1):\n  return a[:-n]\n</code></pre>\n<pre><code class=\"language-py\">drop_right([1, 2, 3]) # [1, 2]\ndrop_right([1, 2, 3], 2) # [1]\ndrop_right([1, 2, 3], 42) # []\n</code></pre>\n<hr>\n<hr>\n<h3>Checks if the provided function returns <code>True</code> for every element in the list.</h3>\n<ul>\n<li>Use <code>all()</code> in combination with <code>map()</code> and <code>fn</code> to check if <code>fn</code> returns <code>True</code> for all elements in the list.</li>\n</ul>\n<pre><code class=\"language-py\">def every(lst, fn = lambda x: x):\n  return all(map(fn, lst))\n</code></pre>\n<pre><code class=\"language-py\">every([4, 2, 3], lambda x: x > 1) # True\nevery([1, 2, 3]) # True\n</code></pre>\n<hr>\n<hr>\n<h3>Returns every <code>nth</code> element in a list.</h3>\n<ul>\n<li>Use slice notation to create a new list that contains every <code>nth</code> element of the given list.</li>\n</ul>\n<pre><code class=\"language-py\">def every_nth(lst, nth):\n  return lst[nth - 1::nth]\n</code></pre>\n<pre><code class=\"language-py\">every_nth([1, 2, 3, 4, 5, 6], 2) # [ 2, 4, 6 ]\n</code></pre>\n<hr>\n<hr>\n<h3>Calculates the factorial of a number.</h3>\n<ul>\n<li>Use recursion.</li>\n<li>If <code>num</code> is less than or equal to <code>1</code>, return <code>1</code>.</li>\n<li>Otherwise, return the product of <code>num</code> and the factorial of <code>num - 1</code>.</li>\n<li>Throws an exception if <code>num</code> is a negative or a floating point number.</li>\n</ul>\n<pre><code class=\"language-py\">def factorial(num):\n  if not ((num >= 0) and (num % 1 == 0)):\n    raise Exception(\"Number can't be floating point or negative.\")\n  return 1 if num == 0 else num * factorial(num - 1)\n</code></pre>\n<pre><code class=\"language-py\">factorial(6) # 720\n</code></pre>\n<hr>\n<h2>unlisted: true</h2>\n<p>Converts Fahrenheit to Celsius.</p>\n<ul>\n<li>Follow the conversion formula <code>C = (F - 32) * 5/9</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def fahrenheit_to_celsius(degrees):\n  return ((degrees - 32) * 5/9)\n</code></pre>\n<pre><code class=\"language-py\">fahrenheit_to_celsius(77) # 25.0\n</code></pre>\n<hr>\n<hr>\n<h3>Generates a list, containing the Fibonacci sequence, up until the nth term.</h3>\n<ul>\n<li>Starting with <code>0</code> and <code>1</code>, use <code>list.append()</code> to add the sum of the last two numbers of the list to the end of the list, until the length of the list reaches <code>n</code>.</li>\n<li>If <code>n</code> is less or equal to <code>0</code>, return a list containing <code>0</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def fibonacci(n):\n  if n &#x3C;= 0:\n    return [0]\n  sequence = [0, 1]\n  while len(sequence) &#x3C;= n:\n    next_value = sequence[len(sequence) - 1] + sequence[len(sequence) - 2]\n    sequence.append(next_value)\n  return sequence\n</code></pre>\n<pre><code class=\"language-py\">fibonacci(7) # [0, 1, 1, 2, 3, 5, 8, 13]\n</code></pre>\n<hr>\n<hr>\n<h3>Creates a list with the non-unique values filtered out.</h3>\n<ul>\n<li>Use <code>collections.Counter</code> to get the count of each value in the list.</li>\n<li>Use a list comprehension to create a list containing only the unique values.</li>\n</ul>\n<pre><code class=\"language-py\">from collections import Counter\n\ndef filter_non_unique(lst):\n  return [item for item, count in Counter(lst).items() if count == 1]\n</code></pre>\n<pre><code class=\"language-py\">filter_non_unique([1, 2, 2, 3, 4, 4, 5]) # [1, 3, 5]\n</code></pre>\n<hr>\n<hr>\n<h3>Creates a list with the unique values filtered out.</h3>\n<ul>\n<li>Use <code>collections.Counter</code> to get the count of each value in the list.</li>\n<li>Use a list comprehension to create a list containing only the non-unique values.</li>\n</ul>\n<pre><code class=\"language-py\">from collections import Counter\n\ndef filter_unique(lst):\n  return [item for item, count in Counter(lst).items() if count > 1]\n</code></pre>\n<pre><code class=\"language-py\">filter_unique([1, 2, 2, 3, 4, 4, 5]) # [2, 4]\n</code></pre>\n<hr>\n<hr>\n<h3>Finds the value of the first element in the given list that satisfies the provided testing function.</h3>\n<ul>\n<li>Use a list comprehension and <code>next()</code> to return the first element in <code>lst</code> for which <code>fn</code> returns <code>True</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def find(lst, fn):\n  return next(x for x in lst if fn(x))\n</code></pre>\n<pre><code class=\"language-py\">find([1, 2, 3, 4], lambda n: n % 2 == 1) # 1\n</code></pre>\n<hr>\n<hr>\n<h3>Finds the index of the first element in the given list that satisfies the provided testing function.</h3>\n<ul>\n<li>Use a list comprehension, <code>enumerate()</code> and <code>next()</code> to return the index of the first element in <code>lst</code> for which <code>fn</code> returns <code>True</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def find_index(lst, fn):\n  return next(i for i, x in enumerate(lst) if fn(x))\n</code></pre>\n<pre><code class=\"language-py\">find_index([1, 2, 3, 4], lambda n: n % 2 == 1) # 0\n</code></pre>\n<hr>\n<hr>\n<h3>Finds the indexes of all elements in the given list that satisfy the provided testing function.</h3>\n<ul>\n<li>Use <code>enumerate()</code> and a list comprehension to return the indexes of the all element in <code>lst</code> for which <code>fn</code> returns <code>True</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def find_index_of_all(lst, fn):\n  return [i for i, x in enumerate(lst) if fn(x)]\n</code></pre>\n<pre><code class=\"language-py\">find_index_of_all([1, 2, 3, 4], lambda n: n % 2 == 1) # [0, 2]\n</code></pre>\n<hr>\n<hr>\n<h3>Finds the first key in the provided dictionary that has the given value.</h3>\n<ul>\n<li>Use <code>dictionary.items()</code> and <code>next()</code> to return the first key that has a value equal to <code>val</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def find_key(dict, val):\n  return next(key for key, value in dict.items() if value == val)\n</code></pre>\n<pre><code class=\"language-py\">ages = {\n  'Peter': 10,\n  'Isabel': 11,\n  'Anna': 9,\n}\nfind_key(ages, 11) # 'Isabel'\n</code></pre>\n<hr>\n<hr>\n<h3>Finds all keys in the provided dictionary that have the given value.</h3>\n<ul>\n<li>Use <code>dictionary.items()</code>, a generator and <code>list()</code> to return all keys that have a value equal to <code>val</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def find_keys(dict, val):\n  return list(key for key, value in dict.items() if value == val)\n</code></pre>\n<pre><code class=\"language-py\">ages = {\n  'Peter': 10,\n  'Isabel': 11,\n  'Anna': 10,\n}\nfind_keys(ages, 10) # [ 'Peter', 'Anna' ]\n</code></pre>\n<hr>\n<hr>\n<h3>Finds the value of the last element in the given list that satisfies the provided testing function.</h3>\n<ul>\n<li>Use a list comprehension and <code>next()</code> to return the last element in <code>lst</code> for which <code>fn</code> returns <code>True</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def find_last(lst, fn):\n  return next(x for x in lst[::-1] if fn(x))\n</code></pre>\n<pre><code class=\"language-py\">find_last([1, 2, 3, 4], lambda n: n % 2 == 1) # 3\n</code></pre>\n<hr>\n<hr>\n<h3>Finds the index of the last element in the given list that satisfies the provided testing function.</h3>\n<ul>\n<li>Use a list comprehension, <code>enumerate()</code> and <code>next()</code> to return the index of the last element in <code>lst</code> for which <code>fn</code> returns <code>True</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def find_last_index(lst, fn):\n  return len(lst) - 1 - next(i for i, x in enumerate(lst[::-1]) if fn(x))\n</code></pre>\n<pre><code class=\"language-py\">find_last_index([1, 2, 3, 4], lambda n: n % 2 == 1) # 2\n</code></pre>\n<hr>\n<hr>\n<h3>Finds the items that are parity outliers in a given list.</h3>\n<ul>\n<li>Use <code>collections.Counter</code> with a list comprehension to count even and odd values in the list.</li>\n<li>Use <code>collections.Counter.most_common()</code> to get the most common parity.</li>\n<li>Use a list comprehension to find all elements that do not match the most common parity.</li>\n</ul>\n<pre><code class=\"language-py\">from collections import Counter\n\ndef find_parity_outliers(nums):\n  return [\n    x for x in nums\n    if x % 2 != Counter([n % 2 for n in nums]).most_common()[0][0]\n  ]\n</code></pre>\n<pre><code class=\"language-py\">find_parity_outliers([1, 2, 3, 4, 6]) # [1, 3]\n</code></pre>\n<hr>\n<hr>\n<h3>Flattens a list of lists once.</h3>\n<ul>\n<li>Use a list comprehension to extract each value from sub-lists in order.</li>\n</ul>\n<pre><code class=\"language-py\">def flatten(lst):\n  return [x for y in lst for x in y]\n</code></pre>\n<pre><code class=\"language-py\">flatten([[1, 2, 3, 4], [5, 6, 7, 8]]) # [1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>\n<hr>\n<hr>\n<h3>Executes the provided function once for each list element.</h3>\n<ul>\n<li>Use a <code>for</code> loop to execute <code>fn</code> for each element in <code>itr</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def for_each(itr, fn):\n  for el in itr:\n    fn(el)\n</code></pre>\n<pre><code class=\"language-py\">for_each([1, 2, 3], print) # 1 2 3\n</code></pre>\n<hr>\n<hr>\n<h3>Executes the provided function once for each list element, starting from the list's last element.</h3>\n<ul>\n<li>Use a <code>for</code> loop in combination with slice notation to execute <code>fn</code> for each element in <code>itr</code>, starting from the last one.</li>\n</ul>\n<pre><code class=\"language-py\">def for_each_right(itr, fn):\n  for el in itr[::-1]:\n    fn(el)\n</code></pre>\n<pre><code class=\"language-py\">for_each_right([1, 2, 3], print) # 3 2 1\n</code></pre>\n<hr>\n<hr>\n<h3>Creates a dictionary with the unique values of a list as keys and their frequencies as the values.</h3>\n<ul>\n<li>Use <code>collections.defaultdict()</code> to store the frequencies of each unique element.</li>\n<li>Use <code>dict()</code> to return a dictionary with the unique elements of the list as keys and their frequencies as the values.</li>\n</ul>\n<pre><code class=\"language-py\">from collections import defaultdict\n\ndef frequencies(lst):\n  freq = defaultdict(int)\n  for val in lst:\n    freq[val] += 1\n  return dict(freq)\n</code></pre>\n<pre><code class=\"language-py\">frequencies(['a', 'b', 'a', 'c', 'a', 'a', 'b']) # { 'a': 4, 'b': 2, 'c': 1 }\n</code></pre>\n<hr>\n<hr>\n<h3>Converts a date from its ISO-8601 representation.</h3>\n<ul>\n<li>Use <code>datetime.datetime.fromisoformat()</code> to convert the given ISO-8601 date to a <code>datetime.datetime</code> object.</li>\n</ul>\n<pre><code class=\"language-py\">from datetime import datetime\n\ndef from_iso_date(d):\n  return datetime.fromisoformat(d)\n</code></pre>\n<pre><code class=\"language-py\">from_iso_date('2020-10-28T12:30:59.000000') # 2020-10-28 12:30:59\n</code></pre>\n<hr>\n<hr>\n<h3>Calculates the greatest common divisor of a list of numbers.</h3>\n<ul>\n<li>Use <code>functools.reduce()</code> and <code>math.gcd()</code> over the given list.</li>\n</ul>\n<pre><code class=\"language-py\">from functools import reduce\nfrom math import gcd as _gcd\n\ndef gcd(numbers):\n  return reduce(_gcd, numbers)\n</code></pre>\n<pre><code class=\"language-py\">gcd([8, 36, 28]) # 4\n</code></pre>\n<hr>\n<hr>\n<h3>Initializes a list containing the numbers in the specified range where <code>start</code> and <code>end</code> are inclusive and the ratio between two terms is <code>step</code>.</h3>\n<p>Returns an error if <code>step</code> equals <code>1</code>.</p>\n<ul>\n<li>Use <code>range()</code>, <code>math.log()</code> and <code>math.floor()</code> and a list comprehension to create a list of the appropriate length, applying the step for each element.</li>\n<li>Omit the second argument, <code>start</code>, to use a default value of <code>1</code>.</li>\n<li>Omit the third argument, <code>step</code>, to use a default value of <code>2</code>.</li>\n</ul>\n<pre><code class=\"language-py\">from math import floor, log\n\ndef geometric_progression(end, start=1, step=2):\n  return [start * step ** i for i in range(floor(log(end / start)\n          / log(step)) + 1)]\n</code></pre>\n<pre><code class=\"language-py\">geometric_progression(256) # [1, 2, 4, 8, 16, 32, 64, 128, 256]\ngeometric_progression(256, 3) # [3, 6, 12, 24, 48, 96, 192]\ngeometric_progression(256, 1, 4) # [1, 4, 16, 64, 256]\n</code></pre>\n<hr>\n<hr>\n<h3>Retrieves the value of the nested key indicated by the given selector list from a dictionary or list.</h3>\n<ul>\n<li>Use <code>functools.reduce()</code> to iterate over the <code>selectors</code> list.</li>\n<li>Apply <code>operator.getitem()</code> for each key in <code>selectors</code>, retrieving the value to be used as the iteratee for the next iteration.</li>\n</ul>\n<pre><code class=\"language-py\">from functools import reduce\nfrom operator import getitem\n\ndef get(d, selectors):\n  return reduce(getitem, selectors, d)\n</code></pre>\n<pre><code class=\"language-py\">users = {\n  'freddy': {\n    'name': {\n      'first': 'fred',\n      'last': 'smith'\n    },\n    'postIds': [1, 2, 3]\n  }\n}\nget(users, ['freddy', 'name', 'last']) # 'smith'\nget(users, ['freddy', 'postIds', 1]) # 2\n</code></pre>\n<hr>\n<hr>\n<h3>Groups the elements of a list based on the given function.</h3>\n<ul>\n<li>Use <code>collections.defaultdict</code> to initialize a dictionary.</li>\n<li>Use <code>fn</code> in combination with a <code>for</code> loop and <code>dict.append()</code> to populate the dictionary.</li>\n<li>Use <code>dict()</code> to convert it to a regular dictionary.</li>\n</ul>\n<pre><code class=\"language-py\">from collections import defaultdict\n\ndef group_by(lst, fn):\n  d = defaultdict(list)\n  for el in lst:\n    d[fn(el)].append(el)\n  return dict(d)\n</code></pre>\n<pre><code class=\"language-py\">from math import floor\n\ngroup_by([6.1, 4.2, 6.3], floor) # {4: [4.2], 6: [6.1, 6.3]}\ngroup_by(['one', 'two', 'three'], len) # {3: ['one', 'two'], 5: ['three']}\n</code></pre>\n<hr>\n<hr>\n<h3>Calculates the Hamming distance between two values.</h3>\n<ul>\n<li>Use the XOR operator (<code>^</code>) to find the bit difference between the two numbers.</li>\n<li>Use <code>bin()</code> to convert the result to a binary string.</li>\n<li>Convert the string to a list and use <code>count()</code> of <code>str</code> class to count and return the number of <code>1</code>s in it.</li>\n</ul>\n<pre><code class=\"language-py\">def hamming_distance(a, b):\n  return bin(a ^ b).count('1')\n</code></pre>\n<pre><code class=\"language-py\">hamming_distance(2, 3) # 1\n</code></pre>\n<hr>\n<hr>\n<h3>Checks if there are duplicate values in a flat list.</h3>\n<ul>\n<li>Use <code>set()</code> on the given list to remove duplicates, compare its length with the length of the list.</li>\n</ul>\n<pre><code class=\"language-py\">def has_duplicates(lst):\n  return len(lst) != len(set(lst))\n</code></pre>\n<pre><code class=\"language-py\">x = [1, 2, 3, 4, 5, 5]\ny = [1, 2, 3, 4, 5]\nhas_duplicates(x) # True\nhas_duplicates(y) # False\n</code></pre>\n<hr>\n<hr>\n<h3>Checks if two lists contain the same elements regardless of order.</h3>\n<ul>\n<li>Use <code>set()</code> on the combination of both lists to find the unique values.</li>\n<li>Iterate over them with a <code>for</code> loop comparing the <code>count()</code> of each unique value in each list.</li>\n<li>Return <code>False</code> if the counts do not match for any element, <code>True</code> otherwise.</li>\n</ul>\n<pre><code class=\"language-py\">def have_same_contents(a, b):\n  for v in set(a + b):\n    if a.count(v) != b.count(v):\n      return False\n  return True\n</code></pre>\n<pre><code class=\"language-py\">have_same_contents([1, 2, 4], [2, 4, 1]) # True\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the head of a list.</h3>\n<ul>\n<li>Use <code>lst[0]</code> to return the first element of the passed list.</li>\n</ul>\n<pre><code class=\"language-py\">def head(lst):\n  return lst[0]\n</code></pre>\n<pre><code class=\"language-py\">head([1, 2, 3]) # 1\n</code></pre>\n<hr>\n<hr>\n<h3>Converts a hexadecimal color code to a tuple of integers corresponding to its RGB components.</h3>\n<ul>\n<li>Use a list comprehension in combination with <code>int()</code> and list slice notation to get the RGB components from the hexadecimal string.</li>\n<li>Use <code>tuple()</code> to convert the resulting list to a tuple.</li>\n</ul>\n<pre><code class=\"language-py\">def hex_to_rgb(hex):\n  return tuple(int(hex[i:i+2], 16) for i in (0, 2, 4))\n</code></pre>\n<pre><code class=\"language-py\">hex_to_rgb('FFA501') # (255, 165, 1)\n</code></pre>\n<hr>\n<hr>\n<h3>Checks if the given number falls within the given range.</h3>\n<ul>\n<li>Use arithmetic comparison to check if the given number is in the specified range.</li>\n<li>If the second parameter, <code>end</code>, is not specified, the range is considered to be from <code>0</code> to <code>start</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def in_range(n, start, end = 0):\n  return start &#x3C;= n &#x3C;= end if end >= start else end &#x3C;= n &#x3C;= start\n</code></pre>\n<pre><code class=\"language-py\">in_range(3, 2, 5) # True\nin_range(3, 4) # True\nin_range(2, 3, 5) # False\nin_range(3, 2) # False\n</code></pre>\n<hr>\n<hr>\n<h3>Checks if all the elements in <code>values</code> are included in <code>lst</code>.</h3>\n<ul>\n<li>Check if every value in <code>values</code> is contained in <code>lst</code> using a <code>for</code> loop.</li>\n<li>Return <code>False</code> if any one value is not found, <code>True</code> otherwise.</li>\n</ul>\n<pre><code class=\"language-py\">def includes_all(lst, values):\n  for v in values:\n    if v not in lst:\n      return False\n  return True\n</code></pre>\n<pre><code class=\"language-py\">includes_all([1, 2, 3, 4], [1, 4]) # True\nincludes_all([1, 2, 3, 4], [1, 5]) # False\n</code></pre>\n<hr>\n<hr>\n<h3>Checks if any element in <code>values</code> is included in <code>lst</code>.</h3>\n<ul>\n<li>Check if any value in <code>values</code> is contained in <code>lst</code> using a <code>for</code> loop.</li>\n<li>Return <code>True</code> if any one value is found, <code>False</code> otherwise.</li>\n</ul>\n<pre><code class=\"language-py\">def includes_any(lst, values):\n  for v in values:\n    if v in lst:\n      return True\n  return False\n</code></pre>\n<pre><code class=\"language-py\">includes_any([1, 2, 3, 4], [2, 9]) # True\nincludes_any([1, 2, 3, 4], [8, 9]) # False\n</code></pre>\n<hr>\n<hr>\n<h3>Returns a list of indexes of all the occurrences of an element in a list.</h3>\n<ul>\n<li>Use <code>enumerate()</code> and a list comprehension to check each element for equality with <code>value</code> and adding <code>i</code> to the result.</li>\n</ul>\n<pre><code class=\"language-py\">def index_of_all(lst, value):\n  return [i for i, x in enumerate(lst) if x == value]\n</code></pre>\n<pre><code class=\"language-py\">index_of_all([1, 2, 1, 4, 5, 1], 1) # [0, 2, 5]\nindex_of_all([1, 2, 3, 4], 6) # []\n</code></pre>\n<hr>\n<hr>\n<h3>Returns all the elements of a list except the last one.</h3>\n<ul>\n<li>Use <code>lst[:-1]</code> to return all but the last element of the list.</li>\n</ul>\n<pre><code class=\"language-py\">def initial(lst):\n  return lst[:-1]\n</code></pre>\n<pre><code class=\"language-py\">initial([1, 2, 3]) # [1, 2]\n</code></pre>\n<hr>\n<hr>\n<h3>Initializes a 2D list of given width and height and value.</h3>\n<ul>\n<li>Use a list comprehension and <code>range()</code> to generate <code>h</code> rows where each is a list with length <code>h</code>, initialized with <code>val</code>.</li>\n<li>Omit the last argument, <code>val</code>, to set the default value to <code>None</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def initialize_2d_list(w, h, val = None):\n  return [[val for x in range(w)] for y in range(h)]\n</code></pre>\n<pre><code class=\"language-py\">initialize_2d_list(2, 2, 0) # [[0, 0], [0, 0]]\n</code></pre>\n<hr>\n<hr>\n<h3>Initializes a list containing the numbers in the specified range where <code>start</code> and <code>end</code> are inclusive with their common difference <code>step</code>.</h3>\n<ul>\n<li>Use <code>list()</code> and <code>range()</code> to generate a list of the appropriate length, filled with the desired values in the given range.</li>\n<li>Omit <code>start</code> to use the default value of <code>0</code>.</li>\n<li>Omit <code>step</code> to use the default value of <code>1</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def initialize_list_with_range(end, start = 0, step = 1):\n  return list(range(start, end + 1, step))\n</code></pre>\n<pre><code class=\"language-py\">initialize_list_with_range(5) # [0, 1, 2, 3, 4, 5]\ninitialize_list_with_range(7, 3) # [3, 4, 5, 6, 7]\ninitialize_list_with_range(9, 0, 2) # [0, 2, 4, 6, 8]\n</code></pre>\n<hr>\n<hr>\n<h3>Initializes and fills a list with the specified value.</h3>\n<ul>\n<li>Use a list comprehension and <code>range()</code> to generate a list of length equal to <code>n</code>, filled with the desired values.</li>\n<li>Omit <code>val</code> to use the default value of <code>0</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def initialize_list_with_values(n, val = 0):\n  return [val for x in range(n)]\n</code></pre>\n<pre><code class=\"language-py\">initialize_list_with_values(5, 2) # [2, 2, 2, 2, 2]\n</code></pre>\n<hr>\n<hr>\n<h3>Returns a list of elements that exist in both lists.</h3>\n<ul>\n<li>Create a <code>set</code> from <code>a</code> and <code>b</code>.</li>\n<li>Use the built-in set operator <code>&#x26;</code> to only keep values contained in both sets, then transform the <code>set</code> back into a <code>list</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def intersection(a, b):\n  _a, _b = set(a), set(b)\n  return list(_a &#x26; _b)\n</code></pre>\n<pre><code class=\"language-py\">intersection([1, 2, 3], [4, 3, 2]) # [2, 3]\n</code></pre>\n<hr>\n<hr>\n<h3>Returns a list of elements that exist in both lists, after applying the provided function to each list element of both.</h3>\n<ul>\n<li>Create a <code>set</code>, using <code>map()</code> to apply <code>fn</code> to each element in <code>b</code>.</li>\n<li>Use a list comprehension in combination with <code>fn</code> on <code>a</code> to only keep values contained in both lists.</li>\n</ul>\n<pre><code class=\"language-py\">def intersection_by(a, b, fn):\n  _b = set(map(fn, b))\n  return [item for item in a if fn(item) in _b]\n</code></pre>\n<pre><code class=\"language-py\">from math import floor\n\nintersection_by([2.1, 1.2], [2.3, 3.4], floor) # [2.1]\n</code></pre>\n<hr>\n<hr>\n<h3>Inverts a dictionary with unique hashable values.</h3>\n<ul>\n<li>Use <code>dictionary.items()</code> in combination with a list comprehension to create a new dictionary with the values and keys inverted.</li>\n</ul>\n<pre><code class=\"language-py\">def invert_dictionary(obj):\n  return { value: key for key, value in obj.items() }\n</code></pre>\n<pre><code class=\"language-py\">ages = {\n  'Peter': 10,\n  'Isabel': 11,\n  'Anna': 9,\n}\ninvert_dictionary(ages) # { 10: 'Peter', 11: 'Isabel', 9: 'Anna' }\n</code></pre>\n<hr>\n<hr>\n<h3>Checks if a string is an anagram of another string (case-insensitive, ignores spaces, punctuation and special characters).</h3>\n<ul>\n<li>Use <code>str.isalnum()</code> to filter out non-alphanumeric characters, <code>str.lower()</code> to transform each character to lowercase.</li>\n<li>Use <code>collections.Counter</code> to count the resulting characters for each string and compare the results.</li>\n</ul>\n<pre><code class=\"language-py\">from collections import Counter\n\ndef is_anagram(s1, s2):\n  return Counter(\n    c.lower() for c in s1 if c.isalnum()\n  ) == Counter(\n    c.lower() for c in s2 if c.isalnum()\n  )\n</code></pre>\n<pre><code class=\"language-py\">is_anagram('#anagram', 'Nag a ram!')  # True\n</code></pre>\n<hr>\n<hr>\n<h3>Checks if the elements of the first list are contained in the second one regardless of order.</h3>\n<ul>\n<li>Use <code>count()</code> to check if any value in <code>a</code> has more occurrences than it has in <code>b</code>.</li>\n<li>Return <code>False</code> if any such value is found, <code>True</code> otherwise.</li>\n</ul>\n<pre><code class=\"language-py\">def is_contained_in(a, b):\n  for v in set(a):\n    if a.count(v) > b.count(v):\n      return False\n  return True\n</code></pre>\n<pre><code class=\"language-py\">is_contained_in([1, 4], [2, 4, 1]) # True\n</code></pre>\n<hr>\n<h2>unlisted: true</h2>\n<p>Checks if the first numeric argument is divisible by the second one.</p>\n<ul>\n<li>Use the modulo operator (<code>%</code>) to check if the remainder is equal to <code>0</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def is_divisible(dividend, divisor):\n  return dividend % divisor == 0\n</code></pre>\n<pre><code class=\"language-py\">is_divisible(6, 3) # True\n</code></pre>\n<hr>\n<h2>unlisted: true</h2>\n<p>Checks if the given number is even.</p>\n<ul>\n<li>Check whether a number is odd or even using the modulo (<code>%</code>) operator.</li>\n<li>Return <code>True</code> if the number is even, <code>False</code> if the number is odd.</li>\n</ul>\n<pre><code class=\"language-py\">def is_even(num):\n  return num % 2 == 0\n</code></pre>\n<pre><code class=\"language-py\">is_even(3) # False\n</code></pre>\n<hr>\n<h2>unlisted: true</h2>\n<p>Checks if the given number is odd.</p>\n<ul>\n<li>Checks whether a number is even or odd using the modulo (<code>%</code>) operator.</li>\n<li>Returns <code>True</code> if the number is odd, <code>False</code> if the number is even.</li>\n</ul>\n<pre><code class=\"language-py\">def is_odd(num):\n  return num % 2 != 0\n</code></pre>\n<pre><code class=\"language-py\">is_odd(3) # True\n</code></pre>\n<hr>\n<hr>\n<h3>Checks if the provided integer is a prime number.</h3>\n<ul>\n<li>Return <code>False</code> if the number is <code>0</code>, <code>1</code>, a negative number or a multiple of <code>2</code>.</li>\n<li>Use <code>all()</code> and <code>range()</code> to check numbers from <code>3</code> to the square root of the given number.</li>\n<li>Return <code>True</code> if none divides the given number, <code>False</code> otherwise.</li>\n</ul>\n<pre><code class=\"language-py\">from math import sqrt\n\ndef is_prime(n):\n  if n &#x3C;= 1 or (n % 2 == 0 and n > 2):\n    return False\n  return all(n % i for i in range(3, int(sqrt(n)) + 1, 2))\n</code></pre>\n<pre><code class=\"language-py\">is_prime(11) # True\n</code></pre>\n<hr>\n<hr>\n<h3>Checks if the given date is a weekday.</h3>\n<ul>\n<li>Use <code>datetime.datetime.weekday()</code> to get the day of the week as an integer.</li>\n<li>Check if the day of the week is less than or equal to <code>4</code>.</li>\n<li>Omit the second argument, <code>d</code>, to use a default value of <code>datetime.today()</code>.</li>\n</ul>\n<pre><code class=\"language-py\">from datetime import datetime\n\ndef is_weekday(d = datetime.today()):\n  return d.weekday() &#x3C;= 4\n</code></pre>\n<pre><code class=\"language-py\">from datetime import date\n\nis_weekday(date(2020, 10, 25)) # False\nis_weekday(date(2020, 10, 28)) # True\n</code></pre>\n<hr>\n<hr>\n<h3>Checks if the given date is a weekend.</h3>\n<ul>\n<li>Use <code>datetime.datetime.weekday()</code> to get the day of the week as an integer.</li>\n<li>Check if the day of the week is greater than <code>4</code>.</li>\n<li>Omit the second argument, <code>d</code>, to use a default value of <code>datetime.today()</code>.</li>\n</ul>\n<pre><code class=\"language-py\">from datetime import datetime\n\ndef is_weekend(d = datetime.today()):\n  return d.weekday() > 4\n</code></pre>\n<pre><code class=\"language-py\">from datetime import date\n\nis_weekend(date(2020, 10, 25)) # True\nis_weekend(date(2020, 10, 28)) # False\n</code></pre>\n<hr>\n<hr>\n<h3>Converts a string to kebab case.</h3>\n<ul>\n<li>Use <code>re.sub()</code> to replace any <code>-</code> or <code>_</code> with a space, using the regexp <code>r\"(_|-)+\"</code>.</li>\n<li>Use <code>re.sub()</code> to match all words in the string, <code>str.lower()</code> to lowercase them.</li>\n<li>Finally, use <code>str.join()</code> to combine all word using <code>-</code> as the separator.</li>\n</ul>\n<pre><code class=\"language-py\">from re import sub\n\ndef kebab(s):\n  return '-'.join(\n    sub(r\"(\\s|_|-)+\",\" \",\n    sub(r\"[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+\",\n    lambda mo: ' ' + mo.group(0).lower(), s)).split())\n</code></pre>\n<pre><code class=\"language-py\">kebab('camelCase') # 'camel-case'\nkebab('some text') # 'some-text'\nkebab('some-mixed_string With spaces_underscores-and-hyphens')\n# 'some-mixed-string-with-spaces-underscores-and-hyphens'\nkebab('AllThe-small Things') # 'all-the-small-things'\n</code></pre>\n<hr>\n<hr>\n<h3>Checks if the given key exists in a dictionary.</h3>\n<ul>\n<li>Use the <code>in</code> operator to check if <code>d</code> contains <code>key</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def key_in_dict(d, key):\n  return (key in d)\n</code></pre>\n<pre><code class=\"language-py\">d = {'one': 1, 'three': 3, 'five': 5, 'two': 2, 'four': 4}\nkey_in_dict(d, 'three') # True\n</code></pre>\n<hr>\n<hr>\n<h3>Finds the key of the maximum value in a dictionary.</h3>\n<ul>\n<li>Use <code>max()</code> with the <code>key</code> parameter set to <code>dict.get()</code> to find and return the key of the maximum value in the given dictionary.</li>\n</ul>\n<pre><code class=\"language-py\">def key_of_max(d):\n  return max(d, key = d.get)\n</code></pre>\n<pre><code class=\"language-py\">key_of_max({'a':4, 'b':0, 'c':13}) # c\n</code></pre>\n<hr>\n<hr>\n<h3>Finds the key of the minimum value in a dictionary.</h3>\n<ul>\n<li>Use <code>min()</code> with the <code>key</code> parameter set to <code>dict.get()</code> to find and return the key of the minimum value in the given dictionary.</li>\n</ul>\n<pre><code class=\"language-py\">def key_of_min(d):\n  return min(d, key = d.get)\n</code></pre>\n<pre><code class=\"language-py\">key_of_min({'a':4, 'b':0, 'c':13}) # b\n</code></pre>\n<hr>\n<hr>\n<h3>Creates a flat list of all the keys in a flat dictionary.</h3>\n<ul>\n<li>Use <code>dict.keys()</code> to return the keys in the given dictionary.</li>\n<li>Return a <code>list()</code> of the previous result.</li>\n</ul>\n<pre><code class=\"language-py\">def keys_only(flat_dict):\n  return list(flat_dict.keys())\n</code></pre>\n<pre><code class=\"language-py\">ages = {\n  'Peter': 10,\n  'Isabel': 11,\n  'Anna': 9,\n}\nkeys_only(ages) # ['Peter', 'Isabel', 'Anna']\n</code></pre>\n<hr>\n<h2>unlisted: true</h2>\n<p>Converts kilometers to miles.</p>\n<ul>\n<li>Follows the conversion formula <code>mi = km * 0.621371</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def km_to_miles(km):\n  return km * 0.621371\n</code></pre>\n<pre><code class=\"language-py\">km_to_miles(8.1) # 5.0331051\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the last element in a list.</h3>\n<ul>\n<li>Use <code>lst[-1]</code> to return the last element of the passed list.</li>\n</ul>\n<pre><code class=\"language-py\">def last(lst):\n  return lst[-1]\n</code></pre>\n<pre><code class=\"language-py\">last([1, 2, 3]) # 3\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the least common multiple of a list of numbers.</h3>\n<ul>\n<li>Use <code>functools.reduce()</code>, <code>math.gcd()</code> and <code>lcm(x,y) = x * y / gcd(x,y)</code> over the given list.</li>\n</ul>\n<pre><code class=\"language-py\">from functools import reduce\nfrom math import gcd\n\ndef lcm(numbers):\n  return reduce((lambda x, y: int(x * y / gcd(x, y))), numbers)\n</code></pre>\n<pre><code class=\"language-py\">lcm([12, 7]) # 84\nlcm([1, 3, 4, 5]) # 60\n</code></pre>\n<hr>\n<hr>\n<h3>Takes any number of iterable objects or objects with a length property and returns the longest one.</h3>\n<ul>\n<li>Use <code>max()</code> with <code>len()</code> as the <code>key</code> to return the item with the greatest length.</li>\n<li>If multiple objects have the same length, the first one will be returned.</li>\n</ul>\n<pre><code class=\"language-py\">def longest_item(*args):\n  return max(args, key = len)\n</code></pre>\n<pre><code class=\"language-py\">longest_item('this', 'is', 'a', 'testcase') # 'testcase'\nlongest_item([1, 2, 3], [1, 2], [1, 2, 3, 4, 5]) # [1, 2, 3, 4, 5]\nlongest_item([1, 2, 3], 'foobar') # 'foobar'\n</code></pre>\n<hr>\n<hr>\n<h3>Maps the values of a list to a dictionary using a function, where the key-value pairs consist of the original value as the key and the result of the function as the value.</h3>\n<ul>\n<li>Use <code>map()</code> to apply <code>fn</code> to each value of the list.</li>\n<li>Use <code>zip()</code> to pair original values to the values produced by <code>fn</code>.</li>\n<li>Use <code>dict()</code> to return an appropriate dictionary.</li>\n</ul>\n<pre><code class=\"language-py\">def map_dictionary(itr, fn):\n  return dict(zip(itr, map(fn, itr)))\n</code></pre>\n<pre><code class=\"language-py\">map_dictionary([1, 2, 3], lambda x: x * x) # { 1: 1, 2: 4, 3: 9 }\n</code></pre>\n<hr>\n<hr>\n<h3>Creates a dictionary with the same keys as the provided dictionary and values generated by running the provided function for each value.</h3>\n<ul>\n<li>Use <code>dict.items()</code> to iterate over the dictionary, assigning the values produced by <code>fn</code> to each key of a new dictionary.</li>\n</ul>\n<pre><code class=\"language-py\">def map_values(obj, fn):\n  return dict((k, fn(v)) for k, v in obj.items())\n</code></pre>\n<pre><code class=\"language-py\">users = {\n  'fred': { 'user': 'fred', 'age': 40 },\n  'pebbles': { 'user': 'pebbles', 'age': 1 }\n}\nmap_values(users, lambda u : u['age']) # {'fred': 40, 'pebbles': 1}\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the maximum value of a list, after mapping each element to a value using the provided function.</h3>\n<ul>\n<li>Use <code>map()</code> with <code>fn</code> to map each element to a value using the provided function.</li>\n<li>Use <code>max()</code> to return the maximum value.</li>\n</ul>\n<pre><code class=\"language-py\">def max_by(lst, fn):\n  return max(map(fn, lst))\n</code></pre>\n<pre><code class=\"language-py\">max_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n']) # 8\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the index of the element with the maximum value in a list.</h3>\n<ul>\n<li>Use <code>max()</code> and <code>list.index()</code> to get the maximum value in the list and return its index.</li>\n</ul>\n<pre><code class=\"language-py\">def max_element_index(arr):\n  return arr.index(max(arr))\n</code></pre>\n<pre><code class=\"language-py\">max_element_index([5, 8, 9, 7, 10, 3, 0]) # 4\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the <code>n</code> maximum elements from the provided list.</h3>\n<ul>\n<li>Use <code>sorted()</code> to sort the list.</li>\n<li>Use slice notation to get the specified number of elements.</li>\n<li>Omit the second argument, <code>n</code>, to get a one-element list.</li>\n<li>If <code>n</code> is greater than or equal to the provided list's length, then return the original list (sorted in descending order).</li>\n</ul>\n<pre><code class=\"language-py\">def max_n(lst, n = 1):\n  return sorted(lst, reverse = True)[:n]\n</code></pre>\n<pre><code class=\"language-py\">max_n([1, 2, 3]) # [3]\nmax_n([1, 2, 3], 2) # [3, 2]\n</code></pre>\n<hr>\n<hr>\n<h3>Finds the median of a list of numbers.</h3>\n<ul>\n<li>Sort the numbers of the list using <code>list.sort()</code>.</li>\n<li>Find the median, which is either the middle element of the list if the list length is odd or the average of the two middle elements if the list length is even.</li>\n<li><a href=\"https://docs.python.org/3/library/statistics.html#statistics.median\"><code>statistics.median()</code></a> provides similar functionality to this snippet.</li>\n</ul>\n<pre><code class=\"language-py\">def median(list):\n  list.sort()\n  list_length = len(list)\n  if list_length % 2 == 0:\n    return (list[int(list_length / 2) - 1] + list[int(list_length / 2)]) / 2\n  return float(list[int(list_length / 2)])\n</code></pre>\n<pre><code class=\"language-py\">median([1, 2, 3]) # 2.0\nmedian([1, 2, 3, 4]) # 2.5\n</code></pre>\n<hr>\n<hr>\n<h3>Merges two or more lists into a list of lists, combining elements from each of the input lists based on their positions.</h3>\n<ul>\n<li>Use <code>max()</code> combined with a list comprehension to get the length of the longest list in the arguments.</li>\n<li>Use <code>range()</code> in combination with the <code>max_length</code> variable to loop as many times as there are elements in the longest list.</li>\n<li>If a list is shorter than <code>max_length</code>, use <code>fill_value</code> for the remaining items (defaults to <code>None</code>).</li>\n<li><a href=\"https://docs.python.org/3/library/functions.html#zip\"><code>zip()</code></a> and <a href=\"https://docs.python.org/3/library/itertools.html#itertools.zip_longest\"><code>itertools.zip_longest()</code></a> provide similar functionality to this snippet.</li>\n</ul>\n<pre><code class=\"language-py\">def merge(*args, fill_value = None):\n  max_length = max([len(lst) for lst in args])\n  result = []\n  for i in range(max_length):\n    result.append([\n      args[k][i] if i &#x3C; len(args[k]) else fill_value for k in range(len(args))\n    ])\n  return result\n</code></pre>\n<pre><code class=\"language-py\">merge(['a', 'b'], [1, 2], [True, False]) # [['a', 1, True], ['b', 2, False]]\nmerge(['a'], [1, 2], [True, False]) # [['a', 1, True], [None, 2, False]]\nmerge(['a'], [1, 2], [True, False], fill_value = '_')\n# [['a', 1, True], ['_', 2, False]]\n</code></pre>\n<hr>\n<hr>\n<h3>Merges two or more dictionaries.</h3>\n<ul>\n<li>Create a new <code>dict</code> and loop over <code>dicts</code>, using <code>dictionary.update()</code> to add the key-value pairs from each one to the result.</li>\n</ul>\n<pre><code class=\"language-py\">def merge_dictionaries(*dicts):\n  res = dict()\n  for d in dicts:\n    res.update(d)\n  return res\n</code></pre>\n<pre><code class=\"language-py\">ages_one = {\n  'Peter': 10,\n  'Isabel': 11,\n}\nages_two = {\n  'Anna': 9\n}\nmerge_dictionaries(ages_one, ages_two)\n# { 'Peter': 10, 'Isabel': 11, 'Anna': 9 }\n</code></pre>\n<hr>\n<h2>unlisted: true</h2>\n<p>Converts miles to kilometers.</p>\n<ul>\n<li>Follows the conversion formula <code>km = mi * 1.609344</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def miles_to_km(miles):\n  return miles * 1.609344\n</code></pre>\n<pre><code class=\"language-py\">miles_to_km(5.03) # 8.09500032\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the minimum value of a list, after mapping each element to a value using the provided function.</h3>\n<ul>\n<li>Use <code>map()</code> with <code>fn</code> to map each element to a value using the provided function.</li>\n<li>Use <code>min()</code> to return the minimum value.</li>\n</ul>\n<pre><code class=\"language-py\">def min_by(lst, fn):\n  return min(map(fn, lst))\n</code></pre>\n<pre><code class=\"language-py\">min_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n']) # 2\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the index of the element with the minimum value in a list.</h3>\n<ul>\n<li>Use <code>min()</code> and <code>list.index()</code> to obtain the minimum value in the list and then return its index.</li>\n</ul>\n<pre><code class=\"language-py\">def min_element_index(arr):\n  return arr.index(min(arr))\n</code></pre>\n<pre><code class=\"language-py\">min_element_index([3, 5, 2, 6, 10, 7, 9]) # 2\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the <code>n</code> minimum elements from the provided list.</h3>\n<ul>\n<li>Use <code>sorted()</code> to sort the list.</li>\n<li>Use slice notation to get the specified number of elements.</li>\n<li>Omit the second argument, <code>n</code>, to get a one-element list.</li>\n<li>If <code>n</code> is greater than or equal to the provided list's length, then return the original list (sorted in ascending order).</li>\n</ul>\n<pre><code class=\"language-py\">def min_n(lst, n = 1):\n  return sorted(lst, reverse = False)[:n]\n</code></pre>\n<pre><code class=\"language-py\">min_n([1, 2, 3]) # [1]\nmin_n([1, 2, 3], 2) # [1, 2]\n</code></pre>\n<hr>\n<hr>\n<h3>Calculates the month difference between two dates.</h3>\n<ul>\n<li>Subtract <code>start</code> from <code>end</code> and use <code>datetime.timedelta.days</code> to get the day difference.</li>\n<li>Divide by <code>30</code> and use <code>math.ceil()</code> to get the difference in months (rounded up).</li>\n</ul>\n<pre><code class=\"language-py\">from math import ceil\n\ndef months_diff(start, end):\n  return ceil((end - start).days / 30)\n</code></pre>\n<pre><code class=\"language-py\">from datetime import date\n\nmonths_diff(date(2020, 10, 28), date(2020, 11, 25)) # 1\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the most frequent element in a list.</h3>\n<ul>\n<li>Use <code>set()</code> to get the unique values in <code>lst</code>.</li>\n<li>Use <code>max()</code> to find the element that has the most appearances.</li>\n</ul>\n<pre><code class=\"language-py\">def most_frequent(lst):\n  return max(set(lst), key = lst.count)\n</code></pre>\n<pre><code class=\"language-py\">most_frequent([1, 2, 1, 2, 3, 2, 1, 4, 2]) #2\n</code></pre>\n<hr>\n<hr>\n<h3>Generates a string with the given string value repeated <code>n</code> number of times.</h3>\n<ul>\n<li>Repeat the string <code>n</code> times, using the <code>*</code> operator.</li>\n</ul>\n<pre><code class=\"language-py\">def n_times_string(s, n):\n  return (s * n)\n</code></pre>\n<pre><code class=\"language-py\">n_times_string('py', 4) #'pypypypy'\n</code></pre>\n<hr>\n<hr>\n<h3>Checks if the provided function returns <code>True</code> for at least one element in the list.</h3>\n<ul>\n<li>Use <code>all()</code> and <code>fn</code> to check if <code>fn</code> returns <code>False</code> for all the elements in the list.</li>\n</ul>\n<pre><code class=\"language-py\">def none(lst, fn = lambda x: x):\n  return all(not fn(x) for x in lst)\n</code></pre>\n<pre><code class=\"language-py\">none([0, 1, 2, 0], lambda x: x >= 2 ) # False\nnone([0, 0, 0]) # True\n</code></pre>\n<hr>\n<hr>\n<h3>Maps a number from one range to another range.</h3>\n<ul>\n<li>Return <code>num</code> mapped between <code>outMin</code>-<code>outMax</code> from <code>inMin</code>-<code>inMax</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def num_to_range(num, inMin, inMax, outMin, outMax):\n  return outMin + (float(num - inMin) / float(inMax - inMin) * (outMax\n                  - outMin))\n</code></pre>\n<pre><code class=\"language-py\">num_to_range(5, 0, 10, 0, 100) # 50.0\n</code></pre>\n<hr>\n<hr>\n<h3>Moves the specified amount of elements to the end of the list.</h3>\n<ul>\n<li>Use slice notation to get the two slices of the list and combine them before returning.</li>\n</ul>\n<pre><code class=\"language-py\">def offset(lst, offset):\n  return lst[offset:] + lst[:offset]\n</code></pre>\n<pre><code class=\"language-py\">offset([1, 2, 3, 4, 5], 2) # [3, 4, 5, 1, 2]\noffset([1, 2, 3, 4, 5], -2) # [4, 5, 1, 2, 3]\n</code></pre>\n<hr>\n<hr>\n<h3>Pads a string on both sides with the specified character, if it's shorter than the specified length.</h3>\n<ul>\n<li>Use <code>str.ljust()</code> and <code>str.rjust()</code> to pad both sides of the given string.</li>\n<li>Omit the third argument, <code>char</code>, to use the whitespace character as the default padding character.</li>\n</ul>\n<pre><code class=\"language-py\">from math import floor\n\ndef pad(s, length, char = ' '):\n  return s.rjust(floor((len(s) + length)/2), char).ljust(length, char)\n</code></pre>\n<pre><code class=\"language-py\">pad('cat', 8) # '  cat   '\npad('42', 6, '0') # '004200'\npad('foobar', 3) # 'foobar'\n</code></pre>\n<hr>\n<hr>\n<h3>Pads a given number to the specified length.</h3>\n<ul>\n<li>Use <code>str.zfill()</code> to pad the number to the specified length, after converting it to a string.</li>\n</ul>\n<pre><code class=\"language-py\">def pad_number(n, l):\n  return str(n).zfill(l)\n</code></pre>\n<pre><code class=\"language-py\">pad_number(1234, 6); # '001234'\n</code></pre>\n<hr>\n<hr>\n<h3>Checks if the given string is a palindrome.</h3>\n<ul>\n<li>Use <code>str.lower()</code> and <code>re.sub()</code> to convert to lowercase and remove non-alphanumeric characters from the given string.</li>\n<li>Then, compare the new string with its reverse, using slice notation.</li>\n</ul>\n<pre><code class=\"language-py\">from re import sub\n\ndef palindrome(s):\n  s = sub('[\\W_]', '', s.lower())\n  return s == s[::-1]\n</code></pre>\n<pre><code class=\"language-py\">palindrome('taco cat') # True\n</code></pre>\n<hr>\n<hr>\n<h3>Converts a list of dictionaries into a list of values corresponding to the specified <code>key</code>.</h3>\n<ul>\n<li>Use a list comprehension and <code>dict.get()</code> to get the value of <code>key</code> for each dictionary in <code>lst</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def pluck(lst, key):\n  return [x.get(key) for x in lst]\n</code></pre>\n<pre><code class=\"language-py\">simpsons = [\n  { 'name': 'lisa', 'age': 8 },\n  { 'name': 'homer', 'age': 36 },\n  { 'name': 'marge', 'age': 34 },\n  { 'name': 'bart', 'age': 10 }\n]\npluck(simpsons, 'age') # [8, 36, 34, 10]\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the powerset of a given iterable.</h3>\n<ul>\n<li>Use <code>list()</code> to convert the given value to a list.</li>\n<li>Use <code>range()</code> and <code>itertools.combinations()</code> to create a generator that returns all subsets.</li>\n<li>Use <code>itertools.chain.from_iterable()</code> and <code>list()</code> to consume the generator and return a list.</li>\n</ul>\n<pre><code class=\"language-py\">from itertools import chain, combinations\n\ndef powerset(iterable):\n  s = list(iterable)\n  return list(chain.from_iterable(combinations(s, r) for r in range(len(s)+1)))\n</code></pre>\n<pre><code class=\"language-py\">powerset([1, 2]) # [(), (1,), (2,), (1, 2)]\n</code></pre>\n<hr>\n<hr>\n<h3>Converts an angle from radians to degrees.</h3>\n<ul>\n<li>Use <code>math.pi</code> and the radian to degree formula to convert the angle from radians to degrees.</li>\n</ul>\n<pre><code class=\"language-py\">from math import pi\n\ndef rads_to_degrees(rad):\n  return (rad * 180.0) / pi\n</code></pre>\n<pre><code class=\"language-py\">from math import pi\n\nrads_to_degrees(pi / 2) # 90.0\n</code></pre>\n<hr>\n<hr>\n<h3>Reverses a list or a string.</h3>\n<ul>\n<li>Use slice notation to reverse the list or string.</li>\n</ul>\n<pre><code class=\"language-py\">def reverse(itr):\n  return itr[::-1]\n</code></pre>\n<pre><code class=\"language-py\">reverse([1, 2, 3]) # [3, 2, 1]\nreverse('snippet') # 'teppins'\n</code></pre>\n<hr>\n<hr>\n<h3>Reverses a number.</h3>\n<ul>\n<li>Use <code>str()</code> to convert the number to a string, slice notation to reverse it and <code>str.replace()</code> to remove the sign.</li>\n<li>Use <code>float()</code> to convert the result to a number and <code>math.copysign()</code> to copy the original sign.</li>\n</ul>\n<pre><code class=\"language-py\">from math import copysign\n\ndef reverse_number(n):\n  return copysign(float(str(n)[::-1].replace('-', '')), n)\n</code></pre>\n<pre><code class=\"language-py\">reverse_number(981) # 189\nreverse_number(-500) # -5\nreverse_number(73.6) # 6.37\nreverse_number(-5.23) # -32.5\n</code></pre>\n<hr>\n<hr>\n<h3>Converts the values of RGB components to a hexadecimal color code.</h3>\n<ul>\n<li>Create a placeholder for a zero-padded hexadecimal value using <code>'{:02X}'</code> and copy it three times.</li>\n<li>Use <code>str.format()</code> on the resulting string to replace the placeholders with the given values.</li>\n</ul>\n<pre><code class=\"language-py\">def rgb_to_hex(r, g, b):\n  return ('{:02X}' * 3).format(r, g, b)\n</code></pre>\n<pre><code class=\"language-py\">rgb_to_hex(255, 165, 1) # 'FFA501'\n</code></pre>\n<hr>\n<hr>\n<h3>Moves the specified amount of elements to the start of the list.</h3>\n<ul>\n<li>Use slice notation to get the two slices of the list and combine them before returning.</li>\n</ul>\n<pre><code class=\"language-py\">def roll(lst, offset):\n  return lst[-offset:] + lst[:-offset]\n</code></pre>\n<pre><code class=\"language-py\">roll([1, 2, 3, 4, 5], 2) # [4, 5, 1, 2, 3]\nroll([1, 2, 3, 4, 5], -2) # [3, 4, 5, 1, 2]\n</code></pre>\n<hr>\n<hr>\n<h3>Returns a random element from a list.</h3>\n<ul>\n<li>Use <code>random.choice()</code> to get a random element from <code>lst</code>.</li>\n</ul>\n<pre><code class=\"language-py\">from random import choice\n\ndef sample(lst):\n  return choice(lst)\n</code></pre>\n<pre><code class=\"language-py\">sample([3, 7, 9, 11]) # 9\n</code></pre>\n<hr>\n<hr>\n<h3>Randomizes the order of the values of an list, returning a new list.</h3>\n<ul>\n<li>Uses the <a href=\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\">Fisher-Yates algorithm</a> to reorder the elements of the list.</li>\n<li><a href=\"https://docs.python.org/3/library/random.html#random.shuffle\"><code>random.shuffle</code></a> provides similar functionality to this snippet.</li>\n</ul>\n<pre><code class=\"language-py\">from copy import deepcopy\nfrom random import randint\n\ndef shuffle(lst):\n  temp_lst = deepcopy(lst)\n  m = len(temp_lst)\n  while (m):\n    m -= 1\n    i = randint(0, m)\n    temp_lst[m], temp_lst[i] = temp_lst[i], temp_lst[m]\n  return temp_lst\n</code></pre>\n<pre><code class=\"language-py\">foo = [1, 2, 3]\nshuffle(foo) # [2, 3, 1], foo = [1, 2, 3]\n</code></pre>\n<hr>\n<hr>\n<h3>Returns a list of elements that exist in both lists.</h3>\n<ul>\n<li>Use a list comprehension on <code>a</code> to only keep values contained in both lists.</li>\n</ul>\n<pre><code class=\"language-py\">def similarity(a, b):\n  return [item for item in a if item in b]\n</code></pre>\n<pre><code class=\"language-py\">similarity([1, 2, 3], [1, 2, 4]) # [1, 2]\n</code></pre>\n<hr>\n<hr>\n<h3>Converts a string to a URL-friendly slug.</h3>\n<ul>\n<li>Use <code>str.lower()</code> and <code>str.strip()</code> to normalize the input string.</li>\n<li>Use <code>re.sub()</code> to to replace spaces, dashes and underscores with <code>-</code> and remove special characters.</li>\n</ul>\n<pre><code class=\"language-py\">import re\n\ndef slugify(s):\n  s = s.lower().strip()\n  s = re.sub(r'[^\\w\\s-]', '', s)\n  s = re.sub(r'[\\s_-]+', '-', s)\n  s = re.sub(r'^-+|-+$', '', s)\n  return s\n</code></pre>\n<pre><code class=\"language-py\">slugify('Hello World!') # 'hello-world'\n</code></pre>\n<hr>\n<hr>\n<h3>Converts a string to snake case.</h3>\n<ul>\n<li>Use <code>re.sub()</code> to match all words in the string, <code>str.lower()</code> to lowercase them.</li>\n<li>Use <code>re.sub()</code> to replace any <code>-</code> characters with spaces.</li>\n<li>Finally, use <code>str.join()</code> to combine all words using <code>-</code> as the separator.</li>\n</ul>\n<pre><code class=\"language-py\">from re import sub\n\ndef snake(s):\n  return '_'.join(\n    sub('([A-Z][a-z]+)', r' \\1',\n    sub('([A-Z]+)', r' \\1',\n    s.replace('-', ' '))).split()).lower()\n</code></pre>\n<pre><code class=\"language-py\">snake('camelCase') # 'camel_case'\nsnake('some text') # 'some_text'\nsnake('some-mixed_string With spaces_underscores-and-hyphens')\n# 'some_mixed_string_with_spaces_underscores_and_hyphens'\nsnake('AllThe-small Things') # 'all_the_small_things'\n</code></pre>\n<hr>\n<hr>\n<h3>Checks if the provided function returns <code>True</code> for at least one element in the list.</h3>\n<ul>\n<li>Use <code>any()</code> in combination with <code>map()</code> to check if <code>fn</code> returns <code>True</code> for any element in the list.</li>\n</ul>\n<pre><code class=\"language-py\">def some(lst, fn = lambda x: x):\n  return any(map(fn, lst))\n</code></pre>\n<pre><code class=\"language-py\">some([0, 1, 2, 0], lambda x: x >= 2 ) # True\nsome([0, 0, 1, 0]) # True\n</code></pre>\n<hr>\n<hr>\n<h3>Sorts one list based on another list containing the desired indexes.</h3>\n<ul>\n<li>Use <code>zip()</code> and <code>sorted()</code> to combine and sort the two lists, based on the values of <code>indexes</code>.</li>\n<li>Use a list comprehension to get the first element of each pair from the result.</li>\n<li>Use the <code>reverse</code> parameter in <code>sorted()</code> to sort the dictionary in reverse order, based on the third argument.</li>\n</ul>\n<pre><code class=\"language-py\">def sort_by_indexes(lst, indexes, reverse=False):\n  return [val for (_, val) in sorted(zip(indexes, lst), key=lambda x: \\\n          x[0], reverse=reverse)]\n</code></pre>\n<pre><code class=\"language-py\">a = ['eggs', 'bread', 'oranges', 'jam', 'apples', 'milk']\nb = [3, 2, 6, 4, 1, 5]\nsort_by_indexes(a, b) # ['apples', 'bread', 'eggs', 'jam', 'milk', 'oranges']\nsort_by_indexes(a, b, True)\n# ['oranges', 'milk', 'jam', 'eggs', 'bread', 'apples']\n</code></pre>\n<hr>\n<hr>\n<h3>Sorts the given dictionary by key.</h3>\n<ul>\n<li>Use <code>dict.items()</code> to get a list of tuple pairs from <code>d</code> and sort it using <code>sorted()</code>.</li>\n<li>Use <code>dict()</code> to convert the sorted list back to a dictionary.</li>\n<li>Use the <code>reverse</code> parameter in <code>sorted()</code> to sort the dictionary in reverse order, based on the second argument.</li>\n</ul>\n<pre><code class=\"language-py\">def sort_dict_by_key(d, reverse = False):\n  return dict(sorted(d.items(), reverse = reverse))\n</code></pre>\n<pre><code class=\"language-py\">d = {'one': 1, 'three': 3, 'five': 5, 'two': 2, 'four': 4}\nsort_dict_by_key(d) # {'five': 5, 'four': 4, 'one': 1, 'three': 3, 'two': 2}\nsort_dict_by_key(d, True)\n# {'two': 2, 'three': 3, 'one': 1, 'four': 4, 'five': 5}\n</code></pre>\n<hr>\n<hr>\n<h3>Sorts the given dictionary by value.</h3>\n<ul>\n<li>Use <code>dict.items()</code> to get a list of tuple pairs from <code>d</code> and sort it using a lambda function and <code>sorted()</code>.</li>\n<li>Use <code>dict()</code> to convert the sorted list back to a dictionary.</li>\n<li>Use the <code>reverse</code> parameter in <code>sorted()</code> to sort the dictionary in reverse order, based on the second argument.</li>\n<li><strong>⚠️ NOTICE:</strong> Dictionary values must be of the same type.</li>\n</ul>\n<pre><code class=\"language-py\">def sort_dict_by_value(d, reverse = False):\n  return dict(sorted(d.items(), key = lambda x: x[1], reverse = reverse))\n</code></pre>\n<pre><code class=\"language-py\">d = {'one': 1, 'three': 3, 'five': 5, 'two': 2, 'four': 4}\nsort_dict_by_value(d) # {'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5}\nsort_dict_by_value(d, True)\n# {'five': 5, 'four': 4, 'three': 3, 'two': 2, 'one': 1}\n</code></pre>\n<hr>\n<hr>\n<h3>Splits a multiline string into a list of lines.</h3>\n<ul>\n<li>Use <code>str.split()</code> and <code>'\\n'</code> to match line breaks and create a list.</li>\n<li><a href=\"https://docs.python.org/3/library/stdtypes.html#str.splitlines\"><code>str.splitlines()</code></a> provides similar functionality to this snippet.</li>\n</ul>\n<pre><code class=\"language-py\">def split_lines(s):\n  return s.split('\\n')\n</code></pre>\n<pre><code class=\"language-py\">split_lines('This\\nis a\\nmultiline\\nstring.\\n')\n# ['This', 'is a', 'multiline', 'string.' , '']\n</code></pre>\n<hr>\n<hr>\n<h3>Flattens a list, by spreading its elements into a new list.</h3>\n<ul>\n<li>Loop over elements, use <code>list.extend()</code> if the element is a list, <code>list.append()</code> otherwise.</li>\n</ul>\n<pre><code class=\"language-py\">def spread(arg):\n  ret = []\n  for i in arg:\n    ret.extend(i) if isinstance(i, list) else ret.append(i)\n  return ret\n</code></pre>\n<pre><code class=\"language-py\">spread([1, 2, 3, [4, 5, 6], [7], 8, 9]) # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n<hr>\n<hr>\n<h3>Calculates the sum of a list, after mapping each element to a value using the provided function.</h3>\n<ul>\n<li>Use <code>map()</code> with <code>fn</code> to map each element to a value using the provided function.</li>\n<li>Use <code>sum()</code> to return the sum of the values.</li>\n</ul>\n<pre><code class=\"language-py\">def sum_by(lst, fn):\n  return sum(map(fn, lst))\n</code></pre>\n<pre><code class=\"language-py\">sum_by([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n']) # 20\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the sum of the powers of all the numbers from <code>start</code> to <code>end</code> (both inclusive).</h3>\n<ul>\n<li>Use <code>range()</code> in combination with a list comprehension to create a list of elements in the desired range raised to the given <code>power</code>.</li>\n<li>Use <code>sum()</code> to add the values together.</li>\n<li>Omit the second argument, <code>power</code>, to use a default power of <code>2</code>.</li>\n<li>Omit the third argument, <code>start</code>, to use a default starting value of <code>1</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def sum_of_powers(end, power = 2, start = 1):\n  return sum([(i) ** power for i in range(start, end + 1)])\n</code></pre>\n<pre><code class=\"language-py\">sum_of_powers(10) # 385\nsum_of_powers(10, 3) # 3025\nsum_of_powers(10, 3, 5) # 2925\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the symmetric difference between two iterables, without filtering out duplicate values.</h3>\n<ul>\n<li>Create a <code>set</code> from each list.</li>\n<li>Use a list comprehension on each of them to only keep values not contained in the previously created set of the other.</li>\n</ul>\n<pre><code class=\"language-py\">def symmetric_difference(a, b):\n  (_a, _b) = (set(a), set(b))\n  return [item for item in a if item not in _b] + [item for item in b\n          if item not in _a]\n</code></pre>\n<pre><code class=\"language-py\">symmetric_difference([1, 2, 3], [1, 2, 4]) # [3, 4]\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the symmetric difference between two lists, after applying the provided function to each list element of both.</h3>\n<ul>\n<li>Create a <code>set</code> by applying <code>fn</code> to each element in every list.</li>\n<li>Use a list comprehension in combination with <code>fn</code> on each of them to only keep values not contained in the previously created set of the other.</li>\n</ul>\n<pre><code class=\"language-py\">def symmetric_difference_by(a, b, fn):\n  (_a, _b) = (set(map(fn, a)), set(map(fn, b)))\n  return [item for item in a if fn(item) not in _b] + [item\n          for item in b if fn(item) not in _a]\n</code></pre>\n<pre><code class=\"language-py\">from math import floor\n\nsymmetric_difference_by([2.1, 1.2], [2.3, 3.4], floor) # [1.2, 3.4]\n</code></pre>\n<hr>\n<hr>\n<h3>Returns all elements in a list except for the first one.</h3>\n<ul>\n<li>Use slice notation to return the last element if the list's length is more than <code>1</code>.</li>\n<li>Otherwise, return the whole list.</li>\n</ul>\n<pre><code class=\"language-py\">def tail(lst):\n  return lst[1:] if len(lst) > 1 else lst\n</code></pre>\n<pre><code class=\"language-py\">tail([1, 2, 3]) # [2, 3]\ntail([1]) # [1]\n</code></pre>\n<hr>\n<hr>\n<h3>Returns a list with <code>n</code> elements removed from the beginning.</h3>\n<ul>\n<li>Use slice notation to create a slice of the list with <code>n</code> elements taken from the beginning.</li>\n</ul>\n<pre><code class=\"language-py\">def take(itr, n = 1):\n  return itr[:n]\n</code></pre>\n<pre><code class=\"language-py\">take([1, 2, 3], 5) # [1, 2, 3]\ntake([1, 2, 3], 0) # []\n</code></pre>\n<hr>\n<hr>\n<h3>Returns a list with <code>n</code> elements removed from the end.</h3>\n<ul>\n<li>Use slice notation to create a slice of the list with <code>n</code> elements taken from the end.</li>\n</ul>\n<pre><code class=\"language-py\">def take_right(itr, n = 1):\n  return itr[-n:]\n</code></pre>\n<pre><code class=\"language-py\">take_right([1, 2, 3], 2) # [2, 3]\ntake_right([1, 2, 3]) # [3]\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the binary representation of the given number.</h3>\n<ul>\n<li>Use <code>bin()</code> to convert a given decimal number into its binary equivalent.</li>\n</ul>\n<pre><code class=\"language-py\">def to_binary(n):\n  return bin(n)\n</code></pre>\n<pre><code class=\"language-py\">to_binary(100) # 0b1100100\n</code></pre>\n<hr>\n<hr>\n<h3>Combines two lists into a dictionary, where the elements of the first one serve as the keys and the elements of the second one serve as the values.</h3>\n<p>The values of the first list need to be unique and hashable.</p>\n<ul>\n<li>Use <code>zip()</code> in combination with <code>dict()</code> to combine the values of the two lists into a dictionary.</li>\n</ul>\n<pre><code class=\"language-py\">def to_dictionary(keys, values):\n  return dict(zip(keys, values))\n</code></pre>\n<pre><code class=\"language-py\">to_dictionary(['a', 'b'], [1, 2]) # { a: 1, b: 2 }\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the hexadecimal representation of the given number.</h3>\n<ul>\n<li>Use <code>hex()</code> to convert a given decimal number into its hexadecimal equivalent.</li>\n</ul>\n<pre><code class=\"language-py\">def to_hex(dec):\n  return hex(dec)\n</code></pre>\n<pre><code class=\"language-py\">to_hex(41) # 0x29\nto_hex(332) # 0x14c\n</code></pre>\n<hr>\n<hr>\n<h3>Converts a date to its ISO-8601 representation.</h3>\n<ul>\n<li>Use <code>datetime.datetime.isoformat()</code> to convert the given <code>datetime.datetime</code> object to an ISO-8601 date.</li>\n</ul>\n<pre><code class=\"language-py\">from datetime import datetime\n\ndef to_iso_date(d):\n  return d.isoformat()\n</code></pre>\n<pre><code class=\"language-py\">from datetime import datetime\n\nto_iso_date(datetime(2020, 10, 25)) # 2020-10-25T00:00:00\n</code></pre>\n<hr>\n<hr>\n<h3>Converts an integer to its roman numeral representation.</h3>\n<p>Accepts value between <code>1</code> and <code>3999</code> (both inclusive).</p>\n<ul>\n<li>Create a lookup list containing tuples in the form of (roman value, integer).</li>\n<li>Use a <code>for</code> loop to iterate over the values in <code>lookup</code>.</li>\n<li>Use <code>divmod()</code> to update <code>num</code> with the remainder, adding the roman numeral representation to the result.</li>\n</ul>\n<pre><code class=\"language-py\">def to_roman_numeral(num):\n  lookup = [\n    (1000, 'M'),\n    (900, 'CM'),\n    (500, 'D'),\n    (400, 'CD'),\n    (100, 'C'),\n    (90, 'XC'),\n    (50, 'L'),\n    (40, 'XL'),\n    (10, 'X'),\n    (9, 'IX'),\n    (5, 'V'),\n    (4, 'IV'),\n    (1, 'I'),\n  ]\n  res = ''\n  for (n, roman) in lookup:\n    (d, num) = divmod(num, n)\n    res += roman * d\n  return res\n</code></pre>\n<pre><code class=\"language-py\">to_roman_numeral(3) # 'III'\nto_roman_numeral(11) # 'XI'\nto_roman_numeral(1998) # 'MCMXCVIII'\n</code></pre>\n<hr>\n<hr>\n<h3>Transposes a two-dimensional list.</h3>\n<ul>\n<li>Use <code>*lst</code> to get the provided list as tuples.</li>\n<li>Use <code>zip()</code> in combination with <code>list()</code> to create the transpose of the given two-dimensional list.</li>\n</ul>\n<pre><code class=\"language-py\">def transpose(lst):\n  return list(zip(*lst))\n</code></pre>\n<pre><code class=\"language-py\">transpose([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\n# [(1, 4, 7, 10), (2, 5, 8, 11), (3, 6, 9, 12)]\n</code></pre>\n<hr>\n<hr>\n<h3>Builds a list, using an iterator function and an initial seed value.</h3>\n<ul>\n<li>The iterator function accepts one argument (<code>seed</code>) and must always return a list with two elements ([<code>value</code>, <code>nextSeed</code>]) or <code>False</code> to terminate.</li>\n<li>Use a generator function, <code>fn_generator</code>, that uses a <code>while</code> loop to call the iterator function and <code>yield</code> the <code>value</code> until it returns <code>False</code>.</li>\n<li>Use a list comprehension to return the list that is produced by the generator, using the iterator function.</li>\n</ul>\n<pre><code class=\"language-py\">def unfold(fn, seed):\n  def fn_generator(val):\n    while True:\n      val = fn(val[1])\n      if val == False: break\n      yield val[0]\n  return [i for i in fn_generator([None, seed])]\n</code></pre>\n<pre><code class=\"language-py\">f = lambda n: False if n > 50 else [-n, n + 10]\nunfold(f, 10) # [-10, -20, -30, -40, -50]\n</code></pre>\n<hr>\n<hr>\n<h3>Returns every element that exists in any of the two lists once.</h3>\n<ul>\n<li>Create a <code>set</code> with all values of <code>a</code> and <code>b</code> and convert to a <code>list</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def union(a, b):\n  return list(set(a + b))\n</code></pre>\n<pre><code class=\"language-py\">union([1, 2, 3], [4, 3, 2]) # [1, 2, 3, 4]\n</code></pre>\n<hr>\n<hr>\n<h3>Returns every element that exists in any of the two lists once, after applying the provided function to each element of both.</h3>\n<ul>\n<li>Create a <code>set</code> by applying <code>fn</code> to each element in <code>a</code>.</li>\n<li>Use a list comprehension in combination with <code>fn</code> on <code>b</code> to only keep values not contained in the previously created set, <code>_a</code>.</li>\n<li>Finally, create a <code>set</code> from the previous result and <code>a</code> and transform it into a <code>list</code></li>\n</ul>\n<pre><code class=\"language-py\">def union_by(a, b, fn):\n  _a = set(map(fn, a))\n  return list(set(a + [item for item in b if fn(item) not in _a]))\n</code></pre>\n<pre><code class=\"language-py\">from math import floor\n\nunion_by([2.1], [1.2, 2.3], floor) # [2.1, 1.2]\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the unique elements in a given list.</h3>\n<ul>\n<li>Create a <code>set</code> from the list to discard duplicated values, then return a <code>list</code> from it.</li>\n</ul>\n<pre><code class=\"language-py\">def unique_elements(li):\n  return list(set(li))\n</code></pre>\n<pre><code class=\"language-py\">unique_elements([1, 2, 2, 3, 4, 3]) # [1, 2, 3, 4]\n</code></pre>\n<hr>\n<hr>\n<h3>Returns a flat list of all the values in a flat dictionary.</h3>\n<ul>\n<li>Use <code>dict.values()</code> to return the values in the given dictionary.</li>\n<li>Return a <code>list()</code> of the previous result.</li>\n</ul>\n<pre><code class=\"language-py\">def values_only(flat_dict):\n  return list(flat_dict.values())\n</code></pre>\n<pre><code class=\"language-py\">ages = {\n  'Peter': 10,\n  'Isabel': 11,\n  'Anna': 9,\n}\nvalues_only(ages) # [10, 11, 9]\n</code></pre>\n<hr>\n<hr>\n<h3>Returns the weighted average of two or more numbers.</h3>\n<ul>\n<li>Use <code>sum()</code> to sum the products of the numbers by their weight and to sum the weights.</li>\n<li>Use <code>zip()</code> and a list comprehension to iterate over the pairs of values and weights.</li>\n</ul>\n<pre><code class=\"language-py\">def weighted_average(nums, weights):\n  return sum(x * y for x, y in zip(nums, weights)) / sum(weights)\n</code></pre>\n<pre><code class=\"language-py\">weighted_average([1, 2, 3], [0.6, 0.2, 0.3]) # 1.72727\n</code></pre>\n<hr>\n<hr>\n<h3>Tests a value, <code>x</code>, against a testing function, conditionally applying a function.</h3>\n<ul>\n<li>Check if the value of <code>predicate(x)</code> is <code>True</code> and if so return <code>when_true(x)</code>, otherwise return <code>x</code>.</li>\n</ul>\n<pre><code class=\"language-py\">def when(predicate, when_true):\n  return lambda x: when_true(x) if predicate(x) else x\n</code></pre>\n<pre><code class=\"language-py\">double_even_numbers = when(lambda x: x % 2 == 0, lambda x : x * 2)\ndouble_even_numbers(2) # 4\ndouble_even_numbers(1) # 1\n</code></pre>\n<hr>\n<hr>\n<h3>Converts a given string into a list of words.</h3>\n<ul>\n<li>Use <code>re.findall()</code> with the supplied <code>pattern</code> to find all matching substrings.</li>\n<li>Omit the second argument to use the default regexp, which matches alphanumeric and hyphens.</li>\n</ul>\n<pre><code class=\"language-py\">import re\n\ndef words(s, pattern = '[a-zA-Z-]+'):\n  return re.findall(pattern, s)\n</code></pre>\n<pre><code class=\"language-py\">words('I love Python!!') # ['I', 'love', 'Python']\nwords('python, javaScript &#x26; coffee') # ['python', 'javaScript', 'coffee']\nwords('build -q --out one-item', r'\\b[a-zA-Z-]+\\b')\n# ['build', 'q', 'out', 'one-item']\n</code></pre>"},{"url":"/docs/quick-reference/github-search/","relativePath":"docs/quick-reference/github-search.md","relativeDir":"docs/quick-reference","base":"github-search.md","name":"github-search","frontmatter":{"title":"Github Search","weight":1,"excerpt":"The Search API helps you search for the specific item you want to find. For example, you can find a user or a specific file in a repository. Think of it the way you think of performing a search on Google. Its designed to help you find the one result youre looking for (or maybe the few results youre looking for). Just like searching on Google, you sometimes want to see a few pages of search results so that you can find the item that best meets your needs. To satisfy that need, the GitHub Search API provides **up to 1,000 results for each search**.","seo":{"title":"The Search API helps you search for the specific item you want to find. For example, you can find a user or a specific file in a repository. Think of it the way you think of performing a search on Google. It's designed to help you find the one result you're looking for (or maybe the few results you're looking for). Just like searching on Google, you sometimes want to see a few pages of search results so that you can find the item that best meets your needs. To satisfy that need, the GitHub Search API provides **up to 1,000 results for each search**.:","description":"The Search API helps you search for the specific item you want to find. For example, you can find a user or a specific file in a repository. Think of it the way you think of performing a search on Google. It's designed to help you find the one result you're looking for (or maybe the few results you're looking for). Just like searching on Google, you sometimes want to see a few pages of search results so that you can find the item that best meets your needs. To satisfy that need, the GitHub Search API provides **up to 1,000 results for each search**.:","robots":[],"extra":[]},"template":"docs"},"html":"<h1>Search</h1>\n<blockquote>\n<p>The GitHub Search API lets you to search for the specific item efficiently.</p>\n</blockquote>\n<p>The GitHub Search API lets you to search for the specific item efficiently.</p>\n<p>The Search API helps you search for the specific item you want to find. For example, you can find a user or a specific file in a repository. Think of it the way you think of performing a search on Google. It's designed to help you find the one result you're looking for (or maybe the few results you're looking for). Just like searching on Google, you sometimes want to see a few pages of search results so that you can find the item that best meets your needs. To satisfy that need, the GitHub Search API provides <strong>up to 1,000 results for each search</strong>.</p>\n<p>You can narrow your search using queries. To learn more about the search query syntax, see \"<a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/en/rest/reference/search#constructing-a-search-query\">Constructing a search query</a>.\"</p>\n<h3><a href=\"#ranking-search-results\">Ranking search results</a></h3>\n<p>Unless another sort option is provided as a query parameter, results are sorted by best match in descending order. Multiple factors are combined to boost the most relevant item to the top of the result list.</p>\n<h3><a href=\"#rate-limit\">Rate limit</a></h3>\n<p>The Search API has a custom rate limit. For requests using <a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/en/rest#authentication\">Basic Authentication</a>, <a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/en/rest#authentication\">OAuth</a>, or <a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/en/rest#increasing-the-unauthenticated-rate-limit-for-oauth-applications\">client ID and secret</a>, you can make up to 30 requests per minute. For unauthenticated requests, the rate limit allows you to make up to 10 requests per minute.</p>\n<p>See the <a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/en/rest/reference/rate-limit\">rate limit documentation</a> for details on determining your current rate limit status.</p>\n<h3><a href=\"#constructing-a-search-query\">Constructing a search query</a></h3>\n<p>Each endpoint in the Search API uses <a href=\"https://en.wikipedia.org/wiki/Query_string\">query parameters</a> to perform searches on GitHub. See the individual endpoint in the Search API for an example that includes the endpoint and query parameters.</p>\n<p>A query can contain any combination of search qualifiers supported on GitHub. The format of the search query is:</p>\n<pre><code>SEARCH_KEYWORD_1 SEARCH_KEYWORD_N QUALIFIER_1 QUALIFIER_N\n</code></pre>\n<p>For example, if you wanted to search for all <em>repositories</em> owned by <code>defunkt</code> that contained the word <code>GitHub</code> and <code>Octocat</code> in the README file, you would use the following query with the <em>search repositories</em> endpoint:</p>\n<pre><code>GitHub Octocat in:readme user:defunkt\n</code></pre>\n<p><strong>Note:</strong> Be sure to use your language's preferred HTML-encoder to construct your query strings. For example:</p>\n<pre><code>const queryString = 'q=' + encodeURIComponent('GitHub Octocat in:readme user:defunkt');\n</code></pre>\n<p>See \"<a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/en/articles/searching-on-github\">Searching on GitHub</a>\" for a complete list of available qualifiers, their format, and an example of how to use them. For information about how to use operators to match specific quantities, dates, or to exclude results, see \"<a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/en/articles/understanding-the-search-syntax\">Understanding the search syntax</a>.\"</p>\n<h3><a href=\"#limitations-on-query-length\">Limitations on query length</a></h3>\n<p>The Search API does not support queries that:</p>\n<ul>\n<li>are longer than 256 characters (not including operators or qualifiers).</li>\n<li>have more than five <code>AND</code>, <code>OR</code>, or <code>NOT</code> operators.</li>\n</ul>\n<p>These search queries will return a \"Validation failed\" error message.</p>\n<h3><a href=\"#timeouts-and-incomplete-results\">Timeouts and incomplete results</a></h3>\n<p>To keep the Search API fast for everyone, we limit how long any individual query can run. For queries that <a href=\"https://developer.github.com/changes/2014-04-07-understanding-search-results-and-potential-timeouts/\">exceed the time limit</a>, the API returns the matches that were already found prior to the timeout, and the response has the <code>incomplete_results</code> property set to <code>true</code>.</p>\n<p>Reaching a timeout does not necessarily mean that search results are incomplete. More results might have been found, but also might not.</p>\n<h3><a href=\"#access-errors-or-missing-search-results\">Access errors or missing search results</a></h3>\n<p>You need to successfully authenticate and have access to the repositories in your search queries, otherwise, you'll see a <code>422 Unprocessible Entry</code> error with a \"Validation Failed\" message. For example, your search will fail if your query includes <code>repo:</code>, <code>user:</code>, or <code>org:</code> qualifiers that request resources that you don't have access to when you sign in on GitHub.</p>\n<p>When your search query requests multiple resources, the response will only contain the resources that you have access to and will <strong>not</strong> provide an error message listing the resources that were not returned.</p>\n<p>For example, if your search query searches for the <code>octocat/test</code> and <code>codertocat/test</code> repositories, but you only have access to <code>octocat/test</code>, your response will show search results for <code>octocat/test</code> and nothing for <code>codertocat/test</code>. This behavior mimics how search works on GitHub.</p>\n<h3><a href=\"#search-code\">Search code</a></h3>\n<p>Searches for query terms inside of a file. This method returns up to 100 results <a href=\"https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination\">per page</a>.</p>\n<p>When searching for code, you can get text match metadata for the file <strong>content</strong> and file <strong>path</strong> fields when you pass the <code>text-match</code> media type. For more details about how to receive highlighted search results, see <a href=\"https://docs.github.com/rest/reference/search#text-match-metadata\">Text match metadata</a>.</p>\n<p>For example, if you want to find the definition of the <code>addClass</code> function inside <a href=\"https://github.com/jquery/jquery\">jQuery</a> repository, your query would look something like this:</p>\n<p><code>q=addClass+in:file+language:js+repo:jquery/jquery</code></p>\n<p>This query searches for the keyword <code>addClass</code> within a file's contents. The query limits the search to files where the language is JavaScript in the <code>jquery/jquery</code> repository.</p>\n<h4><a href=\"#considerations-for-code-search\">Considerations for code search</a></h4>\n<p>Due to the complexity of searching code, there are a few restrictions on how searches are performed:</p>\n<ul>\n<li>Only the <em>default branch</em> is considered. In most cases, this will be the <code>master</code> branch.</li>\n<li>Only files smaller than 384 KB are searchable.</li>\n<li>\n<p>You must always include at least one search term when searching source code. For example, searching for <a href=\"https://github.com/search?utf8=%E2%9C%93&#x26;q=language%3Ago&#x26;type=Code\"><code>language:go</code></a> is not valid, while <a href=\"https://github.com/search?utf8=%E2%9C%93&#x26;q=amazing+language%3Ago&#x26;type=Code\"><code>amazing language:go</code></a> is.</p>\n<p>get /search/code</p>\n</li>\n</ul>\n<h4><a href=\"#search-code--parameters\">Parameters</a></h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>In</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>accept</code></td>\n<td>string</td>\n<td>header</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Setting to <code>application/vnd.github.v3+json</code> is recommended.</p>\n<p>|\n| <code>q</code> | string | query |</p>\n<p>The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see <a href=\"https://docs.github.com/rest/reference/search#constructing-a-search-query\">Constructing a search query</a>. See \"<a href=\"https://help.github.com/articles/searching-code/\">Searching code</a>\" for a detailed list of qualifiers.</p>\n<p>|\n| <code>sort</code> | string | query |</p>\n<p>Sorts the results of your query. Can only be <code>indexed</code>, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: <a href=\"https://docs.github.com/rest/reference/search#ranking-search-results\">best match</a></p>\n<p>|\n| <code>order</code> | string | query |</p>\n<p>Determines whether the first search result returned is the highest number of matches (<code>desc</code>) or lowest number of matches (<code>asc</code>). This parameter is ignored unless you provide <code>sort</code>.</p>\n<p>Default: <code>desc</code> |\n| <code>per_page</code> | integer | query |</p>\n<p>Results per page (max 100)</p>\n<p>Default: <code>30</code> |\n| <code>page</code> | integer | query |</p>\n<p>Page number of the results to fetch.</p>\n<p>Default: <code>1</code> |</p>\n<h4><a href=\"#search-code--code-samples\">Code samples</a></h4>\n<h5>Shell</h5>\n<pre><code>curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/search/code\n</code></pre>\n<h5>JavaScript (<a href=\"https://github.com/octokit/core.js#readme\">@octokit/core.js</a>)</h5>\n<pre><code>await octokit.request('GET /search/code', {\n  q: 'q'\n})\n</code></pre>\n<h4>Response</h4>\n<pre><code>Status: 200 OK\n\n{\n  \"total_count\": 7,\n  \"incomplete_results\": false,\n  \"items\": [\n    {\n      \"name\": \"classes.js\",\n      \"path\": \"src/attributes/classes.js\",\n      \"sha\": \"d7212f9dee2dcc18f084d7df8f417b80846ded5a\",\n      \"url\": \"https://api.github.com/repositories/167174/contents/src/attributes/classes.js?ref=825ac3773694e0cd23ee74895fd5aeb535b27da4\",\n      \"git_url\": \"https://api.github.com/repositories/167174/git/blobs/d7212f9dee2dcc18f084d7df8f417b80846ded5a\",\n      \"html_url\": \"https://github.com/jquery/jquery/blob/825ac3773694e0cd23ee74895fd5aeb535b27da4/src/attributes/classes.js\",\n      \"repository\": {\n        \"id\": 167174,\n        \"node_id\": \"MDEwOlJlcG9zaXRvcnkxNjcxNzQ=\",\n        \"name\": \"jquery\",\n        \"full_name\": \"jquery/jquery\",\n        \"owner\": {\n          \"login\": \"jquery\",\n          \"id\": 70142,\n          \"node_id\": \"MDQ6VXNlcjcwMTQy\",\n          \"avatar_url\": \"https://0.gravatar.com/avatar/6906f317a4733f4379b06c32229ef02f?d=https%3A%2F%2Fidenticons.github.com%2Ff426f04f2f9813718fb806b30e0093de.png\",\n          \"gravatar_id\": \"\",\n          \"url\": \"https://api.github.com/users/jquery\",\n          \"html_url\": \"https://github.com/jquery\",\n          \"followers_url\": \"https://api.github.com/users/jquery/followers\",\n          \"following_url\": \"https://api.github.com/users/jquery/following{/other_user}\",\n          \"gists_url\": \"https://api.github.com/users/jquery/gists{/gist_id}\",\n          \"starred_url\": \"https://api.github.com/users/jquery/starred{/owner}{/repo}\",\n          \"subscriptions_url\": \"https://api.github.com/users/jquery/subscriptions\",\n          \"organizations_url\": \"https://api.github.com/users/jquery/orgs\",\n          \"repos_url\": \"https://api.github.com/users/jquery/repos\",\n          \"events_url\": \"https://api.github.com/users/jquery/events{/privacy}\",\n          \"received_events_url\": \"https://api.github.com/users/jquery/received_events\",\n          \"type\": \"Organization\",\n          \"site_admin\": false\n        },\n        \"private\": false,\n        \"html_url\": \"https://github.com/jquery/jquery\",\n        \"description\": \"jQuery JavaScript Library\",\n        \"fork\": false,\n        \"url\": \"https://api.github.com/repos/jquery/jquery\",\n        \"forks_url\": \"https://api.github.com/repos/jquery/jquery/forks\",\n        \"keys_url\": \"https://api.github.com/repos/jquery/jquery/keys{/key_id}\",\n        \"collaborators_url\": \"https://api.github.com/repos/jquery/jquery/collaborators{/collaborator}\",\n        \"teams_url\": \"https://api.github.com/repos/jquery/jquery/teams\",\n        \"hooks_url\": \"https://api.github.com/repos/jquery/jquery/hooks\",\n        \"issue_events_url\": \"https://api.github.com/repos/jquery/jquery/issues/events{/number}\",\n        \"events_url\": \"https://api.github.com/repos/jquery/jquery/events\",\n        \"assignees_url\": \"https://api.github.com/repos/jquery/jquery/assignees{/user}\",\n        \"branches_url\": \"https://api.github.com/repos/jquery/jquery/branches{/branch}\",\n        \"tags_url\": \"https://api.github.com/repos/jquery/jquery/tags\",\n        \"blobs_url\": \"https://api.github.com/repos/jquery/jquery/git/blobs{/sha}\",\n        \"git_tags_url\": \"https://api.github.com/repos/jquery/jquery/git/tags{/sha}\",\n        \"git_refs_url\": \"https://api.github.com/repos/jquery/jquery/git/refs{/sha}\",\n        \"trees_url\": \"https://api.github.com/repos/jquery/jquery/git/trees{/sha}\",\n        \"statuses_url\": \"https://api.github.com/repos/jquery/jquery/statuses/{sha}\",\n        \"languages_url\": \"https://api.github.com/repos/jquery/jquery/languages\",\n        \"stargazers_url\": \"https://api.github.com/repos/jquery/jquery/stargazers\",\n        \"contributors_url\": \"https://api.github.com/repos/jquery/jquery/contributors\",\n        \"subscribers_url\": \"https://api.github.com/repos/jquery/jquery/subscribers\",\n        \"subscription_url\": \"https://api.github.com/repos/jquery/jquery/subscription\",\n        \"commits_url\": \"https://api.github.com/repos/jquery/jquery/commits{/sha}\",\n        \"git_commits_url\": \"https://api.github.com/repos/jquery/jquery/git/commits{/sha}\",\n        \"comments_url\": \"https://api.github.com/repos/jquery/jquery/comments{/number}\",\n        \"issue_comment_url\": \"https://api.github.com/repos/jquery/jquery/issues/comments/{number}\",\n        \"contents_url\": \"https://api.github.com/repos/jquery/jquery/contents/{+path}\",\n        \"compare_url\": \"https://api.github.com/repos/jquery/jquery/compare/{base}...{head}\",\n        \"merges_url\": \"https://api.github.com/repos/jquery/jquery/merges\",\n        \"archive_url\": \"https://api.github.com/repos/jquery/jquery/{archive_format}{/ref}\",\n        \"downloads_url\": \"https://api.github.com/repos/jquery/jquery/downloads\",\n        \"issues_url\": \"https://api.github.com/repos/jquery/jquery/issues{/number}\",\n        \"pulls_url\": \"https://api.github.com/repos/jquery/jquery/pulls{/number}\",\n        \"milestones_url\": \"https://api.github.com/repos/jquery/jquery/milestones{/number}\",\n        \"notifications_url\": \"https://api.github.com/repos/jquery/jquery/notifications{?since,all,participating}\",\n        \"labels_url\": \"https://api.github.com/repos/jquery/jquery/labels{/name}\",\n        \"deployments_url\": \"http://api.github.com/repos/octocat/Hello-World/deployments\",\n        \"releases_url\": \"http://api.github.com/repos/octocat/Hello-World/releases{/id}\"\n      },\n      \"score\": 1\n    }\n  ]\n}\n</code></pre>\n<h4>Not modified</h4>\n<pre><code>Status: 304 Not Modified\n</code></pre>\n<h4>Forbidden</h4>\n<pre><code>Status: 403 Forbidden\n</code></pre>\n<h4>Validation failed</h4>\n<pre><code>Status: 422 Unprocessable Entity\n</code></pre>\n<h4>Service unavailable</h4>\n<pre><code>Status: 503 Service Unavailable\n</code></pre>\n<h4>Notes</h4>\n<ul>\n<li><a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/en/developers/apps\">Works with GitHub Apps</a></li>\n</ul>\n<hr>\n<h3><a href=\"#search-commits\">Search commits</a></h3>\n<p>Find commits via various criteria on the default branch (usually <code>master</code>). This method returns up to 100 results <a href=\"https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination\">per page</a>.</p>\n<p>When searching for commits, you can get text match metadata for the <strong>message</strong> field when you provide the <code>text-match</code> media type. For more details about how to receive highlighted search results, see <a href=\"https://docs.github.com/rest/reference/search#text-match-metadata\">Text match metadata</a>.</p>\n<p>For example, if you want to find commits related to CSS in the <a href=\"https://github.com/octocat/Spoon-Knife\">octocat/Spoon-Knife</a> repository. Your query would look something like this:</p>\n<p><code>q=repo:octocat/Spoon-Knife+css</code></p>\n<pre><code>get /search/commits\n</code></pre>\n<h4><a href=\"#search-commits--parameters\">Parameters</a></h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>In</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>accept</code></td>\n<td>string</td>\n<td>header</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>This API is under preview and subject to change.<a href=\"#search-commits-preview-notices\">See preview notice</a></p>\n<p>|\n| <code>q</code> | string | query |</p>\n<p>The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see <a href=\"https://docs.github.com/rest/reference/search#constructing-a-search-query\">Constructing a search query</a>. See \"<a href=\"https://help.github.com/articles/searching-commits/\">Searching commits</a>\" for a detailed list of qualifiers.</p>\n<p>|\n| <code>sort</code> | string | query |</p>\n<p>Sorts the results of your query by <code>author-date</code> or <code>committer-date</code>. Default: <a href=\"https://docs.github.com/rest/reference/search#ranking-search-results\">best match</a></p>\n<p>|\n| <code>order</code> | string | query |</p>\n<p>Determines whether the first search result returned is the highest number of matches (<code>desc</code>) or lowest number of matches (<code>asc</code>). This parameter is ignored unless you provide <code>sort</code>.</p>\n<p>Default: <code>desc</code> |\n| <code>per_page</code> | integer | query |</p>\n<p>Results per page (max 100)</p>\n<p>Default: <code>30</code> |\n| <code>page</code> | integer | query |</p>\n<p>Page number of the results to fetch.</p>\n<p>Default: <code>1</code> |</p>\n<h4><a href=\"#search-commits--code-samples\">Code samples</a></h4>\n<h5>Shell</h5>\n<pre><code>curl \\\n  -H \"Accept: application/vnd.github.cloak-preview+json\" \\\n  https://api.github.com/search/commits\n</code></pre>\n<h5>JavaScript (<a href=\"https://github.com/octokit/core.js#readme\">@octokit/core.js</a>)</h5>\n<pre><code>await octokit.request('GET /search/commits', {\n  q: 'q',\n  mediaType: {\n    previews: [\n      'cloak'\n    ]\n  }\n})\n</code></pre>\n<h4>Response</h4>\n<pre><code>Status: 200 OK\n\n{\n  \"total_count\": 1,\n  \"incomplete_results\": false,\n  \"items\": [\n    {\n      \"url\": \"https://api.github.com/repos/octocat/Spoon-Knife/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f\",\n      \"sha\": \"bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f\",\n      \"html_url\": \"https://github.com/octocat/Spoon-Knife/commit/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f\",\n      \"comments_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f/comments\",\n      \"commit\": {\n        \"url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f\",\n        \"author\": {\n          \"date\": \"2014-02-04T14:38:36-08:00\",\n          \"name\": \"The Octocat\",\n          \"email\": \"octocat@nowhere.com\"\n        },\n        \"committer\": {\n          \"date\": \"2014-02-12T15:18:55-08:00\",\n          \"name\": \"The Octocat\",\n          \"email\": \"octocat@nowhere.com\"\n        },\n        \"message\": \"Create styles.css and updated README\",\n        \"tree\": {\n          \"url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/trees/a639e96f9038797fba6e0469f94a4b0cc459fa68\",\n          \"sha\": \"a639e96f9038797fba6e0469f94a4b0cc459fa68\"\n        },\n        \"comment_count\": 8\n      },\n      \"author\": {\n        \"login\": \"octocat\",\n        \"id\": 583231,\n        \"node_id\": \"MDQ6VXNlcjU4MzIzMQ==\",\n        \"avatar_url\": \"https://avatars.githubusercontent.com/u/583231?v=3\",\n        \"gravatar_id\": \"\",\n        \"url\": \"https://api.github.com/users/octocat\",\n        \"html_url\": \"https://github.com/octocat\",\n        \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n        \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n        \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n        \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n        \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n        \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n        \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n        \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n        \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n        \"type\": \"User\",\n        \"site_admin\": false\n      },\n      \"committer\": {},\n      \"parents\": [\n        {\n          \"url\": \"https://api.github.com/repos/octocat/Spoon-Knife/commits/a30c19e3f13765a3b48829788bc1cb8b4e95cee4\",\n          \"html_url\": \"https://github.com/octocat/Spoon-Knife/commit/a30c19e3f13765a3b48829788bc1cb8b4e95cee4\",\n          \"sha\": \"a30c19e3f13765a3b48829788bc1cb8b4e95cee4\"\n        }\n      ],\n      \"repository\": {\n        \"id\": 1300192,\n        \"node_id\": \"MDEwOlJlcG9zaXRvcnkxMzAwMTky\",\n        \"name\": \"Spoon-Knife\",\n        \"full_name\": \"octocat/Spoon-Knife\",\n        \"owner\": {\n          \"login\": \"octocat\",\n          \"id\": 583231,\n          \"node_id\": \"MDQ6VXNlcjU4MzIzMQ==\",\n          \"avatar_url\": \"https://avatars.githubusercontent.com/u/583231?v=3\",\n          \"gravatar_id\": \"\",\n          \"url\": \"https://api.github.com/users/octocat\",\n          \"html_url\": \"https://github.com/octocat\",\n          \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n          \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n          \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n          \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n          \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n          \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n          \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n          \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n          \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n          \"type\": \"User\",\n          \"site_admin\": false\n        },\n        \"private\": false,\n        \"html_url\": \"https://github.com/octocat/Spoon-Knife\",\n        \"description\": \"This repo is for demonstration purposes only.\",\n        \"fork\": false,\n        \"url\": \"https://api.github.com/repos/octocat/Spoon-Knife\",\n        \"forks_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/forks\",\n        \"keys_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/keys{/key_id}\",\n        \"collaborators_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/collaborators{/collaborator}\",\n        \"teams_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/teams\",\n        \"hooks_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/hooks\",\n        \"issue_events_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/issues/events{/number}\",\n        \"events_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/events\",\n        \"assignees_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/assignees{/user}\",\n        \"branches_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/branches{/branch}\",\n        \"tags_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/tags\",\n        \"blobs_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/blobs{/sha}\",\n        \"git_tags_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/tags{/sha}\",\n        \"git_refs_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/refs{/sha}\",\n        \"trees_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/trees{/sha}\",\n        \"statuses_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/statuses/{sha}\",\n        \"languages_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/languages\",\n        \"stargazers_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/stargazers\",\n        \"contributors_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/contributors\",\n        \"subscribers_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/subscribers\",\n        \"subscription_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/subscription\",\n        \"commits_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/commits{/sha}\",\n        \"git_commits_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/git/commits{/sha}\",\n        \"comments_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/comments{/number}\",\n        \"issue_comment_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/issues/comments{/number}\",\n        \"contents_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/contents/{+path}\",\n        \"compare_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/compare/{base}...{head}\",\n        \"merges_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/merges\",\n        \"archive_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/{archive_format}{/ref}\",\n        \"downloads_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/downloads\",\n        \"issues_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/issues{/number}\",\n        \"pulls_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/pulls{/number}\",\n        \"milestones_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/milestones{/number}\",\n        \"notifications_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/notifications{?since,all,participating}\",\n        \"labels_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/labels{/name}\",\n        \"releases_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/releases{/id}\",\n        \"deployments_url\": \"https://api.github.com/repos/octocat/Spoon-Knife/deployments\"\n      },\n      \"score\": 1,\n      \"node_id\": \"MDQ6VXNlcjU4MzIzMQ==\"\n    }\n  ]\n}\n</code></pre>\n<h4>Not modified</h4>\n<pre><code>Status: 304 Not Modified\n</code></pre>\n<h4>Preview header missing</h4>\n<pre><code>Status: 415 Unsupported Media Type\n</code></pre>\n<h4>Notes</h4>\n<ul>\n<li><a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/en/developers/apps\">Works with GitHub Apps</a></li>\n</ul>\n<h4>Preview notice</h4>\n<p>The Commit Search API is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2017-01-05-commit-search-api/\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code>application/vnd.github.cloak-preview\n</code></pre>\n<p>☝️This header is <strong>required</strong>.</p>\n<hr>\n<h3><a href=\"#search-issues-and-pull-requests\">Search issues and pull requests</a></h3>\n<p>Find issues by state and keyword. This method returns up to 100 results <a href=\"https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination\">per page</a>.</p>\n<p>When searching for issues, you can get text match metadata for the issue <strong>title</strong>, issue <strong>body</strong>, and issue <strong>comment body</strong> fields when you pass the <code>text-match</code> media type. For more details about how to receive highlighted search results, see <a href=\"https://docs.github.com/rest/reference/search#text-match-metadata\">Text match metadata</a>.</p>\n<p>For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.</p>\n<p><code>q=windows+label:bug+language:python+state:open&#x26;sort=created&#x26;order=asc</code></p>\n<p>This query searches for the keyword <code>windows</code>, within any open issue that is labeled as <code>bug</code>. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.</p>\n<p><strong>Note:</strong> For <a href=\"https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests\">user-to-server</a> GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the <code>is:issue</code> or <code>is:pull-request</code> qualifier will receive an HTTP <code>422 Unprocessable Entity</code> response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the <code>is</code> qualifier, see \"<a href=\"https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests\">Searching only issues or pull requests</a>.\"</p>\n<pre><code>get /search/issues\n</code></pre>\n<h4><a href=\"#search-issues-and-pull-requests--parameters\">Parameters</a></h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>In</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>accept</code></td>\n<td>string</td>\n<td>header</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Setting to <code>application/vnd.github.v3+json</code> is recommended.</p>\n<p>|\n| <code>q</code> | string | query |</p>\n<p>The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see <a href=\"https://docs.github.com/rest/reference/search#constructing-a-search-query\">Constructing a search query</a>. See \"<a href=\"https://help.github.com/articles/searching-issues-and-pull-requests/\">Searching issues and pull requests</a>\" for a detailed list of qualifiers.</p>\n<p>|\n| <code>sort</code> | string | query |</p>\n<p>Sorts the results of your query by the number of <code>comments</code>, <code>reactions</code>, <code>reactions-+1</code>, <code>reactions--1</code>, <code>reactions-smile</code>, <code>reactions-thinking_face</code>, <code>reactions-heart</code>, <code>reactions-tada</code>, or <code>interactions</code>. You can also sort results by how recently the items were <code>created</code> or <code>updated</code>, Default: <a href=\"https://docs.github.com/rest/reference/search#ranking-search-results\">best match</a></p>\n<p>|\n| <code>order</code> | string | query |</p>\n<p>Determines whether the first search result returned is the highest number of matches (<code>desc</code>) or lowest number of matches (<code>asc</code>). This parameter is ignored unless you provide <code>sort</code>.</p>\n<p>Default: <code>desc</code> |\n| <code>per_page</code> | integer | query |</p>\n<p>Results per page (max 100)</p>\n<p>Default: <code>30</code> |\n| <code>page</code> | integer | query |</p>\n<p>Page number of the results to fetch.</p>\n<p>Default: <code>1</code> |</p>\n<h4><a href=\"#search-issues-and-pull-requests--code-samples\">Code samples</a></h4>\n<h5>Shell</h5>\n<pre><code>curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/search/issues\n</code></pre>\n<h5>JavaScript (<a href=\"https://github.com/octokit/core.js#readme\">@octokit/core.js</a>)</h5>\n<pre><code>await octokit.request('GET /search/issues', {\n  q: 'q'\n})\n</code></pre>\n<h4>Response</h4>\n<pre><code>Status: 200 OK\n\n{\n  \"total_count\": 280,\n  \"incomplete_results\": false,\n  \"items\": [\n    {\n      \"url\": \"https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132\",\n      \"repository_url\": \"https://api.github.com/repos/batterseapower/pinyin-toolkit\",\n      \"labels_url\": \"https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/labels{/name}\",\n      \"comments_url\": \"https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/comments\",\n      \"events_url\": \"https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/events\",\n      \"html_url\": \"https://github.com/batterseapower/pinyin-toolkit/issues/132\",\n      \"id\": 35802,\n      \"node_id\": \"MDU6SXNzdWUzNTgwMg==\",\n      \"number\": 132,\n      \"title\": \"Line Number Indexes Beyond 20 Not Displayed\",\n      \"user\": {\n        \"login\": \"Nick3C\",\n        \"id\": 90254,\n        \"node_id\": \"MDQ6VXNlcjkwMjU0\",\n        \"avatar_url\": \"https://secure.gravatar.com/avatar/934442aadfe3b2f4630510de416c5718?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png\",\n        \"gravatar_id\": \"\",\n        \"url\": \"https://api.github.com/users/Nick3C\",\n        \"html_url\": \"https://github.com/Nick3C\",\n        \"followers_url\": \"https://api.github.com/users/Nick3C/followers\",\n        \"following_url\": \"https://api.github.com/users/Nick3C/following{/other_user}\",\n        \"gists_url\": \"https://api.github.com/users/Nick3C/gists{/gist_id}\",\n        \"starred_url\": \"https://api.github.com/users/Nick3C/starred{/owner}{/repo}\",\n        \"subscriptions_url\": \"https://api.github.com/users/Nick3C/subscriptions\",\n        \"organizations_url\": \"https://api.github.com/users/Nick3C/orgs\",\n        \"repos_url\": \"https://api.github.com/users/Nick3C/repos\",\n        \"events_url\": \"https://api.github.com/users/Nick3C/events{/privacy}\",\n        \"received_events_url\": \"https://api.github.com/users/Nick3C/received_events\",\n        \"type\": \"User\",\n        \"site_admin\": true\n      },\n      \"labels\": [\n        {\n          \"id\": 4,\n          \"node_id\": \"MDU6TGFiZWw0\",\n          \"url\": \"https://api.github.com/repos/batterseapower/pinyin-toolkit/labels/bug\",\n          \"name\": \"bug\",\n          \"color\": \"ff0000\"\n        }\n      ],\n      \"state\": \"open\",\n      \"assignee\": null,\n      \"milestone\": {\n        \"url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1\",\n        \"html_url\": \"https://github.com/octocat/Hello-World/milestones/v1.0\",\n        \"labels_url\": \"https://api.github.com/repos/octocat/Hello-World/milestones/1/labels\",\n        \"id\": 1002604,\n        \"node_id\": \"MDk6TWlsZXN0b25lMTAwMjYwNA==\",\n        \"number\": 1,\n        \"state\": \"open\",\n        \"title\": \"v1.0\",\n        \"description\": \"Tracking milestone for version 1.0\",\n        \"creator\": {\n          \"login\": \"octocat\",\n          \"id\": 1,\n          \"node_id\": \"MDQ6VXNlcjE=\",\n          \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n          \"gravatar_id\": \"\",\n          \"url\": \"https://api.github.com/users/octocat\",\n          \"html_url\": \"https://github.com/octocat\",\n          \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n          \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n          \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n          \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n          \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n          \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n          \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n          \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n          \"received_events_url\": \"https://api.github.com/users/octocat/received_events\",\n          \"type\": \"User\",\n          \"site_admin\": false\n        },\n        \"open_issues\": 4,\n        \"closed_issues\": 8,\n        \"created_at\": \"2011-04-10T20:09:31Z\",\n        \"updated_at\": \"2014-03-03T18:58:10Z\",\n        \"closed_at\": \"2013-02-12T13:22:01Z\",\n        \"due_on\": \"2012-10-09T23:39:01Z\"\n      },\n      \"comments\": 15,\n      \"created_at\": \"2009-07-12T20:10:41Z\",\n      \"updated_at\": \"2009-07-19T09:23:43Z\",\n      \"closed_at\": null,\n      \"pull_request\": {\n        \"url\": \"https://api/github.com/repos/octocat/Hello-World/pull/1347\",\n        \"html_url\": \"https://github.com/octocat/Hello-World/pull/1347\",\n        \"diff_url\": \"https://github.com/octocat/Hello-World/pull/1347.diff\",\n        \"patch_url\": \"https://api.github.com/repos/octocat/Hello-World/pulls/1347\"\n      },\n      \"body\": \"...\",\n      \"score\": 1,\n      \"locked\": true,\n      \"author_association\": \"COLLABORATOR\"\n    }\n  ]\n}\n</code></pre>\n<h4>Not modified</h4>\n<pre><code>Status: 304 Not Modified\n</code></pre>\n<h4>Forbidden</h4>\n<pre><code>Status: 403 Forbidden\n</code></pre>\n<h4>Validation failed</h4>\n<pre><code>Status: 422 Unprocessable Entity\n</code></pre>\n<h4>Service unavailable</h4>\n<pre><code>Status: 503 Service Unavailable\n</code></pre>\n<h4>Notes</h4>\n<ul>\n<li><a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/en/developers/apps\">Works with GitHub Apps</a></li>\n</ul>\n<hr>\n<h3><a href=\"#search-labels\">Search labels</a></h3>\n<p>Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results <a href=\"https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination\">per page</a>.</p>\n<p>When searching for labels, you can get text match metadata for the label <strong>name</strong> and <strong>description</strong> fields when you pass the <code>text-match</code> media type. For more details about how to receive highlighted search results, see <a href=\"https://docs.github.com/rest/reference/search#text-match-metadata\">Text match metadata</a>.</p>\n<p>For example, if you want to find labels in the <code>linguist</code> repository that match <code>bug</code>, <code>defect</code>, or <code>enhancement</code>. Your query might look like this:</p>\n<p><code>q=bug+defect+enhancement&#x26;repository_id=64778136</code></p>\n<p>The labels that best match the query appear first in the search results.</p>\n<pre><code>get /search/labels\n</code></pre>\n<h4><a href=\"#search-labels--parameters\">Parameters</a></h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>In</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>accept</code></td>\n<td>string</td>\n<td>header</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Setting to <code>application/vnd.github.v3+json</code> is recommended.</p>\n<p>|\n| <code>repository_id</code> | integer | query |</p>\n<p>The id of the repository.</p>\n<p>|\n| <code>q</code> | string | query |</p>\n<p>The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see <a href=\"https://docs.github.com/rest/reference/search#constructing-a-search-query\">Constructing a search query</a>.</p>\n<p>|\n| <code>sort</code> | string | query |</p>\n<p>Sorts the results of your query by when the label was <code>created</code> or <code>updated</code>. Default: <a href=\"https://docs.github.com/rest/reference/search#ranking-search-results\">best match</a></p>\n<p>|\n| <code>order</code> | string | query |</p>\n<p>Determines whether the first search result returned is the highest number of matches (<code>desc</code>) or lowest number of matches (<code>asc</code>). This parameter is ignored unless you provide <code>sort</code>.</p>\n<p>Default: <code>desc</code> |\n| <code>per_page</code> | integer | query |</p>\n<p>Results per page (max 100)</p>\n<p>Default: <code>30</code> |\n| <code>page</code> | integer | query |</p>\n<p>Page number of the results to fetch.</p>\n<p>Default: <code>1</code> |</p>\n<h4><a href=\"#search-labels--code-samples\">Code samples</a></h4>\n<h5>Shell</h5>\n<pre><code>curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/search/labels\n</code></pre>\n<h5>JavaScript (<a href=\"https://github.com/octokit/core.js#readme\">@octokit/core.js</a>)</h5>\n<pre><code>await octokit.request('GET /search/labels', {\n  repository_id: 42,\n  q: 'q'\n})\n</code></pre>\n<h4>Response</h4>\n<pre><code>Status: 200 OK\n\n{\n  \"total_count\": 2,\n  \"incomplete_results\": false,\n  \"items\": [\n    {\n      \"id\": 418327088,\n      \"node_id\": \"MDU6TGFiZWw0MTgzMjcwODg=\",\n      \"url\": \"https://api.github.com/repos/octocat/linguist/labels/enhancement\",\n      \"name\": \"enhancement\",\n      \"color\": \"84b6eb\",\n      \"default\": true,\n      \"description\": \"New feature or request.\",\n      \"score\": 1\n    },\n    {\n      \"id\": 418327086,\n      \"node_id\": \"MDU6TGFiZWw0MTgzMjcwODY=\",\n      \"url\": \"https://api.github.com/repos/octocat/linguist/labels/bug\",\n      \"name\": \"bug\",\n      \"color\": \"ee0701\",\n      \"default\": true,\n      \"description\": \"Something isn't working.\",\n      \"score\": 1\n    }\n  ]\n}\n</code></pre>\n<h4>Not modified</h4>\n<pre><code>Status: 304 Not Modified\n</code></pre>\n<h4>Forbidden</h4>\n<pre><code>Status: 403 Forbidden\n</code></pre>\n<h4>Resource not found</h4>\n<pre><code>Status: 404 Not Found\n</code></pre>\n<h4>Validation failed</h4>\n<pre><code>Status: 422 Unprocessable Entity\n</code></pre>\n<h4>Notes</h4>\n<ul>\n<li><a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/en/developers/apps\">Works with GitHub Apps</a></li>\n</ul>\n<hr>\n<h3><a href=\"#search-repositories\">Search repositories</a></h3>\n<p>Find repositories via various criteria. This method returns up to 100 results <a href=\"https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination\">per page</a>.</p>\n<p>When searching for repositories, you can get text match metadata for the <strong>name</strong> and <strong>description</strong> fields when you pass the <code>text-match</code> media type. For more details about how to receive highlighted search results, see <a href=\"https://docs.github.com/rest/reference/search#text-match-metadata\">Text match metadata</a>.</p>\n<p>For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:</p>\n<p><code>q=tetris+language:assembly&#x26;sort=stars&#x26;order=desc</code></p>\n<p>This query searches for repositories with the word <code>tetris</code> in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.</p>\n<p>When you include the <code>mercy</code> preview header, you can also search for multiple topics by adding more <code>topic:</code> instances. For example, your query might look like this:</p>\n<p><code>q=topic:ruby+topic:rails</code></p>\n<pre><code>get /search/repositories\n</code></pre>\n<h4><a href=\"#search-repositories--parameters\">Parameters</a></h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>In</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>accept</code></td>\n<td>string</td>\n<td>header</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Setting to <code>application/vnd.github.v3+json</code> is recommended.<a href=\"#search-repositories-preview-notices\">See preview notice</a></p>\n<p>|\n| <code>q</code> | string | query |</p>\n<p>The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see <a href=\"https://docs.github.com/rest/reference/search#constructing-a-search-query\">Constructing a search query</a>. See \"<a href=\"https://help.github.com/articles/searching-for-repositories/\">Searching for repositories</a>\" for a detailed list of qualifiers.</p>\n<p>|\n| <code>sort</code> | string | query |</p>\n<p>Sorts the results of your query by number of <code>stars</code>, <code>forks</code>, or <code>help-wanted-issues</code> or how recently the items were <code>updated</code>. Default: <a href=\"https://docs.github.com/rest/reference/search#ranking-search-results\">best match</a></p>\n<p>|\n| <code>order</code> | string | query |</p>\n<p>Determines whether the first search result returned is the highest number of matches (<code>desc</code>) or lowest number of matches (<code>asc</code>). This parameter is ignored unless you provide <code>sort</code>.</p>\n<p>Default: <code>desc</code> |\n| <code>per_page</code> | integer | query |</p>\n<p>Results per page (max 100)</p>\n<p>Default: <code>30</code> |\n| <code>page</code> | integer | query |</p>\n<p>Page number of the results to fetch.</p>\n<p>Default: <code>1</code> |</p>\n<h4><a href=\"#search-repositories--code-samples\">Code samples</a></h4>\n<h5>Shell</h5>\n<pre><code>curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/search/repositories\n</code></pre>\n<h5>JavaScript (<a href=\"https://github.com/octokit/core.js#readme\">@octokit/core.js</a>)</h5>\n<pre><code>await octokit.request('GET /search/repositories', {\n  q: 'q'\n})\n</code></pre>\n<h4>Response</h4>\n<pre><code>Status: 200 OK\n\n{\n  \"total_count\": 40,\n  \"incomplete_results\": false,\n  \"items\": [\n    {\n      \"id\": 3081286,\n      \"node_id\": \"MDEwOlJlcG9zaXRvcnkzMDgxMjg2\",\n      \"name\": \"Tetris\",\n      \"full_name\": \"dtrupenn/Tetris\",\n      \"owner\": {\n        \"login\": \"dtrupenn\",\n        \"id\": 872147,\n        \"node_id\": \"MDQ6VXNlcjg3MjE0Nw==\",\n        \"avatar_url\": \"https://secure.gravatar.com/avatar/e7956084e75f239de85d3a31bc172ace?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png\",\n        \"gravatar_id\": \"\",\n        \"url\": \"https://api.github.com/users/dtrupenn\",\n        \"received_events_url\": \"https://api.github.com/users/dtrupenn/received_events\",\n        \"type\": \"User\",\n        \"html_url\": \"https://github.com/octocat\",\n        \"followers_url\": \"https://api.github.com/users/octocat/followers\",\n        \"following_url\": \"https://api.github.com/users/octocat/following{/other_user}\",\n        \"gists_url\": \"https://api.github.com/users/octocat/gists{/gist_id}\",\n        \"starred_url\": \"https://api.github.com/users/octocat/starred{/owner}{/repo}\",\n        \"subscriptions_url\": \"https://api.github.com/users/octocat/subscriptions\",\n        \"organizations_url\": \"https://api.github.com/users/octocat/orgs\",\n        \"repos_url\": \"https://api.github.com/users/octocat/repos\",\n        \"events_url\": \"https://api.github.com/users/octocat/events{/privacy}\",\n        \"site_admin\": true\n      },\n      \"private\": false,\n      \"html_url\": \"https://github.com/dtrupenn/Tetris\",\n      \"description\": \"A C implementation of Tetris using Pennsim through LC4\",\n      \"fork\": false,\n      \"url\": \"https://api.github.com/repos/dtrupenn/Tetris\",\n      \"created_at\": \"2012-01-01T00:31:50Z\",\n      \"updated_at\": \"2013-01-05T17:58:47Z\",\n      \"pushed_at\": \"2012-01-01T00:37:02Z\",\n      \"homepage\": \"https://github.com\",\n      \"size\": 524,\n      \"stargazers_count\": 1,\n      \"watchers_count\": 1,\n      \"language\": \"Assembly\",\n      \"forks_count\": 0,\n      \"open_issues_count\": 0,\n      \"master_branch\": \"master\",\n      \"default_branch\": \"master\",\n      \"score\": 1,\n      \"archive_url\": \"https://api.github.com/repos/dtrupenn/Tetris/{archive_format}{/ref}\",\n      \"assignees_url\": \"https://api.github.com/repos/dtrupenn/Tetris/assignees{/user}\",\n      \"blobs_url\": \"https://api.github.com/repos/dtrupenn/Tetris/git/blobs{/sha}\",\n      \"branches_url\": \"https://api.github.com/repos/dtrupenn/Tetris/branches{/branch}\",\n      \"collaborators_url\": \"https://api.github.com/repos/dtrupenn/Tetris/collaborators{/collaborator}\",\n      \"comments_url\": \"https://api.github.com/repos/dtrupenn/Tetris/comments{/number}\",\n      \"commits_url\": \"https://api.github.com/repos/dtrupenn/Tetris/commits{/sha}\",\n      \"compare_url\": \"https://api.github.com/repos/dtrupenn/Tetris/compare/{base}...{head}\",\n      \"contents_url\": \"https://api.github.com/repos/dtrupenn/Tetris/contents/{+path}\",\n      \"contributors_url\": \"https://api.github.com/repos/dtrupenn/Tetris/contributors\",\n      \"deployments_url\": \"https://api.github.com/repos/dtrupenn/Tetris/deployments\",\n      \"downloads_url\": \"https://api.github.com/repos/dtrupenn/Tetris/downloads\",\n      \"events_url\": \"https://api.github.com/repos/dtrupenn/Tetris/events\",\n      \"forks_url\": \"https://api.github.com/repos/dtrupenn/Tetris/forks\",\n      \"git_commits_url\": \"https://api.github.com/repos/dtrupenn/Tetris/git/commits{/sha}\",\n      \"git_refs_url\": \"https://api.github.com/repos/dtrupenn/Tetris/git/refs{/sha}\",\n      \"git_tags_url\": \"https://api.github.com/repos/dtrupenn/Tetris/git/tags{/sha}\",\n      \"git_url\": \"git:github.com/dtrupenn/Tetris.git\",\n      \"issue_comment_url\": \"https://api.github.com/repos/dtrupenn/Tetris/issues/comments{/number}\",\n      \"issue_events_url\": \"https://api.github.com/repos/dtrupenn/Tetris/issues/events{/number}\",\n      \"issues_url\": \"https://api.github.com/repos/dtrupenn/Tetris/issues{/number}\",\n      \"keys_url\": \"https://api.github.com/repos/dtrupenn/Tetris/keys{/key_id}\",\n      \"labels_url\": \"https://api.github.com/repos/dtrupenn/Tetris/labels{/name}\",\n      \"languages_url\": \"https://api.github.com/repos/dtrupenn/Tetris/languages\",\n      \"merges_url\": \"https://api.github.com/repos/dtrupenn/Tetris/merges\",\n      \"milestones_url\": \"https://api.github.com/repos/dtrupenn/Tetris/milestones{/number}\",\n      \"notifications_url\": \"https://api.github.com/repos/dtrupenn/Tetris/notifications{?since,all,participating}\",\n      \"pulls_url\": \"https://api.github.com/repos/dtrupenn/Tetris/pulls{/number}\",\n      \"releases_url\": \"https://api.github.com/repos/dtrupenn/Tetris/releases{/id}\",\n      \"ssh_url\": \"git@github.com:dtrupenn/Tetris.git\",\n      \"stargazers_url\": \"https://api.github.com/repos/dtrupenn/Tetris/stargazers\",\n      \"statuses_url\": \"https://api.github.com/repos/dtrupenn/Tetris/statuses/{sha}\",\n      \"subscribers_url\": \"https://api.github.com/repos/dtrupenn/Tetris/subscribers\",\n      \"subscription_url\": \"https://api.github.com/repos/dtrupenn/Tetris/subscription\",\n      \"tags_url\": \"https://api.github.com/repos/dtrupenn/Tetris/tags\",\n      \"teams_url\": \"https://api.github.com/repos/dtrupenn/Tetris/teams\",\n      \"trees_url\": \"https://api.github.com/repos/dtrupenn/Tetris/git/trees{/sha}\",\n      \"clone_url\": \"https://github.com/dtrupenn/Tetris.git\",\n      \"mirror_url\": \"git:git.example.com/dtrupenn/Tetris\",\n      \"hooks_url\": \"https://api.github.com/repos/dtrupenn/Tetris/hooks\",\n      \"svn_url\": \"https://svn.github.com/dtrupenn/Tetris\",\n      \"forks\": 1,\n      \"open_issues\": 1,\n      \"watchers\": 1,\n      \"has_issues\": true,\n      \"has_projects\": true,\n      \"has_pages\": true,\n      \"has_wiki\": true,\n      \"has_downloads\": true,\n      \"archived\": true,\n      \"disabled\": true,\n      \"license\": {\n        \"key\": \"mit\",\n        \"name\": \"MIT License\",\n        \"url\": \"https://api.github.com/licenses/mit\",\n        \"spdx_id\": \"MIT\",\n        \"node_id\": \"MDc6TGljZW5zZW1pdA==\",\n        \"html_url\": \"https://api.github.com/licenses/mit\"\n      }\n    }\n  ]\n}\n</code></pre>\n<h4>Not modified</h4>\n<pre><code>Status: 304 Not Modified\n</code></pre>\n<h4>Validation failed</h4>\n<pre><code>Status: 422 Unprocessable Entity\n</code></pre>\n<h4>Service unavailable</h4>\n<pre><code>Status: 503 Service Unavailable\n</code></pre>\n<h4>Notes</h4>\n<ul>\n<li><a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/en/developers/apps\">Works with GitHub Apps</a></li>\n</ul>\n<h4>Preview notice</h4>\n<p>The <code>topics</code> property for repositories on GitHub is currently available for developers to preview. To view the <code>topics</code> property in calls that return repository results, you must provide a custom <a href=\"https://docs.github.com/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code>application/vnd.github.mercy-preview+json\n</code></pre>\n<hr>\n<h3><a href=\"#search-topics\">Search topics</a></h3>\n<p>Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results <a href=\"https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination\">per page</a>. See \"<a href=\"https://help.github.com/articles/searching-topics/\">Searching topics</a>\" for a detailed list of qualifiers.</p>\n<p>When searching for topics, you can get text match metadata for the topic's <strong>short_description</strong>, <strong>description</strong>, <strong>name</strong>, or <strong>display_name</strong> field when you pass the <code>text-match</code> media type. For more details about how to receive highlighted search results, see <a href=\"https://docs.github.com/rest/reference/search#text-match-metadata\">Text match metadata</a>.</p>\n<p>For example, if you want to search for topics related to Ruby that are featured on <a href=\"https://github.com/topics\">https://github.com/topics</a>. Your query might look like this:</p>\n<p><code>q=ruby+is:featured</code></p>\n<p>This query searches for topics with the keyword <code>ruby</code> and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.</p>\n<pre><code>get /search/topics\n</code></pre>\n<h4><a href=\"#search-topics--parameters\">Parameters</a></h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>In</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>accept</code></td>\n<td>string</td>\n<td>header</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>This API is under preview and subject to change.<a href=\"#search-topics-preview-notices\">See preview notice</a></p>\n<p>|\n| <code>q</code> | string | query |</p>\n<p>The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see <a href=\"https://docs.github.com/rest/reference/search#constructing-a-search-query\">Constructing a search query</a>.</p>\n<p>|\n| <code>per_page</code> | integer | query |</p>\n<p>Results per page (max 100)</p>\n<p>Default: <code>30</code> |\n| <code>page</code> | integer | query |</p>\n<p>Page number of the results to fetch.</p>\n<p>Default: <code>1</code> |</p>\n<h4><a href=\"#search-topics--code-samples\">Code samples</a></h4>\n<h5>Shell</h5>\n<pre><code>curl \\\n  -H \"Accept: application/vnd.github.mercy-preview+json\" \\\n  https://api.github.com/search/topics\n</code></pre>\n<h5>JavaScript (<a href=\"https://github.com/octokit/core.js#readme\">@octokit/core.js</a>)</h5>\n<pre><code>await octokit.request('GET /search/topics', {\n  q: 'q',\n  mediaType: {\n    previews: [\n      'mercy'\n    ]\n  }\n})\n</code></pre>\n<h4>Response</h4>\n<pre><code>Status: 200 OK\n\n{\n  \"total_count\": 6,\n  \"incomplete_results\": false,\n  \"items\": [\n    {\n      \"name\": \"ruby\",\n      \"display_name\": \"Ruby\",\n      \"short_description\": \"Ruby is a scripting language designed for simplified object-oriented programming.\",\n      \"description\": \"Ruby was developed by Yukihiro \\\"Matz\\\" Matsumoto in 1995 with the intent of having an easily readable programming language. It is integrated with the Rails framework to create dynamic web-applications. Ruby's syntax is similar to that of Perl and Python.\",\n      \"created_by\": \"Yukihiro Matsumoto\",\n      \"released\": \"December 21, 1995\",\n      \"created_at\": \"2016-11-28T22:03:59Z\",\n      \"updated_at\": \"2017-10-30T18:16:32Z\",\n      \"featured\": true,\n      \"curated\": true,\n      \"score\": 1\n    },\n    {\n      \"name\": \"rails\",\n      \"display_name\": \"Rails\",\n      \"short_description\": \"Ruby on Rails (Rails) is a web application framework written in Ruby.\",\n      \"description\": \"Ruby on Rails (Rails) is a web application framework written in Ruby. It is meant to help simplify the building of complex websites.\",\n      \"created_by\": \"David Heinemeier Hansson\",\n      \"released\": \"December 13 2005\",\n      \"created_at\": \"2016-12-09T17:03:50Z\",\n      \"updated_at\": \"2017-10-30T16:20:19Z\",\n      \"featured\": true,\n      \"curated\": true,\n      \"score\": 1\n    },\n    {\n      \"name\": \"python\",\n      \"display_name\": \"Python\",\n      \"short_description\": \"Python is a dynamically typed programming language.\",\n      \"description\": \"Python is a dynamically typed programming language designed by Guido Van Rossum. Much like the programming language Ruby, Python was designed to be easily read by programmers. Because of its large following and many libraries, Python can be implemented and used to do anything from webpages to scientific research.\",\n      \"created_by\": \"Guido van Rossum\",\n      \"released\": \"February 20, 1991\",\n      \"created_at\": \"2016-12-07T00:07:02Z\",\n      \"updated_at\": \"2017-10-27T22:45:43Z\",\n      \"featured\": true,\n      \"curated\": true,\n      \"score\": 1\n    },\n    {\n      \"name\": \"jekyll\",\n      \"display_name\": \"Jekyll\",\n      \"short_description\": \"Jekyll is a simple, blog-aware static site generator.\",\n      \"description\": \"Jekyll is a blog-aware, site generator written in Ruby. It takes raw text files, runs it through a renderer and produces a publishable static website.\",\n      \"created_by\": \"Tom Preston-Werner\",\n      \"released\": \"2008\",\n      \"created_at\": \"2016-12-16T21:53:08Z\",\n      \"updated_at\": \"2017-10-27T19:00:24Z\",\n      \"featured\": true,\n      \"curated\": true,\n      \"score\": 1\n    },\n    {\n      \"name\": \"sass\",\n      \"display_name\": \"Sass\",\n      \"short_description\": \"Sass is a stable extension to classic CSS.\",\n      \"description\": \"Sass is a stylesheet language with a main implementation in Ruby. It is an extension of CSS that makes improvements to the old stylesheet format, such as being able to declare variables and using a cleaner nesting syntax.\",\n      \"created_by\": \"Hampton Catlin, Natalie Weizenbaum, Chris Eppstein\",\n      \"released\": \"November 28, 2006\",\n      \"created_at\": \"2016-12-16T21:53:45Z\",\n      \"updated_at\": \"2018-01-16T16:30:40Z\",\n      \"featured\": true,\n      \"curated\": true,\n      \"score\": 1\n    },\n    {\n      \"name\": \"homebrew\",\n      \"display_name\": \"Homebrew\",\n      \"short_description\": \"Homebrew is a package manager for macOS.\",\n      \"description\": \"Homebrew is a package manager for Apple's macOS operating system. It simplifies the installation of software and is popular in the Ruby on Rails community.\",\n      \"created_by\": \"Max Howell\",\n      \"released\": \"2009\",\n      \"created_at\": \"2016-12-17T20:30:44Z\",\n      \"updated_at\": \"2018-02-06T16:14:56Z\",\n      \"featured\": true,\n      \"curated\": true,\n      \"score\": 1\n    }\n  ]\n}\n</code></pre>\n<h4>Not modified</h4>\n<pre><code>Status: 304 Not Modified\n</code></pre>\n<h4>Preview header missing</h4>\n<pre><code>Status: 415 Unsupported Media Type\n</code></pre>\n<h4>Notes</h4>\n<ul>\n<li><a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/en/developers/apps\">Works with GitHub Apps</a></li>\n</ul>\n<h4>Preview notice</h4>\n<p>The <code>topics</code> property for repositories on GitHub is currently available for developers to preview. To view the <code>topics</code> property in calls that return repository results, you must provide a custom <a href=\"https://docs.github.com/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code>application/vnd.github.mercy-preview+json\n</code></pre>\n<p>☝️This header is <strong>required</strong>.</p>\n<hr>\n<h3><a href=\"#search-users\">Search users</a></h3>\n<p>Find users via various criteria. This method returns up to 100 results <a href=\"https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination\">per page</a>.</p>\n<p>When searching for users, you can get text match metadata for the issue <strong>login</strong>, <strong>email</strong>, and <strong>name</strong> fields when you pass the <code>text-match</code> media type. For more details about highlighting search results, see <a href=\"https://docs.github.com/rest/reference/search#text-match-metadata\">Text match metadata</a>. For more details about how to receive highlighted search results, see <a href=\"https://docs.github.com/rest/reference/search#text-match-metadata\">Text match metadata</a>.</p>\n<p>For example, if you're looking for a list of popular users, you might try this query:</p>\n<p><code>q=tom+repos:%3E42+followers:%3E1000</code></p>\n<p>This query searches for users with the name <code>tom</code>. The results are restricted to users with more than 42 repositories and over 1,000 followers.</p>\n<pre><code>get /search/users\n</code></pre>\n<h4><a href=\"#search-users--parameters\">Parameters</a></h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>In</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>accept</code></td>\n<td>string</td>\n<td>header</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Setting to <code>application/vnd.github.v3+json</code> is recommended.</p>\n<p>|\n| <code>q</code> | string | query |</p>\n<p>The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see <a href=\"https://docs.github.com/rest/reference/search#constructing-a-search-query\">Constructing a search query</a>. See \"<a href=\"https://help.github.com/articles/searching-users/\">Searching users</a>\" for a detailed list of qualifiers.</p>\n<p>|\n| <code>sort</code> | string | query |</p>\n<p>Sorts the results of your query by number of <code>followers</code> or <code>repositories</code>, or when the person <code>joined</code> GitHub. Default: <a href=\"https://docs.github.com/rest/reference/search#ranking-search-results\">best match</a></p>\n<p>|\n| <code>order</code> | string | query |</p>\n<p>Determines whether the first search result returned is the highest number of matches (<code>desc</code>) or lowest number of matches (<code>asc</code>). This parameter is ignored unless you provide <code>sort</code>.</p>\n<p>Default: <code>desc</code> |\n| <code>per_page</code> | integer | query |</p>\n<p>Results per page (max 100)</p>\n<p>Default: <code>30</code> |\n| <code>page</code> | integer | query |</p>\n<p>Page number of the results to fetch.</p>\n<p>Default: <code>1</code> |</p>\n<h4><a href=\"#search-users--code-samples\">Code samples</a></h4>\n<h5>Shell</h5>\n<pre><code>curl \\\n  -H \"Accept: application/vnd.github.v3+json\" \\\n  https://api.github.com/search/users\n</code></pre>\n<h5>JavaScript (<a href=\"https://github.com/octokit/core.js#readme\">@octokit/core.js</a>)</h5>\n<pre><code>await octokit.request('GET /search/users', {\n  q: 'q'\n})\n</code></pre>\n<h4>Response</h4>\n<pre><code>Status: 200 OK\n\n{\n  \"total_count\": 12,\n  \"incomplete_results\": false,\n  \"items\": [\n    {\n      \"login\": \"mojombo\",\n      \"id\": 1,\n      \"node_id\": \"MDQ6VXNlcjE=\",\n      \"avatar_url\": \"https://secure.gravatar.com/avatar/25c7c18223fb42a4c6ae1c8db6f50f9b?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png\",\n      \"gravatar_id\": \"\",\n      \"url\": \"https://api.github.com/users/mojombo\",\n      \"html_url\": \"https://github.com/mojombo\",\n      \"followers_url\": \"https://api.github.com/users/mojombo/followers\",\n      \"subscriptions_url\": \"https://api.github.com/users/mojombo/subscriptions\",\n      \"organizations_url\": \"https://api.github.com/users/mojombo/orgs\",\n      \"repos_url\": \"https://api.github.com/users/mojombo/repos\",\n      \"received_events_url\": \"https://api.github.com/users/mojombo/received_events\",\n      \"type\": \"User\",\n      \"score\": 1,\n      \"following_url\": \"https://api.github.com/users/mojombo/following{/other_user}\",\n      \"gists_url\": \"https://api.github.com/users/mojombo/gists{/gist_id}\",\n      \"starred_url\": \"https://api.github.com/users/mojombo/starred{/owner}{/repo}\",\n      \"events_url\": \"https://api.github.com/users/mojombo/events{/privacy}\",\n      \"site_admin\": true\n    }\n  ]\n}\n</code></pre>\n<h4>Not modified</h4>\n<pre><code>Status: 304 Not Modified\n</code></pre>\n<h4>Validation failed</h4>\n<pre><code>Status: 422 Unprocessable Entity\n</code></pre>\n<h4>Service unavailable</h4>\n<pre><code>Status: 503 Service Unavailable\n</code></pre>\n<h4>Notes</h4>\n<ul>\n<li><a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/en/developers/apps\">Works with GitHub Apps</a></li>\n</ul>\n<hr>\n<h3><a href=\"#text-match-metadata\">Text match metadata</a></h3>\n<p>On GitHub, you can use the context provided by code snippets and highlights in search results. The Search API offers additional metadata that allows you to highlight the matching search terms when displaying search results.</p>\n<p><img src=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/assets/images/text-match-search-api.png\" alt=\"code-snippet-highlighting\"></p>\n<p>Requests can opt to receive those text fragments in the response, and every fragment is accompanied by numeric offsets identifying the exact location of each matching search term.</p>\n<p>To get this metadata in your search results, specify the <code>text-match</code> media type in your <code>Accept</code> header.</p>\n<pre><code>application/vnd.github.v3.text-match+json\n</code></pre>\n<p>When you provide the <code>text-match</code> media type, you will receive an extra key in the JSON payload called <code>text_matches</code> that provides information about the position of your search terms within the text and the <code>property</code> that includes the search term. Inside the <code>text_matches</code> array, each object includes the following attributes:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>object_url</code></td>\n<td>The URL for the resource that contains a string property matching one of the search terms.</td>\n</tr>\n<tr>\n<td><code>object_type</code></td>\n<td>The name for the type of resource that exists at the given <code>object_url</code>.</td>\n</tr>\n<tr>\n<td><code>property</code></td>\n<td>The name of a property of the resource that exists at <code>object_url</code>. That property is a string that matches one of the search terms. (In the JSON returned from <code>object_url</code>, the full content for the <code>fragment</code> will be found in the property with this name.)</td>\n</tr>\n<tr>\n<td><code>fragment</code></td>\n<td>A subset of the value of <code>property</code>. This is the text fragment that matches one or more of the search terms.</td>\n</tr>\n<tr>\n<td><code>matches</code></td>\n<td>An array of one or more search terms that are present in <code>fragment</code>. The indices (i.e., \"offsets\") are relative to the fragment. (They are not relative to the <em>full</em> content of <code>property</code>.)</td>\n</tr>\n</tbody>\n</table>\n<h4><a href=\"#example\">Example</a></h4>\n<p>Using cURL, and the <a href=\"#search-issues-and-pull-requests\">example issue search</a> above, our API request would look like this:</p>\n<pre><code>curl -H 'Accept: application/vnd.github.v3.text-match+json' \\\n'https://api.github.com/search/issues?q=windows+label:bug+language:python+state:open&#x26;sort=created&#x26;order=asc'\n</code></pre>\n<p>The response will include a <code>text_matches</code> array for each search result. In the JSON below, we have two objects in the <code>text_matches</code> array.</p>\n<p>The first text match occurred in the <code>body</code> property of the issue. We see a fragment of text from the issue body. The search term (<code>windows</code>) appears twice within that fragment, and we have the indices for each occurrence.</p>\n<p>The second text match occurred in the <code>body</code> property of one of the issue's comments. We have the URL for the issue comment. And of course, we see a fragment of text from the comment body. The search term (<code>windows</code>) appears once within that fragment.</p>\n<pre><code>{\n  \"text_matches\": [\n    {\n      \"object_url\": \"https://api.github.com/repositories/215335/issues/132\",\n      \"object_type\": \"Issue\",\n      \"property\": \"body\",\n      \"fragment\": \"comprehensive windows font I know of).\\n\\nIf we can find a commonly distributed windows font that supports them then no problem (we can use html font tags) but otherwise the '(21)' style is probably better.\\n\",\n      \"matches\": [\n        {\n          \"text\": \"windows\",\n          \"indices\": [\n            14,\n            21\n          ]\n        },\n        {\n          \"text\": \"windows\",\n          \"indices\": [\n            78,\n            85\n          ]\n        }\n      ]\n    },\n    {\n      \"object_url\": \"https://api.github.com/repositories/215335/issues/comments/25688\",\n      \"object_type\": \"IssueComment\",\n      \"property\": \"body\",\n      \"fragment\": \" right after that are a bit broken IMHO :). I suppose we could have some hack that maxes out at whatever the font does...\\n\\nI'll check what the state of play is on Windows.\\n\",\n      \"matches\": [\n        {\n          \"text\": \"Windows\",\n          \"indices\": [\n            163,\n            170\n          ]\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"url":"/docs/react/react-docs/","relativePath":"docs/react/react-docs.md","relativeDir":"docs/react","base":"react-docs.md","name":"react-docs","frontmatter":{"title":"React Docs","weight":1,"excerpt":"In this guide, we will examine the building blocks of React apps: elements and components. Once you master them, you can create complex apps from small reusable pieces.","seo":{"title":"React","description":"We will examine the building blocks of React apps: elements and components. Once you master them, you can create complex apps from small reusable pieces.","robots":[],"extra":[{"name":"og:description","value":"We will examine the building blocks of React apps: elements and components. Once you master them, you can create complex apps from small reusable pieces.","keyName":"property","relativeUrl":false},{"name":"og:image","value":"images/react2-1cfd4b21.jpg","keyName":"property","relativeUrl":true},{"name":"og:type","value":"website","keyName":"property","relativeUrl":false},{"name":"twitter:title","value":"React Docs","keyName":"name","relativeUrl":false},{"name":"twitter:image","value":"images/react2-b4316710.jpg","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_image","keyName":"name","relativeUrl":false}],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>React:</h1>\n<p><img src=\"https://i.imgur.com/3fhEosP.png\" alt=\"React Lifecycles\"></p>\n<h1><strong>Hello World</strong></h1>\n<h1>The smallest React example looks like this:</h1>\n<pre><code class=\"language-js\">ReactDOM.render(&#x3C;h1>Hello, world!&#x3C;/h1>, document.getElementById('root'));\n</code></pre>\n<p>It displays a heading saying \"Hello, world!\" on the page.</p>\n<p><strong><a href=\"https://reactjs.org/redirect-to-codepen/hello-world\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/wveBJBM\"></a><a href=\"https://codepen.io/bgoonz/pen/wveBJBM\">https://codepen.io/bgoonz/pen/wveBJBM</a></p>\n<p>Click the link above to open an online editor. Feel free to make some changes, and see how they affect the output. Most pages in this guide will have editable examples like this one.</p>\n<h1>How to Read This Guide</h1>\n<p>In this guide, we will examine the building blocks of React apps: elements and components. Once you master them, you can create complex apps from small reusable pieces.</p>\n<blockquote>\n<p>TipThis guide is designed for people who prefer learning concepts step by step. If you prefer to learn by doing, check out our practical tutorial. You might find this guide and the tutorial complementary to each other.</p>\n</blockquote>\n<p>This is the first chapter in a step-by-step guide about main React concepts. You can find a list of all its chapters in the navigation sidebar. If you're reading this from a mobile device, you can access the navigation by pressing the button in the bottom right corner of your screen.</p>\n<p>Every chapter in this guide builds on the knowledge introduced in earlier chapters. <strong>You can learn most of React by reading the \"Main Concepts\" guide chapters in the order they appear in the sidebar.</strong> For example, <a href=\"https://reactjs.org/docs/introducing-jsx.html\">\"Introducing JSX\"</a> is the next chapter after this one.</p>\n<h1>Knowledge Level Assumptions</h1>\n<p>React is a JavaScript library, and so we'll assume you have a basic understanding of the JavaScript language. <strong>If you don't feel very confident, we recommend <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">going through a JavaScript tutorial</a> to check your knowledge level</strong> and enable you to follow along this guide without getting lost. It might take you between 30 minutes and an hour, but as a result you won't have to feel like you're learning both React and JavaScript at the same time.</p>\n<blockquote>\n<p>NoteThis guide occasionally uses some newer JavaScript syntax in the examples. If you haven't worked with JavaScript in the last few years, these three points should get you most of the way.</p>\n</blockquote>\n<h1><strong>Introducing JSX</strong></h1>\n<h1>Consider this variable declaration:</h1>\n<pre><code class=\"language-js\">const element = &#x3C;h1>Hello, world!&#x3C;/h1>;\n</code></pre>\n<p>This funny tag syntax is neither a string nor HTML.</p>\n<p>It is called JSX, and it is a syntax extension to JavaScript. We recommend using it with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript.</p>\n<p>JSX produces React \"elements\". We will explore rendering them to the DOM in the <a href=\"https://reactjs.org/docs/rendering-elements.html\">next section</a>. Below, you can find the basics of JSX necessary to get you started.</p>\n<h1>Why JSX?</h1>\n<p>React embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time, and how the data is prepared for display.</p>\n<p>Instead of artificially separating <em>technologies</em> by putting markup and logic in separate files, React <a href=\"https://en.wikipedia.org/wiki/Separation_of_concerns\">separates <em>concerns</em></a> with loosely coupled units called \"components\" that contain both. We will come back to components in a <a href=\"https://reactjs.org/docs/components-and-props.html\">further section</a>, but if you're not yet comfortable putting markup in JS, <a href=\"https://www.youtube.com/watch?v=x7cQ3mrcKaY\">this talk</a> might convince you otherwise.</p>\n<p>React <a href=\"https://reactjs.org/docs/react-without-jsx.html\">doesn't require</a> using JSX, but most people find it helpful as a visual aid when working with UI inside the JavaScript code. It also allows React to show more useful error and warning messages.</p>\n<p>With that out of the way, let's get started!</p>\n<h1>Embedding Expressions in JSX</h1>\n<p>In the example below, we declare a variable called <code>name</code> and then use it inside JSX by wrapping it in curly braces:</p>\n<pre><code class=\"language-js\">const name = 'Josh Perez';\nconst element = &#x3C;h1>Hello, {name}&#x3C;/h1>;\nReactDOM.render(element, document.getElementById('root'));\n</code></pre>\n<p>You can put any valid <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions\">JavaScript expression</a> inside the curly braces in JSX. For example, <code>2 + 2</code>, <code>user.firstName</code>, or <code>formatName(user)</code> are all valid JavaScript expressions.</p>\n<p>In the example below, we embed the result of calling a JavaScript function, <code>formatName(user)</code>, into an <code>&#x3C;h1></code> element.</p>\n<pre><code class=\"language-js\">function formatName(user) {\n    return user.firstName + ' ' + user.lastName;\n}\n\nconst user = {\n    firstName: 'Harper',\n    lastName: 'Perez'\n};\n\nconst element = &#x3C;h1> Hello, {formatName(user)}! &#x3C;/h1>;\n\nReactDOM.render(element, document.getElementById('root'));\n</code></pre>\n<p><strong><a href=\"https://reactjs.org/redirect-to-codepen/introducing-jsx\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/oNwgZgm\"></a><a href=\"https://codepen.io/bgoonz/pen/oNwgZgm\">https://codepen.io/bgoonz/pen/oNwgZgm</a></p>\n<p>We split JSX over multiple lines for readability. While it isn't required, when doing this, we also recommend wrapping it in parentheses to avoid the pitfalls of <a href=\"https://stackoverflow.com/q/2846283\">automatic semicolon insertion</a>.</p>\n<h1>JSX is an Expression Too</h1>\n<p>After compilation, JSX expressions become regular JavaScript function calls and evaluate to JavaScript objects.</p>\n<p>This means that you can use JSX inside of <code>if</code> statements and <code>for</code> loops, assign it to variables, accept it as arguments, and return it from functions:</p>\n<pre><code class=\"language-js\">function getGreeting(user) {\n    if (user) {\n        return &#x3C;h1>Hello, {formatName(user)}!&#x3C;/h1>;\n    }\n    return &#x3C;h1>Hello, Stranger.&#x3C;/h1>;\n}\n</code></pre>\n<h1>Specifying Attributes with JSX</h1>\n<p>You may use quotes to specify string literals as attributes:</p>\n<pre><code class=\"language-js\">const element = &#x3C;div tabIndex=\"0\">&#x3C;/div>;\n</code></pre>\n<p>You may also use curly braces to embed a JavaScript expression in an attribute:</p>\n<pre><code class=\"language-js\">const element = &#x3C;img src={user.avatarUrl}>&#x3C;/img>;\n</code></pre>\n<p>Don't put quotes around curly braces when embedding a JavaScript expression in an attribute. You should either use quotes (for string values) or curly braces (for expressions), but not both in the same attribute.</p>\n<blockquote>\n<p>Warning:Since JSX is closer to JavaScript than to HTML, React DOM uses camelCase property naming convention instead of HTML attribute names.For example, class becomes className in JSX, and tabindex becomes tabIndex.</p>\n</blockquote>\n<h1>Specifying Children with JSX</h1>\n<p>If a tag is empty, you may close it immediately with <code>/></code>, like XML:</p>\n<pre><code class=\"language-js\">const element = &#x3C;img src={user.avatarUrl} />;\n</code></pre>\n<p>JSX tags may contain children:</p>\n<pre><code class=\"language-js\">const element = (\n    &#x3C;div>\n        &#x3C;h1>Hello!&#x3C;/h1>\n        &#x3C;h2>Good to see you here.&#x3C;/h2>\n    &#x3C;/div>\n);\n</code></pre>\n<h1>JSX Prevents Injection Attacks</h1>\n<p>It is safe to embed user input in JSX:</p>\n<pre><code class=\"language-js\">const title = response.potentiallyMaliciousInput;\n// This is safe:\nconst element = &#x3C;h1>{title}&#x3C;/h1>;\n</code></pre>\n<p>By default, React DOM <a href=\"https://stackoverflow.com/questions/7381974/which-characters-need-to-be-escaped-on-html\">escapes</a> any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that's not explicitly written in your application. Everything is converted to a string before being rendered. This helps prevent <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">XSS (cross-site-scripting)</a> attacks.</p>\n<h1>JSX Represents Objects</h1>\n<p>Babel compiles JSX down to <code>React.createElement()</code> calls.</p>\n<p>These two examples are identical:</p>\n<pre><code class=\"language-js\">const element = &#x3C;h1 className=\"greeting\">Hello, world!&#x3C;/h1>;\n</code></pre>\n<pre><code class=\"language-js\">const element = React.createElement('h1', { className: 'greeting' }, 'Hello, world!');\n</code></pre>\n<p><code>React.createElement()</code> performs a few checks to help you write bug-free code but essentially it creates an object like this:</p>\n<pre><code class=\"language-js\">// Note: this structure is simplified\nconst element = {\n    type: 'h1',\n    props: {\n        className: 'greeting',\n        children: 'Hello, world!'\n    }\n};\n</code></pre>\n<p>These objects are called \"React elements\". You can think of them as descriptions of what you want to see on the screen. React reads these objects and uses them to construct the DOM and keep it up to date.</p>\n<p>We will explore rendering React elements to the DOM in the <a href=\"https://reactjs.org/docs/rendering-elements.html\">next section</a>.</p>\n<blockquote>\n<p>Tip:We recommend using the \"Babel\" language definition for your editor of choice so that both ES6 and JSX code is properly highlighted.</p>\n</blockquote>\n<h1><strong>Rendering Elements</strong></h1>\n<h1>Elements are the smallest building blocks of React apps.</h1>\n<p>An element describes what you want to see on the screen:</p>\n<p><code>const element = &#x3C;h1>Hello, world&#x3C;/h1>;</code></p>\n<p>Unlike browser DOM elements, React elements are plain objects, and are cheap to create. React DOM takes care of updating the DOM to match the React elements.</p>\n<blockquote>\n<p>Note:One might confuse elements with a more widely known concept of \"components\". We will introduce components in the next section. Elements are what components are \"made of\", and we encourage you to read this section before jumping ahead.</p>\n</blockquote>\n<h1>Rendering an Element into the DOM</h1>\n<p>Let's say there is a <code>&#x3C;div></code> somewhere in your HTML file:</p>\n<pre><code class=\"language-js\">&#x3C;div id=\"root\">&#x3C;/div>\n</code></pre>\n<p>We call this a \"root\" DOM node because everything inside it will be managed by React DOM.</p>\n<p>Applications built with just React usually have a single root DOM node. If you are integrating React into an existing app, you may have as many isolated root DOM nodes as you like.</p>\n<p>To render a React element into a root DOM node, pass both to <code>[ReactDOM.render()](&#x3C;https://reactjs.org/docs/react-dom.html#render>)</code>:</p>\n<pre><code class=\"language-js\">const element = &#x3C;h1>Hello, world&#x3C;/h1>;\nReactDOM.render(element, document.getElementById('root'));\n</code></pre>\n<p><strong><a href=\"https://reactjs.org/redirect-to-codepen/rendering-elements/render-an-element\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/mdwyWeb?editors=0010\"></a><a href=\"https://codepen.io/bgoonz/pen/mdwyWeb?editors=0010\">https://codepen.io/bgoonz/pen/mdwyWeb?editors=0010</a></p>\n<p>It displays \"Hello, world\" on the page.</p>\n<h1>Updating the Rendered Element</h1>\n<p>React elements are <a href=\"https://en.wikipedia.org/wiki/Immutable_object\">immutable</a>. Once you create an element, you can't change its children or attributes. An element is like a single frame in a movie: it represents the UI at a certain point in time.</p>\n<p>With our knowledge so far, the only way to update the UI is to create a new element, and pass it to <code>[ReactDOM.render()](&#x3C;https://reactjs.org/docs/react-dom.html#render>)</code>.</p>\n<p>Consider this ticking clock example:</p>\n<pre><code class=\"language-js\">function tick() {\n    const element = (\n        &#x3C;div>\n            {' '}\n            &#x3C;h1>Hello, world!&#x3C;/h1> &#x3C;h2>It is {new Date().toLocaleTimeString()}.&#x3C;/h2>{' '}\n        &#x3C;/div>\n    );\n    ReactDOM.render(element, document.getElementById('root'));\n}\n\nsetInterval(tick, 1000);\n</code></pre>\n<p><strong><a href=\"https://reactjs.org/redirect-to-codepen/rendering-elements/update-rendered-element\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/eYRmvNy?editors=0010\"></a><a href=\"https://codepen.io/bgoonz/pen/eYRmvNy?editors=0010\">https://codepen.io/bgoonz/pen/eYRmvNy?editors=0010</a></p>\n<p>It calls <code>[ReactDOM.render()](&#x3C;https://reactjs.org/docs/react-dom.html#render>)</code> every second from a <code>[setInterval()](&#x3C;https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval>)</code> callback.</p>\n<blockquote>\n<p>Note:In practice, most React apps only call ReactDOM.render() once. In the next sections we will learn how such code gets encapsulated into stateful components.We recommend that you don't skip topics because they build on each other.</p>\n</blockquote>\n<h1>React Only Updates What's Necessary</h1>\n<p>React DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state.</p>\n<p>You can verify by inspecting the <a href=\"https://reactjs.org/redirect-to-codepen/rendering-elements/update-rendered-element\">last example</a> with the browser tools:</p>\n<p><img src=\"https://reactjs.org/c158617ed7cc0eac8f58330e49e48224/granular-dom-updates.gif\" alt=\"https://reactjs.org/c158617ed7cc0eac8f58330e49e48224/granular-dom-updates.gif\"></p>\n<p>Even though we create an element describing the whole UI tree on every tick, only the text node whose contents have changed gets updated by React DOM.</p>\n<p>In our experience, thinking about how the UI should look at any given moment, rather than how to change it over time, eliminates a whole class of bugs.</p>\n<h1><strong>Components and Props</strong></h1>\n<h1>Components let you split the UI into independent, reusable pieces, and think about each piece in isolation. This page provides an introduction to the idea of components. You can find a <a href=\"https://reactjs.org/docs/react-component.html\">detailed component API reference here</a>.</h1>\n<p>Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called \"props\") and return React elements describing what should appear on the screen.</p>\n<h1>Function and Class Components</h1>\n<p>The simplest way to define a component is to write a JavaScript function:</p>\n<pre><code class=\"language-js\">function Welcome(props) {\n    return &#x3C;h1>Hello, {props.name}&#x3C;/h1>;\n}\n</code></pre>\n<p>This function is a valid React component because it accepts a single \"props\" (which stands for properties) object argument with data and returns a React element. We call such components \"function components\" because they are literally JavaScript functions.</p>\n<p>You can also use an <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes\">ES6 class</a> to define a component:</p>\n<pre><code class=\"language-js\">class Welcome extends React.Component {\n    render() {\n        return &#x3C;h1>Hello, {this.props.name}&#x3C;/h1>;\n    }\n}\n</code></pre>\n<p>The above two components are equivalent from React's point of view.</p>\n<p>Function and Class components both have some additional features that we will discuss in the <a href=\"https://reactjs.org/docs/state-and-lifecycle.html\">next sections</a>.</p>\n<h1>Rendering a Component</h1>\n<p>Previously, we only encountered React elements that represent DOM tags:</p>\n<pre><code class=\"language-js\">const element = &#x3C;div />;\n</code></pre>\n<p>However, elements can also represent user-defined components:</p>\n<pre><code class=\"language-js\">const element = &#x3C;Welcome name=\"Sara\" />;\n</code></pre>\n<p>When React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object \"props\".</p>\n<p>For example, this code renders \"Hello, Sara\" on the page:</p>\n<pre><code class=\"language-js\">function Welcome(props) {\n    return &#x3C;h1>Hello, {props.name}&#x3C;/h1>;\n}\n\nconst element = &#x3C;Welcome name=\"Sara\" />;\nReactDOM.render(element, document.getElementById('root'));\n</code></pre>\n<p><strong><a href=\"https://reactjs.org/redirect-to-codepen/components-and-props/rendering-a-component\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/QWgwpjd?editors=0010\"></a><a href=\"https://codepen.io/bgoonz/pen/QWgwpjd?editors=0010\">https://codepen.io/bgoonz/pen/QWgwpjd?editors=0010</a></p>\n<p>Let's recap what happens in this example:</p>\n<ol>\n<li>We call <code>ReactDOM.render()</code> with the <code>&#x3C;Welcome name=\"Sara\" /></code> element.</li>\n<li>React calls the <code>Welcome</code> component with <code>{name: 'Sara'}</code> as the props.</li>\n<li>Our <code>Welcome</code> component returns a <code>&#x3C;h1>Hello, Sara&#x3C;/h1></code> element as the result.</li>\n<li>React DOM efficiently updates the DOM to match <code>&#x3C;h1>Hello, Sara&#x3C;/h1></code>.</li>\n</ol>\n<blockquote>\n<p>Note: Always start component names with a capital letter.React treats components starting with lowercase letters as DOM tags. For example, <div /> represents an HTML div tag, but <Welcome /> represents a component and requires Welcome to be in <a href=\"http://scope.To\">scope.To</a> learn more about the reasoning behind this convention, please read JSX In Depth.</p>\n</blockquote>\n<h1>Composing Components</h1>\n<p>Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.</p>\n<p>For example, we can create an <code>App</code> component that renders <code>Welcome</code> many times:</p>\n<pre><code class=\"language-js\">function Welcome(props) {\n    return &#x3C;h1>Hello, {props.name}&#x3C;/h1>;\n}\n\nfunction App() {\n    return (\n        &#x3C;div>\n            {' '}\n            &#x3C;Welcome name=\"Sara\" /> &#x3C;Welcome name=\"Cahal\" /> &#x3C;Welcome name=\"Edite\" />{' '}\n        &#x3C;/div>\n    );\n}\n\nReactDOM.render(&#x3C;App />, document.getElementById('root'));\n</code></pre>\n<p><strong><a href=\"https://reactjs.org/redirect-to-codepen/components-and-props/composing-components\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/LYLEWNq?editors=0010\"></a><a href=\"https://codepen.io/bgoonz/pen/LYLEWNq?editors=0010\">https://codepen.io/bgoonz/pen/LYLEWNq?editors=0010</a></p>\n<p>Typically, new React apps have a single <code>App</code> component at the very top. However, if you integrate React into an existing app, you might start bottom-up with a small component like <code>Button</code> and gradually work your way to the top of the view hierarchy.</p>\n<h1>Extracting Components</h1>\n<p>Don't be afraid to split components into smaller components.</p>\n<p>For example, consider this <code>Comment</code> component:</p>\n<pre><code class=\"language-js\">function Comment(props) {\n    return (\n        &#x3C;div className=\"Comment\">\n            &#x3C;div className=\"UserInfo\">\n                &#x3C;img className=\"Avatar\" src={props.author.avatarUrl} alt={props.author.name} />\n                &#x3C;div className=\"UserInfo-name\">{props.author.name}&#x3C;/div>\n            &#x3C;/div>\n            &#x3C;div className=\"Comment-text\">{props.text}&#x3C;/div>\n            &#x3C;div className=\"Comment-date\">{formatDate(props.date)}&#x3C;/div>\n        &#x3C;/div>\n    );\n}\n</code></pre>\n<p><strong><a href=\"https://reactjs.org/redirect-to-codepen/components-and-props/extracting-components\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/PojwpzP?editors=0010\"></a><a href=\"https://codepen.io/bgoonz/pen/PojwpzP?editors=0010\">https://codepen.io/bgoonz/pen/PojwpzP?editors=0010</a></p>\n<p>It accepts <code>author</code> (an object), <code>text</code> (a string), and <code>date</code> (a date) as props, and describes a comment on a social media website.</p>\n<p>This component can be tricky to change because of all the nesting, and it is also hard to reuse individual parts of it. Let's extract a few components from it.</p>\n<p>First, we will extract <code>Avatar</code>:</p>\n<pre><code class=\"language-js\">function Avatar(props) {\n    return &#x3C;img className=\"Avatar\" src={props.user.avatarUrl} alt={props.user.name} />;\n}\n</code></pre>\n<p>The <code>Avatar</code> doesn't need to know that it is being rendered inside a <code>Comment</code>. This is why we have given its prop a more generic name: <code>user</code> rather than <code>author</code>.</p>\n<p>We recommend naming props from the component's own point of view rather than the context in which it is being used.</p>\n<p>We can now simplify <code>Comment</code> a tiny bit:</p>\n<pre><code class=\"language-js\">function Comment(props) {\n    return (\n        &#x3C;div className=\"Comment\">\n            {' '}\n            &#x3C;div className=\"UserInfo\">\n                {' '}\n                &#x3C;Avatar user={props.author} /> &#x3C;div className=\"UserInfo-name\"> {props.author.name}&#x3C;/div>{' '}\n            &#x3C;/div> &#x3C;div className=\"Comment-text\"> {props.text}&#x3C;/div> &#x3C;div className=\"Comment-date\"> {formatDate(props.date)}&#x3C;/div>{' '}\n        &#x3C;/div>\n    );\n}\n</code></pre>\n<p>Next, we will extract a <code>UserInfo</code> component that renders an <code>Avatar</code> next to the user's name:</p>\n<p><code>function UserInfo(props) { return ( &#x3C;div className=\"UserInfo\"> &#x3C;Avatar user={props.user} /> &#x3C;div className=\"UserInfo-name\"> {props.user.name} &#x3C;/div> &#x3C;/div> ); }</code></p>\n<p>This lets us simplify <code>Comment</code> even further:</p>\n<pre><code class=\"language-js\">function Comment(props) {\n    return (\n        &#x3C;div className=\"Comment\">\n            {' '}\n            &#x3C;UserInfo user={props.author} /> &#x3C;div className=\"Comment-text\"> {props.text}&#x3C;/div> &#x3C;div className=\"Comment-date\">\n                {' '}\n                {formatDate(props.date)}\n            &#x3C;/div>{' '}\n        &#x3C;/div>\n    );\n}\n</code></pre>\n<p><strong><a href=\"https://reactjs.org/redirect-to-codepen/components-and-props/extracting-components-continued\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/eYRmvzV?editors=0010\"></a><a href=\"https://codepen.io/bgoonz/pen/eYRmvzV?editors=0010\">https://codepen.io/bgoonz/pen/eYRmvzV?editors=0010</a></p>\n<p>Extracting components might seem like grunt work at first, but having a palette of reusable components pays off in larger apps. A good rule of thumb is that if a part of your UI is used several times (<code>Button</code>, <code>Panel</code>, <code>Avatar</code>), or is complex enough on its own (<code>App</code>, <code>FeedStory</code>, <code>Comment</code>), it is a good candidate to be extracted to a separate component.</p>\n<h1>Props are Read-Only</h1>\n<p>Whether you declare a component <a href=\"https://reactjs.org/docs/components-and-props.html#function-and-class-components\">as a function or a class</a>, it must never modify its own props. Consider this <code>sum</code> function:</p>\n<pre><code class=\"language-js\">function sum(a, b) {\n    return a + b;\n}\n</code></pre>\n<p>Such functions are called <a href=\"https://en.wikipedia.org/wiki/Pure_function\">\"pure\"</a> because they do not attempt to change their inputs, and always return the same result for the same inputs.</p>\n<p>In contrast, this function is impure because it changes its own input:</p>\n<pre><code class=\"language-js\">function withdraw(account, amount) {\n  account.total -= amount;\n}\n\n```js\n\nReact is pretty flexible but it has a single strict rule:\n\n**All React components must act like pure functions with respect to their props.**\n\nOf course, application UIs are dynamic and change over time. In the [next section](https://reactjs.org/docs/state-and-lifecycle.html), we will introduce a new concept of \"state\". State allows React components to change their output over time in response to user actions, network responses, and anything else, without violating this rule.\n\n**State and Lifecycle**\n=======================\n\nThis page introduces the concept of state and lifecycle in a React component. You can find a [detailed component API reference here](https://reactjs.org/docs/react-component.html).\n====================================================================================================================================================================================\n\nConsider the ticking clock example from [one of the previous sections](https://reactjs.org/docs/rendering-elements.html#updating-the-rendered-element). In [Rendering Elements](https://reactjs.org/docs/rendering-elements.html#rendering-an-element-into-the-dom), we have only learned one way to update the UI. We call `ReactDOM.render()` to change the rendered output:\n\n```js\nfunction tick() {\n  const element = (\n    &#x3C;div>      &#x3C;h1>Hello, world!&#x3C;/h1>      &#x3C;h2>It is {new Date().toLocaleTimeString()}.&#x3C;/h2>    &#x3C;/div>);\n  ReactDOM.render(    element,    document.getElementById('root')  );}\n\nsetInterval(tick, 1000);\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/gwoJZk?editors=0010\">Try it on CodePen</a></strong></p>\n<p>In this section, we will learn how to make the <code>Clock</code> component truly reusable and encapsulated. It will set up its own timer and update itself every second.</p>\n<p>We can start by encapsulating how the clock looks:</p>\n<pre><code class=\"language-js\">function Clock(props) {\n    return (\n        &#x3C;div>\n            {' '}\n            &#x3C;h1>Hello, world!&#x3C;/h1> &#x3C;h2>It is {props.date.toLocaleTimeString()}.&#x3C;/h2>{' '}\n        &#x3C;/div>\n    );\n}\n\nfunction tick() {\n    ReactDOM.render(&#x3C;Clock date={new Date()} />, document.getElementById('root'));\n}\n\nsetInterval(tick, 1000);\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/dpdoYR?editors=0010\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/powvegw?editors=0010\"></a><a href=\"https://codepen.io/bgoonz/pen/powvegw?editors=0010\">https://codepen.io/bgoonz/pen/powvegw?editors=0010</a></p>\n<p>However, it misses a crucial requirement: the fact that the <code>Clock</code> sets up a timer and updates the UI every second should be an implementation detail of the <code>Clock</code>.</p>\n<p>Ideally we want to write this once and have the <code>Clock</code> update itself:</p>\n<pre><code class=\"language-js\">ReactDOM.render(&#x3C;Clock />, document.getElementById('root'));\n</code></pre>\n<p>To implement this, we need to add \"state\" to the <code>Clock</code> component.</p>\n<p>State is similar to props, but it is private and fully controlled by the component.</p>\n<h1>Converting a Function to a Class</h1>\n<p>You can convert a function component like <code>Clock</code> to a class in five steps:</p>\n<ol>\n<li>Create an <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes\">ES6 class</a>, with the same name, that extends <code>React.Component</code>.</li>\n<li>Add a single empty method to it called <code>render()</code>.</li>\n<li>Move the body of the function into the <code>render()</code> method.</li>\n<li>Replace <code>props</code> with <code>this.props</code> in the <code>render()</code> body.</li>\n<li>Delete the remaining empty function declaration.</li>\n</ol>\n<pre><code class=\"language-js\">class Clock extends React.Component {\n    render() {\n        return (\n            &#x3C;div>\n                &#x3C;h1>Hello, world!&#x3C;/h1>\n                &#x3C;h2>It is {this.props.date.toLocaleTimeString()}.&#x3C;/h2>\n            &#x3C;/div>\n        );\n    }\n}\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/zKRGpo?editors=0010\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/eYRmvJV?editors=0010\"></a><a href=\"https://codepen.io/bgoonz/pen/eYRmvJV?editors=0010\">https://codepen.io/bgoonz/pen/eYRmvJV?editors=0010</a></p>\n<p><code>Clock</code> is now defined as a class rather than a function.</p>\n<p>The <code>render</code> method will be called each time an update happens, but as long as we render <code>&#x3C;Clock /></code> into the same DOM node, only a single instance of the <code>Clock</code> class will be used. This lets us use additional features such as local state and lifecycle methods.</p>\n<h1>Adding Local State to a Class</h1>\n<p>We will move the <code>date</code> from props to state in three steps:</p>\n<ol>\n<li>Replace <code>this.props.date</code> with <code>this.state.date</code> in the <code>render()</code> method:</li>\n</ol>\n<pre><code class=\"language-js\">class Clock extends React.Component {\n    render() {\n        return (\n            &#x3C;div>\n                {' '}\n                &#x3C;h1>Hello, world!&#x3C;/h1> &#x3C;h2>It is {this.state.date.toLocaleTimeString()}.&#x3C;/h2>{' '}\n            &#x3C;/div>\n        );\n    }\n}\n</code></pre>\n<ol>\n<li>Add a <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes#Constructor\">class constructor</a> that assigns the initial <code>this.state</code>:</li>\n</ol>\n<pre><code class=\"language-js\">class Clock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { date: new Date() };\n    }\n\n    render() {\n        return (\n            &#x3C;div>\n                {' '}\n                &#x3C;h1>Hello, world!&#x3C;/h1> &#x3C;h2>It is {this.state.date.toLocaleTimeString()}.&#x3C;/h2>{' '}\n            &#x3C;/div>\n        );\n    }\n}\n</code></pre>\n<p>Note how we pass <code>props</code> to the base constructor:</p>\n<pre><code class=\"language-js\"> constructor(props) {\n    super(props);    this.state = {date: new Date()};\n  }\n</code></pre>\n<p>Class components should always call the base constructor with <code>props</code>.</p>\n<ol>\n<li>Remove the <code>date</code> prop from the <code>&#x3C;Clock /></code> element:</li>\n</ol>\n<pre><code class=\"language-js\">ReactDOM.render(&#x3C;Clock />, document.getElementById('root'));\n</code></pre>\n<p>We will later add the timer code back to the component itself.</p>\n<p>The result looks like this:</p>\n<pre><code class=\"language-js\">class Clock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { date: new Date() };\n    }\n    render() {\n        return (\n            &#x3C;div>\n                {' '}\n                &#x3C;h1>Hello, world!&#x3C;/h1> &#x3C;h2>It is {this.state.date.toLocaleTimeString()}.&#x3C;/h2>{' '}\n            &#x3C;/div>\n        );\n    }\n}\n\nReactDOM.render(&#x3C;Clock />, document.getElementById('root'));\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/KgQpJd?editors=0010\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/oNwgZbV?editors=0010\"></a><a href=\"https://codepen.io/bgoonz/pen/oNwgZbV?editors=0010\">https://codepen.io/bgoonz/pen/oNwgZbV?editors=0010</a></p>\n<iframe src=\"https://codepen.io/gaearon/pen/KgQpJd?editors=0010\" height=\"900px\" width=\"100%\"> </iframe>\n<p>Next, we'll make the <code>Clock</code> set up its own timer and update itself every second.</p>\n<h1>Adding Lifecycle Methods to a Class</h1>\n<p>In applications with many components, it's very important to free up resources taken by the components when they are destroyed.</p>\n<p>We want to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval\">set up a timer</a> whenever the <code>Clock</code> is rendered to the DOM for the first time. This is called \"mounting\" in React.</p>\n<p>We also want to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval\">clear that timer</a> whenever the DOM produced by the <code>Clock</code> is removed. This is called \"unmounting\" in React.</p>\n<p>We can declare special methods on the component class to run some code when a component mounts and unmounts:</p>\n<pre><code class=\"language-js\">class Clock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { date: new Date() };\n    }\n\n    componentDidMount() {}\n    componentWillUnmount() {}\n    render() {\n        return (\n            &#x3C;div>\n                {' '}\n                &#x3C;h1>Hello, world!&#x3C;/h1> &#x3C;h2>It is {this.state.date.toLocaleTimeString()}.&#x3C;/h2>{' '}\n            &#x3C;/div>\n        );\n    }\n}\n</code></pre>\n<p>These methods are called \"lifecycle methods\".</p>\n<p>The <code>componentDidMount()</code> method runs after the component output has been rendered to the DOM. This is a good place to set up a timer:</p>\n<pre><code class=\"language-js\">  componentDidMount() {\n    this.timerID = setInterval(      () => this.tick(),      1000    );  }\n</code></pre>\n<p>Note how we save the timer ID right on <code>this</code> (<code>this.timerID</code>).</p>\n<p>While <code>this.props</code> is set up by React itself and <code>this.state</code> has a special meaning, you are free to add additional fields to the class manually if you need to store something that doesn't participate in the data flow (like a timer ID).</p>\n<p>We will tear down the timer in the <code>componentWillUnmount()</code> lifecycle method:</p>\n<pre><code class=\"language-js\">  componentWillUnmount() {\n    clearInterval(this.timerID);  }\n</code></pre>\n<p>Finally, we will implement a method called <code>tick()</code> that the <code>Clock</code> component will run every second.</p>\n<p>It will use <code>this.setState()</code> to schedule updates to the component local state:</p>\n<pre><code class=\"language-js\">class Clock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { date: new Date() };\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(() => this.tick(), 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    tick() {\n        this.setState({ date: new Date() });\n    }\n    render() {\n        return (\n            &#x3C;div>\n                {' '}\n                &#x3C;h1>Hello, world!&#x3C;/h1> &#x3C;h2>It is {this.state.date.toLocaleTimeString()}.&#x3C;/h2>{' '}\n            &#x3C;/div>\n        );\n    }\n}\n\nReactDOM.render(&#x3C;Clock />, document.getElementById('root'));\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/amqdNA?editors=0010\">Try it on CodePen</a></strong></p>\n<iframe src=\"https://codepen.io/gaearon/pen/amqdNA?editors=0010\" height=\"900px\" width=\"100%\"> </iframe>\n<p>Now the clock ticks every second.</p>\n<p>Let's quickly recap what's going on and the order in which the methods are called:</p>\n<ol>\n<li>When <code>&#x3C;Clock /></code> is passed to <code>ReactDOM.render()</code>, React calls the constructor of the <code>Clock</code> component. Since <code>Clock</code> needs to display the current time, it initializes <code>this.state</code> with an object including the current time. We will later update this state.</li>\n<li>React then calls the <code>Clock</code> component's <code>render()</code> method. This is how React learns what should be displayed on the screen. React then updates the DOM to match the <code>Clock</code>'s render output.</li>\n<li>When the <code>Clock</code> output is inserted in the DOM, React calls the <code>componentDidMount()</code> lifecycle method. Inside it, the <code>Clock</code> component asks the browser to set up a timer to call the component's <code>tick()</code> method once a second.</li>\n<li>Every second the browser calls the <code>tick()</code> method. Inside it, the <code>Clock</code> component schedules a UI update by calling <code>setState()</code> with an object containing the current time. Thanks to the <code>setState()</code> call, React knows the state has changed, and calls the <code>render()</code> method again to learn what should be on the screen. This time, <code>this.state.date</code> in the <code>render()</code> method will be different, and so the render output will include the updated time. React updates the DOM accordingly.</li>\n<li>If the <code>Clock</code> component is ever removed from the DOM, React calls the <code>componentWillUnmount()</code> lifecycle method so the timer is stopped.</li>\n</ol>\n<h1>Using State Correctly</h1>\n<p>There are three things you should know about <code>setState()</code>.</p>\n<h1>Do Not Modify State Directly</h1>\n<p>For example, this will not re-render a component:</p>\n<pre><code class=\"language-js\">// Wrong\nthis.state.comment = 'Hello';\n</code></pre>\n<p>Instead, use <code>setState()</code>:</p>\n<pre><code class=\"language-js\">// Correct\nthis.setState({ comment: 'Hello' });\n</code></pre>\n<p>The only place where you can assign <code>this.state</code> is the constructor.</p>\n<h1>State Updates May Be Asynchronous</h1>\n<p>React may batch multiple <code>setState()</code> calls into a single update for performance.</p>\n<p>Because <code>this.props</code> and <code>this.state</code> may be updated asynchronously, you should not rely on their values for calculating the next state.</p>\n<p>For example, this code may fail to update the counter:</p>\n<pre><code class=\"language-js\">// Wrong\nthis.setState({\n    counter: this.state.counter + this.props.increment\n});\n</code></pre>\n<p>To fix it, use a second form of <code>setState()</code> that accepts a function rather than an object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument:</p>\n<pre><code class=\"language-js\">// Correct\nthis.setState((state, props) => ({\n    counter: state.counter + props.increment\n}));\n</code></pre>\n<p>We used an <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow function</a> above, but it also works with regular functions:</p>\n<pre><code class=\"language-js\">// Correct\nthis.setState(function (state, props) {\n    return {\n        counter: state.counter + props.increment\n    };\n});\n</code></pre>\n<h1>State Updates are Merged</h1>\n<p>When you call <code>setState()</code>, React merges the object you provide into the current state.</p>\n<p>For example, your state may contain several independent variables:</p>\n<pre><code class=\"language-js\">  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],      comments: []    };\n  }\n</code></pre>\n<p>Then you can update them independently with separate <code>setState()</code> calls:</p>\n<pre><code class=\"language-js\">  componentDidMount() {\n    fetchPosts().then(response => {\n      this.setState({\n        posts: response.posts      });\n    });\n\n    fetchComments().then(response => {\n      this.setState({\n        comments: response.comments      });\n    });\n  }\n</code></pre>\n<p>The merging is shallow, so <code>this.setState({comments})</code> leaves <code>this.state.posts</code> intact, but completely replaces <code>this.state.comments</code>.</p>\n<h1>The Data Flows Down</h1>\n<p>Neither parent nor child components can know if a certain component is stateful or stateless, and they shouldn't care whether it is defined as a function or a class.</p>\n<p>This is why state is often called local or encapsulated. It is not accessible to any component other than the one that owns and sets it.</p>\n<p>A component may choose to pass its state down as props to its child components:</p>\n<pre><code class=\"language-js\">&#x3C;FormattedDate date={this.state.date} />\n</code></pre>\n<p>The <code>FormattedDate</code> component would receive the <code>date</code> in its props and wouldn't know whether it came from the <code>Clock</code>'s state, from the <code>Clock</code>'s props, or was typed by hand:</p>\n<pre><code class=\"language-js\">function FormattedDate(props) {\n    return &#x3C;h2>It is {props.date.toLocaleTimeString()}.&#x3C;/h2>;\n}\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/zKRqNB?editors=0010\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/GREgWEp?editors=0010\"></a><a href=\"https://codepen.io/bgoonz/pen/GREgWEp?editors=0010\">https://codepen.io/bgoonz/pen/GREgWEp?editors=0010</a></p>\n<iframe src=\"https://codepen.io/gaearon/pen/zKRqNB?editors=0010\" height=\"900px\" width=\"100%\"> </iframe>\n<p>This is commonly called a \"top-down\" or \"unidirectional\" data flow. Any state is always owned by some specific component, and any data or UI derived from that state can only affect components \"below\" them in the tree.</p>\n<p>If you imagine a component tree as a waterfall of props, each component's state is like an additional water source that joins it at an arbitrary point but also flows down.</p>\n<p>To show that all components are truly isolated, we can create an <code>App</code> component that renders three <code>&#x3C;Clock></code>s:</p>\n<pre><code class=\"language-js\">function App() {\n    return (\n        &#x3C;div>\n            {' '}\n            &#x3C;Clock /> &#x3C;Clock /> &#x3C;Clock />{' '}\n        &#x3C;/div>\n    );\n}\n\nReactDOM.render(&#x3C;App />, document.getElementById('root'));\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/vXdGmd?editors=0010\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/YzQPZQK?editors=0010\"></a><a href=\"https://codepen.io/bgoonz/pen/YzQPZQK?editors=0010\">https://codepen.io/bgoonz/pen/YzQPZQK?editors=0010</a></p>\n<iframe src=\"https://codepen.io/gaearon/pen/vXdGmd?editors=0010\" height=\"900px\" width=\"100%\"> </iframe>\n<p>Each <code>Clock</code> sets up its own timer and updates independently.</p>\n<p>In React apps, whether a component is stateful or stateless is considered an implementation detail of the component that may change over time. You can use stateless components inside stateful components, and vice versa.</p>\n<h1><strong>Handling Events</strong></h1>\n<h1>Handling events with React elements is very similar to handling events on DOM elements. There are some syntax differences:</h1>\n<ul>\n<li>React events are named using camelCase, rather than lowercase.</li>\n<li>With JSX you pass a function as the event handler, rather than a string.</li>\n</ul>\n<p>For example, the HTML:</p>\n<pre><code class=\"language-js\">&#x3C;button onclick=\"activateLasers()\">Activate Lasers&#x3C;/button>\n</code></pre>\n<p>is slightly different in React:</p>\n<pre><code class=\"language-js\">&#x3C;button onClick={activateLasers}> Activate Lasers&#x3C;/button>\n</code></pre>\n<p>Another difference is that you cannot return <code>false</code> to prevent default behavior in React. You must call <code>preventDefault</code> explicitly. For example, with plain HTML, to prevent the default form behavior of submitting, you can write:</p>\n<pre><code class=\"language-js\">&#x3C;form onsubmit=\"console.log('You clicked submit.'); return false\">\n    &#x3C;button type=\"submit\">Submit&#x3C;/button>\n&#x3C;/form>\n</code></pre>\n<p>In React, this could instead be:</p>\n<pre><code class=\"language-js\">function Form() {\n    function handleSubmit(e) {\n        e.preventDefault();\n        console.log('You clicked submit.');\n    }\n\n    return (\n        &#x3C;form onSubmit={handleSubmit}>\n            {' '}\n            &#x3C;button type=\"submit\">Submit&#x3C;/button>{' '}\n        &#x3C;/form>\n    );\n}\n</code></pre>\n<p>Here, <code>e</code> is a synthetic event. React defines these synthetic events according to the <a href=\"https://www.w3.org/TR/DOM-Level-3-Events/\">W3C spec</a>, so you don't need to worry about cross-browser compatibility. React events do not work exactly the same as native events. See the <code>[SyntheticEvent](&#x3C;https://reactjs.org/docs/events.html>)</code> reference guide to learn more.</p>\n<p>When using React, you generally don't need to call <code>addEventListener</code> to add listeners to a DOM element after it is created. Instead, just provide a listener when the element is initially rendered.</p>\n<p>When you define a component using an <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes\">ES6 class</a>, a common pattern is for an event handler to be a method on the class. For example, this <code>Toggle</code> component renders a button that lets the user toggle between \"ON\" and \"OFF\" states:</p>\n<pre><code class=\"language-js\">class Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {isToggleOn: true};\n\n    // This binding is necessary to make `this` work in the callback    this.handleClick = this.handleClick.bind(this);  }\n\n  handleClick() {    this.setState(prevState => ({      isToggleOn: !prevState.isToggleOn    }));  }render() {\n    return (\n      &#x3C;button onClick={this.handleClick}>        {this.state.isToggleOn ? 'ON' : 'OFF'}\n      &#x3C;/button>);\n  }\n}\n\nReactDOM.render(\n  &#x3C;Toggle />,\n  document.getElementById('root')\n);\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/xEmzGg?editors=0010\">Try it on CodePen</a></strong></p>\n<iframe src=\"https://codepen.io/gaearon/pen/xEmzGg?editors=0010\" height=\"900px\" width=\"100%\"> </iframe>\n<p>You have to be careful about the meaning of <code>this</code> in JSX callbacks. In JavaScript, class methods are not <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind\">bound</a> by default. If you forget to bind <code>this.handleClick</code> and pass it to <code>onClick</code>, <code>this</code> will be <code>undefined</code> when the function is actually called.</p>\n<p>This is not React-specific behavior; it is a part of <a href=\"https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/\">how functions work in JavaScript</a>. Generally, if you refer to a method without <code>()</code> after it, such as <code>onClick={this.handleClick}</code>, you should bind that method.</p>\n<p>If calling <code>bind</code> annoys you, there are two ways you can get around this. If you are using the experimental <a href=\"https://babeljs.io/docs/plugins/transform-class-properties/\">public class fields syntax</a>, you can use class fields to correctly bind callbacks:</p>\n<pre><code class=\"language-js\">class LoggingButton extends React.Component {\n  // This syntax ensures `this` is bound within handleClick.  // Warning: this is *experimental* syntax.  handleClick = () => {    console.log('this is:', this);  }render() {\n    return (\n      &#x3C;button onClick={this.handleClick}>        Click me\n      &#x3C;/button>);\n  }\n}\n</code></pre>\n<p>This syntax is enabled by default in <a href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a>.</p>\n<p>If you aren't using class fields syntax, you can use an <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow function</a> in the callback:</p>\n<pre><code class=\"language-js\">class LoggingButton extends React.Component {\n  handleClick() {\n    console.log('this is:', this);\n  }\n\n  render() {\n    // This syntax ensures `this` is bound within handleClick    return (      &#x3C;button onClick={() => this.handleClick()}>        Click me\n      &#x3C;/button>);\n  }\n}\n</code></pre>\n<p>The problem with this syntax is that a different callback is created each time the <code>LoggingButton</code> renders. In most cases, this is fine. However, if this callback is passed as a prop to lower components, those components might do an extra re-rendering. We generally recommend binding in the constructor or using the class fields syntax, to avoid this sort of performance problem.</p>\n<h1>Passing Arguments to Event Handlers</h1>\n<p>Inside a loop, it is common to want to pass an extra parameter to an event handler. For example, if <code>id</code> is the row ID, either of the following would work:</p>\n<p><code>&#x3C;button onClick={(e) => this.deleteRow(id, e)}>Delete Row&#x3C;/button>&#x3C;button onClick={this.deleteRow.bind(this, id)}>Delete Row&#x3C;/button></code></p>\n<p>The above two lines are equivalent, and use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow functions</a> and <code>[Function.prototype.bind](&#x3C;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind>)</code> respectively.</p>\n<p>In both cases, the <code>e</code> argument representing the React event will be passed as a second argument after the ID. With an arrow function, we have to pass it explicitly, but with <code>bind</code> any further arguments are automatically forwarded.</p>\n<h1><strong>Conditional Rendering</strong></h1>\n<h1>In React, you can create distinct components that encapsulate behavior you need. Then, you can render only some of them, depending on the state of your application.</h1>\n<p>Conditional rendering in React works the same way conditions work in JavaScript. Use JavaScript operators like <code>[if](&#x3C;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else>)</code> or the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">conditional operator</a> to create elements representing the current state, and let React update the UI to match them.</p>\n<p>Consider these two components:</p>\n<pre><code class=\"language-js\">function UserGreeting(props) {\n    return &#x3C;h1>Welcome back!&#x3C;/h1>;\n}\n\nfunction GuestGreeting(props) {\n    return &#x3C;h1>Please sign up.&#x3C;/h1>;\n}\n</code></pre>\n<p>We'll create a <code>Greeting</code> component that displays either of these components depending on whether a user is logged in:</p>\n<pre><code class=\"language-js\">function Greeting(props) {\n    const isLoggedIn = props.isLoggedIn;\n    if (isLoggedIn) {\n        return &#x3C;UserGreeting />;\n    }\n    return &#x3C;GuestGreeting />;\n}\nReactDOM.render(\n    // Try changing to isLoggedIn={true}:\n    &#x3C;Greeting isLoggedIn={false} />,\n    document.getElementById('root')\n);\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/ZpVxNq?editors=0011\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/mdwyWmJ?editors=0011\"></a><a href=\"https://codepen.io/bgoonz/pen/mdwyWmJ?editors=0011\">https://codepen.io/bgoonz/pen/mdwyWmJ?editors=0011</a></p>\n<iframe src=\"https://codepen.io/gaearon/pen/ZpVxNq?editors=0011\" height=\"900px\" width=\"100%\"> </iframe>\n<p>This example renders a different greeting depending on the value of <code>isLoggedIn</code> prop.</p>\n<h1>Element Variables</h1>\n<p>You can use variables to store elements. This can help you conditionally render a part of the component while the rest of the output doesn't change.</p>\n<p>Consider these two new components representing Logout and Login buttons:</p>\n<pre><code class=\"language-js\">function LoginButton(props) {\n    return &#x3C;button onClick={props.onClick}>Login&#x3C;/button>;\n}\n\nfunction LogoutButton(props) {\n    return &#x3C;button onClick={props.onClick}>Logout&#x3C;/button>;\n}\n</code></pre>\n<p>In the example below, we will create a <a href=\"https://reactjs.org/docs/state-and-lifecycle.html#adding-local-state-to-a-class\">stateful component</a> called <code>LoginControl</code>.</p>\n<p>It will render either <code>&#x3C;LoginButton /></code> or <code>&#x3C;LogoutButton /></code> depending on its current state. It will also render a <code>&#x3C;Greeting /></code> from the previous example:</p>\n<pre><code class=\"language-js\">class LoginControl extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleLoginClick = this.handleLoginClick.bind(this);\n        this.handleLogoutClick = this.handleLogoutClick.bind(this);\n        this.state = { isLoggedIn: false };\n    }\n\n    handleLoginClick() {\n        this.setState({ isLoggedIn: true });\n    }\n\n    handleLogoutClick() {\n        this.setState({ isLoggedIn: false });\n    }\n\n    render() {\n        const isLoggedIn = this.state.isLoggedIn;\n        let button;\n        if (isLoggedIn) {\n            button = &#x3C;LogoutButton onClick={this.handleLogoutClick} />;\n        } else {\n            button = &#x3C;LoginButton onClick={this.handleLoginClick} />;\n        }\n        return (\n            &#x3C;div>\n                {' '}\n                &#x3C;Greeting isLoggedIn={isLoggedIn} /> {button}{' '}\n            &#x3C;/div>\n        );\n    }\n}\n\nReactDOM.render(&#x3C;LoginControl />, document.getElementById('root'));\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/QKzAgB?editors=0010\">Try it on CodePen</a></strong></p>\n<iframe src=\"https://codepen.io/gaearon/pen/QKzAgB?editors=0010\" height=\"900px\" width=\"100%\"> </iframe>\n<p>While declaring a variable and using an <code>if</code> statement is a fine way to conditionally render a component, sometimes you might want to use a shorter syntax. There are a few ways to inline conditions in JSX, explained below.</p>\n<h1>Inline If with Logical &#x26;&#x26; Operator</h1>\n<p>You may <a href=\"https://reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx\">embed expressions in JSX</a> by wrapping them in curly braces. This includes the JavaScript logical <code>&#x26;&#x26;</code> operator. It can be handy for conditionally including an element:</p>\n<pre><code class=\"language-js\">function Mailbox(props) {\n    const unreadMessages = props.unreadMessages;\n    return (\n        &#x3C;div>\n            {' '}\n            &#x3C;h1>Hello!&#x3C;/h1> {unreadMessages.length > 0 &#x26;&#x26; &#x3C;h2> You have {unreadMessages.length} unread messages. &#x3C;/h2>}{' '}\n        &#x3C;/div>\n    );\n}\n\nconst messages = ['React', 'Re: React', 'Re:Re: React'];\nReactDOM.render(&#x3C;Mailbox unreadMessages={messages} />, document.getElementById('root'));\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/ozJddz?editors=0010\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/VwWYppo?editors=0010\"></a><a href=\"https://codepen.io/bgoonz/pen/VwWYppo?editors=0010\">https://codepen.io/bgoonz/pen/VwWYppo?editors=0010</a></p>\n<iframe src=\"https://codepen.io/gaearon/pen/ozJddz?editors=0010\" height=\"900px\" width=\"100%\"> </iframe>\n<p>It works because in JavaScript, <code>true &#x26;&#x26; expression</code> always evaluates to <code>expression</code>, and <code>false &#x26;&#x26; expression</code> always evaluates to <code>false</code>.</p>\n<p>Therefore, if the condition is <code>true</code>, the element right after <code>&#x26;&#x26;</code> will appear in the output. If it is <code>false</code>, React will ignore and skip it.</p>\n<p>Note that returning a falsy expression will still cause the element after <code>&#x26;&#x26;</code> to be skipped but will return the falsy expression. In the example below, <code>&#x3C;div>0&#x3C;/div></code> will be returned by the render method.</p>\n<pre><code class=\"language-js\">render() {\n  const count = 0;  return (\n    &#x3C;div>      { count &#x26;&#x26; &#x3C;h1>Messages: {count}&#x3C;/h1>}    &#x3C;/div>);\n}\n</code></pre>\n<h1>Inline If-Else with Conditional Operator</h1>\n<p>Another method for conditionally rendering elements inline is to use the JavaScript conditional operator <code>[condition ? true : false](&#x3C;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator>)</code>.</p>\n<p>In the example below, we use it to conditionally render a small block of text.</p>\n<pre><code class=\"language-js\">render() {\n  const isLoggedIn = this.state.isLoggedIn;\n  return (\n    &#x3C;div>      The user is &#x3C;b>{isLoggedIn ? 'currently' : 'not'}&#x3C;/b> logged in.    &#x3C;/div>);\n}\n</code></pre>\n<p>It can also be used for larger expressions although it is less obvious what's going on:</p>\n<pre><code class=\"language-js\">render() {\n  const isLoggedIn = this.state.isLoggedIn;\n  return (\n    &#x3C;div>      {isLoggedIn        ? &#x3C;LogoutButton onClick={this.handleLogoutClick} />        : &#x3C;LoginButton onClick={this.handleLoginClick} />      }\n    &#x3C;/div>  );\n}\n</code></pre>\n<p>Just like in JavaScript, it is up to you to choose an appropriate style based on what you and your team consider more readable. Also remember that whenever conditions become too complex, it might be a good time to <a href=\"https://reactjs.org/docs/components-and-props.html#extracting-components\">extract a component</a>.</p>\n<h1>Preventing Component from Rendering</h1>\n<p>In rare cases you might want a component to hide itself even though it was rendered by another component. To do this return <code>null</code> instead of its render output.</p>\n<p>In the example below, the <code>&#x3C;WarningBanner /></code> is rendered depending on the value of the prop called <code>warn</code>. If the value of the prop is <code>false</code>, then the component does not render:</p>\n<pre><code class=\"language-js\">function WarningBanner(props) {\n    if (!props.warn) {\n        return null;\n    }\n    return &#x3C;div className=\"warning\"> Warning!&#x3C;/div>;\n}\n\nclass Page extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { showWarning: true };\n        this.handleToggleClick = this.handleToggleClick.bind(this);\n    }\n\n    handleToggleClick() {\n        this.setState((state) => ({\n            showWarning: !state.showWarning\n        }));\n    }\n\n    render() {\n        return (\n            &#x3C;div>\n                {' '}\n                &#x3C;WarningBanner warn={this.state.showWarning} /> &#x3C;button onClick={this.handleToggleClick}>\n                    {' '}\n                    {this.state.showWarning ? 'Hide' : 'Show'}\n                &#x3C;/button>{' '}\n            &#x3C;/div>\n        );\n    }\n}\n\nReactDOM.render(&#x3C;Page />, document.getElementById('root'));\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/Xjoqwm?editors=0010\">Try it on CodePen</a></strong></p>\n<iframe src=\"https://codepen.io/gaearon/pen/Xjoqwm?editors=0010\" height=\"900px\" width=\"100%\"> </iframe>\n<p>Returning <code>null</code> from a component's <code>render</code> method does not affect the firing of the component's lifecycle methods. For instance <code>componentDidUpdate</code> will still be called.</p>\n<h1><strong>Lists and Keys</strong></h1>\n<h1>First, let's review how you transform lists in JavaScript.</h1>\n<p>Given the code below, we use the <code>[map()](&#x3C;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map>)</code> function to take an array of <code>numbers</code> and double their values. We assign the new array returned by <code>map()</code> to the variable <code>doubled</code> and log it:</p>\n<pre><code class=\"language-js\">const numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map((number) => number * 2);\nconsole.log(doubled);\n</code></pre>\n<p>This code logs <code>[2, 4, 6, 8, 10]</code> to the console.</p>\n<p>In React, transforming arrays into lists of <a href=\"https://reactjs.org/docs/rendering-elements.html\">elements</a> is nearly identical.</p>\n<h1>Rendering Multiple Components</h1>\n<p>You can build collections of elements and <a href=\"https://reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx\">include them in JSX</a> using curly braces <code>{}</code>.</p>\n<p>Below, we loop through the <code>numbers</code> array using the JavaScript <code>[map()](&#x3C;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map>)</code> function. We return a <code>&#x3C;li></code> element for each item. Finally, we assign the resulting array of elements to <code>listItems</code>:</p>\n<pre><code class=\"language-js\">const numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) => &#x3C;li>{number}&#x3C;/li>);\n</code></pre>\n<p>We include the entire <code>listItems</code> array inside a <code>&#x3C;ul></code> element, and <a href=\"https://reactjs.org/docs/rendering-elements.html#rendering-an-element-into-the-dom\">render it to the DOM</a>:</p>\n<pre><code class=\"language-js\">ReactDOM.render(&#x3C;ul>{listItems}&#x3C;/ul>, document.getElementById('root'));\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/GjPyQr?editors=0011\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/eYRmvvr?editors=0011\"></a><a href=\"https://codepen.io/bgoonz/pen/eYRmvvr?editors=0011\">https://codepen.io/bgoonz/pen/eYRmvvr?editors=0011</a></p>\n<iframe src=\"https://codepen.io/gaearon/pen/GjPyQr?editors=0011\" height=\"900px\" width=\"100%\"> </iframe>\n<p>This code displays a bullet list of numbers between 1 and 5.</p>\n<h1>Basic List Component</h1>\n<p>Usually you would render lists inside a <a href=\"https://reactjs.org/docs/components-and-props.html\">component</a>.</p>\n<p>We can refactor the previous example into a component that accepts an array of <code>numbers</code> and outputs a list of elements.</p>\n<pre><code class=\"language-js\">function NumberList(props) {\n    const numbers = props.numbers;\n    const listItems = numbers.map((number) => &#x3C;li>{number}&#x3C;/li>);\n    return &#x3C;ul>{listItems}&#x3C;/ul>;\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(&#x3C;NumberList numbers={numbers} />, document.getElementById('root'));\n</code></pre>\n<p>When you run this code, you'll be given a warning that a key should be provided for list items. A \"key\" is a special string attribute you need to include when creating lists of elements. We'll discuss why it's important in the next section.</p>\n<p>Let's assign a <code>key</code> to our list items inside <code>numbers.map()</code> and fix the missing key issue.</p>\n<pre><code class=\"language-js\">function NumberList(props) {\n    const numbers = props.numbers;\n    const listItems = numbers.map((number) => &#x3C;li key={number.toString()}> {number}&#x3C;/li>);\n    return &#x3C;ul>{listItems}&#x3C;/ul>;\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(&#x3C;NumberList numbers={numbers} />, document.getElementById('root'));\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/jrXYRR?editors=0011\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/yLXyMMP?editors=0011\"></a><a href=\"https://codepen.io/bgoonz/pen/yLXyMMP?editors=0011\">https://codepen.io/bgoonz/pen/yLXyMMP?editors=0011</a></p>\n<iframe src=\"https://codepen.io/gaearon/pen/jrXYRR?editors=0011\" height=\"900px\" width=\"100%\"> </iframe>\n<h1>Keys</h1>\n<p>Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity:</p>\n<pre><code class=\"language-js\">const numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) => &#x3C;li key={number.toString()}> {number}&#x3C;/li>);\n</code></pre>\n<p>The best way to pick a key is to use a string that uniquely identifies a list item among its siblings. Most often you would use IDs from your data as keys:</p>\n<pre><code class=\"language-js\">const todoItems = todos.map((todo) => &#x3C;li key={todo.id}> {todo.text}&#x3C;/li>);\n</code></pre>\n<p>When you don't have stable IDs for rendered items, you may use the item index as a key as a last resort:</p>\n<pre><code class=\"language-js\">const todoItems = todos.map((todo, index) =>\n  // Only do this if items have no stable IDs  &#x3C;li key={index}>    {todo.text}\n  &#x3C;/li>);\n</code></pre>\n<p>We don't recommend using indexes for keys if the order of items may change. This can negatively impact performance and may cause issues with component state. Check out Robin Pokorny's article for an <a href=\"https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318\">in-depth explanation on the negative impacts of using an index as a key</a>. If you choose not to assign an explicit key to list items then React will default to using indexes as keys.</p>\n<p>Here is an <a href=\"https://reactjs.org/docs/reconciliation.html#recursing-on-children\">in-depth explanation about why keys are necessary</a> if you're interested in learning more.</p>\n<h1>Extracting Components with Keys</h1>\n<p>Keys only make sense in the context of the surrounding array.</p>\n<p>For example, if you <a href=\"https://reactjs.org/docs/components-and-props.html#extracting-components\">extract</a> a <code>ListItem</code> component, you should keep the key on the <code>&#x3C;ListItem /></code> elements in the array rather than on the <code>&#x3C;li></code> element in the <code>ListItem</code> itself.</p>\n<p><strong>Example: Incorrect Key Usage</strong></p>\n<pre><code class=\"language-js\">function ListItem(props) {\n  const value = props.value;\n  return (\n    // Wrong! There is no need to specify the key here:    &#x3C;li key={value.toString()}>      {value}\n    &#x3C;/li>);\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // Wrong! The key should have been specified here:    &#x3C;ListItem value={number} />  );\n  return (\n    &#x3C;ul>      {listItems}\n    &#x3C;/ul>);\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  &#x3C;NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n</code></pre>\n<p><strong>Example: Correct Key Usage</strong></p>\n<pre><code class=\"language-js\">function ListItem(props) {\n  // Correct! There is no need to specify the key here:  return &#x3C;li>{props.value}&#x3C;/li>;}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // Correct! Key should be specified inside the array.    &#x3C;ListItem key={number.toString()} value={number} />  );\n  return (\n    &#x3C;ul>      {listItems}\n    &#x3C;/ul>);\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nReactDOM.render(\n  &#x3C;NumberList numbers={numbers} />,\n  document.getElementById('root')\n);\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/ZXeOGM?editors=0010\">Try it on CodePen</a></strong></p>\n<iframe src=\"https://codepen.io/gaearon/pen/ZXeOGM?editors=0010\" height=\"900px\" width=\"100%\"> </iframe>\n<p>A good rule of thumb is that elements inside the <code>map()</code> call need keys.</p>\n<h1>Keys Must Only Be Unique Among Siblings</h1>\n<p>Keys used within arrays should be unique among their siblings. However, they don't need to be globally unique. We can use the same keys when we produce two different arrays:</p>\n<pre><code class=\"language-js\">function Blog(props) {\n    const sidebar = (\n        &#x3C;ul>\n            {' '}\n            {props.posts.map((post) => (\n                &#x3C;li key={post.id}> {post.title}&#x3C;/li>\n            ))}\n        &#x3C;/ul>\n    );\n    const content = props.posts.map((post) => (\n        &#x3C;div key={post.id}>\n            {' '}\n            &#x3C;h3>{post.title}&#x3C;/h3> &#x3C;p>{post.content}&#x3C;/p>{' '}\n        &#x3C;/div>\n    ));\n    return (\n        &#x3C;div>\n            {' '}\n            {sidebar} &#x3C;hr /> {content}{' '}\n        &#x3C;/div>\n    );\n}\n\nconst posts = [\n    { id: 1, title: 'Hello World', content: 'Welcome to learning React!' },\n    { id: 2, title: 'Installation', content: 'You can install React from npm.' }\n];\nReactDOM.render(&#x3C;Blog posts={posts} />, document.getElementById('root'));\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/NRZYGN?editors=0010\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/mdwyWWy?editors=0010\"></a><a href=\"https://codepen.io/bgoonz/pen/mdwyWWy?editors=0010\">https://codepen.io/bgoonz/pen/mdwyWWy?editors=0010</a></p>\n<iframe src=\"https://codepen.io/gaearon/pen/NRZYGN?editors=0010\" height=\"900px\" width=\"100%\"> </iframe>\n<p>Keys serve as a hint to React but they don't get passed to your components. If you need the same value in your component, pass it explicitly as a prop with a different name:</p>\n<pre><code class=\"language-js\">const content = posts.map((post) => &#x3C;Post key={post.id} id={post.id} title={post.title} />);\n</code></pre>\n<p>With the example above, the <code>Post</code> component can read <code>props.id</code>, but not <code>props.key</code>.</p>\n<h1>Embedding map() in JSX</h1>\n<p>In the examples above we declared a separate <code>listItems</code> variable and included it in JSX:</p>\n<pre><code class=\"language-js\">function NumberList(props) {\n    const numbers = props.numbers;\n    const listItems = numbers.map((number) => &#x3C;ListItem key={number.toString()} value={number} />);\n    return &#x3C;ul> {listItems}&#x3C;/ul>;\n}\n</code></pre>\n<p>JSX allows <a href=\"https://reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx\">embedding any expression</a> in curly braces so we could inline the <code>map()</code> result:</p>\n<pre><code class=\"language-js\">function NumberList(props) {\n    const numbers = props.numbers;\n    return (\n        &#x3C;ul>\n            {' '}\n            {numbers.map((number) => (\n                &#x3C;ListItem key={number.toString()} value={number} />\n            ))}{' '}\n        &#x3C;/ul>\n    );\n}\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/BLvYrB?editors=0010\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/JjJoWEw?editors=0010\"></a><a href=\"https://codepen.io/bgoonz/pen/JjJoWEw?editors=0010\">https://codepen.io/bgoonz/pen/JjJoWEw?editors=0010</a></p>\n<iframe src=\"https://codepen.io/gaearon/pen/BLvYrB?editors=0010\" height=\"900px\" width=\"100%\"> </iframe>\n<p>Sometimes this results in clearer code, but this style can also be abused. Like in JavaScript, it is up to you to decide whether it is worth extracting a variable for readability. Keep in mind that if the <code>map()</code> body is too nested, it might be a good time to <a href=\"https://reactjs.org/docs/components-and-props.html#extracting-components\">extract a component</a>.</p>\n<h1><strong>Forms</strong></h1>\n<h1>HTML form elements work a bit differently from other DOM elements in React, because form elements naturally keep some internal state. For example, this form in plain HTML accepts a single name:</h1>\n<pre><code class=\"language-js\">&#x3C;form>\n    &#x3C;label>\n        Name:\n        &#x3C;input type=\"text\" name=\"name\" />\n    &#x3C;/label>\n    &#x3C;input type=\"submit\" value=\"Submit\" />\n&#x3C;/form>\n</code></pre>\n<p>This form has the default HTML form behavior of browsing to a new page when the user submits the form. If you want this behavior in React, it just works. But in most cases, it's convenient to have a JavaScript function that handles the submission of the form and has access to the data that the user entered into the form. The standard way to achieve this is with a technique called \"controlled components\".</p>\n<h1>Controlled Components</h1>\n<p>In HTML, form elements such as <code>&#x3C;input></code>, <code>&#x3C;textarea></code>, and <code>&#x3C;select></code> typically maintain their own state and update it based on user input. In React, mutable state is typically kept in the state property of components, and only updated with <code>[setState()](&#x3C;https://reactjs.org/docs/react-component.html#setstate>)</code>.</p>\n<p>We can combine the two by making the React state be the \"single source of truth\". Then the React component that renders a form also controls what happens in that form on subsequent user input. An input form element whose value is controlled by React in this way is called a \"controlled component\".</p>\n<p>For example, if we want to make the previous example log the name when it is submitted, we can write the form as a controlled component:</p>\n<pre><code class=\"language-js\">class NameForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { value: '' };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ value: event.target.value });\n    }\n    handleSubmit(event) {\n        alert('A name was submitted: ' + this.state.value);\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            &#x3C;form onSubmit={this.handleSubmit}>\n                {' '}\n                &#x3C;label>\n                    {' '}\n                    Name:\n                    &#x3C;input type=\"text\" value={this.state.value} onChange={this.handleChange} />{' '}\n                &#x3C;/label> &#x3C;input type=\"submit\" value=\"Submit\" />{' '}\n            &#x3C;/form>\n        );\n    }\n}\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/VmmPgp?editors=0010\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/rNwayjv?editors=0010\"></a><a href=\"https://codepen.io/bgoonz/pen/rNwayjv?editors=0010\">https://codepen.io/bgoonz/pen/rNwayjv?editors=0010</a></p>\n<iframe src=\"https://codepen.io/gaearon/pen/VmmPgp?editors=0010\" height=\"900px\" width=\"100%\"> </iframe>\n<p>Since the <code>value</code> attribute is set on our form element, the displayed value will always be <code>this.state.value</code>, making the React state the source of truth. Since <code>handleChange</code> runs on every keystroke to update the React state, the displayed value will update as the user types.</p>\n<p>With a controlled component, the input's value is always driven by the React state. While this means you have to type a bit more code, you can now pass the value to other UI elements too, or reset it from other event handlers.</p>\n<h1>The textarea Tag</h1>\n<p>In HTML, a <code>&#x3C;textarea></code> element defines its text by its children:</p>\n<pre><code class=\"language-js\">&#x3C;textarea>Hello there, this is some text in a text area&#x3C;/textarea>\n</code></pre>\n<p>In React, a <code>&#x3C;textarea></code> uses a <code>value</code> attribute instead. This way, a form using a <code>&#x3C;textarea></code> can be written very similarly to a form that uses a single-line input:</p>\n<pre><code class=\"language-js\">class EssayForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { value: 'Please write an essay about your favorite DOM element.' };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ value: event.target.value });\n    }\n    handleSubmit(event) {\n        alert('An essay was submitted: ' + this.state.value);\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            &#x3C;form onSubmit={this.handleSubmit}>\n                {' '}\n                &#x3C;label>\n                    {' '}\n                    Essay:\n                    &#x3C;textarea value={this.state.value} onChange={this.handleChange} />{' '}\n                &#x3C;/label> &#x3C;input type=\"submit\" value=\"Submit\" />{' '}\n            &#x3C;/form>\n        );\n    }\n}\n</code></pre>\n<p>Notice that <code>this.state.value</code> is initialized in the constructor, so that the text area starts off with some text in it.</p>\n<h1>The select Tag</h1>\n<p>In HTML, <code>&#x3C;select></code> creates a drop-down list. For example, this HTML creates a drop-down list of flavors:</p>\n<p><code>&#x3C;select>&#x3C;option value=\"grapefruit\">Grapefruit&#x3C;/option>&#x3C;option value=\"lime\">Lime&#x3C;/option>&#x3C;option selected value=\"coconut\">Coconut&#x3C;/option>&#x3C;option value=\"mango\">Mango&#x3C;/option>&#x3C;/select></code></p>\n<p>Note that the Coconut option is initially selected, because of the <code>selected</code> attribute. React, instead of using this <code>selected</code> attribute, uses a <code>value</code> attribute on the root <code>select</code> tag. This is more convenient in a controlled component because you only need to update it in one place. For example:</p>\n<pre><code class=\"language-js\">class FlavorForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { value: 'coconut' };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ value: event.target.value });\n    }\n    handleSubmit(event) {\n        alert('Your favorite flavor is: ' + this.state.value);\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            &#x3C;form onSubmit={this.handleSubmit}>\n                {' '}\n                &#x3C;label>\n                    {' '}\n                    Pick your favorite flavor:\n                    &#x3C;select value={this.state.value} onChange={this.handleChange}>\n                        {' '}\n                        &#x3C;option value=\"grapefruit\">Grapefruit&#x3C;/option> &#x3C;option value=\"lime\">Lime&#x3C;/option> &#x3C;option value=\"coconut\">Coconut&#x3C;/option> &#x3C;option value=\"mango\">\n                            Mango\n                        &#x3C;/option>{' '}\n                    &#x3C;/select>{' '}\n                &#x3C;/label> &#x3C;input type=\"submit\" value=\"Submit\" />{' '}\n            &#x3C;/form>\n        );\n    }\n}\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/JbbEzX?editors=0010\">Try it on CodePen</a></strong></p>\n<iframe src=\"https://codepen.io/gaearon/pen/JbbEzX?editors=0010\" height=\"900px\" width=\"100%\"> </iframe>\n<p>Overall, this makes it so that <code>&#x3C;input type=\"text\"></code>, <code>&#x3C;textarea></code>, and <code>&#x3C;select></code> all work very similarly - they all accept a <code>value</code> attribute that you can use to implement a controlled component.</p>\n<blockquote>\n<p>NoteYou can pass an array into the value attribute, allowing you to select multiple options in a select tag:&#x3C;select multiple={true} value={['B', 'C']}></p>\n</blockquote>\n<h1>The file input Tag</h1>\n<p>In HTML, an <code>&#x3C;input type=\"file\"></code> lets the user choose one or more files from their device storage to be uploaded to a server or manipulated by JavaScript via the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications\">File API</a>.</p>\n<p><code>&#x3C;input type=\"file\" /></code></p>\n<p>Because its value is read-only, it is an <strong>uncontrolled</strong> component in React. It is discussed together with other uncontrolled components <a href=\"https://reactjs.org/docs/uncontrolled-components.html#the-file-input-tag\">later in the documentation</a>.</p>\n<h1>Handling Multiple Inputs</h1>\n<p>When you need to handle multiple controlled <code>input</code> elements, you can add a <code>name</code> attribute to each element and let the handler function choose what to do based on the value of <code>event.target.name</code>.</p>\n<p>For example:</p>\n<pre><code class=\"language-js\">class Reservation extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isGoing: true,\n            numberOfGuests: 2\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        this.setState({\n            [name]: value\n        });\n    }\n\n    render() {\n        return (\n            &#x3C;form>\n                {' '}\n                &#x3C;label>\n                    {' '}\n                    Is going:\n                    &#x3C;input name=\"isGoing\" type=\"checkbox\" checked={this.state.isGoing} onChange={this.handleInputChange} />{' '}\n                &#x3C;/label> &#x3C;br /> &#x3C;label>\n                    {' '}\n                    Number of guests:\n                    &#x3C;input name=\"numberOfGuests\" type=\"number\" value={this.state.numberOfGuests} onChange={this.handleInputChange} />{' '}\n                &#x3C;/label>{' '}\n            &#x3C;/form>\n        );\n    }\n}\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/wgedvV?editors=0010\">Try it on CodePen</a></strong></p>\n<iframe src=\"https://codepen.io/gaearon/pen/wgedvV?editors=0010\" height=\"900px\" width=\"100%\"> </iframe>\n<p>Note how we used the ES6 <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names\">computed property name</a> syntax to update the state key corresponding to the given input name:</p>\n<pre><code class=\"language-js\">this.setState({\n    [name]: value\n});\n</code></pre>\n<p>It is equivalent to this ES5 code:</p>\n<pre><code class=\"language-js\">var partialState = {};\npartialState[name] = value;\nthis.setState(partialState);\n</code></pre>\n<p>Also, since <code>setState()</code> automatically <a href=\"https://reactjs.org/docs/state-and-lifecycle.html#state-updates-are-merged\">merges a partial state into the current state</a>, we only needed to call it with the changed parts.</p>\n<h1>Controlled Input Null Value</h1>\n<p>Specifying the value prop on a <a href=\"https://reactjs.org/docs/forms.html#controlled-components\">controlled component</a> prevents the user from changing the input unless you desire so. If you've specified a <code>value</code> but the input is still editable, you may have accidentally set <code>value</code> to <code>undefined</code> or <code>null</code>.</p>\n<p>The following code demonstrates this. (The input is locked at first but becomes editable after a short delay.)</p>\n<pre><code class=\"language-js\">ReactDOM.render(&#x3C;input value=\"hi\" />, mountNode);\n\nsetTimeout(function () {\n    ReactDOM.render(&#x3C;input value={null} />, mountNode);\n}, 1000);\n</code></pre>\n<h1>Alternatives to Controlled Components</h1>\n<p>It can sometimes be tedious to use controlled components, because you need to write an event handler for every way your data can change and pipe all of the input state through a React component. This can become particularly annoying when you are converting a preexisting codebase to React, or integrating a React application with a non-React library. In these situations, you might want to check out <a href=\"https://reactjs.org/docs/uncontrolled-components.html\">uncontrolled components</a>, an alternative technique for implementing input forms.</p>\n<h1>Fully-Fledged Solutions</h1>\n<p>If you're looking for a complete solution including validation, keeping track of the visited fields, and handling form submission, <a href=\"https://jaredpalmer.com/formik\">Formik</a> is one of the popular choices. However, it is built on the same principles of controlled components and managing state --- so don't neglect to learn them.</p>\n<h1><strong>Lifting State Up</strong></h1>\n<h1>Often, several components need to reflect the same changing data. We recommend lifting the shared state up to their closest common ancestor. Let's see how this works in action.</h1>\n<p>In this section, we will create a temperature calculator that calculates whether the water would boil at a given temperature.</p>\n<p>We will start with a component called <code>BoilingVerdict</code>. It accepts the <code>celsius</code> temperature as a prop, and prints whether it is enough to boil the water:</p>\n<pre><code class=\"language-js\">function BoilingVerdict(props) {\n    if (props.celsius >= 100) {\n        return &#x3C;p>The water would boil.&#x3C;/p>;\n    }\n    return &#x3C;p>The water would not boil.&#x3C;/p>;\n}\n</code></pre>\n<p>Next, we will create a component called <code>Calculator</code>. It renders an <code>&#x3C;input></code> that lets you enter the temperature, and keeps its value in <code>this.state.temperature</code>.</p>\n<p>Additionally, it renders the <code>BoilingVerdict</code> for the current input value.</p>\n<pre><code class=\"language-js\">class Calculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.state = { temperature: '' };\n    }\n\n    handleChange(e) {\n        this.setState({ temperature: e.target.value });\n    }\n\n    render() {\n        const temperature = this.state.temperature;\n        return (\n            &#x3C;fieldset>\n                {' '}\n                &#x3C;legend>Enter temperature in Celsius:&#x3C;/legend> &#x3C;input value={temperature} onChange={this.handleChange} /> &#x3C;BoilingVerdict\n                    celsius={parseFloat(temperature)}\n                />{' '}\n            &#x3C;/fieldset>\n        );\n    }\n}\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/ZXeOBm?editors=0010\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/zYzxZoL?editors=0010\"></a><a href=\"https://codepen.io/bgoonz/pen/zYzxZoL?editors=0010\">https://codepen.io/bgoonz/pen/zYzxZoL?editors=0010</a></p>\n<iframe src=\"https://codepen.io/gaearon/pen/ZXeOBm?editors=0010\" height=\"900px\" width=\"100%\"> </iframe>\n<h1>Adding a Second Input</h1>\n<p>Our new requirement is that, in addition to a Celsius input, we provide a Fahrenheit input, and they are kept in sync.</p>\n<p>We can start by extracting a <code>TemperatureInput</code> component from <code>Calculator</code>. We will add a new <code>scale</code> prop to it that can either be <code>\"c\"</code> or <code>\"f\"</code>:</p>\n<pre><code class=\"language-js\">const scaleNames = { c: 'Celsius', f: 'Fahrenheit' };\nclass TemperatureInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.state = { temperature: '' };\n    }\n\n    handleChange(e) {\n        this.setState({ temperature: e.target.value });\n    }\n\n    render() {\n        const temperature = this.state.temperature;\n        const scale = this.props.scale;\n        return (\n            &#x3C;fieldset>\n                {' '}\n                &#x3C;legend>Enter temperature in {scaleNames[scale]}:&#x3C;/legend> &#x3C;input value={temperature} onChange={this.handleChange} />{' '}\n            &#x3C;/fieldset>\n        );\n    }\n}\n</code></pre>\n<p>We can now change the <code>Calculator</code> to render two separate temperature inputs:</p>\n<pre><code class=\"language-js\">class Calculator extends React.Component {\n    render() {\n        return (\n            &#x3C;div>\n                {' '}\n                &#x3C;TemperatureInput scale=\"c\" /> &#x3C;TemperatureInput scale=\"f\" />{' '}\n            &#x3C;/div>\n        );\n    }\n}\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/jGBryx?editors=0010\">Try it on CodePen</a></strong></p>\n<p><a href=\"https://codepen.io/bgoonz/pen/QWgwpGv?editors=0010\"></a><a href=\"https://codepen.io/bgoonz/pen/QWgwpGv?editors=0010\">https://codepen.io/bgoonz/pen/QWgwpGv?editors=0010</a></p>\n<iframe src=\"https://codepen.io/gaearon/pen/jGBryx?editors=0010\" height=\"900px\" width=\"100%\"> </iframe>\n<p>We have two inputs now, but when you enter the temperature in one of them, the other doesn't update. This contradicts our requirement: we want to keep them in sync.</p>\n<p>We also can't display the <code>BoilingVerdict</code> from <code>Calculator</code>. The <code>Calculator</code> doesn't know the current temperature because it is hidden inside the <code>TemperatureInput</code>.</p>\n<h1>Writing Conversion Functions</h1>\n<p>First, we will write two functions to convert from Celsius to Fahrenheit and back:</p>\n<pre><code class=\"language-js\">function toCelsius(fahrenheit) {\n    return ((fahrenheit - 32) * 5) / 9;\n}\n\nfunction toFahrenheit(celsius) {\n    return (celsius * 9) / 5 + 32;\n}\n</code></pre>\n<p>These two functions convert numbers. We will write another function that takes a string <code>temperature</code> and a converter function as arguments and returns a string. We will use it to calculate the value of one input based on the other input.</p>\n<p>It returns an empty string on an invalid <code>temperature</code>, and it keeps the output rounded to the third decimal place:</p>\n<pre><code class=\"language-js\">function tryConvert(temperature, convert) {\n    const input = parseFloat(temperature);\n    if (Number.isNaN(input)) {\n        return '';\n    }\n    const output = convert(input);\n    const rounded = Math.round(output * 1000) / 1000;\n    return rounded.toString();\n}\n</code></pre>\n<p>For example, <code>tryConvert('abc', toCelsius)</code> returns an empty string, and <code>tryConvert('10.22', toFahrenheit)</code> returns <code>'50.396'</code>.</p>\n<h1>Lifting State Up</h1>\n<p>Currently, both <code>TemperatureInput</code> components independently keep their values in the local state:</p>\n<pre><code class=\"language-js\">class TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};  }\n\n  handleChange(e) {\n    this.setState({temperature: e.target.value});  }\n\n  render() {\n    const temperature = this.state.temperature;    // ...\n</code></pre>\n<p>However, we want these two inputs to be in sync with each other. When we update the Celsius input, the Fahrenheit input should reflect the converted temperature, and vice versa.</p>\n<p>In React, sharing state is accomplished by moving it up to the closest common ancestor of the components that need it. This is called \"lifting state up\". We will remove the local state from the <code>TemperatureInput</code> and move it into the <code>Calculator</code> instead.</p>\n<p>If the <code>Calculator</code> owns the shared state, it becomes the \"source of truth\" for the current temperature in both inputs. It can instruct them both to have values that are consistent with each other. Since the props of both <code>TemperatureInput</code> components are coming from the same parent <code>Calculator</code> component, the two inputs will always be in sync.</p>\n<p>Let's see how this works step by step.</p>\n<p>First, we will replace <code>this.state.temperature</code> with <code>this.props.temperature</code> in the <code>TemperatureInput</code> component. For now, let's pretend <code>this.props.temperature</code> already exists, although we will need to pass it from the <code>Calculator</code> in the future:</p>\n<pre><code class=\"language-js\">  render() {\n    // Before: const temperature = this.state.temperature;\n    const temperature = this.props.temperature;    // ...\n</code></pre>\n<p>We know that <a href=\"https://reactjs.org/docs/components-and-props.html#props-are-read-only\">props are read-only</a>. When the <code>temperature</code> was in the local state, the <code>TemperatureInput</code> could just call <code>this.setState()</code> to change it. However, now that the <code>temperature</code> is coming from the parent as a prop, the <code>TemperatureInput</code> has no control over it.</p>\n<p>In React, this is usually solved by making a component \"controlled\". Just like the DOM <code>&#x3C;input></code> accepts both a <code>value</code> and an <code>onChange</code> prop, so can the custom <code>TemperatureInput</code> accept both <code>temperature</code> and <code>onTemperatureChange</code> props from its parent <code>Calculator</code>.</p>\n<p>Now, when the <code>TemperatureInput</code> wants to update its temperature, it calls <code>this.props.onTemperatureChange</code>:</p>\n<pre><code class=\"language-js\">  handleChange(e) {\n    // Before: this.setState({temperature: e.target.value});\n    this.props.onTemperatureChange(e.target.value);    // ...\n</code></pre>\n<blockquote>\n<p>Note:There is no special meaning to either temperature or onTemperatureChange prop names in custom components. We could have called them anything else, like name them value and onChange which is a common convention.</p>\n</blockquote>\n<p>The <code>onTemperatureChange</code> prop will be provided together with the <code>temperature</code> prop by the parent <code>Calculator</code> component. It will handle the change by modifying its own local state, thus re-rendering both inputs with the new values. We will look at the new <code>Calculator</code> implementation very soon.</p>\n<p>Before diving into the changes in the <code>Calculator</code>, let's recap our changes to the <code>TemperatureInput</code> component. We have removed the local state from it, and instead of reading <code>this.state.temperature</code>, we now read <code>this.props.temperature</code>. Instead of calling <code>this.setState()</code> when we want to make a change, we now call <code>this.props.onTemperatureChange()</code>, which will be provided by the <code>Calculator</code>:</p>\n<pre><code class=\"language-js\">class TemperatureInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        this.props.onTemperatureChange(e.target.value);\n    }\n\n    render() {\n        const temperature = this.props.temperature;\n        const scale = this.props.scale;\n        return (\n            &#x3C;fieldset>\n                {' '}\n                &#x3C;legend>Enter temperature in {scaleNames[scale]}:&#x3C;/legend> &#x3C;input value={temperature} onChange={this.handleChange} />{' '}\n            &#x3C;/fieldset>\n        );\n    }\n}\n</code></pre>\n<p>Now let's turn to the <code>Calculator</code> component.</p>\n<p>We will store the current input's <code>temperature</code> and <code>scale</code> in its local state. This is the state we \"lifted up\" from the inputs, and it will serve as the \"source of truth\" for both of them. It is the minimal representation of all the data we need to know in order to render both inputs.</p>\n<p>For example, if we enter 37 into the Celsius input, the state of the <code>Calculator</code> component will be:</p>\n<pre><code class=\"language-js\">{\n  temperature: '37',\n  scale: 'c'\n}\n</code></pre>\n<p>If we later edit the Fahrenheit field to be 212, the state of the <code>Calculator</code> will be:</p>\n<pre><code class=\"language-js\">{\n  temperature: '212',\n  scale: 'f'\n}\n</code></pre>\n<p>We could have stored the value of both inputs but it turns out to be unnecessary. It is enough to store the value of the most recently changed input, and the scale that it represents. We can then infer the value of the other input based on the current <code>temperature</code> and <code>scale</code> alone.</p>\n<p>The inputs stay in sync because their values are computed from the same state:</p>\n<pre><code class=\"language-js\">class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = {temperature: '', scale: 'c'};  }\n\n  handleCelsiusChange(temperature) {\n    this.setState({scale: 'c', temperature});  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({scale: 'f', temperature});  }\n\n  render() {\n    const scale = this.state.scale;    const temperature = this.state.temperature;    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;return (\n      &#x3C;div>        &#x3C;TemperatureInputscale=\"c\"          temperature={celsius}          onTemperatureChange={this.handleCelsiusChange} />        &#x3C;TemperatureInputscale=\"f\"          temperature={fahrenheit}          onTemperatureChange={this.handleFahrenheitChange} />        &#x3C;BoilingVerdict          celsius={parseFloat(celsius)} />      &#x3C;/div>);\n  }\n}\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/WZpxpz?editors=0010\">Try it on CodePen</a></strong></p>\n<iframe src=\"https://codepen.io/gaearon/pen/WZpxpz?editors=0010\" height=\"900px\" width=\"100%\"> </iframe>\n<p>Now, no matter which input you edit, <code>this.state.temperature</code> and <code>this.state.scale</code> in the <code>Calculator</code> get updated. One of the inputs gets the value as is, so any user input is preserved, and the other input value is always recalculated based on it.</p>\n<p>Let's recap what happens when you edit an input:</p>\n<ul>\n<li>React calls the function specified as <code>onChange</code> on the DOM <code>&#x3C;input></code>. In our case, this is the <code>handleChange</code> method in the <code>TemperatureInput</code> component.</li>\n<li>The <code>handleChange</code> method in the <code>TemperatureInput</code> component calls <code>this.props.onTemperatureChange()</code> with the new desired value. Its props, including <code>onTemperatureChange</code>, were provided by its parent component, the <code>Calculator</code>.</li>\n<li>When it previously rendered, the <code>Calculator</code> had specified that <code>onTemperatureChange</code> of the Celsius <code>TemperatureInput</code> is the <code>Calculator</code>'s <code>handleCelsiusChange</code> method, and <code>onTemperatureChange</code> of the Fahrenheit <code>TemperatureInput</code> is the <code>Calculator</code>'s <code>handleFahrenheitChange</code> method. So either of these two <code>Calculator</code> methods gets called depending on which input we edited.</li>\n<li>Inside these methods, the <code>Calculator</code> component asks React to re-render itself by calling <code>this.setState()</code> with the new input value and the current scale of the input we just edited.</li>\n<li>React calls the <code>Calculator</code> component's <code>render</code> method to learn what the UI should look like. The values of both inputs are recomputed based on the current temperature and the active scale. The temperature conversion is performed here.</li>\n<li>React calls the <code>render</code> methods of the individual <code>TemperatureInput</code> components with their new props specified by the <code>Calculator</code>. It learns what their UI should look like.</li>\n<li>React calls the <code>render</code> method of the <code>BoilingVerdict</code> component, passing the temperature in Celsius as its props.</li>\n<li>React DOM updates the DOM with the boiling verdict and to match the desired input values. The input we just edited receives its current value, and the other input is updated to the temperature after conversion.</li>\n</ul>\n<p>Every update goes through the same steps so the inputs stay in sync.</p>\n<h1>Lessons Learned</h1>\n<p>There should be a single \"source of truth\" for any data that changes in a React application. Usually, the state is first added to the component that needs it for rendering. Then, if other components also need it, you can lift it up to their closest common ancestor. Instead of trying to sync the state between different components, you should rely on the <a href=\"https://reactjs.org/docs/state-and-lifecycle.html#the-data-flows-down\">top-down data flow</a>.</p>\n<p>Lifting state involves writing more \"boilerplate\" code than two-way binding approaches, but as a benefit, it takes less work to find and isolate bugs. Since any state \"lives\" in some component and that component alone can change it, the surface area for bugs is greatly reduced. Additionally, you can implement any custom logic to reject or transform user input.</p>\n<p>If something can be derived from either props or state, it probably shouldn't be in the state. For example, instead of storing both <code>celsiusValue</code> and <code>fahrenheitValue</code>, we store just the last edited <code>temperature</code> and its <code>scale</code>. The value of the other input can always be calculated from them in the <code>render()</code> method. This lets us clear or apply rounding to the other field without losing any precision in the user input.</p>\n<p>When you see something wrong in the UI, you can use <a href=\"https://github.com/facebook/react/tree/main/packages/react-devtools\">React Developer Tools</a> to inspect the props and move up the tree until you find the component responsible for updating the state. This lets you trace the bugs to their source:</p>\n<p><img src=\"https://reactjs.org/ef94afc3447d75cdc245c77efb0d63be/react-devtools-state.gif\" alt=\"https://reactjs.org/ef94afc3447d75cdc245c77efb0d63be/react-devtools-state.gif\"></p>\n<h1><strong>Composition vs Inheritance</strong></h1>\n<h1>React has a powerful composition model, and we recommend using composition instead of inheritance to reuse code between components.</h1>\n<p>In this section, we will consider a few problems where developers new to React often reach for inheritance, and show how we can solve them with composition.</p>\n<h1>Containment</h1>\n<p>Some components don't know their children ahead of time. This is especially common for components like <code>Sidebar</code> or <code>Dialog</code> that represent generic \"boxes\".</p>\n<p>We recommend that such components use the special <code>children</code> prop to pass children elements directly into their output:</p>\n<pre><code class=\"language-js\">function FancyBorder(props) {\n    return &#x3C;div className={'FancyBorder FancyBorder-' + props.color}> {props.children} &#x3C;/div>;\n}\n</code></pre>\n<p>This lets other components pass arbitrary children to them by nesting the JSX:</p>\n<pre><code class=\"language-js\">function WelcomeDialog() {\n    return (\n        &#x3C;FancyBorder color=\"blue\">\n            {' '}\n            &#x3C;h1 className=\"Dialog-title\"> Welcome &#x3C;/h1> &#x3C;p className=\"Dialog-message\"> Thank you for visiting our spacecraft! &#x3C;/p>{' '}\n        &#x3C;/FancyBorder>\n    );\n}\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/ozqNOV?editors=0010\">Try it on CodePen</a></strong></p>\n<p>Anything inside the <code>&#x3C;FancyBorder></code> JSX tag gets passed into the <code>FancyBorder</code> component as a <code>children</code> prop. Since <code>FancyBorder</code> renders <code>{props.children}</code> inside a <code>&#x3C;div></code>, the passed elements appear in the final output.</p>\n<p>While this is less common, sometimes you might need multiple \"holes\" in a component. In such cases you may come up with your own convention instead of using <code>children</code>:</p>\n<pre><code class=\"language-js\">function SplitPane(props) {\n  return (\n    &#x3C;div className=\"SplitPane\">      &#x3C;div className=\"SplitPane-left\">        {props.left}      &#x3C;/div>      &#x3C;div className=\"SplitPane-right\">        {props.right}      &#x3C;/div>    &#x3C;/div>);\n}\n\nfunction App() {\n  return (\n    &#x3C;SplitPaneleft={\n        &#x3C;Contacts />      }right={\n        &#x3C;Chat />      } />);\n}\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/gwZOJp?editors=0010\">Try it on CodePen</a></strong></p>\n<p>React elements like <code>&#x3C;Contacts /></code> and <code>&#x3C;Chat /></code> are just objects, so you can pass them as props like any other data. This approach may remind you of \"slots\" in other libraries but there are no limitations on what you can pass as props in React.</p>\n<h1>Specialization</h1>\n<p>Sometimes we think about components as being \"special cases\" of other components. For example, we might say that a <code>WelcomeDialog</code> is a special case of <code>Dialog</code>.</p>\n<p>In React, this is also achieved by composition, where a more \"specific\" component renders a more \"generic\" one and configures it with props:</p>\n<pre><code class=\"language-js\">function Dialog(props) {\n    return (\n        &#x3C;FancyBorder color=\"blue\">\n            {' '}\n            &#x3C;h1 className=\"Dialog-title\"> {props.title} &#x3C;/h1> &#x3C;p className=\"Dialog-message\"> {props.message} &#x3C;/p>{' '}\n        &#x3C;/FancyBorder>\n    );\n}\n\nfunction WelcomeDialog() {\n    return &#x3C;Dialog title=\"Welcome\" message=\"Thank you for visiting our spacecraft!\" />;\n}\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/kkEaOZ?editors=0010\">Try it on CodePen</a></strong></p>\n<p>Composition works equally well for components defined as classes:</p>\n<pre><code class=\"language-js\">function Dialog(props) {\n    return (\n        &#x3C;FancyBorder color=\"blue\">\n            {' '}\n            &#x3C;h1 className=\"Dialog-title\"> {props.title}&#x3C;/h1> &#x3C;p className=\"Dialog-message\"> {props.message}&#x3C;/p> {props.children}{' '}\n        &#x3C;/FancyBorder>\n    );\n}\n\nclass SignUpDialog extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSignUp = this.handleSignUp.bind(this);\n        this.state = { login: '' };\n    }\n\n    render() {\n        return (\n            &#x3C;Dialog title=\"Mars Exploration Program\" message=\"How should we refer to you?\">\n                {' '}\n                &#x3C;input value={this.state.login} onChange={this.handleChange} /> &#x3C;button onClick={this.handleSignUp}> Sign Me Up! &#x3C;/button>{' '}\n            &#x3C;/Dialog>\n        );\n    }\n\n    handleChange(e) {\n        this.setState({ login: e.target.value });\n    }\n\n    handleSignUp() {\n        alert(`Welcome aboard, ${this.state.login}!`);\n    }\n}\n</code></pre>\n<p><strong><a href=\"https://codepen.io/gaearon/pen/gwZbYa?editors=0010\">Try it on CodePen</a></strong></p>\n<h1>So What About Inheritance?</h1>\n<p>At Facebook, we use React in thousands of components, and we haven't found any use cases where we would recommend creating component inheritance hierarchies.</p>\n<p>Props and composition give you all the flexibility you need to customize a component's look and behavior in an explicit and safe way. Remember that components may accept arbitrary props, including primitive values, React elements, or functions.</p>\n<p>If you want to reuse non-UI functionality between components, we suggest extracting it into a separate JavaScript module. The components may import it and use that function, object, or a class, without extending it.</p>\n<h1><strong>Thinking in React</strong></h1>\n<h1>React is, in our opinion, the premier way to build big, fast Web apps with JavaScript. It has scaled very well for us at Facebook and Instagram.</h1>\n<p>One of the many great parts of React is how it makes you think about apps as you build them. In this document, we'll walk you through the thought process of building a searchable product data table using React.</p>\n<h1>Start With A Mock</h1>\n<p>Imagine that we already have a JSON API and a mock from our designer. The mock looks like this:</p>\n<p><img src=\"https://reactjs.org/static/1071fbcc9eed01fddc115b41e193ec11/d4770/thinking-in-react-mock.png\" alt=\"https://reactjs.org/static/1071fbcc9eed01fddc115b41e193ec11/d4770/thinking-in-react-mock.png\"></p>\n<p>Our JSON API returns some data that looks like this:</p>\n<pre><code class=\"language-js\">[\n    { category: 'Sporting Goods', price: '$49.99', stocked: true, name: 'Football' },\n    { category: 'Sporting Goods', price: '$9.99', stocked: true, name: 'Baseball' },\n    { category: 'Sporting Goods', price: '$29.99', stocked: false, name: 'Basketball' },\n    { category: 'Electronics', price: '$99.99', stocked: true, name: 'iPod Touch' },\n    { category: 'Electronics', price: '$399.99', stocked: false, name: 'iPhone 5' },\n    { category: 'Electronics', price: '$199.99', stocked: true, name: 'Nexus 7' }\n];\n</code></pre>\n<h1>Step 1: Break The UI Into A Component Hierarchy</h1>\n<p>The first thing you'll want to do is to draw boxes around every component (and subcomponent) in the mock and give them all names. If you're working with a designer, they may have already done this, so go talk to them! Their Photoshop layer names may end up being the names of your React components!</p>\n<p>But how do you know what should be its own component? Use the same techniques for deciding if you should create a new function or object. One such technique is the <a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\">single responsibility principle</a>, that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.</p>\n<p>Since you're often displaying a JSON data model to a user, you'll find that if your model was built correctly, your UI (and therefore your component structure) will map nicely. That's because UI and data models tend to adhere to the same <em>information architecture</em>. Separate your UI into components, where each component matches one piece of your data model.</p>\n<p><img src=\"https://reactjs.org/static/eb8bda25806a89ebdc838813bdfa3601/6b2ea/thinking-in-react-components.png\" alt=\"https://reactjs.org/static/eb8bda25806a89ebdc838813bdfa3601/6b2ea/thinking-in-react-components.png\"></p>\n<p>You'll see here that we have five components in our app. We've italicized the data each component represents.</p>\n<ol>\n<li><strong><code>FilterableProductTable</code> (orange):</strong> contains the entirety of the example</li>\n<li><strong><code>SearchBar</code> (blue):</strong> receives all <em>user input</em></li>\n<li><strong><code>ProductTable</code> (green):</strong> displays and filters the <em>data collection</em> based on <em>user input</em></li>\n<li><strong><code>ProductCategoryRow</code> (turquoise):</strong> displays a heading for each <em>category</em></li>\n<li><strong><code>ProductRow</code> (red):</strong> displays a row for each <em>product</em></li>\n</ol>\n<p>If you look at <code>ProductTable</code>, you'll see that the table header (containing the \"Name\" and \"Price\" labels) isn't its own component. This is a matter of preference, and there's an argument to be made either way. For this example, we left it as part of <code>ProductTable</code> because it is part of rendering the <em>data collection</em> which is <code>ProductTable</code>'s responsibility. However, if this header grows to be complex (e.g., if we were to add affordances for sorting), it would certainly make sense to make this its own <code>ProductTableHeader</code> component.</p>\n<p>Now that we've identified the components in our mock, let's arrange them into a hierarchy. Components that appear within another component in the mock should appear as a child in the hierarchy:</p>\n<ul>\n<li>\n<p><code>FilterableProductTable</code></p>\n<ul>\n<li><code>SearchBar</code></li>\n<li>\n<p><code>ProductTable</code></p>\n<ul>\n<li><code>ProductCategoryRow</code></li>\n<li><code>ProductRow</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1>Step 2: Build A Static Version in React</h1>\n<p>See the Pen <a href=\"https://codepen.io/gaearon/pen/BwWzwm\">Thinking In React: Step 2</a> on <a href=\"https://codepen.io/\">CodePen</a>.</p>\n<p>Now that you have your component hierarchy, it's time to implement your app. The easiest way is to build a version that takes your data model and renders the UI but has no interactivity. It's best to decouple these processes because building a static version requires a lot of typing and no thinking, and adding interactivity requires a lot of thinking and not a lot of typing. We'll see why.</p>\n<p>To build a static version of your app that renders your data model, you'll want to build components that reuse other components and pass data using <em>props</em>. <em>props</em> are a way of passing data from parent to child. If you're familiar with the concept of <em>state</em>, <strong>don't use state at all</strong> to build this static version. State is reserved only for interactivity, that is, data that changes over time. Since this is a static version of the app, you don't need it.</p>\n<p>You can build top-down or bottom-up. That is, you can either start with building the components higher up in the hierarchy (i.e. starting with <code>FilterableProductTable</code>) or with the ones lower in it (<code>ProductRow</code>). In simpler examples, it's usually easier to go top-down, and on larger projects, it's easier to go bottom-up and write tests as you build.</p>\n<p>At the end of this step, you'll have a library of reusable components that render your data model. The components will only have <code>render()</code> methods since this is a static version of your app. The component at the top of the hierarchy (<code>FilterableProductTable</code>) will take your data model as a prop. If you make a change to your underlying data model and call <code>ReactDOM.render()</code> again, the UI will be updated. You can see how your UI is updated and where to make changes. React's <strong>one-way data flow</strong> (also called <em>one-way binding</em>) keeps everything modular and fast.</p>\n<p>Refer to the <a href=\"https://reactjs.org/docs/\">React docs</a> if you need help executing this step.</p>\n<h1>A Brief Interlude: Props vs State</h1>\n<p>There are two types of \"model\" data in React: props and state. It's important to understand the distinction between the two; skim <a href=\"https://reactjs.org/docs/state-and-lifecycle.html\">the official React docs</a> if you aren't sure what the difference is. See also <a href=\"https://reactjs.org/docs/faq-state.html#what-is-the-difference-between-state-and-props\">FAQ: What is the difference between state and props?</a></p>\n<h1>Step 3: Identify The Minimal (but complete) Representation Of UI State</h1>\n<p>To make your UI interactive, you need to be able to trigger changes to your underlying data model. React achieves this with <strong>state</strong>.</p>\n<p>To build your app correctly, you first need to think of the minimal set of mutable state that your app needs. The key here is <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">DRY: <em>Don't Repeat Yourself</em></a>. Figure out the absolute minimal representation of the state your application needs and compute everything else you need on-demand. For example, if you're building a TODO list, keep an array of the TODO items around; don't keep a separate state variable for the count. Instead, when you want to render the TODO count, take the length of the TODO items array.</p>\n<p>Think of all the pieces of data in our example application. We have:</p>\n<ul>\n<li>The original list of products</li>\n<li>The search text the user has entered</li>\n<li>The value of the checkbox</li>\n<li>The filtered list of products</li>\n</ul>\n<p>Let's go through each one and figure out which one is state. Ask three questions about each piece of data:</p>\n<ol>\n<li>Is it passed in from a parent via props? If so, it probably isn't state.</li>\n<li>Does it remain unchanged over time? If so, it probably isn't state.</li>\n<li>Can you compute it based on any other state or props in your component? If so, it isn't state.</li>\n</ol>\n<p>The original list of products is passed in as props, so that's not state. The search text and the checkbox seem to be state since they change over time and can't be computed from anything. And finally, the filtered list of products isn't state because it can be computed by combining the original list of products with the search text and value of the checkbox.</p>\n<p>So finally, our state is:</p>\n<ul>\n<li>The search text the user has entered</li>\n<li>The value of the checkbox</li>\n</ul>\n<h1>Step 4: Identify Where Your State Should Live</h1>\n<p>See the Pen <a href=\"https://codepen.io/gaearon/pen/qPrNQZ\">Thinking In React: Step 4</a> on <a href=\"https://codepen.io/\">CodePen</a>.</p>\n<p>OK, so we've identified what the minimal set of app state is. Next, we need to identify which component mutates, or <em>owns</em>, this state.</p>\n<p>Remember: React is all about one-way data flow down the component hierarchy. It may not be immediately clear which component should own what state. <strong>This is often the most challenging part for newcomers to understand,</strong> so follow these steps to figure it out:</p>\n<p>For each piece of state in your application:</p>\n<ul>\n<li>Identify every component that renders something based on that state.</li>\n<li>Find a common owner component (a single component above all the components that need the state in the hierarchy).</li>\n<li>Either the common owner or another component higher up in the hierarchy should own the state.</li>\n<li>If you can't find a component where it makes sense to own the state, create a new component solely for holding the state and add it somewhere in the hierarchy above the common owner component.</li>\n</ul>\n<p>Let's run through this strategy for our application:</p>\n<ul>\n<li><code>ProductTable</code> needs to filter the product list based on state and <code>SearchBar</code> needs to display the search text and checked state.</li>\n<li>The common owner component is <code>FilterableProductTable</code>.</li>\n<li>It conceptually makes sense for the filter text and checked value to live in <code>FilterableProductTable</code></li>\n</ul>\n<p>Cool, so we've decided that our state lives in <code>FilterableProductTable</code>. First, add an instance property <code>this.state = {filterText: '', inStockOnly: false}</code> to <code>FilterableProductTable</code>'s <code>constructor</code> to reflect the initial state of your application. Then, pass <code>filterText</code> and <code>inStockOnly</code> to <code>ProductTable</code> and <code>SearchBar</code> as a prop. Finally, use these props to filter the rows in <code>ProductTable</code> and set the values of the form fields in <code>SearchBar</code>.</p>\n<p>You can start seeing how your application will behave: set <code>filterText</code> to <code>\"ball\"</code> and refresh your app. You'll see that the data table is updated correctly.</p>\n<h1>Step 5: Add Inverse Data Flow</h1>\n<p>See the Pen <a href=\"https://codepen.io/gaearon/pen/LzWZvb\">Thinking In React: Step 5</a> on <a href=\"https://codepen.io/\">CodePen</a>.</p>\n<p>So far, we've built an app that renders correctly as a function of props and state flowing down the hierarchy. Now it's time to support data flowing the other way: the form components deep in the hierarchy need to update the state in <code>FilterableProductTable</code>.</p>\n<p>React makes this data flow explicit to help you understand how your program works, but it does require a little more typing than traditional two-way data binding.</p>\n<p>If you try to type or check the box in the current version of the example, you'll see that React ignores your input. This is intentional, as we've set the <code>value</code> prop of the <code>input</code> to always be equal to the <code>state</code> passed in from <code>FilterableProductTable</code>.</p>\n<p>Let's think about what we want to happen. We want to make sure that whenever the user changes the form, we update the state to reflect the user input. Since components should only update their own state, <code>FilterableProductTable</code> will pass callbacks to <code>SearchBar</code> that will fire whenever the state should be updated. We can use the <code>onChange</code> event on the inputs to be notified of it. The callbacks passed by <code>FilterableProductTable</code> will call <code>setState()</code>, and the app will be updated.</p>\n<h1>And That's It</h1>\n<p>Hopefully, this gives you an idea of how to think about building components and applications with React. While it may be a little more typing than you're used to, remember that code is read far more than it's written, and it's less difficult to read this modular, explicit code. As you start to build large libraries of components, you'll appreciate this explicitness and modularity, and with code reuse, your lines of code will start to shrink. :)</p>\n<p><a href=\"https://www.notion.so/Advanced-Content-fbe1ec3ca3544951b5763b051b843949\">Advanced Content</a></p>\n<p><a href=\"https://www.notion.so/React-Component-3dc17bc49a8e4d7e89efcc1281e747d9\">React Component</a></p>"},{"url":"/docs/react/react-in-depth/","relativePath":"docs/react/react-in-depth.md","relativeDir":"docs/react","base":"react-in-depth.md","name":"react-in-depth","frontmatter":{"title":"React In Depth","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"Intro To React","description":"React embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time.","robots":[],"extra":[{"name":"og:description","value":"React embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time.","keyName":"property","relativeUrl":false},{"name":"og:title","value":"Intro To React","keyName":"property","relativeUrl":false},{"name":"og:image","value":"images/kind-whale.gif","keyName":"property","relativeUrl":true},{"name":"twitter:title","value":"Intro To React","keyName":"name","relativeUrl":false},{"name":"twitter:description","value":"React embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time.","keyName":"name","relativeUrl":false},{"name":"twitter:card","value":"react_img_intro","keyName":"name","relativeUrl":false},{"name":"og:type","value":"website","keyName":"property","relativeUrl":false}],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>React In Depth</h1>\n<iframe src=\"https://codesandbox.io/embed/react-gists-4s3ll?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"react-gists\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n<h1>Random Things to Remember</h1>\n<p><img src=\"https://miro.medium.com/max/60/0*LHVHf7SPZ1t0UVAj?q=20\"></p>\n<p><img src=\"https://miro.medium.com/max/630/0*LHVHf7SPZ1t0UVAj\"></p>\n<p><img src=\"https://miro.medium.com/max/60/0*wR-lbD4zf45-IHoQ?q=20\"><img src=\"https://miro.medium.com/max/630/0*wR-lbD4zf45-IHoQ\"><img src=\"https://miro.medium.com/max/60/0*7EZESKf0XPbncXAY?q=20\"><img src=\"https://miro.medium.com/max/630/0*7EZESKf0XPbncXAY\"></p>\n<ul>\n<li>Using () implictly returns components.</li>\n<li>Role of index.js is to <em>render</em> your application.</li>\n<li>The reference to root comes from a div in the body of your public HTML file.</li>\n<li>State of a component is simply a regular JS Object.</li>\n<li>Class Components require render() method to return JSX.</li>\n<li>Functional Components directly return JSX.</li>\n<li>Class is className in React.</li>\n<li>When parsing for an integer just chain Number.parseInt(\"123\")</li>\n<li>Use ternary operator if you want to make a conditional inside a fragment.</li>\n</ul>\n<!---->\n<ul>\n<li>Purpose of React.Fragment is to allow you to create groups of children without adding an extra dom element.</li>\n</ul>\n<h1>Front-End History</h1>\n<ul>\n<li>React makes it easier for you to make front-end elements. A front-end timeline</li>\n<li>Some noteworthy front end libraries that have been used in the past few years:</li>\n<li>2005: Script.aculo.us</li>\n<li>2005: Dojo</li>\n<li>2006: YUI</li>\n<li>2010: Knockout</li>\n<li>2011: AngularJS</li>\n<li>2012: Elm</li>\n<li>2013: React (Considered the standard front-end library)</li>\n<li>React manages the creation and updating of DOM nodes in your Web page.</li>\n<li>All it does is dynamically render stuff into your DOM.</li>\n<li>What it doesn’t do:</li>\n<li>Ajax</li>\n<li>Services</li>\n<li>Local Storage</li>\n<li>Provide a CSS framework</li>\n<li>React is unopinionated</li>\n<li>Just contains a few rules for developers to follow, and it just works.</li>\n<li>JSX : Javascript Extension is a language invented to help write React Applications (looks like a mixture of JS and HTML)</li>\n<li>Here is an overview of the difference between rendering out vanilla JS to create elements, and JSX:</li>\n</ul>\n<!---->\n<ul>\n<li>This may seem like a lot of code but when you end up building many components, it becomes nice to put each of those functions/classes into their own files to organize your code. Using tools with React</li>\n<li>React DevTools : New tool in your browser to see ow React is working in the browser</li>\n<li>create-react-app : Extensible command-line tool to help generate standard React applications.</li>\n<li>Webpack : In between tool for dealing with the extra build step involved.</li>\n</ul>\n<!---->\n<ul>\n<li>HMR : (Hot Module Replacement) When you make changes to your source code the changes are delivered in real-time.</li>\n<li>React Developers created something called Flux Architecture to moderate how their web page consumes and modifies data received from back-end API's.</li>\n</ul>\n<!---->\n<ul>\n<li>Choosing React</li>\n<li>Basically, React is super important to learn and master.</li>\n</ul>\n<h1>React Concepts and Features</h1>\n<p>There are many benefits to using React over just Vanilla JavaScript.</p>\n<ul>\n<li>Modularity</li>\n<li>To avoid the mess of many event listeners and template strings, React gives you the benefit of a lot of modularity.</li>\n<li>Easy to start</li>\n<li>No specials tools are needed to use Basic React.</li>\n<li>You can start working directly with createElement method in React.</li>\n<li>Declarative Programming</li>\n<li>React is declarative in nature, utilizing either it’s built-in createElement method or the higher-level language known as JSX.</li>\n<li>Reusability</li>\n<li>Create elements that can be re-used over and over. One-flow of data</li>\n<li>React apps are built as a combination of parent and child components.</li>\n<li>Parents can have one or more child components, all children have parents.</li>\n<li>Data is never passed from child to the parent.</li>\n<li>Virtual DOM : React provides a Virtual DOM that acts as an agent between the real DOM and the developer to help debug, maintain, and provide general use.</li>\n<li>Due to this usage, React handles web pages much more intelligently; making it one of the speediest Front End Libraries available.</li>\n</ul>\n<h1>ES6 Refresher</h1>\n<p>Exporting one item per file</p>\n<ul>\n<li>Use export default statement in ES6 to export an item. ES6</li>\n</ul>\n<p>CommonJS (Equivalent)</p>\n<p>Exporting multiple items per file</p>\n<ul>\n<li>Use just thw export keyword (without default) to export multiple items per file. ES6 (Better to export them individually like this, rather than bunching them all into an object)</li>\n</ul>\n<p>CommonJS (Equivalent)</p>\n<p>Importing with ES6 vs CommonJS</p>\n<ul>\n<li>Import statements in ES6 modules must always be at the top of the file, because all imports must occur before the rest of the file’s code runs. ES6</li>\n</ul>\n<p>CommonJS</p>\n<p>Unnamed default imports</p>\n<ul>\n<li>You can name unnamed items exported with export default any name when you import them.</li>\n</ul>\n<!---->\n<ul>\n<li>Just remember if you use export instead of export default then your import is already named and cannot be renamed.</li>\n</ul>\n<p>Aliasing imports</p>\n<ul>\n<li>Use as asterisk to import an entire module’s contents.</li>\n<li>Keep in mind you must use an as keyword to refer to it later.</li>\n</ul>\n<!---->\n<ul>\n<li>You can also name identically named functions or items from different files.</li>\n</ul>\n<p>Browser support for ES6 Modules</p>\n<ul>\n<li>ES6 Modules can only be used when a JS file is specified as a module. &#x3C;script type=\"module\" src=\"./wallet.js\">&#x3C;/script></li>\n<li>You can get browser support for ES6 modules by adding module into your script tag.</li>\n</ul>\n<h1>Notes</h1>\n<h1>JSX In Depth</h1>\n<ul>\n<li>Remember that JSX is just syntactic sugar for the built in React.createElement(component, props, ...children)</li>\n<li>React Library must always be in scope from your JSX code.</li>\n<li>Use Dot Notation for JSX Type</li>\n<li>User-Defined Components Must Be Capitalized &#x3C;Foo /> vs &#x3C;div></li>\n<li>Cannot use a general expression as the React element type. (Incorrect)</li>\n</ul>\n<p>(Corrected)</p>\n<p>Props in JSX</p>\n<ul>\n<li>Several ways to specify props in JSX.</li>\n<li>Javascript Expressions as Props</li>\n</ul>\n<!---->\n<ul>\n<li>String Literals</li>\n</ul>\n<!---->\n<ul>\n<li>Props Default to “True”</li>\n</ul>\n<!---->\n<ul>\n<li>Spread Attributes</li>\n</ul>\n<p>Children in JSX</p>\n<ul>\n<li>props.children : The content between opening and closing tag. JavaScript Expressions as Children</li>\n</ul>\n<p>Functions as Children</p>\n<ul>\n<li>props.children works like any other prop, meaning it can pass any sort of data.</li>\n</ul>\n<p>Booleans, Null, and Undefined Are Ignored</p>\n<ul>\n<li>false, null, undefined, and true are all valid children.</li>\n<li>They will not render.</li>\n<li>You can use these to conditionally render items.</li>\n</ul>\n<!---->\n<ul>\n<li>In this example, the component will only render if showHeader evals to True.</li>\n</ul>\n<!---->\n<ul>\n<li>Note that certain falsy values such as zero will still be rendered by React, you can work around this by ensuring situations like the above eval. into a boolean.</li>\n<li>In the times you want booleans to be rendered out, simply convert it into a string first.</li>\n</ul>\n<h1>Reconciliation</h1>\n<p>The Diffing Algorithm</p>\n<ul>\n<li>Diffing : When the state of a component changes React creates a new virtual DOM tree.</li>\n<li>Elements of Different Types</li>\n<li>Every time the root elements have different types, React tears down the old tree and builds the new tree from scratch.</li>\n<li>DOM Elements Of the Same Type</li>\n<li>When comparing two DOM elements of the same type, React keeps the same underlying DOM node and only updates the changes attributes.</li>\n</ul>\n<!---->\n<ul>\n<li>Component Elements Of The Same Type</li>\n<li>When components update, instances will remain the same, so that state maintains across renders.</li>\n<li>React will only update the props, to match the new element.</li>\n<li>Recursing On Children</li>\n<li>React will iterate both lists of children and generate a mutation whenever there’s a difference.</li>\n<li>This is why we use keys.</li>\n<li>Makes it easier for React to match children in the original tree with children in the subsequent tree.</li>\n<li>Tradeoffs</li>\n<li>Important to remember that reconciliation algorithm is an <em>implementation detail</em>.</li>\n<li>Re-rendering only to apply the differences following the rules stated in the previous sections.</li>\n</ul>\n<h1>Typechecking With PropTypes<img src=\"https://miro.medium.com/max/60/0*8ls0PmtREELbf5Wm?q=20\"><img src=\"https://miro.medium.com/max/630/0*8ls0PmtREELbf5Wm\">\n\n\n</h1>\n<ul>\n<li>As your application grows, you can use React’s typechecking to catch bugs.</li>\n<li>propTypes is a special property to run typechecking.</li>\n<li>exports range of built in validators to ensure your received data is valid.</li>\n<li>propTypes is only checked in development mode.</li>\n</ul>\n<p>Requiring Single Child</p>\n<ul>\n<li>Use PropTypes.element to specify only a single child can be passed to a component as children.</li>\n</ul>\n<p>Default Prop Values</p>\n<ul>\n<li>Use defaultProps to assign default values for props.</li>\n</ul>\n<h1>Notes</h1>\n<h1>React Router Introduction</h1>\n<ul>\n<li>React Router is the answer for rendering different components for different pages.</li>\n<li>A front-end library that allows you to control which components to display using the browser location.</li>\n<li>Client-side Routing Getting started with routing</li>\n<li>Install React Router with:</li>\n<li>npm install — save react-router-dom@⁵.1.2</li>\n<li>Import Browser Router from package.</li>\n<li>import { BrowserRouter } from “react-router-dom”;</li>\n<li>BrowserRouter is the primary component of the router that wraps your route hierarchy.</li>\n<li>Wrap it around components.</li>\n<li>Creates a React Context that passes routing information down to all its descendant components.</li>\n<li>You can also use HashRouter, where it would generate a hash before the endpoint. Creating frontend routes</li>\n<li>React Router helps your app render specific components based on the URL.</li>\n<li>The most common component is &#x3C;Route></li>\n<li>Wrapped around another component, causing the comp. to only render if the a certain URL is matched.</li>\n<li>Props : path, component, exact, and [render]</li>\n<li>Browser Router can only have a single child component.</li>\n<li>The Browser Router wraps all routes within a parent div element.</li>\n</ul>\n<!---->\n<ul>\n<li>component</li>\n<li>Indicates component to render.</li>\n<li>path</li>\n<li>Indicates path to render a specific component.</li>\n<li>exact</li>\n<li>Tells route to not pattern match and only render a certain route exclusively to it’s associated component.</li>\n<li>render</li>\n<li>Optional prop that takes in a function to be called.</li>\n<li>Causes extra work for React.</li>\n<li>Preferred for inline rendering of simple functional components.</li>\n<li>Difference between component and render is that component returns new JSX that be re-mounted, but render returns the JSX that will be mounted only once.</li>\n<li>// This inline rendering will work, but is unnecessarily slow. &#x3C;Route path=”/hello” component={() => &#x3C;h1>Hello!&#x3C;/h1>} /> // This is the preferred way for inline rendering. &#x3C;Route path=”/hello” render={() => &#x3C;h1>Hello!&#x3C;/h1>} /></li>\n<li>Also useful if you need to pass in specific props to a component.</li>\n<li>// `users` to be passed as a prop: const users = { 1: { name: “Andrew” }, 2: { name: “Raymond” }, }; &#x3C;Route path=”/users” render={() => &#x3C;Users users={users} />} />;</li>\n</ul>\n<p>Route path params</p>\n<ul>\n<li>Your component’s props can hold information about URL’s parameters.</li>\n<li>Will match segments starting at : to the next /, ?, #.</li>\n</ul>\n<!---->\n<ul>\n<li>{...props} spreads out the router's props.</li>\n<li>props.match.params is used to access the match prop's parameters.</li>\n<li>Useful keys on the match object:</li>\n<li>isExact : boolean that tells you whether or not the URL exactly matches the path.</li>\n<li>url : the currentURL</li>\n<li>path : Route path it matched against (w/o wildcards)</li>\n<li>params : Matches for the individual wildcard segments.</li>\n</ul>\n<h1>Navigation</h1>\n<p>React Router Navigation</p>\n<ul>\n<li>Link, NavLink, Redirect, history props of React Router are used to help your user navigate routes. Adding links for navigation</li>\n<li>Issues on-click navigation event to a route defined in app.</li>\n<li>Usage renders an anchor tag with a correctly set href attribute.</li>\n</ul>\n<!---->\n<ul>\n<li>Link takes two properties: to and onClick.</li>\n<li>to : route location that points to an absolute path.</li>\n<li>onClick : clickHandler.</li>\n<li>NavLink works just like Link but has a bit of extra functionality.</li>\n<li>Adds extra styling, when the path it links to matches the current path.</li>\n<li>As it’s name suggests, it is used to Nav Bars.</li>\n<li>Takes three props:</li>\n<li>activeClassName : allows you to set a CSS class name for styling. (default set to 'active')</li>\n<li>activeStyle : style object that is applied inline when it's to prop. matches the current URL.</li>\n<li>exact prop is a boolean that defaults to false; you can set it to true to apply requirement of an exact URL match.</li>\n<li>exact can also be used as a flag instead of a reg. property value.</li>\n<li>benefit of adding this is so that you don’t trigger other matches. Switching between routes</li>\n<li>&#x3C;Switch> : Component allows you to only render one route even if several match the current URL.</li>\n<li>You may nest as many routes as you wish but only the first match of the current URL will be rendered.</li>\n<li>Very useful if we want a default component to render if none of our routes match.</li>\n</ul>\n<!---->\n<ul>\n<li>DefaultComponent will only render if none of the other URLs match up.</li>\n<li>&#x3C;Redirect> : Helps redirect users.</li>\n<li>Only takes a single prop: to.</li>\n</ul>\n<p>History</p>\n<ul>\n<li>History allows you to update the URL programmatically.</li>\n<li>Contains two useful methods:</li>\n<li>push : Adds a new URL to the end of the history stack.</li>\n<li>replace : Replaces the current URL on the history stack, so the back button won't take you to it.</li>\n</ul>\n<h1>Nested Routes</h1>\n<p>Why nested routes?</p>\n<ul>\n<li>Create routes that tunnel into main components vs getting rendered on the main page as it’s own thing. What are nested routes?</li>\n</ul>\n<p>Alt. version using props.match</p>\n<ul>\n<li>As you can see above, our end URL isn’t even defined until we apply those flexible values in.</li>\n</ul>\n<h1>React Builds</h1>\n<ul>\n<li>Build : Process of converting code into something that can actually execute or run on the target platform.</li>\n<li>In regards to React, the minimum a build should do is convert JSX to something that browsers can understand. Reviewing common terminology</li>\n<li>Linting : Process of using a tool to analyze your code to catch common errors, bugs, inconsistencies etc...</li>\n<li>Transpilation : Process of converting source code, like JS, from one version to another.</li>\n<li>Minification : Process of removing all unnecessary characters in your code.</li>\n<li>Bundling : Process of combining multiple code files into a single file.</li>\n<li>Tree Shaking : Process of removing unused or dead code from your application before it's bundled. Configuration or code?</li>\n<li>Configuration allows developers to create build tasks by declaring either JSON, XML, or YAML without explicitly writing every step in the process.</li>\n<li>Coding or Scripting simply requires code. Babel and webpack (yes, that's intentionally a lowercase 'w')</li>\n<li>Babel : Code Transpiler that allows you to use all of the latest features and syntax wihtout worrying about what browsers support what.</li>\n<li>webpack : Allows developers to use JS modules w/o requiring users to use a browser that natively supports ES modules.</li>\n<li>Create React App uses webpack and Babel under the hood to build applications. The Create React App build process</li>\n<li>What happens when you run npm start:</li>\n<li>.env variables are loaded.</li>\n<li>list of browsers to support are checked.</li>\n<li>config’d HTTP port checked for availability.</li>\n<li>application compiler is configured and created.</li>\n<li>webpack-dev-starter is started</li>\n<li>webpack-dev-starter compiles app.</li>\n<li>index.html is loaded into browser</li>\n<li>file watcher is started to watch for changes. Ejecting</li>\n<li>There is a script in Create React App called eject that allows you to 'eject' your application and expose all the hidden stuff. Preparing to deploy a React application for production</li>\n<li>Defining Env Variables</li>\n</ul>\n<p>Configuring the supported browsers</p>\n<ul>\n<li>If you specify older browsers it will affect how your code get’s transpiled. Creating a production build</li>\n<li>Run npm run build to create a production build.</li>\n<li>Bundles React in production mode and optimizes the build for the best performance.</li>\n</ul>\n<h1>Notes</h1>\n<h1>Introduction to React</h1>\n<ul>\n<li>Simply a nice library that turns data into DOM.</li>\n<li>Tree Diffing : Fast comparison and patching of data by comparing the current virtual DOM and new virtual DOM - updating only the pieces that change.</li>\n<li>It's just a tree with some fancy diffing</li>\n</ul>\n<h1>Create Element</h1>\n<p>From JavaScript To DOM</p>\n<ul>\n<li>The React.createElement function has the following form:</li>\n</ul>\n<!---->\n<ul>\n<li>Type : Type of element to create, i.e. a string for an HTML element or a reference to a function or class that is a React component.</li>\n<li>Props : Object that contains data to render the element.</li>\n<li>Children : Children of the elemet, as many as you want. Creating elements</li>\n<li>Our rendering goal:</li>\n</ul>\n<!---->\n<ul>\n<li>There are five tags to create:</li>\n<li>One ul</li>\n<li>Two li</li>\n<li>Two a</li>\n<li>There are certain attributes we want to appear in the DOM for these tags as well:</li>\n<li>Each li has a class (or className in React)</li>\n<li>Both a ele's have href attributes</li>\n<li>Also keep in mind the parent child relationships happening between the tags.</li>\n<li>ul is the parent of both li</li>\n<li>Each li has an a element as a child</li>\n<li>Each a has a text content child</li>\n</ul>\n<p>Converting to virtual DOM</p>\n<ul>\n<li>After you set up your React.createElement, you use React.render to take the value returned from cE and a DOM node to insert into the conversion of the real DOM.</li>\n</ul>\n<!---->\n<ul>\n<li>JS Code => Virtual DOM => Real Dom Updates</li>\n<li>If you call React.render a second or multiple times it just checks the existing Virtual DOM and it knows which smaller areas to change. Thinking in Components</li>\n<li>Components are pieces of reusable front-end pieces.</li>\n<li>Components should be Single Responsibility Principle compliant.</li>\n</ul>\n<h1>Create Element</h1>\n<p>React.createElement Demo</p>\n<ul>\n<li>Can import non-local dependencies with import 'package-link'</li>\n</ul>\n<!---->\n<ul>\n<li>Remember when importing modules from other files you have to denote the file type in the import statement. HTML Original</li>\n</ul>\n<p>React Version</p>\n<ul>\n<li>Because class is a reserved keyword in JS, in React we can use className to assign a class to an element.</li>\n<li>Remember the data that goes into createElement: element type, data to pass into the element, and then children.</li>\n<li>props : Properties;</li>\n<li>To handle certain values that are initially undefined, we can use defaultProps.</li>\n</ul>\n<!---->\n<ul>\n<li>You can change in the devTools Network tab the internet speed to check for values that may be undefined to hangle with defaultProps.</li>\n<li>If we fetch multiple pieces of data, we can render many things by using map.</li>\n<li>You need to assign a unique key to each of the clues.</li>\n<li>We need to keep track of them individually so that React can easily refer to a specific one if there is an issue. clue => { key:clue.id, ...clue }</li>\n</ul>\n<!---->\n<ul>\n<li>Note: JSX is preferred over React.createElement;</li>\n</ul>\n<h1>Notes from Hello Programmer Exercise</h1>\n<ul>\n<li>When you import modules from websites they must have CORs activated.</li>\n<li>These import statements, import global variables.</li>\n<li>When we want to move our code into production we need to change the imports into the production minified versions.</li>\n</ul>\n<!---->\n<ul>\n<li>While we will never actually be creating full apps with just React.createElement => it is the enginer that is running under the hood!</li>\n</ul>\n<h1>Introduction to JSX<img src=\"https://miro.medium.com/max/60/0*NNxuFMF-sOL8Wvdl?q=20\"><img src=\"https://miro.medium.com/max/630/0*NNxuFMF-sOL8Wvdl\">\n\n</h1>\n<ul>\n<li>JSX : Javascript Extension, a new language created by React developers to have an easier way of interacting with the React API. How to use JSX</li>\n<li>We will use babel to convert version of modern JS into an older version of JS. React Create Element</li>\n</ul>\n<p>JSX Version</p>\n<ul>\n<li>Keep in mind that self closing tags in React must have a forward slash to close it.</li>\n</ul>\n<!---->\n<ul>\n<li>Properties and Data</li>\n</ul>\n<!---->\n<ul>\n<li>Comments in JSX have the following syntax:</li>\n</ul>\n<!---->\n<ul>\n<li>Property Names:</li>\n<li>checked : Attribute of input components such as checkbox or radio, use it to set whether the component is checked or not.</li>\n<li>className : Used to specify a CSS class.</li>\n<li>dangerouslySetInnerHTML : React's equivalent of innerHTML because it is risky to cross-site scripting attacks.</li>\n<li>htmlFor : Because for is protected keyword, React elements use this instead.</li>\n<li>onChange : Event fired whenever a form field is changed.</li>\n<li>style : Accepts a JS object with camelCase properties rather than a CSS string.</li>\n<li>value : Supported by Input, Select, and TextArea components; use it to set the value of the component.</li>\n<li>Note: React uses camel-case!!! The JSX semicolon gotcha</li>\n</ul>\n<p>create Element equivalent</p>\n<ul>\n<li>We wrap what want to return in parenthesis so JS doesn’t auto add semi-colons after every line and run the code incorrectly.</li>\n<li>Just remember if you decided to use the return keyword in a function to ‘return some JSX’, then make sure you wrap the JSX in parenthesis.</li>\n</ul>\n<p>npx create-react-app my-app</p>\n<ul>\n<li>Single line used to initiate a React application.</li>\n<li>React has a great toolchain where you can see changes live as you’re editing your application.</li>\n<li>React errors will be rendered directly onto the browser window.</li>\n<li>A downside is that it installs a lot of bloat files.</li>\n<li>Examples of React create Element and JSX equivalent</li>\n</ul>\n<p>More Complex JSX Example</p>\n<h1>Notes</h1>\n<h1>Using Custom CRA Templates</h1>\n<p>Using a Custom Template npx create-react-app my-app --template @appacademy/simple</p>\n<ul>\n<li>Keep in mind that using create-react-app automatically initializes a git repository for you!</li>\n<li>App Academy custom template for creating a react app.</li>\n<li>If using the default react create project you can delete the following files:</li>\n<li>favicon.ico</li>\n<li>robots.txt</li>\n<li>logo192.png</li>\n<li>logo512.png</li>\n<li>manifest.json</li>\n<li>You can also simplify the html file into:</li>\n</ul>\n<p>Simplifying the src folder</p>\n<ul>\n<li>Remove: App.css App.test.js logo.svg serviceWorker.js setupTests.js</li>\n<li>Update the Following Files:</li>\n</ul>\n<h1>React Class Components</h1>\n<p>Class Components</p>\n<ul>\n<li>You can write React components using ES2015 Classes: Function Component</li>\n</ul>\n<p>ES2015 Version</p>\n<ul>\n<li>We can access props within a class component by using this.props</li>\n<li>Keep in mind Class Components are used just like function components.</li>\n</ul>\n<p>Setting and accessing props</p>\n<ul>\n<li>If we define a constructor method in our Class Component, we have to define the super method with props passed through it.</li>\n<li>Side Note: Before React used ES2015 Classes, it used React.createclass function, if you ever need to use this antiquated method make sure you install a module called create-react-class Stateful components</li>\n<li>One of the major reasons why you would choose to use a Class Component over a Function Component is to add and manage local or internal state to your component.</li>\n<li>Second of the major reasons is to be able to use a Class Component’s lifecycle methods. What is state?</li>\n<li>Props are data that are provided by the consumer or caller of the component.</li>\n<li>Not meant to be changed by a component.</li>\n<li>State is data that is internal to the component.</li>\n<li>Intended to be updated or mutated. When to use state</li>\n<li><em>Only Use State when it is absolutely necessary</em></li>\n<li>If the data never changes, or if it’s needed through an entire application use props instead.</li>\n<li>State is more often used when creating components that retrieve data from APIs or render forms.</li>\n<li>The general rule of thumb: If a component doesn’t need to use state or lifecyle methods, it should be prioritized as a function component.</li>\n<li>Functional:Stateless || Class:Stateful Initializing state</li>\n<li>Use a class constructor method to initialize this.state object. // Application Entry Point</li>\n</ul>\n<p>// Class Component: RandomQuote</p>\n<p>Updating State</p>\n<ul>\n<li>Let’s say we want to update our state with a new quote.</li>\n<li>We can set up event listeners in React similarly to how we did them before.</li>\n<li>&#x3C;button type=”button” onClick={this.changeQuote}> Change Quote &#x3C;/button></li>\n<li>onClick is the event listener.</li>\n<li>{this.changeQuote} is the event handler method.</li>\n<li>Our Class Component File should now look like this with the new additions:</li>\n</ul>\n<p>Don’t modify state directly</p>\n<ul>\n<li>It is important to never modify your state directly!</li>\n<li>ALWAYS use this.setState method to update state.</li>\n<li>This is because when you only use this.state to re-assign, no re-rendering will occur => leaving our component out of sync. Properly updating state from the previous state</li>\n<li>In our current example, the way we have changeQuote set up leaves us with occasionally producing the same index twice in a row.</li>\n<li>One solution is to design a loop but keep in mind that state updates are handled asynchronously in React (your current value is not guaranteed to be the latest)</li>\n<li>A safe method is to pass an anonymous method to this.setState (instead of an object literal) Previous</li>\n</ul>\n<p>Passing w/ Anon Method</p>\n<p>Providing default values for props</p>\n<ul>\n<li>In our current example, we pass in a static array of predefined quotes in our constructor.</li>\n<li>The way it is set up right now leaves our list of quotes unchanged after initialization.</li>\n<li>We can make quotes more dynamic by replacing our static array with a props argument passed into super.</li>\n<li>constructor(props) { super(props); }</li>\n<li>We can now move our quotes array to our application entry point and pass it in as a prop. // Application Entry Point</li>\n</ul>\n<!---->\n<ul>\n<li>One thing to note about this workaround is that the caller of the component <em>must</em> set the quotes prop or the component will throw an error => so use defaultProps!</li>\n</ul>\n<!---->\n<ul>\n<li>A good safety net in case the consumer/caller doesn’t provide a value for the quotes array.</li>\n<li>We can even remove it from our index.js now and an error will not be thrown.</li>\n</ul>\n<h1>Handling Events<img src=\"https://miro.medium.com/max/1400/0*c24XQBvqBBg0Eztz\"><img src=\"https://miro.medium.com/max/1400/0*N7KFfhOZZ7UrY8s4\"><img src=\"https://miro.medium.com/max/60/0*ywV6dO4a4QcGJxK5?q=20\"><img src=\"https://miro.medium.com/max/630/0*ywV6dO4a4QcGJxK5\"><img src=\"https://miro.medium.com/max/60/0*Nd73GjTY1PVQtjtQ?q=20\"><img src=\"https://miro.medium.com/max/630/0*Nd73GjTY1PVQtjtQ\">\n\n</h1>\n<ul>\n<li>To add an event listener to an element, just define a method to handle the event and associate that method with the element event you are listening for. Example</li>\n</ul>\n<!---->\n<ul>\n<li>Note that when refering the handler method in onClick we’re not invoking showAlert simply just passing a reference. Preventing default behavior</li>\n<li>HTML Elements in the browser often have a lot of default behavior.</li>\n<li>I.E. Clicking on an &#x3C;a> element navigates so a resource denoted by &#x3C;href> property.</li>\n<li>Here is an example of where using e.preventDefault() could come in handy.</li>\n</ul>\n<!---->\n<ul>\n<li>The button contained within the form will end up refreshing the page before this.submitForm method can be completed.</li>\n<li>We can stick an e.preventDefault() into the actual method to get around this problem.</li>\n<li>e : Parameter that references a Synthetic Event object type. Using this in event handlers</li>\n</ul>\n<!---->\n<ul>\n<li>When we console log this we see the AlertButton object.</li>\n<li>If we were to write the showAlert method with a regular class method like:</li>\n</ul>\n<!---->\n<ul>\n<li>We would get undefined => remember that fat arrow binds to the current context! Reviewing class methods and the this keyword</li>\n<li>Let’s refresh on binding.</li>\n</ul>\n<!---->\n<ul>\n<li>The first time we use our displayMethod call, it is called directly on the instance of the boyfriend class, which is why Momato Riruru was printed out.</li>\n<li>The second time it was called, the ref of the method is stored as a variable and method is called on that variable instead of the instance; resulting in a type error (it has lost it’s context)</li>\n<li>Remember we can use the bind method to rebind context!</li>\n<li>We can refactor to get the second call working like this:</li>\n<li>const displayAgain = Ming.displayName.bind(Ming); displayAgain(); // => Now Momato Riruru will be printed out.</li>\n<li>To continue using function declarations vs fat arrow we can assign context in a constructor within a class component.</li>\n</ul>\n<!---->\n<ul>\n<li>Experimental Syntax : Syntax that has been proposed to add to ECMAScript but hasn't officially been added to the language specification yet.</li>\n<li>It’s good to pick one approach and use it consistently, either:</li>\n<li>Class Properties &#x26; Arrow Functions</li>\n<li>Bind Method &#x26; This Keyword The SyntheticEvent object</li>\n<li>Synthetic Event Objects: Cross Browser wrappeds around the browser’s native event.</li>\n<li>Includes the use of stopPropagation() and preventDefault();</li>\n<li>Attributes of the Synthetic Event Object:Attributesboolean bubblesboolean cancelableDOMEventTarget currentTargetboolean defaultPreventednumber eventPhaseboolean isTrustedDOMEvent nativeEventvoid preventDefault()boolean isDefaultPrevented()void stopPropagation()boolean isPropagationStopped()void persist()DOMEventTarget targetnumber timeStampstring type</li>\n<li>nativeEvent : property defined in a synthetic event object that gives you access to the underlying native browser event (rarely used!)</li>\n</ul>\n<h1>Forms in React</h1>\n<p><em>Exercise being done in a separate file</em> Random Notes</p>\n<ul>\n<li>onChange : detects when a value of an input element changes.</li>\n<li>Assigning onChange to our input fields makes our component's state update in real time during user input.</li>\n<li>Dont forget to add preventDefault onto form submissions to deal with the default behavior of the browser refreshing the page!</li>\n<li>submittedOn: new Date(), Can be added to a form, most likely will persist into a DB.</li>\n<li>Controlled Components</li>\n<li>We use the onChange event handlers on form fields to keep our component's state as the \"one source of truth\"</li>\n<li>Adding an onChange event handler to every single input can massively bloat your code.</li>\n<li>Try assiging it to it’s own method to apply everywhere.</li>\n<li>textarea is handled differently in react: it takes in a value property to handle what the inner text will be.</li>\n</ul>\n<!---->\n<ul>\n<li>We can use validation libraries like validate to make our validation functions more complex.</li>\n</ul>\n<p>Note About Client-side vs server-side validation</p>\n<ul>\n<li>Server-side validation is not optional.</li>\n<li>Tech-savvy users can manipulate client-side validations.</li>\n<li>Sometimes the ‘best approach’ is to skip implementing validations on the client-side and rely completely on the server-side validation.</li>\n</ul>\n<h1>Component Lifecycle</h1>\n<ul>\n<li>Component Lifecycle is simply a way of describing the key moments in the lifetime of a component.</li>\n<li>Loading (Mounting)</li>\n<li>Updating</li>\n<li>Unloading (Unmounting) The lifecycle of a React component</li>\n<li>Each Class Component has several lifecycle methods that you can add to run code at specific times.</li>\n<li>componentDidMount : Method called after your component has been added to the component tree.</li>\n<li>componentDidUpdate : Method called after your component has been updated.</li>\n<li>componentWillUnmount : Method called just before your component is removed from the component tree.</li>\n<li>Mounting</li>\n<li>constructor method is called</li>\n<li>render method is called</li>\n<li>React updates the DOM</li>\n<li>componentDidMount is called</li>\n<li>Updating</li>\n<li>When component receives new props</li>\n<li>render method is called</li>\n<li>React updates the DOM</li>\n<li>componentDidUpdate is called</li>\n<li>When setState is called</li>\n<li>render method is called</li>\n<li>React updates the DOM</li>\n<li>componentDidUpdate is called</li>\n<li>Unmounting</li>\n<li>The moment before a class component is removed from the component tree:</li>\n<li>componentDidMount will be called. Avoiding the legacy lifecycle methods</li>\n<li>Occasionally you will encounter some deprecated lifecycle methods:</li>\n<li>UNSAFE_componentWillMount</li>\n<li>UNSAFE_componentWillReceiveProps</li>\n<li>UNSAFE_componentWillUpdate</li>\n<li>Just know they will be removed soon from React’s API, peace. Using the class component lifecycle methods <em>Exercise done in sep. directory</em></li>\n<li>Assorted Notes:</li>\n<li>Common Use for componentDidMount lifecycle method is for fetching data from an API.</li>\n</ul>\n<p>—</p>\n<h1>Notes</h1>\n<h1>React Context</h1>\n<ul>\n<li>You can use React Context to pass data through a component tree without having to manually thread props.</li>\n<li>Convenient way to share &#x26; update global data. Creating a Context</li>\n</ul>\n<!---->\n<ul>\n<li>We use React.createContext to create context.</li>\n<li>Keep in mind if you invoke this method with aruguments, those arguments will be set as default context. Adding a Provider to the App component</li>\n<li>In order to pass context over to child components we need to wrap them in a provider component.</li>\n<li>The provider component takes in a value property that points to the information that needs to be passed to the children.</li>\n</ul>\n<p>Setting up a Consumer</p>\n<ul>\n<li>Keep in mind that Context.Consumer expects a function as a child.</li>\n<li>The function has a value prop passed in from Context.Provider</li>\n</ul>\n<h1>Notes</h1>\n<h1>Redux Explained</h1>\n<ul>\n<li>JS Framework for managing the frontend state of a web application.</li>\n<li>Gives us ability to store information in an organized manner in a web app and quickly retrieve that information from anywhere in the app.</li>\n<li>Redux</li>\n<li>Client Side Data Management</li>\n<li>Controls “Frontend State”</li>\n<li>NOT Your Database</li>\n<li>NOT Component State</li>\n<li>Just used for managing Data</li>\n</ul>\n<!---->\n<ul>\n<li>Visual of how an app without React manages it’s data.</li>\n<li>A lot of prop threading happening.</li>\n<li>Data stored in a sep. location — global data. The Anatomy of Redux</li>\n<li>Store</li>\n<li>Holds the Frontend State</li>\n<li>Provides an API for the Frontend State</li>\n<li>Action</li>\n<li>POJOs</li>\n<li>Outline Changes to Frontend State</li>\n<li>Reducers</li>\n<li>Functions</li>\n<li>Make Changes to Frontend State Where did Redux come from?</li>\n<li>There are three central philosophies of Redux:</li>\n<li>A Single Source of Truth : state is stored in a POJO</li>\n<li>State is Read Only : State is immutable, modified by dispatching actions.</li>\n<li>Changes are Made with Pure Functions : Reducers that receive the actions and return updated state are pure functions of the old state and action. When is it appropriate to use Redux?</li>\n<li>When doing a project with simpler global state requirements, it may be better to choose React’s Context API over Redux.</li>\n<li>Redux offers more flexibility and support for middleware along with richer developer tools. Vocabulary</li>\n<li>State</li>\n<li><em>Redux is a State Manager</em></li>\n<li>State is all the information stored by that program at a particular point in time.</li>\n<li>Redux’s main job is to store the state and make it directly available to your entire app.</li>\n<li>Store</li>\n<li><em>Redux stores state in a single store</em>.</li>\n<li>Redux store is a single JS object with a couple of methods (not a class!)</li>\n<li>Methods include: getState, dispatch(action), and subscribe(listener)</li>\n<li>Actions</li>\n<li><em>Redux store is updated by dispatching actions</em></li>\n<li>Action is just a POJO that includes a mandatory type property.</li>\n<li>Contain info to update the store.</li>\n<li>We dispatch actions in response to User actions or AJAX requests.</li>\n<li>Pure Functions</li>\n<li><em>Redux Reducers are Pure Functions</em></li>\n<li>Functions are pure when their behavior depends only on it’s arguments as has no side effects.</li>\n<li>Simply takes in an argument and outputs a value.</li>\n<li>Reducer</li>\n<li><em>Redux handles actions using reducers</em></li>\n<li>A function that is called each time an action is dispatched.</li>\n<li>Takes in an action and current state</li>\n<li>Required to be pure functions so their behavior is predictable.</li>\n<li>Middleware</li>\n<li><em>Customize response to dispatch actions by using Middleware</em></li>\n<li>Middleware is an optional component of Redus that allows custom responses to dispatched actions.</li>\n<li>Most common use is to dispatch async requests to a server.</li>\n<li>Time Traveling Dev Tools</li>\n<li><em>Redux can time travel wow</em></li>\n<li>Time travel refers to Redux’s ability to revert to a previous state because reducers are all pure functions.</li>\n<li>Thunks</li>\n<li><em>Convenient format for taking async actions in Redux</em></li>\n<li>General concept in CS referring to a function who’s primary purpose is to call another function.</li>\n<li>Most commonly used to make async API requests.</li>\n</ul>\n<h1>Flux and Redux</h1>\n<p>What is Flux?</p>\n<ul>\n<li>Front-end application architecutre.</li>\n<li>A pattern in which to structure an application.</li>\n<li>Unidirectional Data Flow — offers more predictability.</li>\n<li>Actions : Begins the data flow of data, simple object that contains a type; type indicates the type of change to be performed.</li>\n<li>Dispatcher : Mechanism for distributing actions to the store.</li>\n<li>Store : The entire state of the application, responsible for updating the state of your app.</li>\n<li>View : Unit of code that's responsible for rendering the user interface. Used to re-render the application when actions and changes occur.</li>\n</ul>\n<!---->\n<ul>\n<li>Redux</li>\n</ul>\n<!---->\n<ul>\n<li>Library that facilitates the implementation of Flux.</li>\n<li>Redux Three Principles</li>\n<li>Single Source of Truth</li>\n<li>State is Read-Only</li>\n<li>Only Pure Functions Change State</li>\n</ul>\n<h1>Store</h1>\n<ul>\n<li>Simply an object that holds the application state wrapped in an API.</li>\n<li>Three methods:</li>\n<li>getState() : Returns the store's current state.</li>\n<li>dispatch(action) : Passes an action into the store's reducer to tell it what info to update.</li>\n<li>subscribe(callback) : Registers a callback to be triggered whenever the store updates. Updating the Store</li>\n</ul>\n<p>Subscribing to the store</p>\n<ul>\n<li>Whenever a store process a dispatch(), it triggers all its subscribers.</li>\n<li>Subscribers : callbacks that can be added to the store via subscribe().</li>\n</ul>\n<p>Reviewing a simple example</p>\n<h1>Reducers\n\n\n</h1>\n<ul>\n<li>Reducer function receives the current state and action, updates the state appropriately based on the action.type and returns the following state.</li>\n<li>You can bundles different action types and ensuing logic by using a switch/case statement.</li>\n</ul>\n<p>Reviewing how Array#slice works</p>\n<ul>\n<li>Approach that can be used to remove an element without mutating the original array. Avoiding state mutations</li>\n<li>Your reducer must always return a new object if the state changes. GOOD</li>\n</ul>\n<p>BAD</p>\n<h1>Actions</h1>\n<ul>\n<li>Actions are the only way to trigger changes to the store’s state. Using action creators</li>\n</ul>\n<!---->\n<ul>\n<li>fruit is the payload key and orange is the state data</li>\n<li>Action Creators : Functions created from extrapolating the creation of an action object.</li>\n</ul>\n<!---->\n<ul>\n<li>Use parenthesis for implicit return value.</li>\n<li>We can now add whatever fruit we’d like.</li>\n</ul>\n<p>Preventing typos in action type string literals</p>\n<ul>\n<li>Using constant variables helps reduce simple typos in a reducer’s case clauses.</li>\n</ul>\n<h1>Debugging Arrow Functions</h1>\n<ul>\n<li>It is important to learn how to use debugger statements with arrow functions to effectively debug Redux cycle. Understanding the limitations of implicit return values</li>\n</ul>\n<!---->\n<ul>\n<li>You must use explicit return statement arrow function to use a debugger.</li>\n</ul>\n<h1>React Router Introduction</h1>\n<p>Now that you know how to render components in a React app, how do you handle rendering different components for different website pages? React Router is the answer!</p>\n<p>Think of how you have created server-side routes in Express. Take the following URL and server-side route. Notice how the /users/:userId path corresponds with the <a href=\"http://localhost:3000/users/2\">http://localhost:3000/users/2</a> URL to render a specific HTML page.</p>\n<p>In the default React setup, you lose the ability to create routes in the same manner as in Express. This is what React Router aims to solve!</p>\n<p><a href=\"https://github.com/ReactTraining/react-router\">React Router</a> is a frontend routing library that allows you to control which components to display using the browser location. A user can also copy and paste a URL and email it to a friend or link to it from their own website.</p>\n<p>When you finish this article, you should be able to use the following from the react-router-dom library:</p>\n<ul>\n<li>&#x3C;BrowserRouter> to provide your application access to the react-router-dom library; and</li>\n<li>&#x3C;Route> to connect specific URL paths to specific components you want rendered; and</li>\n<li>&#x3C;Switch> to wrap several Route elements, rendering only one even if several match the current URL; and</li>\n<li>React Router’s match prop to access route path parameters.</li>\n</ul>\n<h1>Getting started with routing</h1>\n<p>Since you are writing single page apps, you don’t want to refresh the page each time you change the browser location. Instead, you want to update the browser location and your app’s response using JavaScript. This is known as client-side routing. You are using React, so you will use React Router to do this.</p>\n<p>Create a simple react project template:</p>\n<p>Then install React Router:</p>\n<p>Now import BrowserRouter from react-router-dom in your entry file:</p>\n<h1>BrowserRouter</h1>\n<p>BrowserRouter is the primary component of the router that wraps your route hierarchy. It creates a React context that passes routing information down to all its descendent components. For example, if you want to give &#x3C;App> and all its children components access to React Router, you would wrap &#x3C;App> like so:</p>\n<p>Now you can route the rendering of certain components to certain URLs (i.e <a href=\"https://www.website.com/profile).\">https://www.website.com/profile</a><a href=\"https://www.website.com/profile).\">).</a></p>\n<h1>HashRouter</h1>\n<p>Alternatively, you could import and use HashRouter from react-router-dom. Links for applications that use &#x3C;HashRouter> would look like <a href=\"https://www.website.com/#/profile\">https://www.website.com/#/profile</a> (with an # between the domain and path).</p>\n<p>You’ll focus on using the &#x3C;BrowserRouter>.</p>\n<h1>Creating frontend routes</h1>\n<p>React Router helps your React application render specific components based on the URL. The React Router component you’ll use most often is &#x3C;Route>.</p>\n<p>The &#x3C;Route> component is used to wrap another component, causing that component to only be rendered if a certain URL is matched. The behavior of the &#x3C;Route> component is controlled by the following props: path, component, exact, and render (optional).</p>\n<p>Create a simple Users component that returns &#x3C;h1>This is the users index!&#x3C;/h1>. Now let's refactor your index.js file so that you can create your routes within the component:</p>\n<p>Note that BrowserRouter can only have a single child component, so the snippet above wraps all routes within parent a &#x3C;div> element. Now let's create some routes!</p>\n<h1>component</h1>\n<p>Begin with the component prop. This prop takes a reference to the component to be rendered. Let's render your App component:</p>\n<p>Now you’ll need to connect a path to the component!</p>\n<h1>path</h1>\n<p>The wrapped component will only be rendered when the path is matched. The path matches the URL when it matches some initial portion of the URL. For example, a path of / would match both of the following URLs: / and /users. (Because /users begins with a / it matches the path /)</p>\n<p>Take a moment to navigate to <a href=\"http://localhost:3000/users\">http://localhost:3000/users</a> to see how both the App component and Users component are rendering.</p>\n<h1>exact</h1>\n<p>If this exact flag is set, the path will only match when it exactly matches the URL. Then browsing to the /users path would no longer match / and only the Users component will be rendered (instead of both the App component and Users component).</p>\n<h1>render</h1>\n<p>This is an optional prop that takes in a function to be called. The function will be called when the path matches. The function’s return value is rendered. You could also define a functional component inside the component prop, but this results in extra, unnecessary work for React. The render prop is preferred for inline rendering of simple functional components.</p>\n<p>The difference between using component and render is that component returns new JSX to be re-mounted every time the route renders, while render simply returns to JSX what will be mounted once and re-rendered. For any given route, you should only use either the component prop, or the render prop. If both are supplied, only the component prop will be used.</p>\n<p>It can be helpful to use render instead of component in your &#x3C;Route> when you need to pass props into the rendered component. For example, imagine that you needed to pass the users object as a prop to your Users component. Then you could pass in props from Root to Users by returning the Users component like so:</p>\n<p>As a reminder, BrowserRouter can only have a single child component. That's why you have wrapped all your routes within parent a &#x3C;div> element.</p>\n<p>With this Root component, you will always render the &#x3C;h1>Hi, I'm Root!&#x3C;/h1>, regardless of the path. Because of the first &#x3C;Route>, you will only render the App component if the path exactly matches /. Because of the second &#x3C;Route>, you will only render the Users component if the path matches /users.</p>\n<h1>Route path params</h1>\n<p>A component’s props can also hold information about a URL’s parameters. The router will match route segments starting at : up to the next /, ?, or #. Those matched values are then passed to components via their props. Such segments are <em>wildcard</em> values that make up your route parameters.</p>\n<p>For example, take the route below:</p>\n<p>The router would break down the full /users/:userId/photos path to two parts: /users, :userId.</p>\n<p>The Profile component's props would have access to the :userId part of the <a href=\"http://localhost:3000/users/:userId/photos\">http://localhost:3000/users/:userId/photos</a> URL through the props with router parameter information. You would access the the match prop's parameters (props.match.params). If you are using the render prop of the Route component, make sure to spread the props back into the component if you want it to know about the \"match\" parameters.</p>\n<p>The params object would then have a property of userId which would hold the value of the :userId <em>wildcard</em> value. Let's render the userId parameter in a user profile component. Take a moment to create a Profile.js file with the following code:</p>\n<p>Notice how it uses the match prop to access the :userId parameter from the URL. You can use this wildcard to make and AJAX call to fetch the user information from the database and render the return data in the Profile component. Recall that your Profile component was rendered at the path /users/:userId. Thus you can use your userId parameters from match.params to fetch a specific user:</p>\n<h1>Match</h1>\n<p>Now that you’ve seen your React Router’s match prop in action, let's go over more about <a href=\"https://reacttraining.com/react-router/web/api/Route/route-props\">route props</a>! React Router passes information to the components as route props, accessible to all components with access to the React Router. The three props it makes available are location, match and history. You've learned about props.match.params, but now let's review the other properties of the match prop!</p>\n<p>This is an object that contains important information about how the current URL matches the route path. Here are some of the more useful keys on the match object:</p>\n<ul>\n<li>isExact: a boolean that tells you whether or not the URL exactly matches the path</li>\n<li>url: the current URL</li>\n<li>path: the route path it matched against (without wildcards filled in)</li>\n<li>params: the matches for the individual wildcard segments, nested under their names</li>\n</ul>\n<p>When you use React Router, the browser location and history are a part of the state of your app. You can store information about which component should be displayed, which user profile you are currently viewing, or any other piece of state, in the browser location. You can then access that information from anywhere your Router props are passed to in your app.</p>\n<p>Now that you’ve learned about parameters and route props, let’s revisit your Root component to add an exact flag to your /users route so that it does not render with your /users/:userId route. Your component should look something like this:</p>\n<h1>What you learned</h1>\n<p>In this article, you learned how to:</p>\n<ul>\n<li>Use components from the React Router library; and</li>\n<li>Create routes to render specific components; and</li>\n<li>Manage the order of rendered routes; and</li>\n<li>Use the exact flag to ensure that a specific path renders a specific component; and</li>\n<li>Use the React Router match prop to access Router params.</li>\n</ul>\n<h1>React Router Navigation</h1>\n<p>Now that you know how to create front-end routes with React Router, you’ll need to implement a way for your users to navigate the routes! This is what using React Router’s Link, NavLink, Redirect, and history prop can help you do.</p>\n<p>In this article, you’ll be working off of the demo project you built in the React Router Intro reading. When you finish this article, you should be able to use the following components from the react-router-dom library:</p>\n<ul>\n<li>&#x3C;Link> or &#x3C;NavLink> to create links with absolute paths to routes in your application (like \"/users/1\"); and,</li>\n<li>&#x3C;Redirect> to redirect a user to another path (i.e. a login page when the user is not logged in); and</li>\n<li>React Router’s history prop to update a browser's URL programmatically.</li>\n</ul>\n<h1>Adding links for navigation</h1>\n<p>React Router’s &#x3C;Link> is one way to simplify navigation around your app. It issues an on-click navigation event to a route defined in your app's router. Using &#x3C;Link> renders an anchor tag with a correctly set href attribute.</p>\n<h1>Link</h1>\n<p>To use it, update your imports from the react-router-dom package to include Link:</p>\n<p>Note that &#x3C;Link> can take two props: to and onClick.</p>\n<p>The to prop is a route location description that points to an absolute path, (i.e. /users). Add the following Link components in your index.js file above your routes:</p>\n<p>The onClick prop is just like any other JSX click handler. You can write a function that takes in an event and handles it. Add the following Link before your routes and the following click handler function within your Root component:</p>\n<p>Now, test your routes and links! If you inspect the page, you’ll see that your links are now rendered as &#x3C;a> elements. Notice that clicking the App with click handler link logs a message in your console while directing your browser to render the App component.</p>\n<h1>NavLink</h1>\n<p>The &#x3C;NavLink> works just like a &#x3C;Link>, but with a little extra functionality. It has the ability to add extra styling when the path it links to matches the current path. This makes it an ideal choice for a navigation bar, hence the name. This styling can be controlled by three extra props: activeClassName, activeStyle, and exact. To begin using NavLink, update your imports from the react-router-dom package:</p>\n<p>The activeClassName prop of the NavLink component allows you to set a CSS class name for styling the NavLink when its route is active. By default, the activeClassName is already set to active. This means that you simply need to add an .active class to your CSS file to add active styling to your link. A NavLink will be active if its to prop path matches the current URL.</p>\n<p>Let’s change your “Users”, “Hello”, and “Andrew’s Profile” links to be different colors and have a larger font size when active.</p>\n<p>For example, this is what the rendered HTML &#x3C;a> tag would look like when when the browser is navigated to the / path or the /users path:</p>\n<p>Import NavLink into your index.js file and take a moment to update all your Link elements to NavLink elements. Set an activeClassName prop to an active class. Add the following .active class to your index.css file:</p>\n<p>Test your styled links! Notice how the App and App with click handler links are always bolded. This is because all of your links include the / path, meaning that the link to / will be active when browsing to /users and /users/1 because of how users and users/1 are both prefaced by a /.</p>\n<p>The activeStyle prop is a style object that will be applied inline to the NavLink when its to prop matches the current URL. Add the following activeStyle to your App link and comment out the .active class in your CSS file.</p>\n<p>The following html is rendered when at the / path:</p>\n<p>Notice how your App with click handler is not bolded anymore. This is because the default active class being applied does not have any CSS stylings set to the class. Uncomment your .active class in your CSS file to bring back bolding to this NavLink.</p>\n<p>The exact prop is a boolean that defaults to false. If set to true, then the activeStyle and activeClassName props will only be applied when the current URL exactly matches the to prop. Update your App and App with click handler links with an exact prop set. Just like in your routes, you can use the exact flag instead of exact={true}.</p>\n<p>Now your App and App with click handler links will only be bolded when you have navigated precisely to the / path.</p>\n<h1>Switching between routes</h1>\n<p>You came across styling issues when the /users and /users/1 paths matched the / path. Routing can have this issue as well. This is why you need to control the switching between routes.</p>\n<p>React Router’s &#x3C;Switch> component allows you to only render one &#x3C;Route> even if several match the current URL. You can nest as many Routes as you wish between the opening and closing Switch tags, but only the first one that matches the current URL will be rendered.</p>\n<p>This is particularly useful if you want a default component that will only render if none of our other routes match. View the example below. Without the Switch, DefaultComponent would always render. Since there isn't set a path in the DefaultComponent route, it will simply use the default path of /. Now the DefaultComponent will only render when neither of the preceding routes match.</p>\n<p>Import Switch from react-router-dom and add &#x3C;Switch> tags around your routes to take care of ordering and switching between your routes! Begin by adding the following route to the bottom of your routes to render that a 404: Page not found message:</p>\n<p>This is what your Root component should look like at this point:</p>\n<p>Now you have control over the precedence of rendered components! Try navigating to <a href=\"http://localhost:3000/asdf\">http://localhost:3000/asdf</a> or any other route you have not defined. The &#x3C;h1>404: Page not found&#x3C;/h1> JSX of the last &#x3C;Route> will be rendered whenever the browser attempts to visit an undefined route.</p>\n<h1>Redirecting users</h1>\n<p>But what if you want to redirect users to a login page when they aren’t logged in? The &#x3C;Redirect> component from React Router helps you redirect users!</p>\n<p>The component takes only one prop: to. When it renders, it replaces the current URL with the value of its to prop. Typically you conditionally render &#x3C;Redirect> to redirect the user away from some page you don't want them to visit. The example below checks whether there is a defined currentUser prop. If so, the &#x3C;Route> will render the Home component. Otherwise, it will redirect the user to the /login path.</p>\n<p>Note: you will learn how to use a more flexible auth pattern — don’t directly imitate this example.</p>\n<h1>History</h1>\n<p>You know how to redirect users with a &#x3C;Redirect> component, but what if you need to redirect users programmatically? You've learned about the React Router's match prop, but now let's go over another one of the <a href=\"https://reacttraining.com/react-router/web/api/Route/route-props\">route props</a>: history!</p>\n<p>This prop lets you update the URL programmatically. For example, suppose you want to push a new URL when the user clicks a button. It has two useful methods:</p>\n<ul>\n<li>push - This adds a new URL to the end of the history stack. That means that clicking the back button will take the browser to the previous URL. Note that pushing the same URL multiple times in a row will have no effect; the URL will still only show up on the stack once. In development mode, pushing the same URL twice in a row will generate a console warning. This warning is disabled in production mode.</li>\n<li>replace - This replaces the current URL on the history stack, so the back button won't take you to it. For example:</li>\n</ul>\n<h1>What you learned</h1>\n<p>In this article, you learned how to:</p>\n<ul>\n<li>Create navigation links for your route paths; and</li>\n<li>Redirect users through using the &#x3C;Redirect> component; and</li>\n<li>Update a browser’s URL programmatically by using React Router’s history prop.</li>\n</ul>\n<h1>React Router Nested Routes<img src=\"https://miro.medium.com/max/60/0*233dNJ6vfgAmEVCD?q=20\"><img src=\"https://miro.medium.com/max/576/0*233dNJ6vfgAmEVCD\"><img src=\"https://miro.medium.com/max/60/0*TKBUkpbL5aSm5PTQ?q=20\"><img src=\"https://miro.medium.com/max/630/0*TKBUkpbL5aSm5PTQ\">\n\n</h1>\n<p>Now you know how to create front-end routes and add navigation with React Router. When initializing Express projects, you declare static routes. Static routes are routes that are declared when an application is initialized. When using React Router in your application’s initialization, you can declare dynamic routes. React Router introduces dynamic routing, where your routes are created as your application is rendering. This allows you to create nested routes within components!</p>\n<p>In this article, let’s dive into <a href=\"https://reacttraining.com/react-router/core/guides/philosophy/nested-routes\">nested routes</a>! When you finish the article, you should:</p>\n<ul>\n<li>Describe what nested routes are; and</li>\n<li>Be able to use React Router to create and navigate nested routes; and</li>\n<li>Know how to use the React Router match prop to generate links and routes.</li>\n</ul>\n<h1>Why nested routes?</h1>\n<p>Let’s begin with why you might need nested routes. As you remember, you are using React to create a single-page application. This means that you’ll be organizing your application into different components and sub-components.</p>\n<p>For example, imagine creating a simple front-end application with three main pages: a home welcome page (path of /), a users index page (path of /users), and user profile pages (path of /users/:userId). Now imagine if every user had links to separate posts and photos pages.</p>\n<p>You can create those routes and links within the user profile component, instead of creating the routes and links where the main routes are defined.</p>\n<h1>What are nested routes?</h1>\n<p>Now let’s dive into a user profile component to understand what are nested routes! Imagine you have a route in your application’s entry file to each user’s profile like so:</p>\n<p>This means that upon navigating to <a href=\"http://localhost:3000/users/1\">http://localhost:3000/users/1</a>, you would render the following Profile component and the userId parameter within props.match.params would have the value of \"1\".</p>\n<p>Since this route is not created until the Profile component is rendered, you are dynamically creating your nested /users/:userId/posts and /users/:userId/photos routes. Remember that your match prop also has other helpful properties. You can use match.url instead of /users/${id} in your profile links. You can also use match.path instead of /users/:userId in your profile routes. Remember that you can destructure url, path, and params from your match prop!</p>\n<p>In tomorrow’s project, you’ll build a rainbow of routes as well as define nested routes. In the future, you may choose to implement nested routes to keep your application’s routes organized within related components.</p>\n<h1>What you learned</h1>\n<p>In this article, you learned:</p>\n<ul>\n<li>What nested routes are; and</li>\n<li>About creating and navigating nested routes with React Router; and</li>\n<li>How to use the React Router props to generate nested links and routes.</li>\n</ul>\n<h1>React Builds</h1>\n<p>A “build” is the process of converting code into something that can actually execute or run on the target platform. A “front-end build” is a process of preparing a front-end or client-side application for the browser.</p>\n<p>With React applications, that means (at a minimum) converting JSX to something that browsers can actually understand. When using Create React App, the build process is automatically configured to do that and a lot more.</p>\n<p>When you finish this article, you should be able to:</p>\n<ul>\n<li>Describe what front-end builds are and why they’re needed;</li>\n<li>Describe at a high level what happens in a Create React App when you run npm start; and</li>\n<li>Prepare to deploy a React application into a production environment.</li>\n</ul>\n<h1>Understanding front-end builds</h1>\n<p>The need for front-end builds predates React. Over the years, developers have found it helpful to extend the lowest common denominator version of JavaScript and CSS that they could use.</p>\n<p>Sometimes developers extend JavaScript and CSS with something like <a href=\"https://www.typescriptlang.org/\">TypeScript</a> or <a href=\"https://sass-lang.com/\">Sass</a>. Using these non-standard languages and syntaxes require you to use a build process to convert your code into standard JavaScript and CSS that can actually run in the browser.</p>\n<p>Browser-based applications also require a fair amount of optimization to deliver the best, or at least acceptable, experience to end users. Front-end build processes could be configured to lint code, run unit tests, optimize images, minify and bundle code, and more — all automatically at the press of a button (i.e. running a command at the terminal).</p>\n<h1>JavaScript versions and the growth of front-end builds</h1>\n<p>Developers are generally an impatient lot. When new features are added to JavaScript, we don’t like to wait for browsers to widely support those features before we start to use them in our code. And we <em>really</em> don’t like when we have to support older, legacy versions of browsers.</p>\n<p>In recent years, JavaScript has been updated on a yearly basis and browser vendors do a decent job of updating their browsers to support the new features as they’re added to the language. Years ago though, there was an infamous delay between versions 5 and 6 of JavaScript. It took <em>years</em> before ES6 (or ES2015 as it eventually was renamed to) to officially be completed and even longer before browsers supported all of its features.</p>\n<p>In the period of time before ES2015 was broadly supported by browsers, developers used front-end builds to convert or <em>transpile</em> ES2015 features and syntax to an older version of the language that was more broadly supported by browsers (typically ES5). The transpilation from ES2015/ES6 down to ES5 was one of the major drivers for developers to add front-end builds to their client-side projects.</p>\n<h1>Reviewing common terminology</h1>\n<p>When learning about front-end or React builds, you’ll encounter a lot of terminology that you may or may not be familiar with. Here’s some of the terminology that you’ll likely encounter:</p>\n<p>Linting is process of using a tool to analyze your code to catch common programming errors, bugs, stylistic inconsistencies, and suspicious coding patterns. <a href=\"https://eslint.org/\">ESLint</a> is a popular JavaScript linting tool.</p>\n<p>Transpilation is the process of converting source code, like JavaScript, from one version to another version. Usually this means converting newer versions of JavaScript, <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html\">ES2019</a> or <a href=\"https://tc39.es/ecma262/\">ES2021</a>, to a version that’s more widely supported by browsers, like <a href=\"http://www.ecma-international.org/ecma-262/6.0/\">ES2015</a>, or even <a href=\"https://www.ecma-international.org/ecma-262/5.1/\">ES5</a> or <a href=\"https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf\">ES3</a> (if you need to support the browser that your parents or grandparents use).</p>\n<p>Minification is the process of removing all unnecessary characters in your code (e.g. white space characters, new line characters, comments) to produce an overall smaller file. Minification tools will often also rename identifers in your code (i.e. parameter and variable names) in the quest for smaller and smaller file sizes. Source maps can also be generated to allow debugging tools to cross reference between minified code and the original source code.</p>\n<p>Bundling is the process of combining multiple code files into a single file. Creating a bundle (or a handful of bundles) reduces the number of requests that a client needs to make to the server.</p>\n<p>Tree shaking is the process of removing unused (or dead) code from your application before it’s bundled. Tree shaking external dependencies can sometimes have a dramatic positive impact on overall bundled file sizes.</p>\n<h1>Configuration or code?</h1>\n<p>Front-end build tools have come and gone over the years; sometimes very quickly, which helped bring about the phenomenon known as <a href=\"https://sdtimes.com/softwaredev/is-the-javascript-fatigue-real/\">JavaScript fatigue</a>.</p>\n<p>Configuration based tools allow you to create your build tasks by declaring (usually using JSON, XML, or YAML) what you want to be done, without explicitly writing every step in the process. In contrast, coding or scripting based tools allow you to, well, write code to create your build tasks. Configuration based tools <em>can</em> sometimes feel simpler to use while giving up some control (at least initially) while coding based tools <em>can</em> feel more familiar and predictable (since you’re describing tasks procedurally). Every generalization is false though (including this one), so there are plenty of exceptions.</p>\n<p><a href=\"https://gruntjs.com/\">Grunt</a> is a JSON configuration based task runner that can be used to orchestrate the various tasks that make up your front-end build. Grunt was very quickly supplanted by <a href=\"https://gulpjs.com/\">Gulp</a>, which allowed developers to write JavaScript to define front-end build tasks. After Gulp, the front-end tooling landscape became a bit more muddled. Some developers preferred the simplicity of using <a href=\"https://docs.npmjs.com/misc/scripts\">npm scripts</a> to define build tasks while others preferred the power of configuration based bundlers like <a href=\"https://webpack.js.org/\">webpack</a>.</p>\n<h1>Babel and webpack (yes, that’s intentionally a lowercase ‘w’)</h1>\n<p>As front-end or client-side applications grew in complexity, developers found themselves wanting to leverage more advanced JavaScript features and newer syntax like classes, arrow functions, destructuring, async/await, etc. Using a code transpiler, like <a href=\"https://babeljs.io/\">Babel</a>, allows you to use all of the latest and greatest features and syntax without worrying about what browsers support what.</p>\n<p>Module loaders and bundlers, like <a href=\"https://webpack.js.org/\">webpack</a>, also allowed developers to use JavaScript modules without requiring users to use a browser that natively supports ES modules. Also, module bundling (along with minification and tree-shaking) helps to reduce the bandwidth that’s required to deliver the assets for your application to the client.</p>\n<p>[Create React App][cra] uses webpack (along with Babel) under the covers to build your React applications. Even if you’re not using Create React App, webpack and Babel are still very popular choices for building React applications.</p>\n<h1>Pulling back the covers (a bit) on the Create React App build process</h1>\n<p>Running an application created by Create React App using npm start can feel magical. Some stuff happens in the terminal and your application opens into your default browser. Even better, when you make changes to your application, your changes will (usually) automatically appear in the browser!</p>\n<h1>The Create React App build process</h1>\n<p>At a high level, here’s what happens when you run npm start:</p>\n<ul>\n<li>Environment variables are loaded (more about this in a bit);</li>\n<li>The list of browsers to support are checked (more about this too in a bit);</li>\n<li>The configured HTTP port is checked to ensure that it’s available;</li>\n<li>The application compiler is configured and created;</li>\n<li><a href=\"https://webpack.js.org/configuration/dev-server/\">webpack-dev-server</a> is started;</li>\n<li><a href=\"https://webpack.js.org/configuration/dev-server/\">webpack-dev-server</a> compiles your application;</li>\n<li>The index.html file is loaded into the browser; and</li>\n<li>A file watcher is started to watch your files, waiting for changes.</li>\n</ul>\n<h1>Ejecting</h1>\n<p>Create React App provides a script that you can run to “eject” your application from the Create React App tooling. When you eject your application, all of the hidden stuff is exposed so that you can review and customize it.</p>\n<blockquote>\n<p><em>The need to customize Create React App rarely happens. Also, don’t eject an actual project as it’s a one-way trip! Once a Create React App project has been ejected, there’s no going back (though you could always undo the ejection process by reverting to an earlier commit if you’re using source control).</em></p>\n</blockquote>\n<p>To eject your application from Create React App, run the command npm run eject. You'll be prompted if you want to continue; type \"y\" to continue with the ejection process. Once the ejection process has completed, you can review the files that were previously hidden from you.</p>\n<p>In the package.json file, you'll see the following npm scripts:</p>\n<p>You can open the ./scripts/start.js file to see the code that's executed when you run npm start.</p>\n<p>If you’re curious about the webpack configuration, you can open and review the ./config/webpack.config.js.</p>\n<h1>Preparing to deploy a React application for production</h1>\n<p>Before you deploy your application to production, you’ll want to make sure that you’ve replaced static values in your code with environment variables and considered what browsers you need to support.</p>\n<h1>Defining environment variables</h1>\n<p>Create React App supports defining environment variables in an .env file. To define an environment variable, add an .env file to your project and define one or more variables that start with the prefix REACT<em>APP\\</em>:</p>\n<p>Environment variables can be used in code like this:</p>\n<p>You can also reference environment variables in your index.html like this:</p>\n<blockquote>\n<p><em>Important: Environment variables are embedded into your HTML, CSS, and JavaScript bundles during the build process. Because of this, it’s very important to not store any secrets, like API keys, in your environment variables as anyone can view your bundled code in the browser by inspecting your files.</em></p>\n</blockquote>\n<h1>Configuring the supported browsers</h1>\n<p>In your project’s package.json file, you can see the list of targeted browsers:</p>\n<p>Adjusting these targets affect how your code will be transpiled. Specifying older browser versions will result in your code being transpiled to older versions of JavaScript in order to be compatible with the specified browser versions. The production list specifies the browsers to target when creating a production build and the development list specifics the browsers to target when running the application using npm start.</p>\n<p>The <a href=\"https://browserl.ist/\">browserl.ist</a> website can be used to see the browsers supported by your configured browserslist.</p>\n<h1>Creating a production build</h1>\n<p>To create a production build, run the command npm run build. The production build process bundles React in production mode and optimizes the build for the best performance. When the command completes, you'll find your production ready files in the build folder.</p>\n<p>Now your application is ready to be deployed!</p>\n<blockquote>\n<p><em>For more information about how to deploy a Create React App project into production, see _[</em>this page<em>](<a href=\"https://facebook.github.io/create-react-app/docs/deployment\">https://facebook.github.io/create-react-app/docs/deployment</a>)</em> in the official documentation._</p>\n</blockquote>\n<h1>What you learned</h1>\n<p>In this article, you learned how to:</p>\n<ul>\n<li>Describe what front-end builds are and why they’re needed;</li>\n<li>Describe at a high level what happens in a Create React App when you run npm start; and</li>\n<li>Prepare to deploy a React application into a production environment.</li>\n</ul>\n<h1>React Router Documentation</h1>\n<p>Now that you’ve had an introduction to React Router, feel free to explore the official documentation to learn more! As you become a full-fledged software engineer, remember that documentation is your friend. You can take a brief overview for now, as the documentation might include a lot of information at first. The more you learn about React, the more you should revisit the official documentation and learn!</p>\n<h1>Setting up React Router</h1>\n<ul>\n<li><a href=\"https://reacttraining.com/react-router/web/guides/quick-start\">React Router Quick Start</a></li>\n<li><a href=\"https://reacttraining.com/react-router/web/api/HashRouter\">HashRouter</a></li>\n<li><a href=\"https://reacttraining.com/react-router/web/api/BrowserRouter\">BrowserRouter</a></li>\n</ul>\n<h1>Routes and Links</h1>\n<ul>\n<li><a href=\"https://reacttraining.com/react-router/web/api/Route\">Route</a></li>\n<li><a href=\"https://reacttraining.com/react-router/web/api/Link\">Link</a></li>\n<li><a href=\"https://reacttraining.com/react-router/web/api/NavLink\">NavLink</a></li>\n</ul>\n<h1>Switch and Redirect</h1>\n<ul>\n<li><a href=\"https://reacttraining.com/react-router/web/api/Switch\">Switch</a></li>\n<li><a href=\"https://reacttraining.com/react-router/web/api/Redirect\">Redirect</a></li>\n</ul>\n<h1>React Router Params (ownProps)</h1>\n<ul>\n<li><a href=\"https://reacttraining.com/react-router/web/api/history\">props.history</a></li>\n<li><a href=\"https://reacttraining.com/react-router/web/api/location\">props.location</a></li>\n<li><a href=\"https://reacttraining.com/react-router/web/api/match\">props.match</a></li>\n</ul>\n<h1>Rainbow Routes Project</h1>\n<p>Today you’re going to get our first experience using React Router. The goal is to create a basic app that displays the colors of the rainbow. This rainbow, however, has something special about it — some of the colors are nested within others.</p>\n<h1>Phase 0: Setup</h1>\n<p>Begin by creating a new React project:</p>\n<p>Now you’ll remove all the contents of your src and all the contents from your public directory to build the application architecture from scratch! After you have deleted all your files within the directories, create a new index.html file in your public folder. Use the html:5 emmet shortcut to generate an HTML template. Title your page \"Rainbow Routes\" and create a div with an id of root in your DOM's &#x3C;body> element. Create an index.css file in your src directory with the following code. Now let's create your entry file!</p>\n<p>Create an index.js entry file in the src directory. At the top of the file, make sure to import React from the react package and ReactDOM from the react-dom package. Make sure to also import your the index.css file you just created! This will take care of styling your <em>rainbow routes</em>.</p>\n<p>Now you can use the ReactDOM.render() method to render a &#x3C;Root /> component instead of the DOM element with an id of root. Lastly, wrap your render function with a DOMContentLoaded event listener, like so:</p>\n<p>Let’s create your Root component right in your entry file! Your Root component will take care of applying your BrowserRouter to the application. Applying the BrowserRouter to your Root component allows all the child components rendering within &#x3C;BrowserRouter> tags to use and access the Route, Link, and NavLink components within the react-router-dom package.</p>\n<p>Install the react-router-dom package:</p>\n<p>Now import BrowserRouter from the react-router-dom package, like so:</p>\n<p>You’re going to be rendering a lot of components, so let’s keep your src directory organized by creating a components directory within. Within your new ./src/components directory, create a Rainbow.js file for your Rainbow component with the following code:</p>\n<p>Your Rainbow component will act as the home page or default path (/) of your application. Import the Rainbow component into your entry file and have your Root component render &#x3C;Rainbow /> wrapped within &#x3C;BrowserRouter> tags, like so:</p>\n<p>Within your Rainbow component, you'll be rendering &#x3C;NavLink> and &#x3C;Route> components to add different navigation paths to different components. Let's create all the components you will render!</p>\n<p>Create files for the following components in your ./src/components directory:</p>\n<ul>\n<li>Red</li>\n<li>Blue</li>\n<li>Green</li>\n<li>Indigo</li>\n<li>Orange</li>\n<li>Violet</li>\n<li>Yellow</li>\n</ul>\n<p>Your Red and Blue components will look something like this:</p>\n<p>Your Green, Indigo, Orange, Violet, and Yellow components will look something like this:</p>\n<p>Now start your server and verify you can see the “Rainbow Router!” header from your Rainbow component. Currently there is no functionality. Let's fix that!</p>\n<h1>Phase 1: Routes</h1>\n<p>As a reminder, wrapping the Rainbow component in &#x3C;BrowserRouter> tags makes the router available to all descendent React Router components. Now open the Rainbow.js file. You're going to render some of your color components from here. Ultimately you want your routes to look like this.</p>\n<p>URLComponents/Rainbow/redRainbow -> Red/red/orangeRainbow -> Red -> Orange/red/yellowRainbow -> Red -> Yellow/greenRainbow -> Green/blueRainbow -> Blue/blue/indigoRainbow -> Blue -> Indigo/violetRainbow -> Violet</p>\n<p>This means that the Red, Green, Blue, and Violet components need to render in the Rainbow component, but only when you are at the corresponding URL. You'll do this with Route components. Begin by importing the Red, Green, Blue, and Violet components into your Rainbow.js file. Then add the necessary Route components inside the div with id=\"rainbow\" in the Rainbow component. For example to render the Red component with the /red path, you would use the following Route component:</p>\n<p>Test that your code works! Manually type in each URL you just created, and you should see the color component pop up. Remember, these are React Routes, so the paths you created will come after the /. For example, your default rainbow route will look like <a href=\"http://localhost:3000/\">http://localhost:3000/</a> while your red route will look like <a href=\"http://localhost:3000/red.\">http://localhost:3000/red</a><a href=\"http://localhost:3000/red.\">.</a></p>\n<p>You want to nest the Orange and Yellow components inside the Red component, and the Indigo component inside the Blue component. Remember to import your components to use them in a Route tag. You'll have to go add the corresponding Route tags to the Red.js and Blue.js files. Make sure to use the correct nested paths, such as \"/red/orange\" for the orange Route.</p>\n<h1>Phase 2: Links</h1>\n<p>Manually navigating to our newly created routes is tiresome, so let’s add functionality to take care of this process for us. React Router provides the Link and NavLink components for this purpose.</p>\n<p>Add Links to the paths /red, /green, /blue, and /violet in the Rainbow component. For example, your red link should look like</p>\n<p>When you are at blue you want to be able to get to /blue/indigo, and then back to /blue. Add the corresponding Links to the Blue component like this:</p>\n<p>Similarly, add Links to /red, /red/orange and /red/yellow to the Red component. Test all your links. Navigation is so much easier now!</p>\n<h1>Phase 3: NavLinks</h1>\n<p>It would be nice if our links gave us some indication of which route you were at. Fortunately, React Router has a special component for that very purpose: NavLink. NavLinks get an extra CSS class when their to prop matches the current URL. By default this class is called active.</p>\n<p>Go ahead and switch all your Links to NavLinks. If you open the app you won't see any change yet. That's because you haven't added any special styling to the active class. Go ahead and open the index.css file. Create an .active class and add the line font-weight: 700. Now your active links will be bold. Isn't that nice!</p>\n<p>The only problem is that now the Blue only link is active even when the path is /blue/indigo. That doesn't make a lot of sense. Let's add the exact flag to that link so it will only be active when its to exactly matches the current path. Now it should look like:</p>\n<p>Do the same for the Red only link. Everything should be working now.</p>\n<h1>Phase 4 — Changing NavLink’s Active Class</h1>\n<p>You’ve already set up NavLink to bold the link text using the .active class in src/index.css. But what if you wanted this class to be something else? For instance, what if you want your main color links (Red, Green, Blue, Violet) to be styled differently when active than your sub-route links (Red Only, Add Orange, Add Yellow, etc.).</p>\n<p>You can set the class that React Router sets to an active NavLink by adding the activeClassName prop.</p>\n<p>For instance, when we are at a route matching the below NavLink's to prop, the component will have a class of .parent-active applied:</p>\n<p>This allows much more flexibility to style an active NavLink!</p>\n<p>Using the example above, add an activeClassName prop to each of your NavLinks in src/components/Rainbow.js. Now, add some CSS styling for that class in your src/index.css to distinguish your main and your sub-route links.</p>\n<p>Compare your work to the solution and make sure the behavior is the same. Time to celebrate! ✨ 🌈 ✨</p>\n<p>You can also learn more about using the React Router at <a href=\"https://reacttraining.com/react-router/web/guides/quick-start\">reacttraining.com</a>!</p>\n<h1>Exploring React Builds Project</h1>\n<p>In this project, you’ll use Create React App to create a simple React application. You’ll experiment with some of the features that Create React App provides and deploy a production build of your application to a standalone Express application.</p>\n<h1>Phase 0: Setup</h1>\n<p>Begin by using the <a href=\"https://github.com/facebook/create-react-app\">create-react-app</a> package to create a React application:</p>\n<blockquote>\n<p><em>Remember that using the create-react-app command initializes your project as a Git repository. If you use the ls -a to view the hidden files in your project, you'll see the .git file.</em></p>\n</blockquote>\n<p>Update the App component:</p>\n<ul>\n<li>Wrap the &#x3C;h1> element with a &#x3C;div> element; and</li>\n<li>Change the &#x3C;h1> element content to something like \"Exploring React Builds\".</li>\n</ul>\n<h1>Phase 1: Using CSS modules</h1>\n<p>You’ve already seen an example of using the import keyword to import a stylesheet into a module so that it'll be included in your application build. That's the technique being used to include the global index.css stylesheet:</p>\n<p>You can also leverage <a href=\"https://github.com/css-modules/css-modules\">CSS modules</a> in your Create React App projects. CSS Modules scope stylesheet class names so that they are unique to a specific React component. This allows you to create class names without having to worry if they might collide with class names used in another component.</p>\n<p>Add a new css-modules folder to the src folder. Within that folder, add the following files:</p>\n<ul>\n<li>HeadingA.js</li>\n<li>HeadingA.module.css</li>\n<li>HeadingB.js</li>\n<li>HeadingB.module.css</li>\n</ul>\n<p>Then update the contents of each file to the following:</p>\n<p>Notice how the .heading CSS class name is being used within each component to set the color of the &#x3C;h1> element. For the HeadingA component, the color is green, and for the HeadingB component, the color is red. Using the file naming convention [name].module.css let's Create React App know that we want these stylesheets to be processed as CSS Modules. Using CSS Modules allows the .heading class name to be reused across components without any issue.</p>\n<p>To see this feature in action, update your App component to render both of your new components:</p>\n<p>Then run your application (npm start) to see \"Heading A\" and \"Heading B\" displayed respectively in green and red. If you use the browser's developer tools to inspect \"Heading A\", you'll see that the .heading class name has been modified so that it's unique to the HeadingA component:</p>\n<p>CSS Modules is an example of how a front-end build process can be used to modify code to enable a feature that’s not natively supported by browsers.</p>\n<h1>Phase 2: Using an image in a component</h1>\n<p>Create React App configures webpack with support for loading images (as well as CSS, fonts, and other file types). What this means, for you as the developer, is that you can add an image file to your project, import it directly into a module, and render it in a React component.</p>\n<p>Download any image of off the Web or <a href=\"https://appacademy-open-assets.s3-us-west-1.amazonaws.com/Modular-Curriculum/content/react-redux/topics/react-builds/assets/react-builds-cat.png\">click here</a> to download the below image.</p>\n<p>Then within the src folder add a new folder named image. Within that folder add a new component file named Image.js. Also add your downloaded image file to the image folder (so it's a sibling to the Image.js file).</p>\n<p>Update the contents of the Image.js file to this:</p>\n<p>You can import an image into a component using the import keyword. This tells webpack to include the image in the build. Notice that when you import an image into a module, you'll get a path to the image's location within the build. You can use this path to set the src attribute on an &#x3C;img> element.</p>\n<blockquote>\n<p><em>Be sure to update the image import statement to the correct file name if you're using your own image!</em></p>\n</blockquote>\n<p>Now update the App component to import and render the Image component:</p>\n<p>If you run your application (npm start) you'll see your image displayed on the page! You can also open your browser's developer tools and view the \"Sources\" for the current page. If you can expand the localhost:3000 > static > media node on the left, you can see the image file that webpack copied to your build.</p>\n<h1>Images in stylesheets</h1>\n<p>You can also reference images in your CSS files too. Add a CSS file named Image.css to the ./src/image folder and update its contents to this:</p>\n<p>Then update the Image component to this:</p>\n<p>Now you’ll see the image displayed twice on the page!</p>\n<h1>Phase 3: Updating the supported browsers (and its affect on code transpilation)</h1>\n<p>Earlier you learned about the browerslist setting in the package.json file and now adjusting these targets affect how your code will be transpiled:</p>\n<p>The production list specifies the browsers to target when creating a production build and the development list specifics the browsers to target when running the application using npm start. Currently, you're targeting relatively recent versions of the major browsers when creating a development build. Targeting older browser versions results in your code being transpiled to an older version of JavaScript.</p>\n<p>To experiment with this configuration option, let’s add a class component to the project. Add a new folder named class-component to the src folder. Within that folder, add a file named ClassComponent.js containing the following code:</p>\n<p>Don’t forget to update your App component to render the new component:</p>\n<p>Now run your application using npm start. Open your browser's developer tools and view the \"Sources\" for the current page. Expand the localhost:3000 > static > js node on the left and select the main.chunk.js file. Press CMD+F on macOS or CTRL+F on Windows to search the file for \"Class Component\". Here's what the transpiled code looks like for the ClassComponent class:</p>\n<blockquote>\n<p><em>Have you wondered yet why you need to use the developer tools to view the bundles generated by Create React App? Remember that when you run npm start, Create React App builds your application using _[</em>webpack-dev-server<em>](<a href=\"https://webpack.js.org/configuration/dev-server/\">https://webpack.js.org/configuration/dev-server/</a>)</em>. To keep things as performant as possible, the bundles generated by <em>[</em>webpack-dev-server<em>](<a href=\"https://webpack.js.org/configuration/dev-server/\">https://webpack.js.org/configuration/dev-server/</a>)</em> are stored in memory instead of writing them to the file system._</p>\n</blockquote>\n<p>The JSX in the component’s render method has been converted to JavaScript but the ClassComponent ES2015 class is left alone. This makes sense though as JSX isn't natively supported by any browser while ES2015 classes have been natively supported by browsers for awhile now.</p>\n<p>But what if you need to target a version of a browser that doesn’t support ES2015 classes? You can use the <a href=\"https://caniuse.com/#feat=es6-class\">“Can I use…”</a> website to see when browsers started supporting ES2105 (or ES6) classes. Starting with version 49, Chrome natively supported classes. But imagine that you need to support Chrome going back to version 30, a version of Chrome that doesn’t support classes.</p>\n<p>Change the browserslist.development property in the package.json file to this:</p>\n<p>The query chrome >= 30 specifies that you want to target Chrome version 30 or newer.</p>\n<blockquote>\n<p><em>The _[</em>browserl.ist<em>](<a href=\"https://browserl.ist/\">https://browserl.ist/</a>)</em> website can be used to see the browsers supported by your configured browserslist._</p>\n</blockquote>\n<p>Stop your application if it’s currently running. Delete the ./node_modules/.cache folder and run npm start again. Then view the main.chunk.js bundle again in the developer tools:</p>\n<p>Now your ES2015 class component is being converted to a constructor function! Here’s the transpiled code for reference:</p>\n<p>Luckily it’s very rare that you’ll need to read the code in your generated bundles. webpack, by default, is configured to generate sourcemaps. Sourcemaps are a mapping of the code in a generated file, like a bundle file, to the original source code. This gives you access to your original source code in the browser’s developer tools:</p>\n<p>You can even set a breakpoint in your source within the developer tools to stop execution on a specific line of code!</p>\n<h1>Phase 4: Adding environment variables</h1>\n<p>Earlier you learned that Create React App supports defining environment variables in an .env file. This gives you a convenient way to avoid hard coding values that vary across environments.</p>\n<p>Let’s experiment with this feature so that you can see how the Create React App build process embeds environment variables into your HTML, CSS, and JavaScript bundles.</p>\n<p>Add an .env file to the root of your Create React App project. Define an environment variable named REACT<em>APP</em>TITLE:</p>\n<p>Remember that environment variables need to be prefixed with REACT<em>APP</em> for Create React App to process them. After defining your environment variable, you can refer to it within JSX using an expression and process.env:</p>\n<p>Environment variables can also be referred to in regular JavaScript code:</p>\n<p>You can also reference environment variables in your ./public/index.html file like this:</p>\n<p>Run your application again using npm start. Open your browser's developer tools and view the \"Sources\" for the current page. Expand the localhost:3000 node on the left and select (index). Notice that the text %REACT<em>APP</em>TITLE% within the &#x3C;title> element has been converted to the text literal Exploring React Builds:</p>\n<p>If you expand the localhost:3000 > static > js node on the left and select the main.chunk.js file, you can see how the App component's JSX has been converted to JavaScript:</p>\n<p>Here’s a closer look at the relevant React.createElement method call:</p>\n<p>Again, notice how the environment variable has been replaced with a text literal. This has important security implications for you to consider. Because environment variables are embedded into your HTML, CSS, and JavaScript bundles during the build process, it’s <em>very important</em> to not store any secrets, like API keys, in your environment variables. Remember, anyone can view your bundled code in the browser by inspecting your files!</p>\n<h1>Phase 5: Deploying a production build</h1>\n<p>In the last phase of this project, let’s add routing to the React application, create a production build, and deploy the build to an Express application!</p>\n<h1>Adding routing</h1>\n<p>To add React Router to the application, start by installing the react-router-dom npm package:</p>\n<p>Then update the App component to this code:</p>\n<p>Be sure to run and test your application to ensure that the defined routes work as expected:</p>\n<ul>\n<li>/ - Should display the HeadingA and HeadingB components;</li>\n<li>/image - Should display the Image component; and</li>\n<li>/class-component - Should display the ClassComponent component.</li>\n</ul>\n<h1>Creating a production build</h1>\n<p>To create a production build, run the command npm run build from the root of your project. The output in the terminal should look something like this:</p>\n<p>Ignore the comments about using serve to deploy your application (i.e. npm install -g serve and serve -s build). In the next step, you'll create a simple Express application to server your React application.</p>\n<h1>Serving a React application using Express</h1>\n<p>Create a new folder for your Express application outside of the Create React App project folder.</p>\n<blockquote>\n<p><em>For example, from the root of your project, use cd .. to go up a level and then create a new folder named express-server by running the command mkdir express-server. This makes the express-server folder a sibling to your Create React App project folder.</em></p>\n</blockquote>\n<p>Browse into the express-server folder and initialize it to use npm (i.e. npm init -y). Then install Express by running the command npm install express@^4.0.0.</p>\n<p>App a file named app.js with the following contents:</p>\n<p>This simple Express application will:</p>\n<ul>\n<li>Attempt to match incoming requests to static files located in the public folder; and</li>\n<li>If a matching static file isn’t found, then the ./public/index.html file will be served for all other requests.</li>\n</ul>\n<p>Now add a folder named public to the root of your Express project. Copy the files from the build folder in your Create React App project to the public folder in the Express application project. Then run your application using the command node app.js.</p>\n<p>Open a browser and browse to the URL <a href=\"http://localhost:9000/\">http://localhost:9000/</a>. You should see your React application served from your Express application! Be sure to click the navigation links to verify that all of your configured routes work as expected.</p>\n<p>Also, because you configured Express to serve the ./public/index.html file for any request that doesn't match a static file, you can \"deep link\" to any of your React application's routes:</p>\n<ul>\n<li><a href=\"http://localhost:9000/image\">http://localhost:9000/image</a></li>\n<li><a href=\"http://localhost:9000/class-component\">http://localhost:9000/class-component</a></li>\n</ul>"},{"url":"/docs/javascript/","relativePath":"docs/javascript/index.md","relativeDir":"docs/javascript","base":"index.md","name":"index","frontmatter":{"title":"Javascript","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>The Complete JavaScript Reference Guide</h1>\n<hr>\n<h3>The Complete JavaScript Reference Guide</h3>\n<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*In5wB-29T0Ud_zs3.jpg\" class=\"graf-image\" /></figure>### How to learn effectively\n<p><strong>Learning</strong>: The acquisition of skills and the ability to apply them in the future.</p>\n<p><strong>What makes an Effective learner?</strong></p>\n<ul>\n<li><span id=\"7504\">They are active listeners.</span></li>\n<li><span id=\"179b\">They are engaged with the material.</span></li>\n<li><span id=\"3193\">They are receptive of feedback.</span></li>\n<li><span id=\"17d8\">They are open to difficulty.</span></li>\n</ul>\n<p><strong>Why do active learning techniques feel difficult?</strong></p>\n<ul>\n<li><span id=\"7848\">It feels difficult because you are constantly receiving feedback, and so you are constantly adapting and perfecting the material.</span></li>\n</ul>\n<p><strong>Desirable Difficulty</strong></p>\n<ul>\n<li><span id=\"67c9\">The skills we wish to obtain is often a difficult one.</span></li>\n<li><span id=\"c939\">We want challenging but possible lessons based on current level of skill.</span></li>\n</ul>\n<p><strong>Effective learners space their practice</strong></p>\n<ul>\n<li><span id=\"59a4\">Consistent effort > cramming => for <strong>durable knowledge</strong></span></li>\n</ul>\n<hr>\n<h3>Getting visual feedback in your programs</h3>\n<p>The first command we’ll learn in JavaScript is <code>console.log</code>. This command is used to <em>print</em> something onto the screen. As we write our first lines of code, we’ll be using <code>console.log</code> frequently as a way to visually see the output of our programs. Let’s write our first program:</p>\n<pre><code>console.log(\"hello world\");\nconsole.log(\"how are you?\");\n</code></pre>\n<p>Executing the program above would print out the following:</p>\n<pre><code>hello world\nhow are you?\n</code></pre>\n<p>Nothing too ground breaking here, but pay close attention to the exact way we wrote the program. In particular, notice how we lay out the periods, parentheses, and quotation marks. We’ll also terminate lines with semicolons (;).</p>\n<blockquote>\n<p><em>Depending on how you structure your code, sometimes you’ll be able to omit semicolons at the end of lines. For now, you’ll want to include them just as we do.</em></p>\n</blockquote>\n<h3>Syntax</h3>\n<p>We refer to the exact arrangement of the symbols, characters, and keywords as <strong>syntax</strong>. These details matter — your computer will only be able to “understand” proper JavaScript syntax. A programming language is similar to a spoken language. A spoken language like English has grammar rules that we should follow in order to be understood by fellow speakers. In the same way, a programming language like JavaScript has syntax rules that we ought to follow!</p>\n<p>As you write your first lines of code in this new language, you may make many syntax errors. Don’t get frustrated! This is normal — all new programmers go through this phase. Every time we recognize an error in our code, we have an opportunity to reinforce your understanding of correct syntax. Adopt a growth mindset and learn from your mistakes.</p>\n<p>Additionally, one of the best things about programming is that we can get such immediate feedback from our creations. There is no penalty for making a mistake when programming. Write some code, run the code, read the errors, fix the errors, rinse and repeat!</p>\n<h3>Code comments</h3>\n<p>Occasionally we’ll want to leave <strong>comments</strong> or notes in our code. Commented lines will be ignored by our computer. This means that we can use comments to write plain english or temporarily avoid execution of some JavaScript lines. The proper <em>syntax</em> for writing a comment is to begin the line with double forward slashes (<code>//</code>):</p>\n<pre><code>// let's write another program!!!\nconsole.log(\"hello world\");\n\n// console.log(\"how are you?\");\n\nconsole.log(\"goodbye moon\");\n</code></pre>\n<p>The program above would only print:</p>\n<pre><code>hello world\ngoodbye moon\n</code></pre>\n<p>Comments are useful when annotating pieces of code to offer an explanation of how the code works. We’ll want to strive to write straightforward code that is self-explanatory when possible, but we can also use comments to add additional clarity. The real art of programming is to write code so elegantly that it is easy to follow.</p>\n<p><strong>The Number Data Type</strong></p>\n<p>The <strong>number</strong> data type in JS is used to represent any numerical values, including integers and decimal numbers.</p>\n<p><strong>Basic Arithmetic Operators</strong></p>\n<p>Operators are the symbols that perform particular operations.</p>\n<ul>\n<li><span id=\"f533\"><strong>+</strong> (addition)</span></li>\n<li><span id=\"5b9f\"><strong>-</strong> (subtraction)</span></li>\n<li><span id=\"b98b\"><strong>asterisk</strong> (multiplication)</span></li>\n<li><span id=\"9a15\"><strong>/</strong> (division)</span></li>\n<li><span id=\"c752\"><strong>%</strong> (modulo)</span></li>\n</ul>\n<p>JS evaluates more complex expressions using the general math order of operations aka PEMDAS.</p>\n<ul>\n<li><span id=\"b6e3\"><strong>PEMDAS</strong> : Parentheses, Exponents, Multiplication, Division, Modulo, Addition, Subtraction.</span></li>\n<li><span id=\"9c25\"><em>To force a specific order of operation, use the group operator ( ) around a part of the expression.</em></span></li>\n</ul>\n<p><strong>Modulo</strong> : Very useful operation to check divisibility of numbers, check for even &#x26; odd, whether a number is prime, and much more! <em>(Discrete Math concept, circular problems can be solved with modulo)</em></p>\n<ul>\n<li><span id=\"cf5b\">Whenever you have a smaller number % a larger number, the answer will just be the initial small number. <br>\nconsole.log(7 % 10) // => 7;</span></li>\n</ul>\n<p><strong>The String Data Type</strong></p>\n<p>The <strong>string</strong> data type is a primitive data type that used to represent textual data.</p>\n<ul>\n<li><span id=\"e1b0\">can be wrapped by either <strong>single</strong> or <strong>double</strong> quotation marks, <em>best to choose one and stick with it for consistency</em>.</span></li>\n<li><span id=\"f8ad\">If your string contains quotation marks inside, can layer single or double quotation marks to allow it to work.<br>\n“That’s a great string”; (valid)\n‘Shakespeare wrote, “To be or not to be”’; (valid)\n‘That’s a bad string’; (invalid)</span></li>\n<li><span id=\"b2cb\">Alt. way to add other quotes within strings is to use template literals.<br>\n`This is a temp’l’ate literal ${function}` // use ${} to invoke functions within.</span></li>\n<li><span id=\"7b1a\"><strong>.length</strong> : property that can be appended to data to return the length.</span></li>\n<li><span id=\"f633\">empty strings have a length of zero.</span></li>\n<li><span id=\"0a07\"><strong>indices</strong> : indexes of data that begin at 0, can call upon index by using the bracket notation [ ].<br>\nconsole.log(“bootcamp”[0]); // => “b”<br>\nconsole.log(“bootcamp”[10]); // => “undefined”<br>\nconsole.log(“boots”[1 * 2]); // => “o”<br>\nconsole.log(“boots”[“boot”.length-1]); // => “t”</span></li>\n<li><span id=\"6482\">we can pass expressions through the brackets as well since JS always evaluates expressions first.</span></li>\n<li><span id=\"e2f5\">The index of the last character of a string is always one less than it’s length.</span></li>\n<li><span id=\"2271\"><strong>indexOf()</strong> : method used to find the first index of a given character within a string.<br>\nconsole.log(“bagel”.indexOf(“b”)); // => 0<br>\nconsole.log(“bagel”.indexOf(“z”)); // => -1</span></li>\n<li><span id=\"8d68\">if the character inside the indexOf() search does not exist in the string, the output will be -1.</span></li>\n<li><span id=\"d15e\">the indexOf() search will return the first instanced index of the the char in the string.</span></li>\n<li><span id=\"a275\"><strong>concatenate</strong> : word to describe joining strings together into a single string.</span></li>\n</ul>\n<p><strong>The Boolean Data Type</strong></p>\n<p>The <strong>Boolean</strong> data type is the simplest data type since there are only two values: <strong>true</strong> and <strong>false</strong>.</p>\n<ul>\n<li><span id=\"60da\"><strong>Logical Operators</strong> (B<em>oolean Operators</em>) are used to establish logic in our code.</span></li>\n<li><span id=\"139b\"><strong>!</strong> (not) : reverses a Boolean value.<br>\nconsole.log(!true); // => false<br>\nconsole.log(!!false); // => false</span></li>\n<li><span id=\"e412\"><strong>Logical Order of Operations</strong> : JS will evaluate !, then &#x26;&#x26;, then ||.</span></li>\n<li><span id=\"99ad\"><strong>Short-Circuit Evaluation</strong> : Because JS evalutes from left to right, expressions can “short-circuit”. For example if we have true on the left of an || logical comparison, it will stop evaluating and yield true instead of wasting resources on processing the rest of the statement.<br>\nconsole.log(true || !false) // => stops after it sees “true ||”</span></li>\n</ul>\n<p><strong>Comparison Operators</strong></p>\n<p>All comparison operators will result in a boolean output.</p>\n<p><strong>The relative comparators</strong></p>\n<ul>\n<li><span id=\"6fee\"><strong>></strong> (greater than)</span></li>\n<li><span id=\"0437\"><strong>&#x3C;</strong> (less than)</span></li>\n<li><span id=\"17ff\"><strong>>=</strong> (greater than or equal to)</span></li>\n<li><span id=\"b2b4\"><strong>&#x3C;=</strong> (less than or equal to)</span></li>\n<li><span id=\"0c13\"><strong>===</strong> (equal to)</span></li>\n<li><span id=\"b73a\"><strong>!==</strong> (not equal to)</span></li>\n</ul>\n<p>Fun Fact: “a” &#x3C; “b” is considered valid JS Code because string comparisons are compared lexicographically (meaning dictionary order), so “a” is less than “b” because it appears earlier!</p>\n<p>If there is ever a standstill comparison of two string lexicographically (i.e. app vs apple) the comparison will deem the shorter string lesser.</p>\n<p><strong>Difference between == and ===</strong></p>\n<h4>===</h4>\n<p>Strict Equality, will only return true if the two comparisons are entirely the same.</p>\n<h4>==</h4>\n<p>Loose Equality, will return true even if the values are of a different type, due to coercion. (Avoid using this)</p>\n<p><strong>Variables</strong></p>\n<p>Variables are used to store information to be referenced and manipulated in a program.</p>\n<ul>\n<li><span id=\"c73d\">We initialize a variable by using the <strong>let</strong> keyword and a <strong>=</strong> single equals sign (assignment operator). <br>\nlet bootcamp = “App Academy”;<br>\nconsole.log(bootcamp); // “App Academy”</span></li>\n<li><span id=\"7849\">JS variable names can contain any alphanumeric characters, underscores, or dollar signs (cannot being with a number).</span></li>\n<li><span id=\"ad76\">If you do not declare a value for a variable, undefined is automatically set. <br>\nlet bootcamp;<br>\nconsole.log(bootcamp); // undefined</span></li>\n<li><span id=\"2188\">We can change the value of a previously declared variable (let, not const) by re-assigning it another value.</span></li>\n<li><span id=\"47ca\"><strong>let</strong> is the updated version of <strong>var</strong>; there are some differences in terms of hoisting and global/block scope</span></li>\n</ul>\n<p><strong>Assignment Shorthand</strong></p>\n<p>let num = 0;<br>\nnum += 10; // same as num = num + 10<br>\nnum -= 2; // same as num = num — 2<br>\nnum /= 4; // same as num = num / 4<br>\nnum *= 7; // same as num = num * 7</p>\n<ul>\n<li><span id=\"9c05\">In general, any nonsensical arithmetic will result in <strong>NaN</strong> ; usually operations that include undefined.</span></li>\n</ul>\n<p><strong>Functions</strong></p>\n<p>A function is a procedure of code that will run when called. Functions are used so that we do not have to rewrite code to do the same thing over and over. (Think of them as ‘subprograms’)</p>\n<ul>\n<li><span id=\"366f\"><strong>Function Declaration</strong> : Process when we first initially write our function.</span></li>\n<li><span id=\"676f\">Includes three things:</span></li>\n<li><span id=\"80c2\">Name of the function.</span></li>\n<li><span id=\"f3a4\">A list of <em>parameters</em> ()</span></li>\n<li><span id=\"2b0e\">The code to execute {}</span></li>\n<li><span id=\"6879\"><strong>Function Calls</strong> : We can call upon our function whenever and wherever* we want. (*wherever is only after the initial declaration)</span></li>\n<li><span id=\"8374\">JS evaluates code top down, left to right.</span></li>\n<li><span id=\"2687\">When we execute a declared function later on in our program we refer to this as <strong>invoking</strong> our function.</span></li>\n<li><span id=\"0c3a\">Every function in JS returns undefined unless otherwise specified.</span></li>\n<li><span id=\"4207\">When we hit a <strong>return</strong> statement in a function we immediately exit the function and return to where we called the function.</span></li>\n<li><span id=\"e39f\">When naming functions in JS always use camelCase and name it something appropriate.</span></li>\n</ul>\n<p>Greate code reads like English and almost explains itself. Think: Elegant, readable, and maintainable!</p>\n<p><strong>Parameters and Arguments</strong></p>\n<ul>\n<li><span id=\"e94e\"><strong>Parameters</strong> : Comma seperated variables specified as part of a function’s declaration.</span></li>\n<li><span id=\"6740\"><strong>Arguments</strong> : Values passed to the function when it is invoked.</span></li>\n<li><span id=\"004c\"><em>If the number of arguments passed during a function invocation is different than the number of paramters listed, it will still work.</em></span></li>\n<li><span id=\"7da5\">However, is there are not enough arguments provided for parameters our function will likely yield <strong>Nan</strong>.</span></li>\n</ul>\n<h3>Including Comments</h3>\n<p>Comments are important because they help other people understand what is going on in your code or remind you if you forgot something yourself. Keep in mind that they have to be marked properly so the browser won’t try to execute them.</p>\n<p>In JavaScript you have two different options:</p>\n<ul>\n<li><span id=\"356d\">Single-line comments — To include a comment that is limited to a single line, precede it with <code>//</code></span></li>\n<li><span id=\"ee3a\">Multi-line comments — In case you want to write longer comments between several lines, wrap it in <code>/*</code> and <code>*/</code> to avoid it from being executed</span></li>\n</ul>\n<h3>Variables in JavaScript</h3>\n<p>Variables are stand-in values that you can use to perform operations. You should be familiar with them from math class.</p>\n<h3>var, const, let</h3>\n<p>You have three different possibilities for declaring a variable in JavaScript, each with their own specialties:</p>\n<ul>\n<li><span id=\"4b29\"><code>var</code> — The most common variable. It can be reassigned but only accessed within a function. Variables defined with <code>var</code> move to the top when the code is executed.</span></li>\n<li><span id=\"d234\"><code>const</code> — Can not be reassigned and not accessible before they appear within the code.</span></li>\n<li><span id=\"0e3b\"><code>let</code> — Similar to <code>const</code>, the <code>let</code> variable can be reassigned but not re-declared.</span></li>\n</ul>\n<h3>Data Types</h3>\n<p>Variables can contain different types of values and data types. You use <code>=</code> to assign them:</p>\n<ul>\n<li><span id=\"b276\">Numbers — <code>var age = 23</code></span></li>\n<li><span id=\"5571\">Variables — <code>var x</code></span></li>\n<li><span id=\"e26c\">Text (strings) — <code>var a = \"init\"</code></span></li>\n<li><span id=\"1312\">Operations — <code>var b = 1 + 2 + 3</code></span></li>\n<li><span id=\"9880\">True or false statements — <code>var c = true</code></span></li>\n<li><span id=\"335a\">Constant numbers — <code>const PI = 3.14</code></span></li>\n<li><span id=\"7221\">Objects — <code>var name = {firstName:\"John\", lastName:\"Doe\"}</code></span></li>\n</ul>\n<p>There are more possibilities. Note that variables are case sensitive. That means <code>lastname</code> and <code>lastName</code> will be handled as two different variables.</p>\n<h3>Objects</h3>\n<p>Objects are certain kinds of variables. They are variables that can have their own values and methods. The latter are actions that you can perform on objects.</p>\n<p>var person = {</p>\n<p>firstName:”John”,</p>\n<p>lastName:”Doe”,</p>\n<p>age:20,</p>\n<p>nationality:”German”</p>\n<p>};</p>\n<h3>The Next Level: Arrays</h3>\n<p>Next up in our JavaScript cheat sheet are arrays. Arrays are part of many different programming languages. They are a way of organizing variables and properties into groups. Here’s how to create one in JavaScript:</p>\n<p>var fruit = [“Banana”, “Apple”, “Pear”];</p>\n<p>Now you have an array called <code>fruit</code> which contains three items that you can use for future operations.</p>\n<h3>Array Methods</h3>\n<p>Once you have created arrays, there are a few things you can do with them:</p>\n<ul>\n<li><span id=\"4e4b\"><code>concat()</code> — Join several arrays into one</span></li>\n<li><span id=\"5c02\"><code>indexOf()</code> — Returns the first position at which a given element appears in an array</span></li>\n<li><span id=\"45cd\"><code>join()</code> — Combine elements of an array into a single string and return the string</span></li>\n<li><span id=\"3a4e\"><code>lastIndexOf()</code> — Gives the last position at which a given element appears in an array</span></li>\n<li><span id=\"8fbb\"><code>pop()</code> — Removes the last element of an array</span></li>\n<li><span id=\"28e4\"><code>push()</code> — Add a new element at the end</span></li>\n<li><span id=\"0be2\"><code>reverse()</code> — Sort elements in a descending order</span></li>\n<li><span id=\"775e\"><code>shift()</code> — Remove the first element of an array</span></li>\n<li><span id=\"1063\"><code>slice()</code> — Pulls a copy of a portion of an array into a new array</span></li>\n<li><span id=\"53fd\"><code>sort()</code> — Sorts elements alphabetically</span></li>\n<li><span id=\"f551\"><code>splice()</code> — Adds elements in a specified way and position</span></li>\n<li><span id=\"c46b\"><code>toString()</code> — Converts elements to strings</span></li>\n<li><span id=\"ef66\"><code>unshift()</code> —Adds a new element to the beginning</span></li>\n<li><span id=\"4598\"><code>valueOf()</code> — Returns the primitive value of the specified object</span></li>\n</ul>\n<h3>Operators</h3>\n<p>If you have variables, you can use them to perform different kinds of operations. To do so, you need operators.</p>\n<h3>Basic Operators</h3>\n<ul>\n<li><span id=\"5d34\"><code>+</code> — Addition</span></li>\n<li><span id=\"5fd9\"><code>-</code> — Subtraction</span></li>\n<li><span id=\"3b13\"><code>*</code> — Multiplication</span></li>\n<li><span id=\"521a\"><code>/</code> — Division</span></li>\n<li><span id=\"cf0f\"><code>(...)</code> — Grouping operator, operations within brackets are executed earlier than those outside</span></li>\n<li><span id=\"bb2a\"><code>%</code> — Modulus (remainder )</span></li>\n<li><span id=\"e837\"><code>++</code> — Increment numbers</span></li>\n<li><span id=\"71ea\"><code>--</code> — Decrement numbers</span></li>\n</ul>\n<h3>Comparison Operators</h3>\n<ul>\n<li><span id=\"a2b0\"><code>==</code> — Equal to</span></li>\n<li><span id=\"5105\"><code>===</code> — Equal value and equal type</span></li>\n<li><span id=\"c79c\"><code>!=</code> — Not equal</span></li>\n<li><span id=\"1f7f\"><code>!==</code> — Not equal value or not equal type</span></li>\n<li><span id=\"78c3\"><code>></code> — Greater than</span></li>\n<li><span id=\"d40b\"><code>&#x3C;</code> — Less than</span></li>\n<li><span id=\"081b\"><code>>=</code> — Greater than or equal to</span></li>\n<li><span id=\"d065\"><code>&#x3C;=</code> — Less than or equal to</span></li>\n<li><span id=\"174d\"><code>?</code> — Ternary operator</span></li>\n</ul>\n<h3>Logical Operators</h3>\n<ul>\n<li><span id=\"cb7b\"><code>&#x26;&#x26;</code> — Logical and</span></li>\n<li><span id=\"b1ee\"><code>||</code> — Logical or</span></li>\n<li><span id=\"96d4\"><code>!</code> — Logical not</span></li>\n</ul>\n<h3>Bitwise Operators</h3>\n<ul>\n<li><span id=\"8cf7\"><code>&#x26;</code> — AND statement</span></li>\n<li><span id=\"02d5\"><code>|</code> — OR statement</span></li>\n<li><span id=\"e576\"><code>~</code> — NOT</span></li>\n<li><span id=\"9c66\"><code>^</code> — XOR</span></li>\n<li><span id=\"b343\"><code>&#x3C;&#x3C;</code> — Left shift</span></li>\n<li><span id=\"52b1\"><code>>></code> — Right shift</span></li>\n<li><span id=\"1b5c\"><code>>>></code> — Zero fill right shift</span></li>\n</ul>\n<h3>Functions</h3>\n<p>JavaScript functions are blocks of code that perform a certain task. A basic function looks like this:</p>\n<p>function name(parameter1, parameter2, parameter3) {</p>\n<p>// what the function does</p>\n<p>}</p>\n<p>As you can see, it consists of the <code>function</code> keyword plus a name. The function’s parameters are in the brackets and you have curly brackets around what the function performs. You can create your own, but to make your life easier – there are also a number of default functions.</p>\n<h3>Outputting Data</h3>\n<p>A common application for functions is the output of data. For the output, you have the following options:</p>\n<ul>\n<li><span id=\"a7a7\"><code>alert()</code> — Output data in an alert box in the browser window</span></li>\n<li><span id=\"0c44\"><code>confirm()</code> — Opens up a yes/no dialog and returns true/false depending on user click</span></li>\n<li><span id=\"9690\"><code>console.log()</code> — Writes information to the browser console, good for debugging purposes</span></li>\n<li><span id=\"0d4d\"><code>document.write()</code> — Write directly to the HTML document</span></li>\n<li><span id=\"16aa\"><code>prompt()</code> — Creates a dialogue for user input</span></li>\n</ul>\n<h3>Global Functions</h3>\n<p>Global functions are functions built into every browser capable of running JavaScript.</p>\n<ul>\n<li><span id=\"f4f1\"><code>decodeURI()</code> — Decodes a <a href=\"https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\" class=\"markup--anchor markup--li-anchor\">Uniform Resource Identifier (URI)</a> created by <code>encodeURI</code> or similar</span></li>\n<li><span id=\"c203\"><code>decodeURIComponent()</code> — Decodes a URI component</span></li>\n<li><span id=\"176a\"><code>encodeURI()</code> — Encodes a URI into UTF-8</span></li>\n<li><span id=\"6720\"><code>encodeURIComponent()</code> — Same but for URI components</span></li>\n<li><span id=\"e97b\"><code>eval()</code> — Evaluates JavaScript code represented as a string</span></li>\n<li><span id=\"390b\"><code>isFinite()</code> — Determines whether a passed value is a finite number</span></li>\n<li><span id=\"5d46\"><code>isNaN()</code> — Determines whether a value is NaN or not</span></li>\n<li><span id=\"f668\"><code>Number()</code> —- Returns a number converted from its argument</span></li>\n<li><span id=\"a5ff\"><code>parseFloat()</code> — Parses an argument and returns a floating-point number</span></li>\n<li><span id=\"a666\"><code>parseInt()</code> — Parses its argument and returns an integer</span></li>\n</ul>\n<h3>JavaScript Loops</h3>\n<p>Loops are part of most programming languages. They allow you to execute blocks of code desired number of times with different values:</p>\n<p>for (before loop; condition <strong>for</strong> loop; execute after loop) {</p>\n<p>// what to do during the loop</p>\n<p>}</p>\n<p>You have several parameters to create loops:</p>\n<ul>\n<li><span id=\"ff62\"><code>for</code> — The most common way to create a loop in JavaScript</span></li>\n<li><span id=\"7ad1\"><code>while</code> — Sets up conditions under which a loop executes</span></li>\n<li><span id=\"c2f4\"><code>do while</code> — Similar to the <code>while</code> loop but it executes at least once and performs a check at the end to see if the condition is met to execute again</span></li>\n<li><span id=\"7157\"><code>break</code> —Used to stop and exit the cycle at certain conditions</span></li>\n<li><span id=\"f5c0\"><code>continue</code> — Skip parts of the cycle if certain conditions are met</span></li>\n</ul>\n<h3>If — Else Statements</h3>\n<p>These types of statements are easy to understand. Using them, you can set conditions for when your code is executed. If certain conditions apply, something is done, if not — something else is executed.</p>\n<p>if (condition) {</p>\n<p>// what to do if condition is met</p>\n<p>} <strong>else</strong> {</p>\n<p>// what to do if condition is not met</p>\n<p>}</p>\n<p>A similar concept to <code>if else</code> is the <code>switch</code> statement. However, using the switch you select one of several code blocks to execute.</p>\n<h3>Strings</h3>\n<p>Strings are what JavaScript calls to text that does not perform a function but can appear on the screen.</p>\n<p>var person = “John Doe”;</p>\n<p>In this case, <code>John Doe</code> is the string.</p>\n<h3>Escape Characters</h3>\n<p>In JavaScript, strings are marked with single or double-quotes. If you want to use quotation marks in a string, you need to use special characters:</p>\n<ul>\n<li><span id=\"b4b1\"><code>\\'</code> — Single quote</span></li>\n<li><span id=\"3b22\"><code>\\\"</code> — Double quote</span></li>\n</ul>\n<p>Aside from that you also have additional escape characters:</p>\n<ul>\n<li><span id=\"b412\"><code>\\\\</code> — Backslash</span></li>\n<li><span id=\"1592\"><code>\\b</code> — Backspace</span></li>\n<li><span id=\"3a72\"><code>\\f</code> — Form feed</span></li>\n<li><span id=\"145a\"><code>\\n</code> — New line</span></li>\n<li><span id=\"1416\"><code>\\r</code> — Carriage return</span></li>\n<li><span id=\"95d4\"><code>\\t</code> — Horizontal tabulator</span></li>\n<li><span id=\"d962\"><code>\\v</code> — Vertical tabulator</span></li>\n</ul>\n<h3>String Methods</h3>\n<p>There are many different ways to work with strings:</p>\n<ul>\n<li><span id=\"2021\"><code>charAt()</code> — Returns a character at a specified position inside a string</span></li>\n<li><span id=\"d3e5\"><code>charCodeAt()</code> — Gives you the Unicode of a character at that position</span></li>\n<li><span id=\"fdd1\"><code>concat()</code> — Concatenates (joins) two or more strings into one</span></li>\n<li><span id=\"009c\"><code>fromCharCode()</code> — Returns a string created from the specified sequence of UTF-16 code units</span></li>\n<li><span id=\"7ed3\"><code>indexOf()</code> — Provides the position of the first occurrence of a specified text within a string</span></li>\n<li><span id=\"2937\"><code>lastIndexOf()</code> — Same as <code>indexOf()</code> but with the last occurrence, searching backward</span></li>\n<li><span id=\"142d\"><code>match()</code> — Retrieves the matches of a string against a search pattern</span></li>\n<li><span id=\"6c18\"><code>replace()</code> — Find and replace specified text in a string</span></li>\n<li><span id=\"e279\"><code>search()</code> — Executes a search for a matching text and returns its position</span></li>\n<li><span id=\"6bcd\"><code>slice()</code> — Extracts a section of a string and returns it as a new string</span></li>\n<li><span id=\"e4ee\"><code>split()</code> — Splits a string object into an array of strings at a specified position</span></li>\n<li><span id=\"3a27\"><code>substr()</code> — Similar to <code>slice()</code> but extracts a substring depending on a specified number of characters</span></li>\n<li><span id=\"3d14\"><code>substring()</code> — Also similar to <code>slice()</code> but can’t accept negative indices</span></li>\n<li><span id=\"fa33\"><code>toLowerCase()</code> — Convert strings to lower case</span></li>\n<li><span id=\"3485\"><code>toUpperCase()</code> — Convert strings to upper case</span></li>\n<li><span id=\"4f96\"><code>valueOf()</code> — Returns the primitive value (that has no properties or methods) of a string object</span></li>\n</ul>\n<h3>Regular Expression Syntax</h3>\n<p>Regular expressions are search patterns used to match character combinations in strings. The search pattern can be used for text search and text to replace operations.</p>\n<h3>Pattern Modifiers</h3>\n<ul>\n<li><span id=\"bb29\"><code>e</code> — Evaluate replacement</span></li>\n<li><span id=\"b6b8\"><code>i</code> — Perform case-insensitive matching</span></li>\n<li><span id=\"4f50\"><code>g</code> — Perform global matching</span></li>\n<li><span id=\"4add\"><code>m</code> — Perform multiple line matching</span></li>\n<li><span id=\"a073\"><code>s</code> — Treat strings as a single line</span></li>\n<li><span id=\"482b\"><code>x</code> — Allow comments and whitespace in the pattern</span></li>\n<li><span id=\"f6ad\"><code>U</code> — Ungreedy pattern</span></li>\n</ul>\n<h3>Brackets</h3>\n<ul>\n<li><span id=\"aae1\"><code>[abc]</code> — Find any of the characters between the brackets</span></li>\n<li><span id=\"e048\"><code>[^abc]</code> — Find any character which is not in the brackets</span></li>\n<li><span id=\"f9b5\"><code>[0-9]</code> — Used to find any digit from 0 to 9</span></li>\n<li><span id=\"ac71\"><code>[A-z]</code> — Find any character from uppercase A to lowercase z</span></li>\n<li><span id=\"6fce\"><code>(a|b|c)</code> — Find any of the alternatives separated with <code>|</code></span></li>\n</ul>\n<h3>Metacharacters</h3>\n<ul>\n<li><span id=\"dcd6\"><code>.</code> — Find a single character, except newline or line terminator</span></li>\n<li><span id=\"e944\"><code>\\w</code> — Word character</span></li>\n<li><span id=\"c4bf\"><code>\\W</code> — Non-word character</span></li>\n<li><span id=\"7b81\"><code>\\d</code> — A digit</span></li>\n<li><span id=\"a533\"><code>\\D</code> — A non-digit character</span></li>\n<li><span id=\"1fcc\"><code>\\s</code> — Whitespace character</span></li>\n<li><span id=\"374c\"><code>\\S</code> — Non-whitespace character</span></li>\n<li><span id=\"72d0\"><code>\\b</code> — Find a match at the beginning/end of a word</span></li>\n<li><span id=\"2d38\"><code>\\B</code> — A match not at the beginning/end of a word</span></li>\n<li><span id=\"859b\"><code>\\0</code> — NUL character</span></li>\n<li><span id=\"df4d\"><code>\\n</code> — A new line character</span></li>\n<li><span id=\"5acd\"><code>\\f</code> — Form feed character</span></li>\n<li><span id=\"833f\"><code>\\r</code> — Carriage return character</span></li>\n<li><span id=\"4f31\"><code>\\t</code> — Tab character</span></li>\n<li><span id=\"e618\"><code>\\v</code> — Vertical tab character</span></li>\n<li><span id=\"dcfc\"><code>\\xxx</code> — The character specified by an octal number xxx</span></li>\n<li><span id=\"cf5e\"><code>\\xdd</code> — Character specified by a hexadecimal number dd</span></li>\n<li><span id=\"978f\"><code>\\uxxxx</code> — The Unicode character specified by a hexadecimal number XXXX</span></li>\n</ul>\n<h3>Quantifiers</h3>\n<ul>\n<li><span id=\"e4cf\"><code>n+</code> — Matches any string that contains at least one n</span></li>\n<li><span id=\"be07\"><code>n*</code> — Any string that contains zero or more occurrences of n</span></li>\n<li><span id=\"4a93\"><code>n?</code> — A string that contains zero or one occurrence of n</span></li>\n<li><span id=\"91f0\"><code>n{X}</code> — String that contains a sequence of X n’s</span></li>\n<li><span id=\"097b\"><code>n{X,Y}</code> — Strings that contain a sequence of X to Y n’s</span></li>\n<li><span id=\"e9f2\"><code>n{X,}</code> — Matches any string that contains a sequence of at least X n’s</span></li>\n<li><span id=\"15b3\"><code>n$</code> — Any string with n at the end of it</span></li>\n<li><span id=\"5fc9\"><code>^n</code> — String with n at the beginning of it</span></li>\n<li><span id=\"2b42\"><code>?=n</code> — Any string that is followed by a specific string n</span></li>\n<li><span id=\"6ffa\"><code>?!n</code> — String that is not followed by a specific string ni</span></li>\n</ul>\n<h3>Numbers and Math</h3>\n<p>In JavaScript, you can also work with numbers, constants and perform mathematical functions.</p>\n<h3>Number Properties</h3>\n<ul>\n<li><span id=\"3554\"><code>MAX_VALUE</code> — The maximum numeric value representable in JavaScript</span></li>\n<li><span id=\"c55d\"><code>MIN_VALUE</code> — Smallest positive numeric value representable in JavaScript</span></li>\n<li><span id=\"49e0\"><code>NaN</code> — The “Not-a-Number” value</span></li>\n<li><span id=\"3024\"><code>NEGATIVE_INFINITY</code> — The negative Infinity value</span></li>\n<li><span id=\"0bf4\"><code>POSITIVE_INFINITY</code> — Positive Infinity value</span></li>\n</ul>\n<h3>Number Methods</h3>\n<ul>\n<li><span id=\"9478\"><code>toExponential()</code> — Returns the string with a rounded number written as exponential notation</span></li>\n<li><span id=\"2ad0\"><code>toFixed()</code> — Returns the string of a number with a specified number of decimals</span></li>\n<li><span id=\"d464\"><code>toPrecision()</code> — String of a number written with a specified length</span></li>\n<li><span id=\"2244\"><code>toString()</code> — Returns a number as a string</span></li>\n<li><span id=\"bc1e\"><code>valueOf()</code> — Returns a number as a number</span></li>\n</ul>\n<h3>Math Properties</h3>\n<ul>\n<li><span id=\"9f68\"><code>E</code> — Euler’s number</span></li>\n<li><span id=\"a4df\"><code>LN2</code> — The natural logarithm of 2</span></li>\n<li><span id=\"0f06\"><code>LN10</code> — Natural logarithm of 10</span></li>\n<li><span id=\"1a92\"><code>LOG2E</code> — Base 2 logarithm of E</span></li>\n<li><span id=\"42e7\"><code>LOG10E</code> — Base 10 logarithm of E</span></li>\n<li><span id=\"1fbe\"><code>PI</code> — The number PI</span></li>\n<li><span id=\"2a56\"><code>SQRT1_2</code> — Square root of 1/2</span></li>\n<li><span id=\"aab4\"><code>SQRT2</code> — The square root of 2</span></li>\n</ul>\n<h3>Math Methods</h3>\n<ul>\n<li><span id=\"8836\"><code>abs(x)</code> — Returns the absolute (positive) value of x</span></li>\n<li><span id=\"ddb9\"><code>acos(x)</code> — The arccosine of x, in radians</span></li>\n<li><span id=\"a0c3\"><code>asin(x)</code> — Arcsine of x, in radians</span></li>\n<li><span id=\"c2ca\"><code>atan(x)</code> — The arctangent of x as a numeric value</span></li>\n<li><span id=\"8b93\"><code>atan2(y,x)</code> — Arctangent of the quotient of its arguments</span></li>\n<li><span id=\"b103\"><code>ceil(x)</code> — Value of x rounded up to its nearest integer</span></li>\n<li><span id=\"c68a\"><code>cos(x)</code> — The cosine of x (x is in radians)</span></li>\n<li><span id=\"d480\"><code>exp(x)</code> — Value of Ex</span></li>\n<li><span id=\"2954\"><code>floor(x)</code> — The value of x rounded down to its nearest integer</span></li>\n<li><span id=\"ff4d\"><code>log(x)</code> — The natural logarithm (base E) of x</span></li>\n<li><span id=\"b6a9\"><code>max(x,y,z,...,n)</code> — Returns the number with the highest value</span></li>\n<li><span id=\"dfb0\"><code>min(x,y,z,...,n)</code> — Same for the number with the lowest value</span></li>\n<li><span id=\"a6f1\"><code>pow(x,y)</code> — X to the power of y</span></li>\n<li><span id=\"8851\"><code>random()</code> — Returns a random number between 0 and 1</span></li>\n<li><span id=\"d32e\"><code>round(x)</code> — The value of x rounded to its nearest integer</span></li>\n<li><span id=\"fe9a\"><code>sin(x)</code> — The sine of x (x is in radians)</span></li>\n<li><span id=\"c244\"><code>sqrt(x)</code> — Square root of x</span></li>\n<li><span id=\"b5ef\"><code>tan(x)</code> — The tangent of an angle</span></li>\n</ul>\n<h3>Dealing with Dates in JavaScript</h3>\n<p>You can also work with and modify dates and time with JavaScript. This is the next chapter in the JavaScript cheat sheet.</p>\n<h3>Setting Dates</h3>\n<ul>\n<li><span id=\"b187\"><code>Date()</code> — Creates a new date object with the current date and time</span></li>\n<li><span id=\"42f8\"><code>Date(2017, 5, 21, 3, 23, 10, 0)</code> — Create a custom date object. The numbers represent a year, month, day, hour, minutes, seconds, milliseconds. You can omit anything you want except for a year and month.</span></li>\n<li><span id=\"4e80\"><code>Date(\"2017-06-23\")</code> — Date declaration as a string</span></li>\n</ul>\n<h3>Pulling Date and Time Values</h3>\n<ul>\n<li><span id=\"465e\"><code>getDate()</code> — Get the day of the month as a number (1-31)</span></li>\n<li><span id=\"1b08\"><code>getDay()</code> — The weekday as a number (0-6)</span></li>\n<li><span id=\"6d9e\"><code>getFullYear()</code> — Year as a four-digit number (yyyy)</span></li>\n<li><span id=\"a216\"><code>getHours()</code> — Get the hour (0-23)</span></li>\n<li><span id=\"388a\"><code>getMilliseconds()</code> — The millisecond (0-999)</span></li>\n<li><span id=\"a97f\"><code>getMinutes()</code> — Get the minute (0-59)</span></li>\n<li><span id=\"2427\"><code>getMonth()</code> — Month as a number (0-11)</span></li>\n<li><span id=\"b964\"><code>getSeconds()</code> — Get the second (0-59)</span></li>\n<li><span id=\"505d\"><code>getTime()</code> — Get the milliseconds since January 1, 1970</span></li>\n<li><span id=\"7c14\"><code>getUTCDate()</code> — The day (date) of the month in the specified date according to universal time (also available for day, month, full year, hours, minutes etc.)</span></li>\n<li><span id=\"d6b6\"><code>parse</code> — Parses a string representation of a date and returns the number of milliseconds since January 1, 1970</span></li>\n</ul>\n<h3>Set Part of a Date</h3>\n<ul>\n<li><span id=\"9a97\"><code>setDate()</code> — Set the day as a number (1-31)</span></li>\n<li><span id=\"d4f0\"><code>setFullYear()</code> — Sets the year (optionally month and day)</span></li>\n<li><span id=\"1a45\"><code>setHours()</code> — Set the hour (0-23)</span></li>\n<li><span id=\"8020\"><code>setMilliseconds()</code> — Set milliseconds (0-999)</span></li>\n<li><span id=\"7feb\"><code>setMinutes()</code> — Sets the minutes (0-59)</span></li>\n<li><span id=\"d7ca\"><code>setMonth()</code> — Set the month (0-11)</span></li>\n<li><span id=\"795d\"><code>setSeconds()</code> — Sets the seconds (0-59)</span></li>\n<li><span id=\"1d7f\"><code>setTime()</code> — Set the time (milliseconds since January 1, 1970)</span></li>\n<li><span id=\"78e1\"><code>setUTCDate()</code> — Sets the day of the month for a specified date according to universal time (also available for day, month, full year, hours, minutes etc.)</span></li>\n</ul>\n<h3>DOM Mode</h3>\n<p>The DOM is the <a href=\"https://en.wikipedia.org/wiki/Document_Object_Model\" class=\"markup--anchor markup--p-anchor\">Document Object Model</a> of a page. It is the code of the structure of a webpage. JavaScript comes with a lot of different ways to create and manipulate HTML elements (called nodes).</p>\n<h3>Node Properties</h3>\n<ul>\n<li><span id=\"cfb7\"><code>attributes</code> — Returns a live collection of all attributes registered to an element</span></li>\n<li><span id=\"6138\"><code>baseURI</code> — Provides the absolute base URL of an HTML element</span></li>\n<li><span id=\"34da\"><code>childNodes</code> — Gives a collection of an element’s child nodes</span></li>\n<li><span id=\"58ec\"><code>firstChild</code> — Returns the first child node of an element</span></li>\n<li><span id=\"2f34\"><code>lastChild</code> — The last child node of an element</span></li>\n<li><span id=\"fdea\"><code>nextSibling</code> — Gives you the next node at the same node tree level</span></li>\n<li><span id=\"1ca4\"><code>nodeName</code> —Returns the name of a node</span></li>\n<li><span id=\"d4ee\"><code>nodeType</code> — Returns the type of a node</span></li>\n<li><span id=\"cd22\"><code>nodeValue</code> — Sets or returns the value of a node</span></li>\n<li><span id=\"a9a3\"><code>ownerDocument</code> — The top-level document object for this node</span></li>\n<li><span id=\"51b4\"><code>parentNode</code> — Returns the parent node of an element</span></li>\n<li><span id=\"31ef\"><code>previousSibling</code> — Returns the node immediately preceding the current one</span></li>\n<li><span id=\"ec40\"><code>textContent</code> — Sets or returns the textual content of a node and its descendants</span></li>\n</ul>\n<h3>Node Methods</h3>\n<ul>\n<li><span id=\"7f05\"><code>appendChild()</code> — Adds a new child node to an element as the last child node</span></li>\n<li><span id=\"3b3a\"><code>cloneNode()</code> — Clones an HTML element</span></li>\n<li><span id=\"661c\"><code>compareDocumentPosition()</code> — Compares the document position of two elements</span></li>\n<li><span id=\"86d2\"><code>getFeature()</code> — Returns an object which implements the APIs of a specified feature</span></li>\n<li><span id=\"059c\"><code>hasAttributes()</code> — Returns true if an element has any attributes, otherwise false</span></li>\n<li><span id=\"5d0d\"><code>hasChildNodes()</code> — Returns true if an element has any child nodes, otherwise false</span></li>\n<li><span id=\"4c86\"><code>insertBefore()</code> — Inserts a new child node before a specified, existing child node</span></li>\n<li><span id=\"4b38\"><code>isDefaultNamespace()</code> — Returns true if a specified namespaceURI is the default, otherwise false</span></li>\n<li><span id=\"8c4e\"><code>isEqualNode()</code> — Checks if two elements are equal</span></li>\n<li><span id=\"2f6a\"><code>isSameNode()</code> — Checks if two elements are the same node</span></li>\n<li><span id=\"944e\"><code>isSupported()</code> — Returns true if a specified feature is supported on the element</span></li>\n<li><span id=\"b7ef\"><code>lookupNamespaceURI()</code> — Returns the namespace URI associated with a given node</span></li>\n<li><span id=\"5f59\"><code>lookupPrefix()</code> — Returns a DOMString containing the prefix for a given namespace URI if present</span></li>\n<li><span id=\"6670\"><code>normalize()</code> — Joins adjacent text nodes and removes empty text nodes in an element</span></li>\n<li><span id=\"c80a\"><code>removeChild()</code> — Removes a child node from an element</span></li>\n<li><span id=\"8108\"><code>replaceChild()</code> — Replaces a child node in an element</span></li>\n</ul>\n<h3>Element Methods</h3>\n<ul>\n<li><span id=\"9530\"><code>getAttribute()</code> — Returns the specified attribute value of an element node</span></li>\n<li><span id=\"0dd1\"><code>getAttributeNS()</code> — Returns string value of the attribute with the specified namespace and name</span></li>\n<li><span id=\"8a0d\"><code>getAttributeNode()</code> — Gets the specified attribute node</span></li>\n<li><span id=\"fc41\"><code>getAttributeNodeNS()</code> — Returns the attribute node for the attribute with the given namespace and name</span></li>\n<li><span id=\"2a3e\"><code>getElementsByTagName()</code> — Provides a collection of all child elements with the specified tag name</span></li>\n<li><span id=\"11a4\"><code>getElementsByTagNameNS()</code> — Returns a live HTMLCollection of elements with a certain tag name belonging to the given namespace</span></li>\n<li><span id=\"e2ae\"><code>hasAttribute()</code> — Returns true if an element has any attributes, otherwise false</span></li>\n<li><span id=\"17dd\"><code>hasAttributeNS()</code> — Provides a true/false value indicating whether the current element in a given namespace has the specified attribute</span></li>\n<li><span id=\"f28c\"><code>removeAttribute()</code> — Removes a specified attribute from an element</span></li>\n<li><span id=\"8cd0\"><code>removeAttributeNS()</code> — Removes the specified attribute from an element within a certain namespace</span></li>\n<li><span id=\"e6c3\"><code>removeAttributeNode()</code> — Takes away a specified attribute node and returns the removed node</span></li>\n<li><span id=\"a7b9\"><code>setAttribute()</code> — Sets or changes the specified attribute to a specified value</span></li>\n<li><span id=\"bf42\"><code>setAttributeNS()</code> — Adds a new attribute or changes the value of an attribute with the given namespace and name</span></li>\n<li><span id=\"2322\"><code>setAttributeNode()</code> — Sets or changes the specified attribute node</span></li>\n<li><span id=\"0540\"><code>setAttributeNodeNS()</code> — Adds a new namespaced attribute node to an element</span></li>\n</ul>\n<h3>Working with the User Browser</h3>\n<p>Besides HTML elements, JavaScript is also able to take into account the user browser and incorporate its properties into the code.</p>\n<h3>Window Properties</h3>\n<ul>\n<li><span id=\"1b1f\"><code>closed</code> — Checks whether a window has been closed or not and returns true or false</span></li>\n<li><span id=\"805f\"><code>defaultStatus</code> — Sets or returns the default text in the status bar of a window</span></li>\n<li><span id=\"458e\"><code>document</code> — Returns the document object for the window</span></li>\n<li><span id=\"93ee\"><code>frames</code> — Returns all <code>&#x3C;iframe></code> elements in the current window</span></li>\n<li><span id=\"c42a\"><code>history</code> — Provides the History object for the window</span></li>\n<li><span id=\"3a5d\"><code>innerHeight</code> — The inner height of a window’s content area</span></li>\n<li><span id=\"c609\"><code>innerWidth</code> — The inner width of the content area</span></li>\n<li><span id=\"5167\"><code>length</code> — Find out the number of <code>&#x3C;iframe></code> elements in the window</span></li>\n<li><span id=\"4f05\"><code>location</code> — Returns the location object for the window</span></li>\n<li><span id=\"4125\"><code>name</code> — Sets or returns the name of a window</span></li>\n<li><span id=\"3d7f\"><code>navigator</code> — Returns the Navigator object for the window</span></li>\n<li><span id=\"c601\"><code>opener</code> — Returns a reference to the window that created the window</span></li>\n<li><span id=\"734e\"><code>outerHeight</code> — The outer height of a window, including toolbars/scrollbars</span></li>\n<li><span id=\"9b0a\"><code>outerWidth</code> — The outer width of a window, including toolbars/scrollbars</span></li>\n<li><span id=\"3140\"><code>pageXOffset</code> — Number of pixels the current document has been scrolled horizontally</span></li>\n<li><span id=\"0bcc\"><code>pageYOffset</code> — Number of pixels the document has been scrolled vertically</span></li>\n<li><span id=\"a2af\"><code>parent</code> — The parent window of the current window</span></li>\n<li><span id=\"3634\"><code>screen</code> — Returns the Screen object for the window</span></li>\n<li><span id=\"9566\"><code>screenLeft</code> — The horizontal coordinate of the window (relative to the screen)</span></li>\n<li><span id=\"1245\"><code>screenTop</code> — The vertical coordinate of the window</span></li>\n<li><span id=\"5656\"><code>screenX</code> — Same as <code>screenLeft</code> but needed for some browsers</span></li>\n<li><span id=\"21e7\"><code>screenY</code> — Same as <code>screenTop</code> but needed for some browsers</span></li>\n<li><span id=\"d000\"><code>self</code> — Returns the current window</span></li>\n<li><span id=\"99af\"><code>status</code> — Sets or returns the text in the status bar of a window</span></li>\n<li><span id=\"0a0f\"><code>top</code> — Returns the topmost browser window</span></li>\n</ul>\n<h3>Window Methods</h3>\n<ul>\n<li><span id=\"5715\"><code>alert()</code> — Displays an alert box with a message and an OK button</span></li>\n<li><span id=\"4afc\"><code>blur()</code> — Removes focus from the current window</span></li>\n<li><span id=\"ef9a\"><code>clearInterval()</code> — Clears a timer set with <code>setInterval()</code></span></li>\n<li><span id=\"fa72\"><code>clearTimeout()</code> — Clears a timer set with <code>setTimeout()</code></span></li>\n<li><span id=\"7bce\"><code>close()</code> — Closes the current window</span></li>\n<li><span id=\"ccbf\"><code>confirm()</code> — Displays a dialogue box with a message and an <em>OK</em> and <em>Cancel</em> button</span></li>\n<li><span id=\"e6f2\"><code>focus()</code> — Sets focus to the current window</span></li>\n<li><span id=\"5eb7\"><code>moveBy()</code> — Moves a window relative to its current position</span></li>\n<li><span id=\"16b6\"><code>moveTo()</code> — Moves a window to a specified position</span></li>\n<li><span id=\"32d8\"><code>open()</code> — Opens a new browser window</span></li>\n<li><span id=\"4198\"><code>print()</code> — Prints the content of the current window</span></li>\n<li><span id=\"3bec\"><code>prompt()</code> — Displays a dialogue box that prompts the visitor for input</span></li>\n<li><span id=\"e16a\"><code>resizeBy()</code> — Resizes the window by the specified number of pixels</span></li>\n<li><span id=\"31c8\"><code>resizeTo()</code> — Resizes the window to a specified width and height</span></li>\n<li><span id=\"6c44\"><code>scrollBy()</code> — Scrolls the document by a specified number of pixels</span></li>\n<li><span id=\"959f\"><code>scrollTo()</code> — Scrolls the document to specified coordinates</span></li>\n<li><span id=\"704a\"><code>setInterval()</code> — Calls a function or evaluates an expression at specified intervals</span></li>\n<li><span id=\"87c3\"><code>setTimeout()</code> — Calls a function or evaluates an expression after a specified interval</span></li>\n<li><span id=\"1cde\"><code>stop()</code> — Stops the window from loading</span></li>\n</ul>\n<h3>Screen Properties</h3>\n<ul>\n<li><span id=\"7e50\"><code>availHeight</code> — Returns the height of the screen (excluding the Windows Taskbar)</span></li>\n<li><span id=\"d7ea\"><code>availWidth</code> — Returns the width of the screen (excluding the Windows Taskbar)</span></li>\n<li><span id=\"4feb\"><code>colorDepth</code> — Returns the bit depth of the color palette for displaying images</span></li>\n<li><span id=\"f2f7\"><code>height</code> — The total height of the screen</span></li>\n<li><span id=\"8e22\"><code>pixelDepth</code> — The color resolution of the screen in bits per pixel</span></li>\n<li><span id=\"bc5a\"><code>width</code> — The total width of the screen</span></li>\n</ul>\n<h3>JavaScript Events</h3>\n<p>Events are things that can happen to HTML elements and are performed by the user. The programming language can listen for these events and trigger actions in the code. No JavaScript cheat sheet would be complete without them.</p>\n<h3>Mouse</h3>\n<ul>\n<li><span id=\"9546\"><code>onclick</code> — The event occurs when the user clicks on an element</span></li>\n<li><span id=\"9b50\"><code>oncontextmenu</code> — User right-clicks on an element to open a context menu</span></li>\n<li><span id=\"147a\"><code>ondblclick</code> — The user double-clicks on an element</span></li>\n<li><span id=\"3720\"><code>onmousedown</code> — User presses a mouse button over an element</span></li>\n<li><span id=\"a40a\"><code>onmouseenter</code> — The pointer moves onto an element</span></li>\n<li><span id=\"345e\"><code>onmouseleave</code> — Pointer moves out of an element</span></li>\n<li><span id=\"79b1\"><code>onmousemove</code> — The pointer is moving while it is over an element</span></li>\n<li><span id=\"fa70\"><code>onmouseover</code> — When the pointer is moved onto an element or one of its children</span></li>\n<li><span id=\"94f8\"><code>onmouseout</code> — User moves the mouse pointer out of an element or one of its children</span></li>\n<li><span id=\"486e\"><code>onmouseup</code> — The user releases a mouse button while over an element</span></li>\n</ul>\n<h3>Keyboard</h3>\n<ul>\n<li><span id=\"6a8f\"><code>onkeydown</code> — When the user is pressing a key down</span></li>\n<li><span id=\"0647\"><code>onkeypress</code> — The moment the user starts pressing a key</span></li>\n<li><span id=\"ff0f\"><code>onkeyup</code> — The user releases a key</span></li>\n</ul>\n<h3>Frame</h3>\n<ul>\n<li><span id=\"9d29\"><code>onabort</code> — The loading of a media is aborted</span></li>\n<li><span id=\"baa4\"><code>onbeforeunload</code> — Event occurs before the document is about to be unloaded</span></li>\n<li><span id=\"740e\"><code>onerror</code> — An error occurs while loading an external file</span></li>\n<li><span id=\"be95\"><code>onhashchange</code> — There have been changes to the anchor part of a URL</span></li>\n<li><span id=\"d0fd\"><code>onload</code> — When an object has loaded</span></li>\n<li><span id=\"65e5\"><code>onpagehide</code> — The user navigates away from a webpage</span></li>\n<li><span id=\"aae6\"><code>onpageshow</code> — When the user navigates to a webpage</span></li>\n<li><span id=\"e3dc\"><code>onresize</code> — The document view is resized</span></li>\n<li><span id=\"96c8\"><code>onscroll</code> — An element’s scrollbar is being scrolled</span></li>\n<li><span id=\"f2fa\"><code>onunload</code> — Event occurs when a page has unloaded</span></li>\n</ul>\n<h3>Form</h3>\n<ul>\n<li><span id=\"731a\"><code>onblur</code> — When an element loses focus</span></li>\n<li><span id=\"facf\"><code>onchange</code> — The content of a form element changes (for <code>&#x3C;input></code>, <code>&#x3C;select></code> and <code>&#x3C;textarea></code>)</span></li>\n<li><span id=\"7a0a\"><code>onfocus</code> — An element gets focus</span></li>\n<li><span id=\"5188\"><code>onfocusin</code> — When an element is about to get focus</span></li>\n<li><span id=\"594a\"><code>onfocusout</code> — The element is about to lose focus</span></li>\n<li><span id=\"700e\"><code>oninput</code> — User input on an element</span></li>\n<li><span id=\"dd0f\"><code>oninvalid</code> — An element is invalid</span></li>\n<li><span id=\"6cad\"><code>onreset</code> — A form is reset</span></li>\n<li><span id=\"f4f2\"><code>onsearch</code> — The user writes something in a search field (for <code>&#x3C;input=\"search\"></code>)</span></li>\n<li><span id=\"32a9\"><code>onselect</code> — The user selects some text (for <code>&#x3C;input></code> and <code>&#x3C;textarea></code>)</span></li>\n<li><span id=\"3e1d\"><code>onsubmit</code> — A form is submitted</span></li>\n</ul>\n<h3>Drag</h3>\n<ul>\n<li><span id=\"912c\"><code>ondrag</code> — An element is dragged</span></li>\n<li><span id=\"6897\"><code>ondragend</code> — The user has finished dragging the element</span></li>\n<li><span id=\"8225\"><code>ondragenter</code> — The dragged element enters a drop target</span></li>\n<li><span id=\"cf37\"><code>ondragleave</code> — A dragged element leaves the drop target</span></li>\n<li><span id=\"5bc3\"><code>ondragover</code> — The dragged element is on top of the drop target</span></li>\n<li><span id=\"2b0c\"><code>ondragstart</code> — User starts to drag an element</span></li>\n<li><span id=\"8e24\"><code>ondrop</code> — Dragged element is dropped on the drop target</span></li>\n</ul>\n<h3>Clipboard</h3>\n<ul>\n<li><span id=\"c299\"><code>oncopy</code> — User copies the content of an element</span></li>\n<li><span id=\"267c\"><code>oncut</code> — The user cuts an element’s content</span></li>\n<li><span id=\"e33c\"><code>onpaste</code> — A user pastes the content in an element</span></li>\n</ul>\n<h3>Media</h3>\n<ul>\n<li><span id=\"e0ab\"><code>onabort</code> — Media loading is aborted</span></li>\n<li><span id=\"0758\"><code>oncanplay</code> — The browser can start playing media (e.g. a file has buffered enough)</span></li>\n<li><span id=\"0bc2\"><code>oncanplaythrough</code> — The browser can play through media without stopping</span></li>\n<li><span id=\"4c27\"><code>ondurationchange</code> — The duration of the media changes</span></li>\n<li><span id=\"aa9a\"><code>onended</code> — The media has reached its end</span></li>\n<li><span id=\"25b8\"><code>onerror</code> — Happens when an error occurs while loading an external file</span></li>\n<li><span id=\"cdf4\"><code>onloadeddata</code> — Media data is loaded</span></li>\n<li><span id=\"edce\"><code>onloadedmetadata</code> — Metadata (like dimensions and duration) are loaded</span></li>\n<li><span id=\"7928\"><code>onloadstart</code> — The browser starts looking for specified media</span></li>\n<li><span id=\"159c\"><code>onpause</code> — Media is paused either by the user or automatically</span></li>\n<li><span id=\"057f\"><code>onplay</code> — The media has been started or is no longer paused</span></li>\n<li><span id=\"ce2a\"><code>onplaying</code> — Media is playing after having been paused or stopped for buffering</span></li>\n<li><span id=\"2655\"><code>onprogress</code> — The browser is in the process of downloading the media</span></li>\n<li><span id=\"a11c\"><code>onratechange</code> — The playing speed of the media changes</span></li>\n<li><span id=\"f8bb\"><code>onseeked</code> — User is finished moving/skipping to a new position in the media</span></li>\n<li><span id=\"9895\"><code>onseeking</code> — The user starts moving/skipping</span></li>\n<li><span id=\"c636\"><code>onstalled</code> — The browser is trying to load the media but it is not available</span></li>\n<li><span id=\"6480\"><code>onsuspend</code> — The browser is intentionally not loading media</span></li>\n<li><span id=\"f94b\"><code>ontimeupdate</code> — The playing position has changed (e.g. because of fast forward)</span></li>\n<li><span id=\"e96b\"><code>onvolumechange</code> — Media volume has changed (including mute)</span></li>\n<li><span id=\"9fe8\"><code>onwaiting</code> — Media paused but expected to resume (for example, buffering)</span></li>\n</ul>\n<h3>Animation</h3>\n<ul>\n<li><span id=\"4497\"><code>animationend</code> — A CSS animation is complete</span></li>\n<li><span id=\"fc16\"><code>animationiteration</code> — CSS animation is repeated</span></li>\n<li><span id=\"0f40\"><code>animationstart</code> — CSS animation has started</span></li>\n</ul>\n<h3>Other</h3>\n<ul>\n<li><span id=\"614b\"><code>transitionend</code> — Fired when a CSS transition has completed</span></li>\n<li><span id=\"5a40\"><code>onmessage</code> — A message is received through the event source</span></li>\n<li><span id=\"0dad\"><code>onoffline</code> — The browser starts to work offline</span></li>\n<li><span id=\"058e\"><code>ononline</code> — The browser starts to work online</span></li>\n<li><span id=\"090a\"><code>onpopstate</code> — When the window’s history changes</span></li>\n<li><span id=\"d940\"><code>onshow</code> — A <code>&#x3C;menu></code> element is shown as a context menu</span></li>\n<li><span id=\"3062\"><code>onstorage</code> — A Web Storage area is updated</span></li>\n<li><span id=\"2681\"><code>ontoggle</code> — The user opens or closes the <code>&#x3C;details></code> element</span></li>\n<li><span id=\"6a40\"><code>onwheel</code> — Mouse wheel rolls up or down over an element</span></li>\n<li><span id=\"7178\"><code>ontouchcancel</code> — Screen-touch is interrupted</span></li>\n<li><span id=\"bec5\"><code>ontouchend</code> — User’s finger is removed from a touch-screen</span></li>\n<li><span id=\"3b60\"><code>ontouchmove</code> — A finger is dragged across the screen</span></li>\n<li><span id=\"3c0e\"><code>ontouchstart</code> — A finger is placed on the touch-screen</span></li>\n</ul>\n<h3>Errors</h3>\n<p>When working with JavaScript, different errors can occur. There are several ways of handling them:</p>\n<ul>\n<li><span id=\"54c9\"><code>try</code> — Lets you define a block of code to test for errors</span></li>\n<li><span id=\"cb14\"><code>catch</code> — Set up a block of code to execute in case of an error</span></li>\n<li><span id=\"6a5b\"><code>throw</code> — Create custom error messages instead of the standard JavaScript errors</span></li>\n<li><span id=\"6aea\"><code>finally</code> — Lets you execute code, after try and catch, regardless of the result</span></li>\n</ul>\n<h3>Error Name Values</h3>\n<p>JavaScript also has a built-in error object. It has two properties:</p>\n<ul>\n<li><span id=\"ca3b\"><code>name</code> — Sets or returns the error name</span></li>\n<li><span id=\"7047\"><code>message</code> — Sets or returns an error message in a string from</span></li>\n</ul>\n<p>The error property can return six different values as its name:</p>\n<ul>\n<li><span id=\"b389\"><code>EvalError</code> — An error has occurred in the <code>eval()</code> function</span></li>\n<li><span id=\"570c\"><code>RangeError</code> — A number is “out of range”</span></li>\n<li><span id=\"2352\"><code>ReferenceError</code> — An illegal reference has occurred</span></li>\n<li><span id=\"5019\"><code>SyntaxError</code> — A syntax error has occurred</span></li>\n<li><span id=\"0527\"><code>TypeError</code> — A type error has occurred</span></li>\n<li><span id=\"02a3\"><code>URIError</code> — An <code>encodeURI()</code> error has occurred</span></li>\n</ul>\n<h3>Explicit Conversions</h3>\n<p>The simplest way to perform an explicit type conversion is to use the <code>Boolean(), Number()</code>, and <code>String()</code> functions.</p>\n<p>Any value other than <code>null</code>or <code>undefined</code>has a<code>toString()</code> method.</p>\n<p><code>n.toString(2);</code></p>\n<p>binary</p>\n<p><code>n.toString(8);</code></p>\n<p>octal</p>\n<p><code>n.toString(16);</code></p>\n<p>hex</p>\n<p><code>let n = 123456.789;</code></p>\n<p><code>n.toFixed(0)</code></p>\n<p>“123457”</p>\n<p><code>n.toFixed(5)</code></p>\n<p>“123456.78900”</p>\n<p><code>n.toExponential(3)</code></p>\n<p>“1.235e+5”</p>\n<p><code>n.toPrecision(7)</code></p>\n<p>“123456.8”</p>\n<p><code>n.toPrecision(10)</code></p>\n<p>“123456.7890”</p>\n<p><code>parseInt(\"3 blind mice\")</code></p>\n<p>3</p>\n<p><code>parseFloat(\" 3.14 meters\")</code></p>\n<p>3.14</p>\n<p><code>parseInt(\"-12.34\")</code></p>\n<p>-12</p>\n<p><code>parseInt(\"0xFF\")</code></p>\n<p>255</p>\n<h3>Types, Values, and Variables</h3>\n<h3>Links</h3>\n<p><strong>Resource</strong></p>\n<p><strong>URL</strong></p>\n<p>MDN</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" class=\"markup--anchor markup--p-anchor\">https://developer.mozilla.org/en-US/docs/Web/JavaScript</a></p>\n<p>Run Snippets</p>\n<p><a href=\"https://developers.google.com/web/tools/chrome-devtools/javascript/snippets\" class=\"markup--anchor markup--p-anchor\">https://developers.google.com/web/tools/chrome-devtools/javascript/snippets</a></p>\n<h3>Explicit Conversions</h3>\n<p>The simplest way to perform an explicit type conversion is to use the <code>Boolean(), Number()</code>, and <code>String()</code> functions.</p>\n<p>Any value other than <code>null</code>or <code>undefined</code>has a<code>toString()</code> method.</p>\n<p><code>n.toString(2);</code></p>\n<p>binary</p>\n<p><code>n.toString(8);</code></p>\n<p>octal</p>\n<p><code>n.toString(16);</code></p>\n<p>hex</p>\n<p><code>let n = 123456.789;</code></p>\n<p><code>n.toFixed(0)</code></p>\n<p>“123457”</p>\n<p><code>n.toFixed(5)</code></p>\n<p>“123456.78900”</p>\n<p><code>n.toExponential(3)</code></p>\n<p>“1.235e+5”</p>\n<p><code>n.toPrecision(7)</code></p>\n<p>“123456.8”</p>\n<p><code>n.toPrecision(10)</code></p>\n<p>“123456.7890”</p>\n<p><code>parseInt(\"3 blind mice\")</code></p>\n<p>3</p>\n<p><code>parseFloat(\" 3.14 meters\")</code></p>\n<p>3.14</p>\n<p><code>parseInt(\"-12.34\")</code></p>\n<p>-12</p>\n<p><code>parseInt(\"0xFF\")</code></p>\n<p>255</p>\n<p><code>parseInt(\"0xff\")</code></p>\n<p>255</p>\n<p><code>parseInt(\"-0XFF\")</code></p>\n<p>-255</p>\n<p><code>parseInt(\"0.1\")</code></p>\n<p>0</p>\n<p><code>parseInt(\".1\")</code></p>\n<p>NaN: integers can’t start with “.”</p>\n<p><code>parseFloat(\"$72.47\")</code></p>\n<p>NaN: numbers can’t start with “$”</p>\n<p>Supply Radix</p>\n<p><code>parseInt(\"11\", 2)</code></p>\n<p>3</p>\n<p><code>parseInt(\"ff\", 16)</code></p>\n<p>255</p>\n<p><code>parseInt(\"077\", 8)</code></p>\n<p>63</p>\n<h3>Conversion Idioms</h3>\n<p><code>x + \"\"</code></p>\n<p><code>String(x)</code></p>\n<p><code>+x</code></p>\n<p><code>Number(x)</code></p>\n<p><code>x-0</code></p>\n<p><code>Number(x)</code></p>\n<p><code>!!x</code></p>\n<p><code>Boolean(x)</code></p>\n<h3>Destructuring Assignment</h3>\n<p><code>let [x,y] = [1,2];</code></p>\n<p>let x=1, y=2</p>\n<p><code>[x,y] = [x + 1,y + 1];</code></p>\n<p>x = x + 1, y = y + 1</p>\n<p><code>[x,y] = [y,x];</code></p>\n<p>Swap the value of the two variables</p>\n<p>Destructuring assignment makes it easy to work with functions that return arrays of values:</p>\n<p><code>let [r,theta] = toPolar(1.0, 1.0);</code></p>\n<pre><code>function toPolar(x, y) {\n\nreturn [Math.sqrt(x*x+y*y), Math.atan2(y,x)];\n\n}\n</code></pre>\n<p>Variable destructuring in loops:</p>\n<p><code>let o = { x: 1, y: 2 };</code></p>\n<pre><code>for(const [name, value] of Object.entries(o)) {\n\nconsole.log(name, value); // Prints \"x 1\" and \"y 2\"\n\n}\n</code></pre>\n<p><strong>Note</strong>: The <code>Object.entries()</code> method returns an array of a given object's own enumerable string-keyed property <code>[key, value]</code> pairs, in the same order as that provided by a <code>for...in</code> loop. (The only important difference is that a <code>for...in</code> loop enumerates properties in the prototype chain as well).</p>\n<p>The list of variables on the left can include extra commas to skip certain values on the right</p>\n<p><code>[,x,,y] = [1,2,3,4];</code></p>\n<p>x == 2; y == 4</p>\n<p><strong>Note</strong>: the last comma does not stand for a value.</p>\n<p>To collect all unused or remaining values into a single variable when destructuring an array, use three dots <code>(...)</code>before the last variable name on the left-hand side</p>\n<p><code>let [x, ...y] = [1,2,3,4];</code></p>\n<p>y == [2,3,4]</p>\n<p><code>let [first, ...rest] = \"Hello\";</code></p>\n<p>first == “H”; rest ==[“e”,”l”,”l”,”o”]</p>\n<p>Destructuring assignment can also be performed when the righthand side is an object value.</p>\n<p><code>let transparent = {r: 0.0, g: 0.0, b: 0.0, a: 1.0};</code></p>\n<p><code>let {r, g, b} = transparent;</code></p>\n<p>r == 0.0; g == 0.0; b == 0.0</p>\n<p><code>const {sin, cos, tan} = Math;</code></p>\n<p>sin=Math.sin, cos=Math.cos, tan=Math.tan</p>\n<h3>Expressions and Operators</h3>\n<p>In JavaScript, the values <code>null</code>and <code>undefined</code>are the only two values that do not have properties. In a regular property access expression using . or [], you get a <code>TypeError</code> if the expression on the left evaluates to <code>null</code>or <code>undefined</code>. You can use <code>?.</code> and <code>?.[]</code> syntax to guard against errors of this type.</p>\n<p>You can also invoke a function using <code>?.()</code> instead of <code>()</code>.</p>\n<p>With the <code>new ?.()</code> invocation syntax, if the expression to the left of the <code>?.</code> evaluates to <code>null</code> or <code>undefined</code>, then the entire invocation expression evaluates to <code>undefined</code>and no exception is thrown.</p>\n<p>Write the function invocation using <code>?.(),</code> knowing that invocation will only happen if there is actually a value to be invoked</p>\n<pre><code>function square(x, log) {\n\nlog?.(x); // Call the function if there is one\n\nreturn x * x;\n\n}\n</code></pre>\n<p>Note that expression <code>x++</code> is not always the same as <code>x = x + 1</code>.The <code>++</code> operator never performs string concatenation: it always converts its operand to a number and increments it. If x is the string \"1\", <code>++x</code> is the number 2, but<code>x + 1</code> is the string \"11\".</p>\n<p>JavaScript objects are compared by reference, not by value. An object is equal to itself, but not to any other object. If two distinct objects have the same number of properties, with the same names and values, they are still not equal. Similarly, two arrays that have the same elements in the same order are not equal to each other.</p>\n<p><code>NaN</code>value is never equal to any other value, including itself! To check whether a value <code>x</code> is <code>NaN</code>, use <code>x !==</code>, or the global <code>isNaN()</code> function.</p>\n<p>If both values refer to the same object, array, or function, they are equal. If they refer to different objects, they are not equal, even if both objects have identical properties.</p>\n<h3>Evaluating Expressions</h3>\n<p>JavaScript has the ability to interpret strings of JavaScript source code, evaluating them to produce a value.</p>\n<p><code>eval(\"3+2\")</code></p>\n<p>Because of security issues, some web servers use the HTTP “Content-Security-Policy” header to disable<code>eval()</code> for an entire website.</p>\n<h3>First-Defined (??)</h3>\n<p>The first-defined operator <code>??</code> evaluates to its first defined operand: if its left operand is not <code>null</code> and not <code>undefined</code>, it returns that value.</p>\n<p><code>a ?? b</code> is equivalent to <code>(a !== null &#x26;&#x26; a !== undefined) ? a : b</code></p>\n<p><code>??</code> is a useful alternative to <code>||.</code> The problem with this idiomatic use is that zero, the empty string, and false are all <code>falsy</code>values that may be perfectly valid in some circumstances. In this code example, if <code>maxWidth</code>is zero, that value will be ignored. But if we change the <code>||</code> operator to <code>??</code>, we end up with an expression where zero is a valid value.</p>\n<p><code>let max = maxWidth || preferences.maxWidth || 500;</code></p>\n<p><code>let max = maxWidth ?? preferences.maxWidth ?? 500;</code></p>\n<h3>delete Operator</h3>\n<p>Deleting an array element leaves a “hole” in the array and does not change the array’s length. The resulting array is sparse.</p>\n<h3>void Operator</h3>\n<p>Using the <code>void</code> operator makes sense only if the operand has side effects.</p>\n<p><code>let counter = 0;</code></p>\n<p><code>const increment = () => void counter++;</code></p>\n<p><code>increment()</code></p>\n<p>undefined</p>\n<p><code>counter</code></p>\n<p>1</p>\n<h3>Statements</h3>\n<p>Expressions are evaluated to produce a value, but statements are executed to make something happen.</p>\n<p>Expressions with side effects, such as assignments and function invocations, can stand alone as statements, and when used this way are known as expression statements.</p>\n<p>A similar category of statements are the declaration statements that declare new variables and define new functions.</p>\n<p>If a function does not have any side effects, there is no sense in calling it, unless it is part of a larger expression or an assignment statement.</p>\n<h3>for/of</h3>\n<p>The <code>for/of</code> loop works with iterable objects. Arrays, strings, sets, and maps are iterable.</p>\n<p>Array</p>\n<pre><code>let data = [1, 2, 3, 4, 5, 6, 7, 8, 9], sum = 0;\n\nfor(let element of data) {\n\nsum += element;\n\n}\n\nlet text = \"Na na na na na na na na\";\n\nlet wordSet = new Set(text.split(\" \"));\n\nlet unique = [];\n\nfor(let word of wordSet) {\n\nunique.push(word);\n\n}\n</code></pre>\n<p>String</p>\n<pre><code>let frequency = {};\n\nfor(let letter of \"mississippi\") {\n\nif (frequency[letter]) {\n\nfrequency[letter]++;\n\n}\n\nelse {\n\nfrequency[letter] = 1;\n\n}\n\n}\n</code></pre>\n<p>Map</p>\n<pre><code>let m = new Map([[1, \"one\"]]);\n\nfor(let [key, value] of m) {\n\nkey // => 1\n\nvalue // => \"one\"\n\n}\n</code></pre>\n<p>Objects are not (by default) iterable. Attempting to use <code>for/of</code> on a regular object throws a <code>TypeError</code> at runtime.</p>\n<p>If you want to iterate through the properties of an object, you can use the <code>for/in</code> loop.</p>\n<p>Note: <code>for/of</code> can be used on objects with <code>Object.entries</code> property, but it will not pick properties from object’s prototype.</p>\n<h3>for/in</h3>\n<p><code>for/in</code> loop works with any object after the <code>in</code>.</p>\n<pre><code>for(let p in o) {\n\nconsole.log(o[p]);\n\n}\n</code></pre>\n<p>Note: this will enumerate array indexes, not values.</p>\n<pre><code>for(let i in a) console.log(i);\n</code></pre>\n<p>The <code>for/in</code> loop does not actually enumerate all properties of an object. It does not enumerate properties whose names are symbols. And of the properties whose names are strings, it only loops over the <code>enumerable</code>properties.</p>\n<h3>with</h3>\n<p>The with statement runs a block of code as if the properties of a specified object were variables in scope for that code.</p>\n<p>The <code>with</code>statement is forbidden in strict mode and should be considered deprecated in non-strict mode: avoid using it whenever possible.</p>\n<pre><code>document.forms[0].address.value\n\nwith(document.forms[0]) {\n\nname.value = \"\";\n\naddress.value = \"\";\n\nemail.value = \"\";\n\n}\n</code></pre>\n<h3>debugger</h3>\n<p>If a debugger program is available and is running, then an implementation may (but is not required to) perform some kind of debugging action.</p>\n<p>In practice, this statement acts like a breakpoint: execution of JavaScript code stops, and you can use the debugger to print variables’ values, examine the call stack, and so on.</p>\n<p>Note that it is not enough to have a debugger available: the debugger statement won’t start the debugger for you. If you’re using a web browser and have the developer tools console open, however, this statement will cause a breakpoint.</p>\n<h3>use strict</h3>\n<p>Strict mode is a restricted subset of the language that fixes important language deficiencies and provides stronger error checking and increased security.</p>\n<p>The differences between strict mode and non-strict mode are the following:</p>\n<p>· The <code>with</code>statement is not allowed in strict mode.</p>\n<p>· In strict mode, all variables must be declared: a <code>ReferenceError</code>is thrown if you assign a value to an identifier that is not a declared variable, function, function parameter, catch clause parameter, or property of the global object.</p>\n<p>· In non-strict mode, this implicitly declares a global variable by adding a new property to the global object.</p>\n<p>· In strict mode, functions invoked as functions (rather than as methods) have a <code>this</code>value of undefined. (In non-strict mode, functions invoked as functions are always passed the global object as their <code>this</code>value.)</p>\n<p>· A function is invoked with <code>call()</code>or <code>apply()</code> , the <code>this</code>value is exactly the value passed as the first argument to <code>call()</code> or <code>apply()</code>. (In non-strict mode, <code>null</code>and <code>undefined</code>values are replaced with the global object and non-object values are converted to objects.)</p>\n<p>· In strict mode, assignments to non-writable properties and attempts to create new properties on non-extensible objects throw a <code>TypeError</code>. (In non-strict mode, these attempts fail silently.)</p>\n<p>· In strict mode, code passed to <code>eval()</code>cannot declare variables or define functions in the caller’s scope as it can in non-strict mode. Instead, variable and function definitions live in a new scope created for the <code>eval()</code>. This scope is discarded when the <code>eval()</code> returns.</p>\n<p>· In strict mode, the Arguments object in a function holds a static copy of the values passed to the function. In non-strict mode, the Arguments object has “magical” behavior in which elements of the array and named function parameters both refer to the same value.</p>\n<p>· In strict mode, a <code>SyntaxError</code>is thrown if the <code>delete</code>operator is followed by an unqualified identifier such as a variable, function, or function parameter. (In non-strict mode, such a <code>delete</code>expression does nothing and evaluates to false.)</p>\n<p>· In strict mode, an attempt to delete a non-configurable property throws a <code>TypeError</code>. (In non-strict mode, the attempt fails and the delete expression evaluates to false.)</p>\n<p>· In strict mode, it is a syntax error for an object literal to define two or more properties by the same name. (In non-strict mode, no error occurs.)</p>\n<h3>Objects</h3>\n<p>In addition to its name and value, each property has three property attributes:</p>\n<p>· The <code>writable</code>attribute specifies whether the value of the property can be set.</p>\n<p>· The <code>enumerable</code>attribute specifies whether the property name is returned by a <code>for/in</code> loop.</p>\n<p>· The <code>configurable</code>attribute specifies whether the property can be deleted and whether its attributes can be altered.</p>\n<h3>Prototypes</h3>\n<p>All objects created by object literals have the same prototype object, <code>Object.prototype.</code></p>\n<p>Objects created using the <code>new</code>keyword and a constructor invocation use the value of the prototype property of the constructor function as their prototype.</p>\n<p>Object created by <code>new Object()</code> inherits from <code>Object.prototype</code>, just as the object created by <code>{}</code> does. Similarly, the object created by <code>new Array()</code> uses <code>Array.prototype</code> as its prototype, and the object created by<code>new Date()</code> uses <code>Date.prototype</code> as its prototype.</p>\n<p>Almost all objects have a prototype, but only a relatively small number of objects have a <code>prototype</code>property. It is these objects with prototype properties that define the prototypes for all the other objects.</p>\n<p>Most built-in constructors (and most user-defined constructors) have a prototype that inherits from <code>Object.prototype</code>.</p>\n<p><code>Date.prototype</code> inherits properties from <code>Object.prototype</code>, so a Date object created by <code>new Date()</code> inherits properties from both <code>Date.prototype</code> and <code>Object.prototype</code>. This linked series of prototype objects is known as a prototype chain.</p>\n<h3>Creating Objects</h3>\n<p>Objects can be created with object literals, with the <code>new</code> keyword, and with the <code>Object.create()</code> function.</p>\n<p>Literal</p>\n<p><code>let empty = {};</code></p>\n<p><code>let point = { x: 0, y: 0 };</code></p>\n<pre><code>let book = {\n\n\"main title\": \"JavaScript\",\n\n\"sub-title\": \"The Definitive Guide\",\n\nfor: \"all audiences\",\n\nauthor: {\n\nfirstname: \"David\", .\n\nsurname: \"Flanagan\"\n\n}\n\n};\n</code></pre>\n<p><code>new</code></p>\n<p><code>let o = new Object();</code><br>\n<code>let a = new Array();</code><br>\n<code>let d = new Date();</code><br>\n<code>let r = new Map();</code></p>\n<p><code>Object.create</code></p>\n<p><code>let o3 = Object.create(Object.prototype);</code></p>\n<p>Use <code>Object.create</code> to guard against accidental modifications:</p>\n<pre><code>let o = { x: \"don't change this value\" };\n\nlibrary.function(Object.create(o));\n</code></pre>\n<p>Note: the library function can modify the passed in object, but not the original <code>o</code> object</p>\n<h3>Access Object Properties with an array ([]) notation</h3>\n<pre><code>let addr = \"\";\n\nfor(let i = 0; i &#x3C; 4; i++) {\n\naddr += customer[`address${i}`] + \"\\n\";\n\n}\n</code></pre>\n<h3>Inheritance</h3>\n<p><code>let o = {};</code></p>\n<p><code>o.x = 1;</code></p>\n<p><code>let p = Object.create(o);</code></p>\n<p><code>p.y = 2;</code></p>\n<p><code>let q = Object.create(p);</code></p>\n<p><code>q.z = 3;</code></p>\n<p>Property <code>x</code> and <code>y</code> available on object <code>q</code></p>\n<p><code>q.x + q.y</code></p>\n<h3>How to query for property which may be undefined</h3>\n<p><code>surname = book &#x26;&#x26; book.author &#x26;&#x26; book.author.surname;</code></p>\n<p><code>let surname = book?.author?.surname;</code></p>\n<h3>Deleting properties</h3>\n<p>The <code>delete</code> operator only deletes own properties, not inherited ones. (To delete an inherited property, you must delete it from the prototype object in which it is defined. Doing this affects every object that inherits from that prototype.)</p>\n<p><code>delete</code> does not remove properties that have a <code>configurable</code>attribute of false.</p>\n<p>Certain properties of built-in objects are non-configurable, as are properties of the global object created by variable declaration and function declaration.</p>\n<p><code>delete Object.prototype</code></p>\n<p>false: property is non-configurable</p>\n<p><code>var x = 1;</code></p>\n<p><code>delete globalThis.x</code></p>\n<p>false: can’t delete <code>this</code>property</p>\n<p><code>function f() {}</code></p>\n<p><code>delete globalThis.f</code></p>\n<p>false</p>\n<p><code>globalThis.x = 1;</code></p>\n<p><code>delete globalThis.x</code></p>\n<p>true</p>\n<h3>Testing properties</h3>\n<p>To check whether an object has a property with a given name. You can do this with the <code>in</code> operator, with the <code>hasOwnProperty()</code> and <code>propertyIsEnumerable()</code> methods, or simply by querying the property</p>\n<p>( <code>!= undefined</code>).</p>\n<h3>in &#x26; query</h3>\n<p><code>let o = { x: 1 };</code></p>\n<p><code>\"x\" in o</code></p>\n<p>true</p>\n<p><code>o.x !== undefined</code></p>\n<p><code>\"y\" in o</code></p>\n<p>false</p>\n<p><code>o.y !== undefined</code></p>\n<p><code>\"toString\" in o</code></p>\n<p>true: o inherits a <code>toString</code>property</p>\n<p><code>o.toString !== undefined</code></p>\n<p>Advantage of using in: <code>in</code> can distinguish between properties that do not exist and properties that exist but have been set to <code>undefined</code>.</p>\n<h3>hasOwnProperty</h3>\n<p><code>let o = { x: 1 };</code></p>\n<p><code>o.hasOwnProperty(\"x\")</code></p>\n<p>true</p>\n<p><code>o.hasOwnProperty(\"y\")</code></p>\n<p>false</p>\n<p><code>o.hasOwnProperty(\"toString\")</code></p>\n<p>false: toString is an inherited property</p>\n<p>The <code>propertyIsEnumerable()</code> returns true only if the named property is an own property and its <code>enumerable</code> attribute is true.</p>\n<p><code>let o = { x: 1 };</code></p>\n<p><code>o.propertyIsEnumerable(\"x\")</code></p>\n<p>true</p>\n<p><code>o.propertyIsEnumerable(\"toString\")</code></p>\n<p>false: not an own property</p>\n<p><code>Object.prototype.propertyIsEnumerable(\"toString\")</code></p>\n<p>false: not enumerable</p>\n<h3>Enumerating properties</h3>\n<p>To guard against enumerating inherited properties with <code>for/in</code>, you can add an explicit check inside the loop body:</p>\n<pre><code>for(let p in o) {\n\nif (!o.hasOwnProperty(p)) continue;\n\n}\n\nfor(let p in o) {\n\nif (typeof o[p] === \"function\") continue;\n\n}\n</code></pre>\n<p>Functions you can use to get an array of property names</p>\n<p>· <code>Object.keys()</code> returns an array of the names of the enumerable own properties of an object. It does not include non-enumerable properties, inherited properties, or properties whose name is a Symbol.</p>\n<p>· <code>Object.getOwnPropertyNames()</code> works like <code>Object.keys()</code>but returns an array of the names of nonenumerable own properties as well.</p>\n<p>· <code>Object.getOwnPropertySymbols()</code> returns own properties whose names are Symbols, whether or not they are enumerable.</p>\n<p>· <code>Reflect.ownKeys()</code> returns all own property names, both enumerable and non-enumerable, and both string and Symbol.</p>\n<h3>Extending Objects</h3>\n<p>To copy the properties of one object to another object</p>\n<pre><code>let target = {x: 1}, source = {y: 2, z: 3};\n\nfor(let key of Object.keys(source)) {\n\ntarget[key] = source[key];\n\n}\n</code></pre>\n<p>One reason to assign properties from one object into another is when you have an object that defines default values for many properties and you want to copy those default properties into another object if a property by that name does not already exist in that object. Using <code>Object.assign()</code> naively will not do what you want:</p>\n<pre><code>Object.assign(o, defaults);\n</code></pre>\n<p>overwrites everything in o with defaults</p>\n<p>Instead, use one of the following:,</p>\n<p><code>o = Object.assign({}, defaults, o);</code></p>\n<p><code>o = {...defaults, ...o};</code></p>\n<h3>Serializing Objects</h3>\n<p>The functions <code>JSON.stringify()</code> and<code>JSON.parse()</code> serialize and restore JavaScript objects.</p>\n<p><code>let o = {x: 1, y: {z: [false, null, \"\"]}};</code></p>\n<p><code>let s = JSON.stringify(o);</code></p>\n<p>s == ‘{“x”:1,”y”:{“z”:[false,null,””]}}’</p>\n<p><code>let p = JSON.parse(s);</code></p>\n<p>p == {x: 1, y: {z: [false,null, “”]}}</p>\n<h3>Object methods</h3>\n<p><code>toString(), valueOf(), loLocaleString(), toJSON()</code></p>\n<p><code>let s = { x: 1, y: 1 }.toString();</code></p>\n<p>s == “[object Object]”</p>\n<h3>Extended Object Literal Syntax</h3>\n<h3>Shorthand Properties</h3>\n<pre><code>let x = 1, y = 2;\n\nlet o = {\n\nx: x,\n\ny: y\n\n};\n</code></pre>\n<p>←></p>\n<p><code>let x = 1, y = 2;</code><br>\n<code>let o = { x, y };</code></p>\n<h3>Computer Property Names</h3>\n<p><code>const PROPERTY_NAME = \"p1\";</code><br>\n<code>function computePropertyName() { return \"p\" + 2; }</code></p>\n<pre><code>let o = {};\n\no[PROPERTY_NAME] = 1;\n\no[computePropertyName()] = 2;\n</code></pre>\n<p>←></p>\n<pre><code>let p = {\n\n[PROPERTY_NAME]: 1,\n\n[computePropertyName()]: 2\n\n};\n</code></pre>\n<h3>Symbols as Property Names</h3>\n<pre><code>const extension = Symbol(\"my extension symbol\");\n\nlet o = {\n\n[extension]: {}\n\n};\n\no[extension].x = 0;\n</code></pre>\n<p>Two Symbols created with the same string argument are still different from one another.</p>\n<p>The point of Symbols is not security, but to define a safe extension mechanism for JavaScript objects. If you get an object from third-party code that you do not control and need to add some of your own properties to that object but want to be sure that your properties will not conflict with any properties that may already exist on the object, you can safely use Symbols as your property names.</p>\n<h3>Spread Operator</h3>\n<p>You can copy the properties of an existing object into a new object using the “spread operator” … inside an object literal:</p>\n<p><code>let position = { x: 0, y: 0 };</code><br>\n<code>let dimensions = { width: 100, height: 75 };</code><br>\n<code>let rect = { ...position, ...dimensions };</code><br>\n<code>rect.x + rect.y + rect.width + rect.height</code></p>\n<h3>Shorthand Methods</h3>\n<pre><code>let square = {\n\narea: function() {\n\nreturn this.side * this.side; },\n\nside: 10\n\n};\n</code></pre>\n<p>←></p>\n<pre><code>let square = {\n\narea() {\n\nreturn this.side * this.side; },\n\nside: 10\n\n};\n</code></pre>\n<p>When you write a method using this shorthand syntax, the property name can take any of the forms that are legal in an object literal: in addition to a regular JavaScript identifier like the name area above, you can also use string literals and computed property names, which can include Symbol property names:</p>\n<pre><code>const METHOD_NAME = \"m\";\n\nconst symbol = Symbol();\n\nlet weirdMethods = {\n\n\"method With Spaces\"(x) { return x + 1; },\n\n[METHOD_NAME](x) { return x + 2; },\n\n[symbol](x) { return x + 3; }\n\n};\n</code></pre>\n<p><code>weirdMethods[\"method With Spaces\"](1)</code></p>\n<p>2</p>\n<p><code>weirdMethods[METHOD_NAME](1)</code></p>\n<p>3</p>\n<p><code>weirdMethods[symbol](1)</code></p>\n<p>4</p>\n<h3>Property Getters and Setters</h3>\n<pre><code>let o = {\n\ndataProp: value,\n\nget accessorProp() { return this.dataProp; },\n\nset accessorProp(value) { this.dataProp = value; }\n\n};\n</code></pre>\n<h3>Arrays</h3>\n<h3>Creating Arrays</h3>\n<p>· Array literals</p>\n<p>· The … spread operator on an iterable object</p>\n<p>· The <code>Array()</code> constructor</p>\n<p>· The <code>Array.of()</code> and <code>Array.from()</code> factory methods</p>\n<h3>Array literals</h3>\n<p><code>let empty = [];</code></p>\n<p><code>let primes = [2, 3, 5, 7, 11];</code></p>\n<p><code>let misc = [ 1.1, true, \"a\", ];</code></p>\n<p><code>let b = [[1, {x: 1, y: 2}], [2, {x: 3, y: 4}]];</code></p>\n<p>If an array literal contains multiple commas in a row, with no value between, the array is sparse</p>\n<p><code>let count = [1,,3];</code></p>\n<p><code>let undefs = [,,];</code></p>\n<p>Array literal syntax allows an optional trailing comma, so <code>[,,]</code> has a length of 2, not 3.</p>\n<h3>The Spread Operator</h3>\n<p><code>let a = [1, 2, 3];</code></p>\n<p><code>let b = [0, ...a, 4];</code></p>\n<p>[0, 1, 2, 3, 4]</p>\n<p>create a copy of an array — modifying the copy does not change the original</p>\n<p><code>let original = [1,2,3];</code><br>\n<code>let copy = [...original];</code></p>\n<p><code>let digits = [...\"0123456789ABCDEF\"];</code></p>\n<p>[“0”,”1\",”2\",”3\",”4\",”5\",”6\",”7\",”8\",”9\",”A”,”B”,”C”,”D”,”E”,”F”]</p>\n<p><code>let letters = [...\"hello world\"];</code></p>\n<p>[“h”,”e”,”l”,”l””o”,””,”w”,”o””r”,”l”,”d”]</p>\n<p><code>[...new Set(letters)]</code></p>\n<p>[“h”,”e”,”l”,”o”,””,”w”,”r”,”d”]</p>\n<h3>Array.of()</h3>\n<p>When the <code>Array()</code> constructor function is invoked with one numeric argument, it uses that argument as an array length. But when invoked with more than one numeric argument, it treats those arguments as elements for the array to be created. This means that the <code>Array()</code> constructor cannot be used to create an array with a single numeric element.</p>\n<p><code>Array.of()</code></p>\n<p>[]</p>\n<p><code>Array.of(10)</code></p>\n<p>[10]</p>\n<p><code>Array.of(1,2,3)</code></p>\n<p>[1, 2, 3]</p>\n<h3>Array.from()</h3>\n<p>It is also a simple way to make a copy of an array:</p>\n<p><code>let copy = Array.from(original);</code></p>\n<p><code>Array.from()</code> is also important because it defines a way to make a true-array copy of an array-like object. Array-like objects are non-array objects that have a numeric length property and have values stored with properties whose names happen to be integers.</p>\n<p><code>let truearray = Array.from(arraylike);</code></p>\n<p><code>Array.from()</code> also accepts an optional second argument. If you pass a function as the second argument, then as the new array is being built, each element from the source object will be passed to the function you specify, and the return value of the function will be stored in the array instead of the original value.</p>\n<h3>Reading and Writing Array Elements</h3>\n<p>What is special about arrays is that when you use property names that are non-negative integers , the array automatically maintains the value of the <code>length</code> property for you.</p>\n<p>JavaScript converts the numeric array index you specify to a string — the index 1 becomes the string “1”, then uses that string as a property name.</p>\n<p>It is helpful to clearly distinguish an array index from an object property name. All indexes are property names, but only property names that are integers between 0 and 231 are indexes. All arrays are objects, and you can create properties of any name on them. If you use properties that are array indexes, however, arrays have the special behavior of updating their <code>length</code> property as needed.</p>\n<p>Note that you can index an array using numbers that are negative or that are not integers. When you do this, the number is converted to a string, and that string is used as the property name. Since the name is not a non-negative integer, it is treated as a regular object property, not an array index.</p>\n<p><code>a[-1.23] = true;</code></p>\n<p>This creates a property named “-1.23”</p>\n<p><code>a[\"1000\"] = 0;</code></p>\n<p>This the 1001st element of the array</p>\n<p><code>a[1.000] = 1;</code></p>\n<p>Array index 1. Same as a[1] = 1;</p>\n<p>The fact that array indexes are simply a special type of object property name means that JavaScript arrays have no notion of an “out of bounds” error. When you try to query a nonexistent property of any object, you don’t get an error; you simply get <code>undefined</code>.</p>\n<h3>Sparse Arrays</h3>\n<p>Sparse arrays can be created with the <code>Array()</code> constructor or simply by assigning to an array index larger than the current array length.</p>\n<p><code>a[1000] = 0;</code></p>\n<p>Assignment adds one element but sets length to 1001.</p>\n<p>you can also make an array sparse with the <code>delete</code> operator.</p>\n<p>Note that when you omit a value in an array literal (using repeated commas as in <code>[1,,3]</code>), the resulting array is sparse, and the omitted elements simply do not exist</p>\n<h3>Array Length</h3>\n<p>if you set the length property to a nonnegative integer <code>n</code> smaller than its current value, any array elements whose index is greater than or equal to n are deleted from the array.</p>\n<p><code>a = [1,2,3,4,5];</code></p>\n<p><code>a.length = 3;</code></p>\n<p>a is now [1,2,3].</p>\n<p><code>a.length = 0;</code></p>\n<p>Delete all elements. a is [].</p>\n<p><code>a.length = 5;</code></p>\n<p>Length is 5, but no elements, like <code>new Array(5)</code></p>\n<p>You can also set the length property of an array to a value larger than its current value. Doing this does not actually add any new elements to the array; it simply creates a sparse area at the end of the array.</p>\n<h3>Adding and Deleting Array Elements</h3>\n<p><code>let a = [];</code></p>\n<p><code>a[0] = \"zero\";</code></p>\n<p><code>a[1] = \"one\";</code></p>\n<p>add elements to it.</p>\n<p>You can also use the <code>push()</code> method to add one or more values to the end of an array.</p>\n<p>You can use the<code>unshift()</code> method to insert a value at the beginning of an array, shifting the existing array elements to higher indexes.</p>\n<p>The <code>pop()</code> method is the opposite of <code>push()</code>: it removes the last element of the array and returns it, reducing the length of an array by 1.</p>\n<p>Similarly, the <code>shift()</code> method removes and returns the first element of the array, reducing the length by 1 and shifting all elements down to an index one lower than their current index.</p>\n<p>You can delete array elements with the delete operator</p>\n<p><code>let a = [1,2,3];</code></p>\n<p><code>delete a[2];</code></p>\n<p>a now has no element at index 2</p>\n<p><code>2 in a</code></p>\n<p>false</p>\n<p><code>a.length</code></p>\n<p>3: delete does not affect array length</p>\n<h3>Iterating Arrays</h3>\n<p>The easiest way to loop through each of the elements of an array (or any iterable object) is with the <code>for/of</code>loop</p>\n<pre><code>let letters = [...\"Hello world\"];\n\nlet string = \"\";\n\nfor(let letter of letters) {\n\nstring += letter;\n\n}\n</code></pre>\n<p>It has no special behavior for sparse arrays and simply returns <code>undefined</code> for any array elements that do not exist.</p>\n<p>If you want to use a <code>for/of</code> loop for an array and need to know the index of each array element, use the <code>entries()</code> method of the array</p>\n<pre><code>let letters = [...\"Hello world\"];\n\nlet everyother = \"\";\n\nfor(let [index, letter] of letters.entries()) {\n\nif (index % 2 === 0) everyother += letter;\n\n}\n</code></pre>\n<p>Another good way to iterate arrays is with <code>forEach()</code>. This is not a new form of the for loop, but an array method that offers a functional approach to array iteration.</p>\n<pre><code>let letters = [...\"Hello world\"];\n\nlet uppercase = \"\";\n\nletters.forEach(letter => {\n\nuppercase += letter.toUpperCase();\n\n});\n</code></pre>\n<p>You can also loop through the elements of an array with a <code>for</code> loop.</p>\n<pre><code>for(let i = 0, len = letters.length; i &#x3C; len; i++) {\n\n// loop body\n\n}\n</code></pre>\n<h3>Multidimensional Arrays</h3>\n<h3>Create a multidimensional array</h3>\n<p><code>let table = new Array(10);</code></p>\n<pre><code>for(let i = 0; i &#x3C; table.length; i++) {\n\ntable[i] = new Array(10);\n\n}\n\nfor(let row = 0; row &#x3C; table.length; row++) {\n\nfor(let col = 0; col &#x3C; table[row].length; col++) {\n\ntable[row][col] = row * col;\n\n}\n\n}\n</code></pre>\n<h3>Array Methods</h3>\n<h3>Array Iterator Methods</h3>\n<p>First, all of these methods accept a function as their first argument and invoke that function once for each element (or some elements) of the array. If the array is sparse, the function you pass is not invoked for nonexistent elements. In most cases, the function you supply is invoked with three arguments: the value of the array element, the index of the array element, and the array itself.</p>\n<p>FOREACH()</p>\n<p><code>let data = [1,2,3,4,5], sum = 0;</code></p>\n<pre><code>data.forEach(value => { sum += value; });\n\ndata.forEach(function(v, i, a) {\n\na[i] = v + 1;\n\n});\n</code></pre>\n<p>15</p>\n<p>[2,3,4,5,6]</p>\n<p>MAP()</p>\n<p><code>let a = [1, 2, 3];</code><br>\n<code>a.map(x => x*x)</code></p>\n<p>[1, 4, 9]</p>\n<p>FILTER()</p>\n<p><code>let a = [5, 4, 3, 2, 1];</code><br>\n<code>a.filter(x => x &#x3C; 3)</code><br>\n<code>a.filter((x,i) => i % 2 === 0)</code></p>\n<p>[2, 1];</p>\n<p>[5, 3, 1];</p>\n<p>FIND()</p>\n<p>FINDINDEX()</p>\n<p><code>let a = [1,2,3,4,5];</code></p>\n<p><code>a.findIndex(x => x === 3)</code></p>\n<p><code>a.find(x => x % 5 === 0)</code></p>\n<p><code>a.find(x => x % 7 === 0)</code></p>\n<p>2</p>\n<p>5</p>\n<p>undefined</p>\n<p>EVERY()</p>\n<p>SOME()</p>\n<p><code>let a = [1,2,3,4,5];</code></p>\n<p><code>a.every(x => x &#x3C; 10)</code></p>\n<p><code>a.some(x => x % 2 === 0)</code></p>\n<p><code>a.some(isNaN)</code></p>\n<p>true</p>\n<p>true</p>\n<p>false</p>\n<p>REDUCE()</p>\n<p>ReduceRight()</p>\n<p>l<code>et a = [1,2,3,4,5];</code></p>\n<p><code>a.reduce((x,y) => x+y, 0)</code></p>\n<p><code>a.reduce((x,y) => x*y, 1)</code></p>\n<p><code>a.reduce((x,y) => (x > y) ? x : y)</code></p>\n<p>15</p>\n<p>120</p>\n<p>5</p>\n<p>Note that <code>map()</code> returns a new array: it does not modify the array it is invoked on. If that array is sparse, your function will not be called for the missing elements, but the returned array will be sparse in the same way as the original array: it will have the same length and the same missing elements.</p>\n<p>To close the gaps in a sparse array, you can do this:</p>\n<p><code>let dense = sparse.filter(() => true);</code></p>\n<p>And to close gaps and remove undefined and null elements, you can use filter, like this:</p>\n<p><code>a = a.filter(x => x !== undefined &#x26;&#x26; x !== null);</code></p>\n<p>Unlike <code>filter()</code>, however,<code>find()</code> and <code>findIndex()</code> stop iterating the first time the predicate finds an element. When that happens, <code>find()</code> returns the matching element, and <code>findIndex()</code> returns the index of the matching element. If no matching element is found,<code>find()</code> returns <code>undefined</code> and<code>findIndex()</code>returns -1.</p>\n<p>When you invoke <code>reduce()</code> with no initial value, it uses the first element of the array as the initial value.</p>\n<p><code>reduceRight()</code> works just like <code>reduce()</code>, except that it processes the array from highest index to lowest (right-to-left), rather than from lowest to highest. You might want to do this if the reduction operation has right-to-left associativity</p>\n<h3>Flattening arrays with <code>flat()</code> and <code>flatMap()</code></h3>\n<p><code>[1, [2, 3]].flat()</code></p>\n<p>[1, 2, 3]</p>\n<p><code>[1, [2, [3]]].flat()</code></p>\n<p>[1, 2, [3]]</p>\n<p><code>let a = [1, [2, [3, [4]]]];</code></p>\n<p><code>a.flat(1)</code></p>\n<p><code>a.flat(2)</code></p>\n<p><code>a.flat(3)</code></p>\n<p><code>a.flat(4)</code></p>\n<p>[1, 2, [3, [4]]]</p>\n<p>[1, 2, 3, [4]]</p>\n<p>[1, 2, 3, 4]</p>\n<p>[1, 2, 3, 4]</p>\n<p><code>let phrases = [\"hello world\", \"the definitive guide\"];</code><br>\n<code>let words = phrases.flatMap(phrase => phrase.split(\" \"));</code></p>\n<p>[“hello”, “world”, “the”, “definitive”, “guide”];</p>\n<p>Calling <code>a.flatMap(f)</code> is the same as (but more efficient than) <code>a.map(f).flat()</code>:</p>\n<h3>Adding arrays with concat()</h3>\n<p><code>let a = [1,2,3];</code></p>\n<p><code>a.concat(4, 5)</code></p>\n<p>[1,2,3,4,5]</p>\n<p><code>a.concat([4,5],[6,7])</code></p>\n<p>[1,2,3,4,5,6,7]</p>\n<h3>Stacks and Queues with push(), pop(), shift(), and unshift()</h3>\n<p>The <code>push()</code> and<code>pop()</code> methods allow you to work with arrays as if they were stacks. The <code>push()</code> method appends one or more new elements to the end of an array and returns the new length of the array.</p>\n<p>The <code>unshift()</code> and <code>shift()</code> methods behave much like <code>push()</code> and<code>pop()</code>, except that they insert and remove elements from the beginning of an array rather than from the end.</p>\n<p>You can implement a queue data structure by using <code>push()</code> to add elements at the end of an array and <code>shift()</code> to remove them from the start of the array. Note differences in <code>unshift</code>with single and multiple values.</p>\n<p><code>let a = [];</code></p>\n<p><code>a.unshift(1)</code></p>\n<p>[1]</p>\n<p><code>a.unshift(2)</code></p>\n<p>[2, 1]</p>\n<p><code>a = [];</code></p>\n<p><code>a.unshift(1,2)</code></p>\n<p>[1, 2]</p>\n<h3>Subarrays with <code>slice(), splice(), fill()</code>, and <code>copyWithin()</code></h3>\n<p>SLICE()</p>\n<p><code>let a = [1,2,3,4,5];</code></p>\n<p><code>a.slice(0,3);</code></p>\n<p><code>a.slice(3);</code></p>\n<p><code>a.slice(1,-1);</code></p>\n<p><code>a.slice(-3,-2);</code></p>\n<p>[1,2,3]</p>\n<p>[4,5]</p>\n<p>[2,3,4]</p>\n<p>[3]</p>\n<p>SPLICE</p>\n<p><code>let a = [1,2,3,4,5,6,7,8];</code></p>\n<p><code>a.splice(4)</code></p>\n<p><code>a.splice(1,2)</code></p>\n<p><code>a.splice(1,1)</code></p>\n<p><code>let a = [1,2,3,4,5];</code></p>\n<p><code>a.splice(2,0,\"a\",\"b\")</code></p>\n<p><code>a.splice(2,2,[1,2],3)</code></p>\n<p>[5,6,7,8]; <code>a</code> is now [1,2,3,4]</p>\n<p>[2,3]; a is now [1,4]</p>\n<p>[4]; a is now [1]</p>\n<p>[]; a is now [1,2,”a”,”b”,3,4,5]</p>\n<p>[“a”,”b”]; a is now [1,2,[1,2],3,3,4,5]</p>\n<p>FILL()</p>\n<p><code>let a = new Array(5);</code></p>\n<p><code>a.fill(0)</code></p>\n<p><code>a.fill(9, 1)</code></p>\n<p><code>a.fill(8, 2, -1)</code></p>\n<p>[0,0,0,0,0]</p>\n<p>[0,9,9,9,9]</p>\n<p>[0,9,8,8,9]</p>\n<p>COPYWITHIN()</p>\n<p><code>let a = [1,2,3,4,5];</code></p>\n<p><code>a.copyWithin(1)</code></p>\n<p><code>a.copyWithin(2, 3, 5)</code></p>\n<p><code>a.copyWithin(0, -2)</code></p>\n<p>[1,1,2,3,4]</p>\n<p>[1,1,3,4,4]</p>\n<p>[4,4,3,4,4]</p>\n<p><code>splice()</code> is a general-purpose method for inserting or removing elements from an array.<code>splice()</code> can delete elements from an array, insert new elements into an array, or perform both operations at the same time.</p>\n<p>The first argument to <code>splice()</code> specifies the array position at which the insertion and/or deletion is to begin. The second argument specifies the number of elements that should be deleted from (spliced out of) the array.</p>\n<p>Unlike <code>concat(), splice()</code> inserts arrays themselves, not the elements of those arrays.</p>\n<p><code>copyWithin()</code> copies a slice of an array to a new position within the array. It modifies the array in place and returns the modified array, but it will not change the length of the array.</p>\n<h3>Array Searching and Sorting Methods</h3>\n<p>INDEXOF()<br>\nLASTINDEXOF()</p>\n<p><code>let a = [0,1,2,1,0];</code></p>\n<p><code>a.indexOf(1)</code></p>\n<p><code>a.lastIndexOf(1)</code></p>\n<p><code>a.indexOf(3)</code></p>\n<p>1</p>\n<p>3</p>\n<p>-1</p>\n<p>SORT()</p>\n<p><code>let a = [33, 4, 1111, 222];</code></p>\n<p><code>a.sort();</code></p>\n<p><code>a.sort((a,b) => a - b);</code></p>\n<p>Case-insensitive sort</p>\n<pre><code>let a = [\"ant\", \"Bug\", \"cat\", \"Dog\"];\n\na.sort(); // a == [\"Bug\",\"Dog\",\"ant\",\"cat\"];\n\na.sort(function(s,t) {\n\nlet a = s.toLowerCase();\n\nlet b = t.toLowerCase();\n\nif (a &#x3C; b) return -1;\n\nif (a > b) return 1;\n\nreturn 0;\n\n});\n</code></pre>\n<p><code>[1111, 222, 33, 4];</code></p>\n<p><code>[4, 33, 222, 1111]</code></p>\n<p>REVERSE()</p>\n<p><code>let a = [1,2,3];</code><br>\n<code>a.reverse();</code></p>\n<p>[3,2,1]</p>\n<p><code>indexOf()</code> and <code>lastIndexOf()</code> compare their argument to the array elements using the equivalent of the === operator. If your array contains objects instead of primitive values, these methods check to see if two references both refer to exactly the same object. If you want to actually look at the content of an object, try using the <code>find()</code> method with your own custom predicate function instead.</p>\n<p><code>indexOf()</code> and <code>lastIndexOf()</code> take an optional second argument that specifies the array index at which to begin the search. Negative values are allowed for the second argument and are treated as an offset from the end of the array.</p>\n<p><code>indexOf()</code> will not detect the NaN value in an array, but <code>includes()</code> will</p>\n<p>When <code>sort()</code> is called with no arguments, it sorts the array elements in alphabetical order. To sort an array into some order other than alphabetical, you must pass a comparison function as an argument to <code>sort()</code>.</p>\n<h3>Array to String Conversions</h3>\n<p>The <code>join()</code> method converts all the elements of an array to strings and concatenates them, returning the resulting string.</p>\n<p><code>let a = [1, 2, 3];</code></p>\n<p><code>a.join()</code></p>\n<p><code>a.join(\" \")</code></p>\n<p><code>a.join(\"\")</code></p>\n<p>“1,2,3”</p>\n<p>“1 2 3”</p>\n<p>“123”</p>\n<p><code>let b = new Array(10);</code></p>\n<p><code>b.join(\"-\")</code></p>\n<p>“ — — — — -”</p>\n<p>Arrays, like all JavaScript objects, have a <code>toString()</code> method. For an array, this method works just like the <code>join()</code> method with no arguments:</p>\n<p><code>[1,2,3].toString()</code></p>\n<p>“1,2,3”</p>\n<p><code>[\"a\", \"b\", \"c\"].toString()</code></p>\n<p>“a,b,c”</p>\n<p><code>[1, [2,\"c\"]].toString()</code></p>\n<p>“1,2,c”</p>\n<h3>Static Array Functions</h3>\n<p><code>Array.isArray([])</code></p>\n<p>true</p>\n<p><code>Array.isArray({})</code></p>\n<p>false</p>\n<h3>Array-Like Objects</h3>\n<p>It is often perfectly reasonable to treat any object with a numeric <code>length</code> property and corresponding non-negative integer properties as a kind of array.</p>\n<pre><code>let a = {};\n\nlet i = 0;\n\nwhile(i &#x3C; 10) {\n\na[i] = i * i;\n\ni++;\n\n}\n\na.length = i;\n\n// Now iterate through it as if it were a real array\n\nlet total = 0;\n\nfor(let j = 0; j &#x3C; a.length; j++) {\n\ntotal += a[j];\n\n}\n</code></pre>\n<p>Since array-like objects do not inherit from <code>Array.prototype</code>, you cannot invoke array methods on them directly. You can invoke them indirectly using the <code>Function.call</code> method.</p>\n<p><code>let a = {\"0\": \"a\", \"1\": \"b\", \"2\": \"c\", length: 3};</code></p>\n<p>// An array-like object</p>\n<p><code>Array.prototype.join.call(a, \"+\")</code></p>\n<p>“a+b+c”</p>\n<p><code>Array.prototype.join.call(\"JavaScript\", \" \")</code></p>\n<p>“J a v a S c r i p t”</p>\n<p><code>Array.prototype.map.call(a, x => x.toUpperCase())</code></p>\n<p>[“A”,”B”,”C”]</p>\n<p><code>Array.from(a)</code></p>\n<p>[“a”,”b”,”c”]</p>\n<h3>Strings as Arrays</h3>\n<p><code>let s = \"test\";</code></p>\n<p><code>s.charAt(0)</code></p>\n<p>t</p>\n<p><code>s[1]</code></p>\n<p>e</p>\n<h3>Functions</h3>\n<p>In addition to the arguments, each invocation has another value — the invocation context — that is the value of the <code>this</code> keyword.</p>\n<h3>Function Declarations</h3>\n<pre><code>function printprops(o) {\n\nfor(let p in o) {\n\nconsole.log(`${p}: ${o[p]}\\n`);\n\n}\n\n}\n</code></pre>\n<p>Function declaration statements are “hoisted” to the top of the enclosing script, function, or block so that functions defined in this way may be invoked from code that appears before the definition.</p>\n<h3>Function Expressions</h3>\n<p><code>const square = function(x) { return x*x; };</code></p>\n<pre><code>const f = function fact(x) {\n\nif (x &#x3C;= 1) return 1;\n\nreturn x * fact(x-1);\n\n}\n</code></pre>\n<p>Function expressions can include names, which is useful for recursion</p>\n<p><code>[3,2,1].sort(function(a,b) { return a - b; });</code></p>\n<p>Function expressions can also be used as arguments to other functions</p>\n<p><code>let tensquared = (function(x) {return x*x;}(10));</code></p>\n<p>Function expressions are sometimes defined and immediately invoked</p>\n<h3>Arrow Functions</h3>\n<p><code>const sum = (x, y) => { return x + y; };</code></p>\n<p><code>const sum = (x, y) => x + y;</code></p>\n<p>no need for <code>return</code></p>\n<p><code>const polynomial = x => x*x + 2*x + 3;</code></p>\n<p>omit parens with single parameter</p>\n<p><code>const constantFunc = () => 42;</code></p>\n<p>usage for no params</p>\n<p>If the body of your arrow function is a single return statement but the expression to be returned is an object literal, then you have to put the object literal inside parentheses to avoid syntactic ambiguity between the curly braces of a function body and the curly braces of an object literal</p>\n<p><code>const f = x => { return { value: x }; };</code></p>\n<p>good</p>\n<p><code>const g = x => ({ value: x });</code></p>\n<p>good</p>\n<p><code>const h = x => { value: x };</code></p>\n<p>returns nothing</p>\n<p><code>const i = x => { v: x, w: x };</code></p>\n<p>syntax error</p>\n<p>Arrow functions differ from functions defined in other ways in one critical way: they inherit the value of the <code>this</code> keyword from the environment in which they are defined rather than defining their own invocation context as functions defined in other ways do.</p>\n<h3>Nested Functions</h3>\n<pre><code>function hypotenuse(a, b) {\n\nfunction square(x) { return x*x; }\n\nreturn Math.sqrt(square(a) + square(b));\n\n}\n</code></pre>\n<h3>Invoking Functions</h3>\n<p>For function invocation in non-strict mode, the invocation context (the <code>this</code> value) is the global object. In strict mode, however, the invocation context is <code>undefined</code>.</p>\n<p><code>const strict = (function() { return !this; }())</code></p>\n<p>Determine if we’re in strict mode</p>\n<h3>Constructor Invocation</h3>\n<p>A constructor invocation creates a new, empty object that inherits from the object specified by the <code>prototype</code>property of the constructor.</p>\n<h3>Indirect invocation</h3>\n<p>JavaScript functions are objects, and like all JavaScript objects, they have methods. Two of these methods, <code>call()</code> and <code>apply()</code>, invoke the function indirectly. Both methods allow you to explicitly specify the <code>this</code>value for the invocation, which means you can invoke any function as a method of any object, even if it is not actually a method of that object.</p>\n<h3>Function Arguments and Parameters</h3>\n<h3>Optional Parameters and Defaults</h3>\n<p>When a function is invoked with fewer arguments than declared parameters, the additional parameters are set to their default value, which is normally <code>undefined</code>.</p>\n<pre><code>function getPropertyNames(o, a) {\n\na = a || [];\n\nfor(let property in o) a.push(property);\n\nreturn a;\n\n}\n\nfunction getPropertyNames(o, a = []) {\n\nfor(let property in o) a.push(property);\n\nreturn a;\n\n}\n</code></pre>\n<p>One interesting case is that, for functions with multiple parameters, you can use the value of a previous parameter to define the default value of the parameters that follow it</p>\n<pre><code>const rectangle = (width, height = width*2) => ({width, height});\n</code></pre>\n<h3>Rest Parameters and Variable-Length Argument Lists</h3>\n<p>Rest parameters enable us to write functions that can be invoked with arbitrarily more arguments than parameters.</p>\n<pre><code>function max(first=-Infinity, ...rest) {\n\nlet maxValue = first;\n\nfor(let n of rest) {\n\nif (n > maxValue) {\n\nmaxValue = n;\n\n}\n\n}\n\nreturn maxValue;\n\n}\n\nmax(1, 10, 100, 2, 3, 1000, 4, 5, 6)\n</code></pre>\n<p>1000</p>\n<p>within the body of a function, the value of a rest parameter will always be an array. The array may be empty, but a rest parameter will never be <code>undefined</code>.</p>\n<p>This type of function is called variadic functions, variable arity functions, or vararg functions.</p>\n<h3>The Arguments Object</h3>\n<p>Within the body of any function, the identifier <code>arguments</code> refers to the Arguments object for that invocation.</p>\n<pre><code>function max(x) {\n\nlet maxValue = -Infinity;\n\nfor(let i = 0; i &#x3C; arguments.length; i++) {\n\nif (arguments[i] > maxValue)\n\nmaxValue = arguments[i];\n\n}\n\nreturn maxValue;\n\n}\n\nmax(1, 10, 100, 2, 3, 1000, 4, 5, 6)\n</code></pre>\n<p>1000</p>\n<p>you should avoid using it in any new code you write.</p>\n<h3>The Spread Operator for Function Calls</h3>\n<pre><code>let numbers = [5, 2, 10, -1, 9, 100, 1];\n\nMath.min(...numbers)\n</code></pre>\n<p>-1</p>\n<pre><code>function timed(f) {\n\nreturn function(...args) {\n\nconsole.log(`Entering function ${f.name}`);\n\nlet startTime = Date.now();\n\ntry {\n\nreturn f(...args);\n\n}\n\nfinally {\n\nconsole.log(`Exiting ${f.name} after ${Date.now() - startTime}ms`);\n\n}\n\n};\n\n}\n\n// Compute the sum of the numbers between 1 and n by brute force\n\nfunction benchmark(n) {\n\nlet sum = 0;\n\nfor(let i = 1; i &#x3C;= n; i++) sum += i;\n\nreturn sum;\n\n}\n\n// Now invoke the timed version of that test function\n\ntimed(benchmark)(1000000)\n</code></pre>\n<h3>Destructuring Function Arguments into Parameters</h3>\n<pre><code>function vectorAdd(v1, v2) {\n\nreturn [v1[0] + v2[0], v1[1] + v2[1]];\n\n}\n\nvectorAdd([1,2], [3,4])\n</code></pre>\n<p>←></p>\n<pre><code>function vectorAdd([x1,y1], [x2,y2]) {\n\nreturn [x1 + x2, y1 + y2];\n\n}\n\nvectorAdd([1,2], [3,4])\n\nfunction vectorMultiply({x, y}, scalar) {\n\nreturn { x: x*scalar, y: y*scalar };\n\n}\n\nvectorMultiply({x: 1, y: 2}, 2)\n</code></pre>\n<p>←></p>\n<pre><code>function vectorMultiply({x,y}, scalar) {\n\nreturn { x: x*scalar, y: y*scalar};\n\n}\n\nvectorMultiply({x: 1, y: 2}, 2)\n</code></pre>\n<h3>Argument Types</h3>\n<p>Adding code to check the types of arguments</p>\n<pre><code>function sum(a) {\n\nlet total = 0;\n\nfor(let element of a) {\n\nif (typeof element !== \"number\") {\n\nthrow new TypeError(\"sum(): elements must be numbers\");\n\n}\n\ntotal += element;\n\n}\n\nreturn total;\n\n}\n</code></pre>\n<p><code>sum([1,2,3])</code></p>\n<p>6</p>\n<p><code>sum(1, 2, 3);</code></p>\n<p><code>TypeError</code>: 1 is not iterable</p>\n<p><code>sum([1,2,\"3\"]);</code></p>\n<p><code>TypeError</code>: element 2 is not a number</p>\n<h3>Functions as Values</h3>\n<pre><code>function square(x) { return x * x; }\n</code></pre>\n<p><code>let s = square;</code></p>\n<p><code>square(4)</code></p>\n<p>16</p>\n<p><code>s(4)</code></p>\n<p>16</p>\n<p>Functions can also be assigned to object properties rather than variables.</p>\n<p><code>let o = {square: function(x) { return x*x; }};</code></p>\n<p><code>let y = o.square(16);</code></p>\n<p>256</p>\n<p>Functions don’t even require names at all, as when they’re assigned to array elements:</p>\n<p><code>let a = [x => x*x, 20];</code></p>\n<p><code>a[0](a[1])</code></p>\n<p>400</p>\n<p><code>a[0]</code> accesses first element of the array, which is \"<code>x => x*x</code>\", <code>(a[1])</code> passes parameter, which is 20.</p>\n<h3>Examples of using functions as data</h3>\n<pre><code>function add(x,y) { return x + y; }\n\nfunction subtract(x,y) { return x - y; }\n\nfunction multiply(x,y) { return x * y; }\n\nfunction divide(x,y) { return x / y; }\n\nfunction operate(operator, operand1, operand2) {\n\nreturn operator(operand1, operand2);\n\n}\n</code></pre>\n<p><code>let i = operate(add, operate(add, 2, 3), operate(multiply, 4,5));</code></p>\n<p><code>(2+3) + (4*5):</code></p>\n<p>or:</p>\n<pre><code>const operators = {\n\nadd: (x,y) => x+y,\n\nsubtract: (x,y) => x-y,\n\nmultiply: (x,y) => x*y,\n\ndivide: (x,y) => x/y,\n\npow: Math.pow\n\n};\n\nfunction operate2(operation, operand1, operand2) {\n\nif (typeof operators[operation] === \"function\") {\n\nreturn operators[operation](operand1, operand2);\n\n}\n\nelse throw \"unknown operator\";\n\n}\n</code></pre>\n<p><code>operate2(\"add\", \"hello\", operate2(\"add\", \" \", \"world\"))</code></p>\n<p>// “hello world”</p>\n<p><code>operate2(\"pow\", 10, 2)</code></p>\n<p>100</p>\n<h3>Defining Your Own Function Properties</h3>\n<p>When a function needs a “static” variable whose value persists across invocations, it is often convenient to use a property of the function itself.</p>\n<p>For example, suppose you want to write a function that returns a unique integer whenever it is invoked. The function must never return the same value twice. In order to manage this, the function needs to keep track of the values it has already returned, and this information must persist across function invocations.</p>\n<pre><code>uniqueInteger.counter = 0;\n\nfunction uniqueInteger() {\n\nreturn uniqueInteger.counter++;\n\n}\n\nuniqueInteger()\n</code></pre>\n<p>0</p>\n<pre><code>uniqueInteger()\n</code></pre>\n<p>1</p>\n<p>Compute factorials and cache results as properties of the function itself.</p>\n<pre><code>function factorial(n) {\n\nif (Number.isInteger(n) &#x26;&#x26; n > 0) {\n\nif (!(n in factorial)) {\n\nfactorial[n] = n * factorial(n-1);\n\n}\n\nreturn factorial[n];\n\n}\n\nelse {\n\nreturn NaN;\n\n}\n\n}\n\nfactorial[1] = 1;\n</code></pre>\n<p>Initialize the cache to hold this base case.</p>\n<pre><code>factorial(6)\n</code></pre>\n<p>720</p>\n<pre><code>factorial[5]\n</code></pre>\n<p>120; the call above caches this value</p>\n<h3>Functions as Namespaces</h3>\n<p>Variables declared within a function are not visible outside of the function. For this reason, it is sometimes useful to define a function simply to act as a temporary namespace in which you can define variables without cluttering the global namespace.</p>\n<p>Variables that would have been global become local to the function. Following code defines only a single global variable: the function name <code>chunkNamespace</code>.</p>\n<pre><code>function chunkNamespace() {\n\n// Chunk of code goes here\n\n// Any variables defined in the chunk are local to this function\n\n// instead of cluttering up the global namespace.\n\n}\n\nchunkNamespace();\n</code></pre>\n<p>If defining even a single property is too much, you can define and invoke an anonymous function in a single expression — IIEF (immediately invoked function expression)</p>\n<pre><code>(function() {\n\n// chunkNamespace() function rewritten as an unnamed expression.\n\n// Chunk of code goes here\n\n}());\n</code></pre>\n<h3>Closures</h3>\n<p>JavaScript uses lexical scoping. This means that functions are executed using the variable scope that was in effect when they were defined, not the variable scope that is in effect when they are invoked.</p>\n<p>In order to implement lexical scoping, the internal state of a JavaScript function object must include not only the code of the function but also a reference to the scope in which the function definition appears.</p>\n<p>This combination of a function object and a scope (a set of variable bindings) in which the function’s variables are resolved is called a closure.</p>\n<p>Closures become interesting when they are invoked from a different scope than the one they were defined in. This happens most commonly when a nested function object is returned from the function within which it was defined.</p>\n<pre><code>let scope = \"global scope\";\n\nfunction checkscope() {\n\nlet scope = \"local scope\";\n\nfunction f() { return scope; }\n\nreturn f();\n\n}\n</code></pre>\n<p><code>checkscope()</code></p>\n<p>“local scope”</p>\n<pre><code>let scope = \"global scope\";\n\nfunction checkscope() {\n\nlet scope = \"local scope\";\n\nfunction f() { return scope; }\n\nreturn f;\n\n}\n</code></pre>\n<p><code>let s = checkscope()();</code></p>\n<p>“local scope”</p>\n<p>Closures capture the local variables of a single function invocation and can use those variables as private state.</p>\n<pre><code>let uniqueInteger = (function() {\n\nlet counter = 0;\n\nreturn function() { return counter++; };\n\n}());\n</code></pre>\n<p><code>uniqueInteger()</code></p>\n<p>0</p>\n<p><code>uniqueInteger()</code></p>\n<p>1</p>\n<p>it is the return value of the function that is being assigned to <code>uniqueInteger</code>.</p>\n<p>Private variables like counter need not be exclusive to a single closure: it is perfectly possible for two or more nested functions to be defined within the same outer function and share the same scope.</p>\n<pre><code>function counter() {\n\nlet n = 0;\n\nreturn {\n\ncount: function() { return n++; },\n\nreset: function() { n = 0; }\n\n};\n\n}\n</code></pre>\n<p><code>let c = counter(), d = counter();</code></p>\n<p><code>c.count()</code></p>\n<p>0</p>\n<p><code>d.count()</code></p>\n<p>0</p>\n<p><code>c.reset();</code></p>\n<p><code>c.count()</code></p>\n<p>0</p>\n<p><code>d.count()</code></p>\n<p>1</p>\n<p>You can combine this closure technique with property getters and setters</p>\n<pre><code>function counter(n) {\n\nreturn {\n\nget count() { return n++; },\n\nset count(m) {\n\nif (m > n) n = m;\n\nelse throw Error(\"count can only be set to a larger value\")\n\n}\n\n};\n\n}\n</code></pre>\n<p><code>let c = counter(1000);</code></p>\n<p><code>c.count</code></p>\n<p>1000</p>\n<p><code>c.count</code></p>\n<p>1001</p>\n<p><code>c.count = 2000;</code></p>\n<p><code>c.count</code></p>\n<p>2000</p>\n<p><code>c.count = 2000;</code></p>\n<p>Error: count can only be set to a larger value</p>\n<p>Define a private variable and two nested functions to get and set the value of that variable.</p>\n<pre><code>function addPrivateProperty(o, name, predicate) {\n\nlet value;\n\no[`get${name}`] = function() { return value; };\n\no[`set${name}`] = function(v) {\n\nif (predicate &#x26;&#x26; !predicate(v)) {\n\nthrow new TypeError(`set${name}: invalid value ${v}`);\n\n}\n\nelse {\n\nvalue = v;\n\n}\n\n};\n\n}\n</code></pre>\n<p><code>let o = {};</code></p>\n<p><code>addPrivateProperty(o, \"Name\", x => typeof x === \"string\");</code></p>\n<p><code>o.setName(\"Frank\");</code></p>\n<p><code>o.getName()</code></p>\n<p>“Frank”</p>\n<p><code>o.setName(0);</code></p>\n<p>TypeError: try to set a value ofthe wrong type</p>\n<h3>Function Properties, Methods, and Constructor</h3>\n<p>Since functions are objects, they can have properties and methods, just like any other object.</p>\n<h3>The length Property</h3>\n<p>The read-only length property of a function specifies the arity of the function — the number of parameters it declares in its parameter list, which is usually the number of arguments that the function expects.</p>\n<h3>The name Property</h3>\n<p>This property is primarily useful when writing debugging or error messages.</p>\n<h3>The prototype Property</h3>\n<p>When a function is used as a constructor, the newly created object inherits properties from the prototype object.</p>\n<h3>The call() and apply() Methods</h3>\n<p><code>call()</code> and <code>apply()</code> allow you to indirectly invoke a function as if it were a method of some other object. The first argument to both <code>call()</code> and <code>apply()</code> is the object on which the function is to be invoked; this argument is the invocation context and becomes the value of the <code>this</code> keyword within the body of the function.</p>\n<p>To invoke the function<code>f()</code> as a method of the object o (passing no arguments),</p>\n<p><code>f.call(o);</code></p>\n<p><code>f.apply(o);</code></p>\n<p>To pass two numbers to the function <code>f()</code> and invoke it as if it were a method of the object o,</p>\n<pre><code>f.call(o, 1, 2);\n</code></pre>\n<p>The <code>apply()</code> method is like the <code>call()</code> method, except that the arguments to be passed to the function are specified as an array:</p>\n<pre><code>f.apply(o, [1,2]);\n</code></pre>\n<p>The <code>trace()</code>function defined uses the <code>apply()</code>method instead of a spread operator, and by doing that, it is able to invoke the wrapped method with the same arguments and the same this value as the wrapper method</p>\n<pre><code>function trace(o, m) {\n\nlet original = o[m];\n\no[m] = function(...args) {\n\nconsole.log(new Date(), \"Entering:\", m);\n\nlet result = original.apply(this, args);\n\nconsole.log(new Date(), \"Exiting:\", m);\n\nreturn result;\n\n};\n\n}\n</code></pre>\n<h3>The bind() Method</h3>\n<p>The primary purpose of <code>bind()</code> is to bind a function to an object.</p>\n<p><code>function f(y) { return this.x + y; }</code></p>\n<p><code>let o = { x: 1 };</code></p>\n<p><code>let g = f.bind(o);</code></p>\n<p><code>g(2)</code></p>\n<p>3</p>\n<p><code>let p = { x: 10, g };</code></p>\n<p><code>p.g(2)</code></p>\n<p>3 // g is still bound to o, not p.</p>\n<p>The most common use case for calling <code>bind()</code> is to make non-arrow functions behave like arrow functions.</p>\n<p>Partial application is a common technique in functional programming and is sometimes called <code>currying</code>.</p>\n<p><code>let sum = (x,y) => x + y;</code></p>\n<p><code>let succ = sum.bind(null, 1);</code></p>\n<p><code>succ(2)</code></p>\n<p>3</p>\n<h3>The toString() Method</h3>\n<p>Most (but not all) implementations of this <code>toString()</code> method return the complete source code for the function</p>\n<h3>The Function() Constructor</h3>\n<p>The Function() constructor is best thought of as a globally scoped version of <code>eval()</code> that defines new variables and functions in its own private scope. You will probably never need to use this constructor in your code.</p>\n<h3>Higher-Order Functions</h3>\n<p>A higher-order function is a function that operates on functions, taking one or more functions as arguments and returning a new function.</p>\n<pre><code>function not(f) {\n\nreturn function(...args) {\n\nlet result = f.apply(this, args);\n\nreturn !result;\n\n};\n\n}\n</code></pre>\n<p><code>const even = x => x % 2 === 0;</code></p>\n<p>A function to determine if a number is even</p>\n<p><code>const odd = not(even);</code></p>\n<p><code>[1,1,3,5,5].every(odd)</code></p>\n<p>true</p>\n<p>Returns a new function that maps one array to another</p>\n<pre><code>const map = function(a, ...args) { return a.map(...args); };\n\nfunction mapper(f) {\n\nreturn a => map(a, f);\n\n}\n\nconst increment = x => x + 1;\n\nconst incrementAll = mapper(increment);\n\nincrementAll([1,2,3]\n</code></pre>\n<p>[2,3,4]</p>\n<p>Example that takes two functions, f and g, and returns a new function that computes f(g()):</p>\n<pre><code>function compose(f, g) {\n\nreturn function(...args) {\n\nreturn f.call(this, g.apply(this, args));\n\n};\n\n}\n</code></pre>\n<p><code>const sum = (x,y) => x+y;</code></p>\n<p><code>const square = x => x*x;</code></p>\n<p><code>compose(square, sum)(2,3)</code></p>\n<p>25</p>\n<h3>Memoization</h3>\n<p>We defined a factorial function that cached its previously computed results. In functional programming, this kind of caching is called memoization.</p>\n<h3>Classes</h3>\n<p>JavaScript’s classes and prototype-based inheritance mechanism are substantially different from the classes and class-based inheritance mechanism of Java.</p>\n<h3>Classes and Prototypes</h3>\n<p>If we define a prototype object and then use <code>Object.create()</code> to create objects that inherit from it, we have defined a JavaScript class.</p>\n<p>Factory function that returns a new range object:</p>\n<pre><code>function range(from, to) {\n\nlet r = Object.create(range.methods);\n\nr.from = from;\n\nr.to = to;\n\nreturn r;\n\n}\n\nrange.methods = {\n\nincludes(x) { return this.from &#x3C;= x &#x26;&#x26; x &#x3C;= this.to; },\n\n*[Symbol.iterator]() {\n\nfor(let x = Math.ceil(this.from); x &#x3C;= this.to; x++)\n\nyield x;\n\n},\n\ntoString() { return \"(\" + this.from + \"...\" + this.to +\")\"; }\n\n};\n</code></pre>\n<p><code>let r = range(1,3);</code></p>\n<p><code>r.includes(2)</code></p>\n<p>true</p>\n<p><code>r.toString()</code></p>\n<p>“(1…3)”</p>\n<p><code>[...r]</code></p>\n<p>[1, 2, 3]</p>\n<h3>Classes and Constructors</h3>\n<p>A constructor is a function designed for the initialization of newly created objects.</p>\n<p>The critical feature of constructor invocations is that the <code>prototype</code> property of the constructor is used as the prototype of the new object.</p>\n<p>While almost all objects have a prototype, only a few objects have a <code>prototype</code> property. It is function objects that have a <code>prototype</code> property.</p>\n<p>This means that all objects created with the same constructor function inherit from the same object and are therefore members of the same class.</p>\n<p>A Range class using a constructor</p>\n<pre><code>function Range(from, to) {\n\nthis.from = from;\n\nthis.to = to;\n\n}\n\nRange.prototype = {\n\nincludes: function(x) { return this.from &#x3C;= x &#x26;&#x26; x &#x3C;= this.to; },\n\n[Symbol.iterator]: function*() {\n\nfor(let x = Math.ceil(this.from); x &#x3C;= this.to; x++)\n\nyield x;\n\n},\n\ntoString: function() { return \"(\" + this.from + \"...\" + this.to + \")\"; }\n\n};\n</code></pre>\n<p><code>let r = new Range(1,3);</code></p>\n<p><code>r.includes(2)</code></p>\n<p>true</p>\n<p><code>r.toString()</code></p>\n<p>“(1…3)”</p>\n<p><code>[...r]</code></p>\n<p>[1, 2, 3]</p>\n<p>Because the <code>Range()</code>constructor is invoked with <code>new</code>, it does not have to call <code>Object.create()</code> or take any action to create a new object.</p>\n<p>In the first example, the prototype was <code>range.methods</code>. This was a convenient and descriptive name, but arbitrary. In the second example, the prototype is <code>Range.prototype</code>, and this name is mandatory.</p>\n<p>An invocation of the <code>Range()</code> constructor automatically uses <code>Range.prototype</code> as the prototype of the <code>new Range</code> object.</p>\n<h3>Constructors, Class Identity, and instanceof</h3>\n<p>Two objects are instances of the same class if and only if they inherit from the same prototype object.</p>\n<p>The <code>instanceof</code> operator is not checking whether <code>r</code> was actually initialized by the Range constructor. Instead, it is checking whether <code>r</code> inherits from <code>Range.prototype</code>.</p>\n<pre><code>function Strange() {}\n\nStrange.prototype = Range.prototype;\n\nnew Strange() instanceof Range\n</code></pre>\n<p>true</p>\n<p>If you want to test the prototype chain of an object for a specific prototype and do not want to use the constructor function as an intermediary, you can use the <code>isPrototypeOf()</code> method</p>\n<pre><code>range.methods.isPrototypeOf(r);\n</code></pre>\n<h3>The constructor Property</h3>\n<p>Every regular JavaScript function automatically has a <code>prototype</code> property. The value of this property is an object that has a single, non-enumerable <code>constructor</code> property.</p>\n<p>The value of the <code>constructor</code> property is the function object</p>\n<pre><code>let F = function() {};\n\nlet p = F.prototype;\n\nlet c = p.constructor;\n\nc === F\n</code></pre>\n<p>true</p>\n<p><code>let o = new F();</code></p>\n<p><code>o.constructor === F</code></p>\n<p>true</p>\n<p>Instances of the Range class, as defined, do not have a constructor property. We can remedy this problem by explicitly adding a constructor to the prototype:</p>\n<pre><code>Range.prototype = {\n\nconstructor: Range\n\n};\n</code></pre>\n<p>Another common technique that you are likely to see in older JavaScript code is to use the predefined prototype object with its constructor property and add methods to it one at a time with code like this:</p>\n<pre><code>Range.prototype.includes = function(x) {\n\nreturn this.from &#x3C;= x &#x26;&#x26; x &#x3C;= this.to;\n\n};\n\nRange.prototype.toString = function() {\n\nreturn \"(\" + this.from + \"...\" + this.to + \")\";\n\n};\n</code></pre>\n<h3>Classes with the class Keyword</h3>\n<pre><code>class Range {\n\nconstructor(from, to) {\n\nthis.from = from;\n\nthis.to = to;\n\n}\n\nincludes(x) { return this.from &#x3C;= x &#x26;&#x26; x &#x3C;= this.to; }\n\n*[Symbol.iterator]() {\n\nfor(let x = Math.ceil(this.from); x &#x3C;= this.to; x++)\n\nyield x;\n\n}\n\ntoString() { return `(${this.from}...${this.to})`; }\n\n}\n</code></pre>\n<p><code>let r = new Range(1,3);</code></p>\n<p><code>r.includes(2)</code></p>\n<p>true</p>\n<p><code>r.toString()</code></p>\n<p>(1…3)</p>\n<p><code>[...r]</code></p>\n<p>[1, 2, 3]</p>\n<p>Although class bodies are superficially similar to object literals, they are not the same thing. In particular, they do not support the definition of properties with name/value pairs.</p>\n<p>If your class does not need to do any initialization, you can omit the constructor keyword and its body, and an empty constructor function will be implicitly created for you.</p>\n<p>If you want to define a class that subclasses — or inherits from — another class, you can use the <code>extends</code> keyword with the class keyword:</p>\n<pre><code>class Span extends Range {\n\nconstructor(start, length) {\n\nif (length >= 0) {\n\nsuper(start, start + length);\n\n}\n\nelse {\n\nsuper(start + length, start);\n\n}\n\n}\n\n}\n</code></pre>\n<p>class declarations have both statement and expression forms</p>\n<p><code>let Square = class { constructor(x) { this.area = x * x; } };</code></p>\n<p><code>new Square(3).area</code></p>\n<p>9</p>\n<h3>Static methods</h3>\n<p>You can define a <code>static</code> method within a class body by prefixing the method declaration with the <code>static</code> keyword. Static methods are defined as properties of the constructor function rather than properties of the prototype object.</p>\n<pre><code>static parse(s) {\n\nlet matches = s.match(/^\\((\\d+)\\.\\.\\.(\\d+)\\)$/);\n\nif (!matches) {\n\nthrow new TypeError(`Cannot parse Range from \"${s}\".`)\n\n}\n\nreturn new Range(parseInt(matches[1]),\n\nparseInt(matches[2]));\n\n}\n</code></pre>\n<p>The method defined by this code is <code>Range.parse()</code>, not <code>Range.prototype.parse()</code>, and you must invoke it through the constructor, not through an instance:</p>\n<pre><code>let r = Range.parse('(1...10)');\n</code></pre>\n<h3>Getters, Setters, and other Method Forms</h3>\n<p>Within a class body, you can define getter and setter methods just as you can in object literals. The only difference is that in class bodies, you don’t put a comma after the getter or setter.</p>\n<h3>Public, Private, and Static Fields</h3>\n<p>The ES6 standard only allows the creation of methods (including getters, setters, and generators) and static methods; it does not include syntax for defining fields.</p>\n<p>If you want to define a field on a class instance, you must do that in the constructor function or in one of the methods. And if you want to define a static field for a class, you must do that outside the class body, after the class has been defined.</p>\n<p>Standardization is underway, however, for extended class syntax that allows the definition of instance and static fields, in both public and private forms.</p>\n<pre><code>class Buffer {\n\nconstructor() {\n\nthis.size = 0;\n\nthis.capacity = 4096;\n\nthis.buffer = new Uint8Array(this.capacity);\n\n}\n\n}\n</code></pre>\n<p>←></p>\n<pre><code>class Buffer {\n\nsize = 0;\n\ncapacity = 4096;\n\nbuffer = new Uint8Array(this.capacity);\n\n}\n</code></pre>\n<p>The same proposal that seeks to standardize these instance fields also defines private (with the # prefix) instance fields.</p>\n<pre><code>class Buffer {\n\n#size = 0;\n\nget size() { return this.#size; }\n\n}\n</code></pre>\n<p>A related proposal seeks to standardize the use of the <code>static</code> keyword for fields.</p>\n<pre><code>static integerRangePattern = /^\\((\\d+)\\.\\.\\.(\\d+)\\)$/;\n\nstatic parse(s) {\n\nlet matches = s.match(Range.integerRangePattern);\n\nif (!matches) {\n\nthrow new TypeError(`Cannot parse Range from \"${s}\".`)\n\n}\n\nreturn new Range(parseInt(matches[1]), matches[2]);\n\n}\n</code></pre>\n<h3>Adding Methods to Existing Classes</h3>\n<p>We can augment JavaScript classes simply by adding new methods to their prototype objects.</p>\n<pre><code>if (!String.prototype.startsWith) {\n\nString.prototype.startsWith = function(s) {\n\nreturn this.indexOf(s) === 0;\n\n};\n\n}\n\nNumber.prototype.times = function(f, context) {\n\nlet n = this.valueOf();\n\nfor(let i = 0; i &#x3C; n; i++) f.call(context, i);\n\n};\n</code></pre>\n<h3>Subclasses</h3>\n<h3>Subclasses and Prototypes</h3>\n<p>Span subclass of the Range class. This subclass will work just like a Range, but instead of initializing it with a start and an end, we’ll instead specify a start and a distance, or span.</p>\n<pre><code>function Span(start, span) {\n\nif (span >= 0) {\n\nthis.from = start;\n\nthis.to = start + span;\n\n}\n\nelse {\n\nthis.to = start;\n\nthis.from = start + span;\n\n}\n\n}\n</code></pre>\n<p>Ensure that the <code>Span</code> prototype inherits from the <code>Range</code></p>\n<pre><code>Span.prototype = Object.create(Range.prototype);\n</code></pre>\n<p>We don’t want to inherit <code>Range.prototype.constructor</code>, so we define our own constructor property:</p>\n<pre><code>Span.prototype.constructor = Span;\n</code></pre>\n<p><code>Span</code> overrides the <code>toString()</code> method</p>\n<p><code>Span.prototype.toString = function() {</code><br>\n<code>return `(${this.from}... +${this.to - this.from})`;</code><br>\n<code>};</code></p>\n<p>A robust subclassing mechanism needs to allow classes to invoke the methods and constructor of their superclass, but prior to ES6, JavaScript did not have a simple way to do these things.</p>\n<h3>Subclasses with extends and super</h3>\n<pre><code>class EZArray extends Array {\n\nget first() { return this[0]; }\n\nget last() { return this[this.length-1]; }\n\n}\n</code></pre>\n<p><code>let a = new EZArray();</code></p>\n<p><code>a instanceof EZArray</code></p>\n<p>true</p>\n<p><code>a instanceof Array</code></p>\n<p>true</p>\n<p><code>a.push(1,2,3,4);</code></p>\n<p><code>a.pop()</code></p>\n<p>4</p>\n<p><code>a.first</code></p>\n<p>1</p>\n<p><code>a.last</code></p>\n<p>3</p>\n<p><code>Array.isArray(a)</code></p>\n<p>true</p>\n<p><code>EZArray.isArray(a)</code></p>\n<p>true</p>\n<p><code>Array.prototype.isPrototypeOf(EZArray.prototype</code></p>\n<p>true</p>\n<p><code>Array.isPrototypeOf(EZArray)</code></p>\n<p>true</p>\n<p>Example demonstrates the use of the <code>super</code> keyword to invoke the constructor and methods of the superclass</p>\n<pre><code>class TypedMap extends Map {\n\nconstructor(keyType, valueType, entries) {\n\nif (entries) {\n\nfor(let [k, v] of entries) {\n\nif (typeof k !== keyType || typeof v !== valueType) {\n\nthrow new TypeError(`Wrong type for entry [${k}, ${v}]`);\n\n}\n\n}\n\n}\n\nsuper(entries);\n\nthis.keyType = keyType;\n\nthis.valueType = valueType;\n\n}\n\nset(key, value) {\n\nif (this.keyType &#x26;&#x26; typeof key !== this.keyType) {\n\nthrow new TypeError(`${key} is not of type${this.keyType}`);\n\n}\n\nif (this.valueType &#x26;&#x26; typeof value !== this.valueType)\n\n{\n\nthrow new TypeError(`${value} is not of type ${this.valueType}`);\n\n}\n\nreturn super.set(key, value);\n\n}\n\n}\n</code></pre>\n<p>You may not use the <code>this</code> keyword in your constructor until after you have invoked the superclass constructor with <code>super()</code>. This enforces a rule that superclasses get to initialize themselves before subclasses do.</p>\n<p>Once private fields are supported, we could change these properties to <code>#keyType</code> and <code>#valueType</code> so that they could not be altered from the outside.</p>\n<h3>Class Hierarchies and Abstract Classes</h3>\n<p>Define abstract classes — classes that do not include a complete implementation — to serve as a common superclass for a group of related subclasses.</p>\n<h3>Modules</h3>\n<h3>Automating Closure-Based Modularity</h3>\n<p>Imagine a tool that takes a set of files, wraps the content of each of those files within an immediately invoked function expression, keeps track of the return value of each function, and concatenates everything into one big file.</p>\n<pre><code>const modules = {};\n\nfunction require(moduleName) { return modules[moduleName]; }\n\nmodules[\"sets.js\"] = (function() {\n\nconst exports = {};\n\nexports.BitSet = class BitSet { ... };\n\nreturn exports;\n\n}());\n\nmodules[\"stats.js\"] = (function() {\n\nconst exports = {};\n\nconst sum = (x, y) => x + y;\n\nconst square = x = > x * x;\n\nexports.mean = function(data) { ... };\n\nexports.stddev = function(data) { ... };\n\nreturn exports;\n\n}());\n</code></pre>\n<p>writing code like the following to make use of those modules</p>\n<pre><code>const stats = require(\"stats.js\");\n\nconst BitSet = require(\"sets.js\").BitSet;\n\n// Now write code using those modules\n\nlet s = new BitSet(100);\n\ns.insert(10);\n\ns.insert(20);\n\ns.insert(30);\n\nlet average = stats.mean([...s]);\n</code></pre>\n<h3>Modules in ES6</h3>\n<p>ES6 adds import and export keywords to JavaScript and finally supports real modularity as a core language feature.</p>\n<p>ES6 modularity is conceptually the same as Node modularity: each file is its own module, and constants, variables, functions, and classes defined within a file are private to that module unless they are explicitly exported.</p>\n<h3>ES6 Exports</h3>\n<p>To export a constant, variable, function, or class from an ES6 module, simply add the keyword export before the declaration</p>\n<pre><code>export const PI = Math.PI;\n\nexport function degreesToRadians(d) { return d * PI / 180; }\n\nexport class Circle {\n\nconstructor(r) { this.r = r; }\n\narea() { return PI * this.r * this.r; }\n\n}\n</code></pre>\n<p>or:</p>\n<pre><code>export { Circle, degreesToRadians, PI };\n</code></pre>\n<p>It is common to write modules that export only one value (typically a function or class), and in this case, we usually use export <code>default</code> instead of <code>export</code></p>\n<pre><code>export default class BitSet {\n\n// implementation omitted\n\n}\n</code></pre>\n<h3>ES6 Imports</h3>\n<pre><code>import BitSet from './bitset.js';\n\nimport { mean, stddev } from \"./stats.js\";\n</code></pre>\n<p>When importing from a module that defines many exports, however, you can easily import everything with an import statement like this:</p>\n<pre><code>import * as stats from \"./stats.js\";\n</code></pre>\n<p>With the wildcard import shown in the previous example, the importing module would use the imported <code>mean()</code> and<code>stddev()</code> functions through the stats object, invoking them as <code>stats.mean()</code> and <code>stats.stddev()</code>.</p>\n<p>Note: not finished.</p>\n<h3>The JavaScript Standard Library</h3>\n<h3>The Set Class</h3>\n<p>Sets are not ordered or indexed, and they do not allow duplicates.</p>\n<pre><code>let s = new Set();\n\nlet t = new Set([1, s]);\n\nlet t = new Set(s);\n\nlet unique = new Set(\"Mississippi\");\n</code></pre>\n<p>The argument to the <code>Set()</code> constructor need not be an array: any iterable object (including other Set objects) is allowed.</p>\n<p>The <code>add()</code> method takes a single argument; if you pass an array, it adds the array itself to the set, not the individual array elements. <code>add()</code> always returns the set it is invoked on, however, so if you want to add multiple values to a set, you can used chained method calls like.</p>\n<p>it is very important to understand that set membership is based on strict equality checks, like the === operator performs.</p>\n<p>The most important thing we do with sets is not to add and remove elements from them, but to check to see whether a specified value is a member of the set:</p>\n<p><code>let oneDigitPrimes = new Set([2,3,5,7]);</code></p>\n<p><code>oneDigitPrimes.has(2)</code></p>\n<p>The Set class is iterable, which means that you can use a <code>for/of</code> loop to enumerate all of the elements of a set:</p>\n<pre><code>let sum = 0;\n\nfor(let p of oneDigitPrimes) {\n\nsum += p; // and add them up\n\n}\n</code></pre>\n<p>Because Set objects are iterable, you can convert them to arrays and argument lists with the … spread operator</p>\n<p><code>[...oneDigitPrimes]</code></p>\n<p>JavaScript Set class always remembers the order that elements were inserted in, and it always uses this order when you iterate a set: the first element inserted will be the first one iterated (assuming you haven’t deleted it first), and the most recently inserted element will be the last one iterated.</p>\n<p>Set class also implements a <code>forEach()</code> method</p>\n<pre><code>let product = 1;\n\noneDigitPrimes.forEach(n => { product *= n; });\n</code></pre>\n<h3>The Map Class</h3>\n<pre><code>let m = new Map();\n\nlet n = new Map([[\"one\", 1],[\"two\", 2]]);\n\nlet copy = new Map(n);\n\nlet o = { x: 1, y: 2};\n\nlet p = new Map(Object.entries(o));\n</code></pre>\n<p>map is a set of keys, each of which has an associated value. This is not quite the same as a set of key/value pairs.</p>\n<p>use <code>has()</code> to check whether a map includes the specified key; use <code>delete()</code> to remove a key (and its associated value) from the map; use <code>clear()</code> to remove all key/value pairs from the map; and use the size property to find out how many keys a map contains.</p>\n<p><code>set()</code> method of Map can be chained.</p>\n<p>Any JavaScript value can be used as a key or a value in a Map. This includes<code>null, undefined</code>, and <code>NaN</code>, as well as reference types like objects and arrays.</p>\n<p>Map compares keys by identity, not by equality.</p>\n<p><code>let m = new Map();</code></p>\n<p><code>m.set({}, 1);</code></p>\n<p><code>m.set({}, 2);</code></p>\n<p>Map a different empty object to the number 2.</p>\n<p><code>m.get({})</code></p>\n<p>undefined:</p>\n<p><code>m.set(m, undefined);</code></p>\n<p><code>m.has(m)</code></p>\n<p>true</p>\n<p><code>m.get(m)</code></p>\n<p>undefined</p>\n<p>Iterate over map:</p>\n<p><code>let m = new Map([[\"x\", 1], [\"y\", 2]]);</code></p>\n<p><code>[...m]</code></p>\n<p>[[“x”, 1], [“y”, 2]]</p>\n<p><code>for(let [key, value] of m) {...}</code></p>\n<p>Map class iterates in insertion order</p>\n<p>If you want to iterate just the keys or just the associated values of a map, use the <code>keys()</code> and <code>values()</code> methods: these return iterable objects that iterate keys and values, in insertion order. (The<br>\n<code>entries()</code> method returns an iterable object that iterates key/value pairs, but this is exactly the same as iterating the map directly.)</p>\n<pre><code>[...m.keys()]\n\n[...m.values()]\n\n[...m.entries()]\n</code></pre>\n<p>Map objects can also be iterated using the <code>forEach()</code></p>\n<pre><code>m.forEach((value, key) => {...}\n</code></pre>\n<p>Note that the value parameter comes before the key parameter.</p>\n<h3>WeakMap and WeakSet</h3>\n<p>The <code>WeakMap</code>class is a variant (but not an actual subclass) of the Map class that does not prevent its key values from being garbage collected.</p>\n<p><code>WeakMap</code>keys must be objects or arrays; primitive values are not subject to garbage collection and cannot be used as keys.</p>\n<p>WeakMap implements only the<code>get(), set(), has(),</code> and <code>delete()</code> methods. In particular, <code>WeakMap</code> is not iterable and does not define <code>keys(), values(),</code> or <code>forEach()</code>. If WeakMap was iterable, then its keys would be reachable and it wouldn’t be weak.</p>\n<p>Similarly, WeakMap does not implement the size property because the <code>size</code> of a WeakMap could change at any time as objects are garbage collected</p>\n<h3>Typed Arrays and Binary Data</h3>\n<p>They differ from regular arrays in some very important ways</p>\n<p>· The elements of a typed array are all numbers. Unlike regular JavaScript numbers, however, typed arrays allow you to specify the type (signed and unsigned integers and IEEE-754 floating point) and size (8 bits to 64 bits) of the numbers to be stored in the array.</p>\n<p>· You must specify the length of a typed array when you create it, and that length can never change.</p>\n<p>· The elements of a typed array are always initialized to 0 when the array is created.</p>\n<pre><code>Int8Array()\n\nUint8Array()\n\nUint8ClampedArray()\n\nInt16Array()\n\nUint32Array()\n\nUint16Array()\n\nInt32Array()\n\nBigInt64Array()\n\nBigUint64Array()\n\nFloat32Array()\n\nlet bytes = new Uint8Array(1024);\n\nlet matrix = new Float64Array(9);\n\nlet sudoku = new Int8Array(81);\n</code></pre>\n<p>Initialize with values</p>\n<pre><code>let white = Uint8ClampedArray.of(255, 255, 255, 0);\n\nlet ints = Uint32Array.from(white);\n</code></pre>\n<p>one more way to create typed arrays that involves the <code>ArrayBuffer</code> type</p>\n<pre><code>let buffer = new ArrayBuffer(1024*1024);\n\nbuffer.byteLength\n</code></pre>\n<p>1024*1024</p>\n<p>Typed arrays are not true arrays, but they re-implement most array methods, so you can use them pretty much just like you’d use regular arrays:</p>\n<p><code>let ints = new Int16Array(10);</code></p>\n<p>10 short integers</p>\n<p><code>ints.fill(3).map(x=>x*x).join(\"\")</code></p>\n<p>“9999999999”</p>\n<p>Remember that typed arrays have fixed lengths, so the length property is read-only, and methods that change the length of the array (such as<code>push(), pop(), unshift(), shift(),</code> and <code>splice()</code>) are not implemented for typed arrays. Methods that alter the contents of an array without changing the length (such as <code>sort(), reverse()</code>, and <code>fill()</code>) are implemented.</p>\n<h3>Determine Endianess and DataView</h3>\n<pre><code>let littleEndian = new Int8Array(new Int32Array([1]).buffer)\n\n[0] === 1;\n</code></pre>\n<p>You can use the <code>DataView</code> class, which defines methods for reading and writing values from an <code>ArrayBuffer</code> with explicitly specified byte ordering. Refer to book for more examples.</p>\n<h3>Pattern Matching with Regular Expressions</h3>\n<p>RegExp objects may be created with the <code>RegExp()</code> constructor, of course, but they are more often created using a special literal syntax.</p>\n<pre><code>let pattern = /s$/;\n</code></pre>\n<p>←></p>\n<pre><code>let pattern = new RegExp(\"s$\");\n</code></pre>\n<p>Regular expressions can also have one or more flag characters that affect how they work</p>\n<pre><code>let pattern = /s$/i;\n</code></pre>\n<p>i = case insensitive</p>\n<p>Punctuation characters have special meanings in regular expressions: <code>^ $ . * + ? = ! : | \\ / ( ) [ ] { }.</code>Other punctuation characters, such as quotation marks and @, do not have special meaning and simply match themselves literally in a regular expression.</p>\n<p>If you use the <code>RegExp()</code> constructor, keep in mind that any backslashes in your regular expression need to be doubled, since strings also use backslashes as an escape character.</p>\n<p><strong>Character</strong></p>\n<p><strong>Matches</strong></p>\n<p><code>[...]</code></p>\n<p>Any one character between the brackets.</p>\n<p><code>[^...]</code></p>\n<p>Any one character not between the brackets</p>\n<p><code>.</code></p>\n<p>Any character except newline or another Unicode line terminator. Or, if the <code>RegExp</code> uses the s flag, then a period matches any character, including line terminators.</p>\n<p><code>\\w</code></p>\n<p>Any ASCII word character. Equivalent to [a-zA-Z0–9_].</p>\n<p><code>\\W</code></p>\n<p>Equivalent to [^a-zA-Z0–9_]</p>\n<p><code>\\s</code></p>\n<p>Any Unicode whitespace character.</p>\n<p><code>\\S</code></p>\n<p>Any character that is not Unicode whitespace.</p>\n<p><code>\\d</code></p>\n<p>Equivalent to [0–9].</p>\n<p><code>\\D</code></p>\n<p>Equivalent to [⁰-9].</p>\n<p><code>[\\b]</code></p>\n<p>A literal backspace (special case).</p>\n<p><code>[\\s\\d]</code></p>\n<p>Any one whitespace character or digit</p>\n<p>REPETITIONS</p>\n<p><strong>Character</strong></p>\n<p><strong>Meaning</strong></p>\n<p><code>{n,m}</code></p>\n<p>Match the previous item at least n times but no more than m times</p>\n<p><code>{n,}</code></p>\n<p>Match the previous item n or more times.</p>\n<p><code>{n}</code></p>\n<p>Match exactly n occurrences of the previous item.</p>\n<p><code>?</code></p>\n<p>Equivalent to {0,1}.</p>\n<p><code>+</code></p>\n<p>Equivalent to {1,}</p>\n<p>*</p>\n<p>Equivalent to {0,}.</p>\n<p><strong>Example</strong></p>\n<p><strong>Description</strong></p>\n<pre><code>let r = /\\d{2,4}/;\n</code></pre>\n<p>Match between two and four digits</p>\n<pre><code>r = /\\w{3}\\d?/;\n</code></pre>\n<p>Match exactly three word characters and an optional digit</p>\n<pre><code>r = /\\s+java\\s+/;\n</code></pre>\n<p>Match “java” with one or more spaces before and after</p>\n<pre><code>r = /[^(]*/;\n</code></pre>\n<p>Match zero or more characters that are not open parens</p>\n<p>If you want to match repetitions of more complicated expressions, you’ll need to define a group with parentheses</p>\n<p>Be careful when using the * and ? repetition characters. Since these characters may match zero instances of whatever precedes them, they are allowed to match nothing.</p>\n<h3>NON-GREEDY REPETITION</h3>\n<p>It is also possible to specify that repetition should be done in a non-greedy way. Simply follow the repetition character or characters with a question mark: <code>??, +?, *?</code>, or even {1,5}?.</p>\n<p><strong>String</strong></p>\n<p><strong>Pattern</strong></p>\n<p><strong>Match</strong></p>\n<pre><code>\"aaa\"\n\n/a+/\n\n\"aaa\"\n\n\"aaa\"\n\n/a+?/\n\n\"a\"\n</code></pre>\n<p>Note that using non-greedy repetition may not always produce the results you expect. This is because regular expression pattern matching is done by findingthe first position in the string at which a match is possible. Since a match is possible starting at the first character of the string, shorter matches starting at subsequent characters are never even considered.</p>\n<h3>ALTERNATION, GROUPING, AND REFERENCES</h3>\n<p><strong>Char</strong></p>\n<p><strong>Pattern</strong></p>\n<p><strong>Pattern</strong></p>\n<p><code>|</code></p>\n<p><code>/ab|cd|ef/</code></p>\n<p>“ab” or the string “cd” or the string “ef”.</p>\n<p><code>/\\d{3}|[a-z]{4}/</code></p>\n<p>either three digits or four lowercase letters.</p>\n<p><code>/a|ab/</code></p>\n<p>matches only the first letter “a”</p>\n<p><code>()</code></p>\n<p><code>/java(script)?/</code></p>\n<p>matches “java” followed by the optional “script”</p>\n<p><code>/(ab|cd)+|ef/</code></p>\n<p>matches “java” followed by the optional “script”</p>\n<p>If the left alternative matches, the right alternative is ignored, even if it would have produced a “better” match</p>\n<p>Another purpose of parentheses in regular expressions is to define subpatterns within the complete pattern. When a regular expression is successfully matched against a target string, it is possible to extract the portions of the target string that matched any particular parenthesized subpattern. For example, suppose you are looking for one or more lowercase letters followed by one or more digits. You might use the pattern <code>/[a-z]+\\d+/</code>. But suppose you only really care about the digits at the end of each match. If you put that part of the pattern in parentheses (/[a-z]+(\\d+)/), you can extract the digits from any matches you find,</p>\n<p>A related use of parenthesized subexpressions is to allow you to refer back to a subexpression later in the same regular expression. This is done by following a \\ character by a digit or digits. The digits refer to the position of the parenthesized subexpression within the regular expression. For example, \\1 refers back to the first subexpression, and \\3 refers to the third.</p>\n<p><strong>Match</strong></p>\n<p><strong>Pattern</strong></p>\n<p>zero or more characters within single or double quotes. However, it does not<br>\nrequire the opening and closing quotes to match</p>\n<pre><code>/['\"][^'\"]*['\"]/\n</code></pre>\n<p>To require the quotes to match,use a reference</p>\n<pre><code>/(['\"])[^'\"]*\\1/\n</code></pre>\n<p><strong>Character</strong></p>\n<p><strong>Meaning</strong></p>\n<p>|</p>\n<p>match either the subexpression to the left or the subexpression to the right.</p>\n<p>(…)</p>\n<p>Grouping: group items into a single unit that can be used with *, +, ?, |, and so on. Also remember the characters that match this group for use with later references</p>\n<p>(?:…)</p>\n<p>group items into a single unit, but do not remember the characters that match this group.</p>\n<p>Note<code>(?:...)</code> syntax:</p>\n<p>In pattern<code>\"/([Jj]ava(?:[Ss]cript)?)\\sis\\s(fun\\w*)/</code>\" <code>\\2</code> refers to the text matched by <code>(fun\\w*)</code> since <code>(?:[Ss]cript)?)</code> in not remembered.</p>\n<h3>SPECIFYING MATCH POSITION</h3>\n<p><em>regular expression anchors</em> because they anchor the pattern to a specific position in the search string. The most commonly used anchor elements are ^, which ties the pattern to the beginning of the string, and $, which anchors the pattern to the end of the string.</p>\n<p><strong>Example</strong></p>\n<p><strong>Pattern</strong></p>\n<p>match the word “JavaScript” on a line by itself</p>\n<p><code>/^JavaScript$/</code></p>\n<p>To search for “Java” as a word by itself you can try the pattern <code>/\\sJava\\s/</code>, which requires a space before and after the word. But there are two problems with this solution. First, it does not match \"Java\" at the beginning or the end of a string, but only if it appears with space on either side. Second, when this pattern does find a match, the matched string it returns has leading and trailing spaces, which is not quite what’s needed. So instead of matching actual space characters with \\s, match (or anchor to) word boundaries with \\b. The resulting expression is <code>/\\bJava\\b/</code>.</p>\n<p>The element <code>\\B</code> anchors the match to a location that is not a word boundary. Thus, the pattern <code>/\\B[Ss]cript/</code> matches \"JavaScript\" and \"postscript\", but not \"script\" or \"Scripting\".</p>\n<p>You can also use arbitrary regular expressions as anchor conditions.</p>\n<p>If you include an expression within <code>(?= and )</code> characters, it is a lookahead assertion, and it specifies that the enclosed characters must match, without actually matching them.</p>\n<p><strong>Example</strong></p>\n<p><strong>Pattern</strong></p>\n<p><strong>Matches</strong></p>\n<p>to match the name of a common programming language, but only if it is followed by a colon</p>\n<p><code>/[Jj]ava([Ss]cript)?(?=\\:)/</code></p>\n<p>matches the word “JavaScript” in “JavaScript: The DefinitiveGuide”</p>\n<p>does not match “Java” in “Java in a Nutshell”</p>\n<p>If you instead introduce an assertion with <code>(?!</code>, it is a negative lookahead assertion.</p>\n<h3>FLAGS</h3>\n<p>Flags are specified after the second / character of a regular expression literal or as a string passed as the second argument to the RegExp() constructor.</p>\n<p><strong>Flag</strong></p>\n<p><strong>Meaning</strong></p>\n<p>g</p>\n<p>“global” — that is,that we intend to use it to find all matches within a string rather than just finding the first <a href=\"http://match.it/\" class=\"markup--anchor markup--p-anchor\">match.it</a> does alter the behavior of the String <code>match()</code> method and the <code>RegExp exec()</code> method in important ways.</p>\n<p>i</p>\n<p>case-insensitive</p>\n<p>m</p>\n<p>“multiline” mode</p>\n<p>s</p>\n<p>useful when working with text that includes newlines.Normally, a “.” in a regular expression matches any character except a line terminator. When the s flag is used, however, “.” will match any character, including line terminators.</p>\n<p>u</p>\n<p>Unicode.</p>\n<p>Setting the u flag on a RegExp also allows you to use the new <code>\\u{...}</code> escape sequence for Unicode character and also enables the \\p{...} notation for Unicode character classes.</p>\n<p>y</p>\n<p>“sticky”. should match at the beginning of a string or at the first character following the previous match</p>\n<h3>String Methods for Pattern Matching</h3>\n<h3>SEARCH()</h3>\n<p>Strings support four methods that use regular expressions.</p>\n<p><code>\"JavaScript\".search(/script/ui)</code></p>\n<p>4</p>\n<p><code>\"Python\".search(/script/ui)</code></p>\n<p>-1</p>\n<p><code>search()</code> does not support global searches; it ignores the <code>g</code> flag of its regular expression argument.</p>\n<p>REPLACE()</p>\n<p><code>text.replace(/javascript/gi, \"JavaScript\");</code></p>\n<p>No matter how it is capitalized, replace it with the correct capitalization</p>\n<p>parenthesized subexpressions of a regular expression are numbered from left to right and that the regular expression remembers the text that each subexpression matches.</p>\n<p>to replace quotation marks in a string with other characters:</p>\n<p><code>let quote = /\"([^\"]*)\"/g;</code></p>\n<p><code>'He said \"stop\"'.replace(quote, '«$1»')</code></p>\n<p>‘He said «stop»’</p>\n<p>If your RegExp uses named capture groups, then you can refer to the matching text by name rather than by number:</p>\n<p><code>let quote = /\"(?&#x3C;quotedText>[^\"]*)\"/g;</code></p>\n<p><code>'He said \"stop\"'.replace(quote, '«$&#x3C;quotedText>»')</code></p>\n<p>‘He said «stop»’</p>\n<p>Instead of passing a replacement string as the second argument to replace(), you can also pass a function that will be invoked to compute the replacement value.</p>\n<p>Example to convert decimal integers in a string to hexadecimal:</p>\n<p><code>let s = \"15 times 15 is 225\";</code></p>\n<p><code>s.replace(/\\d+/gu, n => parseInt(n).toString(16))</code></p>\n<p>“f times f is e1”</p>\n<h3>MATCH()</h3>\n<p><code>\"7 plus 8 equals 15\".match(/\\d+/g)</code></p>\n<p>[“7”, “8”, “15”]</p>\n<p>If the regular expression does not have the <code>g</code> flag set, <code>match()</code> does not do a global search; it simply searches for the first match. In this nonglobal case, <code>match()</code> still returns an array, but the array elements are completely different.</p>\n<p>Thus, if <code>match()</code> returns an array a, a[0] contains the complete match, a[1] contains the substring that matched the first parenthesized expression, and so on.</p>\n<pre><code>let url = /(\\w+):\\/\\/([\\w.]+)\\/(\\S*)/;\n\nlet text = \"Visit my blog at http://www.example.com/~david\";\n\nlet match = text.match(url);\n\nlet fullurl, protocol, host, path;\n\nif (match !== null) {\n\nfullurl = match[0];\n</code></pre>\n<p><a href=\"http://www.example.com/~david\" class=\"markup--anchor markup--p-anchor\">“http://www.example.com/~david</a>\"</p>\n<pre><code>protocol = match[1];\n</code></pre>\n<p>“http”</p>\n<pre><code>host = match[2];\n</code></pre>\n<p><a href=\"http://www.example.com/\" class=\"markup--anchor markup--p-anchor\">“www.example.com</a>\"</p>\n<pre><code>path = match[3];\n</code></pre>\n<p>“~david”</p>\n<p>In this non-global case, the array returned by match() also has some object properties in addition to the numbered array elements.</p>\n<p>input property refers to the string on which match() was called</p>\n<p>The index property is the position within that string at which the match starts.</p>\n<p>if the regular expression contains named capture groups, then the returned array also has a groups property whose value is an object.</p>\n<p><code>let url = /(?&#x3C;protocol>\\w+):\\/\\/(?&#x3C;host>[\\w.]+)\\/(?&#x3C;path>\\S*)/;</code></p>\n<p><code>let text = \"Visit my blog at http://www.example.com/~david\";</code></p>\n<p><code>let match = text.match(url);</code></p>\n<p><code>match[0]</code></p>\n<p><a href=\"http://www.example.com/~david\" class=\"markup--anchor markup--p-anchor\">“http://www.example.com/~david</a>\"</p>\n<p><code>match.input</code></p>\n<p>text</p>\n<p><code>match.index</code></p>\n<p>17</p>\n<p><code>match.groups.protocol</code></p>\n<p>“http”</p>\n<p><code>match.groups.host</code></p>\n<p><a href=\"http://www.example.com/\" class=\"markup--anchor markup--p-anchor\">“www.example.com</a>\"</p>\n<p><code>match.groups.path</code></p>\n<p>“~david”</p>\n<p>There are also important but less dramatic differences in behavior when the y flag is set. Refer to book for examples.</p>\n<h3>MATCHALL()</h3>\n<p>Instead of returning an array of matching substrings like <code>match()</code> does, however, it returns an iterator that yields the kind of match objects that match() returns when used with a non-global RegExp.</p>\n<h3>SPLIT()</h3>\n<p><code>\"123,456,789\".split(\",\")</code></p>\n<p>[“123”, “456”,”789\"]</p>\n<p><code>\"1, 2, 3,\\n4, 5\".split(/\\s*,\\s*/)</code></p>\n<p>[“1”, “2”, “3”, “4”,”5\"]</p>\n<p>Surprisingly, if you call <code>split()</code> with a RegExp delimiter and the regular expression includes capturing groups, then the text that matches the capturing groups will be included in the returned array.</p>\n<p><code>const htmlTag = /&#x3C;([^>]+)>/;</code></p>\n<p><code>\"Testing&#x3C;br/>1,2,3\".split(htmlTag)</code></p>\n<p>[“Testing”, “br/”,”1,2,3\"]</p>\n<h3>The RegExp Class</h3>\n<p>The <code>RegExp()</code> constructor is useful when a regular expression is being dynamically created and thus cannot be represented with the regular expression literal syntax.</p>\n<pre><code>let zipcode = new RegExp(\"\\\\d{5}\", \"g\");\n</code></pre>\n<p><code>let exactMatch = /JavaScript/;</code><br>\n<code>let caseInsensitive = new RegExp(exactMatch, \"i\");</code></p>\n<h3>TEST()</h3>\n<p>Returns true or false by calling <code>exec()</code>.</p>\n<h3>EXEC()</h3>\n<pre><code>let pattern = /Java/g;\n\nlet text = \"JavaScript > Java\";\n\nlet match;\n\nwhile((match = pattern.exec(text)) !== null) {\n\nconsole.log(`Matched ${match[0]} at ${match.index}`);\n\nconsole.log(`Next search begins at ${pattern.lastIndex}`);\n\n}\n</code></pre>\n<h3>THE LASTINDEX PROPERTY AND REGEXP REUSE</h3>\n<p>The use of the <code>lastIndex</code> property with the g and y flags is a particularly awkward part of this API. When you use these flags, you need to be particularly careful when calling the <code>match(), exec()</code>, or <code>test()</code> methods because the behavior of these methods depends on <code>lastIndex</code>, and the value of <code>lastIndex</code> depends on what you have previously done with the RegExp object.</p>\n<p>To find the index of all &#x3C;p> tags within a string of HTML text:</p>\n<pre><code>let match, positions = [];\n\nwhile((match = /&#x3C;p>/g.exec(html)) !== null) {\n\npositions.push(match.index);\n\n}\n</code></pre>\n<p>If the html string contains at least one &#x3C;p> tag, then it will loop forever. For each iteration of the loop, we’re creating a new RegExp object with <code>lastIndex</code> set to 0, so <code>exec()</code> always begins at the start of the string, and if there is a match, it will keep matching over and over. The solution, of course, is to define the RegExp once, and save it to a variable so that we’re using the same RegExp object for each iteration of the loop.</p>\n<p>On the other hand, sometimes reusing a RegExp object is the wrong thing to do. Suppose, for example, that we want to loop through all of the words in a dictionary to find words that contain pairs of double letters.</p>\n<pre><code>let dictionary = [ \"apple\", \"book\", \"coffee\" ];\n\nlet doubleLetterWords = [];\n\nlet doubleLetter = /(\\w)\\1/g;\n\nfor(let word of dictionary) {\n\nif (doubleLetter.test(word)) {\n\ndoubleLetterWords.push(word);\n\n}\n\n}\n</code></pre>\n<p><code>doubleLetterWords</code></p>\n<p>[“apple”, “coffee”]: “book” is missing!</p>\n<p>Because we set the g flag on the RegExp, the <code>lastIndex</code> property is changed after successful matches, and the <code>test()</code> method (which is based on <code>exec()</code>) starts searching for a match at the position specified by <code>lastIndex</code>. After matching the \"pp\" in \"apple\", <code>lastIndex</code> is 3, and so we start searching the word \"book\" at position 3 and do not see the \"oo\" that it contains.</p>\n<h3>Dates and Times</h3>\n<pre><code>let now = new Date();\n</code></pre>\n<p>The current time</p>\n<pre><code>let epoch = new Date(0);\n</code></pre>\n<p>Midnight, January 1st, 1970, GMT</p>\n<pre><code>let century = new Date(2100,\n\n0,\n\n1,\n\n2, 3, 4, 5);\n</code></pre>\n<p>Year 2100</p>\n<p>January</p>\n<p>1st</p>\n<p>02:03:04.005, local</p>\n<pre><code>let century = new Date(Date.UTC(2100, 0, 1));\n</code></pre>\n<p>Midnight in GMT, January 1, 2100</p>\n<p>If you print a date (with console.log(century), for example), it will, by default, be printed in your local time zone. If you want to display a date in UTC, you should explicitly convert it to a string with <code>toUTCString()</code> or<code>toISOString()</code>.</p>\n<p>if you pass a string to the Date() constructor, it will attempt to parse that string as a date and time specification</p>\n<p><code>let century = new Date(\"2100-01-01T00:00:00Z\");</code></p>\n<p>Once you have a Date object, various get and set methods allow you to query and modify the year, month, day-of-month, hour, minute, second, and millisecond fields of the Date. Each of these methods hastwo forms: one that gets or sets using local time and one that gets or sets using UTC time.</p>\n<p>Note that the methods for querying the day-of-month are <code>getDate()</code> and <code>getUTCDate()</code>. The more natural-sounding functions <code>getDay()</code> and <code>getUTCDay()</code> return the day-of-week (0 for Sunday through 6 for Saturday). The day-of-week is read-only, so there is not a corresponding <code>setDay()</code> method.</p>\n<h3>Timestamps</h3>\n<p>JavaScript represents dates internally as integers that specify the number of milliseconds since (or before) midnight on January 1, 1970, UTC time.</p>\n<p>For any Date object, the <code>getTime()</code> method returns this internal value, and the <code>setTime()</code> method sets it.</p>\n<pre><code>d.setTime(d.getTime() + 30000);\n</code></pre>\n<p>add 30 secs</p>\n<p>The static Date.now() method returns the current time as a timestamp and is helpful when you want to measure how long your code takes to run</p>\n<pre><code>let startTime = Date.now();\n\nreticulateSplines(); // Do some time-consuming operation\n\nlet endTime = Date.now();\n\nconsole.log(`Spline reticulation took ${endTime -startTime}ms.`);\n</code></pre>\n<p>adds three months and two weeks to the current date:</p>\n<p><code>let d = new Date();</code><br>\n<code>d.setMonth(d.getMonth() + 3, d.getDate() + 14);</code></p>\n<h3>Formatting and Parsing Date Strings</h3>\n<pre><code>let d = new Date(2020, 0, 1, 17, 10, 30);\n\nd.toString()\n</code></pre>\n<p>“Wed Jan 01 2020 17:10:30 GMT-0800 (Pacific Standard Time)”</p>\n<pre><code>d.toUTCString()\n</code></pre>\n<p>“Thu, 02 Jan 2020 01:10:30 GMT”</p>\n<pre><code>d.toLocaleDateString()\n</code></pre>\n<p>“1/1/2020”: ‘en-US’ locale</p>\n<pre><code>d.toLocaleTimeString()\n</code></pre>\n<p>“5:10:30 PM”: ‘en-US’ locale</p>\n<pre><code>d.toISOString()\n</code></pre>\n<p>“2020–01–02T01:10:30.000Z”</p>\n<p>there is also a static Date.parse() method that takes a string as its argument, attempts to parse it as a date and time, and returns a timestamp representing that date. <code>Date.parse()</code> is able to parse the same strings that the <code>Date()</code> constructor can and is guaranteed to be able to parse the output of<code>toISOString(), toUTCString()</code>, and<code>toString()</code>.</p>\n<h3>Error Classes</h3>\n<p>One good reason to use an Error object is that, when you create an Error, it captures the state of the JavaScript stack, and if the exception is uncaught, the stack trace will be displayed with the error message, which will help you debug the issue.</p>\n<p>Error objects have two properties: <code>message</code> and <code>name</code>, and a<code>toString()</code> method. Node and all modern browsers also define a <code>stack</code> property on Error objects.</p>\n<p>Subclasses are <code>EvalError, RangeError, ReferenceError, SyntaxError, TypeError,</code> and <code>URIError</code>.</p>\n<p>You should feel free to define your own Error subclasses that best encapsulate the error conditions of your own program.</p>\n<pre><code>class HTTPError extends Error {\n\nconstructor(status, statusText, url) {\n\nsuper(`${status} ${statusText}: ${url}`);\n\nthis.status = status;\n\nthis.statusText = statusText;\n\nthis.url = url;\n\n}\n\nget name() { return \"HTTPError\"; }\n\n}\n\nlet error = new HTTPError(404, \"Not Found\", \"http://example.com/\");\n\nerror.status\n</code></pre>\n<p>404</p>\n<pre><code>error.message\n</code></pre>\n<p>“404 Not Found:<a href=\"http://example.com/\" class=\"markup--anchor markup--p-anchor\">http://example.com/</a>\"</p>\n<pre><code>error.name\n</code></pre>\n<p>HTTPError</p>\n<h3>JSON Serialization and Parsing</h3>\n<p>JavaScript supports JSON serialization and deserialization with the two functions <code>JSON.stringify()</code> and <code>JSON.parse().</code></p>\n<pre><code>let o = {s: \"\", n: 0, a: [true, false, null]};\n\nlet s = JSON.stringify(o);\n</code></pre>\n<p>s == ‘{“s”:””,”n”:0,”a”:[true,false,null]}’</p>\n<pre><code>let copy = JSON.parse(s);\n</code></pre>\n<p>copy == {s: “”, n: 0, a:[true, false, null]}</p>\n<p>Inefficient way of creating a deep copy of an object</p>\n<pre><code>function deepcopy(o) {\n\nreturn JSON.parse(JSON.stringify(o));\n\n}\n</code></pre>\n<p>Typically, you pass only a single argument to <code>JSON.stringify()</code> and <code>JSON.parse()</code>. Both functions accept an optional second argument that allows us to extend the JSON format.</p>\n<p><code>JSON.stringify()</code> also takes an optional third argument. If you would like your JSONformatted string to be human-readable (if it is being used as a configuration file, for example), then you should pass null as the second argument and pass a number or string as the third argument. If the third argument is a number, then it will use that number of spaces for each indentation level. If the third argument is a string of whitespace (such as '\\t'), it will use that string for each level of indent.</p>\n<h3>JSON Customizations</h3>\n<p>If <code>JSON.stringify()</code> is asked to serialize a value that is not natively supported by the JSON format, it looks to see if that value has a <code>toJSON()</code> method, and if so, it calls that method and then stringifies the return value in place of the original value. Date objects implement <code>toJSON()</code>: it returns the same string that <code>toISOString()</code> method does.</p>\n<p>If you need to re-create Date objects (or modify the parsed object inany other way), you can pass a “reviver” function as the second argument to <code>JSON.parse()</code>.</p>\n<pre><code>let data = JSON.parse(text, function(key, value) {\n\nif (key[0] === \"_\") return undefined;\n\nif (typeof value === \"string\" &#x26;&#x26; /^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d.\\d\\d\\dZ$/.test(value)) {\n\nreturn new Date(value);\n\n}\n\nreturn value;\n\n});\n</code></pre>\n<h3>The Console API</h3>\n<p>Console functions that print their arguments like console.log() have a little-known feature: if the first argument is a string that includes <code>%s, %i, %d, %f, %o, %O, or %c</code>, then this first argument is treated as format string, and the values of subsequent arguments are substituted into the string in place of the two-character % sequences.</p>\n<h3>URL API</h3>\n<pre><code>let url = new URL(\"https://example.com:8000/path/name?q=term#fragment\");\n\nurl.href\n</code></pre>\n<p><a href=\"https://example.com:8000/path/name\" class=\"markup--anchor markup--p-anchor\">“https://example.com:8000/path/name</a>?q=term#fragment\"</p>\n<pre><code>url.origin\n</code></pre>\n<p><a href=\"https://example.com:8000/\" class=\"markup--anchor markup--p-anchor\">“https://example.com:8000</a>\"</p>\n<pre><code>url.protocol\n</code></pre>\n<p>“https:”</p>\n<pre><code>url.host\n</code></pre>\n<p><a href=\"http://example.com/\" class=\"markup--anchor markup--p-anchor\">“example.com</a>:8000”</p>\n<pre><code>url.hostname\n</code></pre>\n<p><a href=\"http://example.com/\" class=\"markup--anchor markup--p-anchor\">“example.com</a>”</p>\n<pre><code>url.port\n</code></pre>\n<p>“8000”</p>\n<pre><code>url.pathname\n</code></pre>\n<p>“/path/name”</p>\n<pre><code>url.search\n</code></pre>\n<p>“?q=term”</p>\n<pre><code>url.hash\n</code></pre>\n<p>“#fragment”</p>\n<pre><code>let url = new URL(\"https://example.com\");\n\nurl.pathname = \"api/search\";\n</code></pre>\n<p>Add a path to an API endpoint</p>\n<pre><code>url.search = \"q=test\";\n</code></pre>\n<p>Add a query parameter</p>\n<pre><code>url.toString()\n</code></pre>\n<p><a href=\"https://example.com/api/search?q=test\" class=\"markup--anchor markup--p-anchor\">“https://example.com/api/search?q=test</a>\"</p>\n<p>One of the important features of the URL class is that it correctly adds punctuation and escapes special characters in URLs when that is needed</p>\n<pre><code>let url = new URL(\"https://example.com\");\n\nurl.pathname = \"path with spaces\";\n\nurl.pathname\n</code></pre>\n<p>“/path%20with%20spaces”</p>\n<pre><code>url.search = \"q=foo#bar\";\n\nurl.search\n</code></pre>\n<p>“?q=foo%23bar”</p>\n<pre><code>url.href\n</code></pre>\n<p><a href=\"https://example.com/path%20with%20spaces?q=foo%23bar\" class=\"markup--anchor markup--p-anchor\">“https://example.com/path%20with%20spaces?q=foo%23bar</a>\"</p>\n<p>Often, however, HTTP requests encode the values of multiple form fields or multiple API parameters into the query portion of a URL. In this format, the query portion of the URL is a question mark followed by one or more name/value pairs, which are separated from one another by ampersands.</p>\n<p>If you want to encode these kinds of name/value pairs into the query portion of a URL, then the searchParams property will be more useful than the search property.</p>\n<p><code>let url = new URL(\"https://example.com/search\");</code></p>\n<p><code>url.search</code></p>\n<p>“”</p>\n<p><code>url.searchParams.append(\"q\", \"term\");</code></p>\n<p><code>url.search</code></p>\n<p>“?q=term”</p>\n<p><code>url.searchParams.set(\"q\", \"x\");</code></p>\n<p><code>url.search</code></p>\n<p>“?q=x”</p>\n<p><code>url.searchParams.append(\"opts\", \"1\");</code></p>\n<p><code>url.search</code></p>\n<p>“?q=x&#x26;opts=1”</p>\n<p>The value of the searchParams property is a URLSearchParams object.</p>\n<p><code>let url = new URL(\"http://example.com\");</code></p>\n<p><code>let params = new URLSearchParams();</code></p>\n<p><code>params.append(\"q\", \"term\");</code></p>\n<p><code>params.append(\"opts\", \"exact\");</code></p>\n<p><code>params.toString()</code></p>\n<p>“q=term&#x26;opts=exact”</p>\n<p><code>url.search = params;</code></p>\n<p><code>url.href</code></p>\n<p><a href=\"http://example.com/\" class=\"markup--anchor markup--p-anchor\">“http://example.com/</a>?q=term&#x26;opts=exact\"</p>\n<h3>Timers</h3>\n<p><code>setTimeout()</code> and<code>setInterval()</code>—that allow programs to ask the browser to invoke a function after a specified amount of time has elapsed or to invoke the function repeatedly at a specified interval.</p>\n<pre><code>setTimeout(() => { console.log(\"Ready...\"); }, 1000);\n\nsetTimeout(() => { console.log(\"set...\"); }, 2000);\n\nsetTimeout(() => { console.log(\"go!\"); }, 3000);\n</code></pre>\n<p>If you want to invoke a function repeatedly, use <code>setInterval()</code></p>\n<p>Both <code>setTimeout()</code> and <code>setInterval()</code> return a value. If you save this value in a variable, you can then use it later to cancel the execution of the function by passing it to <code>clearTimeout()</code> or <code>clearInterval()</code>.</p>\n<pre><code>let clock = setInterval(() => {\n\nconsole.clear();\n\nconsole.log(new Date().toLocaleTimeString());\n\n}, 1000);\n\nsetTimeout(() => { clearInterval(clock); }, 10000);\n</code></pre>\n<p>After 10 seconds: stop the repeating code above</p>\n<h3>Iterators and Generators</h3>\n<p>The iterator method of an iterable object does not have a conventional name but uses the Symbol, Symbol.iterator as its name. So a simple for/of loop over an iterable object iterable could also be written the hard way, like this:</p>\n<pre><code>let iterable = [99];\n\nlet iterator = iterable[Symbol.iterator]();\n\nfor(let result = iterator.next(); !result.done; result =iterator.next()) {\n\nconsole.log(result.value) // result.value == 99\n\n}\n</code></pre>\n<p>When you want to iterate though a “partially used” iterator:</p>\n<p><code>let list = [1,2,3,4,5];</code><br>\n<code>let iter = list[Symbol.iterator]();</code></p>\n<p><code>let head = iter.next().value;</code></p>\n<p>head == 1</p>\n<p><code>let tail = [...iter];</code></p>\n<p>tail == [2,3,4,5]</p>\n<h3>Implementing Iterable Objects</h3>\n<p>we will implement the Range class one more time, making it iterable without relying on a generator.</p>\n<p>In order to make a class iterable, you must implement a method whose name is the Symbol <code>Symbol.iterator</code></p>\n<pre><code>class Range {\n\nconstructor (from, to) {\n\nthis.from = from;\n\nthis.to = to;\n\n}\n\nhas(x) { return typeof x === \"number\" &#x26;&#x26; this.from &#x3C;= x &#x26;&#x26; x &#x3C;= this.to; }\n\ntoString() { return `{ x | ${this.from} ≤ x ≤ ${this.to}}`; }\n\n[Symbol.iterator]() {\n\nlet next = Math.ceil(this.from);\n\nlet last = this.to;\n\nreturn {\n\nnext() {\n\nreturn (next &#x3C;= last) ? { value: next++ } : { done: true };\n\n},\n\n[Symbol.iterator]() { return this; }\n\n};\n\n}\n\n}\n\nfor(let x of new Range(1,10)) console.log(x);\n</code></pre>\n<p>Logs numbers 1 to 10</p>\n<pre><code>[...new Range(-2,2)]\n</code></pre>\n<p>[-2, -1, 0,1, 2]</p>\n<p>In addition to making your classes iterable, it can be quite useful to define functions that return iterable values.</p>\n<p>Return an iterable object that iterates the result of applying <code>f()</code> to each value from the source iterable</p>\n<pre><code>function map(iterable, f) {\n\nlet iterator = iterable[Symbol.iterator]();\n\nreturn {\n\n[Symbol.iterator]() { return this; },\n\nnext() {\n\nlet v = iterator.next();\n\nif (v.done) {\n\nreturn v;\n\n}\n\nelse {\n\nreturn { value: f(v.value) };\n\n}\n\n}\n\n};\n\n}\n</code></pre>\n<p><code>[...map(new Range(1,4), x => x*x)]</code></p>\n<p>[1, 4, 9, 16]</p>\n<p>Return an iterable object that filters the specified iterable, iterating only those elements for which the predicate returns true</p>\n<pre><code>function filter(iterable, predicate) {\n\nlet iterator = iterable[Symbol.iterator]();\n\nreturn {\n\n[Symbol.iterator]() { return this; },\n\nnext() {\n\nfor(;;) {\n\nlet v = iterator.next();\n\nif (v.done || predicate(v.value)) {\n\nreturn v;\n\n}\n\n}\n\n}\n\n};\n\n}\n</code></pre>\n<p><code>[...filter(new Range(1,10), x => x % 2 === 0)]</code></p>\n<p>[2,4,6,8,10]</p>\n<h3>Generators</h3>\n<p>Particularly useful when the values to be iterated are not the elements of a data structure, but the result of a computation.</p>\n<p>To create a generator, you must first define a generator function — defined with the keyword <code>function*</code> rather than <code>function</code></p>\n<p>When you invoke a generator function, it does not actually execute the function body, but instead returns a generator object. This generator object is an iterator.</p>\n<p>Calling its <code>next()</code> method causes the body of the generator function to run from the start (or whatever its current position is) until it reaches a <code>yield</code> statement.</p>\n<p>The value of the <code>yield</code> statement becomes the value returned by the <code>next()</code> call on the iterator.</p>\n<pre><code>function* oneDigitPrimes() {\n\nyield 2;\n\nyield 3;\n\nyield 5;\n\nyield 7;\n\n}\n\nlet primes = oneDigitPrimes();\n</code></pre>\n<p>we get a generator</p>\n<pre><code>primes.next().value\n</code></pre>\n<p>2</p>\n<pre><code>primes.next().value\n</code></pre>\n<p>3</p>\n<pre><code>primes.next().value\n</code></pre>\n<p>5</p>\n<pre><code>primes.next().value\n</code></pre>\n<p>7</p>\n<pre><code>primes.next().done\n</code></pre>\n<p>true</p>\n<p>Generators have a <code>Symbol.iterator</code> method to make them iterable</p>\n<p><code>primes[Symbol.iterator]()</code></p>\n<p><code>[...oneDigitPrimes()]</code></p>\n<p>[2,3,5,7]</p>\n<pre><code>let sum = 0;\n\nfor(let prime of oneDigitPrimes()) sum += prime;\n\nsum\n</code></pre>\n<p>17</p>\n<p>Like regular functions, however, we can also define generators in expression form.</p>\n<pre><code>const seq = function*(from,to) {\n\nfor(let i = from; i &#x3C;= to; i++) yield i;\n\n};\n\n[...seq(3,5)]\n</code></pre>\n<p>[3, 4, 5]</p>\n<p>In classes and object literals, we can use shorthand notation to omit the function keyword entirely when we define methods.</p>\n<pre><code>let o = {\n\nx: 1, y: 2, z: 3,\n\n*g() {\n\nfor(let key of Object.keys(this)) {\n\nyield key;\n\n}\n\n}\n\n};\n</code></pre>\n<p><code>[...o.g()]</code></p>\n<p>[“x”, “y”, “z”, “g”]</p>\n<p>Generators often make it particularly easy to define iterable classes.</p>\n<pre><code>*[Symbol.iterator]() {\n\nfor(let x = Math.ceil(this.from); x &#x3C;= this.to; x++)\n\nyield x;\n\n}\n</code></pre>\n<h3>Generator Examples</h3>\n<p>Generators are more interesting if they actually generate the values they yield by doing some kind of computation.</p>\n<p>generator function that yields Fibonacci numbers</p>\n<pre><code>function* fibonacciSequence() {\n\nlet x = 0, y = 1;\n\nfor(;;) {\n\nyield y;\n\n[x, y] = [y, x+y];\n\n}\n\n}\n</code></pre>\n<p>If this generator is used with the … spread operator, it will loop until memory is exhausted and the program crashes.</p>\n<p>Use it in a <code>for/of</code> loop, however</p>\n<pre><code>function fibonacci(n) {\n\nfor(let f of fibonacciSequence()) {\n\nif (n-- &#x3C;= 0) return f;\n\n}\n\n}\n\nfibonacci(20)\n</code></pre>\n<p>10946</p>\n<p>This kind of infinite generator becomes more useful with a <code>take()</code> generator like this</p>\n<pre><code>function* take(n, iterable) {\n\nlet it = iterable[Symbol.iterator]();\n\nwhile(n-- > 0) {\n\nlet next = it.next();\n\nif (next.done) return;\n\nelse yield next.value;\n\n}\n\n}\n\n[...take(5, fibonacciSequence())]\n</code></pre>\n<p>[1, 1, 2, 3, 5]</p>\n<h3>Asynchronous Javascript</h3>\n<p><code>Promises</code>, new in ES6, are objects that represent the not-yet-available result of an asynchronous operation.</p>\n<p>The keywords <code>async</code> and <code>await</code> were introduced in ES2017 and provide new syntax that simplifies asynchronous programming by allowing you to structure your Promise based code as if it was synchronous.</p>\n<p>Asynchronous iterators and the<code>for/await</code> loop were introduced in ES2018 and allow you to work with streams of asynchronous events using simple loops that appear synchronous.</p>\n<h3>Asynchronous Programming with Callbacks</h3>\n<h3>Timers</h3>\n<p><code>setTimeout(checkForUpdates, 60000);</code></p>\n<pre><code>let updateIntervalId = setInterval(checkForUpdates, 60000);\n\nfunction stopCheckingForUpdates() {\n\nclearInterval(updateIntervalId);\n\n}\n</code></pre>\n<h3>Events</h3>\n<p>Event-driven JavaScript programs register callback functions for specified types of events in specified contexts, and the web browser invokes those functions whenever the specified events occur.</p>\n<p>These callback functions are called event handlers or event listeners, and they are registered with <code>addEventListener()</code></p>\n<p>Ask the web browser to return an object representing the HTML &#x3C;button> element that matches this CSS selector:</p>\n<p><code>let okay = document.querySelector('#confirmUpdateDialogbutton.okay');</code></p>\n<p>Now register a callback function to be invoked when the user clicks on that button</p>\n<p><code>okay.addEventListener('click', applyUpdate);</code></p>\n<h3>Network Events</h3>\n<p>JavaScript running in the browser can fetch data from a web server with code like this:</p>\n<pre><code>function getCurrentVersionNumber(versionCallback) {\n\nlet request = new XMLHttpRequest();\n\nrequest.open(\"GET\", \"http://www.example.com/api/version\");\n\nrequest.send();\n\nrequest.onload = function() {\n\nif (request.status === 200) {\n\nlet currentVersion = parseFloat(request.responseText);\n\nversionCallback(null, currentVersion);\n\n}\n\nelse {\n\nversionCallback(response.statusText, null);\n\n}\n\n};\n\nrequest.onerror = request.ontimeout = function(e) {\n\nversionCallback(e.type, null);\n\n};\n\n}\n</code></pre>\n<h3>Promises</h3>\n<p>Promises, a core language feature designed to simplify asynchronous programming.</p>\n<p>A Promise is an object that represents the result of an asynchronous computation. That result may or may not be ready yet, and the Promise API is intentionally vague about this: there is no way to synchronously get the value of a Promise; you can only ask the Promise to call a callback function when the value is ready.</p>\n<p>One real problem with callback-based asynchronous programming is that it is common to end up with callbacks inside callbacks inside callbacks, with lines of code so highly indented that it is difficult to read.</p>\n<p>Promises allow this kind of nested callback to be re-expressed as a more linear Promise chain that tends to be easier to read and easier to reason about.</p>\n<p>Another problem with callbacks is that they can make handling errors difficult. If an asynchronous function (or an asynchronously invoked callback) throws an exception, there is no way for that exception to propagate back to the initiator of the asynchronous operation. This is a fundamental fact about asynchronous programming: it breaks exception handling. Promises help here by standardizing a way to handle errors and providing a way for errors to propagate correctly through a chain of promises.</p>\n<p>Note that Promises represent the future results of single asynchronous computations. They cannot be used to represent repeated asynchronous computations, however.</p>\n<p>We can’t use Promises to replace <code>setInterval()</code> because that function invokes a callback function repeatedly, which is something that Promises are just not designed to do.</p>\n<h3>Using Promises</h3>\n<p>How we would use this Promise returning utility function</p>\n<pre><code>getJSON(url).then(jsonData => {\n\n// callback function that will be asynchronously invoked with the parsed JSON value when it becomes available.\n\n});\n</code></pre>\n<p>The Promise object defines a then() instance method. Instead of passing our callback function directly to <code>getJSON()</code>, we instead pass it to the then() method. When the HTTP response arrives, the body of that response is parsed as JSON, and the resulting parsed value is passed to the function that we passed to <code>then()</code>.</p>\n<p>If you call the <code>then()</code> method of a Promise object multiple times, each of the functions you specify will be called when the promised computation is complete.</p>\n<p>Unlike many event listeners, though, a Promise represents a single computation, and each function registered with then() will be invoked only once.</p>\n<pre><code>function displayUserProfile(profile) { ...}\n\ngetJSON(\"/api/user/profile\").then(displayUserProfile);\n</code></pre>\n<h3>HANDLING ERRORS WITH PROMISES</h3>\n<p>Asynchronous operations, particularly those that involve networking, can typically fail in a number of ways, and robust code has to be written to handle the errors that will inevitably occur.</p>\n<p><code>getJSON(\"/api/user/profile\").then(displayUserProfile, handleProfileError);</code></p>\n<p>if <code>getJSON()</code> runs normally, it passes its result to <code>displayUserProfile()</code>. If there is an error (the user is not logged in, the server is down, the user’s internet connection dropped, the request timed out, etc.), then <code>getJSON()</code> passes an Error object to <code>handleProfileError()</code>.</p>\n<p>In practice, it is rare to see two functions passed to then(). There is a better and more idiomatic way of handling errors when working with Promises.</p>\n<p>To understand it, first consider what happens if <code>getJSON()</code> completes normally but an error occurs in <code>displayUserProfile()</code>. That callback function is invoked asynchronously when <code>getJSON()</code> returns, so it is also asynchronous and cannot meaningfully throw an exception (because there is no code on the call stack to handle it).</p>\n<pre><code>getJSON(\"/api/user/profile\").then(displayUserProfile).catch(handleProfileError);\n</code></pre>\n<p>With this code, a normal result from<code>getJSON()</code> is still passed to <code>displayUserProfile()</code>, but any error in <code>getJSON()</code> or in <code>displayUserProfile()</code> (including any exceptions thrown by <code>displayUserProfile</code>) get passed to <code>handleProfileError()</code>.</p>\n<h3>Chaining Promises</h3>\n<p>One of the most important benefits of Promises is that they provide a natural way to express a sequence of asynchronous operations as a linear chain of <code>then()</code> method invocations, without having to nest each operation within the callback of the previous one.</p>\n<pre><code>fetch(documentURL)\n\n.then(response => response.json())\n\n.then(document => {return render(document); })\n\n.then(rendered => {cacheInDatabase(rendered); })\n\n.catch(error => handle(error));\n</code></pre>\n<p>has largely been replaced by the newer, Promise-based Fetch API. In its simplest form, this new HTTP API is just the function fetch(). That promise is fulfilled when the HTTP response begins to arrive and the HTTP status and headers are available.</p>\n<pre><code>fetch(\"/api/user/profile\")\n\n.then(response => {\n\nif (response.ok &#x26;&#x26;  response.headers.get(\"Content-Type\") === \"application/json\") {\n\n// What can we do here? We don't actually have the response body yet.\n\n}\n\n});\n</code></pre>\n<p>But although the initial Promise is fulfilled, the body of the response may not yet have arrived. So these <code>text()</code> and<code>json()</code> methods for accessing the body of the response themselves return Promises.</p>\n<pre><code>fetch(\"/api/user/profile\")\n\n.then(response => {\n\nreturn response.json();\n\n})\n\n.then(profile => {\n\ndisplayUserProfile(profile);\n\n});\n</code></pre>\n<p>There is a second <code>then()</code> in the chain, which means that the first invocation of the <code>then()</code> method must itself return a Promise. That is not how Promises work, however.</p>\n<p>When we write a chain of <code>.then()</code> invocations, we are not registering multiple callbacks on a single Promise object. Instead, each invocation of the <code>then()</code> method returns a new Promise object. That new Promise object is not fulfilled until the function passed to <code>then()</code> is complete.</p>\n<pre><code>fetch(theURL)       // task 1; returns promise 1\n\n.then(callback1)  // task 2; returns promise 2\n\n.then(callback2); // task 3; returns promise 3\n</code></pre>\n<h3>Resolving Promises</h3>\n<p>There is actually a fourth Promise object involved as which brings up the point of what it means for a Promise to be “resolved.”</p>\n<p>fetch() returns a Promise object which, when fulfilled, passes a Response object to the callback function we register. This Response object has <code>.text(), .json(),</code> and other methods to request the body of the HTTP response in various forms. But since the body may not yet have arrived, these methods must return Promise objects.</p>\n<p>“task 2” calls the <code>.json()</code> method and returns its value. This is the fourth Promise object, and it is the return value of the <code>callback1()</code> function.</p>\n<p>Let’s consider:</p>\n<pre><code>function c1(response) {\n\nlet p4 = response.json();\n\nreturn p4;\n\n}\n\n// callback 1\n\n// returns promise 4\n\nfunction c2(profile) {\n\ndisplayUserProfile(profile);\n\n}\n\n// callback 2\n\nlet p1 = fetch(\"/api/user/profile\");\n\npromise 1, task 1\n\nlet p2 = p1.then(c1);\n\npromise 2, task 2\n\nlet p3 = p2.then(c2);\n\npromise 3, task 3\n</code></pre>\n<p>In order for Promise chains to work usefully, the output of task 2 must become the input to task 3. The input to task 3 is the body of the URL that was fetched, parsed as a JSON object. But the return value of callback c1 is not a JSON object, but Promise p4 for that JSON object.</p>\n<p>When p1 is fulfilled, c1 is invoked, and task 2 begins. And when p2 is fulfilled, c2 is invoked, and task 3 begins.</p>\n<p>And when p2 is fulfilled, c2 is invoked, and task 3 begins. But just because task 2 begins when c1 is invoked,it does not mean that task 2 must end when c1 returns.</p>\n<p>Promises are about managing asynchronous tasks, and if task 2 is asynchronous, then that task will not be complete by the time the callback returns.</p>\n<p>When you pass a callback c to the <code>then()</code> method, <code>then()</code> returns a Promise p and arranges to asynchronously invoke c at some later time. The callback performs some computation and returns a value v. When the callback returns, p is resolved with the value v. When a Promise is resolved with a value that is not itself a Promise, it is immediately fulfilled with that value.</p>\n<p>So if c returns a non-Promise, that return value becomes the value of p, p is fulfilled and we are done. But if the return value v is itself a Promise, then p is resolved but not yet fulfilled.</p>\n<p>At this stage, p cannot settle until the Promise v settles. If v is fulfilled, then p will be fulfilled to the same value. If v is rejected, then p will be rejected for the same reason. This is what the “resolved” state of a Promise means</p>\n<p>the Promise has become associated with, or “locked onto,” another Promise. We don’t know yet whether p will be fulfilled or rejected, but our callback c no longer has any control over that. p is “resolved” in the sense that its fate now depends entirely on what happens to Promise v.</p>\n<p>Let’s bring this back to our URL-fetching example. When c1 returns p4, p2 is resolved. But being resolved is not the same as being fulfilled, so task 3 does not begin yet. When the full body of the HTTP response becomes available, then the .<code>json()</code> method can parse it and use that parsed value to fulfill p4. When p4 is fulfilled, p2 is automatically fulfilled as well, with the same parsed JSON value. At this point, the parsed JSON object is passed to c2, and task 3 begins.</p>\n<h3>More on Promises and Errors</h3>\n<p>With synchronous code, if you leave out error-handling code, you’ll at least get an exception and a stack trace that you can use to figure out what is going wrong. With asynchronous code, unhandled exceptions will often go unreported, and errors can occur silently, making them much harder to debug. The good news is that the <code>.catch()</code> method makes it easy to handle errors when working with Promises.</p>\n<p>THE CATCH AND FINALLY METHODS</p>\n<p>The <code>.catch()</code> method of a Promise is simply a shorthand way to call <code>.then()</code> with null as the first argument and an error-handling callback as the second argument.</p>\n<p>Normal exceptions don’t work with asynchronous code. The <code>.catch()</code> method of Promises is an alternative that does work for asynchronous code.</p>\n<pre><code>fetch(\"/api/user/profile\")\n\n.then(response => {\n\nif (!response.ok) {\n\nreturn null;\n\n}\n\nlet type = response.headers.get(\"content-type\");\n\nif (type !== \"application/json\") {\n\nthrow new TypeError(`Expected JSON, got ${type}`);\n\n}\n\nreturn response.json();\n\n})\n\n.then(profile => {\n\nif (profile) {\n\ndisplayUserProfile(profile);\n\n}\n\nelse {\n\ndisplayLoggedOutProfilePage();\n\n}\n\n})\n\n.catch(e => {\n\nif (e instanceof NetworkError) {\n\ndisplayErrorMessage(\"Check your internet connection.\");\n\n}\n\nelse if (e instanceof TypeError) {\n\ndisplayErrorMessage(\"Something is wrong with our server!\");\n\n}\n\nelse {\n\nconsole.error(e);\n\n}\n\n});\n</code></pre>\n<p>p1 is the Promise returned by the <code>fetch()</code> call</p>\n<p>p2 is the Promise returned by the first <code>.then()</code> call</p>\n<p>c1 is the callback that we pass to that .<code>then()</code> call</p>\n<p>p3 is the Promise returned by the second <code>.then()</code> call</p>\n<p>c2 is the callback we pass to that call</p>\n<p>c3 is the callback that we pass to the <code>.catch()</code> call</p>\n<p>The first thing that could fail is the fetch() request itself. Let’s say p1 was rejected with a NetworkError object.</p>\n<p>We didn’t pass an error-handling callback function as the second argument to the <code>.then()</code> call, so p2 rejects as well with the same NetworkError object.</p>\n<p>Without a handler, though, p2 is rejected, and then p3 is rejected for the same reason.</p>\n<p>At this point, the c3 error-handling callback is called, and the NetworkError-specific code within it runs.</p>\n<p>There are a couple of things worth noting about this code. First, notice that the error object thrown with a regular, synchronous throw statement ends up being handled asynchronously with a <code>.catch()</code> method invocation in a Promise chain. This should make it clear why this shorthand method is preferred over passing a second argument to .<code>then()</code>, and also why it is so idiomatic to end Promise chains with a <code>.catch()</code> call.</p>\n<p>it is also perfectly valid to use <code>.catch()</code> elsewhere in a Promise chain. If one of the stages in your Promise chain can fail with an error, and if the error is some kind of recoverable error that should not stop the rest of the chain from running, then you can insert a <code>.catch()</code> call in the chain, resulting in code that might look like this:</p>\n<pre><code>startAsyncOperation()\n\n.then(doStageTwo)\n\n.catch(recoverFromStageTwoError)\n\n.then(doStageThree)\n\n.then(doStageFour)\n\n.catch(logStageThreeAndFourErrors);\n</code></pre>\n<p>If the callback returns normally, then the <code>.catch()</code> callback will be skipped, and the return value of the previous callback will become the input to the next .<code>then()</code> callback.</p>\n<p>Once an error has been passed to a <code>.catch()</code> callback, it stops propagating down the Promise chain. A <code>.catch()</code> callback can throw a new error, but if it returns normally, than that return value is used to resolve and/or fulfill the associated Promise, and<br>\nthe error stops propagating.</p>\n<p>Sometimes, in complex network environments, errors can occur more or less at random, and it can be appropriate to handle those errors by simply retrying the asynchronous request.</p>\n<pre><code>queryDatabase()\n\n.catch(e => wait(500).then(queryDatabase))\n\n.then(displayTable)\n\n.catch(displayDatabaseError);\n</code></pre>\n<h3>Promises in Parallel</h3>\n<p>Sometimes,we want to execute a number of asynchronous operations in parallel. The function <code>Promise.all()</code> can do this. <code>Promise.all()</code> takes an array of Promise objects as its input and returns a Promise.</p>\n<p>The returned Promise will be rejected if any of the input Promises are rejected. Otherwise, it will be fulfilled with an array of the fulfillment values of each of the input Promises.</p>\n<pre><code>const urls = [ /* zero or more URLs here */ ];\n\npromises = urls.map(url => fetch(url).then(r => r.text()));\n\nPromise.all(promises)\n\n.then(bodies => { /* do something with the array of strings */ })\n\n.catch(e => console.error(e));\n</code></pre>\n<p>The Promise returned by <code>Promise.all()</code> rejects when any of the input Promises is rejected. This happens immediately upon the first rejection and can happen while other input Promises are still pending. In ES2020, <code>Promise.allSettled()</code> takes an array of input<br>\nPromises and returns a Promise, just like Promise.all() does. But <code>Promise.allSettled()</code> never rejects the returned Promise, and it does not fulfill that Promise until all of the input Promises have settled. The Promise resolves to an array of objects, with one object for each input Promise. Each of these returned objects has a status property set to \"fulfilled\" or \"rejected.\" If the status is \"fulfilled\", then the object will also have a value property that gives the fulfillment value. And if the status is \"rejected\", then the object will also have a reason property that gives the error or rejection value of the corresponding Promise.</p>\n<pre><code>Promise.allSettled([Promise.resolve(1), Promise.reject(2),3]).then(results => {\n\nresults[0] // => { status: \"fulfilled\", value: 1 }\n\nresults[1] // => { status: \"rejected\", reason: 2 }\n\nresults[2] // => { status: \"fulfilled\", value: 3 }\n\n});\n</code></pre>\n<p>Occasionally, you may want to run a number of Promises at once but may only care about the value of the first one to fulfill. In that case, you can use <code>Promise.race()</code> instead of <code>Promise.all()</code>. It returns a Promise that is fulfilled or rejected when the first of the Promises in the input array is fulfilled or rejected.</p>\n<h3>Making Promises</h3>\n<h3>Promises in Sequence</h3>\n<h3>async and await</h3>\n<p>These new keywords dramatically simplify the use of Promises and allow us to write Promise-based, asynchronous code that looks like synchronous code that blocks while waiting for network responses or other asynchronous events.</p>\n<p>Asynchronous code can’t return a value or throw an exception the way that regular synchronous code can. And this is why Promises are designed the way the are. The value of a fulfilled Promise is like the return value of a synchronous function. And the value of a rejected Promise is like a value thrown by a synchronous function.</p>\n<p><code>async</code> and <code>await</code> take efficient, Promise-based code and hide the Promises so that your asynchronous code can be as easy to read and as easy to reason about as inefficient, blocking, synchronous code.</p>\n<p>Given a Promise object p, the expression await p waits until p settles. If p fulfills, then the value of await p is the fulfillment value of p. On the other hand, if p is rejected, then the await p expression throws the rejection value of p.</p>\n<pre><code>let response = await fetch(\"/api/user/profile\");\n\nlet profile = await response.json();\n</code></pre>\n<p>It is critical to understand right away that the <code>await</code> keyword does not cause your program to block and literally do nothing until the specified Promise settles. The code remains asynchronous, and the <code>await</code> simply disguises this fact. This means that any code that uses await is itself asynchronous.</p>\n<h3>async Functions</h3>\n<p>Because any code that uses await is asynchronous, there is one critical rule: you can only use the await keyword within functions that have been declared with the <code>async</code> keyword.</p>\n<pre><code>async function getHighScore() {\n\nlet response = await fetch(\"/api/user/profile\");\n\nlet profile = await response.json();\n\nreturn profile.highScore;\n\n}\n</code></pre>\n<p>Declaring a function <code>async</code> means that the return value of the function will be a Promise even if no Promise-related code appears in the body of the function.</p>\n<p>The <code>getHighScore()</code> function is declared <code>async</code>, so it returns a Promise. And because it returns a Promise, we can use the <code>await</code> keyword with it:</p>\n<pre><code>displayHighScore(await getHighScore());\n</code></pre>\n<h3>Awaiting Multiple Promises</h3>\n<p>Suppose that we’ve written our <code>getJSON()</code> function using async:</p>\n<pre><code>async function getJSON(url) {\n\nlet response = await fetch(url);\n\nlet body = await response.json();\n\nreturn body;\n\n}\n</code></pre>\n<p>And now suppose that we want to fetch two JSON values with this function</p>\n<pre><code>let value1 = await getJSON(url1);\n\nlet value2 = await getJSON(url2);\n</code></pre>\n<p>The problem with this code is that it is unnecessarily sequential: the fetch of the second URL will not begin until the first fetch is complete. If the second URL does not depend on the value obtained from the firstURL, then we should probably try to fetch the two values at the same time.</p>\n<pre><code>let [value1, value2] = await Promise.all([getJSON(url1), getJSON(url2)]);\n</code></pre>\n<h3>The for/await Loop</h3>\n<p>Suppose you have an array of URLs:</p>\n<pre><code>const urls = [url1, url2, url3];\n</code></pre>\n<p>You can call fetch() on each URL to get an array of Promises:</p>\n<pre><code>const promises = urls.map(url => fetch(url));\n</code></pre>\n<p>We could now use<code>Promise.all()</code> to wait for all the Promises in the array to be fulfilled. But suppose we want the results of the first fetch as soon as they become available and don’t want to wait for all the URLs to be fetched.</p>\n<pre><code>for(const promise of promises) {\n\nresponse = await promise;\n\nhandle(response);\n\n}\n</code></pre>\n<p>←></p>\n<pre><code>for await (const response of promises) {\n\nhandle(response);\n\n}\n</code></pre>\n<p>both examples will only work if they are within functions declared async; a <code>for/await</code> loop is no different than a regular await expression in that way</p>"},{"url":"/docs/react/react2/","relativePath":"docs/react/react2.md","relativeDir":"docs/react","base":"react2.md","name":"react2","frontmatter":{"title":"Intro To React","weight":0,"excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<h1>Introduction to React for Complete Beginners</h1>\n<p>All of the code examples below will be included a second time at the bottom of this article as an embedded gist.</p>\n<hr>\n<h3>Introduction to React for Complete Beginners</h3>\n<p>All of the code examples below will be included a second time at the bottom of this article as an embedded gist, so that it is properly syntax highlighted.</p>\n<p>React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript.</p>\n<figure><img src=\"https://cdn-images-1.medium.com/max/1200/0*Olfj44MF6WSzvlSM.png\" class=\"graf-image\" /></figure>\n<h3>React</h3>\n<blockquote>\n<p><em>React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript</em></p>\n</blockquote>\n<blockquote>\n<p><em>because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX</em></p>\n</blockquote>\n<blockquote>\n<p><em>include the code you want to be treated as JavaScript within curly braces: { ‘this is treated as JavaScript code’ }</em></p>\n</blockquote>\n<blockquote>\n<p><em>JSX code must be compiled into JavaScript</em></p>\n</blockquote>\n<blockquote>\n<p><em>under the hood the challenges are calling ReactDOM.render (JSX, document.getElementById(‘root’))</em></p>\n</blockquote>\n<blockquote>\n<p><em>One important thing to know about nested JSX is that it must return a single element.</em></p>\n</blockquote>\n<blockquote>\n<p><em>For instance, several JSX elements written as siblings with no parent wrapper element will not transpile.</em></p>\n</blockquote>\n<hr>\n<h3>From the React Docs:</h3>\n<h3>What is React?</h3>\n<p>React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called “components”.</p>\n<p>React has a few different kinds of components, but we’ll start with <code>React.Component</code> subclasses:</p>\n<pre><code>class ShoppingList extends React.Component {\n  render() {\n    return (\n      &#x3C;div className=\"shopping-list\">\n        &#x3C;h1>Shopping List for {this.props.name}&#x3C;/h1>\n        &#x3C;ul>\n          &#x3C;li>Instagram&#x3C;/li>\n          &#x3C;li>WhatsApp&#x3C;/li>\n          &#x3C;li>Oculus&#x3C;/li>\n        &#x3C;/ul>\n      &#x3C;/div>\n    );\n  }\n}\n\n// Example usage: &#x3C;ShoppingList name=\"Mark\" />\n</code></pre>\n<p>We’ll get to the funny XML-like tags soon. We use components to tell React what we want to see on the screen. When our data changes, React will efficiently update and re-render our components.</p>\n<p>Here, ShoppingList is a <strong>React component class</strong>, or <strong>React component type</strong>. A component takes in parameters, called <code>props</code> (short for “properties”), and returns a hierarchy of views to display via the <code>render</code> method.</p>\n<p>The <code>render</code> method returns a <em>description</em> of what you want to see on the screen. React takes the description and displays the result. In particular, <code>render</code> returns a <strong>React element</strong>, which is a lightweight description of what to render. Most React developers use a special syntax called “JSX” which makes these structures easier to write. The <code>&#x3C;div /></code> syntax is transformed at build time to <code>React.createElement('div')</code>. The example above is equivalent to:</p>\n<pre><code>return React.createElement('div', {className: 'shopping-list'},\n  React.createElement('h1', /* ... h1 children ... */),\n  React.createElement('ul', /* ... ul children ... */)\n);\n</code></pre>\n<hr>\n<h3>Valid JSX:</h3>\n<pre><code>&#x3C;div>\n  &#x3C;p>Paragraph One&#x3C;/p>\n  &#x3C;p>Paragraph Two&#x3C;/p>\n  &#x3C;p>Paragraph Three&#x3C;/p>\n&#x3C;/div>\n</code></pre>\n<hr>\n<h3>Invalid JSX:</h3>\n<pre><code>&#x3C;p>Paragraph One&#x3C;/p>\n&#x3C;p>Paragraph Two&#x3C;/p>\n&#x3C;p>Paragraph Three&#x3C;/p>\n</code></pre>\n<h4>To put comments inside JSX, you use the syntax {/* */} to wrap around the comment text.</h4>\n<p>To put comments inside JSX, you use the syntax {/* */} to wrap around the comment text.</p>\n<p>The code editor has a JSX element similar to what you created in the last challenge. Add a comment somewhere within the provided div element, without modifying the existing h1 or p elements.</p>\n<pre><code>const JSX = (\n  &#x3C;div>\n  {/* This is a comment */}\n    &#x3C;h1>This is a block of JSX&#x3C;/h1>\n    &#x3C;p>Here's a subtitle&#x3C;/p>\n  &#x3C;/div>\n);\n</code></pre>\n<hr>\n<blockquote>\n<p><em>With React, we can render this JSX directly to the HTML DOM using React’s rendering API known as ReactDOM.</em></p>\n</blockquote>\n<blockquote>\n<p><em>ReactDOM offers a simple method to render React elements to the DOM which looks like this:</em></p>\n</blockquote>\n<p><code>ReactDOM.render(componentToRender, targetNode)</code></p>\n<ul>\n<li><span id=\"f724\">the first argument is the React element or component that you want to render,</span></li>\n<li><span id=\"7093\">and the second argument is the DOM node that you want to render the component to.</span></li>\n</ul>\n<blockquote>\n<p><em>ReactDOM.render() must be called after the JSX element declarations, just like how you must declare variables before using them.</em></p>\n</blockquote>\n<blockquote>\n<p><em>key difference in JSX is that you can no longer use the word class to define HTML classes.</em></p>\n</blockquote>\n<ul>\n<li><span id=\"aafc\">— -> This is because class is a reserved word in JavaScript. Instead, JSX uses className</span></li>\n</ul>\n<blockquote>\n<p><em>the naming convention for all HTML attributes and event references in JSX become camelCase</em></p>\n</blockquote>\n<blockquote>\n<p><em>a click event in JSX is onClick, instead of onclick. Likewise, onchange becomes onChange. While this is a subtle difference, it is an important one to keep in mind moving forward.</em></p>\n</blockquote>\n<h3>Apply a class of myDiv to the div provided in the JSX code.</h3>\n<ul>\n<li><span id=\"9500\">The constant JSX should return a div element.</span></li>\n<li><span id=\"8d42\">The div should have a class of myDiv.</span></li>\n</ul>\n<!-- -->\n<pre><code>const JSX = (\n  &#x3C;div>\n    &#x3C;h1>Add a class to this div&#x3C;/h1>\n  &#x3C;/div>\n);\n</code></pre>\n<h3>Ans:</h3>\n<pre><code>const JSX = (\n  &#x3C;div className=\"myDiv\">\n    &#x3C;h1>Add a class to this div&#x3C;/h1>\n  &#x3C;/div>\n);\n</code></pre>\n<h3>React: Learn About Self-Closing JSX Tags</h3>\n<p>-Another important way in which JSX differs from HTML is in the idea of the self-closing tag.</p>\n<blockquote>\n<p><em>In HTML, almost all tags have both an opening and closing tag:</em> <code>&#x3C;div>&#x3C;/div>;</code> <em>the closing tag always has a forward slash before the tag name that you are closing.</em></p>\n</blockquote>\n<blockquote>\n<p><em>there are special instances in HTML called “self-closing tags”, or tags that don’t require both an opening and closing tag before another tag can start.</em></p>\n</blockquote>\n<blockquote>\n<p><em>For example the line-break tag can be written as</em> <code>&#x3C;br></code> <em>or as</em> <code>&#x3C;br />,</code> <em>but should never be written as</em> <code>&#x3C;br>&#x3C;/br></code><em>, since it doesn't contain any content.</em></p>\n</blockquote>\n<blockquote>\n<p><em>In JSX, the rules are a little different. Any JSX element can be written with a self-closing tag, and every element must be closed.<br>\nThe line-break tag, for example, must always be written as</em> <code>&#x3C;br /></code> <em>in order to be valid JSX that can be transpiled.<br>\nA</em> <code>&#x3C;div></code><em>, on the other hand, can be written as</em> <code>&#x3C;div /></code><em>or</em><code>&#x3C;div>&#x3C;/div></code><em>.<br>\nThe difference is that in the first syntax version there is no way to include anything in the</em> <code>&#x3C;div /></code><em>.</em></p>\n</blockquote>\n<h3>Fix the errors in the code editor so that it is valid JSX and successfully transpiles. Make sure you don’t change any of the content — you only need to close tags where they are needed.</h3>\n<pre><code>const JSX = (\n  &#x3C;div>\n    &#x3C;h2>Welcome to React!&#x3C;/h2> &#x3C;br >\n    &#x3C;p>Be sure to close all tags!&#x3C;/p>\n    &#x3C;hr >\n  &#x3C;/div>\n);\n</code></pre>\n<h3>Ans:</h3>\n<pre><code>const JSX = (\n  &#x3C;div>\n    &#x3C;h2>Welcome to React!&#x3C;/h2> &#x3C;br />\n    &#x3C;p>Be sure to close all tags!&#x3C;/p>\n    &#x3C;hr />\n  &#x3C;/div>\n);\n</code></pre>\n<hr>\n<h3>React: Create a Stateless Functional Component</h3>\n<blockquote>\n<p><em>There are two ways to create a React component. The first way is to use a JavaScript function.</em></p>\n</blockquote>\n<blockquote>\n<p><em>Defining a component in this way creates a stateless functional component.</em></p>\n</blockquote>\n<blockquote>\n<p><em>think of a stateless component as one that can receive data and render it, but does not manage or track changes to that data.</em></p>\n</blockquote>\n<h4>To create a component with a function, you simply write a JavaScript function that returns either JSX or null</h4>\n<ul>\n<li><span id=\"b514\">React requires your function name to begin with a capital letter.</span></li>\n</ul>\n<blockquote>\n<p><em>Here’s an example of a stateless functional component that assigns an HTML class in JSX:</em></p>\n</blockquote>\n<pre><code>// After being transpiled, the &#x3C;div> will have a CSS class of 'customClass'\nconst DemoComponent = function() {\n  return (\n    &#x3C;div className='customClass' />\n  );\n};\n</code></pre>\n<blockquote>\n<p><em>Because a JSX component represents HTML, you could put several components together to create a more complex HTML page.</em></p>\n</blockquote>\n<h3>The code editor has a function called MyComponent. Complete this function so it returns a single div element which contains some string of text.</h3>\n<p>Note: The text is considered a child of the div element, so you will not be able to use a self-closing tag.</p>\n<pre><code>const MyComponent = function() {\n  // Change code below this line\n\n  // Change code above this line\n}\n</code></pre>\n<h3>ANS:</h3>\n<pre><code>const MyComponent = function() {\n  // Change code below this line\n\nreturn (\n   &#x3C;div> Some Text &#x3C;/div >\n  );\n\n  // Change code above this line\n};\n</code></pre>\n<hr>\n<h3>React: Create a React Component</h3>\n<blockquote>\n<p><em>The other way to define a React component is with the ES6 class syntax. In the following example, Kitten extends React.Component:</em></p>\n</blockquote>\n<pre><code>class Kitten extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      &#x3C;h1>Hi&#x3C;/h1>\n    );\n  }\n}\n</code></pre>\n<blockquote>\n<p><em>This creates an ES6 class Kitten which extends the React.Component class.</em></p>\n</blockquote>\n<blockquote>\n<p><em>So the Kitten class now has access to many useful React features, such as local state and lifecycle hooks.</em></p>\n</blockquote>\n<blockquote>\n<p><em>Also notice the Kitten class has a constructor defined within it that calls super()</em></p>\n</blockquote>\n<blockquote>\n<p><em>It uses super() to call the constructor of the parent class, in this case React.Component</em></p>\n</blockquote>\n<blockquote>\n<p><em>The constructor is a special method used during the initialization of objects that are created with the class keyword. It is best practice to call a component’s constructor with super, and pass props to both.</em></p>\n</blockquote>\n<blockquote>\n<p><em>This makes sure the component is initialized properly. For now, know that it is standard for this code to be included.</em></p>\n</blockquote>\n<h3>MyComponent is defined in the code editor using class syntax. Finish writing the render method so it returns a div element that contains an h1 with the text Hello React!.</h3>\n<pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // Change code below this line\n\n    // Change code above this line\n  }\n};\n</code></pre>\n<h3>ANS:</h3>\n<pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    // Change code below this line\n return (\n   &#x3C;div>\n      &#x3C;h1>Hello React!&#x3C;/h1>\n      &#x3C;/div>\n    );\n\n    // Change code above this line\n  }\n};\n</code></pre>\n<hr>\n<h3>React: Create a Component with Composition</h3>\n<blockquote>\n<p><em>Imagine you are building an App and have created three components, a Navbar, Dashboard, and Footer.</em></p>\n</blockquote>\n<blockquote>\n<p><em>To compose these components together, you could create an App parent component which renders each of these three components as children. To render a component as a child in a React component, you include the component name written as a custom HTML tag in the JSX.</em></p>\n</blockquote>\n<ul>\n<li><span id=\"000b\">For example, in the render method you could write:</span></li>\n</ul>\n<!-- -->\n<pre><code>return (\n &#x3C;App>\n  &#x3C;Navbar />\n  &#x3C;Dashboard />\n  &#x3C;Footer />\n &#x3C;/App>\n)\n</code></pre>\n<blockquote>\n<p><em>When React encounters a custom HTML tag that references another component (a component name wrapped in &#x3C; /> like in this example), it renders the markup for that component in the location of the tag. This should illustrate the parent/child relationship between the App component and the Navbar, Dashboard, and Footer.</em></p>\n</blockquote>\n<h3>Challenge:</h3>\n<blockquote>\n<p><em>In the code editor, there is a simple functional component called ChildComponent and a class component called ParentComponent. Compose the two together by rendering the ChildComponent within the ParentComponent. Make sure to close the ChildComponent tag with a forward slash.</em></p>\n</blockquote>\n<ul>\n<li><span id=\"2ed5\">Note:<strong>ChildComponent is defined with an ES6 arrow function because this is a very common practice when using React</strong>.</span></li>\n<li><span id=\"fddd\">However, know that this is just a function.</span></li>\n</ul>\n<!-- -->\n<pre><code>const ChildComponent = () => {\n  return (\n    &#x3C;div>\n      &#x3C;p>I am the child&#x3C;/p>\n    &#x3C;/div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &#x3C;div>\n        &#x3C;h1>I am the parent&#x3C;/h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      &#x3C;/div>\n    );\n  }\n};\n</code></pre>\n<p>⌛The React component should return a single div element.<br>\n⌛The component should return two nested elements.<br>\n⌛The component should return the ChildComponent as its second child.</p>\n<h3>Ans:</h3>\n<pre><code>const ChildComponent = () => {\n  return (\n    &#x3C;div>\n      &#x3C;p>I am the child&#x3C;/p>\n    &#x3C;/div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &#x3C;div>\n        &#x3C;h1>I am the parent&#x3C;/h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      &#x3C;/div>\n    );\n  }\n};\n</code></pre>\n<h3>More Examples:</h3>\n<p>For more content follow me on GitHub:</p>\n<p><a href=\"https://github.com/bgoonz\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz\"><strong>bgoonz - Overview</strong><br />\n<em>Web Developer, Electrical Engineer https://bryanguner.medium.com/ https://portfolio42.netlify.app/…</em>github.com</a><a href=\"https://github.com/bgoonz\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><em>More content at</em> <a href=\"http://plainenglish.io/\" class=\"markup--anchor markup--p-anchor\"><em>plainenglish.io</em></a></p>\n<p>By <a href=\"https://medium.com/@bryanguner\" class=\"p-author h-card\">Bryan Guner</a> on <a href=\"https://medium.com/p/8021738aa1ad\">May 19, 2021</a>.</p>\n<p><a href=\"https://medium.com/@bryanguner/introduction-to-react-for-complete-beginners-8021738aa1ad\" class=\"p-canonical\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on May 23, 2021.</p>\n<h1>Snippets:</h1>\n<p>Renders an accordion menu with multiple collapsible content elements.</p>\n<ul>\n<li>Define an <code>AccordionItem</code> component, that renders a <code>&lt;button&gt;</code> which is used to update the component and notify its parent via the <code>handleClick</code> callback.</li>\n<li>Use the <code>isCollapsed</code> prop in <code>AccordionItem</code> to determine its appearance and set an appropriate <code>className</code>.</li>\n<li>Define an <code>Accordion</code> component that uses the <code>useState()</code> hook to initialize the value of the <code>bindIndex</code> state variable to <code>defaultIndex</code>.</li>\n<li>Filter <code>children</code> to remove unnecessary nodes except for <code>AccordionItem</code> by identifying the function’s name.</li>\n<li>Use <code>Array.prototype.map()</code> on the collected nodes to render the individual collapsible elements.</li>\n<li>Define <code>changeItem</code>, which will be executed when clicking an <code>AccordionItem</code>’s <code>&lt;button&gt;</code>.</li>\n<li><code>changeItem</code> executes the passed callback, <code>onItemClick</code>, and updates <code>bindIndex</code> based on the clicked element.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb1-1\" title=\"1\"><span class=\"fu\">.accordion-item.collapsed</span> {</a>\n<a class=\"sourceLine\" id=\"cb1-2\" title=\"2\">  <span class=\"kw\">display</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb1-3\" title=\"3\">}</a>\n<a class=\"sourceLine\" id=\"cb1-4\" title=\"4\"></a>\n<a class=\"sourceLine\" id=\"cb1-5\" title=\"5\"><span class=\"fu\">.accordion-item.expanded</span> {</a>\n<a class=\"sourceLine\" id=\"cb1-6\" title=\"6\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb1-7\" title=\"7\">}</a>\n<a class=\"sourceLine\" id=\"cb1-8\" title=\"8\"></a>\n<a class=\"sourceLine\" id=\"cb1-9\" title=\"9\"><span class=\"fu\">.accordion-button</span> {</a>\n<a class=\"sourceLine\" id=\"cb1-10\" title=\"10\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb1-11\" title=\"11\">  <span class=\"kw\">width</span>: <span class=\"dv\">100</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb1-12\" title=\"12\">}</a>\n</div>\n<pre><code class=\"language-js\">const AccordionItem = ({ label, isCollapsed, handleClick, children }) =&#x26;gt; {\n  return (\n    &#x26;lt;&#x26;gt;\n      &#x26;lt;button className=&#x26;quot;accordion-button&#x26;quot; onClick={handleClick}&#x26;gt;\n        {label}\n      &#x26;lt;/button&#x26;gt;\n      &#x26;lt;div\n        className={`accordion-item ${isCollapsed ? &#x26;quot;collapsed&#x26;quot; : &#x26;quot;expanded&#x26;quot;}`}\n        aria-expanded={isCollapsed}\n      &#x26;gt;\n        {children}\n      &#x26;lt;/div&#x26;gt;\n    &#x26;lt;/&#x26;gt;\n  );\n};\n\nconst Accordion = ({ defaultIndex, onItemClick, children }) =&#x26;gt; {\nconst [bindIndex, setBindIndex] = React.useState(defaultIndex);\n\nconst changeItem = (itemIndex) =&#x26;gt; {\nif (typeof onItemClick === &#x26;quot;function&#x26;quot;) onItemClick(itemIndex);\nif (itemIndex !== bindIndex) setBindIndex(itemIndex);\n};\nconst items = children.filter((item) =&#x26;gt; item.type.name === &#x26;quot;AccordionItem&#x26;quot;);\n\nreturn (\n&#x26;lt;&#x26;gt;\n{items.map(({ props }) =&#x26;gt; (\n&#x26;lt;AccordionItem\nisCollapsed={bindIndex !== props.index}\nlabel={props.label}\nhandleClick={() =&#x26;gt; changeItem(props.index)}\nchildren={props.children}\n/&#x26;gt;\n))}\n&#x26;lt;/&#x26;gt;\n);\n};\n\n\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(\n  &#x26;lt;Accordion defaultIndex=&#x26;quot;1&#x26;quot; onItemClick={console.log}&#x26;gt;\n    &#x26;lt;AccordionItem label=&#x26;quot;A&#x26;quot; index=&#x26;quot;1&#x26;quot;&#x26;gt;\n      Lorem ipsum\n    &#x26;lt;/AccordionItem&#x26;gt;\n    &#x26;lt;AccordionItem label=&#x26;quot;B&#x26;quot; index=&#x26;quot;2&#x26;quot;&#x26;gt;\n      Dolor sit amet\n    &#x26;lt;/AccordionItem&#x26;gt;\n  &#x26;lt;/Accordion&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders an alert component with <code>type</code> prop.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>isShown</code> and <code>isLeaving</code> state variables and set both to <code>false</code> initially.</li>\n<li>Define <code>timeoutId</code> to keep the timer instance for clearing on component unmount.</li>\n<li>Use the <code>useEffect()</code> hook to update the value of <code>isShown</code> to <code>true</code> and clear the interval by using <code>timeoutId</code> when the component is unmounted.</li>\n<li>Define a <code>closeAlert</code> function to set the component as removed from the DOM by displaying a fading out animation and set <code>isShown</code> to <code>false</code> via <code>setTimeout()</code>.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb4-1\" title=\"1\"><span class=\"im\">@keyframes</span> leave {</a>\n<a class=\"sourceLine\" id=\"cb4-2\" title=\"2\">  <span class=\"dv\">0%</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-3\" title=\"3\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">1</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-4\" title=\"4\">  }</a>\n<a class=\"sourceLine\" id=\"cb4-5\" title=\"5\">  <span class=\"dv\">100%</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-6\" title=\"6\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-7\" title=\"7\">  }</a>\n<a class=\"sourceLine\" id=\"cb4-8\" title=\"8\">}</a>\n<a class=\"sourceLine\" id=\"cb4-9\" title=\"9\"></a>\n<a class=\"sourceLine\" id=\"cb4-10\" title=\"10\"><span class=\"fu\">.alert</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-11\" title=\"11\">  <span class=\"kw\">padding</span>: <span class=\"dv\">0.75</span><span class=\"dt\">rem</span> <span class=\"dv\">0.5</span><span class=\"dt\">rem</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-12\" title=\"12\">  <span class=\"kw\">margin-bottom</span>: <span class=\"dv\">0.5</span><span class=\"dt\">rem</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-13\" title=\"13\">  <span class=\"kw\">text-align</span>: <span class=\"dv\">left</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-14\" title=\"14\">  <span class=\"kw\">padding-right</span>: <span class=\"dv\">40</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-15\" title=\"15\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">4</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-16\" title=\"16\">  <span class=\"kw\">font-size</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-17\" title=\"17\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-18\" title=\"18\">}</a>\n<a class=\"sourceLine\" id=\"cb4-19\" title=\"19\"></a>\n<a class=\"sourceLine\" id=\"cb4-20\" title=\"20\"><span class=\"fu\">.alert.warning</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-21\" title=\"21\">  <span class=\"kw\">color</span>: <span class=\"cn\">#856404</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-22\" title=\"22\">  <span class=\"kw\">background-color</span>: <span class=\"cn\">#fff3cd</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-23\" title=\"23\">  <span class=\"kw\">border-color</span>: <span class=\"cn\">#ffeeba</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-24\" title=\"24\">}</a>\n<a class=\"sourceLine\" id=\"cb4-25\" title=\"25\"></a>\n<a class=\"sourceLine\" id=\"cb4-26\" title=\"26\"><span class=\"fu\">.alert.error</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-27\" title=\"27\">  <span class=\"kw\">color</span>: <span class=\"cn\">#721c24</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-28\" title=\"28\">  <span class=\"kw\">background-color</span>: <span class=\"cn\">#f8d7da</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-29\" title=\"29\">  <span class=\"kw\">border-color</span>: <span class=\"cn\">#f5c6cb</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-30\" title=\"30\">}</a>\n<a class=\"sourceLine\" id=\"cb4-31\" title=\"31\"></a>\n<a class=\"sourceLine\" id=\"cb4-32\" title=\"32\"><span class=\"fu\">.alert.leaving</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-33\" title=\"33\">  <span class=\"kw\">animation</span>: leave <span class=\"dv\">0.5</span><span class=\"dt\">s</span> <span class=\"dv\">forwards</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-34\" title=\"34\">}</a>\n<a class=\"sourceLine\" id=\"cb4-35\" title=\"35\"></a>\n<a class=\"sourceLine\" id=\"cb4-36\" title=\"36\"><span class=\"fu\">.alert</span> <span class=\"fu\">.close</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-37\" title=\"37\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-38\" title=\"38\">  <span class=\"kw\">top</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-39\" title=\"39\">  <span class=\"kw\">right</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-40\" title=\"40\">  <span class=\"kw\">padding</span>: <span class=\"dv\">0</span> <span class=\"dv\">0.75</span><span class=\"dt\">rem</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-41\" title=\"41\">  <span class=\"kw\">color</span>: <span class=\"cn\">#333</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-42\" title=\"42\">  <span class=\"kw\">border</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-43\" title=\"43\">  <span class=\"kw\">height</span>: <span class=\"dv\">100</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-44\" title=\"44\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-45\" title=\"45\">  <span class=\"kw\">background</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-46\" title=\"46\">  <span class=\"kw\">font-weight</span>: <span class=\"dv\">600</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-47\" title=\"47\">  <span class=\"kw\">font-size</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-48\" title=\"48\">}</a>\n<a class=\"sourceLine\" id=\"cb4-49\" title=\"49\"></a>\n<a class=\"sourceLine\" id=\"cb4-50\" title=\"50\"><span class=\"fu\">.alert</span> <span class=\"fu\">.close</span><span class=\"in\">:after</span> {</a>\n<a class=\"sourceLine\" id=\"cb4-51\" title=\"51\">  <span class=\"kw\">content</span>: <span class=\"st\">&quot;x&quot;</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb4-52\" title=\"52\">}</a>\n</div>\n<pre><code class=\"language-js\">const Alert = ({ isDefaultShown = false, timeout = 250, type, message }) =&#x26;gt; {\n  const [isShown, setIsShown] = React.useState(isDefaultShown);\n  const [isLeaving, setIsLeaving] = React.useState(false);\n\nlet timeoutId = null;\n\nReact.useEffect(() =&#x26;gt; {\nsetIsShown(true);\nreturn () =&#x26;gt; {\nclearTimeout(timeoutId);\n};\n}, [isDefaultShown, timeout, timeoutId]);\n\nconst closeAlert = () =&#x26;gt; {\nsetIsLeaving(true);\ntimeoutId = setTimeout(() =&#x26;gt; {\nsetIsLeaving(false);\nsetIsShown(false);\n}, timeout);\n};\n\nreturn (\nisShown &#x26;amp;&#x26;amp; (\n&#x26;lt;div\nclassName={`alert ${type} ${isLeaving ? &#x26;quot;leaving&#x26;quot; : &#x26;quot;&#x26;quot;}`}\nrole=&#x26;quot;alert&#x26;quot;\n&#x26;gt;\n&#x26;lt;button className=&#x26;quot;close&#x26;quot; onClick={closeAlert} /&#x26;gt;\n{message}\n&#x26;lt;/div&#x26;gt;\n)\n);\n};\n\n\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(\n  &#x26;lt;Alert type=&#x26;quot;info&#x26;quot; message=&#x26;quot;This is info&#x26;quot; /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a string as plaintext, with URLs converted to appropriate link elements.</p>\n<ul>\n<li>Use <code>String.prototype.split()</code> and <code>String.prototype.match()</code> with a regular expression to find URLs in a string.</li>\n<li>Return matched URLs rendered as <code>&lt;a&gt;</code> elements, dealing with missing protocol prefixes if necessary.</li>\n<li>Render the rest of the string as plaintext.</li>\n</ul>\n<pre><code class=\"language-js\">const AutoLink = ({ text }) =&#x26;gt; {\n  const delimiter =\n    /((?:https?:\\/\\/)?(?:(?:[a-z0-9]?(?:[a-z0-9\\-]{1,61}[a-z0-9])?\\.[^\\.|\\s])+[a-z\\.]*[a-z]+|(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3})(?::\\d{1,5})*[a-z0-9.,_\\/~#&#x26;amp;=;%+?\\-\\\\(\\\\)]*)/gi;\n\nreturn (\n&#x26;lt;&#x26;gt;\n{text.split(delimiter).map((word) =&#x26;gt; {\nconst match = word.match(delimiter);\nif (match) {\nconst url = match[0];\nreturn (\n&#x26;lt;a href={url.startsWith(&#x26;quot;http&#x26;quot;) ? url : `http://${url}`}&#x26;gt;{url}&#x26;lt;/a&#x26;gt;\n);\n}\nreturn word;\n})}\n&#x26;lt;/&#x26;gt;\n);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(\n  &#x26;lt;AutoLink text=&#x26;quot;foo bar baz http://example.org bar&#x26;quot; /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a link formatted to call a phone number (<code>tel:</code> link).</p>\n<ul>\n<li>Use <code>phone</code> to create a <code>&lt;a&gt;</code> element with an appropriate <code>href</code> attribute.</li>\n<li>Render the link with <code>children</code> as its content.</li>\n</ul>\n<pre><code class=\"language-js\">const Callto = ({ phone, children }) =&#x26;gt; {\n  return &#x26;lt;a href={`tel:${phone}`}&#x26;gt;{children}&#x26;lt;/a&#x26;gt;;\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(\n  &#x26;lt;Callto phone=&#x26;quot;+302101234567&#x26;quot;&#x26;gt;Call me!&#x26;lt;/Callto&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a carousel component.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>active</code> state variable and give it a value of <code>0</code> (index of the first item).</li>\n<li>Use the <code>useEffect()</code> hook to update the value of <code>active</code> to the index of the next item, using <code>setTimeout</code>.</li>\n<li>Compute the <code>className</code> for each carousel item while mapping over them and applying it accordingly.</li>\n<li>Render the carousel items using <code>React.cloneElement()</code> and pass down <code>...rest</code> along with the computed <code>className</code>.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb11-1\" title=\"1\"><span class=\"fu\">.carousel</span> {</a>\n<a class=\"sourceLine\" id=\"cb11-2\" title=\"2\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb11-3\" title=\"3\">}</a>\n<a class=\"sourceLine\" id=\"cb11-4\" title=\"4\"></a>\n<a class=\"sourceLine\" id=\"cb11-5\" title=\"5\"><span class=\"fu\">.carousel-item</span> {</a>\n<a class=\"sourceLine\" id=\"cb11-6\" title=\"6\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb11-7\" title=\"7\">  <span class=\"kw\">visibility</span>: <span class=\"dv\">hidden</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb11-8\" title=\"8\">}</a>\n<a class=\"sourceLine\" id=\"cb11-9\" title=\"9\"></a>\n<a class=\"sourceLine\" id=\"cb11-10\" title=\"10\"><span class=\"fu\">.carousel-item.visible</span> {</a>\n<a class=\"sourceLine\" id=\"cb11-11\" title=\"11\">  <span class=\"kw\">visibility</span>: <span class=\"dv\">visible</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb11-12\" title=\"12\">}</a>\n</div>\n<pre><code class=\"language-js\">const Carousel = ({ carouselItems, ...rest }) =&#x26;gt; {\n  const [active, setActive] = React.useState(0);\n  let scrollInterval = null;\n\nReact.useEffect(() =&#x26;gt; {\nscrollInterval = setTimeout(() =&#x26;gt; {\nsetActive((active + 1) % carouselItems.length);\n}, 2000);\nreturn () =&#x26;gt; clearTimeout(scrollInterval);\n});\n\nreturn (\n&#x26;lt;div className=&#x26;quot;carousel&#x26;quot;&#x26;gt;\n{carouselItems.map((item, index) =&#x26;gt; {\nconst activeClass = active === index ? &#x26;quot; visible&#x26;quot; : &#x26;quot;&#x26;quot;;\nreturn React.cloneElement(item, {\n...rest,\nclassName: `carousel-item${activeClass}`,\n});\n})}\n&#x26;lt;/div&#x26;gt;\n);\n};\n\n\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(\n  &#x26;lt;Carousel\n    carouselItems={[\n      &#x26;lt;div&#x26;gt;carousel item 1&#x26;lt;/div&#x26;gt;,\n      &#x26;lt;div&#x26;gt;carousel item 2&#x26;lt;/div&#x26;gt;,\n      &#x26;lt;div&#x26;gt;carousel item 3&#x26;lt;/div&#x26;gt;,\n    ]}\n  /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a component with collapsible content.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>isCollapsed</code> state variable with an initial value of <code>collapsed</code>.</li>\n<li>Use the <code>&lt;button&gt;</code> to change the component’s <code>isCollapsed</code> state and the content of the component, passed down via <code>children</code>.</li>\n<li>Determine the appearance of the content, based on <code>isCollapsed</code> and apply the appropriate <code>className</code>.</li>\n<li>Update the value of the <code>aria-expanded</code> attribute based on <code>isCollapsed</code> to make the component accessible.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb14\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb14-1\" title=\"1\"><span class=\"fu\">.collapse-button</span> {</a>\n<a class=\"sourceLine\" id=\"cb14-2\" title=\"2\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb14-3\" title=\"3\">  <span class=\"kw\">width</span>: <span class=\"dv\">100</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb14-4\" title=\"4\">}</a>\n<a class=\"sourceLine\" id=\"cb14-5\" title=\"5\"></a>\n<a class=\"sourceLine\" id=\"cb14-6\" title=\"6\"><span class=\"fu\">.collapse-content.collapsed</span> {</a>\n<a class=\"sourceLine\" id=\"cb14-7\" title=\"7\">  <span class=\"kw\">display</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb14-8\" title=\"8\">}</a>\n<a class=\"sourceLine\" id=\"cb14-9\" title=\"9\"></a>\n<a class=\"sourceLine\" id=\"cb14-10\" title=\"10\"><span class=\"fu\">.collapsed-content.expanded</span> {</a>\n<a class=\"sourceLine\" id=\"cb14-11\" title=\"11\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb14-12\" title=\"12\">}</a>\n</div>\n<pre><code class=\"language-js\">const Collapse = ({ collapsed, children }) =&#x26;gt; {\n  const [isCollapsed, setIsCollapsed] = React.useState(collapsed);\n\nreturn (\n&#x26;lt;&#x26;gt;\n&#x26;lt;button\nclassName=&#x26;quot;collapse-button&#x26;quot;\nonClick={() =&#x26;gt; setIsCollapsed(!isCollapsed)}\n&#x26;gt;\n{isCollapsed ? &#x26;quot;Show&#x26;quot; : &#x26;quot;Hide&#x26;quot;} content\n&#x26;lt;/button&#x26;gt;\n&#x26;lt;div\nclassName={`collapse-content ${isCollapsed ? &#x26;quot;collapsed&#x26;quot; : &#x26;quot;expanded&#x26;quot;}`}\naria-expanded={isCollapsed}\n&#x26;gt;\n{children}\n&#x26;lt;/div&#x26;gt;\n&#x26;lt;/&#x26;gt;\n);\n};\n\n\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(\n  &#x26;lt;Collapse&#x26;gt;\n    &#x26;lt;h1&#x26;gt;This is a collapse&#x26;lt;/h1&#x26;gt;\n    &#x26;lt;p&#x26;gt;Hello world!&#x26;lt;/p&#x26;gt;\n  &#x26;lt;/Collapse&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a controlled <code>&lt;input&gt;</code> element that uses a callback function to inform its parent about value updates.</p>\n<ul>\n<li>Use the <code>value</code> passed down from the parent as the controlled input field’s value.</li>\n<li>Use the <code>onChange</code> event to fire the <code>onValueChange</code> callback and send the new value to the parent.</li>\n<li>The parent must update the input field’s <code>value</code> prop in order for its value to change on user input.</li>\n</ul>\n<pre><code class=\"language-js\">const ControlledInput = ({ value, onValueChange, ...rest }) =&#x26;gt; {\n  return (\n    &#x26;lt;input\n      value={value}\n      onChange={({ target: { value } }) =&#x26;gt; onValueChange(value)}\n      {...rest}\n    /&#x26;gt;\n  );\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const Form = () =&#x26;gt; {\n  const [value, setValue] = React.useState(&#x26;quot;&#x26;quot;);\n\nreturn (\n&#x26;lt;ControlledInput\ntype=&#x26;quot;text&#x26;quot;\nplaceholder=&#x26;quot;Insert some text here...&#x26;quot;\nvalue={value}\nonValueChange={setValue}\n/&#x26;gt;\n);\n};\n\nReactDOM.render(&#x26;lt;Form /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Renders a countdown timer that prints a message when it reaches zero.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create a state variable to hold the time value, initialize it from the props and destructure it into its components.</li>\n<li>Use the <code>useState()</code> hook to create the <code>paused</code> and <code>over</code> state variables, used to prevent the timer from ticking if it’s paused or the time has run out.</li>\n<li>Create a method <code>tick</code>, that updates the time values based on the current value (i.e. decreasing the time by one second).</li>\n<li>Create a method <code>reset</code>, that resets all state variables to their initial states.</li>\n<li>Use the the <code>useEffect()</code> hook to call the <code>tick</code> method every second via the use of <code>setInterval()</code> and use <code>clearInterval()</code> to clean up when the component is unmounted.</li>\n<li>Use <code>String.prototype.padStart()</code> to pad each part of the time array to two characters to create the visual representation of the timer.</li>\n</ul>\n<pre><code class=\"language-js\">const CountDown = ({ hours = 0, minutes = 0, seconds = 0 }) =&#x26;gt; {\n  const [paused, setPaused] = React.useState(false);\n  const [over, setOver] = React.useState(false);\n  const [[h, m, s], setTime] = React.useState([hours, minutes, seconds]);\n\nconst tick = () =&#x26;gt; {\nif (paused || over) return;\nif (h === 0 &#x26;amp;&#x26;amp; m === 0 &#x26;amp;&#x26;amp; s === 0) setOver(true);\nelse if (m === 0 &#x26;amp;&#x26;amp; s === 0) {\nsetTime([h - 1, 59, 59]);\n} else if (s == 0) {\nsetTime([h, m - 1, 59]);\n} else {\nsetTime([h, m, s - 1]);\n}\n};\n\nconst reset = () =&#x26;gt; {\nsetTime([parseInt(hours), parseInt(minutes), parseInt(seconds)]);\nsetPaused(false);\nsetOver(false);\n};\n\nReact.useEffect(() =&#x26;gt; {\nconst timerID = setInterval(() =&#x26;gt; tick(), 1000);\nreturn () =&#x26;gt; clearInterval(timerID);\n});\n\nreturn (\n&#x26;lt;div&#x26;gt;\n&#x26;lt;p&#x26;gt;{`${h.toString().padStart(2, &#x26;quot;0&#x26;quot;)}:${m.toString().padStart(2, &#x26;quot;0&#x26;quot;)}:${s .toString() .padStart(2, &#x26;quot;0&#x26;quot;)}`}&#x26;lt;/p&#x26;gt;\n&#x26;lt;div&#x26;gt;{over ? &#x26;quot;Time&#x26;#39;s up!&#x26;quot; : &#x26;quot;&#x26;quot;}&#x26;lt;/div&#x26;gt;\n&#x26;lt;button onClick={() =&#x26;gt; setPaused(!paused)}&#x26;gt;\n{paused ? &#x26;quot;Resume&#x26;quot; : &#x26;quot;Pause&#x26;quot;}\n&#x26;lt;/button&#x26;gt;\n&#x26;lt;button onClick={() =&#x26;gt; reset()}&#x26;gt;Restart&#x26;lt;/button&#x26;gt;\n&#x26;lt;/div&#x26;gt;\n);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(\n  &#x26;lt;CountDown hours={1} minutes={45} /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a list of elements from an array of primitives.</p>\n<ul>\n<li>Use the value of the <code>isOrdered</code> prop to conditionally render an <code>&lt;ol&gt;</code> or a <code>&lt;ul&gt;</code> list.</li>\n<li>Use <code>Array.prototype.map()</code> to render every item in <code>data</code> as a <code>&lt;li&gt;</code> element with an appropriate <code>key</code>.</li>\n</ul>\n<pre><code class=\"language-js\">const DataList = ({ isOrdered = false, data }) =&#x26;gt; {\n  const list = data.map((val, i) =&#x26;gt; &#x26;lt;li key={`${i}_${val}`}&#x26;gt;{val}&#x26;lt;/li&#x26;gt;);\n  return isOrdered ? &#x26;lt;ol&#x26;gt;{list}&#x26;lt;/ol&#x26;gt; : &#x26;lt;ul&#x26;gt;{list}&#x26;lt;/ul&#x26;gt;;\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const names = [&#x26;quot;John&#x26;quot;, &#x26;quot;Paul&#x26;quot;, &#x26;quot;Mary&#x26;quot;];\nReactDOM.render(&#x26;lt;DataList data={names} /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\nReactDOM.render(\n  &#x26;lt;DataList data={names} isOrdered /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a table with rows dynamically created from an array of primitives.</p>\n<ul>\n<li>Render a <code>&lt;table&gt;</code> element with two columns (<code>ID</code> and <code>Value</code>).</li>\n<li>Use <code>Array.prototype.map()</code> to render every item in <code>data</code> as a <code>&lt;tr&gt;</code> element with an appropriate <code>key</code>.</li>\n</ul>\n<pre><code class=\"language-js\">const DataTable = ({ data }) =&#x26;gt; {\n  return (\n    &#x26;lt;table&#x26;gt;\n      &#x26;lt;thead&#x26;gt;\n        &#x26;lt;tr&#x26;gt;\n          &#x26;lt;th&#x26;gt;ID&#x26;lt;/th&#x26;gt;\n          &#x26;lt;th&#x26;gt;Value&#x26;lt;/th&#x26;gt;\n        &#x26;lt;/tr&#x26;gt;\n      &#x26;lt;/thead&#x26;gt;\n      &#x26;lt;tbody&#x26;gt;\n        {data.map((val, i) =&#x26;gt; (\n          &#x26;lt;tr key={`${i}_${val}`}&#x26;gt;\n            &#x26;lt;td&#x26;gt;{i}&#x26;lt;/td&#x26;gt;\n            &#x26;lt;td&#x26;gt;{val}&#x26;lt;/td&#x26;gt;\n          &#x26;lt;/tr&#x26;gt;\n        ))}\n      &#x26;lt;/tbody&#x26;gt;\n    &#x26;lt;/table&#x26;gt;\n  );\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const people = [&#x26;quot;John&#x26;quot;, &#x26;quot;Jesse&#x26;quot;];\nReactDOM.render(&#x26;lt;DataTable data={people} /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Renders a file drag and drop component for a single file.</p>\n<ul>\n<li>Create a ref, called <code>dropRef</code> and bind it to the component’s wrapper.</li>\n<li>Use the <code>useState()</code> hook to create the <code>drag</code> and <code>filename</code> variables, initialized to <code>false</code> and <code>''</code> respectively.</li>\n<li>The variables <code>dragCounter</code> and <code>drag</code> are used to determine if a file is being dragged, while <code>filename</code> is used to store the dropped file’s name.</li>\n<li>Create the <code>handleDrag</code>, <code>handleDragIn</code>, <code>handleDragOut</code> and <code>handleDrop</code> methods to handle drag and drop functionality.</li>\n<li><code>handleDrag</code> prevents the browser from opening the dragged file, <code>handleDragIn</code> and <code>handleDragOut</code> handle the dragged file entering and exiting the component, while <code>handleDrop</code> handles the file being dropped and passes it to <code>onDrop</code>.</li>\n<li>Use the <code>useEffect()</code> hook to handle each of the drag and drop events using the previously created methods.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb25\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb25-1\" title=\"1\"><span class=\"fu\">.filedrop</span> {</a>\n<a class=\"sourceLine\" id=\"cb25-2\" title=\"2\">  <span class=\"kw\">min-height</span>: <span class=\"dv\">120</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-3\" title=\"3\">  <span class=\"kw\">border</span>: <span class=\"dv\">3</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#d3d3d3</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-4\" title=\"4\">  <span class=\"kw\">text-align</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-5\" title=\"5\">  <span class=\"kw\">font-size</span>: <span class=\"dv\">24</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-6\" title=\"6\">  <span class=\"kw\">padding</span>: <span class=\"dv\">32</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-7\" title=\"7\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">4</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-8\" title=\"8\">}</a>\n<a class=\"sourceLine\" id=\"cb25-9\" title=\"9\"></a>\n<a class=\"sourceLine\" id=\"cb25-10\" title=\"10\"><span class=\"fu\">.filedrop.drag</span> {</a>\n<a class=\"sourceLine\" id=\"cb25-11\" title=\"11\">  <span class=\"kw\">border</span>: <span class=\"dv\">3</span><span class=\"dt\">px</span> <span class=\"dv\">dashed</span> <span class=\"cn\">#1e90ff</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-12\" title=\"12\">}</a>\n<a class=\"sourceLine\" id=\"cb25-13\" title=\"13\"></a>\n<a class=\"sourceLine\" id=\"cb25-14\" title=\"14\"><span class=\"fu\">.filedrop.ready</span> {</a>\n<a class=\"sourceLine\" id=\"cb25-15\" title=\"15\">  <span class=\"kw\">border</span>: <span class=\"dv\">3</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#32cd32</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb25-16\" title=\"16\">}</a>\n</div>\n<pre><code class=\"language-js\">const FileDrop = ({ onDrop }) =&#x26;gt; {\n  const [drag, setDrag] = React.useState(false);\n  const [filename, setFilename] = React.useState(&#x26;quot;&#x26;quot;);\n  let dropRef = React.createRef();\n  let dragCounter = 0;\n\nconst handleDrag = (e) =&#x26;gt; {\ne.preventDefault();\ne.stopPropagation();\n};\n\nconst handleDragIn = (e) =&#x26;gt; {\ne.preventDefault();\ne.stopPropagation();\ndragCounter++;\nif (e.dataTransfer.items &#x26;amp;&#x26;amp; e.dataTransfer.items.length &#x26;gt; 0) setDrag(true);\n};\n\nconst handleDragOut = (e) =&#x26;gt; {\ne.preventDefault();\ne.stopPropagation();\ndragCounter--;\nif (dragCounter === 0) setDrag(false);\n};\n\nconst handleDrop = (e) =&#x26;gt; {\ne.preventDefault();\ne.stopPropagation();\nsetDrag(false);\nif (e.dataTransfer.files &#x26;amp;&#x26;amp; e.dataTransfer.files.length &#x26;gt; 0) {\nonDrop(e.dataTransfer.files[0]);\nsetFilename(e.dataTransfer.files[0].name);\ne.dataTransfer.clearData();\ndragCounter = 0;\n}\n};\n\nReact.useEffect(() =&#x26;gt; {\nlet div = dropRef.current;\ndiv.addEventListener(&#x26;quot;dragenter&#x26;quot;, handleDragIn);\ndiv.addEventListener(&#x26;quot;dragleave&#x26;quot;, handleDragOut);\ndiv.addEventListener(&#x26;quot;dragover&#x26;quot;, handleDrag);\ndiv.addEventListener(&#x26;quot;drop&#x26;quot;, handleDrop);\nreturn () =&#x26;gt; {\ndiv.removeEventListener(&#x26;quot;dragenter&#x26;quot;, handleDragIn);\ndiv.removeEventListener(&#x26;quot;dragleave&#x26;quot;, handleDragOut);\ndiv.removeEventListener(&#x26;quot;dragover&#x26;quot;, handleDrag);\ndiv.removeEventListener(&#x26;quot;drop&#x26;quot;, handleDrop);\n};\n});\n\nreturn (\n&#x26;lt;div\nref={dropRef}\nclassName={\ndrag ? &#x26;quot;filedrop drag&#x26;quot; : filename ? &#x26;quot;filedrop ready&#x26;quot; : &#x26;quot;filedrop&#x26;quot;\n}\n&#x26;gt;\n{filename &#x26;amp;&#x26;amp; !drag ? &#x26;lt;div&#x26;gt;{filename}&#x26;lt;/div&#x26;gt; : &#x26;lt;div&#x26;gt;Drop a file here!&#x26;lt;/div&#x26;gt;}\n&#x26;lt;/div&#x26;gt;\n);\n};\n\n\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(\n  &#x26;lt;FileDrop onDrop={console.log} /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a textarea component with a character limit.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>content</code> state variable and set its value to that of <code>value</code> prop, trimmed down to <code>limit</code> characters.</li>\n<li>Create a method <code>setFormattedContent</code>, which trims the content down to <code>limit</code> characters and memoize it, using the <code>useCallback()</code> hook.</li>\n<li>Bind the <code>onChange</code> event of the <code>&lt;textarea&gt;</code> to call <code>setFormattedContent</code> with the value of the fired event.</li>\n</ul>\n<pre><code class=\"language-js\">const LimitedTextarea = ({ rows, cols, value, limit }) =&#x26;gt; {\n  const [content, setContent] = React.useState(value.slice(0, limit));\n\nconst setFormattedContent = React.useCallback(\n(text) =&#x26;gt; {\nsetContent(text.slice(0, limit));\n},\n[limit, setContent]\n);\n\nreturn (\n&#x26;lt;&#x26;gt;\n&#x26;lt;textarea\nrows={rows}\ncols={cols}\nonChange={(event) =&#x26;gt; setFormattedContent(event.target.value)}\nvalue={content}\n/&#x26;gt;\n&#x26;lt;p&#x26;gt;\n{content.length}/{limit}\n&#x26;lt;/p&#x26;gt;\n&#x26;lt;/&#x26;gt;\n);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(\n  &#x26;lt;LimitedTextarea limit={32} value=&#x26;quot;Hello!&#x26;quot; /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a textarea component with a word limit.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create a state variable, containing <code>content</code> and <code>wordCount</code>, using the <code>value</code> prop and <code>0</code> as the initial values respectively.</li>\n<li>Use the <code>useCallback()</code> hooks to create a memoized function, <code>setFormattedContent</code>, that uses <code>String.prototype.split()</code> to turn the input into an array of words.</li>\n<li>Check if the result of applying <code>Array.prototype.filter()</code> combined with <code>Boolean</code> has a <code>length</code> longer than <code>limit</code> and, if so, trim the input, otherwise return the raw input, updating state accordingly in both cases.</li>\n<li>Use the <code>useEffect()</code> hook to call the <code>setFormattedContent</code> method on the value of the <code>content</code> state variable during the initial render.</li>\n<li>Bind the <code>onChange</code> event of the <code>&lt;textarea&gt;</code> to call <code>setFormattedContent</code> with the value of <code>event.target.value</code>.</li>\n</ul>\n<pre><code class=\"language-js\">const LimitedWordTextarea = ({ rows, cols, value, limit }) =&#x26;gt; {\n  const [{ content, wordCount }, setContent] = React.useState({\n    content: value,\n    wordCount: 0,\n  });\n\nconst setFormattedContent = React.useCallback(\n(text) =&#x26;gt; {\nlet words = text.split(&#x26;quot; &#x26;quot;).filter(Boolean);\nif (words.length &#x26;gt; limit) {\nsetContent({\ncontent: words.slice(0, limit).join(&#x26;quot; &#x26;quot;),\nwordCount: limit,\n});\n} else {\nsetContent({ content: text, wordCount: words.length });\n}\n},\n[limit, setContent]\n);\n\nReact.useEffect(() =&#x26;gt; {\nsetFormattedContent(content);\n}, []);\n\nreturn (\n&#x26;lt;&#x26;gt;\n&#x26;lt;textarea\nrows={rows}\ncols={cols}\nonChange={(event) =&#x26;gt; setFormattedContent(event.target.value)}\nvalue={content}\n/&#x26;gt;\n&#x26;lt;p&#x26;gt;\n{wordCount}/{limit}\n&#x26;lt;/p&#x26;gt;\n&#x26;lt;/&#x26;gt;\n);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(\n  &#x26;lt;LimitedWordTextarea limit={5} value=&#x26;quot;Hello there!&#x26;quot; /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a spinning loader component.</p>\n<ul>\n<li>Render an SVG, whose <code>height</code> and <code>width</code> are determined by the <code>size</code> prop.</li>\n<li>Use CSS to animate the SVG, creating a spinning animation.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb32\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb32-1\" title=\"1\"><span class=\"fu\">.loader</span> {</a>\n<a class=\"sourceLine\" id=\"cb32-2\" title=\"2\">  <span class=\"kw\">animation</span>: rotate <span class=\"dv\">2</span><span class=\"dt\">s</span> <span class=\"dv\">linear</span> <span class=\"dv\">infinite</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-3\" title=\"3\">}</a>\n<a class=\"sourceLine\" id=\"cb32-4\" title=\"4\"></a>\n<a class=\"sourceLine\" id=\"cb32-5\" title=\"5\"><span class=\"im\">@keyframes</span> rotate {</a>\n<a class=\"sourceLine\" id=\"cb32-6\" title=\"6\">  <span class=\"dv\">100%</span> {</a>\n<a class=\"sourceLine\" id=\"cb32-7\" title=\"7\">    <span class=\"kw\">transform</span>: <span class=\"fu\">rotate(</span><span class=\"dv\">360</span><span class=\"dt\">deg</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-8\" title=\"8\">  }</a>\n<a class=\"sourceLine\" id=\"cb32-9\" title=\"9\">}</a>\n<a class=\"sourceLine\" id=\"cb32-10\" title=\"10\"></a>\n<a class=\"sourceLine\" id=\"cb32-11\" title=\"11\"><span class=\"fu\">.loader</span> circle {</a>\n<a class=\"sourceLine\" id=\"cb32-12\" title=\"12\">  <span class=\"kw\">animation</span>: dash <span class=\"dv\">1.5</span><span class=\"dt\">s</span> <span class=\"dv\">ease-in-out</span> <span class=\"dv\">infinite</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-13\" title=\"13\">}</a>\n<a class=\"sourceLine\" id=\"cb32-14\" title=\"14\"></a>\n<a class=\"sourceLine\" id=\"cb32-15\" title=\"15\"><span class=\"im\">@keyframes</span> dash {</a>\n<a class=\"sourceLine\" id=\"cb32-16\" title=\"16\">  <span class=\"dv\">0%</span> {</a>\n<a class=\"sourceLine\" id=\"cb32-17\" title=\"17\">    stroke-dasharray: <span class=\"dv\">1</span><span class=\"op\">,</span> <span class=\"dv\">150</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-18\" title=\"18\">    stroke-dashoffset: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-19\" title=\"19\">  }</a>\n<a class=\"sourceLine\" id=\"cb32-20\" title=\"20\">  <span class=\"dv\">50%</span> {</a>\n<a class=\"sourceLine\" id=\"cb32-21\" title=\"21\">    stroke-dasharray: <span class=\"dv\">90</span><span class=\"op\">,</span> <span class=\"dv\">150</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-22\" title=\"22\">    stroke-dashoffset: <span class=\"dv\">-35</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-23\" title=\"23\">  }</a>\n<a class=\"sourceLine\" id=\"cb32-24\" title=\"24\">  <span class=\"dv\">100%</span> {</a>\n<a class=\"sourceLine\" id=\"cb32-25\" title=\"25\">    stroke-dasharray: <span class=\"dv\">90</span><span class=\"op\">,</span> <span class=\"dv\">150</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-26\" title=\"26\">    stroke-dashoffset: <span class=\"dv\">-124</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb32-27\" title=\"27\">  }</a>\n<a class=\"sourceLine\" id=\"cb32-28\" title=\"28\">}</a>\n</div>\n<pre><code class=\"language-js\">const Loader = ({ size }) =&#x26;gt; {\n  return (\n    &#x26;lt;svg\n      className=&#x26;quot;loader&#x26;quot;\n      xmlns=&#x26;quot;http://www.w3.org/2000/svg&#x26;quot;\n      width={size}\n      height={size}\n      viewBox=&#x26;quot;0 0 24 24&#x26;quot;\n      fill=&#x26;quot;none&#x26;quot;\n      stroke=&#x26;quot;currentColor&#x26;quot;\n      strokeWidth=&#x26;quot;2&#x26;quot;\n      strokeLinecap=&#x26;quot;round&#x26;quot;\n      strokeLinejoin=&#x26;quot;round&#x26;quot;\n    &#x26;gt;\n      &#x26;lt;circle cx=&#x26;quot;12&#x26;quot; cy=&#x26;quot;12&#x26;quot; r=&#x26;quot;10&#x26;quot; /&#x26;gt;\n    &#x26;lt;/svg&#x26;gt;\n  );\n};\n\n\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(&#x26;lt;Loader size={24} /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Renders a link formatted to send an email (<code>mailto:</code> link).</p>\n<ul>\n<li>Use the <code>email</code>, <code>subject</code> and <code>body</code> props to create a <code>&lt;a&gt;</code> element with an appropriate <code>href</code> attribute.</li>\n<li>Use <code>encodeURIcomponent</code> to safely encode the <code>subject</code> and <code>body</code> into the link URL.</li>\n<li>Render the link with <code>children</code> as its content.</li>\n</ul>\n<pre><code class=\"language-js\">const Mailto = ({ email, subject = &#x26;quot;&#x26;quot;, body = &#x26;quot;&#x26;quot;, children }) =&#x26;gt; {\n  let params = subject || body ? &#x26;quot;?&#x26;quot; : &#x26;quot;&#x26;quot;;\n  if (subject) params += `subject=${encodeURIComponent(subject)}`;\n  if (body) params += `${subject ? &#x26;quot;&#x26;amp;&#x26;quot; : &#x26;quot;&#x26;quot;}body=${encodeURIComponent(body)}`;\n\nreturn &#x26;lt;a href={`mailto:${email}${params}`}&#x26;gt;{children}&#x26;lt;/a&#x26;gt;;\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(\n  &#x26;lt;Mailto email=&#x26;quot;foo@bar.baz&#x26;quot; subject=&#x26;quot;Hello &#x26;amp; Welcome&#x26;quot; body=&#x26;quot;Hello world!&#x26;quot;&#x26;gt;\n    Mail me!\n  &#x26;lt;/Mailto&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a table with rows dynamically created from an array of objects and a list of property names.</p>\n<ul>\n<li>Use <code>Object.keys()</code>, <code>Array.prototype.filter()</code>, <code>Array.prototype.includes()</code> and <code>Array.prototype.reduce()</code> to produce a <code>filteredData</code> array, containing all objects with the keys specified in <code>propertyNames</code>.</li>\n<li>Render a <code>&lt;table&gt;</code> element with a set of columns equal to the amount of values in <code>propertyNames</code>.</li>\n<li>Use <code>Array.prototype.map()</code> to render each value in the <code>propertyNames</code> array as a <code>&lt;th&gt;</code> element.</li>\n<li>Use <code>Array.prototype.map()</code> to render each object in the <code>filteredData</code> array as a <code>&lt;tr&gt;</code> element, containing a <code>&lt;td&gt;</code> for each key in the object.</li>\n</ul>\n<p><em>This component does not work with nested objects and will break if there are nested objects inside any of the properties specified in <code>propertyNames</code></em></p>\n<pre><code class=\"language-js\">const MappedTable = ({ data, propertyNames }) =&#x26;gt; {\n  let filteredData = data.map((v) =&#x26;gt;\n    Object.keys(v)\n      .filter((k) =&#x26;gt; propertyNames.includes(k))\n      .reduce((acc, key) =&#x26;gt; ((acc[key] = v[key]), acc), {})\n  );\n  return (\n    &#x26;lt;table&#x26;gt;\n      &#x26;lt;thead&#x26;gt;\n        &#x26;lt;tr&#x26;gt;\n          {propertyNames.map((val) =&#x26;gt; (\n            &#x26;lt;th key={`h_${val}`}&#x26;gt;{val}&#x26;lt;/th&#x26;gt;\n          ))}\n        &#x26;lt;/tr&#x26;gt;\n      &#x26;lt;/thead&#x26;gt;\n      &#x26;lt;tbody&#x26;gt;\n        {filteredData.map((val, i) =&#x26;gt; (\n          &#x26;lt;tr key={`i_${i}`}&#x26;gt;\n            {propertyNames.map((p) =&#x26;gt; (\n              &#x26;lt;td key={`i_${i}_${p}`}&#x26;gt;{val[p]}&#x26;lt;/td&#x26;gt;\n            ))}\n          &#x26;lt;/tr&#x26;gt;\n        ))}\n      &#x26;lt;/tbody&#x26;gt;\n    &#x26;lt;/table&#x26;gt;\n  );\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const people = [\n  { name: &#x26;quot;John&#x26;quot;, surname: &#x26;quot;Smith&#x26;quot;, age: 42 },\n  { name: &#x26;quot;Adam&#x26;quot;, surname: &#x26;quot;Smith&#x26;quot;, gender: &#x26;quot;male&#x26;quot; },\n];\nconst propertyNames = [&#x26;quot;name&#x26;quot;, &#x26;quot;surname&#x26;quot;, &#x26;quot;age&#x26;quot;];\nReactDOM.render(\n  &#x26;lt;MappedTable data={people} propertyNames={propertyNames} /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a Modal component, controllable through events.</p>\n<ul>\n<li>Define <code>keydownHandler</code>, a method which handles all keyboard events and is used to call <code>onClose</code> when the <code>Esc</code> key is pressed.</li>\n<li>Use the <code>useEffect()</code> hook to add or remove the <code>keydown</code> event listener to the <code>document</code>, calling <code>keydownHandler</code> for every event.</li>\n<li>Add a styled <code>&lt;span&gt;</code> element that acts as a close button, calling <code>onClose</code> when clicked.</li>\n<li>Use the <code>isVisible</code> prop passed down from the parent to determine if the modal should be displayed or not.</li>\n<li>To use the component, import <code>Modal</code> only once and then display it by passing a boolean value to the <code>isVisible</code> attribute.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb39\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb39-1\" title=\"1\"><span class=\"fu\">.modal</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-2\" title=\"2\">  <span class=\"kw\">position</span>: <span class=\"dv\">fixed</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-3\" title=\"3\">  <span class=\"kw\">top</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-4\" title=\"4\">  <span class=\"kw\">bottom</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-5\" title=\"5\">  <span class=\"kw\">left</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-6\" title=\"6\">  <span class=\"kw\">right</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-7\" title=\"7\">  <span class=\"kw\">width</span>: <span class=\"dv\">100</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-8\" title=\"8\">  <span class=\"kw\">z-index</span>: <span class=\"dv\">9999</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-9\" title=\"9\">  <span class=\"kw\">display</span>: flex<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-10\" title=\"10\">  <span class=\"kw\">align-items</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-11\" title=\"11\">  <span class=\"kw\">justify-content</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-12\" title=\"12\">  <span class=\"kw\">background-color</span>: <span class=\"fu\">rgba(</span><span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0.25</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-13\" title=\"13\">  <span class=\"kw\">animation-name</span>: appear<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-14\" title=\"14\">  <span class=\"kw\">animation-duration</span>: <span class=\"dv\">300</span><span class=\"dt\">ms</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-15\" title=\"15\">}</a>\n<a class=\"sourceLine\" id=\"cb39-16\" title=\"16\"></a>\n<a class=\"sourceLine\" id=\"cb39-17\" title=\"17\"><span class=\"fu\">.modal-dialog</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-18\" title=\"18\">  <span class=\"kw\">width</span>: <span class=\"dv\">100</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-19\" title=\"19\">  <span class=\"kw\">max-width</span>: <span class=\"dv\">550</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-20\" title=\"20\">  <span class=\"kw\">background</span>: <span class=\"cn\">white</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-21\" title=\"21\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-22\" title=\"22\">  <span class=\"kw\">margin</span>: <span class=\"dv\">0</span> <span class=\"dv\">20</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-23\" title=\"23\">  <span class=\"kw\">max-height</span>: <span class=\"fu\">calc(</span><span class=\"dv\">100</span><span class=\"dt\">vh</span> <span class=\"op\">-</span> <span class=\"dv\">40</span><span class=\"dt\">px</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-24\" title=\"24\">  <span class=\"kw\">text-align</span>: <span class=\"dv\">left</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-25\" title=\"25\">  <span class=\"kw\">display</span>: flex<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-26\" title=\"26\">  <span class=\"kw\">flex-direction</span>: column<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-27\" title=\"27\">  <span class=\"kw\">overflow</span>: <span class=\"dv\">hidden</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-28\" title=\"28\">  <span class=\"kw\">box-shadow</span>: <span class=\"dv\">0</span> <span class=\"dv\">4</span><span class=\"dt\">px</span> <span class=\"dv\">8</span><span class=\"dt\">px</span> <span class=\"dv\">0</span> <span class=\"fu\">rgba(</span><span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0.2</span><span class=\"fu\">)</span><span class=\"op\">,</span> <span class=\"dv\">0</span> <span class=\"dv\">6</span><span class=\"dt\">px</span> <span class=\"dv\">20</span><span class=\"dt\">px</span> <span class=\"dv\">0</span> <span class=\"fu\">rgba(</span><span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0.19</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-29\" title=\"29\">  <span class=\"kw\">-webkit-animation-name</span>: animatetop<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-30\" title=\"30\">  <span class=\"kw\">-webkit-animation-duration</span>: <span class=\"dv\">0.4</span><span class=\"dt\">s</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-31\" title=\"31\">  <span class=\"kw\">animation-name</span>: slide-in<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-32\" title=\"32\">  <span class=\"kw\">animation-duration</span>: <span class=\"dv\">0.5</span><span class=\"dt\">s</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-33\" title=\"33\">}</a>\n<a class=\"sourceLine\" id=\"cb39-34\" title=\"34\"></a>\n<a class=\"sourceLine\" id=\"cb39-35\" title=\"35\"><span class=\"fu\">.modal-header</span><span class=\"op\">,</span></a>\n<a class=\"sourceLine\" id=\"cb39-36\" title=\"36\"><span class=\"fu\">.modal-footer</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-37\" title=\"37\">  <span class=\"kw\">display</span>: flex<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-38\" title=\"38\">  <span class=\"kw\">align-items</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-39\" title=\"39\">  <span class=\"kw\">padding</span>: <span class=\"dv\">1</span><span class=\"dt\">rem</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-40\" title=\"40\">}</a>\n<a class=\"sourceLine\" id=\"cb39-41\" title=\"41\"></a>\n<a class=\"sourceLine\" id=\"cb39-42\" title=\"42\"><span class=\"fu\">.modal-header</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-43\" title=\"43\">  <span class=\"kw\">border-bottom</span>: <span class=\"dv\">1</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#dbdbdb</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-44\" title=\"44\">  <span class=\"kw\">justify-content</span>: space-between<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-45\" title=\"45\">}</a>\n<a class=\"sourceLine\" id=\"cb39-46\" title=\"46\"></a>\n<a class=\"sourceLine\" id=\"cb39-47\" title=\"47\"><span class=\"fu\">.modal-footer</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-48\" title=\"48\">  <span class=\"kw\">border-top</span>: <span class=\"dv\">1</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#dbdbdb</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-49\" title=\"49\">  <span class=\"kw\">justify-content</span>: flex-end<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-50\" title=\"50\">}</a>\n<a class=\"sourceLine\" id=\"cb39-51\" title=\"51\"></a>\n<a class=\"sourceLine\" id=\"cb39-52\" title=\"52\"><span class=\"fu\">.modal-close</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-53\" title=\"53\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-54\" title=\"54\">  <span class=\"kw\">padding</span>: <span class=\"dv\">1</span><span class=\"dt\">rem</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-55\" title=\"55\">  <span class=\"kw\">margin</span>: <span class=\"dv\">-1</span><span class=\"dt\">rem</span> <span class=\"dv\">-1</span><span class=\"dt\">rem</span> <span class=\"dv\">-1</span><span class=\"dt\">rem</span> <span class=\"bu\">auto</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-56\" title=\"56\">}</a>\n<a class=\"sourceLine\" id=\"cb39-57\" title=\"57\"></a>\n<a class=\"sourceLine\" id=\"cb39-58\" title=\"58\"><span class=\"fu\">.modal-body</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-59\" title=\"59\">  <span class=\"kw\">overflow</span>: <span class=\"bu\">auto</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-60\" title=\"60\">}</a>\n<a class=\"sourceLine\" id=\"cb39-61\" title=\"61\"></a>\n<a class=\"sourceLine\" id=\"cb39-62\" title=\"62\"><span class=\"fu\">.modal-content</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-63\" title=\"63\">  <span class=\"kw\">padding</span>: <span class=\"dv\">1</span><span class=\"dt\">rem</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-64\" title=\"64\">}</a>\n<a class=\"sourceLine\" id=\"cb39-65\" title=\"65\"></a>\n<a class=\"sourceLine\" id=\"cb39-66\" title=\"66\"><span class=\"im\">@keyframes</span> appear {</a>\n<a class=\"sourceLine\" id=\"cb39-67\" title=\"67\">  <span class=\"dv\">from</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-68\" title=\"68\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-69\" title=\"69\">  }</a>\n<a class=\"sourceLine\" id=\"cb39-70\" title=\"70\">  <span class=\"dv\">to</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-71\" title=\"71\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">1</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-72\" title=\"72\">  }</a>\n<a class=\"sourceLine\" id=\"cb39-73\" title=\"73\">}</a>\n<a class=\"sourceLine\" id=\"cb39-74\" title=\"74\"></a>\n<a class=\"sourceLine\" id=\"cb39-75\" title=\"75\"><span class=\"im\">@keyframes</span> slide-in {</a>\n<a class=\"sourceLine\" id=\"cb39-76\" title=\"76\">  <span class=\"dv\">from</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-77\" title=\"77\">    <span class=\"kw\">transform</span>: translateY(<span class=\"dv\">-150</span><span class=\"dt\">px</span>)<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-78\" title=\"78\">  }</a>\n<a class=\"sourceLine\" id=\"cb39-79\" title=\"79\">  <span class=\"dv\">to</span> {</a>\n<a class=\"sourceLine\" id=\"cb39-80\" title=\"80\">    <span class=\"kw\">transform</span>: translateY(<span class=\"dv\">0</span>)<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb39-81\" title=\"81\">  }</a>\n<a class=\"sourceLine\" id=\"cb39-82\" title=\"82\">}</a>\n</div>\n<pre><code class=\"language-js\">const Modal = ({ isVisible = false, title, content, footer, onClose }) =&#x26;gt; {\n  const keydownHandler = ({ key }) =&#x26;gt; {\n    switch (key) {\n      case &#x26;quot;Escape&#x26;quot;:\n        onClose();\n        break;\n      default:\n    }\n  };\n\nReact.useEffect(() =&#x26;gt; {\ndocument.addEventListener(&#x26;quot;keydown&#x26;quot;, keydownHandler);\nreturn () =&#x26;gt; document.removeEventListener(&#x26;quot;keydown&#x26;quot;, keydownHandler);\n});\n\nreturn !isVisible ? null : (\n&#x26;lt;div className=&#x26;quot;modal&#x26;quot; onClick={onClose}&#x26;gt;\n&#x26;lt;div className=&#x26;quot;modal-dialog&#x26;quot; onClick={(e) =&#x26;gt; e.stopPropagation()}&#x26;gt;\n&#x26;lt;div className=&#x26;quot;modal-header&#x26;quot;&#x26;gt;\n&#x26;lt;h3 className=&#x26;quot;modal-title&#x26;quot;&#x26;gt;{title}&#x26;lt;/h3&#x26;gt;\n&#x26;lt;span className=&#x26;quot;modal-close&#x26;quot; onClick={onClose}&#x26;gt;\n&#x26;amp;times;\n&#x26;lt;/span&#x26;gt;\n&#x26;lt;/div&#x26;gt;\n&#x26;lt;div className=&#x26;quot;modal-body&#x26;quot;&#x26;gt;\n&#x26;lt;div className=&#x26;quot;modal-content&#x26;quot;&#x26;gt;{content}&#x26;lt;/div&#x26;gt;\n&#x26;lt;/div&#x26;gt;\n{footer &#x26;amp;&#x26;amp; &#x26;lt;div className=&#x26;quot;modal-footer&#x26;quot;&#x26;gt;{footer}&#x26;lt;/div&#x26;gt;}\n&#x26;lt;/div&#x26;gt;\n&#x26;lt;/div&#x26;gt;\n);\n};\n\n\n\n&#x3C;hr />\n\n```js\n\nconst App = () =&#x26;gt; {\n  const [isModal, setModal] = React.useState(false);\n  return (\n    &#x26;lt;&#x26;gt;\n      &#x26;lt;button onClick={() =&#x26;gt; setModal(true)}&#x26;gt;Click Here&#x26;lt;/button&#x26;gt;\n      &#x26;lt;Modal\n        isVisible={isModal}\n        title=&#x26;quot;Modal Title&#x26;quot;\n        content={&#x26;lt;p&#x26;gt;Add your content here&#x26;lt;/p&#x26;gt;}\n        footer={&#x26;lt;button&#x26;gt;Cancel&#x26;lt;/button&#x26;gt;}\n        onClose={() =&#x26;gt; setModal(false)}\n      /&#x26;gt;\n    &#x26;lt;/&#x26;gt;\n  );\n};\n\nReactDOM.render(&#x26;lt;App /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Renders a checkbox list that uses a callback function to pass its selected value/values to the parent component.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>data</code> state variable and use the <code>options</code> prop to initialize its value.</li>\n<li>Create a <code>toggle</code> function that uses the spread operator (<code>...</code>) and <code>Array.prototype.splice()</code> to update the <code>data</code> state variable and call the <code>onChange</code> callback with any <code>checked</code> options.</li>\n<li>Use <code>Array.prototype.map()</code> to map the <code>data</code> state variable to individual <code>&lt;input type=\"checkbox\"&gt;</code> elements, each one wrapped in a <code>&lt;label&gt;</code>, binding the <code>onClick</code> handler to the <code>toggle</code> function.</li>\n</ul>\n<pre><code class=\"language-js\">const MultiselectCheckbox = ({ options, onChange }) =&#x26;gt; {\n  const [data, setData] = React.useState(options);\n\nconst toggle = (index) =&#x26;gt; {\nconst newData = [...data];\nnewData.splice(index, 1, {\nlabel: data[index].label,\nchecked: !data[index].checked,\n});\nsetData(newData);\nonChange(newData.filter((x) =&#x26;gt; x.checked));\n};\n\nreturn (\n&#x26;lt;&#x26;gt;\n{data.map((item, index) =&#x26;gt; (\n&#x26;lt;label key={item.label}&#x26;gt;\n&#x26;lt;input\nreadOnly\ntype=&#x26;quot;checkbox&#x26;quot;\nchecked={item.checked || false}\nonClick={() =&#x26;gt; toggle(index)}\n/&#x26;gt;\n{item.label}\n&#x26;lt;/label&#x26;gt;\n))}\n&#x26;lt;/&#x26;gt;\n);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const options = [{ label: &#x26;quot;Item One&#x26;quot; }, { label: &#x26;quot;Item Two&#x26;quot; }];\n\nReactDOM.render(\n&#x26;lt;MultiselectCheckbox\noptions={options}\nonChange={(data) =&#x26;gt; {\nconsole.log(data);\n}}\n/&#x26;gt;,\ndocument.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a password input field with a reveal button.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>shown</code> state variable and set its value to <code>false</code>.</li>\n<li>When the <code>&lt;button&gt;</code> is clicked, execute <code>setShown</code>, toggling the <code>type</code> of the <code>&lt;input&gt;</code> between <code>\"text\"</code> and <code>\"password\"</code>.</li>\n</ul>\n<pre><code class=\"language-js\">const PasswordRevealer = ({ value }) =&#x26;gt; {\n  const [shown, setShown] = React.useState(false);\n  return (\n    &#x26;lt;&#x26;gt;\n      &#x26;lt;input type={shown ? &#x26;quot;text&#x26;quot; : &#x26;quot;password&#x26;quot;} value={value} /&#x26;gt;\n      &#x26;lt;button onClick={() =&#x26;gt; setShown(!shown)}&#x26;gt;Show/Hide&#x26;lt;/button&#x26;gt;\n    &#x26;lt;/&#x26;gt;\n  );\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(&#x26;lt;PasswordRevealer /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Renders a button that animates a ripple effect when clicked.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>coords</code> and <code>isRippling</code> state variables for the pointer’s coordinates and the animation state of the button respectively.</li>\n<li>Use a <code>useEffect()</code> hook to change the value of <code>isRippling</code> every time the <code>coords</code> state variable changes, starting the animation.</li>\n<li>Use <code>setTimeout()</code> in the previous hook to clear the animation after it’s done playing.</li>\n<li>Use a <code>useEffect()</code> hook to reset <code>coords</code> whenever the <code>isRippling</code> state variable is <code>false.</code></li>\n<li>Handle the <code>onClick</code> event by updating the <code>coords</code> state variable and calling the passed callback.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb46\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb46-1\" title=\"1\"><span class=\"fu\">.ripple-button</span> {</a>\n<a class=\"sourceLine\" id=\"cb46-2\" title=\"2\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">4</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-3\" title=\"3\">  <span class=\"kw\">border</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-4\" title=\"4\">  <span class=\"kw\">margin</span>: <span class=\"dv\">8</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-5\" title=\"5\">  <span class=\"kw\">padding</span>: <span class=\"dv\">14</span><span class=\"dt\">px</span> <span class=\"dv\">24</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-6\" title=\"6\">  <span class=\"kw\">background</span>: <span class=\"cn\">#1976d2</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-7\" title=\"7\">  <span class=\"kw\">color</span>: <span class=\"cn\">#fff</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-8\" title=\"8\">  <span class=\"kw\">overflow</span>: <span class=\"dv\">hidden</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-9\" title=\"9\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-10\" title=\"10\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-11\" title=\"11\">}</a>\n<a class=\"sourceLine\" id=\"cb46-12\" title=\"12\"></a>\n<a class=\"sourceLine\" id=\"cb46-13\" title=\"13\"><span class=\"fu\">.ripple-button</span> <span class=\"op\">&gt;</span> <span class=\"fu\">.ripple</span> {</a>\n<a class=\"sourceLine\" id=\"cb46-14\" title=\"14\">  <span class=\"kw\">width</span>: <span class=\"dv\">20</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-15\" title=\"15\">  <span class=\"kw\">height</span>: <span class=\"dv\">20</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-16\" title=\"16\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-17\" title=\"17\">  <span class=\"kw\">background</span>: <span class=\"cn\">#63a4ff</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-18\" title=\"18\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-19\" title=\"19\">  <span class=\"kw\">content</span>: <span class=\"st\">&quot;&quot;</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-20\" title=\"20\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">9999</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-21\" title=\"21\">  <span class=\"kw\">opacity</span>: <span class=\"dv\">1</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-22\" title=\"22\">  <span class=\"kw\">animation</span>: <span class=\"dv\">0.9</span><span class=\"dt\">s</span> <span class=\"dv\">ease</span> <span class=\"dv\">1</span> <span class=\"dv\">forwards</span> ripple-effect<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-23\" title=\"23\">}</a>\n<a class=\"sourceLine\" id=\"cb46-24\" title=\"24\"></a>\n<a class=\"sourceLine\" id=\"cb46-25\" title=\"25\"><span class=\"im\">@keyframes</span> ripple-effect {</a>\n<a class=\"sourceLine\" id=\"cb46-26\" title=\"26\">  <span class=\"dv\">0%</span> {</a>\n<a class=\"sourceLine\" id=\"cb46-27\" title=\"27\">    <span class=\"kw\">transform</span>: <span class=\"fu\">scale(</span><span class=\"dv\">1</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-28\" title=\"28\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">1</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-29\" title=\"29\">  }</a>\n<a class=\"sourceLine\" id=\"cb46-30\" title=\"30\">  <span class=\"dv\">50%</span> {</a>\n<a class=\"sourceLine\" id=\"cb46-31\" title=\"31\">    <span class=\"kw\">transform</span>: <span class=\"fu\">scale(</span><span class=\"dv\">10</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-32\" title=\"32\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">0.375</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-33\" title=\"33\">  }</a>\n<a class=\"sourceLine\" id=\"cb46-34\" title=\"34\">  <span class=\"dv\">100%</span> {</a>\n<a class=\"sourceLine\" id=\"cb46-35\" title=\"35\">    <span class=\"kw\">transform</span>: <span class=\"fu\">scale(</span><span class=\"dv\">35</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-36\" title=\"36\">    <span class=\"kw\">opacity</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-37\" title=\"37\">  }</a>\n<a class=\"sourceLine\" id=\"cb46-38\" title=\"38\">}</a>\n<a class=\"sourceLine\" id=\"cb46-39\" title=\"39\"></a>\n<a class=\"sourceLine\" id=\"cb46-40\" title=\"40\"><span class=\"fu\">.ripple-button</span> <span class=\"op\">&gt;</span> <span class=\"fu\">.content</span> {</a>\n<a class=\"sourceLine\" id=\"cb46-41\" title=\"41\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-42\" title=\"42\">  <span class=\"kw\">z-index</span>: <span class=\"dv\">2</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb46-43\" title=\"43\">}</a>\n</div>\n<pre><code class=\"language-js\">const RippleButton = ({ children, onClick }) =&#x26;gt; {\n  const [coords, setCoords] = React.useState({ x: -1, y: -1 });\n  const [isRippling, setIsRippling] = React.useState(false);\n\nReact.useEffect(() =&#x26;gt; {\nif (coords.x !== -1 &#x26;amp;&#x26;amp; coords.y !== -1) {\nsetIsRippling(true);\nsetTimeout(() =&#x26;gt; setIsRippling(false), 300);\n} else setIsRippling(false);\n}, [coords]);\n\nReact.useEffect(() =&#x26;gt; {\nif (!isRippling) setCoords({ x: -1, y: -1 });\n}, [isRippling]);\n\nreturn (\n&#x26;lt;button\nclassName=&#x26;quot;ripple-button&#x26;quot;\nonClick={(e) =&#x26;gt; {\nconst rect = e.target.getBoundingClientRect();\nsetCoords({ x: e.clientX - rect.left, y: e.clientY - rect.top });\nonClick &#x26;amp;&#x26;amp; onClick(e);\n}}\n&#x26;gt;\n{isRippling ? (\n&#x26;lt;span\nclassName=&#x26;quot;ripple&#x26;quot;\nstyle={{\n            left: coords.x,\n            top: coords.y,\n          }}\n/&#x26;gt;\n) : (\n&#x26;quot;&#x26;quot;\n)}\n&#x26;lt;span className=&#x26;quot;content&#x26;quot;&#x26;gt;{children}&#x26;lt;/span&#x26;gt;\n&#x26;lt;/button&#x26;gt;\n);\n};\n\n\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(\n  &#x26;lt;RippleButton onClick={(e) =&#x26;gt; console.log(e)}&#x26;gt;Click me&#x26;lt;/RippleButton&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders an uncontrolled <code>&lt;select&gt;</code> element that uses a callback function to pass its value to the parent component.</p>\n<ul>\n<li>Use the the <code>selectedValue</code> prop as the <code>defaultValue</code> of the <code>&lt;select&gt;</code> element to set its initial value..</li>\n<li>Use the <code>onChange</code> event to fire the <code>onValueChange</code> callback and send the new value to the parent.</li>\n<li>Use <code>Array.prototype.map()</code> on the <code>values</code> array to create an <code>&lt;option&gt;</code> element for each passed value.</li>\n<li>Each item in <code>values</code> must be a 2-element array, where the first element is the <code>value</code> of the item and the second one is the displayed text for it.</li>\n</ul>\n<pre><code class=\"language-js\">const Select = ({ values, onValueChange, selectedValue, ...rest }) =&#x26;gt; {\n  return (\n    &#x26;lt;select\n      defaultValue={selectedValue}\n      onChange={({ target: { value } }) =&#x26;gt; onValueChange(value)}\n      {...rest}\n    &#x26;gt;\n      {values.map(([value, text]) =&#x26;gt; (\n        &#x26;lt;option key={value} value={value}&#x26;gt;\n          {text}\n        &#x26;lt;/option&#x26;gt;\n      ))}\n    &#x26;lt;/select&#x26;gt;\n  );\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const choices = [\n  [&#x26;quot;grapefruit&#x26;quot;, &#x26;quot;Grapefruit&#x26;quot;],\n  [&#x26;quot;lime&#x26;quot;, &#x26;quot;Lime&#x26;quot;],\n  [&#x26;quot;coconut&#x26;quot;, &#x26;quot;Coconut&#x26;quot;],\n  [&#x26;quot;mango&#x26;quot;, &#x26;quot;Mango&#x26;quot;],\n];\nReactDOM.render(\n  &#x26;lt;Select\n    values={choices}\n    selectedValue=&#x26;quot;lime&#x26;quot;\n    onValueChange={(val) =&#x26;gt; console.log(val)}\n  /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders an uncontrolled range input element that uses a callback function to pass its value to the parent component.</p>\n<ul>\n<li>Set the <code>type</code> of the <code>&lt;input&gt;</code> element to <code>\"range\"</code> to create a slider.</li>\n<li>Use the <code>defaultValue</code> passed down from the parent as the uncontrolled input field’s initial value.</li>\n<li>Use the <code>onChange</code> event to fire the <code>onValueChange</code> callback and send the new value to the parent.</li>\n</ul>\n<pre><code class=\"language-js\">const Slider = ({\n  min = 0,\n  max = 100,\n  defaultValue,\n  onValueChange,\n  ...rest\n}) =&#x26;gt; {\n  return (\n    &#x26;lt;input\n      type=&#x26;quot;range&#x26;quot;\n      min={min}\n      max={max}\n      defaultValue={defaultValue}\n      onChange={({ target: { value } }) =&#x26;gt; onValueChange(value)}\n      {...rest}\n    /&#x26;gt;\n  );\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(\n  &#x26;lt;Slider onValueChange={(val) =&#x26;gt; console.log(val)} /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a star rating component.</p>\n<ul>\n<li>Define a component, called <code>Star</code> that will render each individual star with the appropriate appearance, based on the parent component’s state.</li>\n<li>In the <code>StarRating</code> component, use the <code>useState()</code> hook to define the <code>rating</code> and <code>selection</code> state variables with the appropriate initial values.</li>\n<li>Create a method, <code>hoverOver</code>, that updates <code>selected</code> according to the provided <code>event</code>, using the .<code>data-star-id</code> attribute of the event’s target or resets it to <code>0</code> if called with a <code>null</code> argument.</li>\n<li>Use <code>Array.from()</code> to create an array of <code>5</code> elements and <code>Array.prototype.map()</code> to create individual <code>&lt;Star&gt;</code> components.</li>\n<li>Handle the <code>onMouseOver</code> and <code>onMouseLeave</code> events of the wrapping element using <code>hoverOver</code> and the <code>onClick</code> event using <code>setRating</code>.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb53\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb53-1\" title=\"1\"><span class=\"fu\">.star</span> {</a>\n<a class=\"sourceLine\" id=\"cb53-2\" title=\"2\">  <span class=\"kw\">color</span>: <span class=\"cn\">#ff9933</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb53-3\" title=\"3\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb53-4\" title=\"4\">}</a>\n</div>\n<pre><code class=\"language-js\">const Star = ({ marked, starId }) =&#x26;gt; {\n  return (\n    &#x26;lt;span data-star-id={starId} className=&#x26;quot;star&#x26;quot; role=&#x26;quot;button&#x26;quot;&#x26;gt;\n      {marked ? &#x26;quot;\\u2605&#x26;quot; : &#x26;quot;\\u2606&#x26;quot;}\n    &#x26;lt;/span&#x26;gt;\n  );\n};\n\nconst StarRating = ({ value }) =&#x26;gt; {\nconst [rating, setRating] = React.useState(parseInt(value) || 0);\nconst [selection, setSelection] = React.useState(0);\n\nconst hoverOver = (event) =&#x26;gt; {\nlet val = 0;\nif (event &#x26;amp;&#x26;amp; event.target &#x26;amp;&#x26;amp; event.target.getAttribute(&#x26;quot;data-star-id&#x26;quot;))\nval = event.target.getAttribute(&#x26;quot;data-star-id&#x26;quot;);\nsetSelection(val);\n};\nreturn (\n&#x26;lt;div\nonMouseOut={() =&#x26;gt; hoverOver(null)}\nonClick={(e) =&#x26;gt;\nsetRating(e.target.getAttribute(&#x26;quot;data-star-id&#x26;quot;) || rating)\n}\nonMouseOver={hoverOver}\n&#x26;gt;\n{Array.from({ length: 5 }, (v, i) =&#x26;gt; (\n&#x26;lt;Star\nstarId={i + 1}\nkey={`star_${i + 1}`}\nmarked={selection ? selection &#x26;gt;= i + 1 : rating &#x26;gt;= i + 1}\n/&#x26;gt;\n))}\n&#x26;lt;/div&#x26;gt;\n);\n};\n\n\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(&#x26;lt;StarRating value={2} /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Renders a tabbed menu and view component.</p>\n<ul>\n<li>Define a <code>Tabs</code> component that uses the <code>useState()</code> hook to initialize the value of the <code>bindIndex</code> state variable to <code>defaultIndex</code>.</li>\n<li>Define a <code>TabItem</code> component and filter <code>children</code> passed to the <code>Tabs</code> component to remove unnecessary nodes except for <code>TabItem</code> by identifying the function’s name.</li>\n<li>Define <code>changeTab</code>, which will be executed when clicking a <code>&lt;button&gt;</code> from the menu.</li>\n<li><code>changeTab</code> executes the passed callback, <code>onTabClick</code>, and updates <code>bindIndex</code> based on the clicked element.</li>\n<li>Use <code>Array.prototype.map()</code> on the collected nodes to render the menu and view of the tabs, using the value of <code>binIndex</code> to determine the active tab and apply the correct <code>className</code>.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb56\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb56-1\" title=\"1\"><span class=\"fu\">.tab-menu</span> <span class=\"op\">&gt;</span> button {</a>\n<a class=\"sourceLine\" id=\"cb56-2\" title=\"2\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-3\" title=\"3\">  <span class=\"kw\">padding</span>: <span class=\"dv\">8</span><span class=\"dt\">px</span> <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-4\" title=\"4\">  <span class=\"kw\">border</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-5\" title=\"5\">  <span class=\"kw\">border-bottom</span>: <span class=\"dv\">2</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"dv\">transparent</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-6\" title=\"6\">  <span class=\"kw\">background</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-7\" title=\"7\">}</a>\n<a class=\"sourceLine\" id=\"cb56-8\" title=\"8\"></a>\n<a class=\"sourceLine\" id=\"cb56-9\" title=\"9\"><span class=\"fu\">.tab-menu</span> <span class=\"op\">&gt;</span> button<span class=\"fu\">.focus</span> {</a>\n<a class=\"sourceLine\" id=\"cb56-10\" title=\"10\">  <span class=\"kw\">border-bottom</span>: <span class=\"dv\">2</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#007bef</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-11\" title=\"11\">}</a>\n<a class=\"sourceLine\" id=\"cb56-12\" title=\"12\"></a>\n<a class=\"sourceLine\" id=\"cb56-13\" title=\"13\"><span class=\"fu\">.tab-menu</span> <span class=\"op\">&gt;</span> button<span class=\"in\">:hover</span> {</a>\n<a class=\"sourceLine\" id=\"cb56-14\" title=\"14\">  <span class=\"kw\">border-bottom</span>: <span class=\"dv\">2</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#007bef</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-15\" title=\"15\">}</a>\n<a class=\"sourceLine\" id=\"cb56-16\" title=\"16\"></a>\n<a class=\"sourceLine\" id=\"cb56-17\" title=\"17\"><span class=\"fu\">.tab-content</span> {</a>\n<a class=\"sourceLine\" id=\"cb56-18\" title=\"18\">  <span class=\"kw\">display</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-19\" title=\"19\">}</a>\n<a class=\"sourceLine\" id=\"cb56-20\" title=\"20\"></a>\n<a class=\"sourceLine\" id=\"cb56-21\" title=\"21\"><span class=\"fu\">.tab-content.selected</span> {</a>\n<a class=\"sourceLine\" id=\"cb56-22\" title=\"22\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb56-23\" title=\"23\">}</a>\n</div>\n<pre><code class=\"language-js\">const TabItem = (props) =&#x26;gt; &#x26;lt;div {...props} /&#x26;gt;;\n\nconst Tabs = ({ defaultIndex = 0, onTabClick, children }) =&#x26;gt; {\nconst [bindIndex, setBindIndex] = React.useState(defaultIndex);\nconst changeTab = (newIndex) =&#x26;gt; {\nif (typeof onItemClick === &#x26;quot;function&#x26;quot;) onItemClick(itemIndex);\nsetBindIndex(newIndex);\n};\nconst items = children.filter((item) =&#x26;gt; item.type.name === &#x26;quot;TabItem&#x26;quot;);\n\nreturn (\n&#x26;lt;div className=&#x26;quot;wrapper&#x26;quot;&#x26;gt;\n&#x26;lt;div className=&#x26;quot;tab-menu&#x26;quot;&#x26;gt;\n{items.map(({ props: { index, label } }) =&#x26;gt; (\n&#x26;lt;button\nkey={`tab-btn-${index}`}\nonClick={() =&#x26;gt; changeTab(index)}\nclassName={bindIndex === index ? &#x26;quot;focus&#x26;quot; : &#x26;quot;&#x26;quot;}\n&#x26;gt;\n{label}\n&#x26;lt;/button&#x26;gt;\n))}\n&#x26;lt;/div&#x26;gt;\n&#x26;lt;div className=&#x26;quot;tab-view&#x26;quot;&#x26;gt;\n{items.map(({ props }) =&#x26;gt; (\n&#x26;lt;div\n{...props}\nclassName={`tab-content ${ bindIndex === props.index ? &#x26;quot;selected&#x26;quot; : &#x26;quot;&#x26;quot; }`}\nkey={`tab-content-${props.index}`}\n/&#x26;gt;\n))}\n&#x26;lt;/div&#x26;gt;\n&#x26;lt;/div&#x26;gt;\n);\n};\n\n\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(\n  &#x26;lt;Tabs defaultIndex=&#x26;quot;1&#x26;quot; onTabClick={console.log}&#x26;gt;\n    &#x26;lt;TabItem label=&#x26;quot;A&#x26;quot; index=&#x26;quot;1&#x26;quot;&#x26;gt;\n      Lorem ipsum\n    &#x26;lt;/TabItem&#x26;gt;\n    &#x26;lt;TabItem label=&#x26;quot;B&#x26;quot; index=&#x26;quot;2&#x26;quot;&#x26;gt;\n      Dolor sit amet\n    &#x26;lt;/TabItem&#x26;gt;\n  &#x26;lt;/Tabs&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a tag input field.</p>\n<ul>\n<li>Define a <code>TagInput</code> component and use the <code>useState()</code> hook to initialize an array from <code>tags</code>.</li>\n<li>Use <code>Array.prototype.map()</code> on the collected nodes to render the list of tags.</li>\n<li>Define the <code>addTagData</code> method, which will be executed when pressing the <code>Enter</code> key.</li>\n<li>The <code>addTagData</code> method calls <code>setTagData</code> to add the new tag using the spread (<code>...</code>) operator to prepend the existing tags and add the new tag at the end of the <code>tagData</code> array.</li>\n<li>Define the <code>removeTagData</code> method, which will be executed on clicking the delete icon in the tag.</li>\n<li>Use <code>Array.prototype.filter()</code> in the <code>removeTagData</code> method to remove the tag using its <code>index</code> to filter it out from the <code>tagData</code> array.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb59\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb59-1\" title=\"1\"><span class=\"fu\">.tag-input</span> {</a>\n<a class=\"sourceLine\" id=\"cb59-2\" title=\"2\">  <span class=\"kw\">display</span>: flex<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-3\" title=\"3\">  <span class=\"kw\">flex-wrap</span>: wrap<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-4\" title=\"4\">  <span class=\"kw\">min-height</span>: <span class=\"dv\">48</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-5\" title=\"5\">  <span class=\"kw\">padding</span>: <span class=\"dv\">0</span> <span class=\"dv\">8</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-6\" title=\"6\">  <span class=\"kw\">border</span>: <span class=\"dv\">1</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">#d6d8da</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-7\" title=\"7\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">6</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-8\" title=\"8\">}</a>\n<a class=\"sourceLine\" id=\"cb59-9\" title=\"9\"></a>\n<a class=\"sourceLine\" id=\"cb59-10\" title=\"10\"><span class=\"fu\">.tag-input</span> input {</a>\n<a class=\"sourceLine\" id=\"cb59-11\" title=\"11\">  <span class=\"kw\">flex</span>: <span class=\"dv\">1</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-12\" title=\"12\">  <span class=\"kw\">border</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-13\" title=\"13\">  <span class=\"kw\">height</span>: <span class=\"dv\">46</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-14\" title=\"14\">  <span class=\"kw\">font-size</span>: <span class=\"dv\">14</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-15\" title=\"15\">  <span class=\"kw\">padding</span>: <span class=\"dv\">4</span><span class=\"dt\">px</span> <span class=\"dv\">0</span> <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-16\" title=\"16\">}</a>\n<a class=\"sourceLine\" id=\"cb59-17\" title=\"17\"></a>\n<a class=\"sourceLine\" id=\"cb59-18\" title=\"18\"><span class=\"fu\">.tag-input</span> input<span class=\"in\">:focus</span> {</a>\n<a class=\"sourceLine\" id=\"cb59-19\" title=\"19\">  <span class=\"kw\">outline</span>: <span class=\"dv\">transparent</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-20\" title=\"20\">}</a>\n<a class=\"sourceLine\" id=\"cb59-21\" title=\"21\"></a>\n<a class=\"sourceLine\" id=\"cb59-22\" title=\"22\"><span class=\"fu\">.tags</span> {</a>\n<a class=\"sourceLine\" id=\"cb59-23\" title=\"23\">  <span class=\"kw\">display</span>: flex<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-24\" title=\"24\">  <span class=\"kw\">flex-wrap</span>: wrap<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-25\" title=\"25\">  <span class=\"kw\">padding</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-26\" title=\"26\">  <span class=\"kw\">margin</span>: <span class=\"dv\">8</span><span class=\"dt\">px</span> <span class=\"dv\">0</span> <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-27\" title=\"27\">}</a>\n<a class=\"sourceLine\" id=\"cb59-28\" title=\"28\"></a>\n<a class=\"sourceLine\" id=\"cb59-29\" title=\"29\"><span class=\"fu\">.tag</span> {</a>\n<a class=\"sourceLine\" id=\"cb59-30\" title=\"30\">  <span class=\"kw\">width</span>: <span class=\"bu\">auto</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-31\" title=\"31\">  <span class=\"kw\">height</span>: <span class=\"dv\">32</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-32\" title=\"32\">  <span class=\"kw\">display</span>: flex<span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-33\" title=\"33\">  <span class=\"kw\">align-items</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-34\" title=\"34\">  <span class=\"kw\">justify-content</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-35\" title=\"35\">  <span class=\"kw\">color</span>: <span class=\"cn\">#fff</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-36\" title=\"36\">  <span class=\"kw\">padding</span>: <span class=\"dv\">0</span> <span class=\"dv\">8</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-37\" title=\"37\">  <span class=\"kw\">font-size</span>: <span class=\"dv\">14</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-38\" title=\"38\">  <span class=\"kw\">list-style</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-39\" title=\"39\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">6</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-40\" title=\"40\">  <span class=\"kw\">margin</span>: <span class=\"dv\">0</span> <span class=\"dv\">8</span><span class=\"dt\">px</span> <span class=\"dv\">8</span><span class=\"dt\">px</span> <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-41\" title=\"41\">  <span class=\"kw\">background</span>: <span class=\"cn\">#0052cc</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-42\" title=\"42\">}</a>\n<a class=\"sourceLine\" id=\"cb59-43\" title=\"43\"></a>\n<a class=\"sourceLine\" id=\"cb59-44\" title=\"44\"><span class=\"fu\">.tag-title</span> {</a>\n<a class=\"sourceLine\" id=\"cb59-45\" title=\"45\">  <span class=\"kw\">margin-top</span>: <span class=\"dv\">3</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-46\" title=\"46\">}</a>\n<a class=\"sourceLine\" id=\"cb59-47\" title=\"47\"></a>\n<a class=\"sourceLine\" id=\"cb59-48\" title=\"48\"><span class=\"fu\">.tag-close-icon</span> {</a>\n<a class=\"sourceLine\" id=\"cb59-49\" title=\"49\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-50\" title=\"50\">  <span class=\"kw\">width</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-51\" title=\"51\">  <span class=\"kw\">height</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-52\" title=\"52\">  <span class=\"kw\">line-height</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-53\" title=\"53\">  <span class=\"kw\">text-align</span>: <span class=\"dv\">center</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-54\" title=\"54\">  <span class=\"kw\">font-size</span>: <span class=\"dv\">14</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-55\" title=\"55\">  <span class=\"kw\">margin-left</span>: <span class=\"dv\">8</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-56\" title=\"56\">  <span class=\"kw\">color</span>: <span class=\"cn\">#0052cc</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-57\" title=\"57\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">50</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-58\" title=\"58\">  <span class=\"kw\">background</span>: <span class=\"cn\">#fff</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-59\" title=\"59\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb59-60\" title=\"60\">}</a>\n</div>\n<pre><code class=\"language-js\">const TagInput = ({ tags }) =&#x26;gt; {\n  const [tagData, setTagData] = React.useState(tags);\n  const removeTagData = (indexToRemove) =&#x26;gt; {\n    setTagData([...tagData.filter((_, index) =&#x26;gt; index !== indexToRemove)]);\n  };\n  const addTagData = (event) =&#x26;gt; {\n    if (event.target.value !== &#x26;quot;&#x26;quot;) {\n      setTagData([...tagData, event.target.value]);\n      event.target.value = &#x26;quot;&#x26;quot;;\n    }\n  };\n  return (\n    &#x26;lt;div className=&#x26;quot;tag-input&#x26;quot;&#x26;gt;\n      &#x26;lt;ul className=&#x26;quot;tags&#x26;quot;&#x26;gt;\n        {tagData.map((tag, index) =&#x26;gt; (\n          &#x26;lt;li key={index} className=&#x26;quot;tag&#x26;quot;&#x26;gt;\n            &#x26;lt;span className=&#x26;quot;tag-title&#x26;quot;&#x26;gt;{tag}&#x26;lt;/span&#x26;gt;\n            &#x26;lt;span\n              className=&#x26;quot;tag-close-icon&#x26;quot;\n              onClick={() =&#x26;gt; removeTagData(index)}\n            &#x26;gt;\n              x\n            &#x26;lt;/span&#x26;gt;\n          &#x26;lt;/li&#x26;gt;\n        ))}\n      &#x26;lt;/ul&#x26;gt;\n      &#x26;lt;input\n        type=&#x26;quot;text&#x26;quot;\n        onKeyUp={(event) =&#x26;gt; (event.key === &#x26;quot;Enter&#x26;quot; ? addTagData(event) : null)}\n        placeholder=&#x26;quot;Press enter to add a tag&#x26;quot;\n      /&#x26;gt;\n    &#x26;lt;/div&#x26;gt;\n  );\n};\n\n\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(\n  &#x26;lt;TagInput tags={[&#x26;quot;Nodejs&#x26;quot;, &#x26;quot;MongoDB&#x26;quot;]} /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders an uncontrolled <code>&lt;textarea&gt;</code> element that uses a callback function to pass its value to the parent component.</p>\n<ul>\n<li>Use the <code>defaultValue</code> passed down from the parent as the uncontrolled input field’s initial value.</li>\n<li>Use the <code>onChange</code> event to fire the <code>onValueChange</code> callback and send the new value to the parent.</li>\n</ul>\n<pre><code class=\"language-js\">const TextArea = ({\n  cols = 20,\n  rows = 2,\n  defaultValue,\n  onValueChange,\n  ...rest\n}) =&#x26;gt; {\n  return (\n    &#x26;lt;textarea\n      cols={cols}\n      rows={rows}\n      defaultValue={defaultValue}\n      onChange={({ target: { value } }) =&#x26;gt; onValueChange(value)}\n      {...rest}\n    /&#x26;gt;\n  );\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(\n  &#x26;lt;TextArea\n    placeholder=&#x26;quot;Insert some text here...&#x26;quot;\n    onValueChange={(val) =&#x26;gt; console.log(val)}\n  /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a toggle component.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to initialize the <code>isToggleOn</code> state variable to <code>defaultToggled</code>.</li>\n<li>Render an <code>&lt;input&gt;</code> and bind its <code>onClick</code> event to update the <code>isToggledOn</code> state variable, applying the appropriate <code>className</code> to the wrapping <code>&lt;label&gt;</code>.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb64\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb64-1\" title=\"1\"><span class=\"fu\">.toggle</span> input<span class=\"ex\">[type</span><span class=\"op\">=</span><span class=\"st\">&quot;checkbox&quot;</span><span class=\"ex\">]</span> {</a>\n<a class=\"sourceLine\" id=\"cb64-2\" title=\"2\">  <span class=\"kw\">display</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb64-3\" title=\"3\">}</a>\n<a class=\"sourceLine\" id=\"cb64-4\" title=\"4\"></a>\n<a class=\"sourceLine\" id=\"cb64-5\" title=\"5\"><span class=\"fu\">.toggle.on</span> {</a>\n<a class=\"sourceLine\" id=\"cb64-6\" title=\"6\">  <span class=\"kw\">background-color</span>: <span class=\"cn\">green</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb64-7\" title=\"7\">}</a>\n<a class=\"sourceLine\" id=\"cb64-8\" title=\"8\"></a>\n<a class=\"sourceLine\" id=\"cb64-9\" title=\"9\"><span class=\"fu\">.toggle.off</span> {</a>\n<a class=\"sourceLine\" id=\"cb64-10\" title=\"10\">  <span class=\"kw\">background-color</span>: <span class=\"cn\">red</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb64-11\" title=\"11\">}</a>\n</div>\n<pre><code class=\"language-js\">const Toggle = ({ defaultToggled = false }) =&#x26;gt; {\n  const [isToggleOn, setIsToggleOn] = React.useState(defaultToggled);\n\nreturn (\n&#x26;lt;label className={isToggleOn ? &#x26;quot;toggle on&#x26;quot; : &#x26;quot;toggle off&#x26;quot;}&#x26;gt;\n&#x26;lt;input\ntype=&#x26;quot;checkbox&#x26;quot;\nchecked={isToggleOn}\nonChange={() =&#x26;gt; setIsToggleOn(!isToggleOn)}\n/&#x26;gt;\n{isToggleOn ? &#x26;quot;ON&#x26;quot; : &#x26;quot;OFF&#x26;quot;}\n&#x26;lt;/label&#x26;gt;\n);\n};\n\n\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(&#x26;lt;Toggle /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Renders a tooltip component.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>show</code> variable and initialize it to <code>false</code>.</li>\n<li>Render a container element that contains the tooltip element and the <code>children</code> passed to the component.</li>\n<li>Handle the <code>onMouseEnter</code> and <code>onMouseLeave</code> methods, by altering the value of the <code>show</code> variable, toggling the <code>className</code> of the tooltip.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb67\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb67-1\" title=\"1\"><span class=\"fu\">.tooltip-container</span> {</a>\n<a class=\"sourceLine\" id=\"cb67-2\" title=\"2\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-3\" title=\"3\">}</a>\n<a class=\"sourceLine\" id=\"cb67-4\" title=\"4\"></a>\n<a class=\"sourceLine\" id=\"cb67-5\" title=\"5\"><span class=\"fu\">.tooltip-box</span> {</a>\n<a class=\"sourceLine\" id=\"cb67-6\" title=\"6\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-7\" title=\"7\">  <span class=\"kw\">background</span>: <span class=\"fu\">rgba(</span><span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0.7</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-8\" title=\"8\">  <span class=\"kw\">color</span>: <span class=\"cn\">#fff</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-9\" title=\"9\">  <span class=\"kw\">padding</span>: <span class=\"dv\">5</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-10\" title=\"10\">  <span class=\"kw\">border-radius</span>: <span class=\"dv\">5</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-11\" title=\"11\">  <span class=\"kw\">top</span>: <span class=\"fu\">calc(</span><span class=\"dv\">100</span><span class=\"dt\">%</span> <span class=\"op\">+</span> <span class=\"dv\">5</span><span class=\"dt\">px</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-12\" title=\"12\">  <span class=\"kw\">display</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-13\" title=\"13\">}</a>\n<a class=\"sourceLine\" id=\"cb67-14\" title=\"14\"></a>\n<a class=\"sourceLine\" id=\"cb67-15\" title=\"15\"><span class=\"fu\">.tooltip-box.visible</span> {</a>\n<a class=\"sourceLine\" id=\"cb67-16\" title=\"16\">  <span class=\"kw\">display</span>: <span class=\"dv\">block</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-17\" title=\"17\">}</a>\n<a class=\"sourceLine\" id=\"cb67-18\" title=\"18\"></a>\n<a class=\"sourceLine\" id=\"cb67-19\" title=\"19\"><span class=\"fu\">.tooltip-arrow</span> {</a>\n<a class=\"sourceLine\" id=\"cb67-20\" title=\"20\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-21\" title=\"21\">  <span class=\"kw\">top</span>: <span class=\"dv\">-10</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-22\" title=\"22\">  <span class=\"kw\">left</span>: <span class=\"dv\">50</span><span class=\"dt\">%</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-23\" title=\"23\">  <span class=\"kw\">border-width</span>: <span class=\"dv\">5</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-24\" title=\"24\">  <span class=\"kw\">border-style</span>: <span class=\"dv\">solid</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-25\" title=\"25\">  <span class=\"kw\">border-color</span>: <span class=\"dv\">transparent</span> <span class=\"dv\">transparent</span> <span class=\"fu\">rgba(</span><span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0</span><span class=\"op\">,</span> <span class=\"dv\">0.7</span><span class=\"fu\">)</span> <span class=\"dv\">transparent</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb67-26\" title=\"26\">}</a>\n</div>\n<pre><code class=\"language-js\">const Tooltip = ({ children, text, ...rest }) =&#x26;gt; {\n  const [show, setShow] = React.useState(false);\n\nreturn (\n&#x26;lt;div className=&#x26;quot;tooltip-container&#x26;quot;&#x26;gt;\n&#x26;lt;div className={show ? &#x26;quot;tooltip-box visible&#x26;quot; : &#x26;quot;tooltip-box&#x26;quot;}&#x26;gt;\n{text}\n&#x26;lt;span className=&#x26;quot;tooltip-arrow&#x26;quot; /&#x26;gt;\n&#x26;lt;/div&#x26;gt;\n&#x26;lt;div\nonMouseEnter={() =&#x26;gt; setShow(true)}\nonMouseLeave={() =&#x26;gt; setShow(false)}\n{...rest}\n&#x26;gt;\n{children}\n&#x26;lt;/div&#x26;gt;\n&#x26;lt;/div&#x26;gt;\n);\n};\n\n\n\n&#x3C;hr />\n\n```js\n\nReactDOM.render(\n  &#x26;lt;Tooltip text=&#x26;quot;Simple tooltip&#x26;quot;&#x26;gt;\n    &#x26;lt;button&#x26;gt;Hover me!&#x26;lt;/button&#x26;gt;\n  &#x26;lt;/Tooltip&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders a tree view of a JSON object or array with collapsible content.</p>\n<ul>\n<li>Use the value of the <code>toggled</code> prop to determine the initial state of the content (collapsed/expanded).</li>\n<li>Use the <code>useState()</code> hook to create the <code>isToggled</code> state variable and give it the value of the <code>toggled</code> prop initially.</li>\n<li>Render a <code>&lt;span&gt;</code> element and bind its <code>onClick</code> event to alter the component’s <code>isToggled</code> state.</li>\n<li>Determine the appearance of the component, based on <code>isParentToggled</code>, <code>isToggled</code>, <code>name</code> and checking for <code>Array.isArray()</code> on <code>data</code>.</li>\n<li>For each child in <code>data</code>, determine if it is an object or array and recursively render a sub-tree or a text element with the appropriate style.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb70\"><pre class=\"sourceCode css\"><code class=\"sourceCode css\"><a class=\"sourceLine\" id=\"cb70-1\" title=\"1\"><span class=\"fu\">.tree-element</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-2\" title=\"2\">  <span class=\"kw\">margin</span>: <span class=\"dv\">0</span> <span class=\"dv\">0</span> <span class=\"dv\">0</span> <span class=\"dv\">4</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-3\" title=\"3\">  <span class=\"kw\">position</span>: <span class=\"dv\">relative</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-4\" title=\"4\">}</a>\n<a class=\"sourceLine\" id=\"cb70-5\" title=\"5\"></a>\n<a class=\"sourceLine\" id=\"cb70-6\" title=\"6\"><span class=\"fu\">.tree-element.is-child</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-7\" title=\"7\">  <span class=\"kw\">margin-left</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-8\" title=\"8\">}</a>\n<a class=\"sourceLine\" id=\"cb70-9\" title=\"9\"></a>\n<a class=\"sourceLine\" id=\"cb70-10\" title=\"10\">div<span class=\"fu\">.tree-element</span><span class=\"in\">:before</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-11\" title=\"11\">  <span class=\"kw\">content</span>: <span class=\"st\">&quot;&quot;</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-12\" title=\"12\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-13\" title=\"13\">  <span class=\"kw\">top</span>: <span class=\"dv\">24</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-14\" title=\"14\">  <span class=\"kw\">left</span>: <span class=\"dv\">1</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-15\" title=\"15\">  <span class=\"kw\">height</span>: <span class=\"fu\">calc(</span><span class=\"dv\">100</span><span class=\"dt\">%</span> <span class=\"op\">-</span> <span class=\"dv\">48</span><span class=\"dt\">px</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-16\" title=\"16\">  <span class=\"kw\">border-left</span>: <span class=\"dv\">1</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">gray</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-17\" title=\"17\">}</a>\n<a class=\"sourceLine\" id=\"cb70-18\" title=\"18\"></a>\n<a class=\"sourceLine\" id=\"cb70-19\" title=\"19\">p<span class=\"fu\">.tree-element</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-20\" title=\"20\">  <span class=\"kw\">margin-left</span>: <span class=\"dv\">16</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-21\" title=\"21\">}</a>\n<a class=\"sourceLine\" id=\"cb70-22\" title=\"22\"></a>\n<a class=\"sourceLine\" id=\"cb70-23\" title=\"23\"><span class=\"fu\">.toggler</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-24\" title=\"24\">  <span class=\"kw\">position</span>: <span class=\"dv\">absolute</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-25\" title=\"25\">  <span class=\"kw\">top</span>: <span class=\"dv\">10</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-26\" title=\"26\">  <span class=\"kw\">left</span>: <span class=\"dv\">0</span><span class=\"dt\">px</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-27\" title=\"27\">  <span class=\"kw\">width</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-28\" title=\"28\">  <span class=\"kw\">height</span>: <span class=\"dv\">0</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-29\" title=\"29\">  <span class=\"kw\">border-top</span>: <span class=\"dv\">4</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"dv\">transparent</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-30\" title=\"30\">  <span class=\"kw\">border-bottom</span>: <span class=\"dv\">4</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"dv\">transparent</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-31\" title=\"31\">  <span class=\"kw\">border-left</span>: <span class=\"dv\">5</span><span class=\"dt\">px</span> <span class=\"dv\">solid</span> <span class=\"cn\">gray</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-32\" title=\"32\">  <span class=\"kw\">cursor</span>: <span class=\"dv\">pointer</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-33\" title=\"33\">}</a>\n<a class=\"sourceLine\" id=\"cb70-34\" title=\"34\"></a>\n<a class=\"sourceLine\" id=\"cb70-35\" title=\"35\"><span class=\"fu\">.toggler.closed</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-36\" title=\"36\">  <span class=\"kw\">transform</span>: <span class=\"fu\">rotate(</span><span class=\"dv\">90</span><span class=\"dt\">deg</span><span class=\"fu\">)</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-37\" title=\"37\">}</a>\n<a class=\"sourceLine\" id=\"cb70-38\" title=\"38\"></a>\n<a class=\"sourceLine\" id=\"cb70-39\" title=\"39\"><span class=\"fu\">.collapsed</span> {</a>\n<a class=\"sourceLine\" id=\"cb70-40\" title=\"40\">  <span class=\"kw\">display</span>: <span class=\"dv\">none</span><span class=\"op\">;</span></a>\n<a class=\"sourceLine\" id=\"cb70-41\" title=\"41\">}</a>\n</div>\n<pre><code class=\"language-js\">const TreeView = ({\n  data,\n  toggled = true,\n  name = null,\n  isLast = true,\n  isChildElement = false,\n  isParentToggled = true,\n}) =&#x26;gt; {\n  const [isToggled, setIsToggled] = React.useState(toggled);\n  const isDataArray = Array.isArray(data);\n\nreturn (\n&#x26;lt;div\nclassName={`tree-element ${isParentToggled &#x26;amp;&#x26;amp; &#x26;quot;collapsed&#x26;quot;} ${ isChildElement &#x26;amp;&#x26;amp; &#x26;quot;is-child&#x26;quot; }`}\n&#x26;gt;\n&#x26;lt;span\nclassName={isToggled ? &#x26;quot;toggler&#x26;quot; : &#x26;quot;toggler closed&#x26;quot;}\nonClick={() =&#x26;gt; setIsToggled(!isToggled)}\n/&#x26;gt;\n{name ? &#x26;lt;strong&#x26;gt;&#x26;amp;nbsp;&#x26;amp;nbsp;{name}: &#x26;lt;/strong&#x26;gt; : &#x26;lt;span&#x26;gt;&#x26;amp;nbsp;&#x26;amp;nbsp;&#x26;lt;/span&#x26;gt;}\n{isDataArray ? &#x26;quot;[&#x26;quot; : &#x26;quot;{&#x26;quot;}\n{!isToggled &#x26;amp;&#x26;amp; &#x26;quot;...&#x26;quot;}\n{Object.keys(data).map((v, i, a) =&#x26;gt;\ntypeof data[v] === &#x26;quot;object&#x26;quot; ? (\n&#x26;lt;TreeView\nkey={`${name}-${v}-${i}`}\ndata={data[v]}\nisLast={i === a.length - 1}\nname={isDataArray ? null : v}\nisChildElement\nisParentToggled={isParentToggled &#x26;amp;&#x26;amp; isToggled}\n/&#x26;gt;\n) : (\n&#x26;lt;p\nkey={`${name}-${v}-${i}`}\nclassName={isToggled ? &#x26;quot;tree-element&#x26;quot; : &#x26;quot;tree-element collapsed&#x26;quot;}\n&#x26;gt;\n{isDataArray ? &#x26;quot;&#x26;quot; : &#x26;lt;strong&#x26;gt;{v}: &#x26;lt;/strong&#x26;gt;}\n{data[v]}\n{i === a.length - 1 ? &#x26;quot;&#x26;quot; : &#x26;quot;,&#x26;quot;}\n&#x26;lt;/p&#x26;gt;\n)\n)}\n{isDataArray ? &#x26;quot;]&#x26;quot; : &#x26;quot;}&#x26;quot;}\n{!isLast ? &#x26;quot;,&#x26;quot; : &#x26;quot;&#x26;quot;}\n&#x26;lt;/div&#x26;gt;\n);\n};\n\n\n\n&#x3C;hr />\n\n```js\n\nconst data = {\n  lorem: {\n    ipsum: &#x26;quot;dolor sit&#x26;quot;,\n    amet: {\n      consectetur: &#x26;quot;adipiscing&#x26;quot;,\n      elit: [\n        &#x26;quot;duis&#x26;quot;,\n        &#x26;quot;vitae&#x26;quot;,\n        {\n          semper: &#x26;quot;orci&#x26;quot;,\n        },\n        {\n          est: &#x26;quot;sed ornare&#x26;quot;,\n        },\n        &#x26;quot;etiam&#x26;quot;,\n        [&#x26;quot;laoreet&#x26;quot;, &#x26;quot;tincidunt&#x26;quot;],\n        [&#x26;quot;vestibulum&#x26;quot;, &#x26;quot;ante&#x26;quot;],\n      ],\n    },\n    ipsum: &#x26;quot;primis&#x26;quot;,\n  },\n};\nReactDOM.render(\n  &#x26;lt;TreeView data={data} name=&#x26;quot;data&#x26;quot; /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Renders an uncontrolled <code>&lt;input&gt;</code> element that uses a callback function to inform its parent about value updates.</p>\n<ul>\n<li>Use the <code>defaultValue</code> passed down from the parent as the uncontrolled input field’s initial value.</li>\n<li>Use the <code>onChange</code> event to fire the <code>onValueChange</code> callback and send the new value to the parent.</li>\n</ul>\n<pre><code class=\"language-js\">const UncontrolledInput = ({ defaultValue, onValueChange, ...rest }) =&#x26;gt; {\n  return (\n    &#x26;lt;input\n      defaultValue={defaultValue}\n      onChange={({ target: { value } }) =&#x26;gt; onValueChange(value)}\n      {...rest}\n    /&#x26;gt;\n  );\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">ReactDOM.render(\n  &#x26;lt;UncontrolledInput\n    type=&#x26;quot;text&#x26;quot;\n    placeholder=&#x26;quot;Insert some text here...&#x26;quot;\n    onValueChange={console.log}\n  /&#x26;gt;,\n  document.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Handles asynchronous calls.</p>\n<ul>\n<li>Create a custom hook that takes a handler function, <code>fn</code>.</li>\n<li>Define a reducer function and an initial state for the custom hook’s state.</li>\n<li>Use the <code>useReducer()</code> hook to initialize the <code>state</code> variable and the <code>dispatch</code> function.</li>\n<li>Define an asynchronous <code>run</code> function that will run the provided callback, <code>fn</code>, while using <code>dispatch</code> to update <code>state</code> as necessary.</li>\n<li>Return an object containing the properties of <code>state</code> (<code>value</code>, <code>error</code> and <code>loading</code>) and the <code>run</code> function.</li>\n</ul>\n<pre><code class=\"language-js\">const useAsync = (fn) =&#x26;gt; {\n  const initialState = { loading: false, error: null, value: null };\n  const stateReducer = (_, action) =&#x26;gt; {\n    switch (action.type) {\n      case &#x26;quot;start&#x26;quot;:\n        return { loading: true, error: null, value: null };\n      case &#x26;quot;finish&#x26;quot;:\n        return { loading: false, error: null, value: action.value };\n      case &#x26;quot;error&#x26;quot;:\n        return { loading: false, error: action.error, value: null };\n    }\n  };\n\nconst [state, dispatch] = React.useReducer(stateReducer, initialState);\n\nconst run = async (args = null) =&#x26;gt; {\ntry {\ndispatch({ type: &#x26;quot;start&#x26;quot; });\nconst value = await fn(args);\ndispatch({ type: &#x26;quot;finish&#x26;quot;, value });\n} catch (error) {\ndispatch({ type: &#x26;quot;error&#x26;quot;, error });\n}\n};\n\nreturn { ...state, run };\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const RandomImage = (props) =&#x26;gt; {\n  const imgFetch = useAsync((url) =&#x26;gt;\n    fetch(url).then((response) =&#x26;gt; response.json())\n  );\n\nreturn (\n&#x26;lt;div&#x26;gt;\n&#x26;lt;button\nonClick={() =&#x26;gt; imgFetch.run(&#x26;quot;https://dog.ceo/api/breeds/image/random&#x26;quot;)}\ndisabled={imgFetch.isLoading}\n&#x26;gt;\nLoad image\n&#x26;lt;/button&#x26;gt;\n&#x26;lt;br /&#x26;gt;\n{imgFetch.loading &#x26;amp;&#x26;amp; &#x26;lt;div&#x26;gt;Loading...&#x26;lt;/div&#x26;gt;}\n{imgFetch.error &#x26;amp;&#x26;amp; &#x26;lt;div&#x26;gt;Error {imgFetch.error}&#x26;lt;/div&#x26;gt;}\n{imgFetch.value &#x26;amp;&#x26;amp; (\n&#x26;lt;img\nsrc={imgFetch.value.message}\nalt=&#x26;quot;avatar&#x26;quot;\nwidth={400}\nheight=&#x26;quot;auto&#x26;quot;\n/&#x26;gt;\n)}\n&#x26;lt;/div&#x26;gt;\n);\n};\n\nReactDOM.render(&#x26;lt;RandomImage /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Handles the event of clicking inside the wrapped component.</p>\n<ul>\n<li>Create a custom hook that takes a <code>ref</code> and a <code>callback</code> to handle the <code>'click'</code> event.</li>\n<li>Use the <code>useEffect()</code> hook to append and clean up the <code>click</code> event.</li>\n<li>Use the <code>useRef()</code> hook to create a <code>ref</code> for your click component and pass it to the <code>useClickInside</code> hook.</li>\n</ul>\n<pre><code class=\"language-js\">const useClickInside = (ref, callback) =&#x26;gt; {\n  const handleClick = (e) =&#x26;gt; {\n    if (ref.current &#x26;amp;&#x26;amp; ref.current.contains(e.target)) {\n      callback();\n    }\n  };\n  React.useEffect(() =&#x26;gt; {\n    document.addEventListener(&#x26;quot;click&#x26;quot;, handleClick);\n    return () =&#x26;gt; {\n      document.removeEventListener(&#x26;quot;click&#x26;quot;, handleClick);\n    };\n  });\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const ClickBox = ({ onClickInside }) =&#x26;gt; {\n  const clickRef = React.useRef();\n  useClickInside(clickRef, onClickInside);\n  return (\n    &#x26;lt;div\n      className=&#x26;quot;click-box&#x26;quot;\n      ref={clickRef}\n      style={{\n        border: &#x26;quot;2px dashed orangered&#x26;quot;,\n        height: 200,\n        width: 400,\n        display: &#x26;quot;flex&#x26;quot;,\n        justifyContent: &#x26;quot;center&#x26;quot;,\n        alignItems: &#x26;quot;center&#x26;quot;,\n      }}\n    &#x26;gt;\n      &#x26;lt;p&#x26;gt;Click inside this element&#x26;lt;/p&#x26;gt;\n    &#x26;lt;/div&#x26;gt;\n  );\n};\n\nReactDOM.render(\n&#x26;lt;ClickBox onClickInside={() =&#x26;gt; alert(&#x26;quot;click inside&#x26;quot;)} /&#x26;gt;,\ndocument.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Handles the event of clicking outside of the wrapped component.</p>\n<ul>\n<li>Create a custom hook that takes a <code>ref</code> and a <code>callback</code> to handle the <code>click</code> event.</li>\n<li>Use the <code>useEffect()</code> hook to append and clean up the <code>click</code> event.</li>\n<li>Use the <code>useRef()</code> hook to create a <code>ref</code> for your click component and pass it to the <code>useClickOutside</code> hook.</li>\n</ul>\n<pre><code class=\"language-js\">const useClickOutside = (ref, callback) =&#x26;gt; {\n  const handleClick = (e) =&#x26;gt; {\n    if (ref.current &#x26;amp;&#x26;amp; !ref.current.contains(e.target)) {\n      callback();\n    }\n  };\n  React.useEffect(() =&#x26;gt; {\n    document.addEventListener(&#x26;quot;click&#x26;quot;, handleClick);\n    return () =&#x26;gt; {\n      document.removeEventListener(&#x26;quot;click&#x26;quot;, handleClick);\n    };\n  });\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const ClickBox = ({ onClickOutside }) =&#x26;gt; {\n  const clickRef = React.useRef();\n  useClickOutside(clickRef, onClickOutside);\n  return (\n    &#x26;lt;div\n      className=&#x26;quot;click-box&#x26;quot;\n      ref={clickRef}\n      style={{\n        border: &#x26;quot;2px dashed orangered&#x26;quot;,\n        height: 200,\n        width: 400,\n        display: &#x26;quot;flex&#x26;quot;,\n        justifyContent: &#x26;quot;center&#x26;quot;,\n        alignItems: &#x26;quot;center&#x26;quot;,\n      }}\n    &#x26;gt;\n      &#x26;lt;p&#x26;gt;Click out of this element&#x26;lt;/p&#x26;gt;\n    &#x26;lt;/div&#x26;gt;\n  );\n};\n\nReactDOM.render(\n&#x26;lt;ClickBox onClickOutside={() =&#x26;gt; alert(&#x26;quot;click outside&#x26;quot;)} /&#x26;gt;,\ndocument.getElementById(&#x26;quot;root&#x26;quot;)\n);\n</code></pre>\n<hr />\n<p>Executes a callback immediately after a component is mounted.</p>\n<ul>\n<li>Use <code>useEffect()</code> with an empty array as the second argument to execute the provided callback only once when the component is mounted.</li>\n<li>Behaves like the <code>componentDidMount()</code> lifecycle method of class components.</li>\n</ul>\n<pre><code class=\"language-js\">const useComponentDidMount = (onMountHandler) =&#x26;gt; {\n  React.useEffect(() =&#x26;gt; {\n    onMountHandler();\n  }, []);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const Mounter = () =&#x26;gt; {\n  useComponentDidMount(() =&#x26;gt; console.log(&#x26;quot;Component did mount&#x26;quot;));\n\nreturn &#x26;lt;div&#x26;gt;Check the console!&#x26;lt;/div&#x26;gt;;\n};\n\nReactDOM.render(&#x26;lt;Mounter /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Executes a callback immediately before a component is unmounted and destroyed.</p>\n<ul>\n<li>Use <code>useEffect()</code> with an empty array as the second argument and return the provided callback to be executed only once before cleanup.</li>\n<li>Behaves like the <code>componentWillUnmount()</code> lifecycle method of class components.</li>\n</ul>\n<pre><code class=\"language-js\">const useComponentWillUnmount = (onUnmountHandler) =&#x26;gt; {\n  React.useEffect(\n    () =&#x26;gt; () =&#x26;gt; {\n      onUnmountHandler();\n    },\n    []\n  );\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const Unmounter = () =&#x26;gt; {\n  useComponentWillUnmount(() =&#x26;gt; console.log(&#x26;quot;Component will unmount&#x26;quot;));\n\nreturn &#x26;lt;div&#x26;gt;Check the console!&#x26;lt;/div&#x26;gt;;\n};\n\nReactDOM.render(&#x26;lt;Unmounter /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Copies the given text to the clipboard.</p>\n<ul>\n<li>Use the <a href=\"/js/s/copy-to-clipboard/\">copyToClipboard</a> snippet to copy the text to clipboard.</li>\n<li>Use the <code>useState()</code> hook to initialize the <code>copied</code> variable.</li>\n<li>Use the <code>useCallback()</code> hook to create a callback for the <code>copyToClipboard</code> method.</li>\n<li>Use the <code>useEffect()</code> hook to reset the <code>copied</code> state variable if the <code>text</code> changes.</li>\n<li>Return the <code>copied</code> state variable and the <code>copy</code> callback.</li>\n</ul>\n<pre><code class=\"language-js\">const useCopyToClipboard = (text) =&#x26;gt; {\n  const copyToClipboard = (str) =&#x26;gt; {\n    const el = document.createElement(&#x26;quot;textarea&#x26;quot;);\n    el.value = str;\n    el.setAttribute(&#x26;quot;readonly&#x26;quot;, &#x26;quot;&#x26;quot;);\n    el.style.position = &#x26;quot;absolute&#x26;quot;;\n    el.style.left = &#x26;quot;-9999px&#x26;quot;;\n    document.body.appendChild(el);\n    const selected =\n      document.getSelection().rangeCount &#x26;gt; 0\n        ? document.getSelection().getRangeAt(0)\n        : false;\n    el.select();\n    const success = document.execCommand(&#x26;quot;copy&#x26;quot;);\n    document.body.removeChild(el);\n    if (selected) {\n      document.getSelection().removeAllRanges();\n      document.getSelection().addRange(selected);\n    }\n    return success;\n  };\n\nconst [copied, setCopied] = React.useState(false);\n\nconst copy = React.useCallback(() =&#x26;gt; {\nif (!copied) setCopied(copyToClipboard(text));\n}, [text]);\nReact.useEffect(() =&#x26;gt; () =&#x26;gt; setCopied(false), [text]);\n\nreturn [copied, copy];\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const TextCopy = (props) =&#x26;gt; {\n  const [copied, copy] = useCopyToClipboard(&#x26;quot;Lorem ipsum&#x26;quot;);\n  return (\n    &#x26;lt;div&#x26;gt;\n      &#x26;lt;button onClick={copy}&#x26;gt;Click to copy&#x26;lt;/button&#x26;gt;\n      &#x26;lt;span&#x26;gt;{copied &#x26;amp;&#x26;amp; &#x26;quot;Copied!&#x26;quot;}&#x26;lt;/span&#x26;gt;\n    &#x26;lt;/div&#x26;gt;\n  );\n};\n\nReactDOM.render(&#x26;lt;TextCopy /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Debounces the given value.</p>\n<ul>\n<li>Create a custom hook that takes a <code>value</code> and a <code>delay</code>.</li>\n<li>Use the <code>useState()</code> hook to store the debounced value.</li>\n<li>Use the <code>useEffect()</code> hook to update the debounced value every time <code>value</code> is updated.</li>\n<li>Use <code>setTimeout()</code> to create a timeout that delays invoking the setter of the previous state variable by <code>delay</code> ms.</li>\n<li>Use <code>clearTimeout()</code> to clean up when dismounting the component.</li>\n<li>This is particularly useful when dealing with user input.</li>\n</ul>\n<pre><code class=\"language-js\">const useDebounce = (value, delay) =&#x26;gt; {\n  const [debouncedValue, setDebouncedValue] = React.useState(value);\n\nReact.useEffect(() =&#x26;gt; {\nconst handler = setTimeout(() =&#x26;gt; {\nsetDebouncedValue(value);\n}, delay);\n\n    return () =&#x26;gt; {\n      clearTimeout(handler);\n    };\n\n}, [value]);\n\nreturn debouncedValue;\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const Counter = () =&#x26;gt; {\n  const [value, setValue] = React.useState(0);\n  const lastValue = useDebounce(value, 500);\n\nreturn (\n&#x26;lt;div&#x26;gt;\n&#x26;lt;p&#x26;gt;\nCurrent: {value} - Debounced: {lastValue}\n&#x26;lt;/p&#x26;gt;\n&#x26;lt;button onClick={() =&#x26;gt; setValue(value + 1)}&#x26;gt;Increment&#x26;lt;/button&#x26;gt;\n&#x26;lt;/div&#x26;gt;\n);\n};\n\nReactDOM.render(&#x26;lt;Counter /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Implements <code>fetch</code> in a declarative manner.</p>\n<ul>\n<li>Create a custom hook that takes a <code>url</code> and <code>options</code>.</li>\n<li>Use the <code>useState()</code> hook to initialize the <code>response</code> and <code>error</code> state variables.</li>\n<li>Use the <code>useEffect()</code> hook to asynchronously call <code>fetch()</code> and update the state variables accordingly.</li>\n<li>Return an object containing the <code>response</code> and <code>error</code> state variables.</li>\n</ul>\n<pre><code class=\"language-js\">const useFetch = (url, options) =&#x26;gt; {\n  const [response, setResponse] = React.useState(null);\n  const [error, setError] = React.useState(null);\n\nReact.useEffect(() =&#x26;gt; {\nconst fetchData = async () =&#x26;gt; {\ntry {\nconst res = await fetch(url, options);\nconst json = await res.json();\nsetResponse(json);\n} catch (error) {\nsetError(error);\n}\n};\nfetchData();\n}, []);\n\nreturn { response, error };\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const ImageFetch = (props) =&#x26;gt; {\n  const res = useFetch(&#x26;quot;https://dog.ceo/api/breeds/image/random&#x26;quot;, {});\n  if (!res.response) {\n    return &#x26;lt;div&#x26;gt;Loading...&#x26;lt;/div&#x26;gt;;\n  }\n  const imageUrl = res.response.message;\n  return (\n    &#x26;lt;div&#x26;gt;\n      &#x26;lt;img src={imageUrl} alt=&#x26;quot;avatar&#x26;quot; width={400} height=&#x26;quot;auto&#x26;quot; /&#x26;gt;\n    &#x26;lt;/div&#x26;gt;\n  );\n};\n\nReactDOM.render(&#x26;lt;ImageFetch /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Implements <code>setInterval</code> in a declarative manner.</p>\n<ul>\n<li>Create a custom hook that takes a <code>callback</code> and a <code>delay</code>.</li>\n<li>Use the <code>useRef()</code> hook to create a <code>ref</code> for the callback function.</li>\n<li>Use a <code>useEffect()</code> hook to remember the latest <code>callback</code> whenever it changes.</li>\n<li>Use a <code>useEffect()</code> hook dependent on <code>delay</code> to set up the interval and clean up.</li>\n</ul>\n<pre><code class=\"language-js\">const useInterval = (callback, delay) =&#x26;gt; {\n  const savedCallback = React.useRef();\n\nReact.useEffect(() =&#x26;gt; {\nsavedCallback.current = callback;\n}, [callback]);\n\nReact.useEffect(() =&#x26;gt; {\nfunction tick() {\nsavedCallback.current();\n}\nif (delay !== null) {\nlet id = setInterval(tick, delay);\nreturn () =&#x26;gt; clearInterval(id);\n}\n}, [delay]);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const Timer = (props) =&#x26;gt; {\n  const [seconds, setSeconds] = React.useState(0);\n  useInterval(() =&#x26;gt; {\n    setSeconds(seconds + 1);\n  }, 1000);\n\nreturn &#x26;lt;p&#x26;gt;{seconds}&#x26;lt;/p&#x26;gt;;\n};\n\nReactDOM.render(&#x26;lt;Timer /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Checks if the current environment matches a given media query and returns the appropriate value.</p>\n<ul>\n<li>Check if <code>window</code> and <code>window.matchMedia</code> exist, return <code>whenFalse</code> if not (e.g. SSR environment or unsupported browser).</li>\n<li>Use <code>window.matchMedia()</code> to match the given <code>query</code>, cast its <code>matches</code> property to a boolean and store in a state variable, <code>match</code>, using the <code>useState()</code> hook.</li>\n<li>Use the <code>useEffect()</code> hook to add a listener for changes and to clean up the listeners after the hook is destroyed.</li>\n<li>Return either <code>whenTrue</code> or <code>whenFalse</code> based on the value of <code>match</code>.</li>\n</ul>\n<pre><code class=\"language-js\">const useMediaQuery = (query, whenTrue, whenFalse) =&#x26;gt; {\n  if (typeof window === &#x26;quot;undefined&#x26;quot; || typeof window.matchMedia === &#x26;quot;undefined&#x26;quot;)\n    return whenFalse;\n\nconst mediaQuery = window.matchMedia(query);\nconst [match, setMatch] = React.useState(!!mediaQuery.matches);\n\nReact.useEffect(() =&#x26;gt; {\nconst handler = () =&#x26;gt; setMatch(!!mediaQuery.matches);\nmediaQuery.addListener(handler);\nreturn () =&#x26;gt; mediaQuery.removeListener(handler);\n}, []);\n\nreturn match ? whenTrue : whenFalse;\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const ResponsiveText = () =&#x26;gt; {\n  const text = useMediaQuery(\n    &#x26;quot;(max-width: 400px)&#x26;quot;,\n    &#x26;quot;Less than 400px wide&#x26;quot;,\n    &#x26;quot;More than 400px wide&#x26;quot;\n  );\n\nreturn &#x26;lt;span&#x26;gt;{text}&#x26;lt;/span&#x26;gt;;\n};\n\nReactDOM.render(&#x26;lt;ResponsiveText /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Checks if the client is online or offline.</p>\n<ul>\n<li>Create a function, <code>getOnLineStatus</code>, that uses the <code>NavigatorOnLine</code> web API to get the online status of the client.</li>\n<li>Use the <code>useState()</code> hook to create an appropriate state variable, <code>status</code>, and setter.</li>\n<li>Use the <code>useEffect()</code> hook to add listeners for appropriate events, updating state, and cleanup those listeners when unmounting.</li>\n<li>Finally return the <code>status</code> state variable.</li>\n</ul>\n<pre><code class=\"language-js\">const getOnLineStatus = () =&#x26;gt;\n  typeof navigator !== &#x26;quot;undefined&#x26;quot; &#x26;amp;&#x26;amp; typeof navigator.onLine === &#x26;quot;boolean&#x26;quot;\n    ? navigator.onLine\n    : true;\n\nconst useNavigatorOnLine = () =&#x26;gt; {\nconst [status, setStatus] = React.useState(getOnLineStatus());\n\nconst setOnline = () =&#x26;gt; setStatus(true);\nconst setOffline = () =&#x26;gt; setStatus(false);\n\nReact.useEffect(() =&#x26;gt; {\nwindow.addEventListener(&#x26;quot;online&#x26;quot;, setOnline);\nwindow.addEventListener(&#x26;quot;offline&#x26;quot;, setOffline);\n\n    return () =&#x26;gt; {\n      window.removeEventListener(&#x26;quot;online&#x26;quot;, setOnline);\n      window.removeEventListener(&#x26;quot;offline&#x26;quot;, setOffline);\n    };\n\n}, []);\n\nreturn status;\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const StatusIndicator = () =&#x26;gt; {\n  const isOnline = useNavigatorOnLine();\n\nreturn &#x26;lt;span&#x26;gt;You are {isOnline ? &#x26;quot;online&#x26;quot; : &#x26;quot;offline&#x26;quot;}.&#x26;lt;/span&#x26;gt;;\n};\n\nReactDOM.render(&#x26;lt;StatusIndicator /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Returns a stateful value, persisted in <code>localStorage</code>, and a function to update it.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to initialize the <code>value</code> to <code>defaultValue</code>.</li>\n<li>Use the <code>useRef()</code> hook to create a ref that will hold the <code>name</code> of the value in <code>localStorage</code>.</li>\n<li>Use 3 instances of the <code>useEffect()</code> hook for initialization, <code>value</code> change and <code>name</code> change respectively.</li>\n<li>When the component is first mounted, use <code>Storage.getItem()</code> to update <code>value</code> if there’s a stored value or <code>Storage.setItem()</code> to persist the current value.</li>\n<li>When <code>value</code> is updated, use <code>Storage.setItem()</code> to store the new value.</li>\n<li>When <code>name</code> is updated, use <code>Storage.setItem()</code> to create the new key, update the <code>nameRef</code> and use <code>Storage.removeItem()</code> to remove the previous key from <code>localStorage</code>.</li>\n<li><strong>NOTE:</strong> The hook is meant for use with primitive values (i.e. not objects) and doesn’t account for changes to <code>localStorage</code> due to other code. Both of these issues can be easily handled (e.g. JSON serialization and handling the <code>'storage'</code> event).</li>\n</ul>\n<pre><code class=\"language-js\">const usePersistedState = (name, defaultValue) =&#x26;gt; {\n  const [value, setValue] = React.useState(defaultValue);\n  const nameRef = React.useRef(name);\n\nReact.useEffect(() =&#x26;gt; {\ntry {\nconst storedValue = localStorage.getItem(name);\nif (storedValue !== null) setValue(storedValue);\nelse localStorage.setItem(name, defaultValue);\n} catch {\nsetValue(defaultValue);\n}\n}, []);\n\nReact.useEffect(() =&#x26;gt; {\ntry {\nlocalStorage.setItem(nameRef.current, value);\n} catch {}\n}, [value]);\n\nReact.useEffect(() =&#x26;gt; {\nconst lastName = nameRef.current;\nif (name !== lastName) {\ntry {\nlocalStorage.setItem(name, value);\nnameRef.current = name;\nlocalStorage.removeItem(lastName);\n} catch {}\n}\n}, [name]);\n\nreturn [value, setValue];\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const MyComponent = ({ name }) =&#x26;gt; {\n  const [val, setVal] = usePersistedState(name, 10);\n  return (\n    &#x26;lt;input\n      value={val}\n      onChange={(e) =&#x26;gt; {\n        setVal(e.target.value);\n      }}\n    /&#x26;gt;\n  );\n};\n\nconst MyApp = () =&#x26;gt; {\nconst [name, setName] = React.useState(&#x26;quot;my-value&#x26;quot;);\nreturn (\n&#x26;lt;&#x26;gt;\n&#x26;lt;MyComponent name={name} /&#x26;gt;\n&#x26;lt;input\nvalue={name}\nonChange={(e) =&#x26;gt; {\nsetName(e.target.value);\n}}\n/&#x26;gt;\n&#x26;lt;/&#x26;gt;\n);\n};\n\nReactDOM.render(&#x26;lt;MyApp /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Stores the previous state or props.</p>\n<ul>\n<li>Create a custom hook that takes a <code>value</code>.</li>\n<li>Use the <code>useRef()</code> hook to create a <code>ref</code> for the <code>value</code>.</li>\n<li>Use the <code>useEffect()</code> hook to remember the latest <code>value</code>.</li>\n</ul>\n<pre><code class=\"language-js\">const usePrevious = (value) =&#x26;gt; {\n  const ref = React.useRef();\n  React.useEffect(() =&#x26;gt; {\n    ref.current = value;\n  });\n  return ref.current;\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const Counter = () =&#x26;gt; {\n  const [value, setValue] = React.useState(0);\n  const lastValue = usePrevious(value);\n\nreturn (\n&#x26;lt;div&#x26;gt;\n&#x26;lt;p&#x26;gt;\nCurrent: {value} - Previous: {lastValue}\n&#x26;lt;/p&#x26;gt;\n&#x26;lt;button onClick={() =&#x26;gt; setValue(value + 1)}&#x26;gt;Increment&#x26;lt;/button&#x26;gt;\n&#x26;lt;/div&#x26;gt;\n);\n};\n\nReactDOM.render(&#x26;lt;Counter /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Checks if the code is running on the browser or the server.</p>\n<ul>\n<li>Create a custom hook that returns an appropriate object.</li>\n<li>Use <code>typeof window</code>, <code>window.document</code> and <code>Document.createElement()</code> to check if the code is running on the browser.</li>\n<li>Use the <code>useState()</code> hook to define the <code>inBrowser</code> state variable.</li>\n<li>Use the <code>useEffect()</code> hook to update the <code>inBrowser</code> state variable and clean up at the end.</li>\n<li>Use the <code>useMemo()</code> hook to memoize the return values of the custom hook.</li>\n</ul>\n<pre><code class=\"language-js\">const isDOMavailable = !!(\n  typeof window !== &#x26;quot;undefined&#x26;quot; &#x26;amp;&#x26;amp;\n  window.document &#x26;amp;&#x26;amp;\n  window.document.createElement\n);\n\nconst useSSR = () =&#x26;gt; {\nconst [inBrowser, setInBrowser] = React.useState(isDOMavailable);\n\nReact.useEffect(() =&#x26;gt; {\nsetInBrowser(isDOMavailable);\nreturn () =&#x26;gt; {\nsetInBrowser(false);\n};\n}, []);\n\nconst useSSRObject = React.useMemo(\n() =&#x26;gt; ({\nisBrowser: inBrowser,\nisServer: !inBrowser,\ncanUseWorkers: typeof Worker !== &#x26;quot;undefined&#x26;quot;,\ncanUseEventListeners: inBrowser &#x26;amp;&#x26;amp; !!window.addEventListener,\ncanUseViewport: inBrowser &#x26;amp;&#x26;amp; !!window.screen,\n}),\n[inBrowser]\n);\n\nreturn React.useMemo(\n() =&#x26;gt; Object.assign(Object.values(useSSRObject), useSSRObject),\n[inBrowser]\n);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const SSRChecker = (props) =&#x26;gt; {\n  let { isBrowser, isServer } = useSSR();\n\nreturn &#x26;lt;p&#x26;gt;{isBrowser ? &#x26;quot;Running on browser&#x26;quot; : &#x26;quot;Running on server&#x26;quot;}&#x26;lt;/p&#x26;gt;;\n};\n\nReactDOM.render(&#x26;lt;SSRChecker /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Implements <code>setTimeout</code> in a declarative manner.</p>\n<ul>\n<li>Create a custom hook that takes a <code>callback</code> and a <code>delay</code>.</li>\n<li>Use the <code>useRef()</code> hook to create a <code>ref</code> for the callback function.</li>\n<li>Use the <code>useEffect()</code> hook to remember the latest callback.</li>\n<li>Use the <code>useEffect()</code> hook to set up the timeout and clean up.</li>\n</ul>\n<pre><code class=\"language-js\">const useTimeout = (callback, delay) =&#x26;gt; {\n  const savedCallback = React.useRef();\n\nReact.useEffect(() =&#x26;gt; {\nsavedCallback.current = callback;\n}, [callback]);\n\nReact.useEffect(() =&#x26;gt; {\nfunction tick() {\nsavedCallback.current();\n}\nif (delay !== null) {\nlet id = setTimeout(tick, delay);\nreturn () =&#x26;gt; clearTimeout(id);\n}\n}, [delay]);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const OneSecondTimer = (props) =&#x26;gt; {\n  const [seconds, setSeconds] = React.useState(0);\n  useTimeout(() =&#x26;gt; {\n    setSeconds(seconds + 1);\n  }, 1000);\n\nreturn &#x26;lt;p&#x26;gt;{seconds}&#x26;lt;/p&#x26;gt;;\n};\n\nReactDOM.render(&#x26;lt;OneSecondTimer /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Provides a boolean state variable that can be toggled between its two states.</p>\n<ul>\n<li>Use the <code>useState()</code> hook to create the <code>value</code> state variable and its setter.</li>\n<li>Create a function that toggles the value of the <code>value</code> state variable and memoize it, using the <code>useCallback()</code> hook.</li>\n<li>Return the <code>value</code> state variable and the memoized toggler function.</li>\n</ul>\n<pre><code class=\"language-js\">const useToggler = (initialState) =&#x26;gt; {\n  const [value, setValue] = React.useState(initialState);\n\nconst toggleValue = React.useCallback(() =&#x26;gt; setValue((prev) =&#x26;gt; !prev), []);\n\nreturn [value, toggleValue];\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const Switch = () =&#x26;gt; {\n  const [val, toggleVal] = useToggler(false);\n  return &#x26;lt;button onClick={toggleVal}&#x26;gt;{val ? &#x26;quot;ON&#x26;quot; : &#x26;quot;OFF&#x26;quot;}&#x26;lt;/button&#x26;gt;;\n};\nReactDOM.render(&#x26;lt;Switch /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />\n<p>Handles the <code>beforeunload</code> window event.</p>\n<ul>\n<li>Use the <code>useRef()</code> hook to create a ref for the callback function, <code>fn</code>.</li>\n<li>Use the <code>useEffect()</code> hook and <code>EventTarget.addEventListener()</code> to handle the <code>'beforeunload'</code> (when the user is about to close the window).</li>\n<li>Use <code>EventTarget.removeEventListener()</code> to perform cleanup after the component is unmounted.</li>\n</ul>\n<pre><code class=\"language-js\">const useUnload = (fn) =&#x26;gt; {\n  const cb = React.useRef(fn);\n\nReact.useEffect(() =&#x26;gt; {\nconst onUnload = cb.current;\nwindow.addEventListener(&#x26;quot;beforeunload&#x26;quot;, onUnload);\nreturn () =&#x26;gt; {\nwindow.removeEventListener(&#x26;quot;beforeunload&#x26;quot;, onUnload);\n};\n}, [cb]);\n};\n</code></pre>\n<hr />\n<pre><code class=\"language-js\">const App = () =&#x26;gt; {\n  useUnload((e) =&#x26;gt; {\n    e.preventDefault();\n    const exit = confirm(&#x26;quot;Are you sure you want to leave?&#x26;quot;);\n    if (exit) window.close();\n  });\n  return &#x26;lt;div&#x26;gt;Try closing the window.&#x26;lt;/div&#x26;gt;;\n};\nReactDOM.render(&#x26;lt;App /&#x26;gt;, document.getElementById(&#x26;quot;root&#x26;quot;));\n</code></pre>\n<hr />"},{"url":"/blog/interview-questions-js/","relativePath":"blog/interview-questions-js.md","relativeDir":"blog","base":"interview-questions-js.md","name":"interview-questions-js","frontmatter":{"title":"Javascript Interview Questions","subtitle":"Object Oriented JavaScript","date":"2021-09-11","thumb_image_alt":"big o","excerpt":"What are the possible ways to create objects in JavaScript","seo":{"title":"","description":"What are the possible ways to create objects in JavaScript","robots":[],"extra":[{"name":"og:image","value":"images/code-299f1fc7.png","keyName":"property","relativeUrl":true},{"name":"twitter:title","value":"JS-Interview","keyName":"name","relativeUrl":false},{"name":"twitter:description","value":"What are the possible ways to create objects in JavaScript","keyName":"name","relativeUrl":false}]},"template":"post","thumb_image":"images/bigo.png","image":"images/green-spruce-4e3a1745.png"},"html":"<h1>Javascript Interview Questions:</h1>\n<ol>\n<li>\n<h3>What are the possible ways to create objects in JavaScript</h3>\n<p>There are many ways to create objects in javascript as below</p>\n<ol>\n<li>\n<p><strong>Object constructor:</strong></p>\n<p>The simplest way to create an empty object is using the Object constructor. Currently this approach is not recommended.</p>\n<pre><code class=\"language-javascript\">var object = new Object();\n</code></pre>\n</li>\n<li>\n<p><strong>Object's create method:</strong></p>\n<p>The create method of Object creates a new object by passing the prototype object as a parameter</p>\n<pre><code class=\"language-javascript\">var object = Object.create(null);\n</code></pre>\n</li>\n<li>\n<p><strong>Object literal syntax:</strong></p>\n<p>The object literal syntax is equivalent to create method when it passes null as parameter</p>\n<pre><code class=\"language-javascript\">var object = {};\n</code></pre>\n</li>\n<li>\n<p><strong>Function constructor:</strong></p>\n<p>Create any function and apply the new operator to create object instances,</p>\n<pre><code class=\"language-javascript\">function Person(name) {\n    this.name = name;\n    this.age = 21;\n}\nvar object = new Person('Sudheer');\n</code></pre>\n</li>\n<li>\n<p><strong>Function constructor with prototype:</strong></p>\n<p>This is similar to function constructor but it uses prototype for their properties and methods,</p>\n<pre><code class=\"language-javascript\">function Person() {}\nPerson.prototype.name = 'Sudheer';\nvar object = new Person();\n</code></pre>\n<p>This is equivalent to an instance created with an object create method with a function prototype and then call that function with an instance and parameters as arguments.</p>\n<pre><code class=\"language-javascript\">function func {};\n\nnew func(x, y, z);\n</code></pre>\n<p><strong>(OR)</strong></p>\n<pre><code class=\"language-javascript\">// Create a new instance using function prototype.\nvar newInstance = Object.create(func.prototype)\n\n// Call the function\nvar result = func.call(newInstance, x, y, z),\n\n// If the result is a non-null object then use it otherwise just use the new instance.\nconsole.log(result &#x26;&#x26; typeof result === 'object' ? result : newInstance);\n</code></pre>\n</li>\n<li>\n<p><strong>ES6 Class syntax:</strong></p>\n<p>ES6 introduces class feature to create the objects</p>\n<pre><code class=\"language-javascript\">class Person {\n    constructor(name) {\n        this.name = name;\n    }\n}\n\nvar object = new Person('Sudheer');\n</code></pre>\n</li>\n<li>\n<p><strong>Singleton pattern:</strong></p>\n<p>A Singleton is an object which can only be instantiated one time. Repeated calls to its constructor return the same instance and this way one can ensure that they don't accidentally create multiple instances.</p>\n<pre><code class=\"language-javascript\">var object = new (function () {\n    this.name = 'Sudheer';\n})();\n</code></pre>\n</li>\n</ol>\n</li>\n<li>\n<h3>What is a prototype chain</h3>\n<p><strong>Prototype chaining</strong> is used to build new types of objects based on existing ones. It is similar to inheritance in a class based language.</p>\n<p>The prototype on object instance is available through <strong>Object.getPrototypeOf(object)</strong> or *<strong>*proto**</strong> property whereas prototype on constructors function is available through <strong>Object.prototype</strong>.</p>\n<p><img src=\"images/prototype_chain.png\" alt=\"Screenshot\"></p>\n</li>\n<li>\n<h3>What is the difference between Call, Apply and Bind</h3>\n<p>The difference between Call, Apply and Bind can be explained with below examples,</p>\n<p><strong>Call:</strong> The call() method invokes a function with a given <code>this</code> value and arguments provided one by one</p>\n<pre><code class=\"language-javascript\">var employee1 = { firstName: 'John', lastName: 'Rodson' };\nvar employee2 = { firstName: 'Jimmy', lastName: 'Baily' };\n\nfunction invite(greeting1, greeting2) {\n    console.log(greeting1 + ' ' + this.firstName + ' ' + this.lastName + ', ' + greeting2);\n}\n\ninvite.call(employee1, 'Hello', 'How are you?'); // Hello John Rodson, How are you?\ninvite.call(employee2, 'Hello', 'How are you?'); // Hello Jimmy Baily, How are you?\n</code></pre>\n<p><strong>Apply:</strong> Invokes the function with a given <code>this</code> value and allows you to pass in arguments as an array</p>\n<pre><code class=\"language-javascript\">var employee1 = { firstName: 'John', lastName: 'Rodson' };\nvar employee2 = { firstName: 'Jimmy', lastName: 'Baily' };\n\nfunction invite(greeting1, greeting2) {\n    console.log(greeting1 + ' ' + this.firstName + ' ' + this.lastName + ', ' + greeting2);\n}\n\ninvite.apply(employee1, ['Hello', 'How are you?']); // Hello John Rodson, How are you?\ninvite.apply(employee2, ['Hello', 'How are you?']); // Hello Jimmy Baily, How are you?\n</code></pre>\n<p><strong>bind:</strong> returns a new function, allowing you to pass any number of arguments</p>\n<pre><code class=\"language-javascript\">var employee1 = { firstName: 'John', lastName: 'Rodson' };\nvar employee2 = { firstName: 'Jimmy', lastName: 'Baily' };\n\nfunction invite(greeting1, greeting2) {\n    console.log(greeting1 + ' ' + this.firstName + ' ' + this.lastName + ', ' + greeting2);\n}\n\nvar inviteEmployee1 = invite.bind(employee1);\nvar inviteEmployee2 = invite.bind(employee2);\ninviteEmployee1('Hello', 'How are you?'); // Hello John Rodson, How are you?\ninviteEmployee2('Hello', 'How are you?'); // Hello Jimmy Baily, How are you?\n</code></pre>\n<p>Call and apply are pretty interchangeable. Both execute the current function immediately. You need to decide whether it’s easier to send in an array or a comma separated list of arguments. You can remember by treating Call is for <strong>comma</strong> (separated list) and Apply is for <strong>Array</strong>.</p>\n<p>Whereas Bind creates a new function that will have <code>this</code> set to the first parameter passed to bind().</p>\n</li>\n<li>\n<h3>What is JSON and its common operations</h3>\n<p><strong>JSON</strong> is a text-based data format following JavaScript object syntax, which was popularized by <code>Douglas Crockford</code>. It is useful when you want to transmit data across a network and it is basically just a text file with an extension of .json, and a MIME type of application/json</p>\n<p><strong>Parsing:</strong> Converting a string to a native object</p>\n<pre><code class=\"language-javascript\">JSON.parse(text);\n</code></pre>\n<p><strong>Stringification:</strong> converting a native object to a string so it can be transmitted across the network</p>\n<pre><code class=\"language-javascript\">JSON.stringify(object);\n</code></pre>\n</li>\n<li>\n<h3>What is the purpose of the array slice method</h3>\n<p>The <strong>slice()</strong> method returns the selected elements in an array as a new array object. It selects the elements starting at the given start argument, and ends at the given optional end argument without including the last element. If you omit the second argument then it selects till the end.</p>\n<p>Some of the examples of this method are,</p>\n<pre><code class=\"language-javascript\">let arrayIntegers = [1, 2, 3, 4, 5];\nlet arrayIntegers1 = arrayIntegers.slice(0, 2); // returns [1,2]\nlet arrayIntegers2 = arrayIntegers.slice(2, 3); // returns [3]\nlet arrayIntegers3 = arrayIntegers.slice(4); //returns [5]\n</code></pre>\n<p><strong>Note:</strong> Slice method won't mutate the original array but it returns the subset as a new array.</p>\n</li>\n<li>\n<h3>What is the purpose of the array splice method</h3>\n<p>The <strong>splice()</strong> method is used either adds/removes items to/from an array, and then returns the removed item. The first argument specifies the array position for insertion or deletion whereas the optional second argument indicates the number of elements to be deleted. Each additional argument is added to the array.</p>\n<p>Some of the examples of this method are,</p>\n<pre><code class=\"language-javascript\">let arrayIntegersOriginal1 = [1, 2, 3, 4, 5];\nlet arrayIntegersOriginal2 = [1, 2, 3, 4, 5];\nlet arrayIntegersOriginal3 = [1, 2, 3, 4, 5];\n\nlet arrayIntegers1 = arrayIntegersOriginal1.splice(0, 2); // returns [1, 2]; original array: [3, 4, 5]\nlet arrayIntegers2 = arrayIntegersOriginal2.splice(3); // returns [4, 5]; original array: [1, 2, 3]\nlet arrayIntegers3 = arrayIntegersOriginal3.splice(3, 1, 'a', 'b', 'c'); //returns [4]; original array: [1, 2, 3, \"a\", \"b\", \"c\", 5]\n</code></pre>\n<p><strong>Note:</strong> Splice method modifies the original array and returns the deleted array.</p>\n</li>\n<li>\n<h3>What is the difference between slice and splice</h3>\n<p>Some of the major difference in a tabular form</p>\n<table>\n<thead>\n<tr>\n<th>Slice</th>\n<th>Splice</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Doesn't modify the original array(immutable)</td>\n<td>Modifies the original array(mutable)</td>\n</tr>\n<tr>\n<td>Returns the subset of original array</td>\n<td>Returns the deleted elements as array</td>\n</tr>\n<tr>\n<td>Used to pick the elements from array</td>\n<td>Used to insert or delete elements to/from array</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<h3>How do you compare Object and Map</h3>\n<p><strong>Objects</strong> are similar to <strong>Maps</strong> in that both let you set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. Due to this reason, Objects have been used as Maps historically. But there are important differences that make using a Map preferable in certain cases.</p>\n<ol>\n<li>The keys of an Object are Strings and Symbols, whereas they can be any value for a Map, including functions, objects, and any primitive.</li>\n<li>The keys in Map are ordered while keys added to Object are not. Thus, when iterating over it, a Map object returns keys in order of insertion.</li>\n<li>You can get the size of a Map easily with the size property, while the number of properties in an Object must be determined manually.</li>\n<li>A Map is an iterable and can thus be directly iterated, whereas iterating over an Object requires obtaining its keys in some fashion and iterating over them.</li>\n<li>An Object has a prototype, so there are default keys in the map that could collide with your keys if you're not careful. As of ES5 this can be bypassed by using map = Object.create(null), but this is seldom done.</li>\n<li>A Map may perform better in scenarios involving frequent addition and removal of key pairs.</li>\n</ol>\n</li>\n<li>\n<h3>What is the difference between == and === operators</h3>\n<p>JavaScript provides both strict(===, !==) and type-converting(==, !=) equality comparison. The strict operators take type of variable in consideration, while non-strict operators make type correction/conversion based upon values of variables. The strict operators follow the below conditions for different types,</p>\n<ol>\n<li>Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.</li>\n<li>\n<p>Two numbers are strictly equal when they are numerically equal. i.e, Having the same number value.\nThere are two special cases in this,</p>\n<ol>\n<li>NaN is not equal to anything, including NaN.</li>\n<li>Positive and negative zeros are equal to one another.</li>\n</ol>\n</li>\n<li>Two Boolean operands are strictly equal if both are true or both are false.</li>\n<li>Two objects are strictly equal if they refer to the same Object.</li>\n<li>Null and Undefined types are not equal with ===, but equal with ==. i.e,\nnull===undefined --> false but null==undefined --> true</li>\n</ol>\n<p>Some of the example which covers the above cases,</p>\n<pre><code class=\"language-javascript\">0 == false   // true\n0 === false  // false\n1 == \"1\"     // true\n1 === \"1\"    // false\nnull == undefined // true\nnull === undefined // false\n'0' == false // true\n'0' === false // false\n[]==[] or []===[] //false, refer different objects in memory\n{}=={} or {}==={} //false, refer different objects in memory\n</code></pre>\n</li>\n<li>\n<h3>What are lambda or arrow functions</h3>\n<p>An arrow function is a shorter syntax for a function expression and does not have its own <strong>this, arguments, super, or new.target</strong>. These functions are best suited for non-method functions, and they cannot be used as constructors.</p>\n</li>\n<li>\n<h3>What is a first class function</h3>\n<p>In Javascript, functions are first class objects. First-class functions means when functions in that language are treated like any other variable.</p>\n<p>For example, in such a language, a function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to a variable. For example, in the below example, handler functions assigned to a listener</p>\n<pre><code class=\"language-javascript\">const handler = () => console.log('This is a click handler function');\ndocument.addEventListener('click', handler);\n</code></pre>\n</li>\n<li>\n<h3>What is a first order function</h3>\n<p>First-order function is a function that doesn’t accept another function as an argument and doesn’t return a function as its return value.</p>\n<pre><code class=\"language-javascript\">const firstOrder = () => console.log('I am a first order function!');\n</code></pre>\n</li>\n<li>\n<h3>What is a higher order function</h3>\n<p>Higher-order function is a function that accepts another function as an argument or returns a function as a return value or both.</p>\n<pre><code class=\"language-javascript\">const firstOrderFunc = () => console.log('Hello, I am a First order function');\nconst higherOrder = (ReturnFirstOrderFunc) => ReturnFirstOrderFunc();\nhigherOrder(firstOrderFunc);\n</code></pre>\n</li>\n<li>\n<h3>What is a unary function</h3>\n<p>Unary function (i.e. monadic) is a function that accepts exactly one argument. It stands for a single argument accepted by a function.</p>\n<p>Let us take an example of unary function,</p>\n<pre><code class=\"language-javascript\">const unaryFunction = (a) => console.log(a + 10); // Add 10 to the given argument and display the value\n</code></pre>\n</li>\n<li>\n<h3>What is the currying function</h3>\n<p>Currying is the process of taking a function with multiple arguments and turning it into a sequence of functions each with only a single argument. Currying is named after a mathematician <strong>Haskell Curry</strong>. By applying currying, a n-ary function turns it into a unary function.</p>\n<p>Let's take an example of n-ary function and how it turns into a currying function,</p>\n<pre><code class=\"language-javascript\">const multiArgFunction = (a, b, c) => a + b + c;\nconsole.log(multiArgFunction(1, 2, 3)); // 6\n\nconst curryUnaryFunction = (a) => (b) => (c) => a + b + c;\ncurryUnaryFunction(1); // returns a function: b => c =>  1 + b + c\ncurryUnaryFunction(1)(2); // returns a function: c => 3 + c\ncurryUnaryFunction(1)(2)(3); // returns the number 6\n</code></pre>\n<p>Curried functions are great to improve <strong>code reusability</strong> and <strong>functional composition</strong>.</p>\n</li>\n<li>\n<h3>What is a pure function</h3>\n<p>A <strong>Pure function</strong> is a function where the return value is only determined by its arguments without any side effects. i.e, If you call a function with the same arguments 'n' number of times and 'n' number of places in the application then it will always return the same value.</p>\n<p>Let's take an example to see the difference between pure and impure functions,</p>\n<pre><code class=\"language-javascript\">//Impure\nlet numberArray = [];\nconst impureAddNumber = (number) => numberArray.push(number);\n//Pure\nconst pureAddNumber = (number) => (argNumberArray) => argNumberArray.concat([number]);\n\n//Display the results\nconsole.log(impureAddNumber(6)); // returns 1\nconsole.log(numberArray); // returns [6]\nconsole.log(pureAddNumber(7)(numberArray)); // returns [6, 7]\nconsole.log(numberArray); // returns [6]\n</code></pre>\n<p>As per above code snippets, <strong>Push</strong> function is impure itself by altering the array and returning an push number index which is independent of parameter value. Whereas <strong>Concat</strong> on the other hand takes the array and concatenates it with the other array producing a whole new array without side effects. Also, the return value is a concatenation of the previous array.</p>\n<p>Remember that Pure functions are important as they simplify unit testing without any side effects and no need for dependency injection. They also avoid tight coupling and make it harder to break your application by not having any side effects. These principles are coming together with <strong>Immutability</strong> concept of ES6 by giving preference to <strong>const</strong> over <strong>let</strong> usage.</p>\n</li>\n<li>\n<h3>What is the purpose of the let keyword</h3>\n<p>The <code>let</code> statement declares a <strong>block scope local variable</strong>. Hence the variables defined with let keyword are limited in scope to the block, statement, or expression on which it is used. Whereas variables declared with the <code>var</code> keyword used to define a variable globally, or locally to an entire function regardless of block scope.</p>\n<p>Let's take an example to demonstrate the usage,</p>\n<pre><code class=\"language-javascript\">let counter = 30;\nif (counter === 30) {\n    let counter = 31;\n    console.log(counter); // 31\n}\nconsole.log(counter); // 30 (because the variable in if block won't exist here)\n</code></pre>\n</li>\n<li>\n<h3>What is the difference between let and var</h3>\n<p>You can list out the differences in a tabular format</p>\n<table>\n<thead>\n<tr>\n<th>var</th>\n<th>let</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>It is been available from the beginning of JavaScript</td>\n<td>Introduced as part of ES6</td>\n</tr>\n<tr>\n<td>It has function scope</td>\n<td>It has block scope</td>\n</tr>\n<tr>\n<td>Variables will be hoisted</td>\n<td>Hoisted but not initialized</td>\n</tr>\n</tbody>\n</table>\n<p>Let's take an example to see the difference,</p>\n<pre><code class=\"language-javascript\">function userDetails(username) {\n    if (username) {\n        console.log(salary); // undefined due to hoisting\n        console.log(age); // ReferenceError: Cannot access 'age' before initialization\n        let age = 30;\n        var salary = 10000;\n    }\n    console.log(salary); //10000 (accessible to due function scope)\n    console.log(age); //error: age is not defined(due to block scope)\n}\nuserDetails('John');\n</code></pre>\n</li>\n<li>\n<h3>What is the reason to choose the name let as a keyword</h3>\n<p><code>let</code> is a mathematical statement that was adopted by early programming languages like <strong>Scheme</strong> and <strong>Basic</strong>. It has been borrowed from dozens of other languages that use <code>let</code> already as a traditional keyword as close to <code>var</code> as possible.</p>\n</li>\n<li>\n<h3>How do you redeclare variables in switch block without an error</h3>\n<p>If you try to redeclare variables in a <code>switch block</code> then it will cause errors because there is only one block. For example, the below code block throws a syntax error as below,</p>\n<pre><code class=\"language-javascript\">let counter = 1;\nswitch (x) {\n    case 0:\n        let name;\n        break;\n\n    case 1:\n        let name; // SyntaxError for redeclaration.\n        break;\n}\n</code></pre>\n<p>To avoid this error, you can create a nested block inside a case clause and create a new block scoped lexical environment.</p>\n<pre><code class=\"language-javascript\">let counter = 1;\nswitch (x) {\n    case 0: {\n        let name;\n        break;\n    }\n    case 1: {\n        let name; // No SyntaxError for redeclaration.\n        break;\n    }\n}\n</code></pre>\n</li>\n<li>\n<h3>What is the Temporal Dead Zone</h3>\n<p>The Temporal Dead Zone is a behavior in JavaScript that occurs when declaring a variable with the let and const keywords, but not with var. In ECMAScript 6, accessing a <code>let</code> or <code>const</code> variable before its declaration (within its scope) causes a ReferenceError. The time span when that happens, between the creation of a variable’s binding and its declaration, is called the temporal dead zone.</p>\n<p>Let's see this behavior with an example,</p>\n<pre><code class=\"language-javascript\">function somemethod() {\n    console.log(counter1); // undefined\n    console.log(counter2); // ReferenceError\n    var counter1 = 1;\n    let counter2 = 2;\n}\n</code></pre>\n</li>\n<li>\n<h3>What is IIFE(Immediately Invoked Function Expression)</h3>\n<p>IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. The signature of it would be as below,</p>\n<pre><code class=\"language-javascript\">(function () {\n    // logic here\n})();\n</code></pre>\n<p>The primary reason to use an IIFE is to obtain data privacy because any variables declared within the IIFE cannot be accessed by the outside world. i.e, If you try to access variables with IIFE then it throws an error as below,</p>\n<pre><code class=\"language-javascript\">(function () {\n    var message = 'IIFE';\n    console.log(message);\n})();\nconsole.log(message); //Error: message is not defined\n</code></pre>\n</li>\n<li>\n<h3>What is the benefit of using modules</h3>\n<p>There are a lot of benefits to using modules in favour of a sprawling. Some of the benefits are,</p>\n<ol>\n<li>Maintainability</li>\n<li>Reusability</li>\n<li>Namespacing</li>\n</ol>\n</li>\n<li>\n<h3>What is memoization</h3>\n<p>Memoization is a programming technique which attempts to increase a function’s performance by caching its previously computed results. Each time a memoized function is called, its parameters are used to index the cache. If the data is present, then it can be returned, without executing the entire function. Otherwise the function is executed and then the result is added to the cache.\nLet's take an example of adding function with memoization,</p>\n<pre><code class=\"language-javascript\">const memoizAddition = () => {\n    let cache = {};\n    return (value) => {\n        if (value in cache) {\n            console.log('Fetching from cache');\n            return cache[value]; // Here, cache.value cannot be used as property name starts with the number which is not a valid JavaScript  identifier. Hence, can only be accessed using the square bracket notation.\n        } else {\n            console.log('Calculating result');\n            let result = value + 20;\n            cache[value] = result;\n            return result;\n        }\n    };\n};\n// returned function from memoizAddition\nconst addition = memoizAddition();\nconsole.log(addition(20)); //output: 40 calculated\nconsole.log(addition(20)); //output: 40 cached\n</code></pre>\n</li>\n<li>\n<h3>What is Hoisting</h3>\n<p>Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution. Remember that JavaScript only hoists declarations, not initialisation.\nLet's take a simple example of variable hoisting,</p>\n<pre><code class=\"language-javascript\">console.log(message); //output : undefined\nvar message = 'The variable Has been hoisted';\n</code></pre>\n<p>The above code looks like as below to the interpreter,</p>\n<pre><code class=\"language-javascript\">var message;\nconsole.log(message);\nmessage = 'The variable Has been hoisted';\n</code></pre>\n</li>\n<li>\n<h3>What are classes in ES6</h3>\n<p>In ES6, Javascript classes are primarily syntactic sugar over JavaScript’s existing prototype-based inheritance.\nFor example, the prototype based inheritance written in function expression as below,</p>\n<pre><code class=\"language-javascript\">function Bike(model, color) {\n    this.model = model;\n    this.color = color;\n}\n\nBike.prototype.getDetails = function () {\n    return this.model + ' bike has' + this.color + ' color';\n};\n</code></pre>\n<p>Whereas ES6 classes can be defined as an alternative</p>\n<pre><code class=\"language-javascript\">class Bike {\n    constructor(color, model) {\n        this.color = color;\n        this.model = model;\n    }\n\n    getDetails() {\n        return this.model + ' bike has' + this.color + ' color';\n    }\n}\n</code></pre>\n</li>\n<li>\n<h3>What are closures</h3>\n<p>A closure is the combination of a function and the lexical environment within which that function was declared. i.e, It is an inner function that has access to the outer or enclosing function’s variables. The closure has three scope chains</p>\n<ol>\n<li>Own scope where variables defined between its curly brackets</li>\n<li>Outer function’s variables</li>\n<li>Global variables</li>\n</ol>\n<p>Let's take an example of closure concept,</p>\n<pre><code class=\"language-javascript\">function Welcome(name) {\n    var greetingInfo = funct