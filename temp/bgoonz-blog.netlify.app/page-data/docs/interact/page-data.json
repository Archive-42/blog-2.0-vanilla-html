{"componentChunkName":"component---src-templates-docs-js","path":"/docs/interact/","result":{"data":{"sitePage":{"id":"SitePage /docs/interact/"}},"pageContext":{"url":"/docs/interact/","relativePath":"docs/interact/index.md","relativeDir":"docs/interact","base":"index.md","name":"index","frontmatter":{"title":"Interactive Examples","weight":1,"excerpt":"feel free to try the examples","seo":{"title":"Interactive Examples","description":"here is content the user can interact with","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"docs"},"html":"<ul>\n<li><a href=\"https://ds-algo-official.netlify.app/\">Data Structures Interactive</a></li>\n</ul>\n<iframe src=\"https://ds-algo-official.netlify.app/\" height=\"900px\" width=\"100%\">\n</iframe>\n<ul>\n<li><a href=\"https://bgoonz-games.netlify.app/\">Games</a></li>\n</ul>\n<iframe src=\"https://bgoonz-games.netlify.app/\" height=\"900px\" width=\"100%\">\n</iframe>","pages":[{"url":"/blog/big-o-complexity/","relativePath":"blog/big-o-complexity.md","relativeDir":"blog","base":"big-o-complexity.md","name":"big-o-complexity","frontmatter":{"title":"Big O Computational Complexity","subtitle":"Explained using gif animations","date":"2021-09-11","thumb_image_alt":"neural network","excerpt":"Bubble sort, sorts an array of integers by bubbling the largest integer to the top.","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"post","thumb_image":"images/neural-c16cd3ca.PNG","image":"images/my-back-0b8b3eaf.png"},"html":"<h3>Sorting Algorithms<img src=\"https://cdn-images-1.medium.com/max/800/0*Ck9aeGY-d5tbz7dT\"><img src=\"https://cdn-images-1.medium.com/max/800/0*AByxtBjFrPVVYmyu\"><img src=\"https://cdn-images-1.medium.com/max/800/0*GeYNxlRcbt2cf0rY\"><img src=\"https://cdn-images-1.medium.com/max/800/0*gbNU6wrszGPrfAZG\"><img src=\"https://cdn-images-1.medium.com/max/800/0*GeU8YwwCoK8GiSTD\"><img src=\"https://cdn-images-1.medium.com/max/800/0*IxqGb72XDVDeeiMl\"><img src=\"https://cdn-images-1.medium.com/max/800/0*HMCR--9niDt5zY6M\"><img src=\"https://cdn-images-1.medium.com/max/800/0*WLl_HpdBGXYx284T\"><img src=\"https://cdn-images-1.medium.com/max/800/0*-LyHJXGPTYsWLDZf\"><img src=\"https://cdn-images-1.medium.com/max/800/0*-naVYGTXzE2Yoali\">\n\n</h3>\n<h3>Bubble Sort</h3>\n<p>Time Complexity: Quadratic O(n^2)</p>\n<ul>\n<li>The inner for-loop contributes to O(n), however in a worst case scenario the while loop will need to run n times before bringing all n elements to their final resting spot.</li>\n</ul>\n<p>Space Complexity: O(1)</p>\n<ul>\n<li>Bubble Sort will always use the same amount of memory regardless of n.</li>\n</ul>\n<p><a href=\"https://gist.github.com/eengineergz/e67e56bed7c5a20a54851867ba5efef6\">https://gist.github.com/eengineergz/e67e56bed7c5a20a54851867ba5efef6</a></p>\n<ul>\n<li>The first major sorting algorithm one learns in introductory programming courses.</li>\n<li>Gives an intro on how to convert unsorted data into sorted data.</li>\n</ul>\n<blockquote>\n<p>It’s almost never used in production code because:</p>\n</blockquote>\n<ul>\n<li><em>It’s not efficient</em></li>\n<li><em>It’s not commonly used</em></li>\n<li><em>There is stigma attached to it</em></li>\n<li><em>Bubbling Up : Term that infers that an item is in motion, moving in some direction, and has some final resting destination.</em></li>\n<li><em>Bubble sort, sorts an array of integers by bubbling the largest integer to the top.</em></li>\n</ul>\n<p><a href=\"https://gist.github.com/eengineergz/fd4acc0c89033bd219ebf9d3ec40b053\">https://gist.github.com/eengineergz/fd4acc0c89033bd219ebf9d3ec40b053</a><a href=\"https://gist.github.com/eengineergz/80934783c628c70ac2a5a48119a82d54\">https://gist.github.com/eengineergz/80934783c628c70ac2a5a48119a82d54</a></p>\n<ul>\n<li><em>Worst Case &#x26; Best Case are always the same because it makes nested loops.</em></li>\n<li><em>Double for loops are polynomial time complexity or more specifically in this case Quadratic (Big O) of: O(n²)</em></li>\n</ul>\n<h3>Selection Sort</h3>\n<p>Time Complexity: Quadratic O(n^2)</p>\n<ul>\n<li>Our outer loop will contribute O(n) while the inner loop will contribute O(n / 2) on average. Because our loops are nested we will get O(n²);</li>\n</ul>\n<p>Space Complexity: O(1)</p>\n<ul>\n<li>Selection Sort will always use the same amount of memory regardless of n.</li>\n</ul>\n<p><a href=\"https://gist.github.com/eengineergz/4abc0fe0bf01599b0c4104b0ba633402\">https://gist.github.com/eengineergz/4abc0fe0bf01599b0c4104b0ba633402</a></p>\n<ul>\n<li>Selection sort organizes the smallest elements to the start of the array.</li>\n</ul>\n<blockquote>\n<p>Summary of how Selection Sort should work:</p>\n</blockquote>\n<ol>\n<li><em>Set MIN to location 0</em></li>\n<li><em>Search the minimum element in the list.</em></li>\n<li><em>Swap with value at location Min</em></li>\n<li><em>Increment Min to point to next element.</em></li>\n<li><em>Repeat until list is sorted.</em></li>\n</ol>\n<p><a href=\"https://gist.github.com/eengineergz/61f130c8e0097572ed908fe2629bdee0\">https://gist.github.com/eengineergz/61f130c8e0097572ed908fe2629bdee0</a></p>\n<h3>Insertion Sort</h3>\n<p>Time Complexity: Quadratic O(n^2)</p>\n<ul>\n<li>Our outer loop will contribute O(n) while the inner loop will contribute O(n / 2) on average. Because our loops are nested we will get O(n²);</li>\n</ul>\n<p>Space Complexity: O(n)</p>\n<ul>\n<li>Because we are creating a subArray for each element in the original input, our Space Comlexity becomes linear.</li>\n</ul>\n<p><a href=\"https://gist.github.com/eengineergz/a9f4b8596c7546ac92746db659186d8c\">https://gist.github.com/eengineergz/a9f4b8596c7546ac92746db659186d8c</a></p>\n<h3>Merge Sort</h3>\n<p>Time Complexity: Log Linear O(nlog(n))</p>\n<ul>\n<li>Since our array gets split in half every single time we contribute O(log(n)). The while loop contained in our helper merge function contributes O(n) therefore our time complexity is O(nlog(n)); Space Complexity: O(n)</li>\n<li>We are linear O(n) time because we are creating subArrays.</li>\n</ul>\n<h3>Example of Merge Sort</h3>\n<p><a href=\"https://gist.github.com/eengineergz/18fbb7edc9f5c4820ccfcecacf3c5e48\">https://gist.github.com/eengineergz/18fbb7edc9f5c4820ccfcecacf3c5e48</a><a href=\"https://gist.github.com/eengineergz/cbb533137a7f957d3bc4077395c1ff64\">https://gist.github.com/eengineergz/cbb533137a7f957d3bc4077395c1ff64</a></p>\n<ul>\n<li><strong>Merge sort is O(nlog(n)) time.</strong></li>\n<li><em>We need a function for merging and a function for sorting.</em></li>\n</ul>\n<blockquote>\n<p>Steps:</p>\n</blockquote>\n<ol>\n<li><em>If there is only one element in the list, it is already sorted; return the array.</em></li>\n<li><em>Otherwise, divide the list recursively into two halves until it can no longer be divided.</em></li>\n<li><em>Merge the smallest lists into new list in a sorted order.</em></li>\n</ol>\n<h3>Quick Sort</h3>\n<p>Time Complexity: Quadratic O(n^2)</p>\n<ul>\n<li>Even though the average time complexity O(nLog(n)), the worst case scenario is always quadratic.</li>\n</ul>\n<p>Space Complexity: O(n)</p>\n<ul>\n<li>Our space complexity is linear O(n) because of the partition arrays we create.</li>\n<li>QS is another Divide and Conquer strategy.</li>\n<li>Some key ideas to keep in mind:</li>\n<li>It is easy to sort elements of an array relative to a particular target value.</li>\n<li>An array of 0 or 1 elements is already trivially sorted.</li>\n</ul>\n<p><a href=\"https://gist.github.com/eengineergz/24bcbc5248a8c4e1671945e9512da57e\">https://gist.github.com/eengineergz/24bcbc5248a8c4e1671945e9512da57e</a></p>\n<h3>Binary Search</h3>\n<p>Time Complexity: Log Time O(log(n))</p>\n<p>Space Complexity: O(1)</p>\n<blockquote>\n<p><em>Recursive Solution</em></p>\n</blockquote>\n<p><a href=\"https://gist.github.com/eengineergz/c82c00a4bcba4b69b7d326d6cad3ac8c\">https://gist.github.com/eengineergz/c82c00a4bcba4b69b7d326d6cad3ac8c</a></p>\n<blockquote>\n<p><em>Min Max Solution</em></p>\n</blockquote>\n<p><a href=\"https://gist.github.com/eengineergz/eb8d1e1684db15cc2c8af28e13f38751\">https://gist.github.com/eengineergz/eb8d1e1684db15cc2c8af28e13f38751</a><a href=\"https://gist.github.com/eengineergz/bc3f576b9795ccef12a108e36f9f820a\">https://gist.github.com/eengineergz/bc3f576b9795ccef12a108e36f9f820a</a></p>\n<ul>\n<li><em>Must be conducted on a sorted array.</em></li>\n<li><em>Binary search is logarithmic time, not exponential b/c n is cut down by two, not growing.</em></li>\n<li><em>Binary Search is part of Divide and Conquer.</em></li>\n</ul>\n<h3>Insertion Sort</h3>\n<ul>\n<li><strong>Works by building a larger and larger sorted region at the left-most end of the array.</strong></li>\n</ul>\n<blockquote>\n<p>Steps:</p>\n</blockquote>\n<ol>\n<li><em>If it is the first element, and it is already sorted; return 1.</em></li>\n<li><em>Pick next element.</em></li>\n<li><em>Compare with all elements in the sorted sub list</em></li>\n<li><em>Shift all the elements in the sorted sub list that is greater than the value to be sorted.</em></li>\n<li><em>Insert the value</em></li>\n<li><em>Repeat until list is sorted.</em></li>\n</ol>\n<p><a href=\"https://gist.github.com/eengineergz/ffead1de0836c4bcc6445780a604f617\">https://gist.github.com/eengineergz/ffead1de0836c4bcc6445780a604f617</a></p>"},{"url":"/showcase/","relativePath":"showcase.md","relativeDir":"","base":"showcase.md","name":"showcase","frontmatter":{"title":"Showcase","sections":[{"section_id":"hero","type":"section_hero","title":"Showcase","image":"images/charming-dolphin.gif","content":"Some of my more engaging projects!\n"},{"section_id":"showcase","type":"section_grid","col_number":"three","grid_items":[{"title":"Git HTML PREVIEW","title_url":"https://github.com/bgoonz/GIT-HTML-PREVIEW-TOOL","image":"images/futuristic-mars.gif","content":"Preview html files by pasting their url into the search bar\n\n**Access-Control-Allow-Origin Header When Site A tries to fetch content from Site B**\n","actions":[{"label":"Live Site","url":"/https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/","style":"icon","icon_class":"github","new_window":true,"no_follow":false,"type":"action"}],"image_alt":"git html preview"},{"title":"Guitar Effects Automation Using Subsequence Dynamic Time Warping","title_url":"https://github.com/bgoonz/Revamped-Automatic-Guitar-Effect-Triggering","image":"images/curious-europa.gif","content":"**Modified subsequence dynamic time warping feature detection using pure data implemented in python**\n","actions":[{"label":"Slide Show","url":"https://1drv.ms/p/s!AkGiZ9n9CRDSpY88x407JwfEKNrDxg?e=faHSx9","style":"link","icon_class":"dev","new_window":true,"no_follow":false,"type":"action"}]},{"title":"Data Structures Interactive Learning Hub","title_url":"https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/","image":"images/ds-algo.gif","content":"**Big O notation is the language we use for talking about how long an algorithm takes to run. It's how we compare the efficiency of different approaches to a problem.**\n","actions":[{"label":"Live Site","url":"https://github.com/bgoonz/DS-ALGO-OFFICIAL","style":"icon","icon_class":"github","new_window":true,"no_follow":false,"type":"action"}]},{"title":"Learning Redux","title_url":"https://learning-redux42.netlify.app/","image_alt":"lorem-ipsum","content":"***React Redux provides a pair of custom React hooks that allow your React components to interact with the Redux store.***\n","actions":[{"label":"Website","url":"https://learning-redux42.netlify.app/","style":"icon","icon_class":"dev","new_window":true,"no_follow":false,"type":"action"}],"type":"grid_item","image":"images/best-birch.gif"},{"title":"Mihir-Beg-Music.com","title_url":"https://panoramic-eggplant-452e4.netlify.app/","image":"images/7a8bc98e902a2f6dea90386cdfb154c2.png","content":"Artist Showcase & Podcasting Site\n","actions":[{"label":"Live Site","url":"https://panoramic-eggplant-452e4.netlify.app/","style":"link","icon_class":"dev","new_window":true,"no_follow":false,"type":"action"}]},{"title":"Aux Blog w NextJS","title_url":"https://bgoonz-blog-v3-0.netlify.app/","image_alt":"get in touch","content":"**Here lives my alternate/backup blog site!**\n","actions":[{"label":"git repo","url":"https://github.com/bgoonz/alternate-blog-theme","style":"icon","icon_class":"github","new_window":true,"no_follow":false,"type":"action"}],"type":"grid_item","image":"images/21ecc2f26e2641c8e9aae5479481bbe2 (5).png"},{"title":"Potluck Planner","title_url":"https://potluck-landing.netlify.app/","image_alt":"lorem-ipsum","content":"## Potluck Planner\n\nIf you have ever tried to organize a potluck through text messages, online to-do lists or spreadsheets, you'll understand why this app is essential.In the world of social gatherings and potlucks the \"Potluck Planner\" is king. This is your place for all things pot luck.\n\n","actions":[],"type":"grid_item","image":"images/potluck-planner.JPG"},{"title":"Zumzi Video Conferencing","title_url":"https://github.com/bgoonz/zumzi-chat-messenger","image_alt":"video chat","content":"**Features:   Live Streaming, Screen Sharing, Fine control over all video & audio parameters and user permissions, Supports video streaming at various resolutions: Standard, HD, FHD and 4K, Group Chat, One-to-One chat, Invite Participants**\n","actions":[{"label":"Live Site","url":"https://goofy-perlman-0f61df.netlify.app/","style":"link","icon_class":"dev","new_window":true,"no_follow":false,"type":"action"}],"type":"grid_item","image":"images/energetic-sunflower.png"},{"title":"Web Audio Workstation","title_url":"lorem-ipsum","image_alt":"lorem-ipsum","content":"Made using jQuery and Vanilla JS\n\n","actions":[{"label":"Go To Live Site","url":"https://mihirbegmusiclab.netlify.app/","style":"link","icon_class":"dev","new_window":true,"no_follow":false,"type":"action"},{"label":"Github Repo","url":"https://github.com/bgoonz/MihirBegMusicLab","style":"link","icon_class":"dev","new_window":true,"no_follow":false,"type":"action"}],"type":"grid_item","image":"images/royal-kangaroo.JPG"}]}],"seo":{"title":"Showcase","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Showcase","keyName":"property"},{"name":"og:description","value":"project showcase","keyName":"property"},{"name":"og:image","value":"images/My Post-4ecb169f.png","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Showcase"},{"name":"twitter:description","value":"This is the showcase page"},{"name":"twitter:image","value":"images/5.jpg","relativeUrl":true}],"description":"Git HTML PREVIEW, Guitar Effects, Data Structures, Redux, Podcast Blog, Contact Form, Potluck Planner, Video Conferencing, Web Audio Workstation"},"template":"advanced"},"html":""},{"url":"/","relativePath":"index.md","relativeDir":"","base":"index.md","name":"index","frontmatter":{"title":"Web Dev Hub Home","sections":[{"section_id":"Intro","type":"section_hero","title":"I am a musician, electrical engineer & web developer","image":"images/api-c99e353f761d318322c853c03ebcf21b.gif","content":"###### **A passionate student of web development from New Jersey U.S.A**\n\n**Please note that this website is in development and is often broken!**\n\n[](https://www.vagrantup.com/)[![](https://img.icons8.com/color/96/000000/gmail.png)](mailto:bryan.guner@gmail.com)[![](https://img.icons8.com/color/96/000000/youtube.png)](https://www.youtube.com/channel/UC9-rYyUMsnEBK8G8fCyrXXA/videos)[![](https://img.icons8.com/color/96/000000/instagram-new.png)](https://www.instagram.com/bgoonz/?hl=en) [![](https://img.icons8.com/color/96/000000/medium-logo.png)](https://bryanguner.medium.com/)\n\n[ ](https://webpack.js.org/)[ ](https://www.adobe.com/products/xd.html)\n\n[![Netlify Status](https://api.netlify.com/api/v1/badges/a1b7ee1a-11a7-4bd2-a341-2260656e216f/deploy-status)](https://app.netlify.com/sites/bgoonz-blog/deploys)\n\n[![Bryans github activity graph](https://activity-graph.herokuapp.com/graph?username=bgoonz\\&custom_title=This%20is%20Bryans%20Activity\\&hide_border=true\\&theme=chartreuse-dark)](https://github.com/bgoonz/github-readme-activity-graph)\n","actions":[{"label":"Contact","url":"https://sidebar-blog.netlify.app/contact/","style":"secondary","icon_class":"linkedin","new_window":true,"no_follow":false,"type":"action"}]},{"section_id":"features","type":"section_grid","col_number":"three","grid_items":[{"content":"Memoization, Tabulation, and Sorting Algorithms by Example\nWhy is looking at runtime not a reliable method of calculating time complexity?\n","actions":[{"label":"Get Started","url":"/docs","style":"link"}],"title":"A Quick Guide To Big O","image":"images/my-back.png","title_url":"https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522"},{"content":"*Python has a built in help function that let’s you see a description of the source code without having to navigate to it… “-SickNasty … Autor Unknown”  .*\n","actions":[{"label":"View Posts","url":"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb","style":"link"}],"image_alt":"python","title":"Python Guide","title_url":"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb","image":"images/smiling-maple.png"},{"content":"<div id=\"search\"></div> <div id=\"search\" />\n","actions":[{"label":"Learn More","url":"/docs/tools","style":"link"}],"title":"Guitar Effects Triggering w DTW","title_url":"https://github.com/bgoonz/Revamped-Automatic-Guitar-Effect-Triggering","image":"images/panoramic-owl.png"},{"title_url":"https://bryanguner.medium.com/introductory-react-part-2-cda01615a186","image_alt":"img of dtw","content":"As I learn to build web applications in React I will blog about it in this series in an attempt to capture the questions that a complete beginner might encounter that a more seasoned developer would take for granted!\n","actions":[],"type":"grid_item","title":"Beginner Guide React","image":"images/successful-panda.gif"},{"title_url":"https://dev.to/bgoonz/scope-and-context-in-javascript-5cma","image_alt":"img of react","content":"Scope & Context in JS\n\nThe **scope** of a program in JavaScript is the set of variables that are available for use within the program. \n","actions":[],"type":"grid_item","image":"images/pleasant-birch.png","title":"Scope & Closure"},{"image_alt":"Every idea needs a medium","content":"PostgreSQL Cheat Sheet, Everything You Need to Get Started With VSCode + Extensions & Resources, Super Simple Intro To HTML,  Understanding Git... etc....\n","actions":[],"type":"grid_item","title":"My Medium Blog","image":"images/curious-mustard.png","title_url":"https://bryanguner.medium.com/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b"}]},{"title":"Current Interests","section_id":"interests","subtitle":"From github repositories to existential questions.","col_number":"three","grid_items":[{"title":"Angolia","title_url":"angolia","image_alt":"angolia","content":"## Full Text Search\n\n[Full Text Search](https://www.algolia.com/)\n\n## &#xA;\n","actions":[],"type":"grid_item","image":"images/spectacular-turmeric.png"},{"title":"Convolutional Neural Networks","title_url":"neural networks","image_alt":"neural networks","content":"Artificial neural networks, usually simply called neural networks, are computing systems vaguely inspired by the biological [neural networks](https://github.com/tensorflow/tensorflow)![](/\\_static/app-assets/neural.PNG)\n\n","actions":[],"type":"grid_item","image":"images/neural.PNG"},{"title":"Jamstack","title_url":"jamstack","image_alt":"jamstack","content":"## Why Jamstack\n\n*Jamstack is the new standard architecture for the web. Using Git workflows and modern build tools, pre-rendered content is served to a CDN and made dynamic through APIs and serverless functions. Technologies in the stack include JavaScript frameworks, Static Site Generators, Headless CMSs, and CDNs.*\n","actions":[],"type":"grid_item","image":"images/jamstack.png"},{"title":"Asynchronous JavaScript","title_url":"lorem-ipsum","image_alt":"lorem-ipsum","content":"The term **asynchronous** refers to two or more objects or events **not** existing or happening at the same time (or multiple related things happening without waiting for the previous one to complete). In computing, the word \"asynchronous\" is used in two major contexts.\n\n","actions":[],"type":"grid_item","image":"images/eventloop.gif"},{"title":"NJ Devils","image_alt":"nj-devils","content":"# New Jersey Devils Hockey Team\n\n### (Hockey in general)\n\n## Team identity\n\n[![](https://upload.wikimedia.org/wikipedia/en/thumb/d/da/OldDevils.png/300px-OldDevils.png)](https://en.wikipedia.org/wiki/File:OldDevils.png)\n\nThe old green style jerseys used from 1982 to 1992The jerseys used from 1992 to 2017[Sean Avery](https://en.wikipedia.org/wiki/Sean_Avery) of the [New York Rangers](https://en.wikipedia.org/wiki/New_York_Rangers) attempts to distract Brodeur during the [2008 Stanley Cup playoffs](https://en.wikipedia.org/wiki/2008\\_Stanley_Cup_playoffs). The playoff series was the fifth to feature the [Devils–Rangers rivalry](https://en.wikipedia.org/wiki/Devils%E2%80%93Rangers_rivalry).\n","actions":[{"label":"lorem-ipsum","url":"#","style":"link","icon_class":"dev","new_window":false,"no_follow":false}],"type":"grid_item","image":"images/njdevils.jpg","title_url":"https://www.allaboutthejersey.com/"},{"title":"ITER Fusion Reactor Experiment (Southern France)","title_url":"lorem-ipsum","image_alt":"lorem-ipsum","content":"# Break Even Nuclear Fusion Candidate\n\nIn December, researchers at the Joint European Torus (JET) started conducting fusion experiments with tritium — a rare and radioactive isotope of hydrogen. The facility is a one-tenth-volume mock-up of the US$22-billion ITER project and has the same doughnut-shaped ‘tokamak’ design — the world’s most developed approach to fusion energy. It is the first time since 1997 that researchers have done experiments in a tokamak with any significant amount of tritium.\n\n","actions":[],"type":"grid_item","image":"images/iter-zoomed.PNG"}],"type":"section_grid"},{"section_id":"features-two-col","type":"section_grid","title":"Resume & Portfolio","col_number":"two","grid_items":[{"title":"Resume","actions":[{"label":"Learn More","url":"https://1drv.ms/b/s!AkGiZ9n9CRDSpLsZsnPtiN7p77vq6A","style":"link"},{"label":"Download PDF","url":"#","style":"link","icon_class":"dev","new_window":false,"no_follow":false,"type":"action"}],"image":"images/resume.JPG","title_url":"https://github.com/bgoonz/resume-cv-portfolio-samples/raw/master/2021-resume/bryan-guner-resume-2021.pdf"},{"title":"Showcase","content":"![](/\\_static/app-assets/lambda-demo1.gif)My Projects!\n","actions":[{"label":"Learn More","url":"/showcase","style":"link"}],"image":"images/My Post.png"}]},{"title":"Blog-Archive-And-Mini-Projects","section_id":"lorem-ipsum","image_alt":"lorem-ipsum","image_position":"left","content":"<iframe class=\"block-content\" width=\"100%  width=\"1200px!important\" height=\"1000px!important\"\n  src=\"https://random-static-html-deploys.netlify.app/rotate.html\" title=\"YouTube video\n  player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n  encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","actions":[],"type":"section_content"},{"section_id":"Web Audio DAW","image_alt":"medium","image_position":"left","actions":[{"label":"Go To Web Audio Daw","url":"https://mihirbegmusiclab.netlify.app/","style":"primary","icon_class":"dev","new_window":true,"no_follow":false,"type":"action"}],"type":"section_content","image":"images/goals.jpg","title":"Web Audio DAW"},{"title":"Quick Links","section_id":"navigate from the home page","col_number":"two","type":"section_docs","subtitle":"quick links home"},{"title":"Contact","section_id":"contact","actions":[{"label":"Contact","url":"/docs/faq/contact","style":"primary","icon_class":"dev","new_window":false,"no_follow":false,"type":"action"},{"label":"email","url":"mailto:bryan.guner@gmail.com","style":"primary","icon_class":"dev","new_window":false,"no_follow":false},{"label":"Collaborate","url":"https://webdevhub.jetbrains.space/oauth/auth/invite/419dd305ba717a392a02aa5b4e41e09c","style":"primary","icon_class":"dev","new_window":false,"no_follow":false},{"label":"Subscribe (Youtube)","url":"https://www.youtube.com/channel/UC9-rYyUMsnEBK8G8fCyrXXA?sub_confirmation=1","style":"primary","icon_class":"dev","new_window":false,"no_follow":false}],"type":"section_cta","subtitle":"get in touch! +1 (551) - 254 - 5505"}],"seo":{"title":"Web-Dev-Hub","description":"bigO, Python, Javascript, Audio, Processing, Learning, Blog, React, PostgreSQL, Scope, Closure, Web Development, Embed, API, Website, Design, Music, Search","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Web-Dev-Hub","keyName":"property"},{"name":"og:description","value":"my resource sharing and blog site ... centered mostly on web development and just a bit of audio production / generally nerdy things I find interesting.","keyName":"property"},{"name":"og:image","value":"images/code.png","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Web-Dev-Hub"},{"name":"twitter:description","value":"Web-Dev-Hub"},{"name":"twitter:image","value":"images/4.jpg","relativeUrl":true}]},"template":"advanced"},"html":""},{"url":"/blog/flow-control-in-python/","relativePath":"blog/flow-control-in-python.md","relativeDir":"blog","base":"flow-control-in-python.md","name":"flow-control-in-python","frontmatter":{"title":"flow-control-in-python","subtitle":"flow-control-in-python","date":"2021-10-12","thumb_image_alt":"lorem-ipsum","excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"post"},"html":"<h2>Read It</h2>\n<ul>\n<li><a href=\"https://www.pythoncheatsheet.org\">Website</a></li>\n<li><a href=\"https://github.com/wilfredinni/python-cheatsheet\">Github</a></li>\n<li><a href=\"https://github.com/wilfredinni/Python-cheatsheet/raw/master/python_cheat_sheet.pdf\">PDF</a></li>\n<li><a href=\"https://mybinder.org/v2/gh/wilfredinni/python-cheatsheet/master?filepath=jupyter_notebooks\">Jupyter Notebook</a></li>\n</ul>\n<h2>Flow Control</h2>\n<h3>Comparison Operators</h3>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>==</code></td>\n<td>Equal to</td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td>Not equal to</td>\n</tr>\n<tr>\n<td><code>&#x3C;</code></td>\n<td>Less than</td>\n</tr>\n<tr>\n<td><code>></code></td>\n<td>Greater Than</td>\n</tr>\n<tr>\n<td><code>&#x3C;=</code></td>\n<td>Less than or Equal to</td>\n</tr>\n<tr>\n<td><code>>=</code></td>\n<td>Greater than or Equal to</td>\n</tr>\n</tbody>\n</table>\n<p>These operators evaluate to True or False depending on the values you give them.</p>\n<p>Examples:</p>\n<pre><code class=\"language-python\">42 == 42\n</code></pre>\n<pre><code class=\"language-python\">40 == 42\n</code></pre>\n<pre><code class=\"language-python\">'hello' == 'hello'\n</code></pre>\n<pre><code class=\"language-python\">'hello' == 'Hello'\n</code></pre>\n<pre><code class=\"language-python\">'dog' != 'cat'\n</code></pre>\n<pre><code class=\"language-python\">42 == 42.0\n</code></pre>\n<pre><code class=\"language-python\">42 == '42'\n</code></pre>\n<h3>Boolean evaluation</h3>\n<p>Never use <code>==</code> or <code>!=</code> operator to evaluate boolean operation. Use the <code>is</code> or <code>is not</code> operators,\nor use implicit boolean evaluation.</p>\n<p>NO (even if they are valid Python):</p>\n<pre><code class=\"language-python\">True == True\n</code></pre>\n<pre><code class=\"language-python\">True != False\n</code></pre>\n<p>YES (even if they are valid Python):</p>\n<pre><code class=\"language-python\">True is True\n</code></pre>\n<pre><code class=\"language-python\">True is not False\n</code></pre>\n<p>These statements are equivalent:</p>\n<pre><code class=\"language-Python\">if a is True:\n   pass\nif a is not False:\n   pass\nif a:\n   pass\n</code></pre>\n<p>And these as well:</p>\n<pre><code class=\"language-Python\">if a is False:\n   pass\nif a is not True:\n   pass\nif not a:\n   pass\n</code></pre>\n<h3>Boolean Operators</h3>\n<p>There are three Boolean operators: and, or, and not.</p>\n<p>The <em>and</em> Operator’s <em>Truth</em> Table:</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Evaluates to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>True and True</td>\n<td>True</td>\n</tr>\n<tr>\n<td>True and False</td>\n<td>False</td>\n</tr>\n<tr>\n<td>False and True</td>\n<td>False</td>\n</tr>\n<tr>\n<td>False and False</td>\n<td>False</td>\n</tr>\n</tbody>\n</table>\n<p>The <em>or</em> Operator’s <em>Truth</em> Table:</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Evaluates to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>True or True</td>\n<td>True</td>\n</tr>\n<tr>\n<td>True or False</td>\n<td>True</td>\n</tr>\n<tr>\n<td>False or True</td>\n<td>True</td>\n</tr>\n<tr>\n<td>False or False</td>\n<td>False</td>\n</tr>\n</tbody>\n</table>\n<p>The <em>not</em> Operator’s <em>Truth</em> Table:</p>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th>Evaluates to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>not True</td>\n<td>False</td>\n</tr>\n<tr>\n<td>not False</td>\n<td>True</td>\n</tr>\n</tbody>\n</table>\n<h3>Mixing Boolean and Comparison Operators</h3>\n<pre><code class=\"language-python\">(4 &#x3C; 5) and (5 &#x3C; 6)\n</code></pre>\n<pre><code class=\"language-python\">(4 &#x3C; 5) and (9 &#x3C; 6)\n</code></pre>\n<pre><code class=\"language-python\">(1 == 2) or (2 == 2)\n</code></pre>\n<p>You can also use multiple Boolean operators in an expression, along with the comparison operators:</p>\n<pre><code class=\"language-python\">2 + 2 == 4 and not 2 + 2 == 5 and 2 * 2 == 2 + 2\n</code></pre>\n<h3>if Statements</h3>\n<pre><code class=\"language-python\">if name == 'Alice':\n    print('Hi, Alice.')\n</code></pre>\n<h3>else Statements</h3>\n<pre><code class=\"language-python\">name = 'Bob'\n\nif name == 'Alice':\n    print('Hi, Alice.')\nelse:\n    print('Hello, stranger.')\n</code></pre>\n<h3>elif Statements</h3>\n<pre><code class=\"language-python\">name = 'Bob'\nage = 5\n\nif name == 'Alice':\n    print('Hi, Alice.')\nelif age &#x3C; 12:\n    print('You are not Alice, kiddo.')\n</code></pre>\n<pre><code class=\"language-python\">name = 'Bob'\nage = 30\n\nif name == 'Alice':\n    print('Hi, Alice.')\nelif age &#x3C; 12:\n    print('You are not Alice, kiddo.')\nelse:\n    print('You are neither Alice nor a little kid.')\n</code></pre>\n<h3>while Loop Statements</h3>\n<pre><code class=\"language-python\">spam = 0\n\nwhile spam &#x3C; 5:\n    print('Hello, world.')\n    spam = spam + 1\n</code></pre>\n<h3>break Statements</h3>\n<p>If the execution reaches a break statement, it immediately exits the while loop’s clause:</p>\n<pre><code class=\"language-python\">while True:\n    print('Please type your name.')\n    name = input()\n    if name == 'your name':\n        break\n\nprint('Thank you!')\n</code></pre>\n<h3>continue Statements</h3>\n<p>When the program execution reaches a continue statement, the program execution immediately jumps back to the start of the loop.</p>\n<pre><code class=\"language-python\">while True:\n    print('Who are you?')\n    name = input()\n    if name != 'Joe':\n        continue\n    print('Hello, Joe. What is the password? (It is a fish.)')\n    password = input()\n    if password == 'swordfish':\n        break\n\nprint('Access granted.')\n</code></pre>\n<h3>for Loops and the range() Function</h3>\n<pre><code class=\"language-python\">print('My name is')\nfor i in range(5):\n    print('Jimmy Five Times ({})'.format(str(i)))\n</code></pre>\n<p>The <em>range()</em> function can also be called with three arguments. The first two arguments will be the start and stop values, and the third will be the step argument. The step is the amount that the variable is increased by after each iteration.</p>\n<pre><code class=\"language-python\">for i in range(0, 10, 2):\n   print(i)\n</code></pre>\n<p>You can even use a negative number for the step argument to make the for loop count down instead of up.</p>\n<pre><code class=\"language-python\">for i in range(5, -1, -1):\n    print(i)\n</code></pre>\n<h3>For else statement</h3>\n<p>This allows you to specify a statement to execute after the full loop has been executed. Only\nuseful when a <code>break</code> condition can occur in the loop:</p>\n<pre><code class=\"language-python\">for i in [1, 2, 3, 4, 5]:\n   if i == 3:\n       break\nelse:\n   print(\"only executed when no item of the list is equal to 3\")\n</code></pre>\n<h3>Importing Modules</h3>\n<pre><code class=\"language-python\">import random\n\nfor i in range(5):\n    print(random.randint(1, 10))\n</code></pre>\n<pre><code class=\"language-python\">import random, sys, os, math\n</code></pre>\n<pre><code class=\"language-python\">from random import *\n</code></pre>\n<h3>Ending a Program with sys.exit</h3>\n<pre><code class=\"language-python\">import sys\n\nwhile True:\n    print('Type exit to exit.')\n    response = input()\n    if response == 'exit':\n        sys.exit()\n    print('You typed {}.'.format(response))\n</code></pre>"},{"url":"/review/","relativePath":"review.md","relativeDir":"","base":"review.md","name":"review","frontmatter":{"title":"review","sections":[],"seo":{"title":"review","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"advanced"},"html":"<div id=\"search\"></div>\n<h2>description: Review</h2>\n<h1>Review-Of-Previous-Concepts</h1>\n<h3>Review of Concepts</h3>\n<h3>Running JS Locally Concepts</h3>\n<ul>\n<li>\n<p>Match the commands <code>ls</code>, <code>cd</code>, <code>pwd</code> to their descriptions</p>\n<ul>\n<li><code>ls</code> lists contents of current directory</li>\n<li>\n<p><code>cd</code> changes current directory</p>\n<ul>\n<li><code>cd ..</code> takes you up one level</li>\n<li><code>cd</code> alone takes you back home</li>\n</ul>\n</li>\n<li><code>pwd</code> returns current directory</li>\n</ul>\n</li>\n<li>Given a folder structure diagram, a list of 'cd (path)' commands and target files, match the paths to the target files.</li>\n<li>Use VSCode to create a folder. Within the folder create a .js file containing <code>console.log('hello new world');</code> and save it.</li>\n<li>Use node to execute a JavaScript file in the terminal</li>\n</ul>\n<h3>Plain Old JS Object Lesson Concepts</h3>\n<ul>\n<li>\n<p>Label variables as either Primitive vs. Reference</p>\n<ul>\n<li>\n<p>primitives: strings, booleans, numbers, null and undefined</p>\n<ul>\n<li>primitives are immutable</li>\n</ul>\n</li>\n<li>\n<p>refereces: objects (including arrays)</p>\n<ul>\n<li>references are mutable</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Identify when to use <code>.</code> vs <code>[]</code> when accessing values of an object</p>\n<ul>\n<li>\n<p>dot syntax <code>object.key</code></p>\n<ul>\n<li>easier to read</li>\n<li>easier to write</li>\n<li>cannot use variables as keys</li>\n<li>keys cannot begin with a number</li>\n</ul>\n</li>\n<li>\n<p>bracket notation <code>object[\"key]</code></p>\n<ul>\n<li>allows variables as keys</li>\n<li>strings that start with numbers can be use as keys</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Write an object literal with a variable key using interpolation</p>\n<ul>\n<li>\n<p>put it in brackets to access the value of the variable, rather than just make the value that string</p>\n<pre><code class=\"language-javascript\">let a = 'b';\nlet obj = { a: 'letter_a', [a]: 'letter b' };\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Use the <code>obj[key] !== undefined</code> pattern to check if a given variable that contains a key exists in an object</p>\n<ul>\n<li>can also use <code>(key in object)</code> syntax interchangeably (returns a boolean)</li>\n</ul>\n</li>\n<li>\n<p>Utilize Object.keys and Object.values in a function</p>\n<ul>\n<li><code>Object.keys(obj)</code> returns an array of all the keys in <code>obj</code></li>\n<li><code>Object.values(obj)</code> returns an array of the values in <code>obj</code></li>\n</ul>\n</li>\n<li>\n<p>Iterate through an object using a <code>for in</code> loop</p>\n<pre><code class=\"language-javascript\">let printValues = function (obj) {\n    for (let key in obj) {\n        let value = obj[key];\n        console.log(value);\n    }\n};\n</code></pre>\n</li>\n<li>\n<p>Define a function that utilizes <code>...rest</code> syntax to accept an arbitrary number of arguments</p>\n<ul>\n<li><code>...rest</code> syntax will store all additional arguments in an array</li>\n<li>\n<p>array will be empty if there are no additional arguments</p>\n<pre><code class=\"language-javascript\">let myFunction = function (str, ...strs) {\n    console.log('The first string is ' + str);\n    console.log('The rest of the strings are:');\n    strs.forEach(function (str) {\n        console.log(str);\n    });\n};\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3></h3>\n<ul>\n<li>\n<p>Use <code>...spread</code> syntax for Object literals and Array literals</p>\n<pre><code class=\"language-javascript\">let arr1 = ['a', 'b', 'c'];\nlet longer = [...arr1, 'd', 'e']; // [\"a\", \"b\", \"c\", \"d\", \"e\"]\n// without spread syntax, this would give you a nested array\nlet withoutRest = [arr1, 'd', 'e']; // [[\"a\", \"b\", \"c\"], \"d\", \"e\"]\n</code></pre>\n</li>\n<li>\n<p>Destructure an array to reference specific elements</p>\n<p>```javascript</p>\n<p>let array = [35,9];</p>\n<p>let [firstEl, secondEl] = array;</p>\n<p>console.log(firstEl); // => 35</p>\n<p>console.log(secondEl); // => 9</p>\n</li>\n</ul>\n<p>// can also destructure using ... syntax let array = [35,9,14]; let [head, ...tail] = array; console.log(head); // => 35 console.log(tail); // => [9, 14]</p>\n<pre><code class=\"language-javascript\">- Destructure an object to reference specific values\n   - if you want to use variable names that don't match the keys, you can use aliasing\n      - `let { oldkeyname: newkeyname } = object`\n   - rule of thumb—only destructure values from objects that are two levels deep\n```javascript\nlet obj = {\n   name: \"Wilfred\",\n   appearance: [\"short\", \"mustache\"],\n   favorites: {\n      color: \"mauve\",\n      food: \"spaghetti squash\",\n      number: 3\n   }\n}\n// with variable names that match keys\nlet { name, appearance } = obj;\nconsole.log(name); // \"Wilfred\"\nconsole.log(appearance); // [\"short\", \"mustache\"]\n\n// with new variable names (aliasing)\nlet {name: myName, appearance: myAppearance} = obj;\n\nconsole.log(myName); // \"Wilfred\"\nconsole.log(myAppearance); // [\"short\", \"mustache\"]\n\n// in a function call\nlet sayHello = function({name}) {\nconsole.log(\"Hello, \" + name); // \"Hello Wilfred\"\n}\n\n// nested objects + aliasing\nlet { favorites: {color, food: vegetable} } = obj;\nconsole.log(color, vegetable); //=> mauve spaghetti squash\n</code></pre>\n<ul>\n<li>\n<p>Write a function that accepts a array as an argument and returns an object representing the count of each character in the array</p>\n<pre><code class=\"language-javascript\">//\nlet elementCounts = function (array) {\n    let obj = {};\n    array.forEach(function (el) {\n        if (el in obj) obj[el] += 1;\n        else obj[el] = 1;\n    });\n    return obj;\n};\nconsole.log(elementCounts(['e', 'f', 'g', 'f'])); // => Object {e: 1, f: 2, g: 1}\n</code></pre>\n</li>\n</ul>\n<h3>Callbacks Lesson Concepts</h3>\n<ul>\n<li>\n<p>Given multiple plausible reasons, identify why functions are called \"First Class Objects\" in JavaScript.</p>\n<ul>\n<li>they can be stored in variables, passed as arguments to other functions, and serve as return value for a function</li>\n<li>supports same basic operations as other types (strings, bools, numbers)</li>\n<li>higher-order functions take functions as arguments or return functions as values</li>\n</ul>\n</li>\n<li>\n<p>Given a code snippet containing an anonymous callback, a named callback, and multiple <code>console.log</code>s, predict what will be printed</p>\n<ul>\n<li>what is this referring to?</li>\n</ul>\n</li>\n<li>Write a function that takes in a value and two callbacks. The function should return the result of the callback that is greater.</li>\n</ul>\n<pre><code class=\"language-javascript\">let greaterCB = function (val, callback1, callback2) {\n    if (callback1(val) > callback2(val)) {\n        return callback1(val);\n    }\n    return callback2(val);\n};\n\nlet greaterCB = function (val, callback1, callback2) {\n    if (callback1(val) > callback2(val)) {\n        return callback1(val);\n    }\n    return callback2(val);\n};\n</code></pre>\n<p>// shorter version let greaterCB = function(val, callback1, callback2) { return Math.max(callback1(val), callback2(val)); } // even shorter, cause why not let greaterCB = (val, cb1, cb2) => Math.max(cb1(val), cb2(val));</p>\n<pre><code class=\"language-javascript\">- Write a function, myMap, that takes in an array and a callback as arguments. The function should mimic the behavior of `Array#map`.\n```javascript\nlet myMap = function(array, callback) {\n   let newArr = [];\n   for (let i = 0; i &#x3C; array.length; i ++) {\n      mapped = callback(array[i], i, array);\n      newArr.push(mapped);\n   }\n   return newArr;\n}\nconsole.log( myMap([16,25,36], Math.sqrt)); // => [4, 5, 6];\n\nlet myMapArrow = (array, callback) => {\n   let newArr = [];\n   array.forEach( (ele, ind, array) => {\n      newArr.push(callback(ele, ind, array));\n   })\n   return newArr;\n}\nconsole.log(myMapArrow([16,25,36], Math.sqrt)); // => [4, 5, 6];\n</code></pre>\n<ul>\n<li>\n<p>Write a function, myFilter, that takes in an array and a callback as arguments. The function should mimic the behavior of <code>Array#filter</code>.</p>\n<pre><code class=\"language-javascript\">let myFilter = function (array, callback) {\n    let filtered = [];\n    for (let i = 0; i &#x3C; array.length; i++) {\n        if (callback(array[i])) {\n            filtered.push(array[i], i, array);\n        }\n    }\n};\n</code></pre>\n</li>\n<li>\n<p>Write a function, myEvery, that takes in an array and a callback as arguments. The function should mimic the behavior of <code>Array#every</code>.</p>\n<pre><code class=\"language-javascript\">let myEvery = function (array, callback) {\n    for (let i = 0; i &#x3C; array.length; i++) {\n        if (!callback(array[i], i, array)) {\n            return false;\n        }\n    }\n    return true;\n};\n// with arrow function syntax\nlet myEvery = (array, callback) => {\n    for (let i = 0; i &#x3C; array.length; i++) {\n        if (!callback(array[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n</code></pre>\n</li>\n</ul>\n<h3>Scope Lesson Concepts</h3>\n<ul>\n<li>\n<p>Identify the difference between <code>const</code>, <code>let</code>, and <code>var</code> declarations</p>\n<ul>\n<li><code>const</code> - cannot reassign variable, scoped to block</li>\n<li><code>let</code> - can reassign variable, scoped to block</li>\n<li><code>var</code> - outdated, may or may not be reassigned, scoped to function. can be not just reassigned, but also redeclared!</li>\n<li>a variable will always evaluate to the value it contains regardless of how it was declared</li>\n</ul>\n</li>\n<li>\n<p>Explain the difference between <code>const</code>, <code>let</code>, and <code>var</code> declarations</p>\n<ul>\n<li>\n<p><code>var</code> is function scoped—so if you declare it anywhere in a function, the declaration (but not assignment) is \"hoisted\"</p>\n<ul>\n<li>so it will exist in memory as \"undefined\" which is bad and unpredictable</li>\n</ul>\n</li>\n<li><code>var</code> will also allow you to redeclare a variable, while <code>let</code> or <code>const</code> will raise a syntax error. you shouldn't be able to do that!</li>\n<li><code>const</code> won't let you reassign a variable, but if it points to a mutable object, you will still be able to change the value by mutating the object</li>\n<li>block-scoped variables allow new variables with the same name in new scopes</li>\n<li>block-scoped still performs hoisting of all variables within the block, but it doesn't initialize to the value of <code>undefined</code> like <code>var</code> does, so it throws a specific reference error if you try to access the value before it has been declared</li>\n<li>\n<p>if you do not use <code>var</code> or <code>let</code> or <code>const</code> when initializing, it will be declared as global—THIS IS BAD</p>\n<ul>\n<li>if you assign a value without a declaration, it exists in the global scope (so then it would be accessible by all outer scopes, so bad). however, there's no hoisting, so it doesn't exist in the scope until after the line is run</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Predict the evaluation of code that utilizes function scope, block scope, lexical scope, and scope chaining</p>\n<ul>\n<li>scope of a program means the set of variables that are available for use within the program</li>\n<li>\n<p>global scope is represented by the <code>window</code> object in the browser and the <code>global</code> object in Node.js</p>\n<ul>\n<li>global variables are available everywhere, and so increase the risk of name collisions</li>\n</ul>\n</li>\n<li>\n<p>local scope is the set of variables available for use within the function</p>\n<ul>\n<li>when we enter a function, we enter a new scope</li>\n<li>includes functions arguments, local variables declared inside function, and any variables that were already declared when the function is defined (hmm about that last one)</li>\n</ul>\n</li>\n<li>for blocks (denoted by curly braces <code>{}</code>, as in conditionals or <code>for</code> loops), variables can be block scoped</li>\n<li>\n<p>inner scope does not have access to variables in the outer scope</p>\n<ul>\n<li>scope chaining—if a given variable is not found in immediate scope, javascript will search all accessible outer scopes until variable is found</li>\n<li>so an inner scope can access outer scope variables</li>\n<li>but an outer scope can never access inner scope variables</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Define an arrow function</p>\n<p>```javascript</p>\n<p>let arrowFunction = (param1, param2) => {</p>\n<p>let sum = param1 + param2;</p>\n<p>return sum;</p>\n<p>}</p>\n</li>\n</ul>\n<p>// with 1 param you can remove parens around parameters let arrowFunction = param => { param += 1; return param; }</p>\n<p>// if your return statement is one line, you can use implied return let arrowFunction = param => param + 1;</p>\n<p>// you don't have to assign to variable, can be anonymous // if you never need to use it again param => param + 1;</p>\n<p>```</p>\n<ul>\n<li>\n<p>Given an arrow function, deduce the value of <code>this</code> without executing the code</p>\n<ul>\n<li>arrow functions are automatically bound to the context they were declared in</li>\n<li>unlike regular function which use the context they are invoked in (unless they have been bound using <code>Function#bind</code>)</li>\n<li>if you implement an arrow function as a method in an object the context it will be bound to is NOT the object itself, but the global context</li>\n<li>\n<p>so you can't use an arrow function to define a method directly</p>\n<p>```javascript</p>\n<p>let obj = {</p>\n<p>name: \"my object\",</p>\n<p>unboundFunc: function () {</p>\n<p>return this.name;</p>\n<p>// this function will be able to be called on different objects</p>\n<p>},</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3></h3>\n<p>boundToGlobal: () => { return this.name; // this function, no matter how you call it, will be called // on the global object, and it cannot be rebound // this is because it was defined using arrow syntax },</p>\n<pre><code class=\"language-javascript\">makeFuncBoundToObj: function () {\n    return () => {\n        return this.name;\n    }\n    // this function will return a function that will be bound\n    // to the object where we call the outer method\n    // because the arrow syntax is nested inside one of this\n    // function's methods, it cannot be rebound\n},\n\nmakeUnboundFunc: function () {\n    return function () {\n        return this.name;\n    }\n    //this function will return a function that will still be unbound\n},\n\nimmediatelyInvokedFunc: function () {\n    return this.name;\n}(), // this property will be set to the return value of this anonymous function,\n// which is invoked during the object definition;\n// basically, it's a way to check the context inside of an object, at this moment\n\ninnerObj: {\n    name: \"inner object\",\n    innerArrowFunc: () =>  {\n        return this.name;\n    } // the context inside a nested object is not the parent, it's still\n    // the global object. entering an object definition doesn't change the context\n},\n\n\nlet otherObj = { name: \"my other object\" }\n// call unboundFunc on obj, we get \"my object\" console.log(\"unboundFunc: \", obj.unboundFunc()); // => \"my object\" // assign unboundFunc to a variable and call it let newFunc = obj.unboundFunc; // this newFunc will default to being called on global object console.log(\"newFunc: \",newFunc()); // => undefined // but you could bind it directly to a different object if you wanted console.log(\"newFunc: \", newFunc.bind(otherObj)()); // \"my other object\"\n// meanwhile, obj.boundToGlobal will only ever be called on global object console.log(\"boundToGlobal: \", obj.boundToGlobal()); //=> undefined let newBoundFunc = obj.boundToGlobal; console.log(\"newBoundFunc: \", newBoundFunc()); // => undefined // even if you try to directly bind to another object, it won't work! console.log(\"newBoundFunc: \", newBoundFunc.bind(otherObj)()); // => undefined\n// let's make a new function that will always be bound to the context // where we call our function maker let boundFunc = obj.makeFuncBoundToObj();// note that we're invoking, not just assigning console.log(\"boundFunc: \", boundFunc()); // => \"my object\" // we can't rebind this function console.log(\"boundFunc: \", boundFunc.bind(otherObj)()) // =>\"my object\"\n// but if I call makeFuncBoundToObj on another context // the new bound function is stuck with that other context let boundToOther = obj.makeFuncBoundToObj.bind(otherObj)(); console.log(\"boundToOther: \", boundToOther()); // => \"my other object\" console.log(\"boundToOther: \", boundToOther.bind(obj)()) // \"my other object\"\n// the return value of my immediately invoked function // shows that the context inside of the object is the // global object, not the object itself // context only changes inside a function that is called // on an object console.log(\"immediatelyInvokedFunc: \", obj.immediatelyInvokedFunc); // => undefined\n// even though we're inside a nested object, the context is // still the same as it was outside the outer object // in this case, the global object console.log(\"innerArrowFunc: \", obj.innerObj.innerArrowFunc()); // => undefined\n</code></pre>\n<p>}</p>\n<pre><code class=\"language-javascript\">- Implement a closure and explain how the closure effects scope\n   - a closure is \"the combination of a function and the lexical environment within which that function was declared\"\n      - alternatively, \"when an inner function uses or changes variables in an outer function\"\n   - closures have access to any variables within their own scope + scope of outer functions + global scope — the set of all these available variables is \"lexical environemnt\"\n   - closure keeps reference to all variables **even if the outer function has returned**\n      - each function has a private mutable state that cannot be accessed externally\n      - the inner function will maintain a reference to the scope in which it was declared. so it has access to variables that were initialized in any outer scope—even if that scope\n      - if a variable exists in the scope of what could have been accessed by a function (e.g. global scope, outer function, etc), does that variable wind up in the closure even if it never got accessed?\n      - if you change the value of a variable (e.g. i++) you will change the value of that variable in the scope that it was declared in\n\n\n```javascript\nfunction createCounter() {\n   // this function starts a counter at 0, then returns a\n   // new function that can access and change that counter\n   //\n   // each new counter you create will have a single internal\n   // state, that can be changed only by calling the function.\n   // you can't access that state from outside of the function,\n   // even though the count variable in question is initialized\n   // by the outer function, and it remains accessible to the\n   // inner function after the outer function returns.\n   let count = 0;\n   return function() {\n      count ++;\n      return count;\n   }\n}\n\nlet counter = createCounter();\nconsole.log(counter()); //=> 1\nconsole.log(counter()); //=> 2\n// so the closure here comes into play because\n// an inner function is accessing and changing\n// a variable from an outer function\n\n// the closure is the combination of the counter\n// function and the all the variables that existed\n// in the scope that it was declared in. because\n// inner blocks/functions have access to outer\n// scopes, that includes the scope of the outer\n// function.\n\n// so counter variable is a closure, in that\n// it contains the inner count value that was\n// initialized by the outer createCounter() function\n// count has been captured or closed over\n\n// this state is private, so if i run createCounter again\n// i get a totally separate count that doesn't interact\n// with the previous one and each of the new functions\n// will have their own internal state based on the\n// initial declaration in the now-closed outer function\n\nlet counter2 = createCounter();\nconsole.log(counter2()); // => 1\n\n// if i set a new function equal to my existing counter\n// the internal state is shared with the new function\nlet counter3 = counter2;\nconsole.log(counter3());\n</code></pre>\n<ul>\n<li>\n<p>Define a method that references <code>this</code> on an object literal</p>\n<ul>\n<li>\n<p>when we use <code>this</code> in a method it refers to the object that the method is invoked on</p>\n<ul>\n<li>it will let you access other pieces of information from within that object, or even other methods</li>\n<li>method style invocation - <code>object.method(args)</code> (e.g. built in examples like <code>Array#push</code>, or <code>String#toUpperCase</code>)</li>\n</ul>\n</li>\n<li>context is set every time we invoke a function</li>\n<li>function style invocation sets the context to the global object no matter what</li>\n<li>being inside an object does not make the context that object! you still have to use method-style invocation</li>\n</ul>\n</li>\n<li>\n<p>Utilize the built in <code>Function#bind</code> on a callback to maintain the context of this</p>\n<ul>\n<li>when we call bind on a function, we get an exotic function back—so the context will always be the same for that new function</li>\n</ul>\n<pre><code class=\"language-text\">let cat = {\npurr: function () {\nconsole.log(\"meow\");\n},\npurrMore: function () {\nthis.purr();\n},\n};\nlet sayMeow = cat.purrMore; console.log(sayMeow()); // TypeError: this.purr is not a function\n\n\n// we can use the built in Function.bind to ensure our context, our this, // is the cat object let boundCat = sayMeow.bind(cat);\nboundCat(); // prints \"meow\"\n</code></pre>\n<p>``</p>\n</li>\n</ul>\n<h3></h3>\n<h3></h3>\n<pre><code class=\"language-javascript\">   - `bind` can also work with arguments, so you can have a version of a function with particular arguments and a particular context. the first arg will be the context aka the `this` you want it to use. the next arguments will be the functions arguments that you are binding\n      - if you just want to bind it to those arguments in particular, you can use `null` as the first argument, so the context won't be bound, just the arguments\n- Given a code snippet, identify what `this` refers to\n   - important to recognize the difference between scope and context\n      - scope works like a dictionary that has all the variables that are available within a given block, plus a pointer back the next outer scope (which itself has pointers to new scopes until you reach the global scope. so you can think about a whole given block's scope as a kind of linked list of dictionaries) (also, this is not to say that scope is actually implemented in this way, that is just the schema that i can use to understand it)\n      - context refers to the value of the `this` keyword\n   - the keyword `this` exists in every function and it evaluates to the object that is currently invoking that function\n   - so the context is fairly straightforward when we talk about methods being called on specific objects\n   - you could, however, call an object's method on something other than that object, and then this would refer to the context where/how it was called, e.g.\n```javascript\nlet dog = {\n   name: \"Bowser\",\n   changeName: function () {\n      this.name = \"Layla\";\n  },\n};\n\n// note this is **not invoked** - we are assigning the function itself\nlet change = dog.changeName;\nconsole.log(change()); // undefined\n\n// our dog still has the same name\nconsole.log(dog); // { name: 'Bowser', changeName: [Function: changeName] }\n\n// instead of changing the dog we changed the global name!!!\nconsole.log(this); // Object [global] {etc, etc, etc,  name: 'Layla'}\n</code></pre>\n<ul>\n<li>\n<p>CALLING SOMETHING IN THE WRONG CONTEXT CAN MESS YOU UP!</p>\n<ul>\n<li>could throw an error if it expects this to have some other method or whatever that doesn't exist</li>\n<li>you could also overwrite values or assign values to exist in a space where they should not exist</li>\n</ul>\n</li>\n<li>\n<p>if you call a function as a callback, it will set <code>this</code> to be the outer function itself, even if the function you were calling is a method that was called on a particular object</p>\n<pre><code class=\"language-text\">let cat = {\npurr: function () {\nconsole.log(\"meow\");\n},\npurrMore: function () {\nthis.purr();\n},\n};\nglobal.setTimeout(cat.purrMore, 5000); // 5 seconds later: TypeError: this.purr is not a function\n</code></pre>\n</li>\n</ul>\n<p>we can use strict mode with <code>\"use strict\";</code> this will prevent you from accessing the global object with <code>this</code> in functions, so if you try to call <code>this</code> in the global context and change a value, you will get a type error, and the things you try to access will be undefined</p>\n<h3></h3>\n<p>let sayMeow = cat.purrMore; console.log(sayMeow()); // TypeError: this.purr is not a function</p>\n<p>// we can use the built in Function.bind to ensure our context, our <code>this</code>, // is the cat object let boundCat = sayMeow.bind(cat);</p>\n<p>boundCat(); // prints \"meow\"</p>\n<pre><code class=\"language-text\">   - `bind` can also work with arguments, so you can have a version of a function with particular arguments and a particular context. the first arg will be the context aka the `this` you want it to use. the next arguments will be the functions arguments that you are binding\n      - if you just want to bind it to those arguments in particular, you can use `null` as the first argument, so the context won't be bound, just the arguments\n- Given a code snippet, identify what `this` refers to\n   - important to recognize the difference between scope and context\n      - scope works like a dictionary that has all the variables that are available within a given block, plus a pointer back the next outer scope (which itself has pointers to new scopes until you reach the global scope. so you can think about a whole given block's scope as a kind of linked list of dictionaries) (also, this is not to say that scope is actually implemented in this way, that is just the schema that i can use to understand it)\n      - context refers to the value of the `this` keyword\n   - the keyword `this` exists in every function and it evaluates to the object that is currently invoking that function\n   - so the context is fairly straightforward when we talk about methods being called on specific objects\n   - you could, however, call an object's method on something other than that object, and then this would refer to the context where/how it was called, e.g.\n```javascript\nlet dog = {\n   name: \"Bowser\",\n   changeName: function () {\n      this.name = \"Layla\";\n  },\n};\n\n// note this is **not invoked** - we are assigning the function itself\nlet change = dog.changeName;\nconsole.log(change()); // undefined\n\n// our dog still has the same name\nconsole.log(dog); // { name: 'Bowser', changeName: [Function: changeName] }\n\n// instead of changing the dog we changed the global name!!!\nconsole.log(this); // Object [global] {etc, etc, etc,  name: 'Layla'}\n</code></pre>\n<ul>\n<li>\n<p>CALLING SOMETHING IN THE WRONG CONTEXT CAN MESS YOU UP!</p>\n<ul>\n<li>could throw an error if it expects this to have some other method or whatever that doesn't exist</li>\n<li>you could also overwrite values or assign values to exist in a space where they should not exist</li>\n</ul>\n</li>\n<li>\n<p>if you call a function as a callback, it will set <code>this</code> to be the outer function itself, even if the function you were calling is a method that was called on a particular object</p>\n<p>```javascript</p>\n<p>let cat = {</p>\n<p>purr: function () {</p>\n<p>console.log(\"meow\");</p>\n<p>},</p>\n<p>purrMore: function () {</p>\n<p>this.purr();</p>\n<p>},</p>\n<p>};</p>\n</li>\n</ul>\n<p>global.setTimeout(cat.purrMore, 5000); // 5 seconds later: TypeError: this.purr is not a function</p>\n<p>```</p>\n<ul>\n<li>we can use strict mode with <code>\"use strict\";</code> this will prevent you from accessing the global object with <code>this</code> in functions, so if you try to call <code>this</code> in the global context and change a value, you will get a type error, and the things you try to access will be undefined</li>\n</ul>\n<h3>POJOs</h3>\n<h4>1. Label variables as either Primitive vs. Reference</h4>\n<p>Javascript considers most data types to be 'primitive', these data types are immutable, and are passed by value. The more complex data types: Array and Object are mutable, are considered 'reference' data types, and are passed by reference.</p>\n<ul>\n<li>Boolean - Primitive</li>\n<li>Null - Primitive</li>\n<li>Undefined - Primitive</li>\n<li>Number - Primitive</li>\n<li>String - Primitive</li>\n<li>Array - Reference</li>\n<li>Object - Reference</li>\n<li>Function - Reference</li>\n</ul>\n<h4>2. Identify when to use . vs [] when accessing values of an object</h4>\n<pre><code class=\"language-javascript\">let obj = { one: 1, two: 2 };\n\n// Choose the square brackets property accessor when the property name is determined at\n// runtime, or if the property name is not a valid identifier\nlet myKey = 'one';\nconsole.log(obj[myKey]);\n\n// Choose the dot property accessor when the property name is known ahead of time.\nconsole.log(obj.two);\n</code></pre>\n<h4>3. Write an object literal with a variable key using interpolation</h4>\n<pre><code class=\"language-javascript\">let keyName = 'two';\n\n// If the key is not known, you can use an alternative `[]` syntax for\n// object initialization only\nlet obj2 = { [keyName]: 2 };\nconsole.log(obj2);\n</code></pre>\n<h4>4. Use the obj[key] !== undefined pattern to check if a given variable that contains a key exists in an object</h4>\n<pre><code class=\"language-javascript\">function doesKeyExist(obj, key) {\n    // obj[key] !== undefined\n    // or:\n    return key in obj;\n}\n\nlet course = { bootcamp: 'Lambda', course: 'Bootcamp Prep' };\nconsole.log(doesKeyExist(course, 'course')); // => true\nconsole.log(doesKeyExist(course, 'name')); // => false\n</code></pre>\n<h4>5. Utilize Object.keys and Object.values in a function</h4>\n<pre><code class=\"language-javascript\">function printKeys(object) {\n    return Object.keys(object);\n}\n\nfunction printValues(object) {\n    return Object.values(object);\n}\n\nconsole.log(printKeys({ dog: 'Strelka', dog2: 'Belka' }));\nconsole.log(printValues({ dog: 'Strelka', dog2: 'Belka' }));\n</code></pre>\n<h4>6. Iterate through an object using a for in loop</h4>\n<pre><code class=\"language-javascript\">let player = { name: 'Sergey', skill: 'hockey' };\n\nfor (let key in player) {\n    console.log(key, player[key]);\n}\n\nconsole.log(Object.entries(player));\n</code></pre>\n<h4>7. Define a function that utilizes ...rest syntax to accept an arbitrary number of arguments</h4>\n<pre><code class=\"language-javascript\">function restSum(...otherNums) {\n    let sum = 0;\n    console.log(otherNums);\n    otherNums.forEach(function (num) {\n        sum += num;\n    });\n\n    return sum;\n}\n\nconsole.log(restSum(3, 5, 6)); // => 14\nconsole.log(restSum(1, 2, 3, 4, 5, 6, 7, 8, 9)); // => 45\nconsole.log(restSum(0)); // => 0\n</code></pre>\n<h4>8. Use ...spread syntax for Object literals and Array literals</h4>\n<pre><code class=\"language-javascript\">let numArray = [1, 2, 3];\nlet moreNums = [...numArray, 4, 5, 6];\n\nconsole.log(moreNums);\n\nlet shoe = { color: 'red', size: 10 };\nlet newShoe = { ...shoe, brand: 'Nike', size: 12 };\nconsole.log(newShoe);\nnewShoe.color = 'black';\nconsole.log(newShoe);\n\nconsole.log(shoe);\n</code></pre>\n<h4>9. Destructure an array to reference specific elements</h4>\n<pre><code class=\"language-javascript\">let arr = ['one', 'two', 'three'];\n\nlet [first] = arr;\nconsole.log(first);\n</code></pre>\n<h4>10. Destructure an object to reference specific values</h4>\n<pre><code class=\"language-javascript\">let me = {\n    name: 'Ian',\n    instruments: ['bass', 'synth', 'guitar'],\n    siblings: {\n        brothers: ['Alistair'],\n        sisters: ['Meghan']\n    }\n};\n\nlet {\n    name,\n    instruments: musical_instruments,\n    siblings: { sisters }\n} = me;\n\nconsole.log(name);\nconsole.log(musical_instruments);\nconsole.log(sisters);\n</code></pre>\n<h4>11. Write a function that accepts a string as an argument and returns an object representing the count of each character in the array</h4>\n<pre><code class=\"language-javascript\">function charCount(inputString) {\n    let res = inputString.split('').reduce(function (accum, el) {\n        if (el in accum) {\n            accum[el] = accum[el] + 1;\n        } else {\n            accum[el] = 1;\n        }\n        return accum;\n    }, {});\n    return res;\n}\n\nconsole.log(charCount('aaabbbeebbcdkjfalksdfjlkasdfasdfiiidkkdingds'));\n</code></pre>\n<h3></h3>\n<h3>Review of Concepts</h3>\n<h4>1. Identify the difference between const, let, and var declarations</h4>\n<h4>2. Explain the difference between const, let, and var declarations</h4>\n<pre><code class=\"language-javascript\">var a = 'a';\n</code></pre>\n<ul>\n<li><code>var</code> is the historical keyword used for variable declaration.</li>\n<li><code>var</code> declares variables in function scope, or global scope if not inside a function.</li>\n<li>We consider <code>var</code> to be <em>deprecated</em> and it is never used in this course.</li>\n</ul>\n<pre><code class=\"language-javascript\">let b = 'b';\n</code></pre>\n<ul>\n<li><code>let</code> is the keyword we use most often for variable declaration.</li>\n<li><code>let</code> declares variables in block scope.</li>\n<li>variables declared with <code>let</code> are re-assignable.</li>\n</ul>\n<pre><code class=\"language-javascript\">const c = 'c';\n</code></pre>\n<ul>\n<li><code>const</code> is a specialized form of <code>let</code> that can only be used to <strong>initialize</strong> a variable.</li>\n<li>Except when it is declared, you cannot assign to a <code>const</code> variable.</li>\n<li><code>const</code> scopes variables the same way that <code>let</code> does.</li>\n</ul>\n<h4>3. Predict the evaluation of code that utilizes function scope, block scope, lexical scope, and scope chaining</h4>\n<p>Consider this <code>run</code> function, inside which <code>foo</code> and <code>bar</code> have <code>function scope</code>. <code>i</code> and <code>baz</code> are scoped to the block expression.</p>\n<pre><code class=\"language-javascript\">// function and block scope in this example\nfunction run() {\n    var foo = 'Foo';\n    let bar = 'Bar';\n\n    console.log(foo, bar);\n\n    {\n        console.log(foo);\n        let baz = 'Bazz';\n        console.log(baz);\n    }\n\n    console.log(baz); // ReferenceError\n}\n\nrun();\n</code></pre>\n<p>Notice that referencing <code>baz</code> from outside it's block results in JavaScript throwing a ReferenceError.</p>\n<p>Consider this <code>run</code> function, inside of which <code>foo</code> has <code>function scope</code>.</p>\n<pre><code class=\"language-javascript\">function run() {\n    console.log(foo); // undefined\n    var foo = 'Foo';\n    console.log(foo); // Foo\n}\n\nrun();\n</code></pre>\n<p>Consider this <code>func1</code> function and it's nested scopes.</p>\n<pre><code class=\"language-javascript\">// global scope\nfunction func1(arg1) {\n    // func1 scope\n\n    return function func2(arg2) {\n        // func2 scope\n\n        return function func3(arg3) {\n            // func3 scope\n\n            console.log(arg1, arg2, arg3);\n        };\n    };\n}\n</code></pre>\n<h4>6. Implement a closure and explain how the closure effects scope</h4>\n<pre><code class=\"language-javascript\">const adder = (arg1) => {\n    return (arg2) => {\n        return arg1 + arg2;\n    };\n};\n\nconst func2 = adder(2);\nconst result = func2(2);\nconsole.log(result); // => 4;\n</code></pre>\n<h4>4. Define an arrow function</h4>\n<pre><code class=\"language-javascript\">const returnValue = (val) => val;\n</code></pre>\n<p>This simple construct will create a function that accepts <code>val</code> as a parameter, and returns <code>val</code> immediately. We do not need to type <code>return val</code>, because this is a single-line function.</p>\n<p>Identically, we could write</p>\n<pre><code class=\"language-javascript\">const returnValue = (val) => {\n    return val;\n};\n</code></pre>\n<h4>5. Given an arrow function, deduce the value of <code>this</code> without executing the code</h4>\n<pre><code class=\"language-javascript\">function fDAdder(arr) {\n    console.log(this);\n\n    return arr.reduce((acc, ele) => {\n        return acc + ele;\n    });\n}\n\nfDAdder([1, 2, 4, 6]);\n</code></pre>\n<p>If we use a <em>function declaration</em> style function, the <code>this</code> variable is set to the <code>global</code> object (i.e. <code>Object [global]</code> in Node.JS and <code>Window</code> in your browser).</p>\n<pre><code class=\"language-javascript\">const adder = (arr) => {\n    console.log(this);\n    arr.reduce((acc, ele) => (sum += ele));\n};\nadder([1, 2, 4, 6]);\n</code></pre>\n<p>In this example, we use a <em>fat arrow</em> style function. Note that when we declare a funciton like this <code>this</code> becomes</p>\n<h4>7. Define a method that references this on an object literal</h4>\n<pre><code class=\"language-javascript\">const pokemon = {\n    firstname: 'Pika',\n    lastname: 'Chu',\n    getPokeName: function () {\n        const fullname = `${this.firstname} ${this.lastname}`;\n        return fullname;\n    }\n};\n\nconsole.log(pokemon.getPokeName());\n</code></pre>\n<h4>8. Utilize the built in Function#bind on a callback to maintain the context of <code>this</code></h4>\n<pre><code class=\"language-javascript\">const pokemon = {\n    firstname: 'Pika',\n    lastname: 'Chu',\n    getPokeName: function () {\n        const fullname = `${this.firstname} ${this.lastname}`;\n        return fullname;\n    }\n};\n\nconst logPokemon = pokemon.getPokename.bind(pokemon);\n\nlogPokemon('sushi', 'algorithms'); // Pika Chu loves sushi and algorithms\n</code></pre>\n<h4>9. Given a code snippet, identify what <code>this</code> refers to</h4>\n<pre><code class=\"language-javascript\">function Person(name) {\n    // this.name = name;\n    // let that = this;\n\n    setTimeout(function () {\n        // console.log(this); // => Window\n        // console.log(that); // => [Function] => Person\n        // this.sayName(); // => no method error\n        that.sayName();\n    }, 1000);\n}\n\nPerson.prototype.sayName = function () {\n    console.log(this.name);\n};\n\nconst jane = new Person('Jane');\n</code></pre>"},{"url":"/blog/awesome-graphql/","relativePath":"blog/awesome-graphql.md","relativeDir":"blog","base":"awesome-graphql.md","name":"awesome-graphql","frontmatter":{"title":"Awesome GraphQL","subtitle":"The Death Of REST","date":"2021-09-30","thumb_image_alt":"lorem-ipsum","excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"post","thumb_image":"images/graphql.png","image":"images/graphql-f3b94d65.png"},"html":"<h2>Table of Contents\n\n</h2>\n<ul>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#spec\">Specification</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#community\">Community</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#meetups\">GraphQL Meetups</a></li>\n<li>\n<p><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib\">Libraries</a></p>\n<ul>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-js\">Javascript</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-ts\">Typescript</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-rb\">Ruby</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-php\">PHP</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-py\">Python</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-java\">Java</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-c\">C/C++</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-go\">Go</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-scala\">Scala</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-perl\">Perl</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-dotnet\">.NET</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-erlang\">Erlang</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-elixir\">Elixir</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-haskell\">Haskell</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-sql\">SQL</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-lua\">Lua</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-elm\">Elm</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-clojure\">Clojure</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-clojurescript\">ClojureScript</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-swift\">Swift</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-ocaml\">OCaml</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-rust\">Rust</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-r\">R</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-julia\">Julia</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-kotlin\">Kotlin</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-unity\">Unity</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#lib-crystal\">Crystal</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#tools\">Tools</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#services\">Services</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#databases\">Databases</a></li>\n<li>\n<p><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example\">Examples</a></p>\n<ul>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example-js\">Javascript</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example-ts\">Typescript</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example-rb\">Ruby</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example-go\">Go</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example-scala\">Scala</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example-python\">Python</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example-elixir\">Elixir</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example-php\">PHP</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#example-reasonml\">ReasonML</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#video\">Videos</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#blogs\">Blogs</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#post\">Posts</a></li>\n<li><a href=\"https://github.com/dhruv-kumar-jha/awesome-graphql#workshopper\">Workshoppers</a></li>\n</ul>\n<h2>Specification</h2>\n<ul>\n<li><a href=\"http://facebook.github.io/graphql/\">facebook/graphql</a> - Working Draft of the Specification for GraphQL created by Facebook.</li>\n</ul>\n<h2>Community</h2>\n<ul>\n<li><a href=\"https://graphql.slack.com/messages/general\">Slack</a> - Share and help people on the chat. Get your invite <a href=\"https://graphql-slack.herokuapp.com/\">here</a></li>\n<li><a href=\"https://webchat.freenode.net/?channels=#graphql\">#graphql on Freenode</a> - The official IRC channel for GraphQL</li>\n<li><a href=\"https://www.facebook.com/groups/795330550572866/\">Facebook</a> - Group for discussions, articles and knowledge sharing</li>\n<li><a href=\"https://twitter.com/search?q=%23GraphQL\">Twitter</a> - Use the hashtag <a href=\"https://twitter.com/search?q=%23GraphQL\">#graphql</a></li>\n<li><a href=\"https://stackoverflow.com/questions/tagged/graphql\">StackOverflow</a> - Questions and answers. Use the tag <a href=\"http://stackoverflow.com/questions/tagged/graphql\">graphql</a></li>\n<li><a href=\"https://github.com/APIs-guru/graphql-apis\">GraphQL APIs</a> - A collective list of public GraphQL APIs</li>\n<li><a href=\"https://graphql-world.com/\">GraphQL World</a> - The fastest growing community of GraphQL developers</li>\n</ul>\n<h2>GraphQL Meetups</h2>\n<ul>\n<li><a href=\"https://www.meetup.com/graphql-berlin/\">Berlin</a></li>\n<li><a href=\"https://www.meetup.com/es-ES/GraphQL-BA/\">Buenos Aires</a></li>\n<li><a href=\"https://www.meetup.com/DFW-GraphQL-Meetup/\">Dallas-Fort Worth</a></li>\n<li><a href=\"https://www.meetup.com/GraphQL-Istanbul/\">Istanbul</a></li>\n<li><a href=\"https://www.meetup.com/GraphQL-London/\">London</a></li>\n<li><a href=\"https://www.meetup.com/GraphQL-Melbourne/\">Melbourne</a></li>\n<li><a href=\"https://www.meetup.com/GraphQL-Munich/\">Munich</a></li>\n<li><a href=\"https://www.meetup.com/GraphQL-NYC/\">New York City</a></li>\n<li><a href=\"https://www.meetup.com/GraphQL-SF/\">San Francisco</a></li>\n<li><a href=\"https://www.meetup.com/GraphQL-Sydney/\">Sydney</a></li>\n<li><a href=\"https://www.meetup.com/GraphQL-TLV/\">Tel Aviv</a></li>\n<li><a href=\"https://www.meetup.com/GraphQL-Toronto/\">Toronto</a></li>\n</ul>\n<h2>Libraries</h2>\n<h3>JavaScript Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/graphql/graphql-js\">GraphQL.js</a> - A reference implementation of GraphQL for JavaScript.</li>\n<li><a href=\"https://github.com/graphql/express-graphql\">express-graphql</a> - GraphQL Express Middleware.</li>\n<li><a href=\"https://github.com/chentsulin/koa-graphql\">koa-graphql</a> - GraphQL Koa Middleware.</li>\n<li><a href=\"https://github.com/SimonDegraeve/hapi-graphql\">hapi-graphql</a> - Create a GraphQL HTTP server with Hapi.</li>\n<li><a href=\"https://github.com/graphql/codemirror-graphql\">codemirror-graphql</a> - GraphQL mode and helpers for CodeMirror.</li>\n<li><a href=\"https://github.com/devknoll/graphql-schema\">graphql-schema</a> - Create GraphQL schemas with a fluent/chainable interface.</li>\n<li><a href=\"https://github.com/mickhansen/graphql-sequelize\">graphql-sequelize</a> - Sequelize helpers for GraphQL.</li>\n<li><a href=\"https://github.com/Glavin001/graphql-sequelize-crud\">graphql-sequelize-crud</a> - Automatically generate queries and mutations from Sequelize models.</li>\n<li><a href=\"https://github.com/RisingStack/graffiti\">graffiti</a> - Node.js GraphQL ORM.</li>\n<li><a href=\"https://github.com/RisingStack/graffiti-mongoose\">graffiti-mongoose</a> - Mongoose (MongoDB) adapter for graffiti (Node.js GraphQL ORM).</li>\n<li><a href=\"https://github.com/ooflorent/babel-plugin-graphql\">babel-plugin-graphql</a> - Babel plugin that compile GraphQL tagged template strings.</li>\n<li><a href=\"https://github.com/gyzerok/adrenaline\">adrenaline</a> - React bindings for Redux with Relay in mind.</li>\n<li><a href=\"https://github.com/brysgo/graphql-bookshelf\">graphql-bookshelf</a> - Some help defining GraphQL schema around BookshelfJS models.</li>\n<li><a href=\"https://github.com/weyoss/graphql-bookshelfjs\">graphql-bookshelfjs</a> - A simple bridge between your graphql queries and your bookshelf models, perform batched and optimised queries.</li>\n<li><a href=\"https://github.com/matthewmueller/graph.ql\">graph.ql</a> - Faster and simpler technique for creating and querying GraphQL schemas.</li>\n<li><a href=\"https://github.com/kennetpostigo/react-reach\">react-reach</a> - A library to communicate with Graphql through Redux</li>\n<li><a href=\"https://github.com/kadirahq/lokka\">Lokka</a> - Simple JavaScript client for GraphQL, which you can use anywhere.</li>\n<li><a href=\"http://strapi.io/documentation/graphql\">Strapi</a> - Open-source Node.js framework that supports \"GraphQL\" out of the box.</li>\n<li><a href=\"https://github.com/larsbs/graysql\">GraysQL</a> - A GraphQL manager and loader.</li>\n<li><a href=\"https://github.com/larsbs/graysql-orm-loader\">graysql-orm-loader</a> - A GraysQL extension to load a GraphQL schema from an ORM.</li>\n<li><a href=\"https://github.com/almilo/annotated-graphql\">Annotated GraphQL</a> - Proof of Concept for annotations in GraphQL (i.e.: transform an existing REST api into a GraphQL endpoint).</li>\n<li><a href=\"https://github.com/apollographql/apollo-client\">Apollo Client</a> - A well-documented GraphQL client. Has React and Angular bindings.</li>\n<li><a href=\"https://github.com/apollographql/graphql-tools\">graphql-tools</a> - Tool library for building and maintaining GraphQL-JS servers.</li>\n<li><a href=\"https://github.com/apollographql/graphql-anywhere\">graphql-anywhere</a> - Run a GraphQL query anywhere, against any data, with no schema.</li>\n<li><a href=\"https://github.com/apollographql/graphql-tag\">graphql-tag</a> - A JavaScript template literal tag that parses GraphQL queries.</li>\n<li><a href=\"https://github.com/julienvincent/modelizr\">modelizr</a> - A library for simplifying the process of writing GraphQL queries, mocking them and normalizing their responses.</li>\n<li><a href=\"https://github.com/Akryum/vue-apollo\">vue-apollo</a> - Vue integration for apollo.</li>\n<li><a href=\"https://github.com/fenos/graphql-thinky\">graphql-thinky</a> - Build an optimized GraphQL schema from Thinky RethinkDB models.</li>\n<li><a href=\"https://github.com/MikeBild/graphql-pouch\">graphql-pouch</a> - A GraphQL-API runtime on top of PouchDB created by GraphQL shorthand notation as a self contained service with CouchDB synchronization.</li>\n<li><a href=\"https://github.com/almilo/gql-tools\">gql-tools</a> - Tool library with CLI for schema generation and manipulation.</li>\n<li><a href=\"https://github.com/excitement-engineer/graphql-iso-date\">graphql-iso-date</a> - A GraphQL date scalar type to be used with GraphQL.js. This scalar represents a date in the ISO 8601 format YYYY-MM-DD.</li>\n<li><a href=\"https://github.com/nodkz/graphql-compose\">graphql-compose</a> - Tool which allows you to construct flexible graphql schema from different data sources via plugins.</li>\n<li><a href=\"https://github.com/mwilliamson/node-graphjoiner\">node-graphjoiner</a> - Create GraphQL APIs using joins, SQL or otherwise.</li>\n<li><a href=\"https://github.com/gucheen/FetchQL\">FetchQL</a> - GraphQL query client with Fetch</li>\n<li><a href=\"https://github.com/stems/join-monster\">Join Monster</a> - A GraphQL-to-SQL query execution layer for batch data fetching.</li>\n<li><a href=\"https://github.com/graphql-community/create-graphql\">Create-GraphQL</a> - Command-line utility to build production-ready servers with GraphQL.</li>\n<li><a href=\"https://github.com/lucasbento/graphql-pokemon\">GraphQL-Pokémon</a> - Get information of a Pokémon with GraphQL!</li>\n<li><a href=\"https://github.com/graphql-factory\">graphql-factory</a> - Create GraphQL types from JSON definitions</li>\n<li><a href=\"https://chrome.google.com/webstore/detail/chromeiql/fkkiamalmpiidkljmicmjfbieiclmeij\">ChromeiQL</a> - Chrome extension to use GraphiQL anywhere</li>\n<li><a href=\"https://github.com/ejoebstl/graphql-auto-mutation\">graphql-auto-mutation</a> - Automatically generates functions for mutations specified in a GraphQL schema.</li>\n<li><a href=\"https://github.com/graphitejs/graphitejs\">GraphiteJS</a> - Full stack GraphQL framework.</li>\n<li><a href=\"https://github.com/tallyb/loopback-graphql\">loopback-graphql</a> - GraphQL Server for Loopback.</li>\n<li><a href=\"https://github.com/octet-stream/parasprite\">parasprite</a> - Describe your GraphQL schema using chainable interface.</li>\n<li><a href=\"https://github.com/f/graphql.js\">GraphQL.js</a> - JavaScript GraphQL Client for Browser and Node.js Usage</li>\n<li><a href=\"https://github.com/arangodb/graphql-sync\">graphql-sync</a> - Promise-free wrapper to GraphQL.js for synchronous environments</li>\n<li><a href=\"https://github.com/apollographql/apollo-fetch\">apollo-fetch</a> - Lightweight GraphQL client that supports custom fetch functions, middleware, and afterware</li>\n<li><a href=\"https://github.com/spikenail/spikenail\">Spikenail</a> - Node.js framework for building GraphQL API almost without coding.</li>\n<li><a href=\"https://github.com/AEB-labs/graphql-weaver\">graphql-weaver</a> - A tool to combine, link and transform GraphQL schemas; combine multiple GraphQL servers into one API.</li>\n<li><a href=\"https://github.com/APIs-guru/graphql-lodash\">graphql-lodash</a> - Data manipulation for GraphQL queries with lodash syntax.</li>\n<li><a href=\"https://github.com/apollographql/apollo-angular\">apollo-angular</a> - Angular integration for Apollo.</li>\n<li><a href=\"https://github.com/lucasconstantino/graphql-resolvers\">graphql-resolvers</a> - Resolver composition library for GraphQL.</li>\n<li><a href=\"https://github.com/thebigredgeek/apollo-resolvers\">apollo-resolvers</a> - Expressive and composable resolvers for Apollo Server and graphql-tools.</li>\n<li><a href=\"https://github.com/thebigredgeek/apollo-errors\">apollo-errors</a> - Machine-readable custom errors for Apollo Server.</li>\n<li><a href=\"https://github.com/helfer/graphql-disable-introspection\">graphql-disable-introspection</a> - Graphql Disable Introspection</li>\n<li><a href=\"https://github.com/arackaf/mongo-graphql-starter\">mongo-graphql-starter</a> - Flexible and robust Mongo based resolvers for Node.</li>\n<li><a href=\"https://github.com/imolorhe/altair\">altair-express-middleware</a> - An express middleware for mounting an instance of Altair GraphQL client.</li>\n<li><a href=\"https://github.com/pa-bru/graphql-cost-analysis\">graphql-cost-analysis</a> - A Graphql query cost analyzer.</li>\n</ul>\n<h5>Relay Related</h5>\n<ul>\n<li><a href=\"https://github.com/facebook/relay\">relay</a> - Relay is a JavaScript framework for building data-driven React applications.</li>\n<li><a href=\"https://github.com/graphql/graphql-relay-js\">graphql-relay-js</a> - A library to help construct a graphql-js server supporting react-relay.</li>\n<li><a href=\"https://github.com/MattMcFarland/sequelize-relay\">sequelize-relay</a> - Serverside library that connects sequelize and graphql-relay-js together.</li>\n<li><a href=\"https://github.com/graphcool/babel-plugin-react-relay\">babel-plugin-react-relay</a> - Babel Plugin for Relay with support for JSON &#x26; graphql-js schemas and URL endpoints.</li>\n<li><a href=\"https://www.npmjs.com/package/babel-relay-plugin\">babel-relay-plugin</a> - Babel Relay Plugin for transpiling GraphQL queries for use with Relay.</li>\n<li><a href=\"https://github.com/relay-tools/react-router-relay\">react-router-relay</a> - Relay integration for React Router.</li>\n<li><a href=\"https://github.com/relay-tools/relay-local-schema\">relay-local-schema</a> - Use Relay without a GraphQL server.</li>\n<li><a href=\"https://github.com/acdlite/relay-sink\">relay-sink</a> - Use Relay to fetch and store data outside of a React component.</li>\n<li><a href=\"https://github.com/acdlite/recompose/tree/master/src/packages/recompose-relay\">recompose-relay</a> - Recompose helpers for Relay.</li>\n<li><a href=\"https://github.com/larsbs/graysql#Graylay\">Graylay</a> - A GraysQL extension to create a Relay compatible Schema.</li>\n<li><a href=\"https://github.com/apollographql/apollo-client\">Apollo Client</a> - A simple alternative to Relay, comes with React and Angular bindings.</li>\n<li><a href=\"https://github.com/nodkz/react-relay-network-layer\">react-relay-network-layer</a> - A network layer for Relay with query batching and middleware support (urlThunk, retryThunk, auth, defer and other).</li>\n<li><a href=\"https://github.com/edvinerikson/relay-subscriptions\">relay-subscriptions</a> - Subscription support for Relay.</li>\n<li><a href=\"https://github.com/alex-cory/portfolio\">Portfolio Relay Example</a> - An example website that fetches data from various apis and uses Relay and GraphQL to feed the data to React components!</li>\n<li><a href=\"https://github.com/lucasbento/react-relay-pokemon\">Relay Pokédex</a> - Project using GraphQL Pokémon to show how powerful Relay is.</li>\n<li><a href=\"https://github.com/ntkme/vue-relay\">vue-relay</a> - A framework for building GraphQL-driven Vue.js applications.</li>\n</ul>\n<h3>TypeScript Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/19majkel94/type-graphql\">TypeGraphQL</a> - Create GraphQL schema and resolvers with TypeScript, using classes and decorators!</li>\n<li><a href=\"http://vesper-framework.com/\">Vesper</a> - NodeJS framework that helps you to create scalable, maintainable, extensible, declarative and fast GraphQL-based server applications.</li>\n<li><a href=\"https://github.com/calebmer/graphql-strong\">graphql-strong</a> - Define your GraphQL schemas with confidence that your values are correct.</li>\n<li><a href=\"https://github.com/3VLINC/graphql-to-typescript\">graphql-to-typescript</a> - Compiles GraphQL files into an importable typescript module with type definitions</li>\n<li><a href=\"https://github.com/Quramy/graphql-decorator\">graphql-decorator</a> - Helps to build GraphQL schema with TypeScript.</li>\n<li><a href=\"https://github.com/indigotech/graphql-schema-decorator\">graphql-schema-decorator</a> - This package makes possible the use of decorators to define a GraphQL schema.</li>\n<li><a href=\"https://github.com/vichyssoise/graphql-typescript\">graphql-typescript</a> - Define and build GraphQL Schemas using typed classes</li>\n<li><a href=\"https://github.com/prismake/typegql\">typegql</a> - Create GraphQL schema with type-safe class decorators.</li>\n</ul>\n<h3>Ruby Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/rmosolgo/graphql-ruby\">graphql-ruby</a> - Ruby implementation of Facebook's GraphQL.</li>\n<li><a href=\"https://github.com/Shopify/graphql-parser\">graphql-parser</a> - A small ruby gem wrapping the libgraphqlparser C library for parsing GraphQL.</li>\n<li><a href=\"https://github.com/github/graphql-client\">graphql-client</a> - A Ruby library for declaring, composing and executing GraphQL queries.</li>\n<li><a href=\"https://github.com/Shopify/graphql-batch\">graphql-batch</a> - A query batching executor for the graphql gem.</li>\n<li><a href=\"https://github.com/exaspark/batch-loader\">batch-loader</a> – A powerful tool to avoid N+1 queries without extra dependencies or primitives.</li>\n<li><a href=\"https://github.com/exAspArk/graphql-guard\">graphql-guard</a> - A simple field-level authorization for the graphql gem.</li>\n</ul>\n<h3>PHP Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/webonyx/graphql-php\">graphql-php</a> - A PHP port of GraphQL reference implementation.</li>\n<li><a href=\"https://github.com/ivome/graphql-relay-php\">graphql-relay-php</a> - Relay helpers for GraphQL &#x26; PHP.</li>\n<li><a href=\"https://github.com/api-platform/api-platform\">API Platform</a> - API framework compatible with Symfony having native GraphQL support.</li>\n<li><a href=\"https://github.com/Folkloreatelier/laravel-graphql\">laravel-graphql</a> - Facebook GraphQL for Laravel 5.</li>\n<li><a href=\"https://github.com/nuwave/laravel-graphql-relay\">laravel-graphql-relay</a> - A Laravel library to help construct a server supporting react-relay.</li>\n<li><a href=\"https://github.com/4rthem/graphql-mapper\">graphql-mapper</a> - This library allows to build a GraphQL schema based on your model.</li>\n<li><a href=\"https://github.com/suribit/GraphQLBundle\">graphql-bundle</a> - GraphQL Bundle for Symfony 2.</li>\n<li><a href=\"https://github.com/overblog/GraphQLBundle\">overblog/graphql-bundle</a> - This bundle provides tools to build a complete GraphQL server in your Symfony App. Supports react-relay.</li>\n<li><a href=\"https://github.com/Youshido/GraphQL\">GraphQL</a> – Well documented PHP implementation with no dependencies.</li>\n<li><a href=\"https://github.com/Youshido/GraphQLBundle\">GraphQL Symfony Bundle</a> – GraphQL Bundle for the Symfony 3 (supports 2.6+).</li>\n<li><a href=\"https://github.com/wp-graphql/wp-graphql\">WPGraphQL</a> - WordPress plugin that exposes a Relay compliant GraphQL endpoint</li>\n<li><a href=\"https://github.com/tim-field/graphql-wp\">graphql-wp</a> – a WordPress plugin that exposes a GraphQL endpoint.</li>\n<li><a href=\"https://www.symfony.fi/entry/graphql-bundle-adds-protocol-support-to-ez-platform-symfony-cms\">eZ Platform GraphQL Bundle</a> - GraphQL Bundle for the eZ Platform Symfony CMS.</li>\n<li><a href=\"https://github.com/stefanorg/graphql-middleware\">GraphQL Middleware</a> - GraphQL Psr7 Middleware</li>\n<li><a href=\"https://github.com/stefanorg/zend-expressive-graphiql\">Zend Expressive GraphiQL Extension</a> - GraphiQL extension for zend expressive</li>\n<li><a href=\"https://github.com/digiaonline/graphql-php\">GraphQL for PHP7</a> - A batteries-included, standard-compliant and easy to work with implementation of the GraphQL specification in PHP7 (based on the reference implementation).</li>\n</ul>\n<h3>Python Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/tryolabs/graphql-parser\">graphql-parser</a> - GraphQL parser for Python.</li>\n<li><a href=\"https://github.com/graphql-python/graphql-core\">graphql-core</a> - GraphQL implementation for Python.</li>\n<li><a href=\"https://github.com/graphql-python/graphql-relay-py\">graphql-relay-py</a> - A library to help construct a graphql-py server supporting react-relay.</li>\n<li><a href=\"https://github.com/tallstreet/graphql-parser-python\">graphql-parser-python</a> - A python wrapper around libgraphqlparser.</li>\n<li><a href=\"https://github.com/graphql-python/graphene\">graphene</a> - A package for creating GraphQL schemas/types in a Pythonic easy way.</li>\n<li><a href=\"https://github.com/graphql-python/graphene-gae\">graphene-gae</a> - Adds GraphQL support to Google AppEngine (GAE).</li>\n<li><a href=\"https://github.com/graphql-python/flask-graphql\">flask-graphql</a> - Adds GraphQL support to your Flask application.</li>\n<li><a href=\"https://github.com/graphcool/python-graphql-client\">python-graphql-client</a> - Simple GraphQL client for Python 2.7+</li>\n<li><a href=\"https://github.com/healx/python-graphjoiner\">python-graphjoiner</a> - Create GraphQL APIs using joins, SQL or otherwise.</li>\n<li><a href=\"https://github.com/graphql-python/graphene-django\">graphene-django</a> - A Django integration for Graphene.</li>\n</ul>\n<h3>Java Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/graphql-java/graphql-java\">graphql-java</a> - GraphQL Java implementation.</li>\n<li><a href=\"https://github.com/graphql-java/graphql-java-type-generator\">graphql-java-type-generator</a> - Auto-generates types for use with GraphQL Java</li>\n<li><a href=\"https://github.com/bpatters/schemagen-graphql\">schemagen-graphql</a> - Schema generation and execution package that turns POJO's into a GraphQL Java queryable set of objects. Enables exposing any service as a GraphQL service using Annotations.</li>\n<li><a href=\"https://github.com/graphql-java/graphql-java-annotations\">graphql-java-annotations</a> - Provides annotations-based syntax for schema definition with GraphQL Java.</li>\n<li><a href=\"https://github.com/oembedler/spring-graphql-common\">spring-graphql-common</a> - Spring Framework GraphQL Library.</li>\n<li><a href=\"https://github.com/graphql-java/graphql-spring-boot\">graphql-spring-boot</a> - GraphQL and GraphiQL Spring Framework Boot Starters.</li>\n<li><a href=\"https://github.com/neo4j-graphql/neo4j-graphql\">neo4j-graphql</a> - GraphQL bindings for Neo4j, generates and runs Cypher.</li>\n<li><a href=\"https://github.com/engagingspaces/vertx-graphql-service-discovery\">vertx-graphql-service-discovery</a> - Asynchronous GraphQL service discovery and querying for your microservices.</li>\n<li><a href=\"https://github.com/engagingspaces/vertx-dataloader\">vertx-dataloader</a> - Port of Facebook DataLoader for efficient, asynchronous batching and caching in clustered GraphQL environments</li>\n<li><a href=\"https://github.com/Billy-Bichon/LiveGQL\">LiveGQL</a> - GraphQL subscription client in Java.</li>\n<li><a href=\"https://github.com/ebridges/rdbms-to-graphql\">rdbms-to-graphql</a> - A Java CLI program that generates a GraphQL schema from a JDBC data source.</li>\n<li><a href=\"https://github.com/google/rejoiner\">Rejoiner</a> - Generates a GraphQL schema based on one or more gRPC microservices, or any other Protobuf source.</li>\n<li><a href=\"https://github.com/leangen/graphql-spqr\">graphql-spqr</a> - GraphQL SPQR aims to make it dead simple to add a GraphQL API to any Java project. It works by dynamically generating a GraphQL schema from Java code.</li>\n</ul>\n<h3>C/C++ Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/graphql/libgraphqlparser\">libgraphqlparser</a> - A GraphQL query parser in C++ with C and C++ APIs.</li>\n</ul>\n<h3>Go Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/graphql-go/graphql\">graphql</a> - An implementation of GraphQL for Go follows graphql-js</li>\n<li><a href=\"https://github.com/machinebox/graphql\">machinebox/graphql</a> - Simple low-level GraphQL client for Go</li>\n<li><a href=\"https://github.com/graphql-go/relay\">graphql-relay-go</a> - A Go/Golang library to help construct a server supporting react-relay.</li>\n<li><a href=\"https://github.com/neelance/graphql-go\">graphql-go</a> - GraphQL server with a focus on ease of use.</li>\n<li><a href=\"https://github.com/tecbot/c-graphqlparser\">c-graphqlparser</a> - Go-gettable version of the libgraphqlparser C library for parsing GraphQL.</li>\n<li><a href=\"https://github.com/tallstreet/graphql\">tallstreet-graphql</a> - GraphQL parser and server for Go that leverages libgraphqlparser</li>\n<li><a href=\"https://github.com/playlyfe/go-graphql\">go-graphql</a> - A powerful GraphQL server implementation for Golang</li>\n<li><a href=\"https://github.com/nicksrandall/dataloader\">dataloader</a> - Implementation of Facebook's DataLoader in Golang</li>\n</ul>\n<h3>Scala Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/sangria-graphql/sangria\">sangria</a> - Scala GraphQL client and server library.</li>\n<li><a href=\"https://github.com/sangria-graphql/sangria-relay\">sangria-relay</a> - Sangria Relay Support.</li>\n<li><a href=\"https://github.com/hrosenhorn/graphql-scala\">graphql-scala</a> - An attempt to get GraphQL going with Scala.</li>\n</ul>\n<h3>Perl Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/CurtTilmes/Perl6-GraphQL\">Perl6-GraphQL</a> - GraphQL for Perl6.</li>\n<li><a href=\"https://github.com/graphql-perl/graphql-perl\">graphql-perl</a> - GraphQL for Perl5.</li>\n</ul>\n<h3>.NET Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/graphql-dotnet/graphql-dotnet\">graphql-dotnet</a> - GraphQL for .NET.</li>\n<li><a href=\"https://github.com/graphql-dotnet/conventions\">Conventions</a> - Reflection-based schema generation for .NET.</li>\n<li><a href=\"https://github.com/ckimes89/graphql-net\">graphql-net</a> - GraphQL to IQueryable for .NET</li>\n<li><a href=\"https://github.com/fsprojects/FSharp.Data.GraphQL\">FSharp.Data.GraphQL</a> - FSharp GraphQL.</li>\n<li><a href=\"https://github.com/graphql-dotnet/graphql-client\">GraphQL.Client</a> - GraphQL Client for .NET.</li>\n</ul>\n<h3>Erlang Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/shopgun/graphql-erlang\">graphql-erlang</a> - Pure Erlang implementation with IDL and pattern-matching.</li>\n</ul>\n<h3>Elixir Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/absinthe-graphql/absinthe\">absinthe-graphql</a> - Fully Featured Elixir GraphQL Library.</li>\n<li><a href=\"https://github.com/graphql-elixir/graphql\">graphql-elixir</a> - GraphQL Elixir.</li>\n<li><a href=\"https://github.com/graphql-elixir/plug_graphql\">plug_graphql</a> - Plug integration for GraphQL Elixir.</li>\n<li><a href=\"https://github.com/graphql-elixir/graphql_relay\">graphql_relay</a> - Relay helpers for GraphQL Elixir.</li>\n<li><a href=\"https://github.com/graphql-elixir/graphql_parser\">graphql_parser</a> - Elixir bindings for <a href=\"https://github.com/graphql/libgraphqlparser\">libgraphqlparser</a></li>\n<li><a href=\"https://github.com/asonge/graphql\">graphql</a> - Elixir GraphQL parser.</li>\n<li><a href=\"https://github.com/peburrows/plot\">plot</a> - GraphQL parser and resolver for Elixir.</li>\n</ul>\n<h3>Haskell Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/jdnavarro/graphql-haskell\">graphql-haskell</a> - GraphQL AST and parser for Haskell.</li>\n</ul>\n<h3>SQL Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/solidsnack/GraphpostgresQL\">GraphpostgresQL</a> - GraphQL for Postgres.</li>\n<li><a href=\"https://github.com/rexxars/sql-to-graphql\">sql-to-graphql</a> - Generate a GraphQL API based on your SQL database structure.</li>\n<li><a href=\"https://github.com/graphile/postgraphile\">PostGraphile</a> - A GraphQL API created by reflection over a PostgreSQL schema.</li>\n<li><a href=\"https://github.com/ebridges/rdbms-to-graphql\">rdbms-to-graphql</a> - A Java CLI program that generates a GraphQL schema from a JDBC data source.</li>\n<li><a href=\"https://github.com/graphcool/prisma\">Prisma</a> - Turn your database into a GraphQL API. Prisma lets you design your data model and have a production ready GraphQL API online in minutes.</li>\n<li><a href=\"https://github.com/bradleyboy/tuql\">tuql</a> - Automatically create a GraphQL server from any sqlite database.</li>\n</ul>\n<h3>Lua Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/bjornbytes/graphql-lua\">graphql-lua</a> - GraphQL for Lua.</li>\n</ul>\n<h3>Elm Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/jamesmacaulay/elm-graphql\">jamesmacaulay/elm-graphql</a> - Client library that lets you build GraphQL queries in Elm.</li>\n<li><a href=\"https://github.com/ghivert/elm-graphql\">ghivert/elm-graphql</a> - Client library that lets you build GraphQL queries in Elm with your own decoders.</li>\n<li><a href=\"https://github.com/jahewson/elm-graphql\">jahewson/elm-graphql</a> - Command-line tool that generates Elm code from queries in .graphql files.</li>\n</ul>\n<h3>Clojure Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/tendant/graphql-clj\">graphql-clj</a> - A Clojure library designed to provide GraphQL implementation.</li>\n<li><a href=\"https://github.com/walmartlabs/lacinia\">lacinia</a> - GraphQL implementation in pure Clojure.</li>\n<li><a href=\"https://github.com/alumbra/alumbra\">alumbra</a> - Simple &#x26; Elegant GraphQL for Clojure!</li>\n</ul>\n<h3>ClojureScript Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/johanatan/speako\">speako</a> - A ClojureScript/NPM compiler for GraphQL Schema Language.</li>\n<li><a href=\"https://github.com/Vincit/venia\">venia</a> - A Clojure(Script) GraphQL query generation</li>\n</ul>\n<h3>Swift Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/GraphQLSwift/GraphQL\">GraphQL</a> - Build GraphQL APIs with Swift.</li>\n<li><a href=\"https://github.com/GraphQLSwift/Graphiti\">Graphiti</a> - Build Swiftier GraphQL APIs with Swift.</li>\n<li><a href=\"https://github.com/dbart01/Gryphin\">Gryphin</a> - Type-safe GraphQL client for iOS and MacOS written in Swift.</li>\n<li><a href=\"https://github.com/apollographql/apollo-ios\">Apollo-iOS</a> - Strongly typed, code-generating, caching GraphQL client for Swift.</li>\n<li><a href=\"https://github.com/florianmari/LiveGQL\">LiveGQL</a> - GraphQL Subscription client in Swift.</li>\n</ul>\n<h3>OCaml Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/andreas/ocaml-graphql-server\">ocaml-graphql-server</a> - GraphQL servers in OCaml.</li>\n</ul>\n<h3>Rust Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/mhallin/juniper\">juniper</a> - GraphQL server library for Rust.</li>\n</ul>\n<h3>R Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/ropensci/graphql\">graphql</a> - Bindings to libgraphqlparser for R.</li>\n<li><a href=\"https://github.com/schloerke/gqlr\">gqlr</a> - GraphQL server package for R.</li>\n<li><a href=\"https://github.com/ropensci/ghql\">ghql</a> - GraphQL client package for R.</li>\n</ul>\n<h3>Julia Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/codeneomatrix/Diana.jl\">Diana.jl</a> - Julia client for GraphQL.</li>\n</ul>\n<h3>Kotlin Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/prestongarno/ktq\">ktq</a> - Kotlin gradle plugin SDL type generator &#x26; runtime client</li>\n</ul>\n<h3>Unity Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/Gazuntype/graphQL-client-unity\">graphQL-client-unity</a> - A Unity client for GraphQL.</li>\n</ul>\n<h3>Crystal Libraries</h3>\n<ul>\n<li><a href=\"https://github.com/ziprandom/graphql-crystal\">graphql-crystal</a> - A graphql implementation for Crystal</li>\n</ul>\n<h2>Tools</h2>\n<ul>\n<li><a href=\"https://github.com/graphql/graphiql\">graphiql</a> - An in-browser IDE for exploring GraphQL.</li>\n<li><a href=\"https://github.com/graphcool/graphql-playground\">GraphQL Playground</a> - GraphQL IDE that supports multi-column schema docs, tabs, query history, configuration of HTTP headers and GraphQL Subscriptions.</li>\n<li><a href=\"https://github.com/skevy/graphiql-app\">GraphiQL.app</a> - A light, Electron-based wrapper around GraphiQL.</li>\n<li><a href=\"https://github.com/Macroz/GraphQLviz\">GraphQLviz</a> - GraphQLviz marries GraphQL (schemas) with Graphviz.</li>\n<li><a href=\"https://github.com/sheerun/graphqlviz\">graphqlviz</a> - GraphQL API visualizer in Node.js</li>\n<li><a href=\"http://facebook.github.io/relay/prototyping/playground.html\">Relay Playground</a></li>\n<li><a href=\"http://dferber90.github.io/graphql-ast-explorer/\">GraphQL AST Explorer</a> - Explore the AST of a GraphQL document interactively</li>\n<li><a href=\"https://www.graphqlhub.com/\">GraphQLHub</a> - Query public API's schemas (e.g. Reddit, Twitter, Github, etc) using GraphiQL</li>\n<li><a href=\"https://github.com/jimkyndemeyer/js-graphql-intellij-plugin/\">js-graphql-intellij-plugin</a> - GraphQL language support for IntelliJ IDEA and WebStorm, including Relay.QL tagged templates in JavaScript and TypeScript.</li>\n<li><a href=\"https://github.com/syrusakbary/gdom\">gdom</a> - DOM Traversing and Scraping using GraphQL.</li>\n<li><a href=\"https://github.com/almilo/annotated-graphql-server\">Annotated GraphQL Server</a> - Server for annotated GraphQL showing how to transform a REST api into a GraphQL endpoint with annotations.</li>\n<li><a href=\"http://nathanrandal.com/graphql-visualizer/\">Model Visualizer</a> - A small webapp that generates an ERD-like visualization of a GraphQL endpoint from an introspection query.</li>\n<li><a href=\"https://github.com/Ghirro/graphql-network\">GraphQL Network</a> - A chrome dev-tools extension for debugging GraphQL network requests.</li>\n<li><a href=\"https://github.com/apollographql/eslint-plugin-graphql\">eslint-plugin-graphql</a> - An ESLint plugin that checks your GraphQL strings against a schema.</li>\n<li><a href=\"https://astexplorer.net/\">AST Explorer</a> - Select \"GraphQL\" at the top, explore the GraphQL AST and highlight different parts by clicking in the query.</li>\n<li><a href=\"https://github.com/jparise/vim-graphql\">vim-graphql</a> - A Vim plugin that provides GraphQL file detection and syntax highlighting.</li>\n<li><a href=\"https://github.com/sarkistlt/graphql-auto-generating-cms\">GraphQL CMS</a> - Use your existing GraphQL schema to generate simple for use, fully functional CMS in a couple steps.</li>\n<li><a href=\"https://github.com/2fd/graphdoc\">graphdoc</a> - Static page generator for documenting GraphQL Schema.</li>\n<li><a href=\"https://github.com/orionsoft/atom-graphql-autocomplete\">graphql-autocomplete</a> - Autocomplete and lint from a GraphQL endpoint in Atom.</li>\n<li><a href=\"https://github.com/redound/graphql-ide\">GraphQL IDE</a> - An extensive IDE for exploring GraphQL API's.</li>\n<li><a href=\"https://github.com/yarax/swagger-to-graphql\">Swagger to GraphQL</a> - GraphQL types builder based on REST API described in Swagger. Allows to migrate to GraphQL from REST for 5 minutes</li>\n<li><a href=\"https://github.com/APIs-guru/graphql-voyager\">GraphQL Voyager</a> - Represent any GraphQL API as an interactive graph.</li>\n<li><a href=\"https://graphql-docs.com/\">GraphQL Docs</a> - Instantly create beautiful GraphQL API docs hosted online.</li>\n<li><a href=\"https://github.com/APIs-guru/graphql-faker\">GraphQL Faker</a> - 🎲 Mock or extend your GraphQL API with faked data. No coding required.</li>\n<li><a href=\"https://github.com/Quramy/ts-graphql-plugin\">ts-graphql-plugin</a> - A language service plugin complete and validate GraphQL query in TypeScript template strings.</li>\n<li><a href=\"https://launchpad.graphql.com/\">Apollo Launchpad</a> - Like JSFiddle for GraphQL server code, write and deploy a GraphQL API directly from your browser.</li>\n<li><a href=\"https://github.com/apollographql/apollo-tracing\">Apollo Tracing</a> - GraphQL extension that enables you to easily get resolver-level performance information as part of a GraphQL response.</li>\n<li><a href=\"https://github.com/imolorhe/altair\">Altair GraphQL Client</a> - A beautiful feature-rich GraphQL Client for all platforms.</li>\n<li><a href=\"https://github.com/abhiaiyer91/apollo-storybook-decorator\">Apollo Storybook Decorator</a> - Wrap your React Storybook stories with Apollo Client, provide mocks for isolated UI testing with GraphQL</li>\n<li><a href=\"https://github.com/Workpop/graphql-metrics\">GraphQL Metrics</a> - instrument GraphQL resolvers, logging response times and statuses (if there was an error or not) to the console as well as to InfluxDB.</li>\n<li><a href=\"https://github.com/Brbb/graphql-rover\">GraphQL Rover</a> - GraphQL schema interactive navigation, rearrange nodes, search and explore types and fields.</li>\n<li><a href=\"https://github.com/marmelab/json-graphql-server\">json-graphql-server</a> - Get a full fake GraphQL API with zero coding in less than 30 seconds, based on a JSON data file.</li>\n<li><a href=\"https://insomnia.rest/\">Insomnia</a> – An full-featured API client with first-party GraphQL query editor</li>\n<li><a href=\"https://github.com/sly777/ran\">RAN Toolkit</a> - Production-ready toolkit/boilerplate with support for GraphQL, SSR, Hot-reload, CSS-in-JS, caching, and more.</li>\n</ul>\n<h2>Databases</h2>\n<ul>\n<li><a href=\"https://www.arangodb.com/\">ArangoDB</a> - Multi-model database that supports GraphQL schemas in JavaScript inside the database.</li>\n<li><a href=\"https://dgraph.io/\">Dgraph</a> - Scalable, distributed, low latency, high throughput Graph database with a GraphQL like language (called <a href=\"https://docs.dgraph.io/query-language/\">GraphQL+</a>) as the query language. Dgrapqh can be queried with graphql by using <a href=\"https://github.com/dpeek/dgraphql\">dgraphql</a></li>\n</ul>\n<h2>Services</h2>\n<ul>\n<li><a href=\"https://graphcms.com/\">GraphCMS</a> - GraphQL based Headless Content Management System.</li>\n<li><a href=\"https://www.graph.cool/\">Graphcool</a> - Your own GraphQL backend in under 5 minutes. Works with every GraphQL client such as Relay and Apollo.</li>\n<li><a href=\"https://hasura.io/\">Hasura</a> - Create tables and get a GraphQL backend in under 60s. Works on top of Postgres that you can directly access. No initial knowledge of graphql required.</li>\n<li><a href=\"https://www.reindex.io/\">Reindex</a> - Instant GraphQL Backend for Your React Apps.</li>\n<li><a href=\"https://scaphold.io/\">Scaphold</a> - GraphQL as a service that includes API integrations such as Stripe and Mailgun.</li>\n<li><a href=\"https://tipe.io/\">Tipe</a> - Next Generation API-first CMS with a GraphQL or REST API. Stop letting your CMS decide how you build your apps.</li>\n<li><a href=\"https://aws.amazon.com/appsync/\">AWS AppSync</a> - Serverless GraphQL</li>\n</ul>\n<h2>Examples</h2>\n<h3>JavaScript Examples</h3>\n<ul>\n<li><a href=\"https://github.com/relayjs/relay-starter-kit\">relay-starter-kit</a> - Barebones starting point for a Relay application.</li>\n<li><a href=\"https://github.com/kriasoft/react-starter-kit\">react-starter-kit</a> - Isomorphic web app boilerplate (Node.js/Express, GraphQL, React)</li>\n<li><a href=\"https://github.com/kriasoft/nodejs-api-starter\">nodejs-api-starter</a> - Boilerplate and tooling for authoring data API backends with Node.js and GraphQL</li>\n<li><a href=\"https://github.com/graphql/swapi-graphql\">swapi-graphql</a> - A GraphQL schema and server wrapping <a href=\"http://swapi.co/\">swapi</a>.</li>\n<li><a href=\"https://github.com/RisingStack/graphql-server\">graphql-server</a> - GraphQL server with Mongoose (MongoDB) and Node.js.</li>\n<li><a href=\"https://github.com/clayallsopp/graphql-intro\">graphql-intro</a> - <a href=\"https://medium.com/the-graphqlhub/your-first-graphql-server-3c766ab4f0a2\">https://medium.com/the-graphqlhub/your-first-graphql-server-3c766ab4f0a2</a></li>\n<li><a href=\"https://github.com/jonsharratt/graphql-aws\">graphql-aws</a> - Amazon AWS GraphQL API Server.</li>\n<li><a href=\"https://github.com/RisingStack/graffiti-todo\">graffiti-todo</a> - Example Relay TodoMVC application using graffiti-mongoose.</li>\n<li><a href=\"https://gist.github.com/devknoll/8b274f1c5d05230bfade\">devknoll/gist:8b274f1c5d05230bfade</a></li>\n<li><a href=\"https://github.com/codefoundries/UniversalRelayBoilerplate\">UniversalRelayBoilerplate</a> Boilerplate + examples for React Native (iOS, Android), React (isomorphic, Material-UI), Relay, GraphQL, JWT, Node.js, Apache Cassandra.</li>\n<li><a href=\"https://github.com/vslinko/ripster/tree/master/src/graphql\">vslinko/ripster</a></li>\n<li><a href=\"https://github.com/fortruce/relay-skeleton\">relay-skeleton</a> - React, Relay, GraphQL project skeleton</li>\n<li><a href=\"https://github.com/mhart/simple-relay-starter\">simple-relay-starter</a> - A very simple starter for React Relay using Browserify.</li>\n<li><a href=\"https://github.com/transedward/relay-chat\">relay-chat</a> - an chat example showing Relay with routing and pagination.</li>\n<li><a href=\"https://github.com/taion/relay-todomvc\">relay-todomvc</a> - Relay TodoMVC with routing.</li>\n<li><a href=\"https://github.com/mrblueblue/graphql-express-sqlite\">graphql-express-sqlite</a> - GraphQL server with Sqlite and Express</li>\n<li><a href=\"https://github.com/chentsulin/koa-graphql-relay-example\">koa-graphql-relay-example</a> - Example of <a href=\"https://github.com/chentsulin/koa-graphql\">koa-graphql</a></li>\n<li><a href=\"https://github.com/lvarayut/relay-fullstack\">relay-fullstack</a> - Relay Starter Kit integrated with Relay, GraphQL, Express, ES6/ES7, JSX, Webpack, Babel, Material Design Lite, and PostCSS.</li>\n<li><a href=\"https://github.com/serverless/serverless-graphql-blog\">serverless-graphql-blog</a> - A Serverless Blog leveraging GraphQL to offer a REST API with only 1 endpoint</li>\n<li><a href=\"https://github.com/soonlive/relay-cart\">relay-cart</a> - A simple shopping cart example leveraging relay &#x26; GraphQL with routing and pagination.</li>\n<li><a href=\"https://github.com/applification/graphql-loader\">graphql-loader</a> - Example project to illustrate GraphQL, Express and Facebook DataLoader to connect to third party REST API</li>\n<li><a href=\"https://github.com/alvinthen/swapi-graphql-lambda\">swapi-graphql-lambda</a> - A GraphQL schema hosted in AWS Lambda wrapping <a href=\"http://swapi.co/\">http://swapi.co/</a></li>\n<li><a href=\"http://dev.apollodata.com/react/\">Apollo Client documentation</a> - Documentation and example for building GraphQL apps using apollo client</li>\n<li><a href=\"https://www.apollographql.com/docs/\">Apollo Server tools, products, and libraries documentation</a> - Documentation, tutorial and examples for building GraphQL server and connecting to SQL, MongoDB and REST endpoints.</li>\n<li><a href=\"https://www.apollographql.com/docs/link/\">Apollo Link</a> - The official guide for getting started with Apollo Link - a standard interface for modifying control flow of GraphQL requests and fetching GraphQL results.</li>\n<li><a href=\"https://github.com/nnance/f8app-apollo\">f8-apollo</a> - Refactored version of the official F8 app of 2016, powered by React Native and the Apollo Stack.</li>\n<li><a href=\"https://github.com/fbsamples/f8app\">f8app</a> - Source code of the official F8 app of 2016, powered by React Native and other Facebook open source projects. <a href=\"http://makeitopen.com/\">http://makeitopen.com</a></li>\n<li><a href=\"https://github.com/reindexio/reindex-examples\">Reindex Examples</a> - Example projects for Reindex with using React Native and React.js for web.</li>\n<li><a href=\"https://julienvincent.github.io/modelizr/\">Modelizr Documentation</a> - Documentation and Usage Examples for modelizr</li>\n<li><a href=\"https://github.com/Akryum/frontpage-vue-app\">Vue Apollo Example</a> - Apollo example project for Vue 2.0.</li>\n<li><a href=\"https://github.com/kamilkisiela/angular2-graphql-rest\">angular2-graphql-rest</a> - An example app with REST Api working side by side with GraphQL using Apollo Client with angular2-apollo. Includes step-by-step tutorial how to migrate from REST to GraphQL.</li>\n<li><a href=\"https://github.com/entria/graphql-dataloader-boilerplate\">GraphQL-DataLoader-Boilerplate</a> - Boilerplate to start your GraphQL with DataLoader server</li>\n<li><a href=\"https://github.com/sibelius/graphql-cep\">GraphQL-CEP</a> - Query address by CEP</li>\n<li><a href=\"https://github.com/katopz/react-apollo-graphql-github-example\">Apollo React example for Github GraphQL API</a> - Usage Examples Apollo React for Github GraphQL API with create-react-app</li>\n<li><a href=\"https://github.com/xpepermint/graphql-example\">Intuitive GraphQL Resolver Example</a> - GraphQL application example using <a href=\"https://github.com/xpepermint/rawmodeljs\">RawModel.js</a>.</li>\n<li><a href=\"https://reactql.org/\">ReactQL starter kit</a> - Universal React + Apollo + Redux + React Router 4, with SSR-enabled GraphQL, store (de/re)hydration and production code bundling.</li>\n<li><a href=\"https://github.com/stubailo/microhn\">microhn</a> - Simple Hacker News client built on top of GraphQLHub</li>\n<li><a href=\"https://github.com/sysgears/apollo-universal-starter-kit\">Apollo Web&#x26;Mobile Universal Starter Kit with Hot Code Reload</a> - Apollo, GraphQL, React, React Native, Expo, Redux, Express, SQL and Twitter Bootstrap. Hot Code Reload of back end &#x26; front end using Webpack and Hot Module Replacement.</li>\n<li><a href=\"https://malloc.fi/building-decoupled-sites-and-apps-with-graphql-and-next-js\">Building Decoupled Sites and Apps with GraphQL and Next.js</a></li>\n</ul>\n<h3>TypeScript Examples</h3>\n<ul>\n<li><a href=\"https://github.com/DxCx/webpack-graphql-server\">Basic Apollo Server</a> - Basic Starter for Apollo Server, Using typescript and Webpack.</li>\n<li><a href=\"https://github.com/FinalDes/apollo-express-ts-server-boilerplate\">Apollo Graphql Express Server</a> - Minimal Apollo Graphql Express Server</li>\n<li><a href=\"https://github.com/KATT/shop\">Prisma/Apollo/React Full-stack Example</a> - An e-commerce example project with Prisma, GraphQL API Gateway, React, Apollo, Next.js, SSR, CI, and E2E testing. All TypeScript.</li>\n</ul>\n<h3>Ruby Examples</h3>\n<ul>\n<li><a href=\"https://github.com/rmosolgo/graphql-ruby-demo\">graphql-ruby-demo</a> - Use graphql-ruby to expose a Rails app.</li>\n<li><a href=\"https://github.com/github/github-graphql-rails-example\">github-graphql-rails-example</a> - Example Rails app using GitHub's GraphQL API.</li>\n<li><a href=\"https://github.com/nethsix/relay-on-rails\">relay-on-rails</a> - Barebones starter kit for Relay application with Rails GraphQL server.</li>\n<li><a href=\"https://github.com/gauravtiwari/relay-rails-blog\">relay-rails-blog</a> - A graphql, relay and standard rails application powered demo weblog.</li>\n<li><a href=\"https://github.com/jcdavison/to_eat_app\">to<em>eat</em>app</a> - A sample graphql/rails/relay application with a related 3-part article series.</li>\n</ul>\n<h3>Go Examples</h3>\n<ul>\n<li><a href=\"https://github.com/sogko/golang-relay-starter-kit\">golang-relay-starter-kit</a> - Barebones starting point for a Relay application with Golang GraphQL server.</li>\n<li><a href=\"https://github.com/graphql-go/playground\">golang-graphql-playground</a> - An example Golang GraphQL server written with graphql-go and graphql-relay-go. Try live demo at: <a href=\"http://golanggraphqlplayground-sogko.rhcloud.com/\">http://golanggraphqlplayground-sogko.rhcloud.com</a></li>\n<li><a href=\"https://github.com/sogko/todomvc-relay-go\">todomvc-relay-go</a> - Port of the React/Relay TodoMVC app, driven by a Golang GraphQL backend.</li>\n</ul>\n<h3>Scala Examples</h3>\n<ul>\n<li><a href=\"https://github.com/sangria-graphql/sangria-akka-http-example\">sangria-akka-http-example</a> - An example GraphQL server written with akka-http and <a href=\"http://sangria-graphql.org/\">sangria</a></li>\n<li><a href=\"https://github.com/sangria-graphql/sangria-playground\">sangria-playground</a> - An example of GraphQL server written with Play and sangria.</li>\n</ul>\n<h3>Python Examples</h3>\n<ul>\n<li><a href=\"https://github.com/graphql-python/swapi-graphene\">swapi-graphene</a> - A GraphQL schema and server using <a href=\"http://graphene-python.org/\">Graphene</a> - <a href=\"http://swapi.graphene-python.org/\">View demo online</a>.</li>\n</ul>\n<h3>Elixir Examples</h3>\n<ul>\n<li><a href=\"https://github.com/absinthe-graphql/absinthe_example\">absinthe_example</a> - Example usage of Absinthe GraphQL</li>\n<li><a href=\"https://github.com/graphql-elixir/hello_graphql_phoenix\">hello<em>graphql</em>phoenix</a> - Examples of GraphQL Elixir Plug endpoints mounted in Phoenix - <a href=\"http://playground.graphql-elixir.org/\">View demo online</a>.</li>\n</ul>\n<h3>PHP Examples</h3>\n<ul>\n<li><a href=\"https://siler.leocavalcante.com/graphql/\">Siler's GraphQL guide</a> - A guide on how to build a PHP GraphQL endpoint.</li>\n<li><a href=\"https://github.com/ardani/laravel-graphql\">Laravel GraphQL</a> - A sample integrating GraphQL with Laravel</li>\n<li><a href=\"https://symfony.fi/entry/adding-a-graphql-api-to-your-symfony-flex-app\">Adding a GraphQL API to your Symfony Flex application</a></li>\n</ul>\n<h3>ReasonML Examples</h3>\n<ul>\n<li><a href=\"https://github.com/Gregoirevda/reason-ml-graphql-todo-list\">Todo list example</a> - A todo list integrating GraphQL.</li>\n</ul>\n<h2>Videos</h2>\n<ul>\n<li><a href=\"https://egghead.io/lessons/react-zero-config-apollo-graphql-with-apollo-boost\">Zero-config Apollo + GraphQL with Apollo Boost</a></li>\n<li><a href=\"https://www.youtube.com/embed/UBGzsb2UkeY\">Zero to GraphQL in 30 Minutes</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=9sc8Pyc51uU\">Data fetching for React applications at Facebook</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=X6YbAKiLCLU\">React Native &#x26; Relay: Bringing Modern Web Techniques to Mobile</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=WQLzZf34FJ8\">Exploring GraphQL</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=gY48GW87Feo\">Creating a GraphQL Server</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=S0s935RKKB4\">GraphQL at The Financial Times</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=IrgHurBjQbg\">Relay: An Application Framework For React</a></li>\n<li><a href=\"https://www.youtube.com/watch?t=643&#x26;v=Pxdgu2XIAAg\">Building and Deploying Relay with Facebook</a></li>\n<li><a href=\"https://vimeo.com/144817545\">Introduction to GraphQL</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=_9RgHXqH8J0\">Exploring GraphQL@Scale</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=IMUpYOc9z3c&#x26;feature=youtu.be\">What's Next for Phoenix by Chris McCord</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=Ed6oJXKt3-M\">GraphQL with Nick Schrock</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=DNPVqK_woRQ\">Build a GraphQL server for Node.js using PostgreSQL/MySQL</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=PHabPhgRUuU\">GraphQL server tutorial for Node.js with SQL, MongoDB and REST</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=ENqDNIp1Nd8\">JavaScript Air Episode 023: Transitioning from REST to GraphQL</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=ViXL0YQnioU\">GraphQL Future at react-europe 2016</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=etax3aEe2dA\">GraphQL at Facebook at react-europe 2016</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=z5rz3saDPJ8\">Building native mobile apps with GraphQL at react-europe 2016</a></li>\n</ul>\n<h2>Blogs</h2>\n<ul>\n<li><a href=\"http://graphql.org/blog/\">Official GraphQL blog</a></li>\n<li><a href=\"https://dev-blog.apollodata.com/\">Building Apollo</a></li>\n</ul>\n<h2>Posts</h2>\n<ul>\n<li><a href=\"http://gajus.com/blog/9/using-dataloader-to-batch-requests\">Using DataLoader to batch GraphQL requests</a></li>\n<li><a href=\"https://facebook.github.io/react/blog/2015/02/20/introducing-relay-and-graphql.html\">Introducing Relay and GraphQL</a></li>\n<li><a href=\"https://facebook.github.io/react/blog/2015/05/01/graphql-introduction.html\">GraphQL Introduction</a></li>\n<li><a href=\"https://gist.github.com/wincent/598fa75e22bdfa44cf47\">Unofficial Relay FAQ</a></li>\n<li><a href=\"https://medium.com/@clayallsopp/your-first-graphql-server-3c766ab4f0a2\">Your First GraphQL Server</a></li>\n<li><a href=\"https://blog.risingstack.com/graphql-overview-getting-started-with-graphql-and-nodejs/\">GraphQL Overview - Getting Started with GraphQL and Node.js</a></li>\n<li><a href=\"https://medium.freecodecamp.com/introduction-to-graphql-1d8011b80159\">4 Reasons you should try out GraphQL</a></li>\n<li><a href=\"https://medium.com/@frikille/moving-from-rest-to-graphql-e3650b6f5247\">Moving from REST to GraphQL</a></li>\n<li><a href=\"http://davidandsuzi.com/writing-a-basic-api-with-graphql/\">Writing a Basic API with GraphQL</a></li>\n<li><a href=\"https://blog.risingstack.com/start-using-graphql-with-graffiti/?utm_source=nodeweekly&#x26;utm_medium=email\">Start using GraphQL with Graffiti</a></li>\n<li><a href=\"https://www.reindex.io/blog/building-a-graphql-server-with-node-js-and-sql/\">Building a GraphQL Server with Node.js and SQL</a></li>\n<li><a href=\"https://www.slideshare.net/LondonReact/graph-ql\">GraphQL at The Financial Times</a></li>\n<li><a href=\"http://sgwilym.github.io/relay-visual-learners/\">Relay for visual learners</a></li>\n<li><a href=\"https://medium.com/@cpojer/relay-and-routing-36b5439bad9\">Relay and Routing</a></li>\n<li><a href=\"https://wehavefaces.net/learn-golang-graphql-relay-1-e59ea174a902\">Learn Golang + GraphQL + Relay, Part 1: Your first Golang GraphQL server</a></li>\n<li><a href=\"https://wehavefaces.net/learn-golang-graphql-relay-2-a56cbcc3e341\">Learn Golang + GraphQL + Relay, Part 2: Your first Relay application</a></li>\n<li><a href=\"https://0x2a.sh/from-rest-to-graphql-b4e95e94c26b\">From REST to GraphQL</a></li>\n<li><a href=\"http://graphql.org/blog/graphql-a-query-language/\">GraphQL: A data query language</a></li>\n<li><a href=\"http://graphql.org/blog/subscriptions-in-graphql-and-relay/\">Subscriptions in GraphQL and Relay</a></li>\n<li><a href=\"https://medium.com/@clayallsopp/relay-101-building-a-hacker-news-client-bb8b2bdc76e6\">Relay 101: Building A Hacker News Client</a></li>\n<li><a href=\"https://wehavefaces.net/graphql-shorthand-notation-cheatsheet-17cd715861b6\">GraphQL Shorthand Notation Cheatsheet</a></li>\n<li><a href=\"https://githubengineering.com/the-github-graphql-api/\">The GitHub GraphQL API</a></li>\n<li><a href=\"https://medium.com/@katopz/github-graphql-api-react-example-eace824d7b61\">Github GraphQL API React Example</a></li>\n<li><a href=\"https://medium.com/entria/testing-a-graphql-server-using-jest-4e00d0e4980e\">Testing a GraphQL Server using Jest</a></li>\n<li><a href=\"https://medium.com/entria/how-to-implement-viewercansee-in-graphql-78cc48de7464\">How to implement viewerCanSee in GraphQL</a></li>\n<li><a href=\"https://engineeringblog.yelp.com/2017/05/introducing-yelps-local-graph.html\">Introducing Yelp's Local Graph</a></li>\n<li><a href=\"https://labs.getninjas.com.br/sharing-data-in-a-microservices-architecture-using-graphql-97db59357602\">Sharing data in a Microservices Architecture using GraphQL</a></li>\n<li><a href=\"https://blog.codecentric.de/2017/09/graphql-mit-spotify-teil-1-server/\">Let's build a node.js GraphQL server for fetching Spotify REST API, in German</a> | <a href=\"https://blog.codecentric.de/en/2017/01/lets-build-spotify-graphql-server/\">in English</a></li>\n<li><a href=\"https://medium.com/@pierrecriulanscy/client-side-only-realtime-web-applications-with-firebase-graphql-and-apollo-client-2-0-9606160f7cf8\">“Client-side only” realtime web applications with Firebase, GraphQL and apollo-client 2.0</a></li>\n</ul>\n<h2>Tutorials</h2>\n<ul>\n<li><a href=\"https://www.howtographql.com/\">How to GraphQL</a> - Fullstack Tutorial Website with Tracks for all Major Frameworks &#x26; Languages including React, Apollo, Relay, JavaScript, Ruby, Java, Elixir and many more</li>\n<li><a href=\"https://github.com/mugli/learning-graphql\">learning-graphql</a> - An attempt to learn GraphQL.</li>\n<li><a href=\"https://www.learnrelay.org/\">Learn Relay</a> - A comprehensive introduction to Relay</li>\n<li><a href=\"https://www.learnapollo.com/\">Learn Apollo</a> - A hands-on tutorial for Apollo GraphQL Client</li>\n</ul>"},{"url":"/blog/blog-archive/","relativePath":"blog/blog-archive.md","relativeDir":"blog","base":"blog-archive.md","name":"blog-archive","frontmatter":{"title":"Blog Archive","subtitle":"Blog Archive","date":"2021-07-26","thumb_image_alt":"Blog page animation","excerpt":"Blog Archive","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"post","thumb_image":"images/3.jpg"},"html":"<h2>Blog Archive</h2>\n <iframe   width=\"400\" height=\"575\"\n            src=\"https://bgoonz.blogspot.com/\" title=\"YouTube video\n            player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;\n            encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"},{"url":"/blog/functions-in-python/","relativePath":"blog/functions-in-python.md","relativeDir":"blog","base":"functions-in-python.md","name":"functions-in-python","frontmatter":{"title":"Functions in Python","subtitle":"Functions in Python","date":"2021-10-12","thumb_image_alt":"lorem-ipsum","excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"post"},"html":"<h2>Functions</h2>\n<pre><code class=\"language-python\">def hello(name):\n    print('Hello {}'.format(name))\n</code></pre>\n<h3>Return Values and return Statements</h3>\n<p>When creating a function using the def statement, you can specify what the return value should be with a return statement. A return statement consists of the following:</p>\n<ul>\n<li>The return keyword.</li>\n<li>The value or expression that the function should return.</li>\n</ul>\n<pre><code class=\"language-python\">import random\ndef getAnswer(answerNumber):\n    if answerNumber == 1:\n        return 'It is certain'\n    elif answerNumber == 2:\n        return 'It is decidedly so'\n    elif answerNumber == 3:\n        return 'Yes'\n    elif answerNumber == 4:\n        return 'Reply hazy try again'\n    elif answerNumber == 5:\n        return 'Ask again later'\n    elif answerNumber == 6:\n        return 'Concentrate and ask again'\n    elif answerNumber == 7:\n        return 'My reply is no'\n    elif answerNumber == 8:\n        return 'Outlook not so good'\n    elif answerNumber == 9:\n        return 'Very doubtful'\n\nr = random.randint(1, 9)\nfortune = getAnswer(r)\nprint(fortune)\n</code></pre>\n<h3>The None Value</h3>\n<pre><code class=\"language-python\">spam = print('Hello!')\nspam is None\n</code></pre>\n<p>Note: never compare to <code>None</code> with the <code>==</code> operator. Always use <code>is</code>.</p>\n<h3>print Keyword Arguments</h3>\n<pre><code class=\"language-python\">print('Hello', end='')\nprint('World')\n</code></pre>\n<pre><code class=\"language-python\">print('cats', 'dogs', 'mice')\n</code></pre>\n<pre><code class=\"language-python\">print('cats', 'dogs', 'mice', sep=',')\n</code></pre>\n<h3>Local and Global Scope</h3>\n<ul>\n<li>Code in the global scope cannot use any local variables.</li>\n<li>However, a local scope can access global variables.</li>\n<li>Code in a function’s local scope cannot use variables in any other local scope.</li>\n<li>You can use the same name for different variables if they are in different scopes. That is, there can be a local variable named spam and a global variable also named spam.</li>\n</ul>\n<h3>The global Statement</h3>\n<p>If you need to modify a global variable from within a function, use the global statement:</p>\n<pre><code class=\"language-python\">def spam():\n    global eggs\n    eggs = 'spam'\n\neggs = 'global'\nspam()\nprint(eggs)\n</code></pre>\n<p>There are four rules to tell whether a variable is in a local scope or global scope:</p>\n<ol>\n<li>If a variable is being used in the global scope (that is, outside of all functions), then it is always a global variable.</li>\n<li>If there is a global statement for that variable in a function, it is a global variable.</li>\n<li>Otherwise, if the variable is used in an assignment statement in the function, it is a local variable.</li>\n<li>But if the variable is not used in an assignment statement, it is a global variable.</li>\n</ol>"},{"url":"/blog/blogwcomments/","relativePath":"blog/blogwcomments.md","relativeDir":"blog","base":"blogwcomments.md","name":"blogwcomments","frontmatter":{"title":"ExpressJS Apis","subtitle":"lorem-ipsum","date":"2021-07-26","thumb_image_alt":"node and express js","excerpt":"## **Overview**  A **database schema** is the shape of our database. It defines what tables we'll have, which columns should exist within the tables and any restrictions on each column.  A well-designed database schema keeps the data well organized and can help ensure high-quality data.  Note that while schema design is usually left to Database Administrators (DBAs), understanding schema helps when designing APIs and database logic. And in a smaller team, this step may fall on the developer.","seo":{"title":"","description":"","robots":[],"extra":[],"type":"stackbit_page_meta"},"template":"post","thumb_image":"images/express.png"},"html":"<p><a href=\"https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_where\">SQL Tryit Editor v1.6</a></p>\n<h2>A <strong>database is a collection of data organized for easy retrieval and manipulation</strong>.</h2>\n<p>We're concerned only with digital databases, those that run on computers or other electronic devices. Digital databases have been around since the 1960s. Relational databases, those which store \"related\" data, are the oldest and most common type of database in use today.</p>\n<h3><strong>Data Persistence</strong></h3>\n<p>A database is often necessary because our application or code requires data persistence. This term refers to data that is infrequently accessed and not likely to be modified. In less technical terms, the information will be safely stored and remain untouched unless intentionally modified.</p>\n<p>A familiar example of non-persistent data would be JavaScript objects and arrays, which reset each time the code runs.</p>\n<h3><strong>Relational Databases</strong></h3>\n<p>In relational databases, <strong>the data is stored in tabular format grouped into rows and columns</strong> (similar to spreadsheets). A collection of rows is called a table. Each row represents a single record in the table and is made up of one or more columns.</p>\n<p>These kinds of databases are relational because a <em>relation</em> is a mathematical idea equivalent to a table. So relational databases are databases that store their data in tables.</p>\n<h3><strong>Tables</strong></h3>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2e309a41-e107-46f3-81e7-154d732d3dcf/Untitled.png\"></p>\n<p><strong>Below are some basic facts about tables:</strong></p>\n<ul>\n<li>Tables organize data in rows and columns.</li>\n<li>Each row in a table represents one distinct record.</li>\n<li>Each column represents a field or attribute that is common to all the records.</li>\n<li>Fields should have a descriptive name and a data type appropriate for the attribute it represents.</li>\n<li>Tables usually have more rows than columns.</li>\n<li>Tables have primary keys that uniquely identify each row.</li>\n<li>Foreign keys represent the relationships with other tables.</li>\n</ul>\n<h2><strong>Overview</strong></h2>\n<h3>SQL:</h3>\n<p>SQL is a standard language, which means that it almost certainly will be supported, no matter how your database is managed. That said, be aware that the SQL language can vary depending on database management tools. This lesson focuses on a set of core commands that never change. Learning the standard commands is an excellent introduction since the knowledge transfers between database products.</p>\n<p>The syntax for SQL is English-like and requires fewer symbols than programming languages like C, Java, and JavaScript.</p>\n<p>It is declarative and concise, which means there is a lot less to learn to use it effectively.</p>\n<p>When learning SQL, it is helpful to understand that each command is designed for a different purpose. If we classify the commands by purpose, we'll end up with the following sub-categories of SQL:</p>\n<ul>\n<li><strong>Data Definition Language (DDL)</strong>: used to modify database objects. Some examples are: CREATE TABLE, ALTER TABLE, and DROP TABLE.</li>\n<li><strong>Data Manipulation Language (DML)</strong>: used to manipulate the data stored in the database. Some examples are: INSERT, UPDATE, and DELETE.</li>\n<li><strong>Data Query Language (DQL)</strong>: used to ask questions about the data stored in the database. The most commonly used SQL command is SELECT, and it falls in this category.</li>\n<li><strong>Data Control Language (DCL)</strong>: used to manage database security and user's access to data. These commands fall into the realm of Database Administrators. Some examples are GRANT and REVOKE.</li>\n<li><strong>Transaction Control Commands</strong>: used for managing groups of statements that must execute as a unit or not execute at all. Examples are COMMIT and ROLLBACK.</li>\n</ul>\n<p>As a developer, you'll need to get familiar with DDL and become proficient using DML and DQL. This lesson will cover only DML and DQL commands.</p>\n<h2><strong>Overview</strong></h2>\n<p>The four SQL operations covered in this section will allow a user to <strong>query</strong>, <strong>insert</strong>, and <strong>modify</strong> a database table.</p>\n<h3><strong>Query</strong></h3>\n<p>A <strong>query</strong> is a SQL statement used to retrieve data from a database. The command used to write queries is SELECT, and it is one of the most commonly used SQL commands.</p>\n<p>The basic syntax for a SELECT statement is this:</p>\n<p>To see all the fields on a table, we can use a * as the selection.</p>\n<p>The preceding statement would show all the records and all the columns for each record in the employees table.</p>\n<p>To pick the fields we want to see, we use a comma-separated list:</p>\n<p>The return of that statement would hold all records from the listed fields.</p>\n<p>We can extend the SELECT command's capabilities using clauses for things like filtering, sorting, pagination, and more.</p>\n<p>It is possible to query multiple tables in a single query. But, in this section, we only perform queries on a single table. We will cover performing queries on multiple tables in another section.</p>\n<h3><strong>Insert</strong></h3>\n<p>To <strong>insert</strong> new data into a table, we'll use the INSERT command. The basic syntax for an INSERT statement is this:</p>\n<p>Using this formula, we can specify which values will be inserted into which fields like so:</p>\n<h3><strong>Modify</strong></h3>\n<p><strong>Modifying</strong> a database consists of updating and removing records. For these operations, we'll use UPDATE and DELETE commands, respectively.</p>\n<p>The basic syntax for an UPDATE statement is:</p>\n<p>The basic syntax for a DELETE statement is:</p>\n<h2><strong>Follow Along</strong></h2>\n<h3><strong>Filtering results using WHERE clause</strong></h3>\n<p>When querying a database, the default result will be every entry in the given table. However, often, we are looking for a specific record or a set of records that meets certain criteria.</p>\n<p>A WHERE clause can help in both cases.</p>\n<p>Here's an example where we might only want to find customers living in Berlin.</p>\n<p>We can also chain together WHERE clauses using OR and AND to limit our results further.</p>\n<p>The following query includes only records that match both criteria.</p>\n<p>And this query includes records that match either criteria.</p>\n<p>These operators can be combined and grouped with parentheses to add complex selection logic. They behave similarly to what you're used to in programming languages.</p>\n<p>You can read more about SQLite operators from <a href=\"https://www.w3resource.com/sqlite/operators.php\">w3resource (Links to an external site.)</a>.</p>\n<p>To select a single record, we can use a WHERE statement with a uniquely identifying field, like an id:</p>\n<p>Other comparison operators also work in WHERE conditions, such as >, &#x3C;, &#x3C;=, and >=.</p>\n<h3><strong>Ordering results using the ORDER BY clause</strong></h3>\n<p>Query results are shown in the same order the data was inserted. To control how the data is sorted, we can use the ORDER BY clause. Let's see an example.</p>\n<p>We can pass a list of field names to order by and optionally choose asc or desc for the sort direction. The default is asc, so it doesn't need to be specified.</p>\n<p>Some SQL engines also support using field abbreviations when sorting.</p>\n<p>In this case, the results are sorted by the department in ascending order first and then by salary in descending order. The numbers refer to the fields' position in the <em>selection</em> portion of the query, so 1 would be <em>name</em>, 2 would be <em>salary</em>, and so on.</p>\n<p>Note that the WHERE clause should come after the FROM clause. The ORDER BY clause always goes last.</p>\n<h3><strong>Limiting results using the LIMIT clause</strong></h3>\n<p>When we wish to see only a limited number of records, we can use a LIMIT clause.</p>\n<p>The following returns the first ten records in the products table:</p>\n<p>LIMIT clauses are often used in conjunction with ORDER BY. The following shows us the five cheapest products:</p>\n<h3><strong>Inserting data using INSERT</strong></h3>\n<p>An insert statement adds a new record to the database. All non-null fields must be listed out in the same order as their values. Some fields, like ids and timestamps, may be auto-generated and do not need to be included in an INSERT statement.</p>\n<p>The values in an insert statement must not violate any restrictions and constraints that the database has in place, such as expected datatypes. We will learn more about constraints and schema design in a later section.</p>\n<h3><strong>Modifying recording using UPDATE</strong></h3>\n<p>When modifying a record, we identify a single record or a set of records to update using a WHERE clause. Then we can set the new value(s) in place.</p>\n<p>Technically the WHERE clause is not required, but leaving it off would result in every record within the table receiving the update.</p>\n<h3><strong>Removing records using DELETE</strong></h3>\n<p>When removing a record or set of records, we need only identify which record(s) to remove using a WHERE clause:</p>\n<p>Once again, the WHERE clause is not required, but leaving it off would remove every record in the table, so it's essential.</p>\n<h2><strong>Overview</strong></h2>\n<p>Raw SQL is a critical baseline skill. However, Node developers generally use an <strong>Object Relational Mapper (ORM)</strong> or <strong>query builder</strong> to write database commands in a backend codebase. Both <strong>ORMs</strong> and <strong>query builders</strong> are JavaScript libraries that allow us to interface with the database using a JavaScript version of the SQL language.</p>\n<p>For example, instead of a raw SQL SELECT:</p>\n<p>We could use a query builder to write the same logic in JavaScript:</p>\n<p><strong>Query builders</strong> are lightweight and easy to get off the ground, whereas <strong>ORMs</strong> use an object-oriented model and provide more heavy lifting within their rigid structure.</p>\n<p>We will use a <strong>query builder</strong> called <a href=\"https://knexjs.org/\">knex.js (Links to an external site.)</a>.</p>\n<h2><strong>Follow Along</strong></h2>\n<h3><strong>Knex Setup</strong></h3>\n<p>To use Knex in a repository, we'll need to add two libraries:</p>\n<p>knex is our query builder library, and sqlite3 allows us to interface with a sqlite database. We'll learn more about sqlite and other <strong>database management systems</strong> in the following module. For now, know that you need both libraries.</p>\n<p>Next, we use Knex to set up a config file:</p>\n<p>To use the query builder elsewhere in our code, we need to call knex and pass in a config object. We'll be discussing Knex configuration more in a future module. Still, we only need the client, connection, and useNullAsDefault keys as shown above. The filename should point towards the pre-existing database file, which can be recognized by the .db3 extension.</p>\n<p><strong>GOTCHA</strong>: The file path to the database should be with respect to the <strong>root</strong> of the repo, not the configuration file itself.</p>\n<p>Once Knex is configured, we can import the above config file anywhere in our codebase to access the database.</p>\n<p>The db object provides methods that allow us to begin building queries.</p>\n<h3><strong>SELECT using Knex</strong></h3>\n<p>In Knex, the equivalent of SELECT * FROM users is:</p>\n<p>There's a simpler way to write the same command:</p>\n<p>Using this, we could write a GET endpoint.</p>\n<p><strong>NOTE</strong>: All Knex queries return promises.</p>\n<p>Knex also allows for a where clause. In Knex, we could write SELECT * FROM users WHERE id=1 as</p>\n<p>This method will resolve to an array containing a single entry like so: [{ id: 1, name: 'bill' }].</p>\n<p>Using this, we might add a GET endpoint where a specific user:</p>\n<h3><strong>INSERT using Knex</strong></h3>\n<p>In Knex, the equivalent of INSERT INTO users (name, age) VALUES ('Eva', 32) is:</p>\n<p>The insert method in Knex will resolve to an array containing the newly created id for that user like so: [3].</p>\n<h3><strong>UPDATE using Knex</strong></h3>\n<p>In knex, the equivalent of UPDATE users SET name='Ava', age=33 WHERE id=3; is:</p>\n<p>Note that the where method comes before update, unlike in SQL.</p>\n<p>Update will resolve to a count of rows updated.</p>\n<h3><strong>DELETE using Knex</strong></h3>\n<p>In Knex, the equivalent of DELETE FROM users WHERE age=33; is:</p>\n<p>Once again, the where must come before the del. This method will resolve to a count of records removed.</p>\n<h1>Day #2:</h1>\n<h2><strong>Overview</strong></h2>\n<p>SQLlite Studio is an application that allows us to create, open, view, and modify SQLite databases. To fully understand what SQLite Studio is and how it works, we must also understand the concept of the Database Management Systems (DBMS).</p>\n<h2><strong>Follow Along</strong></h2>\n<h3><strong>What is a DBMS?</strong></h3>\n<p>To manage digital databases we use specialized software called <strong>D</strong>ata<strong>B</strong>ase <strong>M</strong>anagement <strong>S</strong>ystems (DBMS). These systems typically run on servers and are managed by <strong>D</strong>ata<strong>B</strong>ase <strong>A</strong>dministrators (DBAs).</p>\n<p>In less technical terms, we need a type of software that will allow us to create, access, and generally manage our databases. In the world of relational databases, we specifically use Relational Database Mangement Systems (RDBMs). Some examples are Postgres, SQLite, MySQL, and Oracle.</p>\n<p>Choosing a DBMS determines everything from how you set up your database, to where and how the data is stored, to what SQL commands you can use. Most systems share the core of the SQL language that you've already learned.</p>\n<p>In other words, you can expect SELECT, UPDATE, INSERT, WHERE , and the like to be the same across all DBMSs, but the subtleties of the language may vary.</p>\n<h3><strong>What is SQLite?</strong></h3>\n<p><strong>SQLite</strong> is the DBMS, as the name suggests, it is a more lightweight system and thus easier to get set up than some others.</p>\n<p>SQLite allows us to store databases as single files. SQLite projects have a .db3 extension. That is the database.</p>\n<p>SQLite is <em>not a database</em> (like relational, graph, or document are databases) but rather <em>a database management system</em>.</p>\n<h3><strong>Opening an existing database in SQLite Studio</strong></h3>\n<p>One useful visual interface we might use with a SQLite database is called <strong>SQLite Studio</strong>. <a href=\"https://sqlitestudio.pl/\">Install SQLITE Studio here. (Links to an external site.)</a></p>\n<p>Once installed, we can use SQLite Studio to open any .db3 file from a previous lesson. We may view the tables, view the data, and even make changes to the database.</p>\n<p>For a more detailed look at SQLite Studio, follow along in the video above.</p>\n<h2><strong>Overview</strong></h2>\n<p>A <strong>database schema</strong> is the shape of our database. It defines what tables we'll have, which columns should exist within the tables and any restrictions on each column.</p>\n<p>A well-designed database schema keeps the data well organized and can help ensure high-quality data.</p>\n<p>Note that while schema design is usually left to Database Administrators (DBAs), understanding schema helps when designing APIs and database logic. And in a smaller team, this step may fall on the developer.</p>\n<h2><strong>Follow Along</strong></h2>\n<p>For a look at schema design in SQLite Studio, follow along in the video above.</p>\n<p>When designing a single table, we need to ask three things:</p>\n<ul>\n<li>What fields (or columns) are present?</li>\n<li>What type of data do we expect for each field?</li>\n<li>Are there other restrictions needed for each column?</li>\n</ul>\n<p>Looking at the following schema diagram for an accounts table, we can the answer to each other those questions:</p>\n<p><a href=\"https://www.notion.so/9790405dda624818822293a383eec2d2\">Untitled</a></p>\n<h3><strong>Table Fields</strong></h3>\n<p>Choosing which fields to include in a table is relatively straight forward. What information needs to be tracked regarding this resource? In the real world, this is determined by the intended use of the product or app.</p>\n<p>However, this is one requirement every table should satisfy: a <strong>primary key</strong>. A primary key is a way to identify each entry in the database uniquely. It is most often represented as a auto-incrementing integer called id or [tablename]Id.</p>\n<h3><strong>Datatypes</strong></h3>\n<p>Each field must also have a specified datatype. The datatype available depends on our DBMS. Some supported datatype in SQLite include:</p>\n<ul>\n<li><strong>Null:</strong> Missing or unknown information.</li>\n<li><strong>Integer:</strong> Whole numbers.</li>\n<li><strong>Real:</strong> Any number, including decimals.</li>\n<li><strong>Text:</strong> Character data.</li>\n<li><strong>Blob:</strong> a large binary object that can be used to store miscellaneous data.</li>\n</ul>\n<p>Any data inserted into the table must match the datatypes determined in schema design.</p>\n<h3><strong>Constraints</strong></h3>\n<p>Beyond datatypes, we may add additional <strong>constraints</strong> on each field. Some examples include:</p>\n<ul>\n<li><strong>Not Null:</strong> The field cannot be left empty</li>\n<li><strong>Unique:</strong> No two records can have the same value in this field</li>\n<li><strong>Primary key:</strong> - Indicates this field is the primary key. Both the not null and unique constraints will be enforced.</li>\n<li><strong>Default:</strong> - Sets a default value if none is provided.</li>\n</ul>\n<p>As with data types, any data that does not satisfy the schema constraints will be rejected from the database.</p>\n<h3><strong>Multi-Table Design</strong></h3>\n<p>Another critical component of schema design is to understand how different tables relate to each other. This will be covered in later lesson.</p>\n<h2><strong>Overview</strong></h2>\n<p>Knex provides a <strong>schema builder</strong>, which allows us to write code to design our database schema. However, beyond thinking about columns and constraints, we must also consider updates.</p>\n<p>When a schema needs to be updated, a developer must feel confident that the changes go into effect everywhere. This means schema updates on the developer's local machine, on any testing or staging versions, on the production database, and then on any other developer's local machines. This is where <strong>migrations</strong> come into play.</p>\n<p>A database migration describes changes made to the structure of a database. Migrations include things like adding new objects, adding new tables, and modifying existing objects or tables.</p>\n<h2><strong>Follow Along</strong></h2>\n<h3><strong>Knex Cli</strong></h3>\n<p>To use migrations (and to make Knex setup easier), we need to use <strong>knex cli</strong>. Install knex globally with npm install -g knex.</p>\n<p>This allows you to use Knex commands within any repo that has knex as a local dependency. If you have any issues with this global install, you can use the npx knex command instead.</p>\n<h3><strong>Initializing Knex</strong></h3>\n<p>To start, add the knex and sqlite3 libraries to your repository.</p>\n<p>npm install knex sqlite3</p>\n<p>We've seen how to use manually create a config object to get started with Knex, but the best practice is to use the following command:</p>\n<p>Or, if Knex isn't globally installed:</p>\n<p>This command will generate a file in your root folder called knexfile.js. It will be auto populated with three config objects, based on different environments. We can delete all except for the development object.</p>\n<p>We'll need to update the location (or desired location) of the database as well as add the useNullAsDefault option. The latter option prevents crashes when working with sqlite3.</p>\n<p>Now, wherever we configure our database, we may use the following syntax instead of hardcoding in a config object.</p>\n<h3><strong>Knex Migrations</strong></h3>\n<p>Once our knexfile is set up, we can begin creating <strong>migrations</strong>. Though it's not required, we are going to add an addition option to the config object to specify a directory for the migration files.</p>\n<p>We can generate a new migration with the following command:</p>\n<p>knex migrate:make [migration-name]</p>\n<p>If we needed to create an accounts table, we might run:</p>\n<p>knex migrate:make create-accounts</p>\n<p>Note that inside data/migrations/ a new file has appeared. Migrations have a timestamp in their filenames automatically. Wither you like this or not, <strong>do not edit migration names.</strong></p>\n<p>The migration file should have both an up and a down function. Within the up function, we write the ended database changes. Within the down function, we write the code to undo the up functions. This allows us to undo any changes made to the schema if necessary.</p>\n<p>References for these methods are found in the <strong>schema builder</strong> section of the <a href=\"https://knexjs.org/\">Knex docs (Links to an external site.)</a>.</p>\n<p>At this point, the table is <strong>not</strong> yet created. To run this (and any other) migrations, use the command:</p>\n<p>knex migrate:latest</p>\n<p>Note if the database does not exist, this command will auto-generate one. We can use SQLite Studio to confirm that the accounts table has been created.</p>\n<h3><strong>Changes and Rollbacks</strong></h3>\n<p>If later down the road, we realize you need to update your schema, you shouldn't edit the migration file. Instead, you will want to create a new migration with the command:</p>\n<p>knex migrate:make accounts-schema-update</p>\n<p>Once we've written our updates into this file we save and close with:</p>\n<p>knex migrate:latest</p>\n<p>If we migrate our database and then quickly realize something isn't right, we can edit the migration file. However, first, we need to <strong>rolllback</strong> (or undo) our last migration with:</p>\n<p>knex migrate:rollback</p>\n<p>Finally, we are free to rerun that file with knex migrate latest.</p>\n<p><strong>NOTE</strong>: A rollback should not be used to edit an old migration file once that file has accepted into a main branch. However, an entire team may use a rollback to return to a previous version of a database.</p>\n<h2><strong>Overview</strong></h2>\n<p>Knex provides a <strong>schema builder</strong>, which allows us to write code to design our database schema. However, beyond thinking about columns and constraints, we must also consider updates.</p>\n<p>When a schema needs to be updated, a developer must feel confident that the changes go into effect everywhere. This means schema updates on the developer's local machine, on any testing or staging versions, on the production database, and then on any other developer's local machines. This is where <strong>migrations</strong> come into play.</p>\n<p>A database migration describes changes made to the structure of a database. Migrations include things like adding new objects, adding new tables, and modifying existing objects or tables.</p>\n<h2><strong>Follow Along</strong></h2>\n<h3><strong>Knex Cli</strong></h3>\n<p>To use migrations (and to make Knex setup easier), we need to use <strong>knex cli</strong>. Install knex globally with npm install -g knex.</p>\n<p>This allows you to use Knex commands within any repo that has knex as a local dependency. If you have any issues with this global install, you can use the npx knex command instead.</p>\n<h3><strong>Initializing Knex</strong></h3>\n<p>To start, add the knex and sqlite3 libraries to your repository.</p>\n<p>npm install knex sqlite3</p>\n<p>We've seen how to use manually create a config object to get started with Knex, but the best practice is to use the following command:</p>\n<p>Or, if Knex isn't globally installed:</p>\n<p>This command will generate a file in your root folder called knexfile.js. It will be auto populated with three config objects, based on different environments. We can delete all except for the development object.</p>\n<p>We'll need to update the location (or desired location) of the database as well as add the useNullAsDefault option. The latter option prevents crashes when working with sqlite3.</p>\n<p>Now, wherever we configure our database, we may use the following syntax instead of hardcoding in a config object.</p>\n<h3><strong>Knex Migrations</strong></h3>\n<p>Once our knexfile is set up, we can begin creating <strong>migrations</strong>. Though it's not required, we are going to add an addition option to the config object to specify a directory for the migration files.</p>\n<p>We can generate a new migration with the following command:</p>\n<p>knex migrate:make [migration-name]</p>\n<p>If we needed to create an accounts table, we might run:</p>\n<p>knex migrate:make create-accounts</p>\n<p>Note that inside data/migrations/ a new file has appeared. Migrations have a timestamp in their filenames automatically. Wither you like this or not, <strong>do not edit migration names.</strong></p>\n<p>The migration file should have both an up and a down function. Within the up function, we write the ended database changes. Within the down function, we write the code to undo the up functions. This allows us to undo any changes made to the schema if necessary.</p>\n<p>References for these methods are found in the <strong>schema builder</strong> section of the <a href=\"https://knexjs.org/\">Knex docs (Links to an external site.)</a>.</p>\n<p>At this point, the table is <strong>not</strong> yet created. To run this (and any other) migrations, use the command:</p>\n<p>knex migrate:latest</p>\n<p>Note if the database does not exist, this command will auto-generate one. We can use SQLite Studio to confirm that the accounts table has been created.</p>\n<h3><strong>Changes and Rollbacks</strong></h3>\n<p>If later down the road, we realize you need to update your schema, you shouldn't edit the migration file. Instead, you will want to create a new migration with the command:</p>\n<p>knex migrate:make accounts-schema-update</p>\n<p>Once we've written our updates into this file we save and close with:</p>\n<p>knex migrate:latest</p>\n<p>If we migrate our database and then quickly realize something isn't right, we can edit the migration file. However, first, we need to <strong>rolllback</strong> (or undo) our last migration with:</p>\n<p>knex migrate:rollback</p>\n<p>Finally, we are free to rerun that file with knex migrate latest.</p>\n<p><strong>NOTE</strong>: A rollback should not be used to edit an old migration file once that file has accepted into a main branch. However, an entire team may use a rollback to return to a previous version of a database.</p>\n<h2><strong>Overview</strong></h2>\n<p>Often we want to pre-populate our database with sample data for testing. <strong>Seeds</strong> allow us to add and reset sample data easily.</p>\n<h2><strong>Follow Along</strong></h2>\n<p>The Knex command-line tool offers a way to <strong>seed</strong> our database; in other words, pre-populate our tables.</p>\n<p>Similarly to migrations, we want to customize where our seed files are generated using our knexfile</p>\n<p>To create a seed run: knex seed:make 001-seedName</p>\n<p>Numbering is a good idea because Knex doesn't attach a timestamp to the name like migrate does. Adding numbers to the file name, we can control the order in which they run.</p>\n<p>We want to create seeds for our accounts table:</p>\n<p>knex seed:make 001-accounts</p>\n<p>A file will appear in the designated seed folder.</p>\n<p>Run the seed files by typing:</p>\n<p>knex seed:run</p>\n<p>You can now use SQLite Studio to confirm that the accounts table has two entries.</p>\n<h1>Day #3:</h1>\n<h2><strong>Overview</strong></h2>\n<p><strong>Foreign keys</strong> are a type of table field used for creating links between tables. Like <strong>primary keys</strong>, they are most often integers that identify (rather than store) data. However, whereas a primary key is used to id rows in a table, foreign keys are used to connect a record in one table to a record in a second table.</p>\n<h2><strong>Follow Along</strong></h2>\n<p>Consider the following farms and ranchers tables.</p>\n<p><a href=\"https://www.notion.so/5b20c5e233dd4a70a33d6ab2c2e1c8bb\">Untitled</a></p>\n<p><a href=\"https://www.notion.so/0b0a909c24a9474fb9df80938546f12a\">Untitled</a></p>\n<p>The farm<em>id in the ranchers table is an example of a foreign key. Each entry in the farm</em>id (foreign key) column corresponds to an id (primary key) in the farms table. This allows us to track which farm each rancher belongs to while keeping the tables normalized.</p>\n<p>If we could only see the ranchers table, we would know that John, Jane, and Jen all work together and that Jim and Jay also work together. However, to know where any of them work, we would need to look at the farms table.</p>\n<p>Now that we understand the basics of querying data from a single table, let's move on to selecting data from multiple tables using JOIN operations.</p>\n<h2><strong>Overview</strong></h2>\n<p>We can use a JOIN to combine query data from multiple tables using a single SELECT statement.</p>\n<p>There are different types of joins; some are listed below:</p>\n<ul>\n<li>inner joins.</li>\n<li>outer joins.</li>\n<li>left joins.</li>\n<li>right joins.</li>\n<li>cross joins.</li>\n<li>non-equality joins.</li>\n<li>self joins.</li>\n</ul>\n<p>Using joins requires that the two tables of interest contain at least one field with shared information. For example, if a <em>departments</em> table has an <em>id</em> field, and an employee table has a <em>department_id</em> field, and the values that exist in the <em>id</em> column of the <em>departments</em> table live in the <em>department_id</em> field of the employee table, we can use those fields to join both tables like so:</p>\n<p>This query will return the data from both tables for every instance where the ON condition is true. If there are employees with no value for department<em>id or where the value stored in the field does not correspond to an existing id in the</em> departments <em>table, then that record will NOT be returned. In a similar fashion, any records from the</em> departments <em>table that don't have an employee associated with them will also be omitted from the results. Basically, if the</em> id* does not show as the value of department_id for an employee, it won't be able to join.</p>\n<p>We can shorten the condition by giving the table names an alias. This is a common practice. Below is the same example using aliases, picking which fields to return and sorting the results:</p>\n<p>Notice that we can take advantage of white space and indentation to make queries more readable.</p>\n<p>There are several ways of writing joins, but the one shown here should work on all database management systems and avoid some pitfalls, so we recommend it.</p>\n<p>The syntax for performing a similar join using Knex is as follows:</p>\n<h2><strong>Follow Along</strong></h2>\n<p>A good explanation of how the different types of joins can be seen <a href=\"https://www.w3resource.com/sql/joins/sql-joins.php\">in this article from w3resource.com (Links to an external site.)</a>.</p>\n<h1>What is SQL Joins?</h1>\n<p>An SQL JOIN clause combines rows from two or more tables. It creates a set of rows in a temporary table.</p>\n<h1>How to Join two tables in SQL?</h1>\n<p>A JOIN works on two or more tables if they have at least one common field and have a relationship between them.</p>\n<p>JOIN keeps the base tables (structure and data) unchanged.</p>\n<h1>Join vs. Subquery</h1>\n<ul>\n<li>JOINs are faster than a subquery and it is very rare that the opposite.</li>\n<li>In JOINs the RDBMS calculates an execution plan, that can predict, what data should be loaded and how much it will take to processed and as a result this process save some times, unlike the subquery there is no pre-process calculation and run all the queries and load all their data to do the processing.</li>\n<li>A JOIN is checked conditions first and then put it into table and displays; where as a subquery take separate temp table internally and checking condition.</li>\n<li>When joins are using, there should be connection between two or more than two tables and each table has a relation with other while subquery means query inside another query, has no need to relation, it works on columns and conditions.</li>\n</ul>\n<h1>SQL JOINS: EQUI JOIN and NON EQUI JOIN</h1>\n<p>The are two types of SQL JOINS - EQUI JOIN and NON EQUI JOIN</p>\n<ol>\n<li>SQL EQUI JOIN :</li>\n</ol>\n<p>The SQL EQUI JOIN is a simple SQL join uses the equal sign(=) as the comparison operator for the condition. It has two types - SQL Outer join and SQL Inner join.</p>\n<ol>\n<li>SQL NON EQUI JOIN :</li>\n</ol>\n<p>The <strong>SQL NON EQUI JOIN</strong> is a join uses comparison operator other than the equal sign like >, &#x3C;, >=, &#x3C;= with the condition.</p>\n<p><strong>SQL EQUI JOIN : INNER JOIN and OUTER JOIN</strong></p>\n<p>The SQL EQUI JOIN can be classified into two types - INNER JOIN and OUTER JOIN</p>\n<ol>\n<li>SQL INNER JOIN</li>\n</ol>\n<p>This type of EQUI JOIN returns all rows from tables where the key record of one table is equal to the key records of another table.</p>\n<ol>\n<li>SQL OUTER JOIN</li>\n</ol>\n<p>This type of EQUI JOIN returns all rows from one table and only those rows from the secondary table where the joined condition is satisfying i.e. the columns are equal in both tables.</p>\n<p>In order to perform a JOIN query, the required information we need are:</p>\n<p><strong>a)</strong> The name of the tables<strong>b)</strong> Name of the columns of two or more tables, based on which a condition will perform.</p>\n<p><strong>Syntax:</strong></p>\n<p><strong>Parameters:</strong></p>\n<p><a href=\"https://www.notion.so/5522c3e6d5d0443eb870f7a34f60c7ff\">Untitled</a></p>\n<p><strong>Pictorial Presentation of SQL Joins:</strong></p>\n<p><img src=\"https://www.w3resource.com/w3r_images/sql-joins-all.gif\"></p>\n<p><strong>Example:</strong></p>\n<p><strong>Sample table: company</strong></p>\n<p><strong>Sample table: foods</strong></p>\n<p>To join two tables 'company' and 'foods', the following SQL statement can be used :</p>\n<p><strong>SQL Code:</strong></p>\n<p>Copy</p>\n<p>Output:</p>\n<h2><strong>Overview</strong></h2>\n<p>While we can write database code directly into our endpoints, best practices dictate that all database logic exists in separate, modular methods. These files containing database access helpers are often called <strong>models</strong></p>\n<h2><strong>Follow Along</strong></h2>\n<p>To handle CRUD operations for a single resource, we would want to create a <strong>model</strong> (or database access file) containing the following methods:</p>\n<p>Each of these functions would use Knex logic to perform the necessary database operation.</p>\n<p>For each method, we can choose what value to return. For example, we may prefer findById() to return a single user object rather than an array.</p>\n<p>We can also use existing methods like findById() to help add() return the new user (instead of just the id).</p>\n<p>Once all methods are written as desired, we can export them like so:</p>\n<p>…and use the helpers in our endpoints</p>\n<p>There should no be knex code in the endpoints themselves.</p>\n<h1>Day #4:</h1>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5ecaf43d-ee27-4da1-aa3c-aa1d9d96cc40/Untitled.png\"></p>\n<h2><strong>Overview</strong></h2>\n<p>Normalization is the process of designing or refactoring database tables for maximum consistency and minimum redundancy.</p>\n<p>With objects, we're used to <em>denormalized</em> data, stored with ease of use and speed in mind. Non-normalized tables are considered ineffective in relational databases.</p>\n<h2><strong>Follow Along</strong></h2>\n<p><strong>Data normalization</strong> is a deep topic in database design. To begin thinking about it, we'll explore a few basic guidelines and some data examples that violate these rules.</p>\n<h3><strong>Normalization Guidelines</strong></h3>\n<ul>\n<li>Each record has a primary key.</li>\n<li>No fields are repeated.</li>\n<li>All fields relate directly to the key data.</li>\n<li>Each field entry contains a single data point.</li>\n<li>There are no redundant entries.</li>\n</ul>\n<h3><strong>Denormalized Data</strong></h3>\n<p><a href=\"https://www.notion.so/19a01f68a659470fb85bbe6906fb4bad\">Untitled</a></p>\n<p>This table has two issues. There is no proper id field (as multiple farms may have the same name), and multiple fields are representing the same type of data: animals.</p>\n<p><a href=\"https://www.notion.so/075ad6dd99ac48698625d7b56ca67bef\">Untitled</a></p>\n<p>While we have now eliminated the first two issues, we now have multiple entries in one field, separated by commas. This isn't good either, as its another example of denormalization. There is no \"array\" data type in a relational database, so each field must contain only one data point.</p>\n<p><a href=\"https://www.notion.so/375a15b0cb3f444a8698cd6cb3a08fe0\">Untitled</a></p>\n<p>Now we've solved the multiple fields issue, but we created repeating data (the farm field), which is also an example of denormalization. As well, we can see that if we were tracking additional ranch information (such as annual revenue), that field is only vaguely related to the animal information.</p>\n<p><strong>When these issues begin arising in your schema design, it means that you should separate information into two or more tables.</strong></p>\n<h3><strong>Anomalies</strong></h3>\n<p>Obeying the above guidelines prevent <strong>anomalies</strong> in your database when inserting, updating, or deleting. For example, imagine if the revenue of Beech Ranch changed. With our denormalized schema, it may get updated in some records but not others:</p>\n<p><a href=\"https://www.notion.so/e05f5b2e8ff141798adc6f188f56f31e\">Untitled</a></p>\n<p>Similarly, if Beech Ranch shut down, there would be three (if not more) records that needed to be deleted to remove a single farm.</p>\n<p>Thus a denormalized table opens the door for contradictory, confusing, and unusable data.</p>\n<h2><strong>Challenge</strong></h2>\n<p>What issues does the following table have?</p>\n<p><a href=\"https://www.notion.so/2793e8f6b70a47f48f9208779366e69e\">Untitled</a></p>\n<h2><strong>Overview</strong></h2>\n<p>There are three types of relationships:</p>\n<ul>\n<li>One to one.</li>\n<li>One to many.</li>\n<li>Many to many.</li>\n</ul>\n<p>Determining how data is related can provide a set of guidelines for table representation and guides the use of foreign keys to connect said tables.</p>\n<h2><strong>Follow Along</strong></h2>\n<h3><strong>One to One Relationships</strong></h3>\n<p>Imagine we are storing the financial projections for a series of farms.</p>\n<p>We may wish to attach fields like farm name, address, description, projected revenue, and projected expenses. We could divide these fields into two categories: information related to the farm directly (name, address, description) and information related to the financial projections (revenue, expenses).</p>\n<p>We would say that farms and projections have a <strong>one-to-one</strong> relationship. This is to say that every farm has exactly one projection, and every project corresponds to exactly one farm.</p>\n<p>This data can be represented in two tables: farms and projections</p>\n<p><a href=\"https://www.notion.so/944e594f3464473ea06383bfdea13265\">Untitled</a></p>\n<p><a href=\"https://www.notion.so/de32fcf6760e45f284707274433fee92\">Untitled</a></p>\n<p>The farm_id is the foreign key that links farms and projections together.</p>\n<p>Notes about one-to-one relationships:</p>\n<ul>\n<li>The foreign key should always have a unique constraint to prevent duplicate entries. In the example above, we wouldn't want to allow multiple projections records for one farm.</li>\n<li>The foreign key can be in either table. For example, we may have had a projection_id in the farms table instead. A good rule of thumb is to put the foreign key in whichever table is more auxiliary to the other.</li>\n<li>You can represent one-to-one data in a single table <em>without</em> creating anomalies. However, it is sometimes prudent to use two tables as shown above to keep separate concerns in separate tables.</li>\n</ul>\n<h3><strong>One to Many Relationships</strong></h3>\n<p>Now imagine, we are storing the full-time ranchers employed at each farm. In this case, each rancher would only work at one farm however, each farm may have multiple ranchers.</p>\n<p>This is called a <strong>one-to-many</strong> relationship.</p>\n<p>This is the most common type of relationship between entities. Some other examples:</p>\n<ul>\n<li>One customer can have many orders.</li>\n<li>One user can have many posts.</li>\n<li>One post can have many comments.</li>\n</ul>\n<p>Manage this type of relationship by adding a foreign key on the \"many\" table of the relationship that points to the primary key on the \"one\" table. Consider the farms and ranchers tables.</p>\n<p><a href=\"https://www.notion.so/7dfd2e69c9804a01845f2e9b716a5ac2\">Untitled</a></p>\n<p><a href=\"https://www.notion.so/c95f3d418db94ab4b4532eeba0e4f918\">Untitled</a></p>\n<p>In a many-to-many relationship, the foreign key (in this case farm_id) should <em>not</em> be unique.</p>\n<h3><strong>Many to Many Relationships</strong></h3>\n<p>If we want to track animals on a farm as well, we must explore the <strong>many-to-many</strong> relationship. A farm has multiple animals, and multiple of each type of animal is present at multiple different farms.</p>\n<p>Some other examples:</p>\n<ul>\n<li>an order can have many products and the same product will appear in many orders.</li>\n<li>a book can have more than one author, and an author can write more than one book.</li>\n</ul>\n<p>To model this relationship, we need to introduce an <strong>intermediary table</strong> that holds foreign keys that reference the primary key on the related tables. We now have a farms, animals, and farm_animals table.</p>\n<p><a href=\"https://www.notion.so/3269812d7c2a4578b1a9f6bc27e485b1\">Untitled</a></p>\n<p><a href=\"https://www.notion.so/c2642c7f632f489cb1b9639c80b8400d\">Untitled</a></p>\n<p><a href=\"https://www.notion.so/d0b0042c5e104edd9ed55e122af89084\">Untitled</a></p>\n<p>While each foreign key on the intermediary table is not unique, the combinations of keys should be unique.</p>\n<h2><strong>Overview</strong></h2>\n<p>The Knex query builder library also allows us to create multi-table schemas include foreign keys. However, there are a few extra things to keep in mind when designing a multi-table schema, such as using the correct order when creating tables, dropping tables, seeding data, and removing data.</p>\n<p>We have to consider the way that delete and updates through our API will impact related data.</p>\n<h2><strong>Follow Along</strong></h2>\n<h3><strong>Foreign Key Setup</strong></h3>\n<p>In Knex, foreign key restrictions don't automatically work. Whenever using foreign keys in your schema, add the following code to your knexfile. This will prevent users from entering bad data into a foreign key column.</p>\n<h3><strong>Migrations</strong></h3>\n<p>Let's look at how we might track our farms and ranchers using Knex. In our migration file's up function, we would want to create two tables:</p>\n<p>Note that the foreign key can only be created <em>after</em> the reference table.</p>\n<p>In the down function, the opposite is true. We always want to drop a table with a foreign key <em>before</em> dropping the table it references.</p>\n<p>In the case of a many-to-many relationship, the syntax for creating an intermediary table is identical, except for one additional piece. We need a way to make sure our combination of foreign keys is unique.</p>\n<h3><strong>Seeds</strong></h3>\n<p>Order is also a concern when seeding. We want to create seeds in the <strong>same</strong> order we created our tables. In other words, don't create a seed with a foreign key, until that reference record exists.</p>\n<p>In our example, make sure to write the 01-farms seed file and then the 02-ranchers seed file.</p>\n<p>However, we run into a problem with truncating our seeds, because we want to truncate 02-ranchers <em>before</em> 01-farms. A library called knex-cleaner provides an easy solution for us.</p>\n<p>Run knex seed:make 00-cleanup and npm install knex-cleaner. Inside the cleanup seed, use the following code.</p>\n<p>This removes all tables (excluding the two tables that track migrations) in the correct order before any seed files run.</p>\n<h3><strong>Cascading</strong></h3>\n<p>If a user attempt to delete a record that is referenced by another record (such as attempting to delete Morton Ranch when entries in our ranchers table reference that record), by default, the database will block the action. The same thing can happen when updating a record when a foreign key reference.</p>\n<p>If we want that to override this default, we can delete or update with <strong>cascade</strong>. With cascade, deleting a record also deletes all referencing records, we can set that up in our schema.</p>"},{"url":"/blog/","relativePath":"blog/index.md","relativeDir":"blog","base":"index.md","name":"index","frontmatter":{"title":"Blog","subtitle":"Exclusive Blog Content","image":"images/maroon-onion.gif","has_more_link":true,"more_link_text":"Read more","seo":{"title":"Blog","description":"These are blog posts... not nescisarily different from the docs section except these pieces are more subject to my own opinions.","extra":[{"name":"og:type","value":"website","keyName":"property"},{"name":"og:title","value":"Blog","keyName":"property"},{"name":"og:description","value":"This is the blog page","keyName":"property"},{"name":"og:image","value":"images/5.jpg","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Blog"},{"name":"twitter:description","value":"This is the blog page"},{"name":"twitter:image","value":"images/5.jpg","relativeUrl":true}]},"template":"blog"},"html":""},{"url":"/blog/my-medium/","relativePath":"blog/my-medium.md","relativeDir":"blog","base":"my-medium.md","name":"my-medium","frontmatter":{"title":"My Medium Articles","date":"2021-05-23","image":"images/medium.png","seo":{"title":"Medium Articles","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit","extra":[{"name":"og:type","value":"article","keyName":"property"},{"name":"og:title","value":"Medium Articles","keyName":"property"},{"name":"og:description","value":"Lorem ipsum dolor sit amet, consectetur adipiscing elit","keyName":"property"},{"name":"og:image","value":"images/medium.png","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Medium Articles"},{"name":"twitter:description","value":"Lorem ipsum dolor sit amet, consectetur adipiscing elit"},{"name":"twitter:image","value":"images/medium.png","relativeUrl":true}]},"template":"post","thumb_image":"images/web-dev-back.jpg"},"html":"<h1>A list of all of my articles to link to future posts</h1>\n<p>You should probably skip this one… seriously it’s just for internal use!</p>\n<hr>\n<h3>A list of all of my articles to link to future posts</h3>\n<p>You should probably skip this one… seriously it’s just for internal use!</p>\n<p><a href=\"https://bryanguner.medium.com/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/\"><strong>Bryan Guner - Medium</strong><br />\n<em>A plethora of front-end code playgrounds have appeared over the years. They offer a convenient way to experiment with…</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/codex/postgresql-cheat-sheet-718b813d3e31\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/codex/postgresql-cheat-sheet-718b813d3e31\"><strong>Postgresql Cheat Sheet</strong><br />\n<em>PostgreSQL commands</em>medium.com</a><a href=\"https://medium.com/codex/postgresql-cheat-sheet-718b813d3e31\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931\"><strong>Everything You Need to Get Started With VSCode + Extensions &#x26; Resources</strong><br />\n<em>Commands:</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/everything-you-need-to-get-started-with-vscode-extensions-resources-b9f4c8d91931\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/super-simple-intro-to-html-651d695f9bc\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/super-simple-intro-to-html-651d695f9bc\"><strong>Super Simple Intro To HTML</strong><br />\n<em>What is HTML, CSS &#x26; JS and why do we need all three?</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/super-simple-intro-to-html-651d695f9bc\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107\"><strong>Understanding Git (A Beginners Guide Containing Cheat Sheets &#x26; Resources)</strong><br />\n<em>Basic Git Work Flow.</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/understanding-git-a-beginners-guide-containing-cheat-sheets-resources-b50c9c01a107\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/git-tricks-57e8d0292285\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/git-tricks-57e8d0292285\"><strong>Git-Tricks</strong><br />\n<em>Refs</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/git-tricks-57e8d0292285\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522\"><strong>A Quick Guide to Big-O Notation, Memoization, Tabulation, and Sorting Algorithms by Example</strong><br />\n<em>Curating Complexity: A Guide to Big-O Notation</em>medium.com</a><a href=\"https://medium.com/star-gazers/a-quick-guide-to-big-o-notation-memoization-tabulation-and-sorting-algorithms-by-example-803ff193c522\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\"><strong>Python Study Guide for a JavaScript Programmer</strong><br />\n<em>A guide to commands in Python from what you know in JavaScript</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/python-study-guide-for-a-native-javascript-developer-5cfdf3d2bdfb\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/lists-stacks-and-queues-in-javascript-88466fae0fbb\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/lists-stacks-and-queues-in-javascript-88466fae0fbb\"><strong>Lists Stacks and Queue’s In JavaScript</strong><br />\n<em>A simple to follow guide to these fundamental data structures with animated gifs, diagrams, and code examples!</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/lists-stacks-and-queues-in-javascript-88466fae0fbb\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a\"><strong>Web Development Resources Part 3</strong><br />\n<em>I’m the psychological equivalent of a physical hoarder only instead of empty soda cans and dead racoons it’s lists of…</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/web-development-resources-part-3-f862ceb2b82a\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74\"><strong>My ‘awesome’ list of JavaScript resources</strong><br />\n<em>Everyone’s seen the ‘Awesome’ lists on GitHub… and they are indeed awesome… so today I am going to attempt to curate my…</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/my-take-on-awesome-javascript-243255451e74\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263\"><strong>Web Developer Resource List Part 2</strong><br />\n<em>Because I compile these things compulsively anyway…</em>medium.com</a><a href=\"https://medium.com/star-gazers/web-developer-resource-list-part-2-9c5cb56ab263\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/web-development-interview-part-3-826ae81a9107\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/web-development-interview-part-3-826ae81a9107\"><strong>Web Development Interview Part 3💻</strong><br />\n<em>This installment is going to be the least technically demanding thus far however these questions are a more realistic…</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/web-development-interview-part-3-826ae81a9107\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/star-gazers/the-web-developers-technical-interview-e347d7db3822\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/star-gazers/the-web-developers-technical-interview-e347d7db3822\"><strong>The Web Developer’s Technical Interview</strong><br />\n<em>Questions…. Answers… and links to the missing pieces.</em>medium.com</a><a href=\"https://medium.com/star-gazers/the-web-developers-technical-interview-e347d7db3822\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443\"><strong>Front End Interview Questions Part 2</strong><br />\n<em>These will focus more on vocabulary and concepts than the application driven approach in my last post!</em>medium.com</a><a href=\"https://medium.com/codex/front-end-interview-questions-part-2-86ddc0e91443\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/running-list-of-interesting-articles-tools-and-ideas-as-i-explore-them-b87a2f04d9a6\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/running-list-of-interesting-articles-tools-and-ideas-as-i-explore-them-b87a2f04d9a6\"><strong>Running List Of Interesting Articles, Tools and Ideas… as I Explore Them</strong><br />\n<em>Translation if you read this today (3/21/2021) it will be exceedingly short… because it’s just gonna accumulate entries…</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/running-list-of-interesting-articles-tools-and-ideas-as-i-explore-them-b87a2f04d9a6\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24\"><strong>The Best Cloud-Based Code Playgrounds of 2021 (Part 1)</strong><br />\n<em>A plethora of front-end code playgrounds have appeared over the years. They offer a convenient way to experiment with…</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/the-best-cloud-based-code-playgrounds-of-2021-part-1-cdae9448db24\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/codex/fundamental-data-structures-in-javascript-8f9f709c15b4\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/codex/fundamental-data-structures-in-javascript-8f9f709c15b4\"><strong>Fundamental Data Structures In JavaScript</strong><br />\n<em>Data structures in JavaScript</em>medium.com</a><a href=\"https://medium.com/codex/fundamental-data-structures-in-javascript-8f9f709c15b4\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/http-basics-8f02a96a834a\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/http-basics-8f02a96a834a\"><strong>HTTP Basics</strong><br />\n<em>“If you want to build a ship, don’t drum up the men and women to gather wood, divide the work, and give orders…</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/http-basics-8f02a96a834a\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35\"><strong>JavaScript Frameworks &#x26; Libraries</strong><br />\n<em>My Awesome JavaScript List Part 2</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/javascript-frameworks-libraries-35931e187a35\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://github.com/bgoonz/Cumulative-Resource-List/tree/master/README-s\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz/Cumulative-Resource-List/tree/master/README-s\"><strong>bgoonz/Cumulative-Resource-List</strong><br />\n<em>List of useful cheatsheets Inspired by @sindresorhus awesome and improved by these amazing contributors . If you see a…</em>github.com</a><a href=\"https://github.com/bgoonz/Cumulative-Resource-List/tree/master/README-s\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f\"><strong>My Favorite VSCode <em>Themes</em></strong><br />\nThemeslevelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/my-favorite-vscode-themes-9bab65af3f0f\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1\"><strong>JavaScript Rotate (Array) ProblemWalkthrough</strong><br />\n<em>Explanation for Rotate Right</em>medium.com</a><a href=\"https://medium.com/codex/javascript-rotate-array-problemwalkthrough-31deb19ebba1\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/everything-you-need-to-know-about-relational-databases-sql-postgresql-and-sequelize-to-build-8acb68284a98\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/everything-you-need-to-know-about-relational-databases-sql-postgresql-and-sequelize-to-build-8acb68284a98\"><strong>Everything You Need To Know About Relational Databases, SQL, PostgreSQL and Sequelize To Build…</strong><br />\n<em>For Front end developers who like myself struggle with making the jump to fullstack.</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/everything-you-need-to-know-about-relational-databases-sql-postgresql-and-sequelize-to-build-8acb68284a98\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db\"><strong>The Complete JavaScript Reference Guide</strong><br />\n<em>You will want to bookmark this</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/complete-javascript-reference-guide-64306cd6b0db\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/geekculture/modules-in-javascript-a55333e35978\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/geekculture/modules-in-javascript-a55333e35978\"><strong>Modules in Javascript</strong><br />\n<em>Differences between Node.js and browsers</em>medium.com</a><a href=\"https://medium.com/geekculture/modules-in-javascript-a55333e35978\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/an-introduction-to-markdown-bonus-markdown-templates-included-3497ce56de3\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/an-introduction-to-markdown-bonus-markdown-templates-included-3497ce56de3\"><strong>An Introduction to Markdown (Bonus Markdown Templates Included)</strong><br />\n<em>Basic Syntax Guide</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/an-introduction-to-markdown-bonus-markdown-templates-included-3497ce56de3\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/web-dev-resources-ec1975773d7d\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/web-dev-resources-ec1975773d7d\"><strong>Web Dev Resources</strong><br />\n<em>Web Development</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/web-dev-resources-ec1975773d7d\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p><a href=\"https://medium.com/codex/regular-expressions-4d8fb3eb146b\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://medium.com/codex/regular-expressions-4d8fb3eb146b\"><strong>Regular Expressions</strong><br />\n<em>description:</em>medium.com</a><a href=\"https://medium.com/codex/regular-expressions-4d8fb3eb146b\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/a-collection-of-my-most-useful-gist-entries-f4314f3ba3ab\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/a-collection-of-my-most-useful-gist-entries-f4314f3ba3ab\"><strong>A Collection of my most useful Gist Entries</strong><br />\n<em>This list is in no particular order!</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/a-collection-of-my-most-useful-gist-entries-f4314f3ba3ab\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/vscode-extension-readme-compilation-92c60342cc8a\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/vscode-extension-readme-compilation-92c60342cc8a\"><strong>VsCode Extension Readme Compilation</strong><br />\n<em>Markdown PDF</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/vscode-extension-readme-compilation-92c60342cc8a\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://javascript.plainenglish.io/learn-css-so-that-your-site-doesnt-look-like-garbage-938871b4521a\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://javascript.plainenglish.io/learn-css-so-that-your-site-doesnt-look-like-garbage-938871b4521a\"><strong>Learn CSS So That Your Site Doesn’t Look Like Garbage</strong><br />\n<em>CSS Selectors</em>javascript.plainenglish.io</a><a href=\"https://javascript.plainenglish.io/learn-css-so-that-your-site-doesnt-look-like-garbage-938871b4521a\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/postgresql-setup-for-windows-wsl-ubuntu-801672ab7089\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/postgresql-setup-for-windows-wsl-ubuntu-801672ab7089\"><strong>PostgreSQL Setup For Windows &#x26; WSL/Ubuntu</strong><br />\n<em>If you follow this guide to a tee… you will install PostgreSQL itself on your Windows installation. Then, you will…</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/postgresql-setup-for-windows-wsl-ubuntu-801672ab7089\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/emmet-cheat-sheet-24758e628d37\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/emmet-cheat-sheet-24758e628d37\"><strong>Emmet Cheat Sheet</strong><br />\n<em>EMMET</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/emmet-cheat-sheet-24758e628d37\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/express-quick-sheet-8f93762c59ca\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/express-quick-sheet-8f93762c59ca\"><strong>Express Quick Sheet</strong><br />\n<em>Settings</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/express-quick-sheet-8f93762c59ca\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/deploy-react-app-to-heroku-using-postgres-express-70b7ea807986\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/deploy-react-app-to-heroku-using-postgres-express-70b7ea807986\"><strong>Deploy React App To Heroku Using Postgres &#x26; Express</strong><br />\n<em>Heroku is an web application that makes deploying applications easy for a beginner.</em>bryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/deploy-react-app-to-heroku-using-postgres-express-70b7ea807986\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p><a href=\"https://levelup.gitconnected.com/basic-web-development-environment-setup-9f36c3f15afe\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://levelup.gitconnected.com/basic-web-development-environment-setup-9f36c3f15afe\"><strong>Basic Web Development Environment Setup</strong><br />\n<em>Windows Subsystem for Linux (WSL) and Ubuntu</em>levelup.gitconnected.com</a><a href=\"https://levelup.gitconnected.com/basic-web-development-environment-setup-9f36c3f15afe\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\"></a></p>\n<p><a href=\"https://bryanguner.medium.com/fetch-quick-sheet-8872650742b4\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://bryanguner.medium.com/fetch-quick-sheet-8872650742b4\"><strong><em>Fetch</em> Quick Sheet</strong><br />\nFetchbryanguner.medium.com</a><a href=\"https://bryanguner.medium.com/fetch-quick-sheet-8872650742b4\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\"></a></p>\n<p>By <a href=\"https://medium.com/@bryanguner\" class=\"p-author h-card\">Bryan Guner</a> on <a href=\"https://medium.com/p/1f6f88ebdf5b\">March 22, 2021</a>.</p>\n<p><a href=\"https://medium.com/@bryanguner/a-list-of-all-of-my-articles-to-link-to-future-posts-1f6f88ebdf5b\" class=\"p-canonical\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on May 23, 2021.</p>"},{"url":"/blog/git-gateway/","relativePath":"blog/git-gateway.md","relativeDir":"blog","base":"git-gateway.md","name":"git-gateway","frontmatter":{"title":"Git Bash","subtitle":"understanding git bsh","date":"2021-09-30","thumb_image_alt":"lorem-ipsum","excerpt":"lorem-ipsum","seo":{"title":"","description":"","robots":[],"extra":[]},"template":"post"},"html":"<h2>Lorem ipsum</h2>\n<p>Lorem ipsum dolor sit amet, <strong>consectetur adipiscing elit</strong>, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n<ul>\n<li>Lorem ipsum</li>\n<li>dolor sit amet</li>\n</ul>"},{"url":"/blog/platform-docs/","relativePath":"blog/platform-docs.md","relativeDir":"blog","base":"platform-docs.md","name":"platform-docs","frontmatter":{"title":"Netlify CMS Intro","date":"2021-05-23","image":"images/curious-europa.gif","seo":{"title":"Platform Docs","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit","extra":[{"name":"og:type","value":"article","keyName":"property"},{"name":"og:title","value":"Platform Docs","keyName":"property"},{"name":"og:description","value":"Lorem ipsum dolor sit amet, consectetur adipiscing elit","keyName":"property"},{"name":"og:image","value":"images/curious-europa.gif","keyName":"property","relativeUrl":true},{"name":"twitter:card","value":"summary_large_image"},{"name":"twitter:title","value":"Platform Docs"},{"name":"twitter:description","value":"Lorem ipsum dolor sit amet, consectetur adipiscing elit"},{"name":"twitter:image","value":"images/curious-europa.gif","relativeUrl":true}]},"template":"post","thumb_image":"images/redu-squarex.jpg"},"html":"<h1>Add to Your Site | Netlify CMS</h1>\n<blockquote>\n<p>Open source content management for your Git workflow</p>\n</blockquote>\n<p>You can adapt Netlify CMS to a wide variety of projects. It works with any content written in markdown, JSON, YAML, or TOML files, stored in a repo on <a href=\"https://github.com/\">GitHub</a>, <a href=\"https://about.gitlab.com/\">GitLab</a>, or <a href=\"https://bitbucket.org/\">Bitbucket</a>. You can also create your own custom backend.</p>\n<p>This tutorial guides you through the steps for adding Netlify CMS to a site that's built with a common <a href=\"https://www.staticgen.com/\">static site generator</a>, like Jekyll, Hugo, Hexo, or Gatsby. Alternatively, you can <a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/start-with-a-template\">start from a template</a> or dive right into <a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/configuration-options\">configuration options</a>.</p>\n<h2><a href=\"#app-file-structure\"></a>App File Structure</h2>\n<p>A static <code>admin</code> folder contains all Netlify CMS files, stored at the root of your published site. Where you store this folder in the source files depends on your static site generator. Here's the static file location for a few of the most popular static site generators:</p>\n<table>\n<thead>\n<tr>\n<th>These generators</th>\n<th>store static files in</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Jekyll, GitBook</td>\n<td><code>/</code> (project root)</td>\n</tr>\n<tr>\n<td>Hugo, Gatsby, Nuxt, Gridsome, Zola, Sapper</td>\n<td><code>/static</code></td>\n</tr>\n<tr>\n<td>Next</td>\n<td><code>/public</code></td>\n</tr>\n<tr>\n<td>Hexo, Middleman, Jigsaw</td>\n<td><code>/source</code></td>\n</tr>\n<tr>\n<td>Spike</td>\n<td><code>/views</code></td>\n</tr>\n<tr>\n<td>Wyam</td>\n<td><code>/input</code></td>\n</tr>\n<tr>\n<td>Pelican</td>\n<td><code>/content</code></td>\n</tr>\n<tr>\n<td>VuePress</td>\n<td><code>/.vuepress/public</code></td>\n</tr>\n<tr>\n<td>Elmstatic</td>\n<td><code>/_site</code></td>\n</tr>\n<tr>\n<td>11ty</td>\n<td><code>/_site</code></td>\n</tr>\n<tr>\n<td>preact-cli</td>\n<td><code>/src/static</code></td>\n</tr>\n</tbody>\n</table>\n<p>If your generator isn't listed here, you can check its documentation, or as a shortcut, look in your project for a <code>css</code> or <code>images</code> folder. The contents of folders like that are usually processed as static files, so it's likely you can store your <code>admin</code> folder next to those. (When you've found the location, feel free to add it to these docs by <a href=\"https://github.com/netlify/netlify-cms/blob/master/CONTRIBUTING.md#pull-requests\">filing a pull request</a>!)</p>\n<p>Inside the <code>admin</code> folder, you'll create two files:</p>\n<pre><code>admin\n ├ index.html\n └ config.yml\n</code></pre>\n<p>The first file, <code>admin/index.html</code>, is the entry point for the Netlify CMS admin interface. This means that users navigate to <code>yoursite.com/admin/</code> to access it. On the code side, it's a basic HTML starter page that loads the Netlify CMS JavaScript file. In this example, we pull the file from a public CDN:</p>\n<pre><code>&#x3C;!doctype html>\n&#x3C;html>\n&#x3C;head>\n  &#x3C;meta charset=\"utf-8\" />\n  &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  &#x3C;title>Content Manager&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n\n  &#x3C;script src=\"https://unpkg.com/netlify-cms@^2.0.0/dist/netlify-cms.js\">&#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>In the code above the <code>script</code> is loaded from the <code>unpkg</code> CDN. Should there be any issue, <code>jsDelivr</code> can be used as an alternative source. Simply set the <code>src</code> to <code>https://cdn.jsdelivr.net/npm/netlify-cms@^2.0.0/dist/netlify-cms.js</code></p>\n<p>The second file, <code>admin/config.yml</code>, is the heart of your Netlify CMS installation, and a bit more complex. The <a href=\"#configuration\">Configuration</a> section covers the details.</p>\n<h3><a href=\"#installing-with-npm\"></a>Installing with npm</h3>\n<p>You can also use Netlify CMS as an npm module. Wherever you import Netlify CMS, it automatically runs, taking over the current page. Make sure the script that imports it only runs on your CMS page. First install the package and save it to your project:</p>\n<pre><code>npm install netlify-cms-app --save\n</code></pre>\n<p>Then import it (assuming your project has tooling for imports):</p>\n<pre><code>import CMS from 'netlify-cms-app'\n\nCMS.init()\n\nCMS.registerPreviewTemplate('my-template', MyTemplate)\n</code></pre>\n<h2><a href=\"#configuration\"></a>Configuration</h2>\n<p>Configuration is different for every site, so we'll break it down into parts. Add all the code snippets in this section to your <code>admin/config.yml</code> file.</p>\n<h3><a href=\"#backend\"></a>Backend</h3>\n<p>We're using <a href=\"https://www.netlify.com/\">Netlify</a> for our hosting and authentication in this tutorial, so backend configuration is fairly straightforward.</p>\n<p>For GitHub and GitLab repositories, you can start your Netlify CMS <code>config.yml</code> file with these lines:</p>\n<pre><code>backend:\n  name: git-gateway\n  branch: master\n</code></pre>\n<p><em>(For Bitbucket repositories, use the <a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/docs/bitbucket-backend\">Bitbucket backend</a> instructions instead.)</em></p>\n<p>The configuration above specifies your backend protocol and your publication branch. Git Gateway is an open source API that acts as a proxy between authenticated users of your site and your site repo. (We'll get to the details of that in the <a href=\"#authentication\">Authentication section</a> below.) If you leave out the <code>branch</code> declaration, it defaults to <code>master</code>.</p>\n<h3><a href=\"#editorial-workflow\"></a>Editorial Workflow</h3>\n<p><strong>Note:</strong> Editorial workflow works with GitHub repositories, and support for GitLab and Bitbucket is <a href=\"chrome-extension://cjedbglnccaioiolemnfhjncicchinao/docs/beta-features/#gitlab-and-bitbucket-editorial-workflow-support\">in beta</a>.</p>\n<p>By default, saving a post in the CMS interface pushes a commit directly to the publica